
task48Cplus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008510  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080086a0  080086a0  000186a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c8  080089c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d0  080089d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080089e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  20000078  08008a58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b78  08008a58  00021b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dcc1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f1  00000000  00000000  0003dd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00042360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00043bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bdd2  00000000  00000000  000452e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cf5c  00000000  00000000  000710ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102996  00000000  00000000  0008e016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001909ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000744c  00000000  00000000  001909fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008688 	.word	0x08008688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008688 	.word	0x08008688

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "Button.h"
#include "main.h"
#include <stdio.h>
uint32_t counter = 0;

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	4613      	mov	r3, r2
 80005b0:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	88fa      	ldrh	r2, [r7, #6]
 80005bc:	821a      	strh	r2, [r3, #16]
}
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4618      	mov	r0, r3
 80005c2:	3714      	adds	r7, #20
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68da      	ldr	r2, [r3, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8a1b      	ldrh	r3, [r3, #16]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4610      	mov	r0, r2
 80005e4:	f001 fa00 	bl	80019e8 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d005      	beq.n	8000604 <_ZN6Button9interruptEv+0x38>
		timeTickOn = HAL_GetTick();
 80005f8:	f000 ff2e 	bl	8001458 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	605a      	str	r2, [r3, #4]
		else{
			state = BUTTON_STATE;
			   //MainTimer_registerCallback(Button_onTimerInterrupt , button);
		}
	}
}
 8000602:	e036      	b.n	8000672 <_ZN6Button9interruptEv+0xa6>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	68da      	ldr	r2, [r3, #12]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	8a1b      	ldrh	r3, [r3, #16]
 800060c:	4619      	mov	r1, r3
 800060e:	4610      	mov	r0, r2
 8000610:	f001 f9ea 	bl	80019e8 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b01      	cmp	r3, #1
 8000618:	bf0c      	ite	eq
 800061a:	2301      	moveq	r3, #1
 800061c:	2300      	movne	r3, #0
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d026      	beq.n	8000672 <_ZN6Button9interruptEv+0xa6>
		timeTickOff = HAL_GetTick();
 8000624:	f000 ff18 	bl	8001458 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	609a      	str	r2, [r3, #8]
		delayTick = timeTickOff - timeTickOn;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	60fb      	str	r3, [r7, #12]
		if(delayTick > 500){
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000640:	d906      	bls.n	8000650 <_ZN6Button9interruptEv+0x84>
			state = BUTTON_LONG_PRESS;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2203      	movs	r2, #3
 8000646:	701a      	strb	r2, [r3, #0]
		    printf("Long \n\r");
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <_ZN6Button9interruptEv+0xb0>)
 800064a:	f006 fbb9 	bl	8006dc0 <iprintf>
}
 800064e:	e010      	b.n	8000672 <_ZN6Button9interruptEv+0xa6>
		else if (state == BUTTON_STATE) {
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d109      	bne.n	800066c <_ZN6Button9interruptEv+0xa0>
			state = BUTTON_DOUBLE_PRESS;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2204      	movs	r2, #4
 800065c:	701a      	strb	r2, [r3, #0]
			counter = 0;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_ZN6Button9interruptEv+0xb4>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
			printf("Double \n\r");
 8000664:	4807      	ldr	r0, [pc, #28]	; (8000684 <_ZN6Button9interruptEv+0xb8>)
 8000666:	f006 fbab 	bl	8006dc0 <iprintf>
}
 800066a:	e002      	b.n	8000672 <_ZN6Button9interruptEv+0xa6>
			state = BUTTON_STATE;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	080086a0 	.word	0x080086a0
 8000680:	20000094 	.word	0x20000094
 8000684:	080086a8 	.word	0x080086a8

08000688 <_ZN6Button10checkStateEv>:
			printf("One \n\r");
		}
	}
}

StateButton Button::checkState(){
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	return state;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <_ZN10CliCommandC1EPKc+0x28>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3304      	adds	r3, #4
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fcd5 	bl	8007066 <strcpy>
	}
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	08008778 	.word	0x08008778

080006cc <_ZN10CliCommandD1Ev>:
	virtual void doCommand() = 0;
	virtual ~CliCommand(){}
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <_ZN10CliCommandD1Ev+0x1c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	08008778 	.word	0x08008778

080006ec <_ZN10CliCommandD0Ev>:
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ffe9 	bl	80006cc <_ZN10CliCommandD1Ev>
 80006fa:	2118      	movs	r1, #24
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f006 f9f5 	bl	8006aec <_ZdlPvj>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <_ZN8LedOnCmdC1EPKcP3Led>:
extern CliContainer CliContainer;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ffbf 	bl	80006a0 <_ZN10CliCommandC1EPKc>
 8000722:	4a05      	ldr	r2, [pc, #20]	; (8000738 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	4618      	mov	r0, r3
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08008764 	.word	0x08008764

0800073c <_ZN8LedOnCmd9doCommandEv>:
	void doCommand() override {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
		_led->on();
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fa39 	bl	8000bc0 <_ZN3Led2onEv>
	}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff99 	bl	80006a0 <_ZN10CliCommandC1EPKc>
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	619a      	str	r2, [r3, #24]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08008750 	.word	0x08008750

08000788 <_ZN9LedOffCmd9doCommandEv>:
	void doCommand() override {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
		_led->off();
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fa23 	bl	8000be0 <_ZN3Led3offEv>
	}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <_Z7CliInitv>:
};


void CliInit()
{
 80007a4:	b598      	push	{r3, r4, r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	//////////////////ledR//////////////////////////////
	CliContainer.add (new LedOnCmd("ledRedOn", &ledR));
 80007a8:	201c      	movs	r0, #28
 80007aa:	f006 f9a1 	bl	8006af0 <_Znwj>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461c      	mov	r4, r3
 80007b2:	4a1a      	ldr	r2, [pc, #104]	; (800081c <_Z7CliInitv+0x78>)
 80007b4:	491a      	ldr	r1, [pc, #104]	; (8000820 <_Z7CliInitv+0x7c>)
 80007b6:	4620      	mov	r0, r4
 80007b8:	f7ff ffa8 	bl	800070c <_ZN8LedOnCmdC1EPKcP3Led>
 80007bc:	4621      	mov	r1, r4
 80007be:	4819      	ldr	r0, [pc, #100]	; (8000824 <_Z7CliInitv+0x80>)
 80007c0:	f000 f8bd 	bl	800093e <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledRedOff", &ledR));
 80007c4:	201c      	movs	r0, #28
 80007c6:	f006 f993 	bl	8006af0 <_Znwj>
 80007ca:	4603      	mov	r3, r0
 80007cc:	461c      	mov	r4, r3
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <_Z7CliInitv+0x78>)
 80007d0:	4915      	ldr	r1, [pc, #84]	; (8000828 <_Z7CliInitv+0x84>)
 80007d2:	4620      	mov	r0, r4
 80007d4:	f7ff ffc0 	bl	8000758 <_ZN9LedOffCmdC1EPKcP3Led>
 80007d8:	4621      	mov	r1, r4
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <_Z7CliInitv+0x80>)
 80007dc:	f000 f8af 	bl	800093e <_ZN12CliContainer3addEP10CliCommand>

	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledBlueOn", &ledR));
 80007e0:	201c      	movs	r0, #28
 80007e2:	f006 f985 	bl	8006af0 <_Znwj>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461c      	mov	r4, r3
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <_Z7CliInitv+0x78>)
 80007ec:	490f      	ldr	r1, [pc, #60]	; (800082c <_Z7CliInitv+0x88>)
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff ff8c 	bl	800070c <_ZN8LedOnCmdC1EPKcP3Led>
 80007f4:	4621      	mov	r1, r4
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <_Z7CliInitv+0x80>)
 80007f8:	f000 f8a1 	bl	800093e <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledBlueOff", &ledR));
 80007fc:	201c      	movs	r0, #28
 80007fe:	f006 f977 	bl	8006af0 <_Znwj>
 8000802:	4603      	mov	r3, r0
 8000804:	461c      	mov	r4, r3
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <_Z7CliInitv+0x78>)
 8000808:	4909      	ldr	r1, [pc, #36]	; (8000830 <_Z7CliInitv+0x8c>)
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff ffa4 	bl	8000758 <_ZN9LedOffCmdC1EPKcP3Led>
 8000810:	4621      	mov	r1, r4
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <_Z7CliInitv+0x80>)
 8000814:	f000 f893 	bl	800093e <_ZN12CliContainer3addEP10CliCommand>
}
 8000818:	bf00      	nop
 800081a:	bd98      	pop	{r3, r4, r7, pc}
 800081c:	20000244 	.word	0x20000244
 8000820:	080086bc 	.word	0x080086bc
 8000824:	200001f0 	.word	0x200001f0
 8000828:	080086c8 	.word	0x080086c8
 800082c:	080086d4 	.word	0x080086d4
 8000830:	080086e0 	.word	0x080086e0

08000834 <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <_ZN9LedOffCmdD1Ev+0x20>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff41 	bl	80006cc <_ZN10CliCommandD1Ev>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08008750 	.word	0x08008750

08000858 <_ZN9LedOffCmdD0Ev>:
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ffe7 	bl	8000834 <_ZN9LedOffCmdD1Ev>
 8000866:	211c      	movs	r1, #28
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f006 f93f 	bl	8006aec <_ZdlPvj>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_ZN8LedOnCmdD1Ev+0x20>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff1f 	bl	80006cc <_ZN10CliCommandD1Ev>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08008764 	.word	0x08008764

0800089c <_ZN8LedOnCmdD0Ev>:
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ffe7 	bl	8000878 <_ZN8LedOnCmdD1Ev>
 80008aa:	211c      	movs	r1, #28
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f006 f91d 	bl	8006aec <_ZdlPvj>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
		return _name;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3304      	adds	r3, #4
	}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <_ZN12CliContainerC1Ev>:
#include "Communication.h"
#include <stdlib.h>



CliContainer::CliContainer()
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
{
	m_counter = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	651a      	str	r2, [r3, #80]	; 0x50
	memset(m_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2250      	movs	r2, #80	; 0x50
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f006 f981 	bl	8006bf0 <memset>
}
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b13      	cmp	r3, #19
 8000908:	dc14      	bgt.n	8000934 <_ZN12CliContainerD1Ev+0x3c>
		if (m_CliCommand[i] != NULL) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d00a      	beq.n	800092c <_ZN12CliContainerD1Ev+0x34>
			delete m_CliCommand[i];
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68fa      	ldr	r2, [r7, #12]
 800091a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <_ZN12CliContainerD1Ev+0x34>
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	3208      	adds	r2, #8
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e7e7      	b.n	8000904 <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
	if (m_counter < MAX_CLI) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800094c:	2b13      	cmp	r3, #19
 800094e:	dc0a      	bgt.n	8000966 <_ZN12CliContainer3addEP10CliCommand+0x28>
		m_CliCommand[m_counter] = pCliCommand;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6839      	ldr	r1, [r7, #0]
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		m_counter++;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_ZN12CliContainer4CallEPc>:

int CliContainer::Call (char* cmdname){
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < m_counter; i++){
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	429a      	cmp	r2, r3
 8000988:	da25      	bge.n	80009d6 <_ZN12CliContainer4CallEPc+0x64>
		if(strcmp(cmdname, m_CliCommand[i]->getName())==0){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff92 	bl	80008bc <_ZNK10CliCommand7getNameEv>
 8000998:	4603      	mov	r3, r0
 800099a:	4619      	mov	r1, r3
 800099c:	6838      	ldr	r0, [r7, #0]
 800099e:	f7ff fc17 	bl	80001d0 <strcmp>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00d      	beq.n	80009ce <_ZN12CliContainer4CallEPc+0x5c>
			m_CliCommand[i]->doCommand();
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4608      	mov	r0, r1
 80009c8:	4798      	blx	r3
			return 1;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e004      	b.n	80009d8 <_ZN12CliContainer4CallEPc+0x66>
	for (int i = 0; i < m_counter; i++){
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	e7d4      	b.n	8000980 <_ZN12CliContainer4CallEPc+0xe>
		}
	}
	return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_write>:
static int cmdcount = 0;
static int cmdprint = 0;

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <_write+0x28>)
 80009f8:	f002 fd26 	bl	8003448 <HAL_UART_Transmit>
	return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000150 	.word	0x20000150

08000a0c <_Z22Communication_commTaskv>:


///////////////////////////////////////////////////////////////////////

int Communication_commTask()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000a12:	1db9      	adds	r1, r7, #6
 8000a14:	230a      	movs	r3, #10
 8000a16:	2201      	movs	r2, #1
 8000a18:	4839      	ldr	r0, [pc, #228]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000a1a:	f002 fda9 	bl	8003570 <HAL_UART_Receive>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d025      	beq.n	8000a74 <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8000a28:	4b35      	ldr	r3, [pc, #212]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2208      	movs	r2, #8
 8000a46:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000a48:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	da0d      	bge.n	8000a70 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	492a      	ldr	r1, [pc, #168]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000a5c:	600a      	str	r2, [r1, #0]
 8000a5e:	4a2b      	ldr	r2, [pc, #172]	; (8000b0c <_Z22Communication_commTaskv+0x100>)
 8000a60:	1899      	adds	r1, r3, r2
 8000a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a66:	2201      	movs	r2, #1
 8000a68:	4825      	ldr	r0, [pc, #148]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000a6a:	f002 fced 	bl	8003448 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8000a6e:	e7eb      	b.n	8000a48 <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e040      	b.n	8000af6 <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	2b0d      	cmp	r3, #13
 8000a78:	d016      	beq.n	8000aa8 <_Z22Communication_commTaskv+0x9c>
 8000a7a:	79bb      	ldrb	r3, [r7, #6]
 8000a7c:	2b0a      	cmp	r3, #10
 8000a7e:	d013      	beq.n	8000aa8 <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b63      	cmp	r3, #99	; 0x63
 8000a86:	dd05      	ble.n	8000a94 <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	491b      	ldr	r1, [pc, #108]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000a9c:	600a      	str	r2, [r1, #0]
 8000a9e:	79b9      	ldrb	r1, [r7, #6]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <_Z22Communication_commTaskv+0x100>)
 8000aa2:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e026      	b.n	8000af6 <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	da0d      	bge.n	8000ad0 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	4912      	ldr	r1, [pc, #72]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000abc:	600a      	str	r2, [r1, #0]
 8000abe:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <_Z22Communication_commTaskv+0x100>)
 8000ac0:	1899      	adds	r1, r3, r2
 8000ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000aca:	f002 fcbd 	bl	8003448 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8000ace:	e7eb      	b.n	8000aa8 <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	490e      	ldr	r1, [pc, #56]	; (8000b10 <_Z22Communication_commTaskv+0x104>)
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <_Z22Communication_commTaskv+0xf4>)
 8000ada:	f002 fcb5 	bl	8003448 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <_Z22Communication_commTaskv+0x100>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_Z22Communication_commTaskv+0xfc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <_Z22Communication_commTaskv+0xf8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000150 	.word	0x20000150
 8000b04:	20000100 	.word	0x20000100
 8000b08:	200000fc 	.word	0x200000fc
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	080086ec 	.word	0x080086ec

08000b14 <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	; 0x48
 8000b18:	af02      	add	r7, sp, #8
	char cmd[20];
	char state[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s %s", cmd, state, param );
 8000b1a:	f107 0114 	add.w	r1, r7, #20
 8000b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000b22:	463b      	mov	r3, r7
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	460b      	mov	r3, r1
 8000b28:	490e      	ldr	r1, [pc, #56]	; (8000b64 <_Z27Communication_handleCommandv+0x50>)
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <_Z27Communication_handleCommandv+0x54>)
 8000b2c:	f006 fa2a 	bl	8006f84 <siscanf>
 8000b30:	63f8      	str	r0, [r7, #60]	; 0x3c
   if (params == 0){
 8000b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d011      	beq.n	8000b5c <_Z27Communication_handleCommandv+0x48>
	   return;
   }

   if(CliContainer.Call(cmd) == 0){
 8000b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <_Z27Communication_handleCommandv+0x58>)
 8000b40:	f7ff ff17 	bl	8000972 <_ZN12CliContainer4CallEPc>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf0c      	ite	eq
 8000b4a:	2301      	moveq	r3, #1
 8000b4c:	2300      	movne	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <_Z27Communication_handleCommandv+0x4a>
   printf("Invalid command\r\n");
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <_Z27Communication_handleCommandv+0x5c>)
 8000b56:	f006 f9b9 	bl	8006ecc <puts>
 8000b5a:	e000      	b.n	8000b5e <_Z27Communication_handleCommandv+0x4a>
	   return;
 8000b5c:	bf00      	nop
   }
}
 8000b5e:	3740      	adds	r7, #64	; 0x40
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	080086f0 	.word	0x080086f0
 8000b68:	20000098 	.word	0x20000098
 8000b6c:	200001f0 	.word	0x200001f0
 8000b70:	080086fc 	.word	0x080086fc

08000b74 <Entry_comTask>:

extern "C" void Entry_comTask()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  while(1)
  {
	  if (Communication_commTask()){
 8000b78:	f7ff ff48 	bl	8000a0c <_Z22Communication_commTaskv>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf14      	ite	ne
 8000b82:	2301      	movne	r3, #1
 8000b84:	2300      	moveq	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <Entry_comTask+0x1c>
		  Communication_handleCommand();
 8000b8c:	f7ff ffc2 	bl	8000b14 <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f003 fb37 	bl	8004204 <osDelay>
	  if (Communication_commTask()){
 8000b96:	e7ef      	b.n	8000b78 <Entry_comTask+0x4>

08000b98 <_ZN3LedC1EP12GPIO_TypeDeft>:
#include "Led.h"
#include "main.h"
#include <stdio.h>

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	601a      	str	r2, [r3, #0]
	_GPIO_Pin = GPIO_Pin;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	88fa      	ldrh	r2, [r7, #6]
 8000bb0:	809a      	strh	r2, [r3, #4]
}
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_ZN3Led2onEv>:

void Led::on()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6818      	ldr	r0, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	889b      	ldrh	r3, [r3, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f000 ff20 	bl	8001a18 <HAL_GPIO_WritePin>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZN3Led3offEv>:

void Led::off()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f000 ff10 	bl	8001a18 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fbb8 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f82a 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f8e2 	bl	8000dd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c10:	f000 f8b0 	bl	8000d74 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000c14:	f000 f876 	bl	8000d04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  mainloop();
 8000c18:	f000 f976 	bl	8000f08 <mainloop>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c1c:	f003 fa16 	bl	800404c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <main+0x48>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <main+0x4c>)
 8000c26:	f003 fa5b 	bl	80040e0 <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <main+0x50>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(Entry_comTask, NULL, &comTask_attributes);
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <main+0x54>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <main+0x58>)
 8000c36:	f003 fa53 	bl	80040e0 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <main+0x5c>)
 8000c3e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c40:	f003 fa28 	bl	8004094 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0x44>
 8000c46:	bf00      	nop
 8000c48:	08008784 	.word	0x08008784
 8000c4c:	08000ed1 	.word	0x08000ed1
 8000c50:	200001d4 	.word	0x200001d4
 8000c54:	080087a8 	.word	0x080087a8
 8000c58:	08000b75 	.word	0x08000b75
 8000c5c:	200001d8 	.word	0x200001d8

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b096      	sub	sp, #88	; 0x58
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2244      	movs	r2, #68	; 0x44
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 ffbe 	bl	8006bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c86:	f000 ff05 	bl	8001a94 <HAL_PWREx_ControlVoltageScaling>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c90:	f000 f926 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 ff3c 	bl	8001b40 <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cce:	f000 f907 	bl	8000ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fb04 	bl	80022f8 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cf6:	f000 f8f3 	bl	8000ee0 <Error_Handler>
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	3758      	adds	r7, #88	; 0x58
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <MX_TIM6_Init+0x6c>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d1c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d2a:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d38:	f002 f9be 	bl	80030b8 <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d42:	f000 f8cd 	bl	8000ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_TIM6_Init+0x68>)
 8000d54:	f002 faa2 	bl	800329c <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000d5e:	f000 f8bf 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000104 	.word	0x20000104
 8000d70:	40001000 	.word	0x40001000

08000d74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <MX_USART2_UART_Init+0x5c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x58>)
 8000db8:	f002 faf8 	bl	80033ac <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dc2:	f000 f88d 	bl	8000ee0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000150 	.word	0x20000150
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a36      	ldr	r2, [pc, #216]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2160      	movs	r1, #96	; 0x60
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fde1 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <MX_GPIO_Init+0xf8>)
 8000e6e:	f000 fc11 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin;
 8000e72:	2360      	movs	r3, #96	; 0x60
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f000 fc02 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e96:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f000 fbf3 	bl	8001694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	2028      	movs	r0, #40	; 0x28
 8000eb4:	f000 fbb7 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb8:	2028      	movs	r0, #40	; 0x28
 8000eba:	f000 fbd0 	bl	800165e <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000800 	.word	0x48000800

08000ed0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f003 f993 	bl	8004204 <osDelay>
 8000ede:	e7fb      	b.n	8000ed8 <StartDefaultTask+0x8>

08000ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee4:	b672      	cpsid	i
}
 8000ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <Error_Handler+0x8>
	...

08000eec <HAL_GPIO_EXTI_Callback>:
	}

}

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 8000ef6:	4803      	ldr	r0, [pc, #12]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x18>)
 8000ef8:	f7ff fb68 	bl	80005cc <_ZN6Button9interruptEv>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200001dc 	.word	0x200001dc

08000f08 <mainloop>:


extern "C" void mainloop() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	CliInit();
 8000f0c:	f7ff fc4a 	bl	80007a4 <_Z7CliInitv>
	ledB.on();
 8000f10:	4815      	ldr	r0, [pc, #84]	; (8000f68 <mainloop+0x60>)
 8000f12:	f7ff fe55 	bl	8000bc0 <_ZN3Led2onEv>
	while(1){
		if (Communication_commTask()){
 8000f16:	f7ff fd79 	bl	8000a0c <_Z22Communication_commTaskv>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	bf14      	ite	ne
 8000f20:	2301      	movne	r3, #1
 8000f22:	2300      	moveq	r3, #0
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <mainloop+0x26>
				  Communication_handleCommand();
 8000f2a:	f7ff fdf3 	bl	8000b14 <_Z27Communication_handleCommandv>
		}
		if(button.checkState() == BUTTON_LONG_PRESS){
 8000f2e:	480f      	ldr	r0, [pc, #60]	; (8000f6c <mainloop+0x64>)
 8000f30:	f7ff fbaa 	bl	8000688 <_ZN6Button10checkStateEv>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	bf0c      	ite	eq
 8000f3a:	2301      	moveq	r3, #1
 8000f3c:	2300      	movne	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <mainloop+0x42>
			ledB.off();
 8000f44:	4808      	ldr	r0, [pc, #32]	; (8000f68 <mainloop+0x60>)
 8000f46:	f7ff fe4b 	bl	8000be0 <_ZN3Led3offEv>
		}
		if(button.checkState() == BUTTON_DOUBLE_PRESS){
 8000f4a:	4808      	ldr	r0, [pc, #32]	; (8000f6c <mainloop+0x64>)
 8000f4c:	f7ff fb9c 	bl	8000688 <_ZN6Button10checkStateEv>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf0c      	ite	eq
 8000f56:	2301      	moveq	r3, #1
 8000f58:	2300      	movne	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0da      	beq.n	8000f16 <mainloop+0xe>
			ledR.off();
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <mainloop+0x68>)
 8000f62:	f7ff fe3d 	bl	8000be0 <_ZN3Led3offEv>
		if (Communication_commTask()){
 8000f66:	e7d6      	b.n	8000f16 <mainloop+0xe>
 8000f68:	2000024c 	.word	0x2000024c
 8000f6c:	200001dc 	.word	0x200001dc
 8000f70:	20000244 	.word	0x20000244

08000f74 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
}
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d11a      	bne.n	8000fba <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d115      	bne.n	8000fba <_Z41__static_initialization_and_destruction_0ii+0x46>
Button button(B2_GPIO_Port ,  B2_Pin);
 8000f8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f92:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000f96:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000f98:	f7ff fb04 	bl	80005a4 <_ZN6ButtonC1EP12GPIO_TypeDeft>
CliContainer CliContainer;
 8000f9c:	480f      	ldr	r0, [pc, #60]	; (8000fdc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000f9e:	f7ff fc99 	bl	80008d4 <_ZN12CliContainerC1Ev>
Led ledR(LD3_GPIO_Port , LD3_Pin );
 8000fa2:	2240      	movs	r2, #64	; 0x40
 8000fa4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000faa:	f7ff fdf5 	bl	8000b98 <_ZN3LedC1EP12GPIO_TypeDeft>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8000fae:	2220      	movs	r2, #32
 8000fb0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000fb6:	f7ff fdef 	bl	8000b98 <_ZN3LedC1EP12GPIO_TypeDeft>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d107      	bne.n	8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d102      	bne.n	8000fd0 <_Z41__static_initialization_and_destruction_0ii+0x5c>
CliContainer CliContainer;
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000fcc:	f7ff fc94 	bl	80008f8 <_ZN12CliContainerD1Ev>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001dc 	.word	0x200001dc
 8000fdc:	200001f0 	.word	0x200001f0
 8000fe0:	20000244 	.word	0x20000244
 8000fe4:	2000024c 	.word	0x2000024c

08000fe8 <_GLOBAL__sub_I_button>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff ffbf 	bl	8000f74 <_Z41__static_initialization_and_destruction_0ii>
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_GLOBAL__sub_D_button>:
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff ffb7 	bl	8000f74 <_Z41__static_initialization_and_destruction_0ii>
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_MspInit+0x4c>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	4a10      	ldr	r2, [pc, #64]	; (8001054 <HAL_MspInit+0x4c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6613      	str	r3, [r2, #96]	; 0x60
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_MspInit+0x4c>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_MspInit+0x4c>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_MspInit+0x4c>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_MspInit+0x4c>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	210f      	movs	r1, #15
 8001042:	f06f 0001 	mvn.w	r0, #1
 8001046:	f000 faee 	bl	8001626 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_TIM_Base_MspInit+0x38>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_TIM_Base_MspInit+0x3c>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40001000 	.word	0x40001000
 8001094:	40021000 	.word	0x40021000

08001098 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0ac      	sub	sp, #176	; 0xb0
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2288      	movs	r2, #136	; 0x88
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 fd99 	bl	8006bf0 <memset>
  if(huart->Instance==USART2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_UART_MspInit+0xb0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d13b      	bne.n	8001140 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fb33 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010e0:	f7ff fefe 	bl	8000ee0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ee:	6593      	str	r3, [r2, #88]	; 0x58
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <HAL_UART_MspInit+0xb4>)
 80010fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <HAL_UART_MspInit+0xb4>)
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_UART_MspInit+0xb4>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001114:	230c      	movs	r3, #12
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f000 faaa 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	37b0      	adds	r7, #176	; 0xb0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f956 	bl	8001430 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001184:	f004 fc4c 	bl	8005a20 <xTaskGetSchedulerState>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800118e:	f005 fa33 	bl	80065f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}

08001196 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800119a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800119e:	f000 fc53 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a6:	f000 fc4f 	bl	8001a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
	return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_kill>:

int _kill(int pid, int sig)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011c8:	f005 fcca 	bl	8006b60 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2216      	movs	r2, #22
 80011d0:	601a      	str	r2, [r3, #0]
	return -1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_exit>:

void _exit (int status)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011e6:	f04f 31ff 	mov.w	r1, #4294967295
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffe7 	bl	80011be <_kill>
	while (1) {}		/* Make sure we hang here */
 80011f0:	e7fe      	b.n	80011f0 <_exit+0x12>

080011f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00a      	b.n	800121a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001204:	f3af 8000 	nop.w
 8001208:	4601      	mov	r1, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf0      	blt.n	8001204 <_read+0x12>
	}

return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:
	}
	return len;
}

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001254:	605a      	str	r2, [r3, #4]
	return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
	return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f005 fc4c 	bl	8006b60 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20018000 	.word	0x20018000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	20000254 	.word	0x20000254
 80012fc:	20001b78 	.word	0x20001b78

08001300 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	; (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001328:	f7ff ffea 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <LoopForever+0x6>)
  ldr r1, =_edata
 800132e:	490d      	ldr	r1, [pc, #52]	; (8001364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LoopForever+0xe>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001344:	4c0a      	ldr	r4, [pc, #40]	; (8001370 <LoopForever+0x16>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001352:	f005 fc0b 	bl	8006b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001356:	f7ff fc53 	bl	8000c00 <main>

0800135a <LoopForever>:

LoopForever:
    b LoopForever
 800135a:	e7fe      	b.n	800135a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800135c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001368:	080089e0 	.word	0x080089e0
  ldr r2, =_sbss
 800136c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001370:	20001b78 	.word	0x20001b78

08001374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC1_2_IRQHandler>
	...

08001378 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_Init+0x3c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_Init+0x3c>)
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138e:	2003      	movs	r0, #3
 8001390:	f000 f93e 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001394:	200f      	movs	r0, #15
 8001396:	f000 f80f 	bl	80013b8 <HAL_InitTick>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	e001      	b.n	80013aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a6:	f7ff fe2f 	bl	8001008 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40022000 	.word	0x40022000

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_InitTick+0x6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d023      	beq.n	8001414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_InitTick+0x70>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f949 	bl	800167a <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10f      	bne.n	800140e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d809      	bhi.n	8001408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f913 	bl	8001626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_InitTick+0x74>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e007      	b.n	8001418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e004      	b.n	8001418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000258 	.word	0x20000258

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000258 	.word	0x20000258

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e17f      	b.n	80019a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8171 	beq.w	800199e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d005      	beq.n	80016d4 <HAL_GPIO_Init+0x40>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d130      	bne.n	8001736 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170a:	2201      	movs	r2, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	f003 0201 	and.w	r2, r3, #1
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b03      	cmp	r3, #3
 8001740:	d118      	bne.n	8001774 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	6939      	ldr	r1, [r7, #16]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80ac 	beq.w	800199e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_GPIO_Init+0x330>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	4a5e      	ldr	r2, [pc, #376]	; (80019c4 <HAL_GPIO_Init+0x330>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6613      	str	r3, [r2, #96]	; 0x60
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_GPIO_Init+0x330>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800185e:	4a5a      	ldr	r2, [pc, #360]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x242>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x338>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x23e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4e      	ldr	r2, [pc, #312]	; (80019d0 <HAL_GPIO_Init+0x33c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x23a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4d      	ldr	r2, [pc, #308]	; (80019d4 <HAL_GPIO_Init+0x340>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x236>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4c      	ldr	r2, [pc, #304]	; (80019d8 <HAL_GPIO_Init+0x344>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x232>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_GPIO_Init+0x348>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x22e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_GPIO_Init+0x34c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x22a>
 80018ba:	2306      	movs	r3, #6
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018be:	2307      	movs	r3, #7
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x244>
 80018d6:	2300      	movs	r3, #0
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x334>)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_GPIO_Init+0x350>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191a:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <HAL_GPIO_Init+0x350>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x350>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_GPIO_Init+0x350>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_GPIO_Init+0x350>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_GPIO_Init+0x350>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x350>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_GPIO_Init+0x350>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f47f ae78 	bne.w	80016a4 <HAL_GPIO_Init+0x10>
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	371c      	adds	r7, #28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	48000400 	.word	0x48000400
 80019d0:	48000800 	.word	0x48000800
 80019d4:	48000c00 	.word	0x48000c00
 80019d8:	48001000 	.word	0x48001000
 80019dc:	48001400 	.word	0x48001400
 80019e0:	48001800 	.word	0x48001800
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d006      	beq.n	8001a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa40 	bl	8000eec <HAL_GPIO_EXTI_Callback>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40007000 	.word	0x40007000

08001a94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa2:	d130      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab0:	d038      	beq.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aba:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2232      	movs	r2, #50	; 0x32
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad8:	e002      	b.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aec:	d102      	bne.n	8001af4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f2      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b00:	d110      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e00f      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d007      	beq.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40007000 	.word	0x40007000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e3ca      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b97      	ldr	r3, [pc, #604]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b94      	ldr	r3, [pc, #592]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80e4 	beq.w	8001d3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4a>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	f040 808b 	bne.w	8001c98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	f040 8087 	bne.w	8001c98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d005      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x62>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3a2      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a1a      	ldr	r2, [r3, #32]
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_RCC_OscConfig+0x7c>
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_OscConfig+0x88>
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d223      	bcs.n	8001c14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fd55 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e383      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be0:	4b73      	ldr	r3, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a72      	ldr	r2, [pc, #456]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b70      	ldr	r3, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	496d      	ldr	r1, [pc, #436]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bfe:	4b6c      	ldr	r3, [pc, #432]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	4968      	ldr	r1, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
 8001c12:	e025      	b.n	8001c60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a65      	ldr	r2, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4960      	ldr	r1, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c32:	4b5f      	ldr	r3, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	495b      	ldr	r1, [pc, #364]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d109      	bne.n	8001c60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 fd15 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e343      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c60:	f000 fc4a 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	4950      	ldr	r1, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	; (8001db8 <HAL_RCC_OscConfig+0x278>)
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_RCC_OscConfig+0x27c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fb97 	bl	80013b8 <HAL_InitTick>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d052      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	e327      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a42      	ldr	r2, [pc, #264]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fbd4 	bl	8001458 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fbd0 	bl	8001458 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e310      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cc6:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4931      	ldr	r1, [pc, #196]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	492c      	ldr	r1, [pc, #176]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e01a      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d12:	f7ff fba1 	bl	8001458 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb9d 	bl	8001458 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e2dd      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x1da>
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d074      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x21a>
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d10e      	bne.n	8001d72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d10b      	bne.n	8001d72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d064      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d160      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e2ba      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x24a>
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e026      	b.n	8001dd8 <HAL_RCC_OscConfig+0x298>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x280>
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x298>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	080087cc 	.word	0x080087cc
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	4ba0      	ldr	r3, [pc, #640]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a9f      	ldr	r2, [pc, #636]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b9d      	ldr	r3, [pc, #628]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a9c      	ldr	r2, [pc, #624]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff fb3a 	bl	8001458 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fb36 	bl	8001458 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e276      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x2a8>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb26 	bl	8001458 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fb22 	bl	8001458 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e262      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2d0>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d060      	beq.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x310>
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d119      	bne.n	8001e7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d116      	bne.n	8001e7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e50:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_OscConfig+0x328>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e23f      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e68:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4973      	ldr	r1, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7c:	e040      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d023      	beq.n	8001ece <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff fae1 	bl	8001458 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fadd 	bl	8001458 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e21d      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	495f      	ldr	r1, [pc, #380]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	e018      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ece:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a5c      	ldr	r2, [pc, #368]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7ff fabd 	bl	8001458 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fab9 	bl	8001458 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1f9      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d03c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d01c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1a:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f24:	f7ff fa98 	bl	8001458 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fa94 	bl	8001458 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1d4      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0ef      	beq.n	8001f2c <HAL_RCC_OscConfig+0x3ec>
 8001f4c:	e01b      	b.n	8001f86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f54:	4a3b      	ldr	r2, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fa7b 	bl	8001458 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff fa77 	bl	8001458 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1b7      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ef      	bne.n	8001f66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80a6 	beq.w	80020e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10d      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d118      	bne.n	8001ffe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fa3e 	bl	8001458 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe0:	f7ff fa3a 	bl	8001458 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCC_OscConfig+0x508>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x4d8>
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002016:	e029      	b.n	800206c <HAL_RCC_OscConfig+0x52c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d115      	bne.n	800204c <HAL_RCC_OscConfig+0x50c>
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002028:	f043 0304 	orr.w	r3, r3, #4
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_RCC_OscConfig+0x504>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x52c>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	4b9c      	ldr	r3, [pc, #624]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a9b      	ldr	r2, [pc, #620]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205c:	4b98      	ldr	r3, [pc, #608]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a97      	ldr	r2, [pc, #604]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f9f0 	bl	8001458 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f9ec 	bl	8001458 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	; 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e12a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002092:	4b8b      	ldr	r3, [pc, #556]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ed      	beq.n	800207c <HAL_RCC_OscConfig+0x53c>
 80020a0:	e015      	b.n	80020ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff f9d9 	bl	8001458 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff f9d5 	bl	8001458 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e113      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c0:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ed      	bne.n	80020aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b7a      	ldr	r3, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d8:	4a79      	ldr	r2, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80fe 	beq.w	80022e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	f040 80d0 	bne.w	8002294 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f4:	4b72      	ldr	r3, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	429a      	cmp	r2, r3
 8002106:	d130      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	3b01      	subs	r3, #1
 8002114:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d127      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d11f      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002134:	2a07      	cmp	r2, #7
 8002136:	bf14      	ite	ne
 8002138:	2201      	movne	r2, #1
 800213a:	2200      	moveq	r2, #0
 800213c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	4293      	cmp	r3, r2
 8002140:	d113      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d109      	bne.n	800216a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d06e      	beq.n	8002248 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	d069      	beq.n	8002244 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002170:	4b53      	ldr	r3, [pc, #332]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0ad      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002198:	f7ff f95e 	bl	8001458 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff f95a 	bl	8001458 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e09a      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	4b40      	ldr	r3, [pc, #256]	; (80022c4 <HAL_RCC_OscConfig+0x784>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ce:	3a01      	subs	r2, #1
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	4311      	orrs	r1, r2
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d8:	0212      	lsls	r2, r2, #8
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e0:	0852      	lsrs	r2, r2, #1
 80021e2:	3a01      	subs	r2, #1
 80021e4:	0552      	lsls	r2, r2, #21
 80021e6:	4311      	orrs	r1, r2
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ec:	0852      	lsrs	r2, r2, #1
 80021ee:	3a01      	subs	r2, #1
 80021f0:	0652      	lsls	r2, r2, #25
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021f8:	0912      	lsrs	r2, r2, #4
 80021fa:	0452      	lsls	r2, r2, #17
 80021fc:	430a      	orrs	r2, r1
 80021fe:	4930      	ldr	r1, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002204:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800221c:	f7ff f91c 	bl	8001458 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff f918 	bl	8001458 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e058      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002242:	e050      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e04f      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d148      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a16      	ldr	r2, [pc, #88]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800226c:	f7ff f8f4 	bl	8001458 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff f8f0 	bl	8001458 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e030      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x734>
 8002292:	e028      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d023      	beq.n	80022e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x780>)
 80022a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff f8d7 	bl	8001458 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	e00c      	b.n	80022c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff f8d3 	bl	8001458 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d905      	bls.n	80022c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
 80022c0:	40021000 	.word	0x40021000
 80022c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ec      	bne.n	80022ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	4905      	ldr	r1, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x7b0>)
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_OscConfig+0x7b4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e001      	b.n	80022e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	feeefffc 	.word	0xfeeefffc

080022f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e7      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800230c:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d910      	bls.n	800233c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 0207 	bic.w	r2, r3, #7
 8002322:	4970      	ldr	r1, [pc, #448]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0cf      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d010      	beq.n	800236a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	4b66      	ldr	r3, [pc, #408]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	429a      	cmp	r2, r3
 8002356:	d908      	bls.n	800236a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4960      	ldr	r1, [pc, #384]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d04c      	beq.n	8002410 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0a6      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d115      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e09a      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08e      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023be:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e086      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f023 0203 	bic.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	4943      	ldr	r1, [pc, #268]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e0:	f7ff f83a 	bl	8001458 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7ff f836 	bl	8001458 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e06e      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 020c 	and.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d1eb      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	429a      	cmp	r2, r3
 800242a:	d208      	bcs.n	800243e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	492b      	ldr	r1, [pc, #172]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d210      	bcs.n	800246e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244c:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 0207 	bic.w	r2, r3, #7
 8002454:	4923      	ldr	r1, [pc, #140]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245c:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <HAL_RCC_ClockConfig+0x1ec>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d001      	beq.n	800246e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e036      	b.n	80024dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4918      	ldr	r1, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4910      	ldr	r1, [pc, #64]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ac:	f000 f824 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	490b      	ldr	r1, [pc, #44]	; (80024ec <HAL_RCC_ClockConfig+0x1f4>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1f8>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1fc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ff71 	bl	80013b8 <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
 80024d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80024da:	7afb      	ldrb	r3, [r7, #11]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	080087cc 	.word	0x080087cc
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002506:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002510:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d121      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d11e      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800252c:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002538:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e005      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002548:	4b2d      	ldr	r3, [pc, #180]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b04      	cmp	r3, #4
 800256e:	d102      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_GetSysClockFreq+0x110>)
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e004      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b08      	cmp	r3, #8
 800257a:	d101      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_RCC_GetSysClockFreq+0x114>)
 800257e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d134      	bne.n	80025f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002586:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0xa6>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d003      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0xac>
 800259c:	e005      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a0:	617b      	str	r3, [r7, #20]
      break;
 80025a2:	e005      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_GetSysClockFreq+0x114>)
 80025a6:	617b      	str	r3, [r7, #20]
      break;
 80025a8:	e002      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	617b      	str	r3, [r7, #20]
      break;
 80025ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	0e5b      	lsrs	r3, r3, #25
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	3301      	adds	r3, #1
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f0:	69bb      	ldr	r3, [r7, #24]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	080087e4 	.word	0x080087e4
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200

08002610 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b03      	ldr	r3, [pc, #12]	; (8002624 <HAL_RCC_GetHCLKFreq+0x14>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	20000000 	.word	0x20000000

08002628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800262c:	f7ff fff0 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4904      	ldr	r1, [pc, #16]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x28>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	080087dc 	.word	0x080087dc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002658:	f7ff ffda 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0adb      	lsrs	r3, r3, #11
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <HAL_RCC_GetPCLK2Freq+0x28>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	080087dc 	.word	0x080087dc

08002680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002698:	f7ff f9ee 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 800269c:	6178      	str	r0, [r7, #20]
 800269e:	e014      	b.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	4b25      	ldr	r3, [pc, #148]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a4:	4a24      	ldr	r2, [pc, #144]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026aa:	6593      	str	r3, [r2, #88]	; 0x58
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026b8:	f7ff f9de 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 80026bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d0:	d10b      	bne.n	80026ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d919      	bls.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2ba0      	cmp	r3, #160	; 0xa0
 80026dc:	d902      	bls.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026de:	2302      	movs	r3, #2
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e013      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026e4:	2301      	movs	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	e010      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d902      	bls.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f0:	2303      	movs	r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	e00a      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b80      	cmp	r3, #128	; 0x80
 80026fa:	d102      	bne.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026fc:	2302      	movs	r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	e004      	b.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d101      	bne.n	800270c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0207 	bic.w	r2, r3, #7
 8002714:	4909      	ldr	r1, [pc, #36]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002748:	2300      	movs	r3, #0
 800274a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2300      	movs	r3, #0
 800274e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	2b00      	cmp	r3, #0
 800275a:	d041      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002760:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002764:	d02a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002766:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800276a:	d824      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800276c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002770:	d008      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002772:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002776:	d81e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800277c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002780:	d010      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002782:	e018      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002784:	4b86      	ldr	r3, [pc, #536]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a85      	ldr	r2, [pc, #532]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002790:	e015      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fabb 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027a2:	e00c      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3320      	adds	r3, #32
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fba6 	bl	8002efc <RCCEx_PLLSAI2_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027b4:	e003      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ba:	e000      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c4:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d2:	4973      	ldr	r1, [pc, #460]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027da:	e001      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d041      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027f4:	d02a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027fa:	d824      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d81e      	bhi.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800280c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002810:	d010      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002812:	e018      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a61      	ldr	r2, [pc, #388]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002820:	e015      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fa73 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 800282e:	4603      	mov	r3, r0
 8002830:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002832:	e00c      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3320      	adds	r3, #32
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb5e 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002844:	e003      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	74fb      	strb	r3, [r7, #19]
      break;
 800284a:	e000      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800284c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002854:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002862:	494f      	ldr	r1, [pc, #316]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286a:	e001      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a0 	beq.w	80029be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b0:	2301      	movs	r3, #1
 80028b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b4:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3a      	ldr	r2, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fdca 	bl	8001458 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028c6:	e009      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c8:	f7fe fdc6 	bl	8001458 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d902      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	74fb      	strb	r3, [r7, #19]
        break;
 80028da:	e005      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028dc:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d15c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01f      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	429a      	cmp	r2, r3
 800290a:	d019      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002916:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d016      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fd85 	bl	8001458 <HAL_GetTick>
 800294e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002950:	e00b      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fd81 	bl	8001458 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d902      	bls.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	74fb      	strb	r3, [r7, #19]
            break;
 8002968:	e006      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ec      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10c      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298e:	4904      	ldr	r1, [pc, #16]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002996:	e009      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
 800299c:	e006      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ac:	7c7b      	ldrb	r3, [r7, #17]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b9e      	ldr	r3, [pc, #632]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	4a9d      	ldr	r2, [pc, #628]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ca:	4b98      	ldr	r3, [pc, #608]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f023 0203 	bic.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	4994      	ldr	r1, [pc, #592]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ec:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f023 020c 	bic.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fa:	498c      	ldr	r1, [pc, #560]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a0e:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	4983      	ldr	r1, [pc, #524]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	497b      	ldr	r1, [pc, #492]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a52:	4b76      	ldr	r3, [pc, #472]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a60:	4972      	ldr	r1, [pc, #456]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a74:	4b6d      	ldr	r3, [pc, #436]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	496a      	ldr	r1, [pc, #424]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	4961      	ldr	r1, [pc, #388]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab8:	4b5c      	ldr	r3, [pc, #368]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	4959      	ldr	r1, [pc, #356]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ada:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae8:	4950      	ldr	r1, [pc, #320]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	4948      	ldr	r1, [pc, #288]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	493f      	ldr	r1, [pc, #252]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d028      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b40:	4b3a      	ldr	r3, [pc, #232]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b4e:	4937      	ldr	r1, [pc, #220]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6a:	60d3      	str	r3, [r2, #12]
 8002b6c:	e011      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b76:	d10c      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f8c8 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d028      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bac:	491f      	ldr	r1, [pc, #124]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4a1a      	ldr	r2, [pc, #104]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bc8:	60d3      	str	r3, [r2, #12]
 8002bca:	e011      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	2101      	movs	r1, #1
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f899 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002be2:	4603      	mov	r3, r0
 8002be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d02b      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	4908      	ldr	r1, [pc, #32]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a02      	ldr	r2, [pc, #8]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c26:	60d3      	str	r3, [r2, #12]
 8002c28:	e014      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 f867 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d02f      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c60:	4b2b      	ldr	r3, [pc, #172]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c6e:	4928      	ldr	r1, [pc, #160]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f844 	bl	8002d14 <RCCEx_PLLSAI1_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d014      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	74bb      	strb	r3, [r7, #18]
 8002c9a:	e011      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3320      	adds	r3, #32
 8002caa:	2102      	movs	r1, #2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 f925 	bl	8002efc <RCCEx_PLLSAI2_Config>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb6:	7cfb      	ldrb	r3, [r7, #19]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ccc:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	4904      	ldr	r1, [pc, #16]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000

08002d14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d22:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d2e:	4b72      	ldr	r3, [pc, #456]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f003 0203 	and.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d10d      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
       ||
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d46:	4b6c      	ldr	r3, [pc, #432]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
       ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d047      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e044      	b.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d018      	beq.n	8002d9a <RCCEx_PLLSAI1_Config+0x86>
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d825      	bhi.n	8002db8 <RCCEx_PLLSAI1_Config+0xa4>
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d002      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0x62>
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d009      	beq.n	8002d88 <RCCEx_PLLSAI1_Config+0x74>
 8002d74:	e020      	b.n	8002db8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d76:	4b60      	ldr	r3, [pc, #384]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d86:	e01a      	b.n	8002dbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d116      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d98:	e013      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002da6:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002db6:	e006      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      break;
 8002dbc:	e004      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	430b      	orrs	r3, r1
 8002de4:	4944      	ldr	r1, [pc, #272]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d17d      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a40      	ldr	r2, [pc, #256]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fb2c 	bl	8001458 <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e02:	e009      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e04:	f7fe fb28 	bl	8001458 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d902      	bls.n	8002e18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	73fb      	strb	r3, [r7, #15]
        break;
 8002e16:	e005      	b.n	8002e24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ef      	bne.n	8002e04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d160      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6892      	ldr	r2, [r2, #8]
 8002e40:	0211      	lsls	r1, r2, #8
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	0912      	lsrs	r2, r2, #4
 8002e48:	0452      	lsls	r2, r2, #17
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	492a      	ldr	r1, [pc, #168]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	610b      	str	r3, [r1, #16]
 8002e52:	e027      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d112      	bne.n	8002e80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0211      	lsls	r1, r2, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6912      	ldr	r2, [r2, #16]
 8002e70:	0852      	lsrs	r2, r2, #1
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0552      	lsls	r2, r2, #21
 8002e76:	430a      	orrs	r2, r1
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	610b      	str	r3, [r1, #16]
 8002e7e:	e011      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6952      	ldr	r2, [r2, #20]
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe fad2 	bl	8001458 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb6:	e009      	b.n	8002ecc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eb8:	f7fe face 	bl	8001458 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d902      	bls.n	8002ecc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eca:	e005      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000

08002efc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f0a:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d018      	beq.n	8002f48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f16:	4b67      	ldr	r3, [pc, #412]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d10d      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
       ||
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d047      	beq.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
 8002f46:	e044      	b.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d018      	beq.n	8002f82 <RCCEx_PLLSAI2_Config+0x86>
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d825      	bhi.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d002      	beq.n	8002f5e <RCCEx_PLLSAI2_Config+0x62>
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d009      	beq.n	8002f70 <RCCEx_PLLSAI2_Config+0x74>
 8002f5c:	e020      	b.n	8002fa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f5e:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11d      	bne.n	8002fa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f6e:	e01a      	b.n	8002fa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f70:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d116      	bne.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f80:	e013      	b.n	8002faa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f82:	4b4c      	ldr	r3, [pc, #304]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f8e:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f9e:	e006      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e004      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e002      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fb6:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	4939      	ldr	r1, [pc, #228]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d167      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fd8:	4b36      	ldr	r3, [pc, #216]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a35      	ldr	r2, [pc, #212]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fa38 	bl	8001458 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fea:	e009      	b.n	8003000 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fec:	f7fe fa34 	bl	8001458 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d902      	bls.n	8003000 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ffe:	e005      	b.n	800300c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ef      	bne.n	8002fec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800300c:	7bfb      	ldrb	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d14a      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d111      	bne.n	800303c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6892      	ldr	r2, [r2, #8]
 8003028:	0211      	lsls	r1, r2, #8
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68d2      	ldr	r2, [r2, #12]
 800302e:	0912      	lsrs	r2, r2, #4
 8003030:	0452      	lsls	r2, r2, #17
 8003032:	430a      	orrs	r2, r1
 8003034:	491f      	ldr	r1, [pc, #124]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	614b      	str	r3, [r1, #20]
 800303a:	e011      	b.n	8003060 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6912      	ldr	r2, [r2, #16]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0652      	lsls	r2, r2, #25
 8003058:	430a      	orrs	r2, r1
 800305a:	4916      	ldr	r1, [pc, #88]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe f9f4 	bl	8001458 <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003074:	f7fe f9f0 	bl	8001458 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
          break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e049      	b.n	800315e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd ffba 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f000 f836 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a40      	ldr	r2, [pc, #256]	; (800327c <TIM_Base_SetConfig+0x114>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d00f      	beq.n	80031a8 <TIM_Base_SetConfig+0x40>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <TIM_Base_SetConfig+0x118>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00b      	beq.n	80031a8 <TIM_Base_SetConfig+0x40>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a3c      	ldr	r2, [pc, #240]	; (8003284 <TIM_Base_SetConfig+0x11c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d007      	beq.n	80031a8 <TIM_Base_SetConfig+0x40>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3b      	ldr	r2, [pc, #236]	; (8003288 <TIM_Base_SetConfig+0x120>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d003      	beq.n	80031a8 <TIM_Base_SetConfig+0x40>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3a      	ldr	r2, [pc, #232]	; (800328c <TIM_Base_SetConfig+0x124>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d108      	bne.n	80031ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a2f      	ldr	r2, [pc, #188]	; (800327c <TIM_Base_SetConfig+0x114>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d01b      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <TIM_Base_SetConfig+0x118>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d017      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <TIM_Base_SetConfig+0x11c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <TIM_Base_SetConfig+0x120>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00f      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a29      	ldr	r2, [pc, #164]	; (800328c <TIM_Base_SetConfig+0x124>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00b      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <TIM_Base_SetConfig+0x128>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a27      	ldr	r2, [pc, #156]	; (8003294 <TIM_Base_SetConfig+0x12c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_Base_SetConfig+0x9a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a26      	ldr	r2, [pc, #152]	; (8003298 <TIM_Base_SetConfig+0x130>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d108      	bne.n	8003214 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <TIM_Base_SetConfig+0x114>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d00f      	beq.n	8003260 <TIM_Base_SetConfig+0xf8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <TIM_Base_SetConfig+0x124>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00b      	beq.n	8003260 <TIM_Base_SetConfig+0xf8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <TIM_Base_SetConfig+0x128>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d007      	beq.n	8003260 <TIM_Base_SetConfig+0xf8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <TIM_Base_SetConfig+0x12c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_Base_SetConfig+0xf8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0f      	ldr	r2, [pc, #60]	; (8003298 <TIM_Base_SetConfig+0x130>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	615a      	str	r2, [r3, #20]
}
 800326e:	bf00      	nop
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40012c00 	.word	0x40012c00
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40013400 	.word	0x40013400
 8003290:	40014000 	.word	0x40014000
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800

0800329c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e068      	b.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003326:	d018      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10c      	bne.n	8003374 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40013400 	.word	0x40013400
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40014000 	.word	0x40014000

080033ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e040      	b.n	8003440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fe62 	bl	8001098 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f992 	bl	8003714 <UART_SetConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fc3e 	bl	8003c84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fcc5 	bl	8003dc8 <UART_CheckIdleState>
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345c:	2b20      	cmp	r3, #32
 800345e:	f040 8082 	bne.w	8003566 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_UART_Transmit+0x26>
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e07a      	b.n	8003568 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_UART_Transmit+0x38>
 800347c:	2302      	movs	r3, #2
 800347e:	e073      	b.n	8003568 <HAL_UART_Transmit+0x120>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2221      	movs	r2, #33	; 0x21
 8003494:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003496:	f7fd ffdf 	bl	8001458 <HAL_GetTick>
 800349a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d108      	bne.n	80034c8 <HAL_UART_Transmit+0x80>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e003      	b.n	80034d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80034d8:	e02d      	b.n	8003536 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fcb8 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e039      	b.n	8003568 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10b      	bne.n	8003512 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003506:	b292      	uxth	r2, r2
 8003508:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3302      	adds	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e008      	b.n	8003524 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b292      	uxth	r2, r2
 800351c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1cb      	bne.n	80034da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 fc84 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e005      	b.n	8003568 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	; 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003584:	2b20      	cmp	r3, #32
 8003586:	f040 80bf 	bne.w	8003708 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_UART_Receive+0x26>
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0b7      	b.n	800370a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_UART_Receive+0x38>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0b0      	b.n	800370a <HAL_UART_Receive+0x19a>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2222      	movs	r2, #34	; 0x22
 80035bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c4:	f7fd ff48 	bl	8001458 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d10e      	bne.n	8003602 <HAL_UART_Receive+0x92>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d105      	bne.n	80035f8 <HAL_UART_Receive+0x88>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035f6:	e02d      	b.n	8003654 <HAL_UART_Receive+0xe4>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	22ff      	movs	r2, #255	; 0xff
 80035fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003600:	e028      	b.n	8003654 <HAL_UART_Receive+0xe4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <HAL_UART_Receive+0xb6>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <HAL_UART_Receive+0xac>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800361a:	e01b      	b.n	8003654 <HAL_UART_Receive+0xe4>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	227f      	movs	r2, #127	; 0x7f
 8003620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003624:	e016      	b.n	8003654 <HAL_UART_Receive+0xe4>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800362e:	d10d      	bne.n	800364c <HAL_UART_Receive+0xdc>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d104      	bne.n	8003642 <HAL_UART_Receive+0xd2>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	227f      	movs	r2, #127	; 0x7f
 800363c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003640:	e008      	b.n	8003654 <HAL_UART_Receive+0xe4>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	223f      	movs	r2, #63	; 0x3f
 8003646:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800364a:	e003      	b.n	8003654 <HAL_UART_Receive+0xe4>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800365a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003664:	d108      	bne.n	8003678 <HAL_UART_Receive+0x108>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003688:	e033      	b.n	80036f2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	2120      	movs	r1, #32
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fbe0 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e032      	b.n	800370a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	8a7b      	ldrh	r3, [r7, #18]
 80036b4:	4013      	ands	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	3302      	adds	r3, #2
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e00d      	b.n	80036e0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	8a7b      	ldrh	r3, [r7, #18]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	4013      	ands	r3, r2
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1c5      	bne.n	800368a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b08a      	sub	sp, #40	; 0x28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4313      	orrs	r3, r2
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	4ba4      	ldr	r3, [pc, #656]	; (80039d4 <UART_SetConfig+0x2c0>)
 8003744:	4013      	ands	r3, r2
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	430b      	orrs	r3, r1
 800374e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a99      	ldr	r2, [pc, #612]	; (80039d8 <UART_SetConfig+0x2c4>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d004      	beq.n	8003780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	4313      	orrs	r3, r2
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	430a      	orrs	r2, r1
 8003792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a90      	ldr	r2, [pc, #576]	; (80039dc <UART_SetConfig+0x2c8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d126      	bne.n	80037ec <UART_SetConfig+0xd8>
 800379e:	4b90      	ldr	r3, [pc, #576]	; (80039e0 <UART_SetConfig+0x2cc>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d81b      	bhi.n	80037e4 <UART_SetConfig+0xd0>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0xa0>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	080037cd 	.word	0x080037cd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e116      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e112      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037d4:	2304      	movs	r3, #4
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e10e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037dc:	2308      	movs	r3, #8
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e10a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e106      	b.n	80039fa <UART_SetConfig+0x2e6>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <UART_SetConfig+0x2d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d138      	bne.n	8003868 <UART_SetConfig+0x154>
 80037f6:	4b7a      	ldr	r3, [pc, #488]	; (80039e0 <UART_SetConfig+0x2cc>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f003 030c 	and.w	r3, r3, #12
 8003800:	2b0c      	cmp	r3, #12
 8003802:	d82d      	bhi.n	8003860 <UART_SetConfig+0x14c>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0xf8>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003841 	.word	0x08003841
 8003810:	08003861 	.word	0x08003861
 8003814:	08003861 	.word	0x08003861
 8003818:	08003861 	.word	0x08003861
 800381c:	08003851 	.word	0x08003851
 8003820:	08003861 	.word	0x08003861
 8003824:	08003861 	.word	0x08003861
 8003828:	08003861 	.word	0x08003861
 800382c:	08003849 	.word	0x08003849
 8003830:	08003861 	.word	0x08003861
 8003834:	08003861 	.word	0x08003861
 8003838:	08003861 	.word	0x08003861
 800383c:	08003859 	.word	0x08003859
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e0d8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003848:	2302      	movs	r3, #2
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e0d4      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003850:	2304      	movs	r3, #4
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e0d0      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003858:	2308      	movs	r3, #8
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e0cc      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003860:	2310      	movs	r3, #16
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e0c8      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <UART_SetConfig+0x2d4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d125      	bne.n	80038be <UART_SetConfig+0x1aa>
 8003872:	4b5b      	ldr	r3, [pc, #364]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800387c:	2b30      	cmp	r3, #48	; 0x30
 800387e:	d016      	beq.n	80038ae <UART_SetConfig+0x19a>
 8003880:	2b30      	cmp	r3, #48	; 0x30
 8003882:	d818      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 8003884:	2b20      	cmp	r3, #32
 8003886:	d00a      	beq.n	800389e <UART_SetConfig+0x18a>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d814      	bhi.n	80038b6 <UART_SetConfig+0x1a2>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <UART_SetConfig+0x182>
 8003890:	2b10      	cmp	r3, #16
 8003892:	d008      	beq.n	80038a6 <UART_SetConfig+0x192>
 8003894:	e00f      	b.n	80038b6 <UART_SetConfig+0x1a2>
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389c:	e0ad      	b.n	80039fa <UART_SetConfig+0x2e6>
 800389e:	2302      	movs	r3, #2
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a4:	e0a9      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038a6:	2304      	movs	r3, #4
 80038a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ac:	e0a5      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038ae:	2308      	movs	r3, #8
 80038b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b4:	e0a1      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038b6:	2310      	movs	r3, #16
 80038b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038bc:	e09d      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <UART_SetConfig+0x2d8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d125      	bne.n	8003914 <UART_SetConfig+0x200>
 80038c8:	4b45      	ldr	r3, [pc, #276]	; (80039e0 <UART_SetConfig+0x2cc>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d016      	beq.n	8003904 <UART_SetConfig+0x1f0>
 80038d6:	2bc0      	cmp	r3, #192	; 0xc0
 80038d8:	d818      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d00a      	beq.n	80038f4 <UART_SetConfig+0x1e0>
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d814      	bhi.n	800390c <UART_SetConfig+0x1f8>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1d8>
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d008      	beq.n	80038fc <UART_SetConfig+0x1e8>
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x1f8>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f2:	e082      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fa:	e07e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80038fc:	2304      	movs	r3, #4
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003902:	e07a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003904:	2308      	movs	r3, #8
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390a:	e076      	b.n	80039fa <UART_SetConfig+0x2e6>
 800390c:	2310      	movs	r3, #16
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003912:	e072      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <UART_SetConfig+0x2dc>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d12a      	bne.n	8003974 <UART_SetConfig+0x260>
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003928:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800392c:	d01a      	beq.n	8003964 <UART_SetConfig+0x250>
 800392e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003932:	d81b      	bhi.n	800396c <UART_SetConfig+0x258>
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d00c      	beq.n	8003954 <UART_SetConfig+0x240>
 800393a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393e:	d815      	bhi.n	800396c <UART_SetConfig+0x258>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <UART_SetConfig+0x238>
 8003944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003948:	d008      	beq.n	800395c <UART_SetConfig+0x248>
 800394a:	e00f      	b.n	800396c <UART_SetConfig+0x258>
 800394c:	2300      	movs	r3, #0
 800394e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003952:	e052      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003954:	2302      	movs	r3, #2
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395a:	e04e      	b.n	80039fa <UART_SetConfig+0x2e6>
 800395c:	2304      	movs	r3, #4
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003962:	e04a      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003964:	2308      	movs	r3, #8
 8003966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396a:	e046      	b.n	80039fa <UART_SetConfig+0x2e6>
 800396c:	2310      	movs	r3, #16
 800396e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003972:	e042      	b.n	80039fa <UART_SetConfig+0x2e6>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <UART_SetConfig+0x2c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d13a      	bne.n	80039f4 <UART_SetConfig+0x2e0>
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <UART_SetConfig+0x2cc>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003988:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800398c:	d01a      	beq.n	80039c4 <UART_SetConfig+0x2b0>
 800398e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003992:	d81b      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003998:	d00c      	beq.n	80039b4 <UART_SetConfig+0x2a0>
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d815      	bhi.n	80039cc <UART_SetConfig+0x2b8>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <UART_SetConfig+0x298>
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d008      	beq.n	80039bc <UART_SetConfig+0x2a8>
 80039aa:	e00f      	b.n	80039cc <UART_SetConfig+0x2b8>
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e022      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e01e      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039bc:	2304      	movs	r3, #4
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e01a      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039c4:	2308      	movs	r3, #8
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e016      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039cc:	2310      	movs	r3, #16
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e012      	b.n	80039fa <UART_SetConfig+0x2e6>
 80039d4:	efff69f3 	.word	0xefff69f3
 80039d8:	40008000 	.word	0x40008000
 80039dc:	40013800 	.word	0x40013800
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40004400 	.word	0x40004400
 80039e8:	40004800 	.word	0x40004800
 80039ec:	40004c00 	.word	0x40004c00
 80039f0:	40005000 	.word	0x40005000
 80039f4:	2310      	movs	r3, #16
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a9f      	ldr	r2, [pc, #636]	; (8003c7c <UART_SetConfig+0x568>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d17a      	bne.n	8003afa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d824      	bhi.n	8003a56 <UART_SetConfig+0x342>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <UART_SetConfig+0x300>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a39 	.word	0x08003a39
 8003a18:	08003a57 	.word	0x08003a57
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a47 	.word	0x08003a47
 8003a28:	08003a57 	.word	0x08003a57
 8003a2c:	08003a57 	.word	0x08003a57
 8003a30:	08003a57 	.word	0x08003a57
 8003a34:	08003a4f 	.word	0x08003a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a38:	f7fe fdf6 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003a3c:	61f8      	str	r0, [r7, #28]
        break;
 8003a3e:	e010      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a40:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <UART_SetConfig+0x56c>)
 8003a42:	61fb      	str	r3, [r7, #28]
        break;
 8003a44:	e00d      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a46:	f7fe fd57 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003a4a:	61f8      	str	r0, [r7, #28]
        break;
 8003a4c:	e009      	b.n	8003a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a52:	61fb      	str	r3, [r7, #28]
        break;
 8003a54:	e005      	b.n	8003a62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80fb 	beq.w	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4413      	add	r3, r2
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d305      	bcc.n	8003a86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d903      	bls.n	8003a8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a8c:	e0e8      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2200      	movs	r2, #0
 8003a92:	461c      	mov	r4, r3
 8003a94:	4615      	mov	r5, r2
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	022b      	lsls	r3, r5, #8
 8003aa0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aa4:	0222      	lsls	r2, r4, #8
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	6849      	ldr	r1, [r1, #4]
 8003aaa:	0849      	lsrs	r1, r1, #1
 8003aac:	2000      	movs	r0, #0
 8003aae:	4688      	mov	r8, r1
 8003ab0:	4681      	mov	r9, r0
 8003ab2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ab6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ac8:	4650      	mov	r0, sl
 8003aca:	4659      	mov	r1, fp
 8003acc:	f7fc fbe8 	bl	80002a0 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ade:	d308      	bcc.n	8003af2 <UART_SetConfig+0x3de>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae6:	d204      	bcs.n	8003af2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e0b6      	b.n	8003c60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003af8:	e0b2      	b.n	8003c60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b02:	d15e      	bne.n	8003bc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d828      	bhi.n	8003b5e <UART_SetConfig+0x44a>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <UART_SetConfig+0x400>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003b41 	.word	0x08003b41
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b4f 	.word	0x08003b4f
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b5f 	.word	0x08003b5f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b38:	f7fe fd76 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	61f8      	str	r0, [r7, #28]
        break;
 8003b3e:	e014      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b40:	f7fe fd88 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003b44:	61f8      	str	r0, [r7, #28]
        break;
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <UART_SetConfig+0x56c>)
 8003b4a:	61fb      	str	r3, [r7, #28]
        break;
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe fcd3 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003b52:	61f8      	str	r0, [r7, #28]
        break;
 8003b54:	e009      	b.n	8003b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e005      	b.n	8003b6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d077      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005a      	lsls	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	441a      	add	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d916      	bls.n	8003bba <UART_SetConfig+0x4a6>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b92:	d212      	bcs.n	8003bba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f023 030f 	bic.w	r3, r3, #15
 8003b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	8afa      	ldrh	r2, [r7, #22]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e052      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bc0:	e04e      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d827      	bhi.n	8003c1a <UART_SetConfig+0x506>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x4bc>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fd18 	bl	8002628 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61f8      	str	r0, [r7, #28]
        break;
 8003bfa:	e014      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fd2a 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003c00:	61f8      	str	r0, [r7, #28]
        break;
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <UART_SetConfig+0x56c>)
 8003c06:	61fb      	str	r3, [r7, #28]
        break;
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fc75 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003c0e:	61f8      	str	r0, [r7, #28]
        break;
 8003c10:	e009      	b.n	8003c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	61fb      	str	r3, [r7, #28]
        break;
 8003c18:	e005      	b.n	8003c26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c24:	bf00      	nop
    }

    if (pclk != 0U)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085a      	lsrs	r2, r3, #1
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	441a      	add	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d909      	bls.n	8003c5a <UART_SetConfig+0x546>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d205      	bcs.n	8003c5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e002      	b.n	8003c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	; 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40008000 	.word	0x40008000
 8003c80:	00f42400 	.word	0x00f42400

08003c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d82:	d10a      	bne.n	8003d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd8:	f7fd fb3e 	bl	8001458 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d10e      	bne.n	8003e0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f82d 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e023      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d10e      	bne.n	8003e36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f817 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e00d      	b.n	8003e52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b09c      	sub	sp, #112	; 0x70
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	e0a5      	b.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	f000 80a1 	beq.w	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fd faef 	bl	8001458 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13e      	bne.n	8003f0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ede:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e067      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04f      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f26:	d147      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	e853 3f00 	ldrex	r3, [r3]
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
 8003f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f58:	e841 2300 	strex	r3, r2, [r1]
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e6      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	e853 3f00 	ldrex	r3, [r3]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 0301 	bic.w	r3, r3, #1
 8003f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f84:	623a      	str	r2, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	69f9      	ldr	r1, [r7, #28]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e5      	bne.n	8003f64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e010      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	bf0c      	ite	eq
 8003fc8:	2301      	moveq	r3, #1
 8003fca:	2300      	movne	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f43f af4a 	beq.w	8003e6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3770      	adds	r7, #112	; 0x70
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <__NVIC_SetPriority>:
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db0a      	blt.n	800400e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	490c      	ldr	r1, [pc, #48]	; (8004030 <__NVIC_SetPriority+0x4c>)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800400c:	e00a      	b.n	8004024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4908      	ldr	r1, [pc, #32]	; (8004034 <__NVIC_SetPriority+0x50>)
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3b04      	subs	r3, #4
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	440b      	add	r3, r1
 8004022:	761a      	strb	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000e100 	.word	0xe000e100
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800403c:	2100      	movs	r1, #0
 800403e:	f06f 0004 	mvn.w	r0, #4
 8004042:	f7ff ffcf 	bl	8003fe4 <__NVIC_SetPriority>
#endif
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004052:	f3ef 8305 	mrs	r3, IPSR
 8004056:	603b      	str	r3, [r7, #0]
  return(result);
 8004058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800405e:	f06f 0305 	mvn.w	r3, #5
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	e00c      	b.n	8004080 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <osKernelInitialize+0x44>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <osKernelInitialize+0x44>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004074:	2300      	movs	r3, #0
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	e002      	b.n	8004080 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004080:	687b      	ldr	r3, [r7, #4]
}
 8004082:	4618      	mov	r0, r3
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	2000025c 	.word	0x2000025c

08004094 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800409a:	f3ef 8305 	mrs	r3, IPSR
 800409e:	603b      	str	r3, [r7, #0]
  return(result);
 80040a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80040a6:	f06f 0305 	mvn.w	r3, #5
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e010      	b.n	80040d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <osKernelStart+0x48>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d109      	bne.n	80040ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040b6:	f7ff ffbf 	bl	8004038 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <osKernelStart+0x48>)
 80040bc:	2202      	movs	r2, #2
 80040be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040c0:	f001 f866 	bl	8005190 <vTaskStartScheduler>
      stat = osOK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
 80040c8:	e002      	b.n	80040d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040d0:	687b      	ldr	r3, [r7, #4]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	2000025c 	.word	0x2000025c

080040e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040f0:	f3ef 8305 	mrs	r3, IPSR
 80040f4:	617b      	str	r3, [r7, #20]
  return(result);
 80040f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d17e      	bne.n	80041fa <osThreadNew+0x11a>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d07b      	beq.n	80041fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004106:	2318      	movs	r3, #24
 8004108:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d045      	beq.n	80041a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <osThreadNew+0x48>
        name = attr->name;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <osThreadNew+0x6e>
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b38      	cmp	r3, #56	; 0x38
 8004140:	d805      	bhi.n	800414e <osThreadNew+0x6e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <osThreadNew+0x72>
        return (NULL);
 800414e:	2300      	movs	r3, #0
 8004150:	e054      	b.n	80041fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <osThreadNew+0xa8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b5b      	cmp	r3, #91	; 0x5b
 8004170:	d90a      	bls.n	8004188 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <osThreadNew+0xa8>
        mem = 1;
 8004182:	2301      	movs	r3, #1
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e010      	b.n	80041aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10c      	bne.n	80041aa <osThreadNew+0xca>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d108      	bne.n	80041aa <osThreadNew+0xca>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d104      	bne.n	80041aa <osThreadNew+0xca>
          mem = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e001      	b.n	80041aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d110      	bne.n	80041d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041b8:	9202      	str	r2, [sp, #8]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fe0c 	bl	8004de4 <xTaskCreateStatic>
 80041cc:	4603      	mov	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	e013      	b.n	80041fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d110      	bne.n	80041fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	b29a      	uxth	r2, r3
 80041dc:	f107 0310 	add.w	r3, r7, #16
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fe57 	bl	8004e9e <xTaskCreate>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d001      	beq.n	80041fa <osThreadNew+0x11a>
            hTask = NULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041fa:	693b      	ldr	r3, [r7, #16]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3728      	adds	r7, #40	; 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800420c:	f3ef 8305 	mrs	r3, IPSR
 8004210:	60bb      	str	r3, [r7, #8]
  return(result);
 8004212:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <osDelay+0x1c>
    stat = osErrorISR;
 8004218:	f06f 0305 	mvn.w	r3, #5
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	e007      	b.n	8004230 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <osDelay+0x2c>
      vTaskDelay(ticks);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ff7c 	bl	8005128 <vTaskDelay>
    }
  }

  return (stat);
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a07      	ldr	r2, [pc, #28]	; (8004268 <vApplicationGetIdleTaskMemory+0x2c>)
 800424c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a06      	ldr	r2, [pc, #24]	; (800426c <vApplicationGetIdleTaskMemory+0x30>)
 8004252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000260 	.word	0x20000260
 800426c:	200002bc 	.word	0x200002bc

08004270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <vApplicationGetTimerTaskMemory+0x2c>)
 8004280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a06      	ldr	r2, [pc, #24]	; (80042a0 <vApplicationGetTimerTaskMemory+0x30>)
 8004286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800428e:	601a      	str	r2, [r3, #0]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	200004bc 	.word	0x200004bc
 80042a0:	20000518 	.word	0x20000518

080042a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f103 0208 	add.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f103 0208 	add.w	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f103 0208 	add.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d103      	bne.n	8004366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e00c      	b.n	8004380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3308      	adds	r3, #8
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e002      	b.n	8004374 <vListInsert+0x2e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d2f6      	bcs.n	800436e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6892      	ldr	r2, [r2, #8]
 80043ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6852      	ldr	r2, [r2, #4]
 80043d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d103      	bne.n	80043ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	1e5a      	subs	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004436:	f002 f84d 	bl	80064d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	3b01      	subs	r3, #1
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	22ff      	movs	r2, #255	; 0xff
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	22ff      	movs	r2, #255	; 0xff
 8004482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d114      	bne.n	80044b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01a      	beq.n	80044ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3310      	adds	r3, #16
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f903 	bl	80056a4 <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <xQueueGenericReset+0xcc>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	e009      	b.n	80044ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3310      	adds	r3, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fef2 	bl	80042a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3324      	adds	r3, #36	; 0x24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff feed 	bl	80042a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ca:	f002 f833 	bl	8006534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	; 0x38
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10a      	bne.n	8004506 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004502:	bf00      	nop
 8004504:	e7fe      	b.n	8004504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <xQueueGenericCreateStatic+0x52>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <xQueueGenericCreateStatic+0x56>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xQueueGenericCreateStatic+0x58>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	623b      	str	r3, [r7, #32]
}
 800454a:	bf00      	nop
 800454c:	e7fe      	b.n	800454c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <xQueueGenericCreateStatic+0x7e>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <xQueueGenericCreateStatic+0x82>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <xQueueGenericCreateStatic+0x84>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	61fb      	str	r3, [r7, #28]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800457a:	2350      	movs	r3, #80	; 0x50
 800457c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b50      	cmp	r3, #80	; 0x50
 8004582:	d00a      	beq.n	800459a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	61bb      	str	r3, [r7, #24]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800459a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	4613      	mov	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f805 	bl	80045cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3730      	adds	r7, #48	; 0x30
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e002      	b.n	80045ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045fa:	2101      	movs	r1, #1
 80045fc:	69b8      	ldr	r0, [r7, #24]
 80045fe:	f7ff ff05 	bl	800440c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08e      	sub	sp, #56	; 0x38
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xQueueGenericSend+0x32>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <xQueueGenericSend+0x40>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <xQueueGenericSend+0x44>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <xQueueGenericSend+0x46>
 8004658:	2300      	movs	r3, #0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <xQueueGenericSend+0x60>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d103      	bne.n	8004682 <xQueueGenericSend+0x6e>
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <xQueueGenericSend+0x72>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <xQueueGenericSend+0x74>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	623b      	str	r3, [r7, #32]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a2:	f001 f9bd 	bl	8005a20 <xTaskGetSchedulerState>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xQueueGenericSend+0x9e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueGenericSend+0xa2>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueGenericSend+0xa4>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61fb      	str	r3, [r7, #28]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d2:	f001 feff 	bl	80064d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	429a      	cmp	r2, r3
 80046e0:	d302      	bcc.n	80046e8 <xQueueGenericSend+0xd4>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d129      	bne.n	800473c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	68b9      	ldr	r1, [r7, #8]
 80046ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ee:	f000 fa0b 	bl	8004b08 <prvCopyDataToQueue>
 80046f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d010      	beq.n	800471e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	3324      	adds	r3, #36	; 0x24
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ffcf 	bl	80056a4 <xTaskRemoveFromEventList>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d013      	beq.n	8004734 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800470c:	4b3f      	ldr	r3, [pc, #252]	; (800480c <xQueueGenericSend+0x1f8>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e00a      	b.n	8004734 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004724:	4b39      	ldr	r3, [pc, #228]	; (800480c <xQueueGenericSend+0x1f8>)
 8004726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004734:	f001 fefe 	bl	8006534 <vPortExitCritical>
				return pdPASS;
 8004738:	2301      	movs	r3, #1
 800473a:	e063      	b.n	8004804 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004742:	f001 fef7 	bl	8006534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004746:	2300      	movs	r3, #0
 8004748:	e05c      	b.n	8004804 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800474a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4618      	mov	r0, r3
 8004756:	f001 f809 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800475e:	f001 fee9 	bl	8006534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004762:	f000 fd7b 	bl	800525c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004766:	f001 feb5 	bl	80064d4 <vPortEnterCritical>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004770:	b25b      	sxtb	r3, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d103      	bne.n	8004780 <xQueueGenericSend+0x16c>
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004786:	b25b      	sxtb	r3, r3
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d103      	bne.n	8004796 <xQueueGenericSend+0x182>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004796:	f001 fecd 	bl	8006534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800479a:	1d3a      	adds	r2, r7, #4
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	4611      	mov	r1, r2
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fff8 	bl	8005798 <xTaskCheckForTimeOut>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d124      	bne.n	80047f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b0:	f000 faa2 	bl	8004cf8 <prvIsQueueFull>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047bc:	3310      	adds	r3, #16
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 ff1e 	bl	8005604 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80047c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ca:	f000 fa2d 	bl	8004c28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80047ce:	f000 fd53 	bl	8005278 <xTaskResumeAll>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f47f af7c 	bne.w	80046d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <xQueueGenericSend+0x1f8>)
 80047dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	e772      	b.n	80046d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ee:	f000 fa1b 	bl	8004c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047f2:	f000 fd41 	bl	8005278 <xTaskResumeAll>
 80047f6:	e76c      	b.n	80046d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fa:	f000 fa15 	bl	8004c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047fe:	f000 fd3b 	bl	8005278 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004802:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004804:	4618      	mov	r0, r3
 8004806:	3738      	adds	r7, #56	; 0x38
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <xQueueGenericSendFromISR+0x3c>
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <xQueueGenericSendFromISR+0x40>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <xQueueGenericSendFromISR+0x42>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004868:	bf00      	nop
 800486a:	e7fe      	b.n	800486a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d103      	bne.n	800487a <xQueueGenericSendFromISR+0x6a>
 8004872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <xQueueGenericSendFromISR+0x6e>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <xQueueGenericSendFromISR+0x70>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800489a:	f001 fefd 	bl	8006698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800489e:	f3ef 8211 	mrs	r2, BASEPRI
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fa      	str	r2, [r7, #28]
 80048b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <xQueueGenericSendFromISR+0xbc>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d12f      	bne.n	800492c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048e2:	f000 f911 	bl	8004b08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d112      	bne.n	8004916 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d016      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	3324      	adds	r3, #36	; 0x24
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fed1 	bl	80056a4 <xTaskRemoveFromEventList>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00e      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e007      	b.n	8004926 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800491a:	3301      	adds	r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b25a      	sxtb	r2, r3
 8004920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004926:	2301      	movs	r3, #1
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800492a:	e001      	b.n	8004930 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800492c:	2300      	movs	r3, #0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004932:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800493a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800493e:	4618      	mov	r0, r3
 8004940:	3740      	adds	r7, #64	; 0x40
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08c      	sub	sp, #48	; 0x30
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <xQueueReceive+0x30>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	623b      	str	r3, [r7, #32]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <xQueueReceive+0x3e>
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <xQueueReceive+0x42>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <xQueueReceive+0x44>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xQueueReceive+0x5e>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	61fb      	str	r3, [r7, #28]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049a6:	f001 f83b 	bl	8005a20 <xTaskGetSchedulerState>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <xQueueReceive+0x6e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <xQueueReceive+0x72>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <xQueueReceive+0x74>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <xQueueReceive+0x8e>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	61bb      	str	r3, [r7, #24]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049d6:	f001 fd7d 	bl	80064d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01f      	beq.n	8004a26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ea:	f000 f8f7 	bl	8004bdc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00f      	beq.n	8004a1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	3310      	adds	r3, #16
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fe4e 	bl	80056a4 <xTaskRemoveFromEventList>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <xQueueReceive+0x1bc>)
 8004a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a1e:	f001 fd89 	bl	8006534 <vPortExitCritical>
				return pdPASS;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e069      	b.n	8004afa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a2c:	f001 fd82 	bl	8006534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e062      	b.n	8004afa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a3a:	f107 0310 	add.w	r3, r7, #16
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fe94 	bl	800576c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a48:	f001 fd74 	bl	8006534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a4c:	f000 fc06 	bl	800525c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a50:	f001 fd40 	bl	80064d4 <vPortEnterCritical>
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5a:	b25b      	sxtb	r3, r3
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d103      	bne.n	8004a6a <xQueueReceive+0x122>
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d103      	bne.n	8004a80 <xQueueReceive+0x138>
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a80:	f001 fd58 	bl	8006534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a84:	1d3a      	adds	r2, r7, #4
 8004a86:	f107 0310 	add.w	r3, r7, #16
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fe83 	bl	8005798 <xTaskCheckForTimeOut>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d123      	bne.n	8004ae0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9a:	f000 f917 	bl	8004ccc <prvIsQueueEmpty>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d017      	beq.n	8004ad4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	3324      	adds	r3, #36	; 0x24
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fda9 	bl	8005604 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab4:	f000 f8b8 	bl	8004c28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ab8:	f000 fbde 	bl	8005278 <xTaskResumeAll>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d189      	bne.n	80049d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <xQueueReceive+0x1bc>)
 8004ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	e780      	b.n	80049d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ad6:	f000 f8a7 	bl	8004c28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ada:	f000 fbcd 	bl	8005278 <xTaskResumeAll>
 8004ade:	e77a      	b.n	80049d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ae2:	f000 f8a1 	bl	8004c28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ae6:	f000 fbc7 	bl	8005278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aec:	f000 f8ee 	bl	8004ccc <prvIsQueueEmpty>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f43f af6f 	beq.w	80049d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3730      	adds	r7, #48	; 0x30
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000ed04 	.word	0xe000ed04

08004b08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10d      	bne.n	8004b42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d14d      	bne.n	8004bca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 ff92 	bl	8005a5c <xTaskPriorityDisinherit>
 8004b38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	e043      	b.n	8004bca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d119      	bne.n	8004b7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6858      	ldr	r0, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	461a      	mov	r2, r3
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	f002 f83e 	bl	8006bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d32b      	bcc.n	8004bca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	e026      	b.n	8004bca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68d8      	ldr	r0, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	461a      	mov	r2, r3
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	f002 f824 	bl	8006bd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	425b      	negs	r3, r3
 8004b96:	441a      	add	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d207      	bcs.n	8004bb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	425b      	negs	r3, r3
 8004bb2:	441a      	add	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d105      	bne.n	8004bca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bd2:	697b      	ldr	r3, [r7, #20]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d018      	beq.n	8004c20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	441a      	add	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d303      	bcc.n	8004c10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	461a      	mov	r2, r3
 8004c1a:	6838      	ldr	r0, [r7, #0]
 8004c1c:	f001 ffda 	bl	8006bd4 <memcpy>
	}
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c30:	f001 fc50 	bl	80064d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c3c:	e011      	b.n	8004c62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d012      	beq.n	8004c6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3324      	adds	r3, #36	; 0x24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fd2a 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c56:	f000 fe01 	bl	800585c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	dce9      	bgt.n	8004c3e <prvUnlockQueue+0x16>
 8004c6a:	e000      	b.n	8004c6e <prvUnlockQueue+0x46>
					break;
 8004c6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c76:	f001 fc5d 	bl	8006534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c7a:	f001 fc2b 	bl	80064d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c86:	e011      	b.n	8004cac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d012      	beq.n	8004cb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3310      	adds	r3, #16
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd05 	bl	80056a4 <xTaskRemoveFromEventList>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ca0:	f000 fddc 	bl	800585c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dce9      	bgt.n	8004c88 <prvUnlockQueue+0x60>
 8004cb4:	e000      	b.n	8004cb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cc0:	f001 fc38 	bl	8006534 <vPortExitCritical>
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cd4:	f001 fbfe 	bl	80064d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	e001      	b.n	8004cea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f001 fc23 	bl	8006534 <vPortExitCritical>

	return xReturn;
 8004cee:	68fb      	ldr	r3, [r7, #12]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d00:	f001 fbe8 	bl	80064d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d102      	bne.n	8004d16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e001      	b.n	8004d1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f001 fc0b 	bl	8006534 <vPortExitCritical>

	return xReturn;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	e014      	b.n	8004d62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d38:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <vQueueAddToRegistry+0x50>)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10b      	bne.n	8004d5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d44:	490c      	ldr	r1, [pc, #48]	; (8004d78 <vQueueAddToRegistry+0x50>)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <vQueueAddToRegistry+0x50>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d5a:	e006      	b.n	8004d6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b07      	cmp	r3, #7
 8004d66:	d9e7      	bls.n	8004d38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000918 	.word	0x20000918

08004d7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d8c:	f001 fba2 	bl	80064d4 <vPortEnterCritical>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d103      	bne.n	8004da6 <vQueueWaitForMessageRestricted+0x2a>
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dac:	b25b      	sxtb	r3, r3
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d103      	bne.n	8004dbc <vQueueWaitForMessageRestricted+0x40>
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dbc:	f001 fbba 	bl	8006534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d106      	bne.n	8004dd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	3324      	adds	r3, #36	; 0x24
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 fc3b 	bl	800564c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004dd6:	6978      	ldr	r0, [r7, #20]
 8004dd8:	f7ff ff26 	bl	8004c28 <prvUnlockQueue>
	}
 8004ddc:	bf00      	nop
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08e      	sub	sp, #56	; 0x38
 8004de8:	af04      	add	r7, sp, #16
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
 8004df0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	623b      	str	r3, [r7, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	61fb      	str	r3, [r7, #28]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e2a:	235c      	movs	r3, #92	; 0x5c
 8004e2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b5c      	cmp	r3, #92	; 0x5c
 8004e32:	d00a      	beq.n	8004e4a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	61bb      	str	r3, [r7, #24]
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01e      	beq.n	8004e90 <xTaskCreateStatic+0xac>
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2202      	movs	r2, #2
 8004e66:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	9303      	str	r3, [sp, #12]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	9302      	str	r3, [sp, #8]
 8004e72:	f107 0314 	add.w	r3, r7, #20
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f850 	bl	8004f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e8a:	f000 f8dd 	bl	8005048 <prvAddNewTaskToReadyList>
 8004e8e:	e001      	b.n	8004e94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e94:	697b      	ldr	r3, [r7, #20]
	}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3728      	adds	r7, #40	; 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b08c      	sub	sp, #48	; 0x30
 8004ea2:	af04      	add	r7, sp, #16
 8004ea4:	60f8      	str	r0, [r7, #12]
 8004ea6:	60b9      	str	r1, [r7, #8]
 8004ea8:	603b      	str	r3, [r7, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 fc30 	bl	8006718 <pvPortMalloc>
 8004eb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00e      	beq.n	8004ede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ec0:	205c      	movs	r0, #92	; 0x5c
 8004ec2:	f001 fc29 	bl	8006718 <pvPortMalloc>
 8004ec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ed4:	e005      	b.n	8004ee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f001 fcea 	bl	80068b0 <vPortFree>
 8004edc:	e001      	b.n	8004ee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ef0:	88fa      	ldrh	r2, [r7, #6]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	9302      	str	r3, [sp, #8]
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f80e 	bl	8004f28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0c:	69f8      	ldr	r0, [r7, #28]
 8004f0e:	f000 f89b 	bl	8005048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f12:	2301      	movs	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e002      	b.n	8004f1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	461a      	mov	r2, r3
 8004f40:	21a5      	movs	r1, #165	; 0xa5
 8004f42:	f001 fe55 	bl	8006bf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f50:	3b01      	subs	r3, #1
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0307 	and.w	r3, r3, #7
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	617b      	str	r3, [r7, #20]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01f      	beq.n	8004fc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f86:	2300      	movs	r3, #0
 8004f88:	61fb      	str	r3, [r7, #28]
 8004f8a:	e012      	b.n	8004fb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	7819      	ldrb	r1, [r3, #0]
 8004f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3334      	adds	r3, #52	; 0x34
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d006      	beq.n	8004fba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	2b0f      	cmp	r3, #15
 8004fb6:	d9e9      	bls.n	8004f8c <prvInitialiseNewTask+0x64>
 8004fb8:	e000      	b.n	8004fbc <prvInitialiseNewTask+0x94>
			{
				break;
 8004fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc4:	e003      	b.n	8004fce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	2b37      	cmp	r3, #55	; 0x37
 8004fd2:	d901      	bls.n	8004fd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fd4:	2337      	movs	r3, #55	; 0x37
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff f978 	bl	80042e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	3318      	adds	r3, #24
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff f973 	bl	80042e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2200      	movs	r2, #0
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f001 f928 	bl	800627c <pxPortInitialiseStack>
 800502c:	4602      	mov	r2, r0
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800503e:	bf00      	nop
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005050:	f001 fa40 	bl	80064d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005054:	4b2d      	ldr	r3, [pc, #180]	; (800510c <prvAddNewTaskToReadyList+0xc4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	4a2c      	ldr	r2, [pc, #176]	; (800510c <prvAddNewTaskToReadyList+0xc4>)
 800505c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <prvAddNewTaskToReadyList+0xc8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005066:	4a2a      	ldr	r2, [pc, #168]	; (8005110 <prvAddNewTaskToReadyList+0xc8>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800506c:	4b27      	ldr	r3, [pc, #156]	; (800510c <prvAddNewTaskToReadyList+0xc4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d110      	bne.n	8005096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005074:	f000 fc16 	bl	80058a4 <prvInitialiseTaskLists>
 8005078:	e00d      	b.n	8005096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800507a:	4b26      	ldr	r3, [pc, #152]	; (8005114 <prvAddNewTaskToReadyList+0xcc>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <prvAddNewTaskToReadyList+0xc8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	429a      	cmp	r2, r3
 800508e:	d802      	bhi.n	8005096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005090:	4a1f      	ldr	r2, [pc, #124]	; (8005110 <prvAddNewTaskToReadyList+0xc8>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <prvAddNewTaskToReadyList+0xd0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <prvAddNewTaskToReadyList+0xd0>)
 800509e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <prvAddNewTaskToReadyList+0xd0>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <prvAddNewTaskToReadyList+0xd4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d903      	bls.n	80050bc <prvAddNewTaskToReadyList+0x74>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <prvAddNewTaskToReadyList+0xd4>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <prvAddNewTaskToReadyList+0xd8>)
 80050ca:	441a      	add	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7ff f913 	bl	80042fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050d8:	f001 fa2c 	bl	8006534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <prvAddNewTaskToReadyList+0xcc>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00e      	beq.n	8005102 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <prvAddNewTaskToReadyList+0xc8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d207      	bcs.n	8005102 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <prvAddNewTaskToReadyList+0xdc>)
 80050f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000e2c 	.word	0x20000e2c
 8005110:	20000958 	.word	0x20000958
 8005114:	20000e38 	.word	0x20000e38
 8005118:	20000e48 	.word	0x20000e48
 800511c:	20000e34 	.word	0x20000e34
 8005120:	2000095c 	.word	0x2000095c
 8005124:	e000ed04 	.word	0xe000ed04

08005128 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d017      	beq.n	800516a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800513a:	4b13      	ldr	r3, [pc, #76]	; (8005188 <vTaskDelay+0x60>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <vTaskDelay+0x30>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60bb      	str	r3, [r7, #8]
}
 8005154:	bf00      	nop
 8005156:	e7fe      	b.n	8005156 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005158:	f000 f880 	bl	800525c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800515c:	2100      	movs	r1, #0
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fcea 	bl	8005b38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005164:	f000 f888 	bl	8005278 <xTaskResumeAll>
 8005168:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d107      	bne.n	8005180 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <vTaskDelay+0x64>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000e54 	.word	0x20000e54
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800519e:	463a      	mov	r2, r7
 80051a0:	1d39      	adds	r1, r7, #4
 80051a2:	f107 0308 	add.w	r3, r7, #8
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff f848 	bl	800423c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	9202      	str	r2, [sp, #8]
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	2300      	movs	r3, #0
 80051bc:	460a      	mov	r2, r1
 80051be:	4921      	ldr	r1, [pc, #132]	; (8005244 <vTaskStartScheduler+0xb4>)
 80051c0:	4821      	ldr	r0, [pc, #132]	; (8005248 <vTaskStartScheduler+0xb8>)
 80051c2:	f7ff fe0f 	bl	8004de4 <xTaskCreateStatic>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4a20      	ldr	r2, [pc, #128]	; (800524c <vTaskStartScheduler+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80051cc:	4b1f      	ldr	r3, [pc, #124]	; (800524c <vTaskStartScheduler+0xbc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d002      	beq.n	80051da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80051d4:	2301      	movs	r3, #1
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e001      	b.n	80051de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80051e4:	f000 fcfc 	bl	8005be0 <xTimerCreateTimerTask>
 80051e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d116      	bne.n	800521e <vTaskStartScheduler+0x8e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	613b      	str	r3, [r7, #16]
}
 8005202:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <vTaskStartScheduler+0xc0>)
 8005206:	f04f 32ff 	mov.w	r2, #4294967295
 800520a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800520c:	4b11      	ldr	r3, [pc, #68]	; (8005254 <vTaskStartScheduler+0xc4>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <vTaskStartScheduler+0xc8>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005218:	f001 f8ba 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800521c:	e00e      	b.n	800523c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005224:	d10a      	bne.n	800523c <vTaskStartScheduler+0xac>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60fb      	str	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <vTaskStartScheduler+0xaa>
}
 800523c:	bf00      	nop
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08008724 	.word	0x08008724
 8005248:	08005875 	.word	0x08005875
 800524c:	20000e50 	.word	0x20000e50
 8005250:	20000e4c 	.word	0x20000e4c
 8005254:	20000e38 	.word	0x20000e38
 8005258:	20000e30 	.word	0x20000e30

0800525c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <vTaskSuspendAll+0x18>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	4a03      	ldr	r2, [pc, #12]	; (8005274 <vTaskSuspendAll+0x18>)
 8005268:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800526a:	bf00      	nop
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20000e54 	.word	0x20000e54

08005278 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005286:	4b42      	ldr	r3, [pc, #264]	; (8005390 <xTaskResumeAll+0x118>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10a      	bne.n	80052a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005292:	f383 8811 	msr	BASEPRI, r3
 8005296:	f3bf 8f6f 	isb	sy
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	603b      	str	r3, [r7, #0]
}
 80052a0:	bf00      	nop
 80052a2:	e7fe      	b.n	80052a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052a4:	f001 f916 	bl	80064d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052a8:	4b39      	ldr	r3, [pc, #228]	; (8005390 <xTaskResumeAll+0x118>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4a38      	ldr	r2, [pc, #224]	; (8005390 <xTaskResumeAll+0x118>)
 80052b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b2:	4b37      	ldr	r3, [pc, #220]	; (8005390 <xTaskResumeAll+0x118>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d162      	bne.n	8005380 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052ba:	4b36      	ldr	r3, [pc, #216]	; (8005394 <xTaskResumeAll+0x11c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d05e      	beq.n	8005380 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052c2:	e02f      	b.n	8005324 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <xTaskResumeAll+0x120>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3318      	adds	r3, #24
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff f871 	bl	80043b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3304      	adds	r3, #4
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff f86c 	bl	80043b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e4:	4b2d      	ldr	r3, [pc, #180]	; (800539c <xTaskResumeAll+0x124>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d903      	bls.n	80052f4 <xTaskResumeAll+0x7c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <xTaskResumeAll+0x124>)
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <xTaskResumeAll+0x128>)
 8005302:	441a      	add	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f7fe fff7 	bl	80042fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <xTaskResumeAll+0x12c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <xTaskResumeAll+0x130>)
 8005320:	2201      	movs	r2, #1
 8005322:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005324:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <xTaskResumeAll+0x120>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1cb      	bne.n	80052c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005332:	f000 fb55 	bl	80059e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <xTaskResumeAll+0x134>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d010      	beq.n	8005364 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005342:	f000 f847 	bl	80053d4 <xTaskIncrementTick>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800534c:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <xTaskResumeAll+0x130>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3b01      	subs	r3, #1
 8005356:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f1      	bne.n	8005342 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <xTaskResumeAll+0x134>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <xTaskResumeAll+0x130>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <xTaskResumeAll+0x138>)
 8005372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005380:	f001 f8d8 	bl	8006534 <vPortExitCritical>

	return xAlreadyYielded;
 8005384:	68bb      	ldr	r3, [r7, #8]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000e54 	.word	0x20000e54
 8005394:	20000e2c 	.word	0x20000e2c
 8005398:	20000dec 	.word	0x20000dec
 800539c:	20000e34 	.word	0x20000e34
 80053a0:	2000095c 	.word	0x2000095c
 80053a4:	20000958 	.word	0x20000958
 80053a8:	20000e40 	.word	0x20000e40
 80053ac:	20000e3c 	.word	0x20000e3c
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <xTaskGetTickCount+0x1c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80053c0:	687b      	ldr	r3, [r7, #4]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000e30 	.word	0x20000e30

080053d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053de:	4b4f      	ldr	r3, [pc, #316]	; (800551c <xTaskIncrementTick+0x148>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 808f 	bne.w	8005506 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053e8:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <xTaskIncrementTick+0x14c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053f0:	4a4b      	ldr	r2, [pc, #300]	; (8005520 <xTaskIncrementTick+0x14c>)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d120      	bne.n	800543e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80053fc:	4b49      	ldr	r3, [pc, #292]	; (8005524 <xTaskIncrementTick+0x150>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <xTaskIncrementTick+0x48>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	603b      	str	r3, [r7, #0]
}
 8005418:	bf00      	nop
 800541a:	e7fe      	b.n	800541a <xTaskIncrementTick+0x46>
 800541c:	4b41      	ldr	r3, [pc, #260]	; (8005524 <xTaskIncrementTick+0x150>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	4b41      	ldr	r3, [pc, #260]	; (8005528 <xTaskIncrementTick+0x154>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a3f      	ldr	r2, [pc, #252]	; (8005524 <xTaskIncrementTick+0x150>)
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <xTaskIncrementTick+0x154>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b3e      	ldr	r3, [pc, #248]	; (800552c <xTaskIncrementTick+0x158>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	4a3d      	ldr	r2, [pc, #244]	; (800552c <xTaskIncrementTick+0x158>)
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	f000 fad1 	bl	80059e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800543e:	4b3c      	ldr	r3, [pc, #240]	; (8005530 <xTaskIncrementTick+0x15c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d349      	bcc.n	80054dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005448:	4b36      	ldr	r3, [pc, #216]	; (8005524 <xTaskIncrementTick+0x150>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005452:	4b37      	ldr	r3, [pc, #220]	; (8005530 <xTaskIncrementTick+0x15c>)
 8005454:	f04f 32ff 	mov.w	r2, #4294967295
 8005458:	601a      	str	r2, [r3, #0]
					break;
 800545a:	e03f      	b.n	80054dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545c:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xTaskIncrementTick+0x150>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d203      	bcs.n	800547c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005474:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <xTaskIncrementTick+0x15c>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800547a:	e02f      	b.n	80054dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe ff99 	bl	80043b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	3318      	adds	r3, #24
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe ff90 	bl	80043b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <xTaskIncrementTick+0x160>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d903      	bls.n	80054ac <xTaskIncrementTick+0xd8>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	4a22      	ldr	r2, [pc, #136]	; (8005534 <xTaskIncrementTick+0x160>)
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <xTaskIncrementTick+0x164>)
 80054ba:	441a      	add	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f7fe ff1b 	bl	80042fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054cc:	4b1b      	ldr	r3, [pc, #108]	; (800553c <xTaskIncrementTick+0x168>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3b8      	bcc.n	8005448 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054da:	e7b5      	b.n	8005448 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054dc:	4b17      	ldr	r3, [pc, #92]	; (800553c <xTaskIncrementTick+0x168>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4915      	ldr	r1, [pc, #84]	; (8005538 <xTaskIncrementTick+0x164>)
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d901      	bls.n	80054f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <xTaskIncrementTick+0x16c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005500:	2301      	movs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e004      	b.n	8005510 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <xTaskIncrementTick+0x170>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	4a0d      	ldr	r2, [pc, #52]	; (8005544 <xTaskIncrementTick+0x170>)
 800550e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005510:	697b      	ldr	r3, [r7, #20]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000e54 	.word	0x20000e54
 8005520:	20000e30 	.word	0x20000e30
 8005524:	20000de4 	.word	0x20000de4
 8005528:	20000de8 	.word	0x20000de8
 800552c:	20000e44 	.word	0x20000e44
 8005530:	20000e4c 	.word	0x20000e4c
 8005534:	20000e34 	.word	0x20000e34
 8005538:	2000095c 	.word	0x2000095c
 800553c:	20000958 	.word	0x20000958
 8005540:	20000e40 	.word	0x20000e40
 8005544:	20000e3c 	.word	0x20000e3c

08005548 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800554e:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <vTaskSwitchContext+0xa8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <vTaskSwitchContext+0xac>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800555c:	e041      	b.n	80055e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800555e:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <vTaskSwitchContext+0xac>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <vTaskSwitchContext+0xb0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e010      	b.n	800558e <vTaskSwitchContext+0x46>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <vTaskSwitchContext+0x40>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	607b      	str	r3, [r7, #4]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <vTaskSwitchContext+0x3e>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3b01      	subs	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	491b      	ldr	r1, [pc, #108]	; (80055fc <vTaskSwitchContext+0xb4>)
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0e4      	beq.n	800556c <vTaskSwitchContext+0x24>
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <vTaskSwitchContext+0xb4>)
 80055ae:	4413      	add	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	605a      	str	r2, [r3, #4]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3308      	adds	r3, #8
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d104      	bne.n	80055d2 <vTaskSwitchContext+0x8a>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	605a      	str	r2, [r3, #4]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4a09      	ldr	r2, [pc, #36]	; (8005600 <vTaskSwitchContext+0xb8>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4a06      	ldr	r2, [pc, #24]	; (80055f8 <vTaskSwitchContext+0xb0>)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6013      	str	r3, [r2, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000e54 	.word	0x20000e54
 80055f4:	20000e40 	.word	0x20000e40
 80055f8:	20000e34 	.word	0x20000e34
 80055fc:	2000095c 	.word	0x2000095c
 8005600:	20000958 	.word	0x20000958

08005604 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60fb      	str	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <vTaskPlaceOnEventList+0x44>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3318      	adds	r3, #24
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fe fe87 	bl	8004346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005638:	2101      	movs	r1, #1
 800563a:	6838      	ldr	r0, [r7, #0]
 800563c:	f000 fa7c 	bl	8005b38 <prvAddCurrentTaskToDelayedList>
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	20000958 	.word	0x20000958

0800564c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005674:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3318      	adds	r3, #24
 800567a:	4619      	mov	r1, r3
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f7fe fe3e 	bl	80042fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295
 800568c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	68b8      	ldr	r0, [r7, #8]
 8005692:	f000 fa51 	bl	8005b38 <prvAddCurrentTaskToDelayedList>
	}
 8005696:	bf00      	nop
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000958 	.word	0x20000958

080056a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	60fb      	str	r3, [r7, #12]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	3318      	adds	r3, #24
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fe6f 	bl	80043b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056da:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <xTaskRemoveFromEventList+0xb0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d11d      	bne.n	800571e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fe66 	bl	80043b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <xTaskRemoveFromEventList+0xb4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d903      	bls.n	8005700 <xTaskRemoveFromEventList+0x5c>
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <xTaskRemoveFromEventList+0xb4>)
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4a13      	ldr	r2, [pc, #76]	; (800575c <xTaskRemoveFromEventList+0xb8>)
 800570e:	441a      	add	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	3304      	adds	r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f7fe fdf1 	bl	80042fe <vListInsertEnd>
 800571c:	e005      	b.n	800572a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3318      	adds	r3, #24
 8005722:	4619      	mov	r1, r3
 8005724:	480e      	ldr	r0, [pc, #56]	; (8005760 <xTaskRemoveFromEventList+0xbc>)
 8005726:	f7fe fdea 	bl	80042fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <xTaskRemoveFromEventList+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	429a      	cmp	r2, r3
 8005736:	d905      	bls.n	8005744 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800573c:	4b0a      	ldr	r3, [pc, #40]	; (8005768 <xTaskRemoveFromEventList+0xc4>)
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e001      	b.n	8005748 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005748:	697b      	ldr	r3, [r7, #20]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000e54 	.word	0x20000e54
 8005758:	20000e34 	.word	0x20000e34
 800575c:	2000095c 	.word	0x2000095c
 8005760:	20000dec 	.word	0x20000dec
 8005764:	20000958 	.word	0x20000958
 8005768:	20000e40 	.word	0x20000e40

0800576c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <vTaskInternalSetTimeOutState+0x24>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <vTaskInternalSetTimeOutState+0x28>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000e44 	.word	0x20000e44
 8005794:	20000e30 	.word	0x20000e30

08005798 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	60fb      	str	r3, [r7, #12]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80057da:	f000 fe7b 	bl	80064d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <xTaskCheckForTimeOut+0xbc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d102      	bne.n	80057fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	e023      	b.n	8005846 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xTaskCheckForTimeOut+0xc0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d007      	beq.n	800581a <xTaskCheckForTimeOut+0x82>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	429a      	cmp	r2, r3
 8005812:	d302      	bcc.n	800581a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	e015      	b.n	8005846 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	429a      	cmp	r2, r3
 8005822:	d20b      	bcs.n	800583c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad2      	subs	r2, r2, r3
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff9b 	bl	800576c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	e004      	b.n	8005846 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005842:	2301      	movs	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005846:	f000 fe75 	bl	8006534 <vPortExitCritical>

	return xReturn;
 800584a:	69fb      	ldr	r3, [r7, #28]
}
 800584c:	4618      	mov	r0, r3
 800584e:	3720      	adds	r7, #32
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000e30 	.word	0x20000e30
 8005858:	20000e44 	.word	0x20000e44

0800585c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <vTaskMissedYield+0x14>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000e40 	.word	0x20000e40

08005874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800587c:	f000 f852 	bl	8005924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <prvIdleTask+0x28>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d9f9      	bls.n	800587c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <prvIdleTask+0x2c>)
 800588a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005898:	e7f0      	b.n	800587c <prvIdleTask+0x8>
 800589a:	bf00      	nop
 800589c:	2000095c 	.word	0x2000095c
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058aa:	2300      	movs	r3, #0
 80058ac:	607b      	str	r3, [r7, #4]
 80058ae:	e00c      	b.n	80058ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4a12      	ldr	r2, [pc, #72]	; (8005904 <prvInitialiseTaskLists+0x60>)
 80058bc:	4413      	add	r3, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe fcf0 	bl	80042a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3301      	adds	r3, #1
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b37      	cmp	r3, #55	; 0x37
 80058ce:	d9ef      	bls.n	80058b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058d0:	480d      	ldr	r0, [pc, #52]	; (8005908 <prvInitialiseTaskLists+0x64>)
 80058d2:	f7fe fce7 	bl	80042a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058d6:	480d      	ldr	r0, [pc, #52]	; (800590c <prvInitialiseTaskLists+0x68>)
 80058d8:	f7fe fce4 	bl	80042a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058dc:	480c      	ldr	r0, [pc, #48]	; (8005910 <prvInitialiseTaskLists+0x6c>)
 80058de:	f7fe fce1 	bl	80042a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058e2:	480c      	ldr	r0, [pc, #48]	; (8005914 <prvInitialiseTaskLists+0x70>)
 80058e4:	f7fe fcde 	bl	80042a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80058e8:	480b      	ldr	r0, [pc, #44]	; (8005918 <prvInitialiseTaskLists+0x74>)
 80058ea:	f7fe fcdb 	bl	80042a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <prvInitialiseTaskLists+0x78>)
 80058f0:	4a05      	ldr	r2, [pc, #20]	; (8005908 <prvInitialiseTaskLists+0x64>)
 80058f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058f4:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <prvInitialiseTaskLists+0x7c>)
 80058f6:	4a05      	ldr	r2, [pc, #20]	; (800590c <prvInitialiseTaskLists+0x68>)
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	2000095c 	.word	0x2000095c
 8005908:	20000dbc 	.word	0x20000dbc
 800590c:	20000dd0 	.word	0x20000dd0
 8005910:	20000dec 	.word	0x20000dec
 8005914:	20000e00 	.word	0x20000e00
 8005918:	20000e18 	.word	0x20000e18
 800591c:	20000de4 	.word	0x20000de4
 8005920:	20000de8 	.word	0x20000de8

08005924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800592a:	e019      	b.n	8005960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800592c:	f000 fdd2 	bl	80064d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <prvCheckTasksWaitingTermination+0x50>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fd3b 	bl	80043b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005942:	4b0d      	ldr	r3, [pc, #52]	; (8005978 <prvCheckTasksWaitingTermination+0x54>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3b01      	subs	r3, #1
 8005948:	4a0b      	ldr	r2, [pc, #44]	; (8005978 <prvCheckTasksWaitingTermination+0x54>)
 800594a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <prvCheckTasksWaitingTermination+0x58>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3b01      	subs	r3, #1
 8005952:	4a0a      	ldr	r2, [pc, #40]	; (800597c <prvCheckTasksWaitingTermination+0x58>)
 8005954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005956:	f000 fded 	bl	8006534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f810 	bl	8005980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005960:	4b06      	ldr	r3, [pc, #24]	; (800597c <prvCheckTasksWaitingTermination+0x58>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e1      	bne.n	800592c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005968:	bf00      	nop
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000e00 	.word	0x20000e00
 8005978:	20000e2c 	.word	0x20000e2c
 800597c:	20000e14 	.word	0x20000e14

08005980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800598e:	2b00      	cmp	r3, #0
 8005990:	d108      	bne.n	80059a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	4618      	mov	r0, r3
 8005998:	f000 ff8a 	bl	80068b0 <vPortFree>
				vPortFree( pxTCB );
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 ff87 	bl	80068b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059a2:	e018      	b.n	80059d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d103      	bne.n	80059b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 ff7e 	bl	80068b0 <vPortFree>
	}
 80059b4:	e00f      	b.n	80059d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d00a      	beq.n	80059d6 <prvDeleteTCB+0x56>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	60fb      	str	r3, [r7, #12]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <prvDeleteTCB+0x54>
	}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <prvResetNextTaskUnblockTime+0x38>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvResetNextTaskUnblockTime+0x3c>)
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80059f8:	e008      	b.n	8005a0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fa:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <prvResetNextTaskUnblockTime+0x38>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <prvResetNextTaskUnblockTime+0x3c>)
 8005a0a:	6013      	str	r3, [r2, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	20000de4 	.word	0x20000de4
 8005a1c:	20000e4c 	.word	0x20000e4c

08005a20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a26:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <xTaskGetSchedulerState+0x34>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d102      	bne.n	8005a34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	e008      	b.n	8005a46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a34:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <xTaskGetSchedulerState+0x38>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	e001      	b.n	8005a46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a42:	2300      	movs	r3, #0
 8005a44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005a46:	687b      	ldr	r3, [r7, #4]
	}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000e38 	.word	0x20000e38
 8005a58:	20000e54 	.word	0x20000e54

08005a5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d056      	beq.n	8005b20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a72:	4b2e      	ldr	r3, [pc, #184]	; (8005b2c <xTaskPriorityDisinherit+0xd0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d00a      	beq.n	8005a92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60bb      	str	r3, [r7, #8]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d02c      	beq.n	8005b20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d128      	bne.n	8005b20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fc70 	bl	80043b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <xTaskPriorityDisinherit+0xd4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <xTaskPriorityDisinherit+0xa4>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <xTaskPriorityDisinherit+0xd4>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <xTaskPriorityDisinherit+0xd8>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe fbf1 	bl	80042fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b20:	697b      	ldr	r3, [r7, #20]
	}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000958 	.word	0x20000958
 8005b30:	20000e34 	.word	0x20000e34
 8005b34:	2000095c 	.word	0x2000095c

08005b38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b48:	4b20      	ldr	r3, [pc, #128]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe fc32 	bl	80043b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d10a      	bne.n	8005b72 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b62:	4b1a      	ldr	r3, [pc, #104]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4819      	ldr	r0, [pc, #100]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b6c:	f7fe fbc7 	bl	80042fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b70:	e026      	b.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4413      	add	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d209      	bcs.n	8005b9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x94>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3304      	adds	r3, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	4610      	mov	r0, r2
 8005b98:	f7fe fbd5 	bl	8004346 <vListInsert>
}
 8005b9c:	e010      	b.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x94>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4610      	mov	r0, r2
 8005bac:	f7fe fbcb 	bl	8004346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d202      	bcs.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005bba:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000e30 	.word	0x20000e30
 8005bcc:	20000958 	.word	0x20000958
 8005bd0:	20000e18 	.word	0x20000e18
 8005bd4:	20000de8 	.word	0x20000de8
 8005bd8:	20000de4 	.word	0x20000de4
 8005bdc:	20000e4c 	.word	0x20000e4c

08005be0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bea:	f000 fb07 	bl	80061fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bee:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <xTimerCreateTimerTask+0x80>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d021      	beq.n	8005c3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bfe:	1d3a      	adds	r2, r7, #4
 8005c00:	f107 0108 	add.w	r1, r7, #8
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fb31 	bl	8004270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	9202      	str	r2, [sp, #8]
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	2302      	movs	r3, #2
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	460a      	mov	r2, r1
 8005c20:	4910      	ldr	r1, [pc, #64]	; (8005c64 <xTimerCreateTimerTask+0x84>)
 8005c22:	4811      	ldr	r0, [pc, #68]	; (8005c68 <xTimerCreateTimerTask+0x88>)
 8005c24:	f7ff f8de 	bl	8004de4 <xTaskCreateStatic>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4a10      	ldr	r2, [pc, #64]	; (8005c6c <xTimerCreateTimerTask+0x8c>)
 8005c2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <xTimerCreateTimerTask+0x8c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c36:	2301      	movs	r3, #1
 8005c38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c56:	697b      	ldr	r3, [r7, #20]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000e88 	.word	0x20000e88
 8005c64:	0800872c 	.word	0x0800872c
 8005c68:	08005da5 	.word	0x08005da5
 8005c6c:	20000e8c 	.word	0x20000e8c

08005c70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	623b      	str	r3, [r7, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	; (8005d08 <xTimerGenericCommand+0x98>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02a      	beq.n	8005cfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b05      	cmp	r3, #5
 8005cb6:	dc18      	bgt.n	8005cea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005cb8:	f7ff feb2 	bl	8005a20 <xTaskGetSchedulerState>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d109      	bne.n	8005cd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <xTimerGenericCommand+0x98>)
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	f107 0110 	add.w	r1, r7, #16
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cce:	f7fe fca1 	bl	8004614 <xQueueGenericSend>
 8005cd2:	6278      	str	r0, [r7, #36]	; 0x24
 8005cd4:	e012      	b.n	8005cfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <xTimerGenericCommand+0x98>)
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f107 0110 	add.w	r1, r7, #16
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f7fe fc97 	bl	8004614 <xQueueGenericSend>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce8:	e008      	b.n	8005cfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <xTimerGenericCommand+0x98>)
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f107 0110 	add.w	r1, r7, #16
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	f7fe fd8b 	bl	8004810 <xQueueGenericSendFromISR>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3728      	adds	r7, #40	; 0x28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000e88 	.word	0x20000e88

08005d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d16:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <prvProcessExpiredTimer+0x94>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3304      	adds	r3, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe fb47 	bl	80043b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d022      	beq.n	8005d7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	18d1      	adds	r1, r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	6978      	ldr	r0, [r7, #20]
 8005d46:	f000 f8d1 	bl	8005eec <prvInsertTimerInActiveList>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d01f      	beq.n	8005d90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005d50:	2300      	movs	r3, #0
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	2300      	movs	r3, #0
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	2100      	movs	r1, #0
 8005d5a:	6978      	ldr	r0, [r7, #20]
 8005d5c:	f7ff ff88 	bl	8005c70 <xTimerGenericCommand>
 8005d60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d113      	bne.n	8005d90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	60fb      	str	r3, [r7, #12]
}
 8005d7a:	bf00      	nop
 8005d7c:	e7fe      	b.n	8005d7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d84:	f023 0301 	bic.w	r3, r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	6978      	ldr	r0, [r7, #20]
 8005d96:	4798      	blx	r3
}
 8005d98:	bf00      	nop
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20000e80 	.word	0x20000e80

08005da4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f857 	bl	8005e64 <prvGetNextExpireTime>
 8005db6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f803 	bl	8005dc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005dc2:	f000 f8d5 	bl	8005f70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005dc6:	e7f1      	b.n	8005dac <prvTimerTask+0x8>

08005dc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005dd2:	f7ff fa43 	bl	800525c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f866 	bl	8005eac <prvSampleTimeNow>
 8005de0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d130      	bne.n	8005e4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <prvProcessTimerOrBlockTask+0x3c>
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d806      	bhi.n	8005e04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005df6:	f7ff fa3f 	bl	8005278 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff85 	bl	8005d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e02:	e024      	b.n	8005e4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d008      	beq.n	8005e1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <prvProcessTimerOrBlockTask+0x90>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d101      	bne.n	8005e18 <prvProcessTimerOrBlockTask+0x50>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e000      	b.n	8005e1a <prvProcessTimerOrBlockTask+0x52>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <prvProcessTimerOrBlockTask+0x94>)
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f7fe ffa7 	bl	8004d7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e2e:	f7ff fa23 	bl	8005278 <xTaskResumeAll>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <prvProcessTimerOrBlockTask+0x98>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
}
 8005e48:	e001      	b.n	8005e4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005e4a:	f7ff fa15 	bl	8005278 <xTaskResumeAll>
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000e84 	.word	0x20000e84
 8005e5c:	20000e88 	.word	0x20000e88
 8005e60:	e000ed04 	.word	0xe000ed04

08005e64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <prvGetNextExpireTime+0x44>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <prvGetNextExpireTime+0x16>
 8005e76:	2201      	movs	r2, #1
 8005e78:	e000      	b.n	8005e7c <prvGetNextExpireTime+0x18>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d105      	bne.n	8005e94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <prvGetNextExpireTime+0x44>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	e001      	b.n	8005e98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e98:	68fb      	ldr	r3, [r7, #12]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000e80 	.word	0x20000e80

08005eac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005eb4:	f7ff fa7e 	bl	80053b4 <xTaskGetTickCount>
 8005eb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <prvSampleTimeNow+0x3c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d205      	bcs.n	8005ed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ec4:	f000 f936 	bl	8006134 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ed6:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <prvSampleTimeNow+0x3c>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000e90 	.word	0x20000e90

08005eec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d812      	bhi.n	8005f38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	1ad2      	subs	r2, r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	e01b      	b.n	8005f5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f26:	4b10      	ldr	r3, [pc, #64]	; (8005f68 <prvInsertTimerInActiveList+0x7c>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fe fa08 	bl	8004346 <vListInsert>
 8005f36:	e012      	b.n	8005f5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d206      	bcs.n	8005f4e <prvInsertTimerInActiveList+0x62>
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e007      	b.n	8005f5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <prvInsertTimerInActiveList+0x80>)
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3304      	adds	r3, #4
 8005f56:	4619      	mov	r1, r3
 8005f58:	4610      	mov	r0, r2
 8005f5a:	f7fe f9f4 	bl	8004346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005f5e:	697b      	ldr	r3, [r7, #20]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000e84 	.word	0x20000e84
 8005f6c:	20000e80 	.word	0x20000e80

08005f70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08e      	sub	sp, #56	; 0x38
 8005f74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f76:	e0ca      	b.n	800610e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da18      	bge.n	8005fb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	3304      	adds	r3, #4
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	61fb      	str	r3, [r7, #28]
}
 8005f9c:	bf00      	nop
 8005f9e:	e7fe      	b.n	8005f9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fa6:	6850      	ldr	r0, [r2, #4]
 8005fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005faa:	6892      	ldr	r2, [r2, #8]
 8005fac:	4611      	mov	r1, r2
 8005fae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f2c0 80aa 	blt.w	800610c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe f9f5 	bl	80043b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fce:	463b      	mov	r3, r7
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff ff6b 	bl	8005eac <prvSampleTimeNow>
 8005fd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	f200 8097 	bhi.w	800610e <prvProcessReceivedCommands+0x19e>
 8005fe0:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <prvProcessReceivedCommands+0x78>)
 8005fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe6:	bf00      	nop
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	08006085 	.word	0x08006085
 8005ff8:	08006099 	.word	0x08006099
 8005ffc:	080060e3 	.word	0x080060e3
 8006000:	08006011 	.word	0x08006011
 8006004:	08006011 	.word	0x08006011
 8006008:	08006085 	.word	0x08006085
 800600c:	08006099 	.word	0x08006099
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	b2da      	uxtb	r2, r3
 800601c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	18d1      	adds	r1, r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006030:	f7ff ff5c 	bl	8005eec <prvInsertTimerInActiveList>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d069      	beq.n	800610e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05e      	beq.n	800610e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	441a      	add	r2, r3
 8006058:	2300      	movs	r3, #0
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2300      	movs	r3, #0
 800605e:	2100      	movs	r1, #0
 8006060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006062:	f7ff fe05 	bl	8005c70 <xTimerGenericCommand>
 8006066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d14f      	bne.n	800610e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	61bb      	str	r3, [r7, #24]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006096:	e03a      	b.n	800610e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	617b      	str	r3, [r7, #20]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	18d1      	adds	r1, r2, r3
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060dc:	f7ff ff06 	bl	8005eec <prvInsertTimerInActiveList>
					break;
 80060e0:	e015      	b.n	800610e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80060f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f2:	f000 fbdd 	bl	80068b0 <vPortFree>
 80060f6:	e00a      	b.n	800610e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fe:	f023 0301 	bic.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800610a:	e000      	b.n	800610e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800610c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800610e:	4b08      	ldr	r3, [pc, #32]	; (8006130 <prvProcessReceivedCommands+0x1c0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	1d39      	adds	r1, r7, #4
 8006114:	2200      	movs	r2, #0
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fc16 	bl	8004948 <xQueueReceive>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	f47f af2a 	bne.w	8005f78 <prvProcessReceivedCommands+0x8>
	}
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000e88 	.word	0x20000e88

08006134 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800613a:	e048      	b.n	80061ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800613c:	4b2d      	ldr	r3, [pc, #180]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006146:	4b2b      	ldr	r3, [pc, #172]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	3304      	adds	r3, #4
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe f92f 	bl	80043b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d02e      	beq.n	80061ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	d90e      	bls.n	80061a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800618e:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe f8d4 	bl	8004346 <vListInsert>
 800619e:	e016      	b.n	80061ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061a0:	2300      	movs	r3, #0
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	2100      	movs	r1, #0
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff fd60 	bl	8005c70 <xTimerGenericCommand>
 80061b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	603b      	str	r3, [r7, #0]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ce:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1b1      	bne.n	800613c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <prvSwitchTimerLists+0xc4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <prvSwitchTimerLists+0xc0>)
 80061e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80061e6:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <prvSwitchTimerLists+0xc4>)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	6013      	str	r3, [r2, #0]
}
 80061ec:	bf00      	nop
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000e80 	.word	0x20000e80
 80061f8:	20000e84 	.word	0x20000e84

080061fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006202:	f000 f967 	bl	80064d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <prvCheckForValidListAndQueue+0x60>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d120      	bne.n	8006250 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800620e:	4814      	ldr	r0, [pc, #80]	; (8006260 <prvCheckForValidListAndQueue+0x64>)
 8006210:	f7fe f848 	bl	80042a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006214:	4813      	ldr	r0, [pc, #76]	; (8006264 <prvCheckForValidListAndQueue+0x68>)
 8006216:	f7fe f845 	bl	80042a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <prvCheckForValidListAndQueue+0x6c>)
 800621c:	4a10      	ldr	r2, [pc, #64]	; (8006260 <prvCheckForValidListAndQueue+0x64>)
 800621e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006220:	4b12      	ldr	r3, [pc, #72]	; (800626c <prvCheckForValidListAndQueue+0x70>)
 8006222:	4a10      	ldr	r2, [pc, #64]	; (8006264 <prvCheckForValidListAndQueue+0x68>)
 8006224:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	4b11      	ldr	r3, [pc, #68]	; (8006270 <prvCheckForValidListAndQueue+0x74>)
 800622c:	4a11      	ldr	r2, [pc, #68]	; (8006274 <prvCheckForValidListAndQueue+0x78>)
 800622e:	2110      	movs	r1, #16
 8006230:	200a      	movs	r0, #10
 8006232:	f7fe f953 	bl	80044dc <xQueueGenericCreateStatic>
 8006236:	4603      	mov	r3, r0
 8006238:	4a08      	ldr	r2, [pc, #32]	; (800625c <prvCheckForValidListAndQueue+0x60>)
 800623a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <prvCheckForValidListAndQueue+0x60>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <prvCheckForValidListAndQueue+0x60>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	490b      	ldr	r1, [pc, #44]	; (8006278 <prvCheckForValidListAndQueue+0x7c>)
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe fd6c 	bl	8004d28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f000 f970 	bl	8006534 <vPortExitCritical>
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	20000e88 	.word	0x20000e88
 8006260:	20000e58 	.word	0x20000e58
 8006264:	20000e6c 	.word	0x20000e6c
 8006268:	20000e80 	.word	0x20000e80
 800626c:	20000e84 	.word	0x20000e84
 8006270:	20000f34 	.word	0x20000f34
 8006274:	20000e94 	.word	0x20000e94
 8006278:	08008734 	.word	0x08008734

0800627c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3b04      	subs	r3, #4
 800628c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3b04      	subs	r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b04      	subs	r3, #4
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062ac:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <pxPortInitialiseStack+0x64>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b14      	subs	r3, #20
 80062b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f06f 0202 	mvn.w	r2, #2
 80062ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	3b20      	subs	r3, #32
 80062d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	080062e5 	.word	0x080062e5

080062e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <prvTaskExitError+0x54>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d00a      	beq.n	800630e <prvTaskExitError+0x2a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	60fb      	str	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <prvTaskExitError+0x28>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	60bb      	str	r3, [r7, #8]
}
 8006320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006322:	bf00      	nop
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0fc      	beq.n	8006324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	2000000c 	.word	0x2000000c
 800633c:	00000000 	.word	0x00000000

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	; (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006396:	4b46      	ldr	r3, [pc, #280]	; (80064b0 <xPortStartScheduler+0x120>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a46      	ldr	r2, [pc, #280]	; (80064b4 <xPortStartScheduler+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10a      	bne.n	80063b6 <xPortStartScheduler+0x26>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	613b      	str	r3, [r7, #16]
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b6:	4b3e      	ldr	r3, [pc, #248]	; (80064b0 <xPortStartScheduler+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a3f      	ldr	r2, [pc, #252]	; (80064b8 <xPortStartScheduler+0x128>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10a      	bne.n	80063d6 <xPortStartScheduler+0x46>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <xPortStartScheduler+0x12c>)
 80063d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	4b31      	ldr	r3, [pc, #196]	; (80064c0 <xPortStartScheduler+0x130>)
 80063fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063fe:	4b31      	ldr	r3, [pc, #196]	; (80064c4 <xPortStartScheduler+0x134>)
 8006400:	2207      	movs	r2, #7
 8006402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006404:	e009      	b.n	800641a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <xPortStartScheduler+0x134>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3b01      	subs	r3, #1
 800640c:	4a2d      	ldr	r2, [pc, #180]	; (80064c4 <xPortStartScheduler+0x134>)
 800640e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	b2db      	uxtb	r3, r3
 8006418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d0ef      	beq.n	8006406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006426:	4b27      	ldr	r3, [pc, #156]	; (80064c4 <xPortStartScheduler+0x134>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1c3 0307 	rsb	r3, r3, #7
 800642e:	2b04      	cmp	r3, #4
 8006430:	d00a      	beq.n	8006448 <xPortStartScheduler+0xb8>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <xPortStartScheduler+0x134>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <xPortStartScheduler+0x134>)
 8006450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006452:	4b1c      	ldr	r3, [pc, #112]	; (80064c4 <xPortStartScheduler+0x134>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800645a:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <xPortStartScheduler+0x134>)
 800645c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <xPortStartScheduler+0x138>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <xPortStartScheduler+0x138>)
 800646c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <xPortStartScheduler+0x138>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a14      	ldr	r2, [pc, #80]	; (80064c8 <xPortStartScheduler+0x138>)
 8006478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800647c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800647e:	f000 f8dd 	bl	800663c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <xPortStartScheduler+0x13c>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006488:	f000 f8fc 	bl	8006684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800648c:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <xPortStartScheduler+0x140>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <xPortStartScheduler+0x140>)
 8006492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006498:	f7ff ff66 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800649c:	f7ff f854 	bl	8005548 <vTaskSwitchContext>
	prvTaskExitError();
 80064a0:	f7ff ff20 	bl	80062e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	e000ed00 	.word	0xe000ed00
 80064b4:	410fc271 	.word	0x410fc271
 80064b8:	410fc270 	.word	0x410fc270
 80064bc:	e000e400 	.word	0xe000e400
 80064c0:	20000f84 	.word	0x20000f84
 80064c4:	20000f88 	.word	0x20000f88
 80064c8:	e000ed20 	.word	0xe000ed20
 80064cc:	2000000c 	.word	0x2000000c
 80064d0:	e000ef34 	.word	0xe000ef34

080064d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	607b      	str	r3, [r7, #4]
}
 80064ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <vPortEnterCritical+0x58>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	3301      	adds	r3, #1
 80064f4:	4a0d      	ldr	r2, [pc, #52]	; (800652c <vPortEnterCritical+0x58>)
 80064f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <vPortEnterCritical+0x58>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortEnterCritical+0x5c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <vPortEnterCritical+0x4c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	603b      	str	r3, [r7, #0]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <vPortEnterCritical+0x4a>
	}
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	2000000c 	.word	0x2000000c
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800653a:	4b12      	ldr	r3, [pc, #72]	; (8006584 <vPortExitCritical+0x50>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <vPortExitCritical+0x24>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	607b      	str	r3, [r7, #4]
}
 8006554:	bf00      	nop
 8006556:	e7fe      	b.n	8006556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <vPortExitCritical+0x50>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <vPortExitCritical+0x50>)
 8006560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006562:	4b08      	ldr	r3, [pc, #32]	; (8006584 <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <vPortExitCritical+0x42>
 800656a:	2300      	movs	r3, #0
 800656c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f383 8811 	msr	BASEPRI, r3
}
 8006574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	2000000c 	.word	0x2000000c
	...

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f7fe ffc2 	bl	8005548 <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006612:	f7fe fedf 	bl	80053d4 <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <xPortSysTickHandler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <vPortSetupTimerInterrupt+0x38>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <vPortSetupTimerInterrupt+0x3c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <vPortSetupTimerInterrupt+0x40>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	4a09      	ldr	r2, [pc, #36]	; (8006680 <vPortSetupTimerInterrupt+0x44>)
 800665a:	3b01      	subs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800665e:	4b04      	ldr	r3, [pc, #16]	; (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010
 8006674:	e000e018 	.word	0xe000e018
 8006678:	20000000 	.word	0x20000000
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	e000e014 	.word	0xe000e014

08006684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006694 <vPortEnableVFP+0x10>
 8006688:	6801      	ldr	r1, [r0, #0]
 800668a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800668e:	6001      	str	r1, [r0, #0]
 8006690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006692:	bf00      	nop
 8006694:	e000ed88 	.word	0xe000ed88

08006698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800669e:	f3ef 8305 	mrs	r3, IPSR
 80066a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d914      	bls.n	80066d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <vPortValidateInterruptPriority+0x70>)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066b4:	4b15      	ldr	r3, [pc, #84]	; (800670c <vPortValidateInterruptPriority+0x74>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	7afa      	ldrb	r2, [r7, #11]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d20a      	bcs.n	80066d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
 80066d2:	e7fe      	b.n	80066d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066d4:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <vPortValidateInterruptPriority+0x78>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066dc:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <vPortValidateInterruptPriority+0x7c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d90a      	bls.n	80066fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	603b      	str	r3, [r7, #0]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <vPortValidateInterruptPriority+0x60>
	}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	e000e3f0 	.word	0xe000e3f0
 800670c:	20000f84 	.word	0x20000f84
 8006710:	e000ed0c 	.word	0xe000ed0c
 8006714:	20000f88 	.word	0x20000f88

08006718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006724:	f7fe fd9a 	bl	800525c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006728:	4b5b      	ldr	r3, [pc, #364]	; (8006898 <pvPortMalloc+0x180>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006730:	f000 f920 	bl	8006974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006734:	4b59      	ldr	r3, [pc, #356]	; (800689c <pvPortMalloc+0x184>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 8093 	bne.w	8006868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01d      	beq.n	8006784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006748:	2208      	movs	r2, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4413      	add	r3, r2
 800674e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d014      	beq.n	8006784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f023 0307 	bic.w	r3, r3, #7
 8006760:	3308      	adds	r3, #8
 8006762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <pvPortMalloc+0x6c>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	617b      	str	r3, [r7, #20]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d06e      	beq.n	8006868 <pvPortMalloc+0x150>
 800678a:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <pvPortMalloc+0x188>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d869      	bhi.n	8006868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006794:	4b43      	ldr	r3, [pc, #268]	; (80068a4 <pvPortMalloc+0x18c>)
 8006796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006798:	4b42      	ldr	r3, [pc, #264]	; (80068a4 <pvPortMalloc+0x18c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800679e:	e004      	b.n	80067aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <pvPortMalloc+0xa4>
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f1      	bne.n	80067a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067bc:	4b36      	ldr	r3, [pc, #216]	; (8006898 <pvPortMalloc+0x180>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d050      	beq.n	8006868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2208      	movs	r2, #8
 80067cc:	4413      	add	r3, r2
 80067ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	2308      	movs	r3, #8
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d91f      	bls.n	8006828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <pvPortMalloc+0xf8>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	613b      	str	r3, [r7, #16]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1ad2      	subs	r2, r2, r3
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006822:	69b8      	ldr	r0, [r7, #24]
 8006824:	f000 f908 	bl	8006a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <pvPortMalloc+0x188>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <pvPortMalloc+0x188>)
 8006834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <pvPortMalloc+0x188>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <pvPortMalloc+0x190>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d203      	bcs.n	800684a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006842:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <pvPortMalloc+0x188>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a18      	ldr	r2, [pc, #96]	; (80068a8 <pvPortMalloc+0x190>)
 8006848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4b13      	ldr	r3, [pc, #76]	; (800689c <pvPortMalloc+0x184>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	431a      	orrs	r2, r3
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <pvPortMalloc+0x194>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a11      	ldr	r2, [pc, #68]	; (80068ac <pvPortMalloc+0x194>)
 8006866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006868:	f7fe fd06 	bl	8005278 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <pvPortMalloc+0x174>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	60fb      	str	r3, [r7, #12]
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <pvPortMalloc+0x172>
	return pvReturn;
 800688c:	69fb      	ldr	r3, [r7, #28]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3728      	adds	r7, #40	; 0x28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20001b4c 	.word	0x20001b4c
 800689c:	20001b60 	.word	0x20001b60
 80068a0:	20001b50 	.word	0x20001b50
 80068a4:	20001b44 	.word	0x20001b44
 80068a8:	20001b54 	.word	0x20001b54
 80068ac:	20001b58 	.word	0x20001b58

080068b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d04d      	beq.n	800695e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068c2:	2308      	movs	r3, #8
 80068c4:	425b      	negs	r3, r3
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	4b24      	ldr	r3, [pc, #144]	; (8006968 <vPortFree+0xb8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <vPortFree+0x44>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	e7fe      	b.n	80068f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <vPortFree+0x62>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	4b14      	ldr	r3, [pc, #80]	; (8006968 <vPortFree+0xb8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4013      	ands	r3, r2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d11a      	bne.n	800695e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <vPortFree+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	43db      	mvns	r3, r3
 8006932:	401a      	ands	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006938:	f7fe fc90 	bl	800525c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b0a      	ldr	r3, [pc, #40]	; (800696c <vPortFree+0xbc>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4413      	add	r3, r2
 8006946:	4a09      	ldr	r2, [pc, #36]	; (800696c <vPortFree+0xbc>)
 8006948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800694a:	6938      	ldr	r0, [r7, #16]
 800694c:	f000 f874 	bl	8006a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <vPortFree+0xc0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	4a06      	ldr	r2, [pc, #24]	; (8006970 <vPortFree+0xc0>)
 8006958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800695a:	f7fe fc8d 	bl	8005278 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800695e:	bf00      	nop
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20001b60 	.word	0x20001b60
 800696c:	20001b50 	.word	0x20001b50
 8006970:	20001b5c 	.word	0x20001b5c

08006974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800697a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800697e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <prvHeapInit+0xac>)
 8006982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3307      	adds	r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0307 	bic.w	r3, r3, #7
 800699a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	4a1f      	ldr	r2, [pc, #124]	; (8006a20 <prvHeapInit+0xac>)
 80069a4:	4413      	add	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069ac:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <prvHeapInit+0xb0>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <prvHeapInit+0xb0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069c0:	2208      	movs	r2, #8
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0307 	bic.w	r3, r3, #7
 80069ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4a15      	ldr	r2, [pc, #84]	; (8006a28 <prvHeapInit+0xb4>)
 80069d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <prvHeapInit+0xb4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <prvHeapInit+0xb4>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069f4:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <prvHeapInit+0xb4>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <prvHeapInit+0xb8>)
 8006a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <prvHeapInit+0xbc>)
 8006a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <prvHeapInit+0xc0>)
 8006a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a12:	601a      	str	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	20000f8c 	.word	0x20000f8c
 8006a24:	20001b44 	.word	0x20001b44
 8006a28:	20001b4c 	.word	0x20001b4c
 8006a2c:	20001b54 	.word	0x20001b54
 8006a30:	20001b50 	.word	0x20001b50
 8006a34:	20001b60 	.word	0x20001b60

08006a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a40:	4b28      	ldr	r3, [pc, #160]	; (8006ae4 <prvInsertBlockIntoFreeList+0xac>)
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e002      	b.n	8006a4c <prvInsertBlockIntoFreeList+0x14>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d8f7      	bhi.n	8006a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4413      	add	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d108      	bne.n	8006a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	441a      	add	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d118      	bne.n	8006ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b15      	ldr	r3, [pc, #84]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d00d      	beq.n	8006ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	e008      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ab6:	4b0c      	ldr	r3, [pc, #48]	; (8006ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
 8006abe:	e003      	b.n	8006ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d002      	beq.n	8006ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20001b44 	.word	0x20001b44
 8006ae8:	20001b4c 	.word	0x20001b4c

08006aec <_ZdlPvj>:
 8006aec:	f000 b814 	b.w	8006b18 <_ZdlPv>

08006af0 <_Znwj>:
 8006af0:	2801      	cmp	r0, #1
 8006af2:	bf38      	it	cc
 8006af4:	2001      	movcc	r0, #1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f85a 	bl	8006bb4 <malloc>
 8006b00:	b930      	cbnz	r0, 8006b10 <_Znwj+0x20>
 8006b02:	f000 f81d 	bl	8006b40 <_ZSt15get_new_handlerv>
 8006b06:	b908      	cbnz	r0, 8006b0c <_Znwj+0x1c>
 8006b08:	f000 f822 	bl	8006b50 <abort>
 8006b0c:	4780      	blx	r0
 8006b0e:	e7f4      	b.n	8006afa <_Znwj+0xa>
 8006b10:	bd10      	pop	{r4, pc}

08006b12 <__cxa_pure_virtual>:
 8006b12:	b508      	push	{r3, lr}
 8006b14:	f000 f80e 	bl	8006b34 <_ZSt9terminatev>

08006b18 <_ZdlPv>:
 8006b18:	f000 b854 	b.w	8006bc4 <free>

08006b1c <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006b1c:	b508      	push	{r3, lr}
 8006b1e:	4780      	blx	r0
 8006b20:	f000 f816 	bl	8006b50 <abort>

08006b24 <_ZSt13get_terminatev>:
 8006b24:	4b02      	ldr	r3, [pc, #8]	; (8006b30 <_ZSt13get_terminatev+0xc>)
 8006b26:	6818      	ldr	r0, [r3, #0]
 8006b28:	f3bf 8f5b 	dmb	ish
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000010 	.word	0x20000010

08006b34 <_ZSt9terminatev>:
 8006b34:	b508      	push	{r3, lr}
 8006b36:	f7ff fff5 	bl	8006b24 <_ZSt13get_terminatev>
 8006b3a:	f7ff ffef 	bl	8006b1c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08006b40 <_ZSt15get_new_handlerv>:
 8006b40:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <_ZSt15get_new_handlerv+0xc>)
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	f3bf 8f5b 	dmb	ish
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20001b64 	.word	0x20001b64

08006b50 <abort>:
 8006b50:	b508      	push	{r3, lr}
 8006b52:	2006      	movs	r0, #6
 8006b54:	f000 f9fa 	bl	8006f4c <raise>
 8006b58:	2001      	movs	r0, #1
 8006b5a:	f7fa fb40 	bl	80011de <_exit>
	...

08006b60 <__errno>:
 8006b60:	4b01      	ldr	r3, [pc, #4]	; (8006b68 <__errno+0x8>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000014 	.word	0x20000014

08006b6c <__libc_init_array>:
 8006b6c:	b570      	push	{r4, r5, r6, lr}
 8006b6e:	4d0d      	ldr	r5, [pc, #52]	; (8006ba4 <__libc_init_array+0x38>)
 8006b70:	4c0d      	ldr	r4, [pc, #52]	; (8006ba8 <__libc_init_array+0x3c>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	2600      	movs	r6, #0
 8006b78:	42a6      	cmp	r6, r4
 8006b7a:	d109      	bne.n	8006b90 <__libc_init_array+0x24>
 8006b7c:	4d0b      	ldr	r5, [pc, #44]	; (8006bac <__libc_init_array+0x40>)
 8006b7e:	4c0c      	ldr	r4, [pc, #48]	; (8006bb0 <__libc_init_array+0x44>)
 8006b80:	f001 fd82 	bl	8008688 <_init>
 8006b84:	1b64      	subs	r4, r4, r5
 8006b86:	10a4      	asrs	r4, r4, #2
 8006b88:	2600      	movs	r6, #0
 8006b8a:	42a6      	cmp	r6, r4
 8006b8c:	d105      	bne.n	8006b9a <__libc_init_array+0x2e>
 8006b8e:	bd70      	pop	{r4, r5, r6, pc}
 8006b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b94:	4798      	blx	r3
 8006b96:	3601      	adds	r6, #1
 8006b98:	e7ee      	b.n	8006b78 <__libc_init_array+0xc>
 8006b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9e:	4798      	blx	r3
 8006ba0:	3601      	adds	r6, #1
 8006ba2:	e7f2      	b.n	8006b8a <__libc_init_array+0x1e>
 8006ba4:	080089d0 	.word	0x080089d0
 8006ba8:	080089d0 	.word	0x080089d0
 8006bac:	080089d0 	.word	0x080089d0
 8006bb0:	080089d8 	.word	0x080089d8

08006bb4 <malloc>:
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <malloc+0xc>)
 8006bb6:	4601      	mov	r1, r0
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	f000 b88d 	b.w	8006cd8 <_malloc_r>
 8006bbe:	bf00      	nop
 8006bc0:	20000014 	.word	0x20000014

08006bc4 <free>:
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <free+0xc>)
 8006bc6:	4601      	mov	r1, r0
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f000 b819 	b.w	8006c00 <_free_r>
 8006bce:	bf00      	nop
 8006bd0:	20000014 	.word	0x20000014

08006bd4 <memcpy>:
 8006bd4:	440a      	add	r2, r1
 8006bd6:	4291      	cmp	r1, r2
 8006bd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bdc:	d100      	bne.n	8006be0 <memcpy+0xc>
 8006bde:	4770      	bx	lr
 8006be0:	b510      	push	{r4, lr}
 8006be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006be6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bea:	4291      	cmp	r1, r2
 8006bec:	d1f9      	bne.n	8006be2 <memcpy+0xe>
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <memset>:
 8006bf0:	4402      	add	r2, r0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d100      	bne.n	8006bfa <memset+0xa>
 8006bf8:	4770      	bx	lr
 8006bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bfe:	e7f9      	b.n	8006bf4 <memset+0x4>

08006c00 <_free_r>:
 8006c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d044      	beq.n	8006c90 <_free_r+0x90>
 8006c06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c0a:	9001      	str	r0, [sp, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c12:	bfb8      	it	lt
 8006c14:	18e4      	addlt	r4, r4, r3
 8006c16:	f000 fd43 	bl	80076a0 <__malloc_lock>
 8006c1a:	4a1e      	ldr	r2, [pc, #120]	; (8006c94 <_free_r+0x94>)
 8006c1c:	9801      	ldr	r0, [sp, #4]
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	b933      	cbnz	r3, 8006c30 <_free_r+0x30>
 8006c22:	6063      	str	r3, [r4, #4]
 8006c24:	6014      	str	r4, [r2, #0]
 8006c26:	b003      	add	sp, #12
 8006c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c2c:	f000 bd3e 	b.w	80076ac <__malloc_unlock>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d908      	bls.n	8006c46 <_free_r+0x46>
 8006c34:	6825      	ldr	r5, [r4, #0]
 8006c36:	1961      	adds	r1, r4, r5
 8006c38:	428b      	cmp	r3, r1
 8006c3a:	bf01      	itttt	eq
 8006c3c:	6819      	ldreq	r1, [r3, #0]
 8006c3e:	685b      	ldreq	r3, [r3, #4]
 8006c40:	1949      	addeq	r1, r1, r5
 8006c42:	6021      	streq	r1, [r4, #0]
 8006c44:	e7ed      	b.n	8006c22 <_free_r+0x22>
 8006c46:	461a      	mov	r2, r3
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	b10b      	cbz	r3, 8006c50 <_free_r+0x50>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d9fa      	bls.n	8006c46 <_free_r+0x46>
 8006c50:	6811      	ldr	r1, [r2, #0]
 8006c52:	1855      	adds	r5, r2, r1
 8006c54:	42a5      	cmp	r5, r4
 8006c56:	d10b      	bne.n	8006c70 <_free_r+0x70>
 8006c58:	6824      	ldr	r4, [r4, #0]
 8006c5a:	4421      	add	r1, r4
 8006c5c:	1854      	adds	r4, r2, r1
 8006c5e:	42a3      	cmp	r3, r4
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	d1e0      	bne.n	8006c26 <_free_r+0x26>
 8006c64:	681c      	ldr	r4, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	6053      	str	r3, [r2, #4]
 8006c6a:	4421      	add	r1, r4
 8006c6c:	6011      	str	r1, [r2, #0]
 8006c6e:	e7da      	b.n	8006c26 <_free_r+0x26>
 8006c70:	d902      	bls.n	8006c78 <_free_r+0x78>
 8006c72:	230c      	movs	r3, #12
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	e7d6      	b.n	8006c26 <_free_r+0x26>
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	1961      	adds	r1, r4, r5
 8006c7c:	428b      	cmp	r3, r1
 8006c7e:	bf04      	itt	eq
 8006c80:	6819      	ldreq	r1, [r3, #0]
 8006c82:	685b      	ldreq	r3, [r3, #4]
 8006c84:	6063      	str	r3, [r4, #4]
 8006c86:	bf04      	itt	eq
 8006c88:	1949      	addeq	r1, r1, r5
 8006c8a:	6021      	streq	r1, [r4, #0]
 8006c8c:	6054      	str	r4, [r2, #4]
 8006c8e:	e7ca      	b.n	8006c26 <_free_r+0x26>
 8006c90:	b003      	add	sp, #12
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	20001b68 	.word	0x20001b68

08006c98 <sbrk_aligned>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4e0e      	ldr	r6, [pc, #56]	; (8006cd4 <sbrk_aligned+0x3c>)
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	6831      	ldr	r1, [r6, #0]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b911      	cbnz	r1, 8006caa <sbrk_aligned+0x12>
 8006ca4:	f000 f91a 	bl	8006edc <_sbrk_r>
 8006ca8:	6030      	str	r0, [r6, #0]
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 f915 	bl	8006edc <_sbrk_r>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d00a      	beq.n	8006ccc <sbrk_aligned+0x34>
 8006cb6:	1cc4      	adds	r4, r0, #3
 8006cb8:	f024 0403 	bic.w	r4, r4, #3
 8006cbc:	42a0      	cmp	r0, r4
 8006cbe:	d007      	beq.n	8006cd0 <sbrk_aligned+0x38>
 8006cc0:	1a21      	subs	r1, r4, r0
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f90a 	bl	8006edc <_sbrk_r>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d101      	bne.n	8006cd0 <sbrk_aligned+0x38>
 8006ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	20001b6c 	.word	0x20001b6c

08006cd8 <_malloc_r>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	1ccd      	adds	r5, r1, #3
 8006cde:	f025 0503 	bic.w	r5, r5, #3
 8006ce2:	3508      	adds	r5, #8
 8006ce4:	2d0c      	cmp	r5, #12
 8006ce6:	bf38      	it	cc
 8006ce8:	250c      	movcc	r5, #12
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	4607      	mov	r7, r0
 8006cee:	db01      	blt.n	8006cf4 <_malloc_r+0x1c>
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	d905      	bls.n	8006d00 <_malloc_r+0x28>
 8006cf4:	230c      	movs	r3, #12
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	2600      	movs	r6, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	4e2e      	ldr	r6, [pc, #184]	; (8006dbc <_malloc_r+0xe4>)
 8006d02:	f000 fccd 	bl	80076a0 <__malloc_lock>
 8006d06:	6833      	ldr	r3, [r6, #0]
 8006d08:	461c      	mov	r4, r3
 8006d0a:	bb34      	cbnz	r4, 8006d5a <_malloc_r+0x82>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff ffc2 	bl	8006c98 <sbrk_aligned>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	4604      	mov	r4, r0
 8006d18:	d14d      	bne.n	8006db6 <_malloc_r+0xde>
 8006d1a:	6834      	ldr	r4, [r6, #0]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	d140      	bne.n	8006da4 <_malloc_r+0xcc>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	4631      	mov	r1, r6
 8006d26:	4638      	mov	r0, r7
 8006d28:	eb04 0803 	add.w	r8, r4, r3
 8006d2c:	f000 f8d6 	bl	8006edc <_sbrk_r>
 8006d30:	4580      	cmp	r8, r0
 8006d32:	d13a      	bne.n	8006daa <_malloc_r+0xd2>
 8006d34:	6821      	ldr	r1, [r4, #0]
 8006d36:	3503      	adds	r5, #3
 8006d38:	1a6d      	subs	r5, r5, r1
 8006d3a:	f025 0503 	bic.w	r5, r5, #3
 8006d3e:	3508      	adds	r5, #8
 8006d40:	2d0c      	cmp	r5, #12
 8006d42:	bf38      	it	cc
 8006d44:	250c      	movcc	r5, #12
 8006d46:	4629      	mov	r1, r5
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff ffa5 	bl	8006c98 <sbrk_aligned>
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d02b      	beq.n	8006daa <_malloc_r+0xd2>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	442b      	add	r3, r5
 8006d56:	6023      	str	r3, [r4, #0]
 8006d58:	e00e      	b.n	8006d78 <_malloc_r+0xa0>
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	1b52      	subs	r2, r2, r5
 8006d5e:	d41e      	bmi.n	8006d9e <_malloc_r+0xc6>
 8006d60:	2a0b      	cmp	r2, #11
 8006d62:	d916      	bls.n	8006d92 <_malloc_r+0xba>
 8006d64:	1961      	adds	r1, r4, r5
 8006d66:	42a3      	cmp	r3, r4
 8006d68:	6025      	str	r5, [r4, #0]
 8006d6a:	bf18      	it	ne
 8006d6c:	6059      	strne	r1, [r3, #4]
 8006d6e:	6863      	ldr	r3, [r4, #4]
 8006d70:	bf08      	it	eq
 8006d72:	6031      	streq	r1, [r6, #0]
 8006d74:	5162      	str	r2, [r4, r5]
 8006d76:	604b      	str	r3, [r1, #4]
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f104 060b 	add.w	r6, r4, #11
 8006d7e:	f000 fc95 	bl	80076ac <__malloc_unlock>
 8006d82:	f026 0607 	bic.w	r6, r6, #7
 8006d86:	1d23      	adds	r3, r4, #4
 8006d88:	1af2      	subs	r2, r6, r3
 8006d8a:	d0b6      	beq.n	8006cfa <_malloc_r+0x22>
 8006d8c:	1b9b      	subs	r3, r3, r6
 8006d8e:	50a3      	str	r3, [r4, r2]
 8006d90:	e7b3      	b.n	8006cfa <_malloc_r+0x22>
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	bf0c      	ite	eq
 8006d98:	6032      	streq	r2, [r6, #0]
 8006d9a:	605a      	strne	r2, [r3, #4]
 8006d9c:	e7ec      	b.n	8006d78 <_malloc_r+0xa0>
 8006d9e:	4623      	mov	r3, r4
 8006da0:	6864      	ldr	r4, [r4, #4]
 8006da2:	e7b2      	b.n	8006d0a <_malloc_r+0x32>
 8006da4:	4634      	mov	r4, r6
 8006da6:	6876      	ldr	r6, [r6, #4]
 8006da8:	e7b9      	b.n	8006d1e <_malloc_r+0x46>
 8006daa:	230c      	movs	r3, #12
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4638      	mov	r0, r7
 8006db0:	f000 fc7c 	bl	80076ac <__malloc_unlock>
 8006db4:	e7a1      	b.n	8006cfa <_malloc_r+0x22>
 8006db6:	6025      	str	r5, [r4, #0]
 8006db8:	e7de      	b.n	8006d78 <_malloc_r+0xa0>
 8006dba:	bf00      	nop
 8006dbc:	20001b68 	.word	0x20001b68

08006dc0 <iprintf>:
 8006dc0:	b40f      	push	{r0, r1, r2, r3}
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <iprintf+0x2c>)
 8006dc4:	b513      	push	{r0, r1, r4, lr}
 8006dc6:	681c      	ldr	r4, [r3, #0]
 8006dc8:	b124      	cbz	r4, 8006dd4 <iprintf+0x14>
 8006dca:	69a3      	ldr	r3, [r4, #24]
 8006dcc:	b913      	cbnz	r3, 8006dd4 <iprintf+0x14>
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fb4e 	bl	8007470 <__sinit>
 8006dd4:	ab05      	add	r3, sp, #20
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	68a1      	ldr	r1, [r4, #8]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fe67 	bl	8007ab0 <_vfiprintf_r>
 8006de2:	b002      	add	sp, #8
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	b004      	add	sp, #16
 8006dea:	4770      	bx	lr
 8006dec:	20000014 	.word	0x20000014

08006df0 <_puts_r>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	460e      	mov	r6, r1
 8006df4:	4605      	mov	r5, r0
 8006df6:	b118      	cbz	r0, 8006e00 <_puts_r+0x10>
 8006df8:	6983      	ldr	r3, [r0, #24]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <_puts_r+0x10>
 8006dfc:	f000 fb38 	bl	8007470 <__sinit>
 8006e00:	69ab      	ldr	r3, [r5, #24]
 8006e02:	68ac      	ldr	r4, [r5, #8]
 8006e04:	b913      	cbnz	r3, 8006e0c <_puts_r+0x1c>
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 fb32 	bl	8007470 <__sinit>
 8006e0c:	4b2c      	ldr	r3, [pc, #176]	; (8006ec0 <_puts_r+0xd0>)
 8006e0e:	429c      	cmp	r4, r3
 8006e10:	d120      	bne.n	8006e54 <_puts_r+0x64>
 8006e12:	686c      	ldr	r4, [r5, #4]
 8006e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e16:	07db      	lsls	r3, r3, #31
 8006e18:	d405      	bmi.n	8006e26 <_puts_r+0x36>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	0598      	lsls	r0, r3, #22
 8006e1e:	d402      	bmi.n	8006e26 <_puts_r+0x36>
 8006e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e22:	f000 fbc3 	bl	80075ac <__retarget_lock_acquire_recursive>
 8006e26:	89a3      	ldrh	r3, [r4, #12]
 8006e28:	0719      	lsls	r1, r3, #28
 8006e2a:	d51d      	bpl.n	8006e68 <_puts_r+0x78>
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	b1db      	cbz	r3, 8006e68 <_puts_r+0x78>
 8006e30:	3e01      	subs	r6, #1
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	bb39      	cbnz	r1, 8006e8e <_puts_r+0x9e>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	da38      	bge.n	8006eb4 <_puts_r+0xc4>
 8006e42:	4622      	mov	r2, r4
 8006e44:	210a      	movs	r1, #10
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f916 	bl	8007078 <__swbuf_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d011      	beq.n	8006e74 <_puts_r+0x84>
 8006e50:	250a      	movs	r5, #10
 8006e52:	e011      	b.n	8006e78 <_puts_r+0x88>
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <_puts_r+0xd4>)
 8006e56:	429c      	cmp	r4, r3
 8006e58:	d101      	bne.n	8006e5e <_puts_r+0x6e>
 8006e5a:	68ac      	ldr	r4, [r5, #8]
 8006e5c:	e7da      	b.n	8006e14 <_puts_r+0x24>
 8006e5e:	4b1a      	ldr	r3, [pc, #104]	; (8006ec8 <_puts_r+0xd8>)
 8006e60:	429c      	cmp	r4, r3
 8006e62:	bf08      	it	eq
 8006e64:	68ec      	ldreq	r4, [r5, #12]
 8006e66:	e7d5      	b.n	8006e14 <_puts_r+0x24>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f000 f968 	bl	8007140 <__swsetup_r>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d0dd      	beq.n	8006e30 <_puts_r+0x40>
 8006e74:	f04f 35ff 	mov.w	r5, #4294967295
 8006e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e7a:	07da      	lsls	r2, r3, #31
 8006e7c:	d405      	bmi.n	8006e8a <_puts_r+0x9a>
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	059b      	lsls	r3, r3, #22
 8006e82:	d402      	bmi.n	8006e8a <_puts_r+0x9a>
 8006e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e86:	f000 fb92 	bl	80075ae <__retarget_lock_release_recursive>
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	bd70      	pop	{r4, r5, r6, pc}
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da04      	bge.n	8006e9c <_puts_r+0xac>
 8006e92:	69a2      	ldr	r2, [r4, #24]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	dc06      	bgt.n	8006ea6 <_puts_r+0xb6>
 8006e98:	290a      	cmp	r1, #10
 8006e9a:	d004      	beq.n	8006ea6 <_puts_r+0xb6>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	7019      	strb	r1, [r3, #0]
 8006ea4:	e7c5      	b.n	8006e32 <_puts_r+0x42>
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f000 f8e5 	bl	8007078 <__swbuf_r>
 8006eae:	3001      	adds	r0, #1
 8006eb0:	d1bf      	bne.n	8006e32 <_puts_r+0x42>
 8006eb2:	e7df      	b.n	8006e74 <_puts_r+0x84>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	250a      	movs	r5, #10
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	6022      	str	r2, [r4, #0]
 8006ebc:	701d      	strb	r5, [r3, #0]
 8006ebe:	e7db      	b.n	8006e78 <_puts_r+0x88>
 8006ec0:	08008838 	.word	0x08008838
 8006ec4:	08008858 	.word	0x08008858
 8006ec8:	08008818 	.word	0x08008818

08006ecc <puts>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	; (8006ed8 <puts+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7ff bf8d 	b.w	8006df0 <_puts_r>
 8006ed6:	bf00      	nop
 8006ed8:	20000014 	.word	0x20000014

08006edc <_sbrk_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	; (8006ef8 <_sbrk_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fa f9d4 	bl	8001294 <_sbrk>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_sbrk_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_sbrk_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20001b74 	.word	0x20001b74

08006efc <_raise_r>:
 8006efc:	291f      	cmp	r1, #31
 8006efe:	b538      	push	{r3, r4, r5, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	d904      	bls.n	8006f10 <_raise_r+0x14>
 8006f06:	2316      	movs	r3, #22
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f12:	b112      	cbz	r2, 8006f1a <_raise_r+0x1e>
 8006f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f18:	b94b      	cbnz	r3, 8006f2e <_raise_r+0x32>
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f830 	bl	8006f80 <_getpid_r>
 8006f20:	462a      	mov	r2, r5
 8006f22:	4601      	mov	r1, r0
 8006f24:	4620      	mov	r0, r4
 8006f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f2a:	f000 b817 	b.w	8006f5c <_kill_r>
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d00a      	beq.n	8006f48 <_raise_r+0x4c>
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	d103      	bne.n	8006f3e <_raise_r+0x42>
 8006f36:	2316      	movs	r3, #22
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	e7e7      	b.n	8006f0e <_raise_r+0x12>
 8006f3e:	2400      	movs	r4, #0
 8006f40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f44:	4628      	mov	r0, r5
 8006f46:	4798      	blx	r3
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e7e0      	b.n	8006f0e <_raise_r+0x12>

08006f4c <raise>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	; (8006f58 <raise+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f7ff bfd3 	b.w	8006efc <_raise_r>
 8006f56:	bf00      	nop
 8006f58:	20000014 	.word	0x20000014

08006f5c <_kill_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_kill_r+0x20>)
 8006f60:	2300      	movs	r3, #0
 8006f62:	4604      	mov	r4, r0
 8006f64:	4608      	mov	r0, r1
 8006f66:	4611      	mov	r1, r2
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	f7fa f928 	bl	80011be <_kill>
 8006f6e:	1c43      	adds	r3, r0, #1
 8006f70:	d102      	bne.n	8006f78 <_kill_r+0x1c>
 8006f72:	682b      	ldr	r3, [r5, #0]
 8006f74:	b103      	cbz	r3, 8006f78 <_kill_r+0x1c>
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	bd38      	pop	{r3, r4, r5, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20001b74 	.word	0x20001b74

08006f80 <_getpid_r>:
 8006f80:	f7fa b915 	b.w	80011ae <_getpid>

08006f84 <siscanf>:
 8006f84:	b40e      	push	{r1, r2, r3}
 8006f86:	b510      	push	{r4, lr}
 8006f88:	b09f      	sub	sp, #124	; 0x7c
 8006f8a:	ac21      	add	r4, sp, #132	; 0x84
 8006f8c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006f90:	f854 2b04 	ldr.w	r2, [r4], #4
 8006f94:	9201      	str	r2, [sp, #4]
 8006f96:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006f9a:	9004      	str	r0, [sp, #16]
 8006f9c:	9008      	str	r0, [sp, #32]
 8006f9e:	f7f9 f921 	bl	80001e4 <strlen>
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <siscanf+0x50>)
 8006fa4:	9005      	str	r0, [sp, #20]
 8006fa6:	9009      	str	r0, [sp, #36]	; 0x24
 8006fa8:	930d      	str	r3, [sp, #52]	; 0x34
 8006faa:	480b      	ldr	r0, [pc, #44]	; (8006fd8 <siscanf+0x54>)
 8006fac:	9a01      	ldr	r2, [sp, #4]
 8006fae:	6800      	ldr	r0, [r0, #0]
 8006fb0:	9403      	str	r4, [sp, #12]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9311      	str	r3, [sp, #68]	; 0x44
 8006fb6:	9316      	str	r3, [sp, #88]	; 0x58
 8006fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006fc0:	a904      	add	r1, sp, #16
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	f000 fbd2 	bl	800776c <__ssvfiscanf_r>
 8006fc8:	b01f      	add	sp, #124	; 0x7c
 8006fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fce:	b003      	add	sp, #12
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	20000014 	.word	0x20000014

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f001 f97a 	bl	80082dc <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__seofread>:
 8006ffe:	2000      	movs	r0, #0
 8007000:	4770      	bx	lr

08007002 <__swrite>:
 8007002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	461f      	mov	r7, r3
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	05db      	lsls	r3, r3, #23
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	4616      	mov	r6, r2
 8007012:	d505      	bpl.n	8007020 <__swrite+0x1e>
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	2302      	movs	r3, #2
 800701a:	2200      	movs	r2, #0
 800701c:	f000 fac8 	bl	80075b0 <_lseek_r>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	4632      	mov	r2, r6
 800702e:	463b      	mov	r3, r7
 8007030:	4628      	mov	r0, r5
 8007032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	f000 b871 	b.w	800711c <_write_r>

0800703a <__sseek>:
 800703a:	b510      	push	{r4, lr}
 800703c:	460c      	mov	r4, r1
 800703e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007042:	f000 fab5 	bl	80075b0 <_lseek_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	bf15      	itete	ne
 800704c:	6560      	strne	r0, [r4, #84]	; 0x54
 800704e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007056:	81a3      	strheq	r3, [r4, #12]
 8007058:	bf18      	it	ne
 800705a:	81a3      	strhne	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__sclose>:
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 b8db 	b.w	800721c <_close_r>

08007066 <strcpy>:
 8007066:	4603      	mov	r3, r0
 8007068:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706c:	f803 2b01 	strb.w	r2, [r3], #1
 8007070:	2a00      	cmp	r2, #0
 8007072:	d1f9      	bne.n	8007068 <strcpy+0x2>
 8007074:	4770      	bx	lr
	...

08007078 <__swbuf_r>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	460e      	mov	r6, r1
 800707c:	4614      	mov	r4, r2
 800707e:	4605      	mov	r5, r0
 8007080:	b118      	cbz	r0, 800708a <__swbuf_r+0x12>
 8007082:	6983      	ldr	r3, [r0, #24]
 8007084:	b90b      	cbnz	r3, 800708a <__swbuf_r+0x12>
 8007086:	f000 f9f3 	bl	8007470 <__sinit>
 800708a:	4b21      	ldr	r3, [pc, #132]	; (8007110 <__swbuf_r+0x98>)
 800708c:	429c      	cmp	r4, r3
 800708e:	d12b      	bne.n	80070e8 <__swbuf_r+0x70>
 8007090:	686c      	ldr	r4, [r5, #4]
 8007092:	69a3      	ldr	r3, [r4, #24]
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	071a      	lsls	r2, r3, #28
 800709a:	d52f      	bpl.n	80070fc <__swbuf_r+0x84>
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	b36b      	cbz	r3, 80070fc <__swbuf_r+0x84>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	6820      	ldr	r0, [r4, #0]
 80070a4:	1ac0      	subs	r0, r0, r3
 80070a6:	6963      	ldr	r3, [r4, #20]
 80070a8:	b2f6      	uxtb	r6, r6
 80070aa:	4283      	cmp	r3, r0
 80070ac:	4637      	mov	r7, r6
 80070ae:	dc04      	bgt.n	80070ba <__swbuf_r+0x42>
 80070b0:	4621      	mov	r1, r4
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 f948 	bl	8007348 <_fflush_r>
 80070b8:	bb30      	cbnz	r0, 8007108 <__swbuf_r+0x90>
 80070ba:	68a3      	ldr	r3, [r4, #8]
 80070bc:	3b01      	subs	r3, #1
 80070be:	60a3      	str	r3, [r4, #8]
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	6022      	str	r2, [r4, #0]
 80070c6:	701e      	strb	r6, [r3, #0]
 80070c8:	6963      	ldr	r3, [r4, #20]
 80070ca:	3001      	adds	r0, #1
 80070cc:	4283      	cmp	r3, r0
 80070ce:	d004      	beq.n	80070da <__swbuf_r+0x62>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	07db      	lsls	r3, r3, #31
 80070d4:	d506      	bpl.n	80070e4 <__swbuf_r+0x6c>
 80070d6:	2e0a      	cmp	r6, #10
 80070d8:	d104      	bne.n	80070e4 <__swbuf_r+0x6c>
 80070da:	4621      	mov	r1, r4
 80070dc:	4628      	mov	r0, r5
 80070de:	f000 f933 	bl	8007348 <_fflush_r>
 80070e2:	b988      	cbnz	r0, 8007108 <__swbuf_r+0x90>
 80070e4:	4638      	mov	r0, r7
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <__swbuf_r+0x9c>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	d101      	bne.n	80070f2 <__swbuf_r+0x7a>
 80070ee:	68ac      	ldr	r4, [r5, #8]
 80070f0:	e7cf      	b.n	8007092 <__swbuf_r+0x1a>
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <__swbuf_r+0xa0>)
 80070f4:	429c      	cmp	r4, r3
 80070f6:	bf08      	it	eq
 80070f8:	68ec      	ldreq	r4, [r5, #12]
 80070fa:	e7ca      	b.n	8007092 <__swbuf_r+0x1a>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f81e 	bl	8007140 <__swsetup_r>
 8007104:	2800      	cmp	r0, #0
 8007106:	d0cb      	beq.n	80070a0 <__swbuf_r+0x28>
 8007108:	f04f 37ff 	mov.w	r7, #4294967295
 800710c:	e7ea      	b.n	80070e4 <__swbuf_r+0x6c>
 800710e:	bf00      	nop
 8007110:	08008838 	.word	0x08008838
 8007114:	08008858 	.word	0x08008858
 8007118:	08008818 	.word	0x08008818

0800711c <_write_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_write_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7f9 fc58 	bl	80009e0 <_write>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_write_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_write_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20001b74 	.word	0x20001b74

08007140 <__swsetup_r>:
 8007140:	4b32      	ldr	r3, [pc, #200]	; (800720c <__swsetup_r+0xcc>)
 8007142:	b570      	push	{r4, r5, r6, lr}
 8007144:	681d      	ldr	r5, [r3, #0]
 8007146:	4606      	mov	r6, r0
 8007148:	460c      	mov	r4, r1
 800714a:	b125      	cbz	r5, 8007156 <__swsetup_r+0x16>
 800714c:	69ab      	ldr	r3, [r5, #24]
 800714e:	b913      	cbnz	r3, 8007156 <__swsetup_r+0x16>
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f98d 	bl	8007470 <__sinit>
 8007156:	4b2e      	ldr	r3, [pc, #184]	; (8007210 <__swsetup_r+0xd0>)
 8007158:	429c      	cmp	r4, r3
 800715a:	d10f      	bne.n	800717c <__swsetup_r+0x3c>
 800715c:	686c      	ldr	r4, [r5, #4]
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007164:	0719      	lsls	r1, r3, #28
 8007166:	d42c      	bmi.n	80071c2 <__swsetup_r+0x82>
 8007168:	06dd      	lsls	r5, r3, #27
 800716a:	d411      	bmi.n	8007190 <__swsetup_r+0x50>
 800716c:	2309      	movs	r3, #9
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007174:	81a3      	strh	r3, [r4, #12]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	e03e      	b.n	80071fa <__swsetup_r+0xba>
 800717c:	4b25      	ldr	r3, [pc, #148]	; (8007214 <__swsetup_r+0xd4>)
 800717e:	429c      	cmp	r4, r3
 8007180:	d101      	bne.n	8007186 <__swsetup_r+0x46>
 8007182:	68ac      	ldr	r4, [r5, #8]
 8007184:	e7eb      	b.n	800715e <__swsetup_r+0x1e>
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <__swsetup_r+0xd8>)
 8007188:	429c      	cmp	r4, r3
 800718a:	bf08      	it	eq
 800718c:	68ec      	ldreq	r4, [r5, #12]
 800718e:	e7e6      	b.n	800715e <__swsetup_r+0x1e>
 8007190:	0758      	lsls	r0, r3, #29
 8007192:	d512      	bpl.n	80071ba <__swsetup_r+0x7a>
 8007194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007196:	b141      	cbz	r1, 80071aa <__swsetup_r+0x6a>
 8007198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800719c:	4299      	cmp	r1, r3
 800719e:	d002      	beq.n	80071a6 <__swsetup_r+0x66>
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7ff fd2d 	bl	8006c00 <_free_r>
 80071a6:	2300      	movs	r3, #0
 80071a8:	6363      	str	r3, [r4, #52]	; 0x34
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	2300      	movs	r3, #0
 80071b4:	6063      	str	r3, [r4, #4]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	89a3      	ldrh	r3, [r4, #12]
 80071bc:	f043 0308 	orr.w	r3, r3, #8
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	b94b      	cbnz	r3, 80071da <__swsetup_r+0x9a>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071d0:	d003      	beq.n	80071da <__swsetup_r+0x9a>
 80071d2:	4621      	mov	r1, r4
 80071d4:	4630      	mov	r0, r6
 80071d6:	f000 fa23 	bl	8007620 <__smakebuf_r>
 80071da:	89a0      	ldrh	r0, [r4, #12]
 80071dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071e0:	f010 0301 	ands.w	r3, r0, #1
 80071e4:	d00a      	beq.n	80071fc <__swsetup_r+0xbc>
 80071e6:	2300      	movs	r3, #0
 80071e8:	60a3      	str	r3, [r4, #8]
 80071ea:	6963      	ldr	r3, [r4, #20]
 80071ec:	425b      	negs	r3, r3
 80071ee:	61a3      	str	r3, [r4, #24]
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	b943      	cbnz	r3, 8007206 <__swsetup_r+0xc6>
 80071f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071f8:	d1ba      	bne.n	8007170 <__swsetup_r+0x30>
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	0781      	lsls	r1, r0, #30
 80071fe:	bf58      	it	pl
 8007200:	6963      	ldrpl	r3, [r4, #20]
 8007202:	60a3      	str	r3, [r4, #8]
 8007204:	e7f4      	b.n	80071f0 <__swsetup_r+0xb0>
 8007206:	2000      	movs	r0, #0
 8007208:	e7f7      	b.n	80071fa <__swsetup_r+0xba>
 800720a:	bf00      	nop
 800720c:	20000014 	.word	0x20000014
 8007210:	08008838 	.word	0x08008838
 8007214:	08008858 	.word	0x08008858
 8007218:	08008818 	.word	0x08008818

0800721c <_close_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d06      	ldr	r5, [pc, #24]	; (8007238 <_close_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7fa f800 	bl	800122c <_close>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_close_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_close_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	20001b74 	.word	0x20001b74

0800723c <__sflush_r>:
 800723c:	898a      	ldrh	r2, [r1, #12]
 800723e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007242:	4605      	mov	r5, r0
 8007244:	0710      	lsls	r0, r2, #28
 8007246:	460c      	mov	r4, r1
 8007248:	d458      	bmi.n	80072fc <__sflush_r+0xc0>
 800724a:	684b      	ldr	r3, [r1, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc05      	bgt.n	800725c <__sflush_r+0x20>
 8007250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc02      	bgt.n	800725c <__sflush_r+0x20>
 8007256:	2000      	movs	r0, #0
 8007258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800725c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800725e:	2e00      	cmp	r6, #0
 8007260:	d0f9      	beq.n	8007256 <__sflush_r+0x1a>
 8007262:	2300      	movs	r3, #0
 8007264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007268:	682f      	ldr	r7, [r5, #0]
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	d032      	beq.n	80072d4 <__sflush_r+0x98>
 800726e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	075a      	lsls	r2, r3, #29
 8007274:	d505      	bpl.n	8007282 <__sflush_r+0x46>
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	1ac0      	subs	r0, r0, r3
 800727a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800727c:	b10b      	cbz	r3, 8007282 <__sflush_r+0x46>
 800727e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007280:	1ac0      	subs	r0, r0, r3
 8007282:	2300      	movs	r3, #0
 8007284:	4602      	mov	r2, r0
 8007286:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007288:	6a21      	ldr	r1, [r4, #32]
 800728a:	4628      	mov	r0, r5
 800728c:	47b0      	blx	r6
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	d106      	bne.n	80072a2 <__sflush_r+0x66>
 8007294:	6829      	ldr	r1, [r5, #0]
 8007296:	291d      	cmp	r1, #29
 8007298:	d82c      	bhi.n	80072f4 <__sflush_r+0xb8>
 800729a:	4a2a      	ldr	r2, [pc, #168]	; (8007344 <__sflush_r+0x108>)
 800729c:	40ca      	lsrs	r2, r1
 800729e:	07d6      	lsls	r6, r2, #31
 80072a0:	d528      	bpl.n	80072f4 <__sflush_r+0xb8>
 80072a2:	2200      	movs	r2, #0
 80072a4:	6062      	str	r2, [r4, #4]
 80072a6:	04d9      	lsls	r1, r3, #19
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	6022      	str	r2, [r4, #0]
 80072ac:	d504      	bpl.n	80072b8 <__sflush_r+0x7c>
 80072ae:	1c42      	adds	r2, r0, #1
 80072b0:	d101      	bne.n	80072b6 <__sflush_r+0x7a>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	b903      	cbnz	r3, 80072b8 <__sflush_r+0x7c>
 80072b6:	6560      	str	r0, [r4, #84]	; 0x54
 80072b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ba:	602f      	str	r7, [r5, #0]
 80072bc:	2900      	cmp	r1, #0
 80072be:	d0ca      	beq.n	8007256 <__sflush_r+0x1a>
 80072c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c4:	4299      	cmp	r1, r3
 80072c6:	d002      	beq.n	80072ce <__sflush_r+0x92>
 80072c8:	4628      	mov	r0, r5
 80072ca:	f7ff fc99 	bl	8006c00 <_free_r>
 80072ce:	2000      	movs	r0, #0
 80072d0:	6360      	str	r0, [r4, #52]	; 0x34
 80072d2:	e7c1      	b.n	8007258 <__sflush_r+0x1c>
 80072d4:	6a21      	ldr	r1, [r4, #32]
 80072d6:	2301      	movs	r3, #1
 80072d8:	4628      	mov	r0, r5
 80072da:	47b0      	blx	r6
 80072dc:	1c41      	adds	r1, r0, #1
 80072de:	d1c7      	bne.n	8007270 <__sflush_r+0x34>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0c4      	beq.n	8007270 <__sflush_r+0x34>
 80072e6:	2b1d      	cmp	r3, #29
 80072e8:	d001      	beq.n	80072ee <__sflush_r+0xb2>
 80072ea:	2b16      	cmp	r3, #22
 80072ec:	d101      	bne.n	80072f2 <__sflush_r+0xb6>
 80072ee:	602f      	str	r7, [r5, #0]
 80072f0:	e7b1      	b.n	8007256 <__sflush_r+0x1a>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f8:	81a3      	strh	r3, [r4, #12]
 80072fa:	e7ad      	b.n	8007258 <__sflush_r+0x1c>
 80072fc:	690f      	ldr	r7, [r1, #16]
 80072fe:	2f00      	cmp	r7, #0
 8007300:	d0a9      	beq.n	8007256 <__sflush_r+0x1a>
 8007302:	0793      	lsls	r3, r2, #30
 8007304:	680e      	ldr	r6, [r1, #0]
 8007306:	bf08      	it	eq
 8007308:	694b      	ldreq	r3, [r1, #20]
 800730a:	600f      	str	r7, [r1, #0]
 800730c:	bf18      	it	ne
 800730e:	2300      	movne	r3, #0
 8007310:	eba6 0807 	sub.w	r8, r6, r7
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	f1b8 0f00 	cmp.w	r8, #0
 800731a:	dd9c      	ble.n	8007256 <__sflush_r+0x1a>
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007320:	4643      	mov	r3, r8
 8007322:	463a      	mov	r2, r7
 8007324:	4628      	mov	r0, r5
 8007326:	47b0      	blx	r6
 8007328:	2800      	cmp	r0, #0
 800732a:	dc06      	bgt.n	800733a <__sflush_r+0xfe>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	e78e      	b.n	8007258 <__sflush_r+0x1c>
 800733a:	4407      	add	r7, r0
 800733c:	eba8 0800 	sub.w	r8, r8, r0
 8007340:	e7e9      	b.n	8007316 <__sflush_r+0xda>
 8007342:	bf00      	nop
 8007344:	20400001 	.word	0x20400001

08007348 <_fflush_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	690b      	ldr	r3, [r1, #16]
 800734c:	4605      	mov	r5, r0
 800734e:	460c      	mov	r4, r1
 8007350:	b913      	cbnz	r3, 8007358 <_fflush_r+0x10>
 8007352:	2500      	movs	r5, #0
 8007354:	4628      	mov	r0, r5
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	b118      	cbz	r0, 8007362 <_fflush_r+0x1a>
 800735a:	6983      	ldr	r3, [r0, #24]
 800735c:	b90b      	cbnz	r3, 8007362 <_fflush_r+0x1a>
 800735e:	f000 f887 	bl	8007470 <__sinit>
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <_fflush_r+0x6c>)
 8007364:	429c      	cmp	r4, r3
 8007366:	d11b      	bne.n	80073a0 <_fflush_r+0x58>
 8007368:	686c      	ldr	r4, [r5, #4]
 800736a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0ef      	beq.n	8007352 <_fflush_r+0xa>
 8007372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007374:	07d0      	lsls	r0, r2, #31
 8007376:	d404      	bmi.n	8007382 <_fflush_r+0x3a>
 8007378:	0599      	lsls	r1, r3, #22
 800737a:	d402      	bmi.n	8007382 <_fflush_r+0x3a>
 800737c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737e:	f000 f915 	bl	80075ac <__retarget_lock_acquire_recursive>
 8007382:	4628      	mov	r0, r5
 8007384:	4621      	mov	r1, r4
 8007386:	f7ff ff59 	bl	800723c <__sflush_r>
 800738a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800738c:	07da      	lsls	r2, r3, #31
 800738e:	4605      	mov	r5, r0
 8007390:	d4e0      	bmi.n	8007354 <_fflush_r+0xc>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	d4dd      	bmi.n	8007354 <_fflush_r+0xc>
 8007398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739a:	f000 f908 	bl	80075ae <__retarget_lock_release_recursive>
 800739e:	e7d9      	b.n	8007354 <_fflush_r+0xc>
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <_fflush_r+0x70>)
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d101      	bne.n	80073aa <_fflush_r+0x62>
 80073a6:	68ac      	ldr	r4, [r5, #8]
 80073a8:	e7df      	b.n	800736a <_fflush_r+0x22>
 80073aa:	4b04      	ldr	r3, [pc, #16]	; (80073bc <_fflush_r+0x74>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	bf08      	it	eq
 80073b0:	68ec      	ldreq	r4, [r5, #12]
 80073b2:	e7da      	b.n	800736a <_fflush_r+0x22>
 80073b4:	08008838 	.word	0x08008838
 80073b8:	08008858 	.word	0x08008858
 80073bc:	08008818 	.word	0x08008818

080073c0 <std>:
 80073c0:	2300      	movs	r3, #0
 80073c2:	b510      	push	{r4, lr}
 80073c4:	4604      	mov	r4, r0
 80073c6:	e9c0 3300 	strd	r3, r3, [r0]
 80073ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073ce:	6083      	str	r3, [r0, #8]
 80073d0:	8181      	strh	r1, [r0, #12]
 80073d2:	6643      	str	r3, [r0, #100]	; 0x64
 80073d4:	81c2      	strh	r2, [r0, #14]
 80073d6:	6183      	str	r3, [r0, #24]
 80073d8:	4619      	mov	r1, r3
 80073da:	2208      	movs	r2, #8
 80073dc:	305c      	adds	r0, #92	; 0x5c
 80073de:	f7ff fc07 	bl	8006bf0 <memset>
 80073e2:	4b05      	ldr	r3, [pc, #20]	; (80073f8 <std+0x38>)
 80073e4:	6263      	str	r3, [r4, #36]	; 0x24
 80073e6:	4b05      	ldr	r3, [pc, #20]	; (80073fc <std+0x3c>)
 80073e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <std+0x40>)
 80073ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <std+0x44>)
 80073f0:	6224      	str	r4, [r4, #32]
 80073f2:	6323      	str	r3, [r4, #48]	; 0x30
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	bf00      	nop
 80073f8:	08006fdd 	.word	0x08006fdd
 80073fc:	08007003 	.word	0x08007003
 8007400:	0800703b 	.word	0x0800703b
 8007404:	0800705f 	.word	0x0800705f

08007408 <_cleanup_r>:
 8007408:	4901      	ldr	r1, [pc, #4]	; (8007410 <_cleanup_r+0x8>)
 800740a:	f000 b8af 	b.w	800756c <_fwalk_reent>
 800740e:	bf00      	nop
 8007410:	08007349 	.word	0x08007349

08007414 <__sfmoreglue>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	2268      	movs	r2, #104	; 0x68
 8007418:	1e4d      	subs	r5, r1, #1
 800741a:	4355      	muls	r5, r2
 800741c:	460e      	mov	r6, r1
 800741e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007422:	f7ff fc59 	bl	8006cd8 <_malloc_r>
 8007426:	4604      	mov	r4, r0
 8007428:	b140      	cbz	r0, 800743c <__sfmoreglue+0x28>
 800742a:	2100      	movs	r1, #0
 800742c:	e9c0 1600 	strd	r1, r6, [r0]
 8007430:	300c      	adds	r0, #12
 8007432:	60a0      	str	r0, [r4, #8]
 8007434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007438:	f7ff fbda 	bl	8006bf0 <memset>
 800743c:	4620      	mov	r0, r4
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <__sfp_lock_acquire>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__sfp_lock_acquire+0x8>)
 8007442:	f000 b8b3 	b.w	80075ac <__retarget_lock_acquire_recursive>
 8007446:	bf00      	nop
 8007448:	20001b71 	.word	0x20001b71

0800744c <__sfp_lock_release>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__sfp_lock_release+0x8>)
 800744e:	f000 b8ae 	b.w	80075ae <__retarget_lock_release_recursive>
 8007452:	bf00      	nop
 8007454:	20001b71 	.word	0x20001b71

08007458 <__sinit_lock_acquire>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__sinit_lock_acquire+0x8>)
 800745a:	f000 b8a7 	b.w	80075ac <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	20001b72 	.word	0x20001b72

08007464 <__sinit_lock_release>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__sinit_lock_release+0x8>)
 8007466:	f000 b8a2 	b.w	80075ae <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	20001b72 	.word	0x20001b72

08007470 <__sinit>:
 8007470:	b510      	push	{r4, lr}
 8007472:	4604      	mov	r4, r0
 8007474:	f7ff fff0 	bl	8007458 <__sinit_lock_acquire>
 8007478:	69a3      	ldr	r3, [r4, #24]
 800747a:	b11b      	cbz	r3, 8007484 <__sinit+0x14>
 800747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007480:	f7ff bff0 	b.w	8007464 <__sinit_lock_release>
 8007484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007488:	6523      	str	r3, [r4, #80]	; 0x50
 800748a:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <__sinit+0x68>)
 800748c:	4a13      	ldr	r2, [pc, #76]	; (80074dc <__sinit+0x6c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	62a2      	str	r2, [r4, #40]	; 0x28
 8007492:	42a3      	cmp	r3, r4
 8007494:	bf04      	itt	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	61a3      	streq	r3, [r4, #24]
 800749a:	4620      	mov	r0, r4
 800749c:	f000 f820 	bl	80074e0 <__sfp>
 80074a0:	6060      	str	r0, [r4, #4]
 80074a2:	4620      	mov	r0, r4
 80074a4:	f000 f81c 	bl	80074e0 <__sfp>
 80074a8:	60a0      	str	r0, [r4, #8]
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f818 	bl	80074e0 <__sfp>
 80074b0:	2200      	movs	r2, #0
 80074b2:	60e0      	str	r0, [r4, #12]
 80074b4:	2104      	movs	r1, #4
 80074b6:	6860      	ldr	r0, [r4, #4]
 80074b8:	f7ff ff82 	bl	80073c0 <std>
 80074bc:	68a0      	ldr	r0, [r4, #8]
 80074be:	2201      	movs	r2, #1
 80074c0:	2109      	movs	r1, #9
 80074c2:	f7ff ff7d 	bl	80073c0 <std>
 80074c6:	68e0      	ldr	r0, [r4, #12]
 80074c8:	2202      	movs	r2, #2
 80074ca:	2112      	movs	r1, #18
 80074cc:	f7ff ff78 	bl	80073c0 <std>
 80074d0:	2301      	movs	r3, #1
 80074d2:	61a3      	str	r3, [r4, #24]
 80074d4:	e7d2      	b.n	800747c <__sinit+0xc>
 80074d6:	bf00      	nop
 80074d8:	08008814 	.word	0x08008814
 80074dc:	08007409 	.word	0x08007409

080074e0 <__sfp>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	4607      	mov	r7, r0
 80074e4:	f7ff ffac 	bl	8007440 <__sfp_lock_acquire>
 80074e8:	4b1e      	ldr	r3, [pc, #120]	; (8007564 <__sfp+0x84>)
 80074ea:	681e      	ldr	r6, [r3, #0]
 80074ec:	69b3      	ldr	r3, [r6, #24]
 80074ee:	b913      	cbnz	r3, 80074f6 <__sfp+0x16>
 80074f0:	4630      	mov	r0, r6
 80074f2:	f7ff ffbd 	bl	8007470 <__sinit>
 80074f6:	3648      	adds	r6, #72	; 0x48
 80074f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	d503      	bpl.n	8007508 <__sfp+0x28>
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	b30b      	cbz	r3, 8007548 <__sfp+0x68>
 8007504:	6836      	ldr	r6, [r6, #0]
 8007506:	e7f7      	b.n	80074f8 <__sfp+0x18>
 8007508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800750c:	b9d5      	cbnz	r5, 8007544 <__sfp+0x64>
 800750e:	4b16      	ldr	r3, [pc, #88]	; (8007568 <__sfp+0x88>)
 8007510:	60e3      	str	r3, [r4, #12]
 8007512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007516:	6665      	str	r5, [r4, #100]	; 0x64
 8007518:	f000 f847 	bl	80075aa <__retarget_lock_init_recursive>
 800751c:	f7ff ff96 	bl	800744c <__sfp_lock_release>
 8007520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007528:	6025      	str	r5, [r4, #0]
 800752a:	61a5      	str	r5, [r4, #24]
 800752c:	2208      	movs	r2, #8
 800752e:	4629      	mov	r1, r5
 8007530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007534:	f7ff fb5c 	bl	8006bf0 <memset>
 8007538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800753c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007540:	4620      	mov	r0, r4
 8007542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007544:	3468      	adds	r4, #104	; 0x68
 8007546:	e7d9      	b.n	80074fc <__sfp+0x1c>
 8007548:	2104      	movs	r1, #4
 800754a:	4638      	mov	r0, r7
 800754c:	f7ff ff62 	bl	8007414 <__sfmoreglue>
 8007550:	4604      	mov	r4, r0
 8007552:	6030      	str	r0, [r6, #0]
 8007554:	2800      	cmp	r0, #0
 8007556:	d1d5      	bne.n	8007504 <__sfp+0x24>
 8007558:	f7ff ff78 	bl	800744c <__sfp_lock_release>
 800755c:	230c      	movs	r3, #12
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	e7ee      	b.n	8007540 <__sfp+0x60>
 8007562:	bf00      	nop
 8007564:	08008814 	.word	0x08008814
 8007568:	ffff0001 	.word	0xffff0001

0800756c <_fwalk_reent>:
 800756c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007570:	4606      	mov	r6, r0
 8007572:	4688      	mov	r8, r1
 8007574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007578:	2700      	movs	r7, #0
 800757a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800757e:	f1b9 0901 	subs.w	r9, r9, #1
 8007582:	d505      	bpl.n	8007590 <_fwalk_reent+0x24>
 8007584:	6824      	ldr	r4, [r4, #0]
 8007586:	2c00      	cmp	r4, #0
 8007588:	d1f7      	bne.n	800757a <_fwalk_reent+0xe>
 800758a:	4638      	mov	r0, r7
 800758c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007590:	89ab      	ldrh	r3, [r5, #12]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d907      	bls.n	80075a6 <_fwalk_reent+0x3a>
 8007596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800759a:	3301      	adds	r3, #1
 800759c:	d003      	beq.n	80075a6 <_fwalk_reent+0x3a>
 800759e:	4629      	mov	r1, r5
 80075a0:	4630      	mov	r0, r6
 80075a2:	47c0      	blx	r8
 80075a4:	4307      	orrs	r7, r0
 80075a6:	3568      	adds	r5, #104	; 0x68
 80075a8:	e7e9      	b.n	800757e <_fwalk_reent+0x12>

080075aa <__retarget_lock_init_recursive>:
 80075aa:	4770      	bx	lr

080075ac <__retarget_lock_acquire_recursive>:
 80075ac:	4770      	bx	lr

080075ae <__retarget_lock_release_recursive>:
 80075ae:	4770      	bx	lr

080075b0 <_lseek_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_lseek_r+0x20>)
 80075b4:	4604      	mov	r4, r0
 80075b6:	4608      	mov	r0, r1
 80075b8:	4611      	mov	r1, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7f9 fe5b 	bl	800127a <_lseek>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_lseek_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_lseek_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20001b74 	.word	0x20001b74

080075d4 <__swhatbuf_r>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	460e      	mov	r6, r1
 80075d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075dc:	2900      	cmp	r1, #0
 80075de:	b096      	sub	sp, #88	; 0x58
 80075e0:	4614      	mov	r4, r2
 80075e2:	461d      	mov	r5, r3
 80075e4:	da08      	bge.n	80075f8 <__swhatbuf_r+0x24>
 80075e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	061a      	lsls	r2, r3, #24
 80075f0:	d410      	bmi.n	8007614 <__swhatbuf_r+0x40>
 80075f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f6:	e00e      	b.n	8007616 <__swhatbuf_r+0x42>
 80075f8:	466a      	mov	r2, sp
 80075fa:	f000 ffeb 	bl	80085d4 <_fstat_r>
 80075fe:	2800      	cmp	r0, #0
 8007600:	dbf1      	blt.n	80075e6 <__swhatbuf_r+0x12>
 8007602:	9a01      	ldr	r2, [sp, #4]
 8007604:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007608:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800760c:	425a      	negs	r2, r3
 800760e:	415a      	adcs	r2, r3
 8007610:	602a      	str	r2, [r5, #0]
 8007612:	e7ee      	b.n	80075f2 <__swhatbuf_r+0x1e>
 8007614:	2340      	movs	r3, #64	; 0x40
 8007616:	2000      	movs	r0, #0
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	b016      	add	sp, #88	; 0x58
 800761c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007620 <__smakebuf_r>:
 8007620:	898b      	ldrh	r3, [r1, #12]
 8007622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007624:	079d      	lsls	r5, r3, #30
 8007626:	4606      	mov	r6, r0
 8007628:	460c      	mov	r4, r1
 800762a:	d507      	bpl.n	800763c <__smakebuf_r+0x1c>
 800762c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	2301      	movs	r3, #1
 8007636:	6163      	str	r3, [r4, #20]
 8007638:	b002      	add	sp, #8
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	ab01      	add	r3, sp, #4
 800763e:	466a      	mov	r2, sp
 8007640:	f7ff ffc8 	bl	80075d4 <__swhatbuf_r>
 8007644:	9900      	ldr	r1, [sp, #0]
 8007646:	4605      	mov	r5, r0
 8007648:	4630      	mov	r0, r6
 800764a:	f7ff fb45 	bl	8006cd8 <_malloc_r>
 800764e:	b948      	cbnz	r0, 8007664 <__smakebuf_r+0x44>
 8007650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007654:	059a      	lsls	r2, r3, #22
 8007656:	d4ef      	bmi.n	8007638 <__smakebuf_r+0x18>
 8007658:	f023 0303 	bic.w	r3, r3, #3
 800765c:	f043 0302 	orr.w	r3, r3, #2
 8007660:	81a3      	strh	r3, [r4, #12]
 8007662:	e7e3      	b.n	800762c <__smakebuf_r+0xc>
 8007664:	4b0d      	ldr	r3, [pc, #52]	; (800769c <__smakebuf_r+0x7c>)
 8007666:	62b3      	str	r3, [r6, #40]	; 0x28
 8007668:	89a3      	ldrh	r3, [r4, #12]
 800766a:	6020      	str	r0, [r4, #0]
 800766c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	6163      	str	r3, [r4, #20]
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	6120      	str	r0, [r4, #16]
 800767a:	b15b      	cbz	r3, 8007694 <__smakebuf_r+0x74>
 800767c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007680:	4630      	mov	r0, r6
 8007682:	f000 ffb9 	bl	80085f8 <_isatty_r>
 8007686:	b128      	cbz	r0, 8007694 <__smakebuf_r+0x74>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	f043 0301 	orr.w	r3, r3, #1
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	89a0      	ldrh	r0, [r4, #12]
 8007696:	4305      	orrs	r5, r0
 8007698:	81a5      	strh	r5, [r4, #12]
 800769a:	e7cd      	b.n	8007638 <__smakebuf_r+0x18>
 800769c:	08007409 	.word	0x08007409

080076a0 <__malloc_lock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__malloc_lock+0x8>)
 80076a2:	f7ff bf83 	b.w	80075ac <__retarget_lock_acquire_recursive>
 80076a6:	bf00      	nop
 80076a8:	20001b70 	.word	0x20001b70

080076ac <__malloc_unlock>:
 80076ac:	4801      	ldr	r0, [pc, #4]	; (80076b4 <__malloc_unlock+0x8>)
 80076ae:	f7ff bf7e 	b.w	80075ae <__retarget_lock_release_recursive>
 80076b2:	bf00      	nop
 80076b4:	20001b70 	.word	0x20001b70

080076b8 <_sungetc_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	1c4b      	adds	r3, r1, #1
 80076bc:	4614      	mov	r4, r2
 80076be:	d103      	bne.n	80076c8 <_sungetc_r+0x10>
 80076c0:	f04f 35ff 	mov.w	r5, #4294967295
 80076c4:	4628      	mov	r0, r5
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	8993      	ldrh	r3, [r2, #12]
 80076ca:	f023 0320 	bic.w	r3, r3, #32
 80076ce:	8193      	strh	r3, [r2, #12]
 80076d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076d2:	6852      	ldr	r2, [r2, #4]
 80076d4:	b2cd      	uxtb	r5, r1
 80076d6:	b18b      	cbz	r3, 80076fc <_sungetc_r+0x44>
 80076d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076da:	4293      	cmp	r3, r2
 80076dc:	dd08      	ble.n	80076f0 <_sungetc_r+0x38>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	1e5a      	subs	r2, r3, #1
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	3301      	adds	r3, #1
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	e7e9      	b.n	80076c4 <_sungetc_r+0xc>
 80076f0:	4621      	mov	r1, r4
 80076f2:	f000 ff35 	bl	8008560 <__submore>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0f1      	beq.n	80076de <_sungetc_r+0x26>
 80076fa:	e7e1      	b.n	80076c0 <_sungetc_r+0x8>
 80076fc:	6921      	ldr	r1, [r4, #16]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	b151      	cbz	r1, 8007718 <_sungetc_r+0x60>
 8007702:	4299      	cmp	r1, r3
 8007704:	d208      	bcs.n	8007718 <_sungetc_r+0x60>
 8007706:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800770a:	42a9      	cmp	r1, r5
 800770c:	d104      	bne.n	8007718 <_sungetc_r+0x60>
 800770e:	3b01      	subs	r3, #1
 8007710:	3201      	adds	r2, #1
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	6062      	str	r2, [r4, #4]
 8007716:	e7d5      	b.n	80076c4 <_sungetc_r+0xc>
 8007718:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800771c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007720:	6363      	str	r3, [r4, #52]	; 0x34
 8007722:	2303      	movs	r3, #3
 8007724:	63a3      	str	r3, [r4, #56]	; 0x38
 8007726:	4623      	mov	r3, r4
 8007728:	f803 5f46 	strb.w	r5, [r3, #70]!
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	2301      	movs	r3, #1
 8007730:	e7dc      	b.n	80076ec <_sungetc_r+0x34>

08007732 <__ssrefill_r>:
 8007732:	b510      	push	{r4, lr}
 8007734:	460c      	mov	r4, r1
 8007736:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007738:	b169      	cbz	r1, 8007756 <__ssrefill_r+0x24>
 800773a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800773e:	4299      	cmp	r1, r3
 8007740:	d001      	beq.n	8007746 <__ssrefill_r+0x14>
 8007742:	f7ff fa5d 	bl	8006c00 <_free_r>
 8007746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007748:	6063      	str	r3, [r4, #4]
 800774a:	2000      	movs	r0, #0
 800774c:	6360      	str	r0, [r4, #52]	; 0x34
 800774e:	b113      	cbz	r3, 8007756 <__ssrefill_r+0x24>
 8007750:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	bd10      	pop	{r4, pc}
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	2300      	movs	r3, #0
 800775c:	6063      	str	r3, [r4, #4]
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f043 0320 	orr.w	r3, r3, #32
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	f04f 30ff 	mov.w	r0, #4294967295
 800776a:	e7f3      	b.n	8007754 <__ssrefill_r+0x22>

0800776c <__ssvfiscanf_r>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007776:	2100      	movs	r1, #0
 8007778:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800777c:	49a6      	ldr	r1, [pc, #664]	; (8007a18 <__ssvfiscanf_r+0x2ac>)
 800777e:	91a0      	str	r1, [sp, #640]	; 0x280
 8007780:	f10d 0804 	add.w	r8, sp, #4
 8007784:	49a5      	ldr	r1, [pc, #660]	; (8007a1c <__ssvfiscanf_r+0x2b0>)
 8007786:	4fa6      	ldr	r7, [pc, #664]	; (8007a20 <__ssvfiscanf_r+0x2b4>)
 8007788:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007a24 <__ssvfiscanf_r+0x2b8>
 800778c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007790:	4606      	mov	r6, r0
 8007792:	91a1      	str	r1, [sp, #644]	; 0x284
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	7813      	ldrb	r3, [r2, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 815a 	beq.w	8007a52 <__ssvfiscanf_r+0x2e6>
 800779e:	5dd9      	ldrb	r1, [r3, r7]
 80077a0:	f011 0108 	ands.w	r1, r1, #8
 80077a4:	f102 0501 	add.w	r5, r2, #1
 80077a8:	d019      	beq.n	80077de <__ssvfiscanf_r+0x72>
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	dd0f      	ble.n	80077d0 <__ssvfiscanf_r+0x64>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	5cba      	ldrb	r2, [r7, r2]
 80077b6:	0712      	lsls	r2, r2, #28
 80077b8:	d401      	bmi.n	80077be <__ssvfiscanf_r+0x52>
 80077ba:	462a      	mov	r2, r5
 80077bc:	e7eb      	b.n	8007796 <__ssvfiscanf_r+0x2a>
 80077be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80077c0:	3201      	adds	r2, #1
 80077c2:	9245      	str	r2, [sp, #276]	; 0x114
 80077c4:	6862      	ldr	r2, [r4, #4]
 80077c6:	3301      	adds	r3, #1
 80077c8:	3a01      	subs	r2, #1
 80077ca:	6062      	str	r2, [r4, #4]
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	e7ec      	b.n	80077aa <__ssvfiscanf_r+0x3e>
 80077d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80077d2:	4621      	mov	r1, r4
 80077d4:	4630      	mov	r0, r6
 80077d6:	4798      	blx	r3
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0e9      	beq.n	80077b0 <__ssvfiscanf_r+0x44>
 80077dc:	e7ed      	b.n	80077ba <__ssvfiscanf_r+0x4e>
 80077de:	2b25      	cmp	r3, #37	; 0x25
 80077e0:	d012      	beq.n	8007808 <__ssvfiscanf_r+0x9c>
 80077e2:	469a      	mov	sl, r3
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f340 8091 	ble.w	800790e <__ssvfiscanf_r+0x1a2>
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	7813      	ldrb	r3, [r2, #0]
 80077f0:	4553      	cmp	r3, sl
 80077f2:	f040 812e 	bne.w	8007a52 <__ssvfiscanf_r+0x2e6>
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80077fe:	3201      	adds	r2, #1
 8007800:	3301      	adds	r3, #1
 8007802:	6022      	str	r2, [r4, #0]
 8007804:	9345      	str	r3, [sp, #276]	; 0x114
 8007806:	e7d8      	b.n	80077ba <__ssvfiscanf_r+0x4e>
 8007808:	9141      	str	r1, [sp, #260]	; 0x104
 800780a:	9143      	str	r1, [sp, #268]	; 0x10c
 800780c:	7853      	ldrb	r3, [r2, #1]
 800780e:	2b2a      	cmp	r3, #42	; 0x2a
 8007810:	bf02      	ittt	eq
 8007812:	2310      	moveq	r3, #16
 8007814:	1c95      	addeq	r5, r2, #2
 8007816:	9341      	streq	r3, [sp, #260]	; 0x104
 8007818:	220a      	movs	r2, #10
 800781a:	46aa      	mov	sl, r5
 800781c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007820:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007824:	2b09      	cmp	r3, #9
 8007826:	d91d      	bls.n	8007864 <__ssvfiscanf_r+0xf8>
 8007828:	487e      	ldr	r0, [pc, #504]	; (8007a24 <__ssvfiscanf_r+0x2b8>)
 800782a:	2203      	movs	r2, #3
 800782c:	f7f8 fce8 	bl	8000200 <memchr>
 8007830:	b140      	cbz	r0, 8007844 <__ssvfiscanf_r+0xd8>
 8007832:	2301      	movs	r3, #1
 8007834:	eba0 0009 	sub.w	r0, r0, r9
 8007838:	fa03 f000 	lsl.w	r0, r3, r0
 800783c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800783e:	4318      	orrs	r0, r3
 8007840:	9041      	str	r0, [sp, #260]	; 0x104
 8007842:	4655      	mov	r5, sl
 8007844:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007848:	2b78      	cmp	r3, #120	; 0x78
 800784a:	d806      	bhi.n	800785a <__ssvfiscanf_r+0xee>
 800784c:	2b57      	cmp	r3, #87	; 0x57
 800784e:	d810      	bhi.n	8007872 <__ssvfiscanf_r+0x106>
 8007850:	2b25      	cmp	r3, #37	; 0x25
 8007852:	d0c6      	beq.n	80077e2 <__ssvfiscanf_r+0x76>
 8007854:	d856      	bhi.n	8007904 <__ssvfiscanf_r+0x198>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d064      	beq.n	8007924 <__ssvfiscanf_r+0x1b8>
 800785a:	2303      	movs	r3, #3
 800785c:	9347      	str	r3, [sp, #284]	; 0x11c
 800785e:	230a      	movs	r3, #10
 8007860:	9342      	str	r3, [sp, #264]	; 0x108
 8007862:	e071      	b.n	8007948 <__ssvfiscanf_r+0x1dc>
 8007864:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007866:	fb02 1103 	mla	r1, r2, r3, r1
 800786a:	3930      	subs	r1, #48	; 0x30
 800786c:	9143      	str	r1, [sp, #268]	; 0x10c
 800786e:	4655      	mov	r5, sl
 8007870:	e7d3      	b.n	800781a <__ssvfiscanf_r+0xae>
 8007872:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007876:	2a20      	cmp	r2, #32
 8007878:	d8ef      	bhi.n	800785a <__ssvfiscanf_r+0xee>
 800787a:	a101      	add	r1, pc, #4	; (adr r1, 8007880 <__ssvfiscanf_r+0x114>)
 800787c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007880:	08007933 	.word	0x08007933
 8007884:	0800785b 	.word	0x0800785b
 8007888:	0800785b 	.word	0x0800785b
 800788c:	08007991 	.word	0x08007991
 8007890:	0800785b 	.word	0x0800785b
 8007894:	0800785b 	.word	0x0800785b
 8007898:	0800785b 	.word	0x0800785b
 800789c:	0800785b 	.word	0x0800785b
 80078a0:	0800785b 	.word	0x0800785b
 80078a4:	0800785b 	.word	0x0800785b
 80078a8:	0800785b 	.word	0x0800785b
 80078ac:	080079a7 	.word	0x080079a7
 80078b0:	0800797d 	.word	0x0800797d
 80078b4:	0800790b 	.word	0x0800790b
 80078b8:	0800790b 	.word	0x0800790b
 80078bc:	0800790b 	.word	0x0800790b
 80078c0:	0800785b 	.word	0x0800785b
 80078c4:	08007981 	.word	0x08007981
 80078c8:	0800785b 	.word	0x0800785b
 80078cc:	0800785b 	.word	0x0800785b
 80078d0:	0800785b 	.word	0x0800785b
 80078d4:	0800785b 	.word	0x0800785b
 80078d8:	080079b7 	.word	0x080079b7
 80078dc:	08007989 	.word	0x08007989
 80078e0:	0800792b 	.word	0x0800792b
 80078e4:	0800785b 	.word	0x0800785b
 80078e8:	0800785b 	.word	0x0800785b
 80078ec:	080079b3 	.word	0x080079b3
 80078f0:	0800785b 	.word	0x0800785b
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800785b 	.word	0x0800785b
 80078fc:	0800785b 	.word	0x0800785b
 8007900:	08007933 	.word	0x08007933
 8007904:	3b45      	subs	r3, #69	; 0x45
 8007906:	2b02      	cmp	r3, #2
 8007908:	d8a7      	bhi.n	800785a <__ssvfiscanf_r+0xee>
 800790a:	2305      	movs	r3, #5
 800790c:	e01b      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 800790e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007910:	4621      	mov	r1, r4
 8007912:	4630      	mov	r0, r6
 8007914:	4798      	blx	r3
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f af68 	beq.w	80077ec <__ssvfiscanf_r+0x80>
 800791c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800791e:	2800      	cmp	r0, #0
 8007920:	f040 808d 	bne.w	8007a3e <__ssvfiscanf_r+0x2d2>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e08f      	b.n	8007a4a <__ssvfiscanf_r+0x2de>
 800792a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800792c:	f042 0220 	orr.w	r2, r2, #32
 8007930:	9241      	str	r2, [sp, #260]	; 0x104
 8007932:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007938:	9241      	str	r2, [sp, #260]	; 0x104
 800793a:	2210      	movs	r2, #16
 800793c:	2b6f      	cmp	r3, #111	; 0x6f
 800793e:	9242      	str	r2, [sp, #264]	; 0x108
 8007940:	bf34      	ite	cc
 8007942:	2303      	movcc	r3, #3
 8007944:	2304      	movcs	r3, #4
 8007946:	9347      	str	r3, [sp, #284]	; 0x11c
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	dd42      	ble.n	80079d4 <__ssvfiscanf_r+0x268>
 800794e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007950:	0659      	lsls	r1, r3, #25
 8007952:	d404      	bmi.n	800795e <__ssvfiscanf_r+0x1f2>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	5cba      	ldrb	r2, [r7, r2]
 800795a:	0712      	lsls	r2, r2, #28
 800795c:	d441      	bmi.n	80079e2 <__ssvfiscanf_r+0x276>
 800795e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007960:	2b02      	cmp	r3, #2
 8007962:	dc50      	bgt.n	8007a06 <__ssvfiscanf_r+0x29a>
 8007964:	466b      	mov	r3, sp
 8007966:	4622      	mov	r2, r4
 8007968:	a941      	add	r1, sp, #260	; 0x104
 800796a:	4630      	mov	r0, r6
 800796c:	f000 fb64 	bl	8008038 <_scanf_chars>
 8007970:	2801      	cmp	r0, #1
 8007972:	d06e      	beq.n	8007a52 <__ssvfiscanf_r+0x2e6>
 8007974:	2802      	cmp	r0, #2
 8007976:	f47f af20 	bne.w	80077ba <__ssvfiscanf_r+0x4e>
 800797a:	e7cf      	b.n	800791c <__ssvfiscanf_r+0x1b0>
 800797c:	220a      	movs	r2, #10
 800797e:	e7dd      	b.n	800793c <__ssvfiscanf_r+0x1d0>
 8007980:	2300      	movs	r3, #0
 8007982:	9342      	str	r3, [sp, #264]	; 0x108
 8007984:	2303      	movs	r3, #3
 8007986:	e7de      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 8007988:	2308      	movs	r3, #8
 800798a:	9342      	str	r3, [sp, #264]	; 0x108
 800798c:	2304      	movs	r3, #4
 800798e:	e7da      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 8007990:	4629      	mov	r1, r5
 8007992:	4640      	mov	r0, r8
 8007994:	f000 fcb4 	bl	8008300 <__sccl>
 8007998:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800799a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799e:	9341      	str	r3, [sp, #260]	; 0x104
 80079a0:	4605      	mov	r5, r0
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7cf      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 80079a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80079a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ac:	9341      	str	r3, [sp, #260]	; 0x104
 80079ae:	2300      	movs	r3, #0
 80079b0:	e7c9      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e7c7      	b.n	8007946 <__ssvfiscanf_r+0x1da>
 80079b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80079b8:	06c3      	lsls	r3, r0, #27
 80079ba:	f53f aefe 	bmi.w	80077ba <__ssvfiscanf_r+0x4e>
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079c2:	1d19      	adds	r1, r3, #4
 80079c4:	9100      	str	r1, [sp, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f010 0f01 	tst.w	r0, #1
 80079cc:	bf14      	ite	ne
 80079ce:	801a      	strhne	r2, [r3, #0]
 80079d0:	601a      	streq	r2, [r3, #0]
 80079d2:	e6f2      	b.n	80077ba <__ssvfiscanf_r+0x4e>
 80079d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079d6:	4621      	mov	r1, r4
 80079d8:	4630      	mov	r0, r6
 80079da:	4798      	blx	r3
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0b6      	beq.n	800794e <__ssvfiscanf_r+0x1e2>
 80079e0:	e79c      	b.n	800791c <__ssvfiscanf_r+0x1b0>
 80079e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80079e4:	3201      	adds	r2, #1
 80079e6:	9245      	str	r2, [sp, #276]	; 0x114
 80079e8:	6862      	ldr	r2, [r4, #4]
 80079ea:	3a01      	subs	r2, #1
 80079ec:	2a00      	cmp	r2, #0
 80079ee:	6062      	str	r2, [r4, #4]
 80079f0:	dd02      	ble.n	80079f8 <__ssvfiscanf_r+0x28c>
 80079f2:	3301      	adds	r3, #1
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	e7ad      	b.n	8007954 <__ssvfiscanf_r+0x1e8>
 80079f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80079fa:	4621      	mov	r1, r4
 80079fc:	4630      	mov	r0, r6
 80079fe:	4798      	blx	r3
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d0a7      	beq.n	8007954 <__ssvfiscanf_r+0x1e8>
 8007a04:	e78a      	b.n	800791c <__ssvfiscanf_r+0x1b0>
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	dc0e      	bgt.n	8007a28 <__ssvfiscanf_r+0x2bc>
 8007a0a:	466b      	mov	r3, sp
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	a941      	add	r1, sp, #260	; 0x104
 8007a10:	4630      	mov	r0, r6
 8007a12:	f000 fb6b 	bl	80080ec <_scanf_i>
 8007a16:	e7ab      	b.n	8007970 <__ssvfiscanf_r+0x204>
 8007a18:	080076b9 	.word	0x080076b9
 8007a1c:	08007733 	.word	0x08007733
 8007a20:	080088c7 	.word	0x080088c7
 8007a24:	08008878 	.word	0x08008878
 8007a28:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <__ssvfiscanf_r+0x2ec>)
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f43f aec5 	beq.w	80077ba <__ssvfiscanf_r+0x4e>
 8007a30:	466b      	mov	r3, sp
 8007a32:	4622      	mov	r2, r4
 8007a34:	a941      	add	r1, sp, #260	; 0x104
 8007a36:	4630      	mov	r0, r6
 8007a38:	f3af 8000 	nop.w
 8007a3c:	e798      	b.n	8007970 <__ssvfiscanf_r+0x204>
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a44:	bf18      	it	ne
 8007a46:	f04f 30ff 	movne.w	r0, #4294967295
 8007a4a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a52:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a54:	e7f9      	b.n	8007a4a <__ssvfiscanf_r+0x2de>
 8007a56:	bf00      	nop
 8007a58:	00000000 	.word	0x00000000

08007a5c <__sfputc_r>:
 8007a5c:	6893      	ldr	r3, [r2, #8]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	b410      	push	{r4}
 8007a64:	6093      	str	r3, [r2, #8]
 8007a66:	da08      	bge.n	8007a7a <__sfputc_r+0x1e>
 8007a68:	6994      	ldr	r4, [r2, #24]
 8007a6a:	42a3      	cmp	r3, r4
 8007a6c:	db01      	blt.n	8007a72 <__sfputc_r+0x16>
 8007a6e:	290a      	cmp	r1, #10
 8007a70:	d103      	bne.n	8007a7a <__sfputc_r+0x1e>
 8007a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a76:	f7ff baff 	b.w	8007078 <__swbuf_r>
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	1c58      	adds	r0, r3, #1
 8007a7e:	6010      	str	r0, [r2, #0]
 8007a80:	7019      	strb	r1, [r3, #0]
 8007a82:	4608      	mov	r0, r1
 8007a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <__sfputs_r>:
 8007a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	18d5      	adds	r5, r2, r3
 8007a94:	42ac      	cmp	r4, r5
 8007a96:	d101      	bne.n	8007a9c <__sfputs_r+0x12>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e007      	b.n	8007aac <__sfputs_r+0x22>
 8007a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa0:	463a      	mov	r2, r7
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ffda 	bl	8007a5c <__sfputc_r>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d1f3      	bne.n	8007a94 <__sfputs_r+0xa>
 8007aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ab0 <_vfiprintf_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	b09d      	sub	sp, #116	; 0x74
 8007ab8:	4614      	mov	r4, r2
 8007aba:	4698      	mov	r8, r3
 8007abc:	4606      	mov	r6, r0
 8007abe:	b118      	cbz	r0, 8007ac8 <_vfiprintf_r+0x18>
 8007ac0:	6983      	ldr	r3, [r0, #24]
 8007ac2:	b90b      	cbnz	r3, 8007ac8 <_vfiprintf_r+0x18>
 8007ac4:	f7ff fcd4 	bl	8007470 <__sinit>
 8007ac8:	4b89      	ldr	r3, [pc, #548]	; (8007cf0 <_vfiprintf_r+0x240>)
 8007aca:	429d      	cmp	r5, r3
 8007acc:	d11b      	bne.n	8007b06 <_vfiprintf_r+0x56>
 8007ace:	6875      	ldr	r5, [r6, #4]
 8007ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ad2:	07d9      	lsls	r1, r3, #31
 8007ad4:	d405      	bmi.n	8007ae2 <_vfiprintf_r+0x32>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	059a      	lsls	r2, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_vfiprintf_r+0x32>
 8007adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ade:	f7ff fd65 	bl	80075ac <__retarget_lock_acquire_recursive>
 8007ae2:	89ab      	ldrh	r3, [r5, #12]
 8007ae4:	071b      	lsls	r3, r3, #28
 8007ae6:	d501      	bpl.n	8007aec <_vfiprintf_r+0x3c>
 8007ae8:	692b      	ldr	r3, [r5, #16]
 8007aea:	b9eb      	cbnz	r3, 8007b28 <_vfiprintf_r+0x78>
 8007aec:	4629      	mov	r1, r5
 8007aee:	4630      	mov	r0, r6
 8007af0:	f7ff fb26 	bl	8007140 <__swsetup_r>
 8007af4:	b1c0      	cbz	r0, 8007b28 <_vfiprintf_r+0x78>
 8007af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af8:	07dc      	lsls	r4, r3, #31
 8007afa:	d50e      	bpl.n	8007b1a <_vfiprintf_r+0x6a>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	b01d      	add	sp, #116	; 0x74
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b06:	4b7b      	ldr	r3, [pc, #492]	; (8007cf4 <_vfiprintf_r+0x244>)
 8007b08:	429d      	cmp	r5, r3
 8007b0a:	d101      	bne.n	8007b10 <_vfiprintf_r+0x60>
 8007b0c:	68b5      	ldr	r5, [r6, #8]
 8007b0e:	e7df      	b.n	8007ad0 <_vfiprintf_r+0x20>
 8007b10:	4b79      	ldr	r3, [pc, #484]	; (8007cf8 <_vfiprintf_r+0x248>)
 8007b12:	429d      	cmp	r5, r3
 8007b14:	bf08      	it	eq
 8007b16:	68f5      	ldreq	r5, [r6, #12]
 8007b18:	e7da      	b.n	8007ad0 <_vfiprintf_r+0x20>
 8007b1a:	89ab      	ldrh	r3, [r5, #12]
 8007b1c:	0598      	lsls	r0, r3, #22
 8007b1e:	d4ed      	bmi.n	8007afc <_vfiprintf_r+0x4c>
 8007b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b22:	f7ff fd44 	bl	80075ae <__retarget_lock_release_recursive>
 8007b26:	e7e9      	b.n	8007afc <_vfiprintf_r+0x4c>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2c:	2320      	movs	r3, #32
 8007b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b36:	2330      	movs	r3, #48	; 0x30
 8007b38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cfc <_vfiprintf_r+0x24c>
 8007b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b40:	f04f 0901 	mov.w	r9, #1
 8007b44:	4623      	mov	r3, r4
 8007b46:	469a      	mov	sl, r3
 8007b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b4c:	b10a      	cbz	r2, 8007b52 <_vfiprintf_r+0xa2>
 8007b4e:	2a25      	cmp	r2, #37	; 0x25
 8007b50:	d1f9      	bne.n	8007b46 <_vfiprintf_r+0x96>
 8007b52:	ebba 0b04 	subs.w	fp, sl, r4
 8007b56:	d00b      	beq.n	8007b70 <_vfiprintf_r+0xc0>
 8007b58:	465b      	mov	r3, fp
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff93 	bl	8007a8a <__sfputs_r>
 8007b64:	3001      	adds	r0, #1
 8007b66:	f000 80aa 	beq.w	8007cbe <_vfiprintf_r+0x20e>
 8007b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6c:	445a      	add	r2, fp
 8007b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b70:	f89a 3000 	ldrb.w	r3, [sl]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80a2 	beq.w	8007cbe <_vfiprintf_r+0x20e>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b84:	f10a 0a01 	add.w	sl, sl, #1
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	9307      	str	r3, [sp, #28]
 8007b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b90:	931a      	str	r3, [sp, #104]	; 0x68
 8007b92:	4654      	mov	r4, sl
 8007b94:	2205      	movs	r2, #5
 8007b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9a:	4858      	ldr	r0, [pc, #352]	; (8007cfc <_vfiprintf_r+0x24c>)
 8007b9c:	f7f8 fb30 	bl	8000200 <memchr>
 8007ba0:	9a04      	ldr	r2, [sp, #16]
 8007ba2:	b9d8      	cbnz	r0, 8007bdc <_vfiprintf_r+0x12c>
 8007ba4:	06d1      	lsls	r1, r2, #27
 8007ba6:	bf44      	itt	mi
 8007ba8:	2320      	movmi	r3, #32
 8007baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bae:	0713      	lsls	r3, r2, #28
 8007bb0:	bf44      	itt	mi
 8007bb2:	232b      	movmi	r3, #43	; 0x2b
 8007bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8007bbe:	d015      	beq.n	8007bec <_vfiprintf_r+0x13c>
 8007bc0:	9a07      	ldr	r2, [sp, #28]
 8007bc2:	4654      	mov	r4, sl
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f04f 0c0a 	mov.w	ip, #10
 8007bca:	4621      	mov	r1, r4
 8007bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bd0:	3b30      	subs	r3, #48	; 0x30
 8007bd2:	2b09      	cmp	r3, #9
 8007bd4:	d94e      	bls.n	8007c74 <_vfiprintf_r+0x1c4>
 8007bd6:	b1b0      	cbz	r0, 8007c06 <_vfiprintf_r+0x156>
 8007bd8:	9207      	str	r2, [sp, #28]
 8007bda:	e014      	b.n	8007c06 <_vfiprintf_r+0x156>
 8007bdc:	eba0 0308 	sub.w	r3, r0, r8
 8007be0:	fa09 f303 	lsl.w	r3, r9, r3
 8007be4:	4313      	orrs	r3, r2
 8007be6:	9304      	str	r3, [sp, #16]
 8007be8:	46a2      	mov	sl, r4
 8007bea:	e7d2      	b.n	8007b92 <_vfiprintf_r+0xe2>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	1d19      	adds	r1, r3, #4
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	9103      	str	r1, [sp, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bfbb      	ittet	lt
 8007bf8:	425b      	neglt	r3, r3
 8007bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8007bfe:	9307      	strge	r3, [sp, #28]
 8007c00:	9307      	strlt	r3, [sp, #28]
 8007c02:	bfb8      	it	lt
 8007c04:	9204      	strlt	r2, [sp, #16]
 8007c06:	7823      	ldrb	r3, [r4, #0]
 8007c08:	2b2e      	cmp	r3, #46	; 0x2e
 8007c0a:	d10c      	bne.n	8007c26 <_vfiprintf_r+0x176>
 8007c0c:	7863      	ldrb	r3, [r4, #1]
 8007c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c10:	d135      	bne.n	8007c7e <_vfiprintf_r+0x1ce>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	1d1a      	adds	r2, r3, #4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	9203      	str	r2, [sp, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	bfb8      	it	lt
 8007c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c22:	3402      	adds	r4, #2
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d0c <_vfiprintf_r+0x25c>
 8007c2a:	7821      	ldrb	r1, [r4, #0]
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f7f8 fae6 	bl	8000200 <memchr>
 8007c34:	b140      	cbz	r0, 8007c48 <_vfiprintf_r+0x198>
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	eba0 000a 	sub.w	r0, r0, sl
 8007c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c40:	9b04      	ldr	r3, [sp, #16]
 8007c42:	4303      	orrs	r3, r0
 8007c44:	3401      	adds	r4, #1
 8007c46:	9304      	str	r3, [sp, #16]
 8007c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c4c:	482c      	ldr	r0, [pc, #176]	; (8007d00 <_vfiprintf_r+0x250>)
 8007c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c52:	2206      	movs	r2, #6
 8007c54:	f7f8 fad4 	bl	8000200 <memchr>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d03f      	beq.n	8007cdc <_vfiprintf_r+0x22c>
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <_vfiprintf_r+0x254>)
 8007c5e:	bb1b      	cbnz	r3, 8007ca8 <_vfiprintf_r+0x1f8>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	3307      	adds	r3, #7
 8007c64:	f023 0307 	bic.w	r3, r3, #7
 8007c68:	3308      	adds	r3, #8
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6e:	443b      	add	r3, r7
 8007c70:	9309      	str	r3, [sp, #36]	; 0x24
 8007c72:	e767      	b.n	8007b44 <_vfiprintf_r+0x94>
 8007c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c78:	460c      	mov	r4, r1
 8007c7a:	2001      	movs	r0, #1
 8007c7c:	e7a5      	b.n	8007bca <_vfiprintf_r+0x11a>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	3401      	adds	r4, #1
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	4619      	mov	r1, r3
 8007c86:	f04f 0c0a 	mov.w	ip, #10
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c90:	3a30      	subs	r2, #48	; 0x30
 8007c92:	2a09      	cmp	r2, #9
 8007c94:	d903      	bls.n	8007c9e <_vfiprintf_r+0x1ee>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0c5      	beq.n	8007c26 <_vfiprintf_r+0x176>
 8007c9a:	9105      	str	r1, [sp, #20]
 8007c9c:	e7c3      	b.n	8007c26 <_vfiprintf_r+0x176>
 8007c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e7f0      	b.n	8007c8a <_vfiprintf_r+0x1da>
 8007ca8:	ab03      	add	r3, sp, #12
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	462a      	mov	r2, r5
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <_vfiprintf_r+0x258>)
 8007cb0:	a904      	add	r1, sp, #16
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	4607      	mov	r7, r0
 8007cba:	1c78      	adds	r0, r7, #1
 8007cbc:	d1d6      	bne.n	8007c6c <_vfiprintf_r+0x1bc>
 8007cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cc0:	07d9      	lsls	r1, r3, #31
 8007cc2:	d405      	bmi.n	8007cd0 <_vfiprintf_r+0x220>
 8007cc4:	89ab      	ldrh	r3, [r5, #12]
 8007cc6:	059a      	lsls	r2, r3, #22
 8007cc8:	d402      	bmi.n	8007cd0 <_vfiprintf_r+0x220>
 8007cca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ccc:	f7ff fc6f 	bl	80075ae <__retarget_lock_release_recursive>
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	065b      	lsls	r3, r3, #25
 8007cd4:	f53f af12 	bmi.w	8007afc <_vfiprintf_r+0x4c>
 8007cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cda:	e711      	b.n	8007b00 <_vfiprintf_r+0x50>
 8007cdc:	ab03      	add	r3, sp, #12
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <_vfiprintf_r+0x258>)
 8007ce4:	a904      	add	r1, sp, #16
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 f880 	bl	8007dec <_printf_i>
 8007cec:	e7e4      	b.n	8007cb8 <_vfiprintf_r+0x208>
 8007cee:	bf00      	nop
 8007cf0:	08008838 	.word	0x08008838
 8007cf4:	08008858 	.word	0x08008858
 8007cf8:	08008818 	.word	0x08008818
 8007cfc:	0800887c 	.word	0x0800887c
 8007d00:	08008882 	.word	0x08008882
 8007d04:	00000000 	.word	0x00000000
 8007d08:	08007a8b 	.word	0x08007a8b
 8007d0c:	08008878 	.word	0x08008878

08007d10 <_printf_common>:
 8007d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d14:	4616      	mov	r6, r2
 8007d16:	4699      	mov	r9, r3
 8007d18:	688a      	ldr	r2, [r1, #8]
 8007d1a:	690b      	ldr	r3, [r1, #16]
 8007d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bfb8      	it	lt
 8007d24:	4613      	movlt	r3, r2
 8007d26:	6033      	str	r3, [r6, #0]
 8007d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d2c:	4607      	mov	r7, r0
 8007d2e:	460c      	mov	r4, r1
 8007d30:	b10a      	cbz	r2, 8007d36 <_printf_common+0x26>
 8007d32:	3301      	adds	r3, #1
 8007d34:	6033      	str	r3, [r6, #0]
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	0699      	lsls	r1, r3, #26
 8007d3a:	bf42      	ittt	mi
 8007d3c:	6833      	ldrmi	r3, [r6, #0]
 8007d3e:	3302      	addmi	r3, #2
 8007d40:	6033      	strmi	r3, [r6, #0]
 8007d42:	6825      	ldr	r5, [r4, #0]
 8007d44:	f015 0506 	ands.w	r5, r5, #6
 8007d48:	d106      	bne.n	8007d58 <_printf_common+0x48>
 8007d4a:	f104 0a19 	add.w	sl, r4, #25
 8007d4e:	68e3      	ldr	r3, [r4, #12]
 8007d50:	6832      	ldr	r2, [r6, #0]
 8007d52:	1a9b      	subs	r3, r3, r2
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc26      	bgt.n	8007da6 <_printf_common+0x96>
 8007d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d5c:	1e13      	subs	r3, r2, #0
 8007d5e:	6822      	ldr	r2, [r4, #0]
 8007d60:	bf18      	it	ne
 8007d62:	2301      	movne	r3, #1
 8007d64:	0692      	lsls	r2, r2, #26
 8007d66:	d42b      	bmi.n	8007dc0 <_printf_common+0xb0>
 8007d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	4638      	mov	r0, r7
 8007d70:	47c0      	blx	r8
 8007d72:	3001      	adds	r0, #1
 8007d74:	d01e      	beq.n	8007db4 <_printf_common+0xa4>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	68e5      	ldr	r5, [r4, #12]
 8007d7a:	6832      	ldr	r2, [r6, #0]
 8007d7c:	f003 0306 	and.w	r3, r3, #6
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	bf08      	it	eq
 8007d84:	1aad      	subeq	r5, r5, r2
 8007d86:	68a3      	ldr	r3, [r4, #8]
 8007d88:	6922      	ldr	r2, [r4, #16]
 8007d8a:	bf0c      	ite	eq
 8007d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d90:	2500      	movne	r5, #0
 8007d92:	4293      	cmp	r3, r2
 8007d94:	bfc4      	itt	gt
 8007d96:	1a9b      	subgt	r3, r3, r2
 8007d98:	18ed      	addgt	r5, r5, r3
 8007d9a:	2600      	movs	r6, #0
 8007d9c:	341a      	adds	r4, #26
 8007d9e:	42b5      	cmp	r5, r6
 8007da0:	d11a      	bne.n	8007dd8 <_printf_common+0xc8>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e008      	b.n	8007db8 <_printf_common+0xa8>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4652      	mov	r2, sl
 8007daa:	4649      	mov	r1, r9
 8007dac:	4638      	mov	r0, r7
 8007dae:	47c0      	blx	r8
 8007db0:	3001      	adds	r0, #1
 8007db2:	d103      	bne.n	8007dbc <_printf_common+0xac>
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbc:	3501      	adds	r5, #1
 8007dbe:	e7c6      	b.n	8007d4e <_printf_common+0x3e>
 8007dc0:	18e1      	adds	r1, r4, r3
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	2030      	movs	r0, #48	; 0x30
 8007dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007dca:	4422      	add	r2, r4
 8007dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	e7c7      	b.n	8007d68 <_printf_common+0x58>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4622      	mov	r2, r4
 8007ddc:	4649      	mov	r1, r9
 8007dde:	4638      	mov	r0, r7
 8007de0:	47c0      	blx	r8
 8007de2:	3001      	adds	r0, #1
 8007de4:	d0e6      	beq.n	8007db4 <_printf_common+0xa4>
 8007de6:	3601      	adds	r6, #1
 8007de8:	e7d9      	b.n	8007d9e <_printf_common+0x8e>
	...

08007dec <_printf_i>:
 8007dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	7e0f      	ldrb	r7, [r1, #24]
 8007df2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007df4:	2f78      	cmp	r7, #120	; 0x78
 8007df6:	4691      	mov	r9, r2
 8007df8:	4680      	mov	r8, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	469a      	mov	sl, r3
 8007dfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e02:	d807      	bhi.n	8007e14 <_printf_i+0x28>
 8007e04:	2f62      	cmp	r7, #98	; 0x62
 8007e06:	d80a      	bhi.n	8007e1e <_printf_i+0x32>
 8007e08:	2f00      	cmp	r7, #0
 8007e0a:	f000 80d8 	beq.w	8007fbe <_printf_i+0x1d2>
 8007e0e:	2f58      	cmp	r7, #88	; 0x58
 8007e10:	f000 80a3 	beq.w	8007f5a <_printf_i+0x16e>
 8007e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e1c:	e03a      	b.n	8007e94 <_printf_i+0xa8>
 8007e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e22:	2b15      	cmp	r3, #21
 8007e24:	d8f6      	bhi.n	8007e14 <_printf_i+0x28>
 8007e26:	a101      	add	r1, pc, #4	; (adr r1, 8007e2c <_printf_i+0x40>)
 8007e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e2c:	08007e85 	.word	0x08007e85
 8007e30:	08007e99 	.word	0x08007e99
 8007e34:	08007e15 	.word	0x08007e15
 8007e38:	08007e15 	.word	0x08007e15
 8007e3c:	08007e15 	.word	0x08007e15
 8007e40:	08007e15 	.word	0x08007e15
 8007e44:	08007e99 	.word	0x08007e99
 8007e48:	08007e15 	.word	0x08007e15
 8007e4c:	08007e15 	.word	0x08007e15
 8007e50:	08007e15 	.word	0x08007e15
 8007e54:	08007e15 	.word	0x08007e15
 8007e58:	08007fa5 	.word	0x08007fa5
 8007e5c:	08007ec9 	.word	0x08007ec9
 8007e60:	08007f87 	.word	0x08007f87
 8007e64:	08007e15 	.word	0x08007e15
 8007e68:	08007e15 	.word	0x08007e15
 8007e6c:	08007fc7 	.word	0x08007fc7
 8007e70:	08007e15 	.word	0x08007e15
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007e15 	.word	0x08007e15
 8007e7c:	08007e15 	.word	0x08007e15
 8007e80:	08007f8f 	.word	0x08007f8f
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	1d1a      	adds	r2, r3, #4
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	602a      	str	r2, [r5, #0]
 8007e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0a3      	b.n	8007fe0 <_printf_i+0x1f4>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	6829      	ldr	r1, [r5, #0]
 8007e9c:	0606      	lsls	r6, r0, #24
 8007e9e:	f101 0304 	add.w	r3, r1, #4
 8007ea2:	d50a      	bpl.n	8007eba <_printf_i+0xce>
 8007ea4:	680e      	ldr	r6, [r1, #0]
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	2e00      	cmp	r6, #0
 8007eaa:	da03      	bge.n	8007eb4 <_printf_i+0xc8>
 8007eac:	232d      	movs	r3, #45	; 0x2d
 8007eae:	4276      	negs	r6, r6
 8007eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb4:	485e      	ldr	r0, [pc, #376]	; (8008030 <_printf_i+0x244>)
 8007eb6:	230a      	movs	r3, #10
 8007eb8:	e019      	b.n	8007eee <_printf_i+0x102>
 8007eba:	680e      	ldr	r6, [r1, #0]
 8007ebc:	602b      	str	r3, [r5, #0]
 8007ebe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ec2:	bf18      	it	ne
 8007ec4:	b236      	sxthne	r6, r6
 8007ec6:	e7ef      	b.n	8007ea8 <_printf_i+0xbc>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	6820      	ldr	r0, [r4, #0]
 8007ecc:	1d19      	adds	r1, r3, #4
 8007ece:	6029      	str	r1, [r5, #0]
 8007ed0:	0601      	lsls	r1, r0, #24
 8007ed2:	d501      	bpl.n	8007ed8 <_printf_i+0xec>
 8007ed4:	681e      	ldr	r6, [r3, #0]
 8007ed6:	e002      	b.n	8007ede <_printf_i+0xf2>
 8007ed8:	0646      	lsls	r6, r0, #25
 8007eda:	d5fb      	bpl.n	8007ed4 <_printf_i+0xe8>
 8007edc:	881e      	ldrh	r6, [r3, #0]
 8007ede:	4854      	ldr	r0, [pc, #336]	; (8008030 <_printf_i+0x244>)
 8007ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2308      	moveq	r3, #8
 8007ee6:	230a      	movne	r3, #10
 8007ee8:	2100      	movs	r1, #0
 8007eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eee:	6865      	ldr	r5, [r4, #4]
 8007ef0:	60a5      	str	r5, [r4, #8]
 8007ef2:	2d00      	cmp	r5, #0
 8007ef4:	bfa2      	ittt	ge
 8007ef6:	6821      	ldrge	r1, [r4, #0]
 8007ef8:	f021 0104 	bicge.w	r1, r1, #4
 8007efc:	6021      	strge	r1, [r4, #0]
 8007efe:	b90e      	cbnz	r6, 8007f04 <_printf_i+0x118>
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	d04d      	beq.n	8007fa0 <_printf_i+0x1b4>
 8007f04:	4615      	mov	r5, r2
 8007f06:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f0a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f0e:	5dc7      	ldrb	r7, [r0, r7]
 8007f10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f14:	4637      	mov	r7, r6
 8007f16:	42bb      	cmp	r3, r7
 8007f18:	460e      	mov	r6, r1
 8007f1a:	d9f4      	bls.n	8007f06 <_printf_i+0x11a>
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d10b      	bne.n	8007f38 <_printf_i+0x14c>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	07de      	lsls	r6, r3, #31
 8007f24:	d508      	bpl.n	8007f38 <_printf_i+0x14c>
 8007f26:	6923      	ldr	r3, [r4, #16]
 8007f28:	6861      	ldr	r1, [r4, #4]
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	bfde      	ittt	le
 8007f2e:	2330      	movle	r3, #48	; 0x30
 8007f30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f38:	1b52      	subs	r2, r2, r5
 8007f3a:	6122      	str	r2, [r4, #16]
 8007f3c:	f8cd a000 	str.w	sl, [sp]
 8007f40:	464b      	mov	r3, r9
 8007f42:	aa03      	add	r2, sp, #12
 8007f44:	4621      	mov	r1, r4
 8007f46:	4640      	mov	r0, r8
 8007f48:	f7ff fee2 	bl	8007d10 <_printf_common>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d14c      	bne.n	8007fea <_printf_i+0x1fe>
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	b004      	add	sp, #16
 8007f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f5a:	4835      	ldr	r0, [pc, #212]	; (8008030 <_printf_i+0x244>)
 8007f5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f60:	6829      	ldr	r1, [r5, #0]
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f68:	6029      	str	r1, [r5, #0]
 8007f6a:	061d      	lsls	r5, r3, #24
 8007f6c:	d514      	bpl.n	8007f98 <_printf_i+0x1ac>
 8007f6e:	07df      	lsls	r7, r3, #31
 8007f70:	bf44      	itt	mi
 8007f72:	f043 0320 	orrmi.w	r3, r3, #32
 8007f76:	6023      	strmi	r3, [r4, #0]
 8007f78:	b91e      	cbnz	r6, 8007f82 <_printf_i+0x196>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	f023 0320 	bic.w	r3, r3, #32
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	2310      	movs	r3, #16
 8007f84:	e7b0      	b.n	8007ee8 <_printf_i+0xfc>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	f043 0320 	orr.w	r3, r3, #32
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	2378      	movs	r3, #120	; 0x78
 8007f90:	4828      	ldr	r0, [pc, #160]	; (8008034 <_printf_i+0x248>)
 8007f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f96:	e7e3      	b.n	8007f60 <_printf_i+0x174>
 8007f98:	0659      	lsls	r1, r3, #25
 8007f9a:	bf48      	it	mi
 8007f9c:	b2b6      	uxthmi	r6, r6
 8007f9e:	e7e6      	b.n	8007f6e <_printf_i+0x182>
 8007fa0:	4615      	mov	r5, r2
 8007fa2:	e7bb      	b.n	8007f1c <_printf_i+0x130>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	6826      	ldr	r6, [r4, #0]
 8007fa8:	6961      	ldr	r1, [r4, #20]
 8007faa:	1d18      	adds	r0, r3, #4
 8007fac:	6028      	str	r0, [r5, #0]
 8007fae:	0635      	lsls	r5, r6, #24
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	d501      	bpl.n	8007fb8 <_printf_i+0x1cc>
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <_printf_i+0x1d2>
 8007fb8:	0670      	lsls	r0, r6, #25
 8007fba:	d5fb      	bpl.n	8007fb4 <_printf_i+0x1c8>
 8007fbc:	8019      	strh	r1, [r3, #0]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6123      	str	r3, [r4, #16]
 8007fc2:	4615      	mov	r5, r2
 8007fc4:	e7ba      	b.n	8007f3c <_printf_i+0x150>
 8007fc6:	682b      	ldr	r3, [r5, #0]
 8007fc8:	1d1a      	adds	r2, r3, #4
 8007fca:	602a      	str	r2, [r5, #0]
 8007fcc:	681d      	ldr	r5, [r3, #0]
 8007fce:	6862      	ldr	r2, [r4, #4]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7f8 f914 	bl	8000200 <memchr>
 8007fd8:	b108      	cbz	r0, 8007fde <_printf_i+0x1f2>
 8007fda:	1b40      	subs	r0, r0, r5
 8007fdc:	6060      	str	r0, [r4, #4]
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fe8:	e7a8      	b.n	8007f3c <_printf_i+0x150>
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	462a      	mov	r2, r5
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	47d0      	blx	sl
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d0ab      	beq.n	8007f50 <_printf_i+0x164>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	079b      	lsls	r3, r3, #30
 8007ffc:	d413      	bmi.n	8008026 <_printf_i+0x23a>
 8007ffe:	68e0      	ldr	r0, [r4, #12]
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	4298      	cmp	r0, r3
 8008004:	bfb8      	it	lt
 8008006:	4618      	movlt	r0, r3
 8008008:	e7a4      	b.n	8007f54 <_printf_i+0x168>
 800800a:	2301      	movs	r3, #1
 800800c:	4632      	mov	r2, r6
 800800e:	4649      	mov	r1, r9
 8008010:	4640      	mov	r0, r8
 8008012:	47d0      	blx	sl
 8008014:	3001      	adds	r0, #1
 8008016:	d09b      	beq.n	8007f50 <_printf_i+0x164>
 8008018:	3501      	adds	r5, #1
 800801a:	68e3      	ldr	r3, [r4, #12]
 800801c:	9903      	ldr	r1, [sp, #12]
 800801e:	1a5b      	subs	r3, r3, r1
 8008020:	42ab      	cmp	r3, r5
 8008022:	dcf2      	bgt.n	800800a <_printf_i+0x21e>
 8008024:	e7eb      	b.n	8007ffe <_printf_i+0x212>
 8008026:	2500      	movs	r5, #0
 8008028:	f104 0619 	add.w	r6, r4, #25
 800802c:	e7f5      	b.n	800801a <_printf_i+0x22e>
 800802e:	bf00      	nop
 8008030:	08008889 	.word	0x08008889
 8008034:	0800889a 	.word	0x0800889a

08008038 <_scanf_chars>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4615      	mov	r5, r2
 800803e:	688a      	ldr	r2, [r1, #8]
 8008040:	4680      	mov	r8, r0
 8008042:	460c      	mov	r4, r1
 8008044:	b932      	cbnz	r2, 8008054 <_scanf_chars+0x1c>
 8008046:	698a      	ldr	r2, [r1, #24]
 8008048:	2a00      	cmp	r2, #0
 800804a:	bf0c      	ite	eq
 800804c:	2201      	moveq	r2, #1
 800804e:	f04f 32ff 	movne.w	r2, #4294967295
 8008052:	608a      	str	r2, [r1, #8]
 8008054:	6822      	ldr	r2, [r4, #0]
 8008056:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80080e8 <_scanf_chars+0xb0>
 800805a:	06d1      	lsls	r1, r2, #27
 800805c:	bf5f      	itttt	pl
 800805e:	681a      	ldrpl	r2, [r3, #0]
 8008060:	1d11      	addpl	r1, r2, #4
 8008062:	6019      	strpl	r1, [r3, #0]
 8008064:	6816      	ldrpl	r6, [r2, #0]
 8008066:	2700      	movs	r7, #0
 8008068:	69a0      	ldr	r0, [r4, #24]
 800806a:	b188      	cbz	r0, 8008090 <_scanf_chars+0x58>
 800806c:	2801      	cmp	r0, #1
 800806e:	d107      	bne.n	8008080 <_scanf_chars+0x48>
 8008070:	682a      	ldr	r2, [r5, #0]
 8008072:	7811      	ldrb	r1, [r2, #0]
 8008074:	6962      	ldr	r2, [r4, #20]
 8008076:	5c52      	ldrb	r2, [r2, r1]
 8008078:	b952      	cbnz	r2, 8008090 <_scanf_chars+0x58>
 800807a:	2f00      	cmp	r7, #0
 800807c:	d031      	beq.n	80080e2 <_scanf_chars+0xaa>
 800807e:	e022      	b.n	80080c6 <_scanf_chars+0x8e>
 8008080:	2802      	cmp	r0, #2
 8008082:	d120      	bne.n	80080c6 <_scanf_chars+0x8e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f813 3009 	ldrb.w	r3, [r3, r9]
 800808c:	071b      	lsls	r3, r3, #28
 800808e:	d41a      	bmi.n	80080c6 <_scanf_chars+0x8e>
 8008090:	6823      	ldr	r3, [r4, #0]
 8008092:	06da      	lsls	r2, r3, #27
 8008094:	bf5e      	ittt	pl
 8008096:	682b      	ldrpl	r3, [r5, #0]
 8008098:	781b      	ldrbpl	r3, [r3, #0]
 800809a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800809e:	682a      	ldr	r2, [r5, #0]
 80080a0:	686b      	ldr	r3, [r5, #4]
 80080a2:	3201      	adds	r2, #1
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	68a2      	ldr	r2, [r4, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	3a01      	subs	r2, #1
 80080ac:	606b      	str	r3, [r5, #4]
 80080ae:	3701      	adds	r7, #1
 80080b0:	60a2      	str	r2, [r4, #8]
 80080b2:	b142      	cbz	r2, 80080c6 <_scanf_chars+0x8e>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dcd7      	bgt.n	8008068 <_scanf_chars+0x30>
 80080b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80080bc:	4629      	mov	r1, r5
 80080be:	4640      	mov	r0, r8
 80080c0:	4798      	blx	r3
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d0d0      	beq.n	8008068 <_scanf_chars+0x30>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f013 0310 	ands.w	r3, r3, #16
 80080cc:	d105      	bne.n	80080da <_scanf_chars+0xa2>
 80080ce:	68e2      	ldr	r2, [r4, #12]
 80080d0:	3201      	adds	r2, #1
 80080d2:	60e2      	str	r2, [r4, #12]
 80080d4:	69a2      	ldr	r2, [r4, #24]
 80080d6:	b102      	cbz	r2, 80080da <_scanf_chars+0xa2>
 80080d8:	7033      	strb	r3, [r6, #0]
 80080da:	6923      	ldr	r3, [r4, #16]
 80080dc:	443b      	add	r3, r7
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2000      	movs	r0, #0
 80080e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e6:	bf00      	nop
 80080e8:	080088c7 	.word	0x080088c7

080080ec <_scanf_i>:
 80080ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	4698      	mov	r8, r3
 80080f2:	4b76      	ldr	r3, [pc, #472]	; (80082cc <_scanf_i+0x1e0>)
 80080f4:	460c      	mov	r4, r1
 80080f6:	4682      	mov	sl, r0
 80080f8:	4616      	mov	r6, r2
 80080fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080fe:	b087      	sub	sp, #28
 8008100:	ab03      	add	r3, sp, #12
 8008102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008106:	4b72      	ldr	r3, [pc, #456]	; (80082d0 <_scanf_i+0x1e4>)
 8008108:	69a1      	ldr	r1, [r4, #24]
 800810a:	4a72      	ldr	r2, [pc, #456]	; (80082d4 <_scanf_i+0x1e8>)
 800810c:	2903      	cmp	r1, #3
 800810e:	bf18      	it	ne
 8008110:	461a      	movne	r2, r3
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	9201      	str	r2, [sp, #4]
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800811c:	bf88      	it	hi
 800811e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008122:	4627      	mov	r7, r4
 8008124:	bf82      	ittt	hi
 8008126:	eb03 0905 	addhi.w	r9, r3, r5
 800812a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800812e:	60a3      	strhi	r3, [r4, #8]
 8008130:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008134:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008138:	bf98      	it	ls
 800813a:	f04f 0900 	movls.w	r9, #0
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	463d      	mov	r5, r7
 8008142:	f04f 0b00 	mov.w	fp, #0
 8008146:	6831      	ldr	r1, [r6, #0]
 8008148:	ab03      	add	r3, sp, #12
 800814a:	7809      	ldrb	r1, [r1, #0]
 800814c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008150:	2202      	movs	r2, #2
 8008152:	f7f8 f855 	bl	8000200 <memchr>
 8008156:	b328      	cbz	r0, 80081a4 <_scanf_i+0xb8>
 8008158:	f1bb 0f01 	cmp.w	fp, #1
 800815c:	d159      	bne.n	8008212 <_scanf_i+0x126>
 800815e:	6862      	ldr	r2, [r4, #4]
 8008160:	b92a      	cbnz	r2, 800816e <_scanf_i+0x82>
 8008162:	6822      	ldr	r2, [r4, #0]
 8008164:	2308      	movs	r3, #8
 8008166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816a:	6063      	str	r3, [r4, #4]
 800816c:	6022      	str	r2, [r4, #0]
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008174:	6022      	str	r2, [r4, #0]
 8008176:	68a2      	ldr	r2, [r4, #8]
 8008178:	1e51      	subs	r1, r2, #1
 800817a:	60a1      	str	r1, [r4, #8]
 800817c:	b192      	cbz	r2, 80081a4 <_scanf_i+0xb8>
 800817e:	6832      	ldr	r2, [r6, #0]
 8008180:	1c51      	adds	r1, r2, #1
 8008182:	6031      	str	r1, [r6, #0]
 8008184:	7812      	ldrb	r2, [r2, #0]
 8008186:	f805 2b01 	strb.w	r2, [r5], #1
 800818a:	6872      	ldr	r2, [r6, #4]
 800818c:	3a01      	subs	r2, #1
 800818e:	2a00      	cmp	r2, #0
 8008190:	6072      	str	r2, [r6, #4]
 8008192:	dc07      	bgt.n	80081a4 <_scanf_i+0xb8>
 8008194:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008198:	4631      	mov	r1, r6
 800819a:	4650      	mov	r0, sl
 800819c:	4790      	blx	r2
 800819e:	2800      	cmp	r0, #0
 80081a0:	f040 8085 	bne.w	80082ae <_scanf_i+0x1c2>
 80081a4:	f10b 0b01 	add.w	fp, fp, #1
 80081a8:	f1bb 0f03 	cmp.w	fp, #3
 80081ac:	d1cb      	bne.n	8008146 <_scanf_i+0x5a>
 80081ae:	6863      	ldr	r3, [r4, #4]
 80081b0:	b90b      	cbnz	r3, 80081b6 <_scanf_i+0xca>
 80081b2:	230a      	movs	r3, #10
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	4947      	ldr	r1, [pc, #284]	; (80082d8 <_scanf_i+0x1ec>)
 80081ba:	6960      	ldr	r0, [r4, #20]
 80081bc:	1ac9      	subs	r1, r1, r3
 80081be:	f000 f89f 	bl	8008300 <__sccl>
 80081c2:	f04f 0b00 	mov.w	fp, #0
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d03d      	beq.n	800824a <_scanf_i+0x15e>
 80081ce:	6831      	ldr	r1, [r6, #0]
 80081d0:	6960      	ldr	r0, [r4, #20]
 80081d2:	f891 c000 	ldrb.w	ip, [r1]
 80081d6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80081da:	2800      	cmp	r0, #0
 80081dc:	d035      	beq.n	800824a <_scanf_i+0x15e>
 80081de:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80081e2:	d124      	bne.n	800822e <_scanf_i+0x142>
 80081e4:	0510      	lsls	r0, r2, #20
 80081e6:	d522      	bpl.n	800822e <_scanf_i+0x142>
 80081e8:	f10b 0b01 	add.w	fp, fp, #1
 80081ec:	f1b9 0f00 	cmp.w	r9, #0
 80081f0:	d003      	beq.n	80081fa <_scanf_i+0x10e>
 80081f2:	3301      	adds	r3, #1
 80081f4:	f109 39ff 	add.w	r9, r9, #4294967295
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	6873      	ldr	r3, [r6, #4]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	6073      	str	r3, [r6, #4]
 8008202:	dd1b      	ble.n	800823c <_scanf_i+0x150>
 8008204:	6833      	ldr	r3, [r6, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	6033      	str	r3, [r6, #0]
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	3b01      	subs	r3, #1
 800820e:	60a3      	str	r3, [r4, #8]
 8008210:	e7d9      	b.n	80081c6 <_scanf_i+0xda>
 8008212:	f1bb 0f02 	cmp.w	fp, #2
 8008216:	d1ae      	bne.n	8008176 <_scanf_i+0x8a>
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800821e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008222:	d1bf      	bne.n	80081a4 <_scanf_i+0xb8>
 8008224:	2310      	movs	r3, #16
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800822c:	e7a2      	b.n	8008174 <_scanf_i+0x88>
 800822e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	780b      	ldrb	r3, [r1, #0]
 8008236:	f805 3b01 	strb.w	r3, [r5], #1
 800823a:	e7de      	b.n	80081fa <_scanf_i+0x10e>
 800823c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008240:	4631      	mov	r1, r6
 8008242:	4650      	mov	r0, sl
 8008244:	4798      	blx	r3
 8008246:	2800      	cmp	r0, #0
 8008248:	d0df      	beq.n	800820a <_scanf_i+0x11e>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	05db      	lsls	r3, r3, #23
 800824e:	d50d      	bpl.n	800826c <_scanf_i+0x180>
 8008250:	42bd      	cmp	r5, r7
 8008252:	d909      	bls.n	8008268 <_scanf_i+0x17c>
 8008254:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800825c:	4632      	mov	r2, r6
 800825e:	4650      	mov	r0, sl
 8008260:	4798      	blx	r3
 8008262:	f105 39ff 	add.w	r9, r5, #4294967295
 8008266:	464d      	mov	r5, r9
 8008268:	42bd      	cmp	r5, r7
 800826a:	d02d      	beq.n	80082c8 <_scanf_i+0x1dc>
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	f012 0210 	ands.w	r2, r2, #16
 8008272:	d113      	bne.n	800829c <_scanf_i+0x1b0>
 8008274:	702a      	strb	r2, [r5, #0]
 8008276:	6863      	ldr	r3, [r4, #4]
 8008278:	9e01      	ldr	r6, [sp, #4]
 800827a:	4639      	mov	r1, r7
 800827c:	4650      	mov	r0, sl
 800827e:	47b0      	blx	r6
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	f8d8 3000 	ldr.w	r3, [r8]
 8008286:	f011 0f20 	tst.w	r1, #32
 800828a:	d013      	beq.n	80082b4 <_scanf_i+0x1c8>
 800828c:	1d1a      	adds	r2, r3, #4
 800828e:	f8c8 2000 	str.w	r2, [r8]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6018      	str	r0, [r3, #0]
 8008296:	68e3      	ldr	r3, [r4, #12]
 8008298:	3301      	adds	r3, #1
 800829a:	60e3      	str	r3, [r4, #12]
 800829c:	1bed      	subs	r5, r5, r7
 800829e:	44ab      	add	fp, r5
 80082a0:	6925      	ldr	r5, [r4, #16]
 80082a2:	445d      	add	r5, fp
 80082a4:	6125      	str	r5, [r4, #16]
 80082a6:	2000      	movs	r0, #0
 80082a8:	b007      	add	sp, #28
 80082aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ae:	f04f 0b00 	mov.w	fp, #0
 80082b2:	e7ca      	b.n	800824a <_scanf_i+0x15e>
 80082b4:	1d1a      	adds	r2, r3, #4
 80082b6:	f8c8 2000 	str.w	r2, [r8]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f011 0f01 	tst.w	r1, #1
 80082c0:	bf14      	ite	ne
 80082c2:	8018      	strhne	r0, [r3, #0]
 80082c4:	6018      	streq	r0, [r3, #0]
 80082c6:	e7e6      	b.n	8008296 <_scanf_i+0x1aa>
 80082c8:	2001      	movs	r0, #1
 80082ca:	e7ed      	b.n	80082a8 <_scanf_i+0x1bc>
 80082cc:	0800873c 	.word	0x0800873c
 80082d0:	0800855d 	.word	0x0800855d
 80082d4:	08008475 	.word	0x08008475
 80082d8:	080088c4 	.word	0x080088c4

080082dc <_read_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4d07      	ldr	r5, [pc, #28]	; (80082fc <_read_r+0x20>)
 80082e0:	4604      	mov	r4, r0
 80082e2:	4608      	mov	r0, r1
 80082e4:	4611      	mov	r1, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	602a      	str	r2, [r5, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	f7f8 ff81 	bl	80011f2 <_read>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_read_r+0x1e>
 80082f4:	682b      	ldr	r3, [r5, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_read_r+0x1e>
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20001b74 	.word	0x20001b74

08008300 <__sccl>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	780b      	ldrb	r3, [r1, #0]
 8008304:	4604      	mov	r4, r0
 8008306:	2b5e      	cmp	r3, #94	; 0x5e
 8008308:	bf0b      	itete	eq
 800830a:	784b      	ldrbeq	r3, [r1, #1]
 800830c:	1c48      	addne	r0, r1, #1
 800830e:	1c88      	addeq	r0, r1, #2
 8008310:	2200      	movne	r2, #0
 8008312:	bf08      	it	eq
 8008314:	2201      	moveq	r2, #1
 8008316:	1e61      	subs	r1, r4, #1
 8008318:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800831c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008320:	42a9      	cmp	r1, r5
 8008322:	d1fb      	bne.n	800831c <__sccl+0x1c>
 8008324:	b90b      	cbnz	r3, 800832a <__sccl+0x2a>
 8008326:	3801      	subs	r0, #1
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	f082 0201 	eor.w	r2, r2, #1
 800832e:	54e2      	strb	r2, [r4, r3]
 8008330:	4605      	mov	r5, r0
 8008332:	4628      	mov	r0, r5
 8008334:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008338:	292d      	cmp	r1, #45	; 0x2d
 800833a:	d006      	beq.n	800834a <__sccl+0x4a>
 800833c:	295d      	cmp	r1, #93	; 0x5d
 800833e:	d0f3      	beq.n	8008328 <__sccl+0x28>
 8008340:	b909      	cbnz	r1, 8008346 <__sccl+0x46>
 8008342:	4628      	mov	r0, r5
 8008344:	e7f0      	b.n	8008328 <__sccl+0x28>
 8008346:	460b      	mov	r3, r1
 8008348:	e7f1      	b.n	800832e <__sccl+0x2e>
 800834a:	786e      	ldrb	r6, [r5, #1]
 800834c:	2e5d      	cmp	r6, #93	; 0x5d
 800834e:	d0fa      	beq.n	8008346 <__sccl+0x46>
 8008350:	42b3      	cmp	r3, r6
 8008352:	dcf8      	bgt.n	8008346 <__sccl+0x46>
 8008354:	3502      	adds	r5, #2
 8008356:	4619      	mov	r1, r3
 8008358:	3101      	adds	r1, #1
 800835a:	428e      	cmp	r6, r1
 800835c:	5462      	strb	r2, [r4, r1]
 800835e:	dcfb      	bgt.n	8008358 <__sccl+0x58>
 8008360:	1af1      	subs	r1, r6, r3
 8008362:	3901      	subs	r1, #1
 8008364:	1c58      	adds	r0, r3, #1
 8008366:	42b3      	cmp	r3, r6
 8008368:	bfa8      	it	ge
 800836a:	2100      	movge	r1, #0
 800836c:	1843      	adds	r3, r0, r1
 800836e:	e7e0      	b.n	8008332 <__sccl+0x32>

08008370 <_strtol_l.constprop.0>:
 8008370:	2b01      	cmp	r3, #1
 8008372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008376:	d001      	beq.n	800837c <_strtol_l.constprop.0+0xc>
 8008378:	2b24      	cmp	r3, #36	; 0x24
 800837a:	d906      	bls.n	800838a <_strtol_l.constprop.0+0x1a>
 800837c:	f7fe fbf0 	bl	8006b60 <__errno>
 8008380:	2316      	movs	r3, #22
 8008382:	6003      	str	r3, [r0, #0]
 8008384:	2000      	movs	r0, #0
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008470 <_strtol_l.constprop.0+0x100>
 800838e:	460d      	mov	r5, r1
 8008390:	462e      	mov	r6, r5
 8008392:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008396:	f814 700c 	ldrb.w	r7, [r4, ip]
 800839a:	f017 0708 	ands.w	r7, r7, #8
 800839e:	d1f7      	bne.n	8008390 <_strtol_l.constprop.0+0x20>
 80083a0:	2c2d      	cmp	r4, #45	; 0x2d
 80083a2:	d132      	bne.n	800840a <_strtol_l.constprop.0+0x9a>
 80083a4:	782c      	ldrb	r4, [r5, #0]
 80083a6:	2701      	movs	r7, #1
 80083a8:	1cb5      	adds	r5, r6, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d05b      	beq.n	8008466 <_strtol_l.constprop.0+0xf6>
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	d109      	bne.n	80083c6 <_strtol_l.constprop.0+0x56>
 80083b2:	2c30      	cmp	r4, #48	; 0x30
 80083b4:	d107      	bne.n	80083c6 <_strtol_l.constprop.0+0x56>
 80083b6:	782c      	ldrb	r4, [r5, #0]
 80083b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80083bc:	2c58      	cmp	r4, #88	; 0x58
 80083be:	d14d      	bne.n	800845c <_strtol_l.constprop.0+0xec>
 80083c0:	786c      	ldrb	r4, [r5, #1]
 80083c2:	2310      	movs	r3, #16
 80083c4:	3502      	adds	r5, #2
 80083c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80083ce:	f04f 0c00 	mov.w	ip, #0
 80083d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80083d6:	4666      	mov	r6, ip
 80083d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80083dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80083e0:	f1be 0f09 	cmp.w	lr, #9
 80083e4:	d816      	bhi.n	8008414 <_strtol_l.constprop.0+0xa4>
 80083e6:	4674      	mov	r4, lr
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	dd24      	ble.n	8008436 <_strtol_l.constprop.0+0xc6>
 80083ec:	f1bc 0f00 	cmp.w	ip, #0
 80083f0:	db1e      	blt.n	8008430 <_strtol_l.constprop.0+0xc0>
 80083f2:	45b1      	cmp	r9, r6
 80083f4:	d31c      	bcc.n	8008430 <_strtol_l.constprop.0+0xc0>
 80083f6:	d101      	bne.n	80083fc <_strtol_l.constprop.0+0x8c>
 80083f8:	45a2      	cmp	sl, r4
 80083fa:	db19      	blt.n	8008430 <_strtol_l.constprop.0+0xc0>
 80083fc:	fb06 4603 	mla	r6, r6, r3, r4
 8008400:	f04f 0c01 	mov.w	ip, #1
 8008404:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008408:	e7e8      	b.n	80083dc <_strtol_l.constprop.0+0x6c>
 800840a:	2c2b      	cmp	r4, #43	; 0x2b
 800840c:	bf04      	itt	eq
 800840e:	782c      	ldrbeq	r4, [r5, #0]
 8008410:	1cb5      	addeq	r5, r6, #2
 8008412:	e7ca      	b.n	80083aa <_strtol_l.constprop.0+0x3a>
 8008414:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008418:	f1be 0f19 	cmp.w	lr, #25
 800841c:	d801      	bhi.n	8008422 <_strtol_l.constprop.0+0xb2>
 800841e:	3c37      	subs	r4, #55	; 0x37
 8008420:	e7e2      	b.n	80083e8 <_strtol_l.constprop.0+0x78>
 8008422:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008426:	f1be 0f19 	cmp.w	lr, #25
 800842a:	d804      	bhi.n	8008436 <_strtol_l.constprop.0+0xc6>
 800842c:	3c57      	subs	r4, #87	; 0x57
 800842e:	e7db      	b.n	80083e8 <_strtol_l.constprop.0+0x78>
 8008430:	f04f 3cff 	mov.w	ip, #4294967295
 8008434:	e7e6      	b.n	8008404 <_strtol_l.constprop.0+0x94>
 8008436:	f1bc 0f00 	cmp.w	ip, #0
 800843a:	da05      	bge.n	8008448 <_strtol_l.constprop.0+0xd8>
 800843c:	2322      	movs	r3, #34	; 0x22
 800843e:	6003      	str	r3, [r0, #0]
 8008440:	4646      	mov	r6, r8
 8008442:	b942      	cbnz	r2, 8008456 <_strtol_l.constprop.0+0xe6>
 8008444:	4630      	mov	r0, r6
 8008446:	e79e      	b.n	8008386 <_strtol_l.constprop.0+0x16>
 8008448:	b107      	cbz	r7, 800844c <_strtol_l.constprop.0+0xdc>
 800844a:	4276      	negs	r6, r6
 800844c:	2a00      	cmp	r2, #0
 800844e:	d0f9      	beq.n	8008444 <_strtol_l.constprop.0+0xd4>
 8008450:	f1bc 0f00 	cmp.w	ip, #0
 8008454:	d000      	beq.n	8008458 <_strtol_l.constprop.0+0xe8>
 8008456:	1e69      	subs	r1, r5, #1
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	e7f3      	b.n	8008444 <_strtol_l.constprop.0+0xd4>
 800845c:	2430      	movs	r4, #48	; 0x30
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1b1      	bne.n	80083c6 <_strtol_l.constprop.0+0x56>
 8008462:	2308      	movs	r3, #8
 8008464:	e7af      	b.n	80083c6 <_strtol_l.constprop.0+0x56>
 8008466:	2c30      	cmp	r4, #48	; 0x30
 8008468:	d0a5      	beq.n	80083b6 <_strtol_l.constprop.0+0x46>
 800846a:	230a      	movs	r3, #10
 800846c:	e7ab      	b.n	80083c6 <_strtol_l.constprop.0+0x56>
 800846e:	bf00      	nop
 8008470:	080088c7 	.word	0x080088c7

08008474 <_strtol_r>:
 8008474:	f7ff bf7c 	b.w	8008370 <_strtol_l.constprop.0>

08008478 <_strtoul_l.constprop.0>:
 8008478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800847c:	4f36      	ldr	r7, [pc, #216]	; (8008558 <_strtoul_l.constprop.0+0xe0>)
 800847e:	4686      	mov	lr, r0
 8008480:	460d      	mov	r5, r1
 8008482:	4628      	mov	r0, r5
 8008484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008488:	5de6      	ldrb	r6, [r4, r7]
 800848a:	f016 0608 	ands.w	r6, r6, #8
 800848e:	d1f8      	bne.n	8008482 <_strtoul_l.constprop.0+0xa>
 8008490:	2c2d      	cmp	r4, #45	; 0x2d
 8008492:	d12f      	bne.n	80084f4 <_strtoul_l.constprop.0+0x7c>
 8008494:	782c      	ldrb	r4, [r5, #0]
 8008496:	2601      	movs	r6, #1
 8008498:	1c85      	adds	r5, r0, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d057      	beq.n	800854e <_strtoul_l.constprop.0+0xd6>
 800849e:	2b10      	cmp	r3, #16
 80084a0:	d109      	bne.n	80084b6 <_strtoul_l.constprop.0+0x3e>
 80084a2:	2c30      	cmp	r4, #48	; 0x30
 80084a4:	d107      	bne.n	80084b6 <_strtoul_l.constprop.0+0x3e>
 80084a6:	7828      	ldrb	r0, [r5, #0]
 80084a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80084ac:	2858      	cmp	r0, #88	; 0x58
 80084ae:	d149      	bne.n	8008544 <_strtoul_l.constprop.0+0xcc>
 80084b0:	786c      	ldrb	r4, [r5, #1]
 80084b2:	2310      	movs	r3, #16
 80084b4:	3502      	adds	r5, #2
 80084b6:	f04f 38ff 	mov.w	r8, #4294967295
 80084ba:	2700      	movs	r7, #0
 80084bc:	fbb8 f8f3 	udiv	r8, r8, r3
 80084c0:	fb03 f908 	mul.w	r9, r3, r8
 80084c4:	ea6f 0909 	mvn.w	r9, r9
 80084c8:	4638      	mov	r0, r7
 80084ca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80084ce:	f1bc 0f09 	cmp.w	ip, #9
 80084d2:	d814      	bhi.n	80084fe <_strtoul_l.constprop.0+0x86>
 80084d4:	4664      	mov	r4, ip
 80084d6:	42a3      	cmp	r3, r4
 80084d8:	dd22      	ble.n	8008520 <_strtoul_l.constprop.0+0xa8>
 80084da:	2f00      	cmp	r7, #0
 80084dc:	db1d      	blt.n	800851a <_strtoul_l.constprop.0+0xa2>
 80084de:	4580      	cmp	r8, r0
 80084e0:	d31b      	bcc.n	800851a <_strtoul_l.constprop.0+0xa2>
 80084e2:	d101      	bne.n	80084e8 <_strtoul_l.constprop.0+0x70>
 80084e4:	45a1      	cmp	r9, r4
 80084e6:	db18      	blt.n	800851a <_strtoul_l.constprop.0+0xa2>
 80084e8:	fb00 4003 	mla	r0, r0, r3, r4
 80084ec:	2701      	movs	r7, #1
 80084ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084f2:	e7ea      	b.n	80084ca <_strtoul_l.constprop.0+0x52>
 80084f4:	2c2b      	cmp	r4, #43	; 0x2b
 80084f6:	bf04      	itt	eq
 80084f8:	782c      	ldrbeq	r4, [r5, #0]
 80084fa:	1c85      	addeq	r5, r0, #2
 80084fc:	e7cd      	b.n	800849a <_strtoul_l.constprop.0+0x22>
 80084fe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008502:	f1bc 0f19 	cmp.w	ip, #25
 8008506:	d801      	bhi.n	800850c <_strtoul_l.constprop.0+0x94>
 8008508:	3c37      	subs	r4, #55	; 0x37
 800850a:	e7e4      	b.n	80084d6 <_strtoul_l.constprop.0+0x5e>
 800850c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008510:	f1bc 0f19 	cmp.w	ip, #25
 8008514:	d804      	bhi.n	8008520 <_strtoul_l.constprop.0+0xa8>
 8008516:	3c57      	subs	r4, #87	; 0x57
 8008518:	e7dd      	b.n	80084d6 <_strtoul_l.constprop.0+0x5e>
 800851a:	f04f 37ff 	mov.w	r7, #4294967295
 800851e:	e7e6      	b.n	80084ee <_strtoul_l.constprop.0+0x76>
 8008520:	2f00      	cmp	r7, #0
 8008522:	da07      	bge.n	8008534 <_strtoul_l.constprop.0+0xbc>
 8008524:	2322      	movs	r3, #34	; 0x22
 8008526:	f8ce 3000 	str.w	r3, [lr]
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	b932      	cbnz	r2, 800853e <_strtoul_l.constprop.0+0xc6>
 8008530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008534:	b106      	cbz	r6, 8008538 <_strtoul_l.constprop.0+0xc0>
 8008536:	4240      	negs	r0, r0
 8008538:	2a00      	cmp	r2, #0
 800853a:	d0f9      	beq.n	8008530 <_strtoul_l.constprop.0+0xb8>
 800853c:	b107      	cbz	r7, 8008540 <_strtoul_l.constprop.0+0xc8>
 800853e:	1e69      	subs	r1, r5, #1
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	e7f5      	b.n	8008530 <_strtoul_l.constprop.0+0xb8>
 8008544:	2430      	movs	r4, #48	; 0x30
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1b5      	bne.n	80084b6 <_strtoul_l.constprop.0+0x3e>
 800854a:	2308      	movs	r3, #8
 800854c:	e7b3      	b.n	80084b6 <_strtoul_l.constprop.0+0x3e>
 800854e:	2c30      	cmp	r4, #48	; 0x30
 8008550:	d0a9      	beq.n	80084a6 <_strtoul_l.constprop.0+0x2e>
 8008552:	230a      	movs	r3, #10
 8008554:	e7af      	b.n	80084b6 <_strtoul_l.constprop.0+0x3e>
 8008556:	bf00      	nop
 8008558:	080088c7 	.word	0x080088c7

0800855c <_strtoul_r>:
 800855c:	f7ff bf8c 	b.w	8008478 <_strtoul_l.constprop.0>

08008560 <__submore>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	460c      	mov	r4, r1
 8008566:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856c:	4299      	cmp	r1, r3
 800856e:	d11d      	bne.n	80085ac <__submore+0x4c>
 8008570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008574:	f7fe fbb0 	bl	8006cd8 <_malloc_r>
 8008578:	b918      	cbnz	r0, 8008582 <__submore+0x22>
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008586:	63a3      	str	r3, [r4, #56]	; 0x38
 8008588:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800858c:	6360      	str	r0, [r4, #52]	; 0x34
 800858e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008592:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008596:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800859a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800859e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80085a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80085a6:	6020      	str	r0, [r4, #0]
 80085a8:	2000      	movs	r0, #0
 80085aa:	e7e8      	b.n	800857e <__submore+0x1e>
 80085ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80085ae:	0077      	lsls	r7, r6, #1
 80085b0:	463a      	mov	r2, r7
 80085b2:	f000 f831 	bl	8008618 <_realloc_r>
 80085b6:	4605      	mov	r5, r0
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d0de      	beq.n	800857a <__submore+0x1a>
 80085bc:	eb00 0806 	add.w	r8, r0, r6
 80085c0:	4601      	mov	r1, r0
 80085c2:	4632      	mov	r2, r6
 80085c4:	4640      	mov	r0, r8
 80085c6:	f7fe fb05 	bl	8006bd4 <memcpy>
 80085ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80085ce:	f8c4 8000 	str.w	r8, [r4]
 80085d2:	e7e9      	b.n	80085a8 <__submore+0x48>

080085d4 <_fstat_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d07      	ldr	r5, [pc, #28]	; (80085f4 <_fstat_r+0x20>)
 80085d8:	2300      	movs	r3, #0
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	4611      	mov	r1, r2
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	f7f8 fe2f 	bl	8001244 <_fstat>
 80085e6:	1c43      	adds	r3, r0, #1
 80085e8:	d102      	bne.n	80085f0 <_fstat_r+0x1c>
 80085ea:	682b      	ldr	r3, [r5, #0]
 80085ec:	b103      	cbz	r3, 80085f0 <_fstat_r+0x1c>
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	bd38      	pop	{r3, r4, r5, pc}
 80085f2:	bf00      	nop
 80085f4:	20001b74 	.word	0x20001b74

080085f8 <_isatty_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_isatty_r+0x1c>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7f8 fe2e 	bl	8001264 <_isatty>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_isatty_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_isatty_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	20001b74 	.word	0x20001b74

08008618 <_realloc_r>:
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	4680      	mov	r8, r0
 800861e:	4614      	mov	r4, r2
 8008620:	460e      	mov	r6, r1
 8008622:	b921      	cbnz	r1, 800862e <_realloc_r+0x16>
 8008624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	4611      	mov	r1, r2
 800862a:	f7fe bb55 	b.w	8006cd8 <_malloc_r>
 800862e:	b92a      	cbnz	r2, 800863c <_realloc_r+0x24>
 8008630:	f7fe fae6 	bl	8006c00 <_free_r>
 8008634:	4625      	mov	r5, r4
 8008636:	4628      	mov	r0, r5
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	f000 f81b 	bl	8008676 <_malloc_usable_size_r>
 8008640:	4284      	cmp	r4, r0
 8008642:	4607      	mov	r7, r0
 8008644:	d802      	bhi.n	800864c <_realloc_r+0x34>
 8008646:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800864a:	d812      	bhi.n	8008672 <_realloc_r+0x5a>
 800864c:	4621      	mov	r1, r4
 800864e:	4640      	mov	r0, r8
 8008650:	f7fe fb42 	bl	8006cd8 <_malloc_r>
 8008654:	4605      	mov	r5, r0
 8008656:	2800      	cmp	r0, #0
 8008658:	d0ed      	beq.n	8008636 <_realloc_r+0x1e>
 800865a:	42bc      	cmp	r4, r7
 800865c:	4622      	mov	r2, r4
 800865e:	4631      	mov	r1, r6
 8008660:	bf28      	it	cs
 8008662:	463a      	movcs	r2, r7
 8008664:	f7fe fab6 	bl	8006bd4 <memcpy>
 8008668:	4631      	mov	r1, r6
 800866a:	4640      	mov	r0, r8
 800866c:	f7fe fac8 	bl	8006c00 <_free_r>
 8008670:	e7e1      	b.n	8008636 <_realloc_r+0x1e>
 8008672:	4635      	mov	r5, r6
 8008674:	e7df      	b.n	8008636 <_realloc_r+0x1e>

08008676 <_malloc_usable_size_r>:
 8008676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867a:	1f18      	subs	r0, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfbc      	itt	lt
 8008680:	580b      	ldrlt	r3, [r1, r0]
 8008682:	18c0      	addlt	r0, r0, r3
 8008684:	4770      	bx	lr
	...

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
