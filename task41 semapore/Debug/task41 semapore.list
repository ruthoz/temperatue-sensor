
task41 semapore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a984  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800ab18  0800ab18  0001ab18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0b4  0800b0b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0b4  0800b0b4  0001b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0bc  0800b0bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0bc  0800b0bc  0001b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0c0  0800b0c0  0001b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002298  200001e0  0800b2a4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002478  0800b2a4  00022478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb95  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9c  00000000  00000000  0003cda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00040948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001670  00000000  00000000  00042120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a502  00000000  00000000  00043790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab5c  00000000  00000000  0006dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001003df  00000000  00000000  000887ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074a0  00000000  00000000  00188c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aafc 	.word	0x0800aafc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aafc 	.word	0x0800aafc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Dht_init>:
	DHT_STATE_INIT_RESPONSE,
	DHT_STATE_RECEIVE_DATA
};

void Dht_init(Dht * dht, GPIO_TypeDef * gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
	dht->gpioPort = gpioPort;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	601a      	str	r2, [r3, #0]
	dht->gpioPin = gpioPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	809a      	strh	r2, [r3, #4]
	dht->timer = timer;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	609a      	str	r2, [r3, #8]
	dht->counter = 0;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
	dht->maxCounter = 0;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
	dht->state = DHT_STATE_NO_DATA;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
	dht->temperature = 0.0;
 8000ee0:	68f9      	ldr	r1, [r7, #12]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dht->humidity = 0.0;
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <waitWhileEqual>:

static int waitWhileEqual(Dht * dht, int value, int expectedTime)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	int timeout = expectedTime + (expectedTime) / 5;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a15      	ldr	r2, [pc, #84]	; (8000f6c <waitWhileEqual+0x64>)
 8000f18:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1c:	1052      	asrs	r2, r2, #1
 8000f1e:	17db      	asrs	r3, r3, #31
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(dht->timer, 0);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(dht->gpioPort, dht->gpioPin) == value) {
 8000f32:	e008      	b.n	8000f46 <waitWhileEqual+0x3e>
		if (__HAL_TIM_GET_COUNTER(dht->timer) > timeout) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d901      	bls.n	8000f46 <waitWhileEqual+0x3e>
			// too much time in the state
			return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e00d      	b.n	8000f62 <waitWhileEqual+0x5a>
	while (HAL_GPIO_ReadPin(dht->gpioPort, dht->gpioPin) == value) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	889b      	ldrh	r3, [r3, #4]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f001 f8d9 	bl	8002108 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d0e9      	beq.n	8000f34 <waitWhileEqual+0x2c>
		}
	}

	return true;
 8000f60:	2301      	movs	r3, #1
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	66666667 	.word	0x66666667

08000f70 <setGpioOutput>:

static void setGpioOutput(Dht * dht)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = dht->gpioPin;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	889b      	ldrh	r3, [r3, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(dht->gpioPort, &gpioStruct);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 ff05 	bl	8001db4 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000faa:	2017      	movs	r0, #23
 8000fac:	f000 fef4 	bl	8001d98 <HAL_NVIC_DisableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <setGpioInput>:

static void setGpioInput(Dht * dht)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = dht->gpioPin;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	889b      	ldrh	r3, [r3, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(dht->gpioPort, &gpioStruct);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fee1 	bl	8001db4 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000ff2:	2017      	movs	r0, #23
 8000ff4:	f000 fed0 	bl	8001d98 <HAL_NVIC_DisableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Dht_read>:
	HAL_GPIO_Init(dht->gpioPort, &gpioStruct);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
}

int Dht_read(Dht * dht)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	setGpioOutput(dht);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffb1 	bl	8000f70 <setGpioOutput>

	HAL_TIM_Base_Start(dht->timer);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fc6c 	bl	80038f0 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(dht->timer, 0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(dht->gpioPort, dht->gpioPin, 0);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f001 f883 	bl	8002138 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(dht->timer) < 19000);
 8001032:	bf00      	nop
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001040:	4293      	cmp	r3, r2
 8001042:	d9f7      	bls.n	8001034 <Dht_read+0x34>

	HAL_GPIO_WritePin(dht->gpioPort, dht->gpioPin, 1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	889b      	ldrh	r3, [r3, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	f001 f872 	bl	8002138 <HAL_GPIO_WritePin>

	// start listening
	setGpioInput(dht);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffaf 	bl	8000fb8 <setGpioInput>

	// wait for response 20-40us
	if (!waitWhileEqual(dht, 1, 40)) {
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	2101      	movs	r1, #1
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff52 	bl	8000f08 <waitWhileEqual>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <Dht_read+0x6e>
		return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0b2      	b.n	80011d4 <Dht_read+0x1d4>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(dht, 0, 80)) {
 800106e:	2250      	movs	r2, #80	; 0x50
 8001070:	2100      	movs	r1, #0
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff48 	bl	8000f08 <waitWhileEqual>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <Dht_read+0x82>
		return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0a8      	b.n	80011d4 <Dht_read+0x1d4>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(dht, 1, 80)) {
 8001082:	2250      	movs	r2, #80	; 0x50
 8001084:	2101      	movs	r1, #1
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff3e 	bl	8000f08 <waitWhileEqual>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <Dht_read+0x96>
		return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e09e      	b.n	80011d4 <Dht_read+0x1d4>
	}

	// DHT start send data bits

	uint8_t data[5] = { 0 };
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	2300      	movs	r3, #0
 800109c:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e040      	b.n	8001126 <Dht_read+0x126>
		for (int j = 0; j < 8; j++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e037      	b.n	800111a <Dht_read+0x11a>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual(dht, 0, 60)) {
 80010aa:	223c      	movs	r2, #60	; 0x3c
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff2a 	bl	8000f08 <waitWhileEqual>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <Dht_read+0xbe>
				return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e08a      	b.n	80011d4 <Dht_read+0x1d4>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual(dht, 1, 70)) {
 80010be:	2246      	movs	r2, #70	; 0x46
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff20 	bl	8000f08 <waitWhileEqual>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <Dht_read+0xd2>
				return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e080      	b.n	80011d4 <Dht_read+0x1d4>
			}

			data[i] <<= 1;
 80010d2:	f107 0208 	add.w	r2, r7, #8
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b2d9      	uxtb	r1, r3
 80010e0:	f107 0208 	add.w	r2, r7, #8
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	4413      	add	r3, r2
 80010e8:	460a      	mov	r2, r1
 80010ea:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(dht->timer) > 50) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	2b32      	cmp	r3, #50	; 0x32
 80010f6:	d90d      	bls.n	8001114 <Dht_read+0x114>
				data[i] |= 1;
 80010f8:	f107 0208 	add.w	r2, r7, #8
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	f043 0301 	orr.w	r3, r3, #1
 8001106:	b2d9      	uxtb	r1, r3
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4413      	add	r3, r2
 8001110:	460a      	mov	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3301      	adds	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b07      	cmp	r3, #7
 800111e:	ddc4      	ble.n	80010aa <Dht_read+0xaa>
	for (int i = 0; i < 5; i++) {
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b04      	cmp	r3, #4
 800112a:	ddbb      	ble.n	80010a4 <Dht_read+0xa4>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 800112c:	7a3a      	ldrb	r2, [r7, #8]
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	4413      	add	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	4413      	add	r3, r2
 800113e:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <Dht_read+0x14c>
		return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e043      	b.n	80011d4 <Dht_read+0x1d4>
	}

	dht->humidity = (double)data[0] + ((double)data[1]) / 10;
 800114c:	7a3b      	ldrb	r3, [r7, #8]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9d8 	bl	8000504 <__aeabi_ui2d>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	7a7b      	ldrb	r3, [r7, #9]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9d2 	bl	8000504 <__aeabi_ui2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <Dht_read+0x1dc>)
 8001166:	f7ff fb71 	bl	800084c <__aeabi_ddiv>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f88b 	bl	800028c <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dht->temperature = (double)data[2] + ((double)data[3]) / 10;
 8001180:	7abb      	ldrb	r3, [r7, #10]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9be 	bl	8000504 <__aeabi_ui2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	7afb      	ldrb	r3, [r7, #11]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9b8 	bl	8000504 <__aeabi_ui2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b10      	ldr	r3, [pc, #64]	; (80011dc <Dht_read+0x1dc>)
 800119a:	f7ff fb57 	bl	800084c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff f871 	bl	800028c <__adddf3>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual(dht, 0, 100)) {
 80011b4:	2264      	movs	r2, #100	; 0x64
 80011b6:	2100      	movs	r1, #0
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fea5 	bl	8000f08 <waitWhileEqual>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <Dht_read+0x1c8>
		return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e005      	b.n	80011d4 <Dht_read+0x1d4>
	}

	HAL_TIM_Base_Stop(dht->timer);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 fbf7 	bl	80039c0 <HAL_TIM_Base_Stop>

	return HAL_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	40240000 	.word	0x40240000

080011e0 <Dht_getHumidty>:

	return hasData;
}

double Dht_getHumidty(Dht * dht)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	return dht->humidity;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80011ee:	ec43 2b17 	vmov	d7, r2, r3
}
 80011f2:	eeb0 0a47 	vmov.f32	s0, s14
 80011f6:	eef0 0a67 	vmov.f32	s1, s15
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <Dht_getTempperature>:

double Dht_getTempperature(Dht * dht)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	return dht->temperature;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001212:	ec43 2b17 	vmov	d7, r2, r3
}
 8001216:	eeb0 0a47 	vmov.f32	s0, s14
 800121a:	eef0 0a67 	vmov.f32	s1, s15
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <Entry_DhtTask>:

void Entry_DhtTask(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_DhtTask */
  /* Infinite loop */
  for(;;){
	osSemaphoreAcquire(srtartDHTdataReadingHandle,osWaitForever);
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <Entry_DhtTask+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fdef 	bl	8004e1c <osSemaphoreAcquire>
	Dht_read(&dht);
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <Entry_DhtTask+0x2c>)
 8001240:	f7ff fede 	bl	8001000 <Dht_read>
	osSemaphoreRelease(startDataPrintingHandle);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <Entry_DhtTask+0x30>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fe39 	bl	8004ec0 <osSemaphoreRelease>
	osSemaphoreAcquire(srtartDHTdataReadingHandle,osWaitForever);
 800124e:	e7ef      	b.n	8001230 <Entry_DhtTask+0x8>
 8001250:	20000334 	.word	0x20000334
 8001254:	20000200 	.word	0x20000200
 8001258:	20000338 	.word	0x20000338

0800125c <Led_init>:

//static int delay = 500;


void Led_init(Led* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	4613      	mov	r3, r2
 8001268:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	701a      	strb	r2, [r3, #0]
	led->counter = 0 ;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
	led->GPIOx = GPIOx;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	609a      	str	r2, [r3, #8]
	led->GPIO_Pin = GPIO_Pin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	819a      	strh	r2, [r3, #12]
	led->delay = 500;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001288:	615a      	str	r2, [r3, #20]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <Entry_blinkTask>:


void Entry_blinkTask(void *obj)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_blinkTask */
	Led *led = (Led*)obj;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4610      	mov	r0, r2
 80012ae:	f000 ff5b 	bl	8002168 <HAL_GPIO_TogglePin>
	  osDelay(led->delay);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fd0c 	bl	8004cd4 <osDelay>
	  HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 80012bc:	e7f1      	b.n	80012a2 <Entry_blinkTask+0xc>
	...

080012c0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <_write+0x28>)
 80012d8:	f002 fee0 	bl	800409c <HAL_UART_Transmit>
	return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000029c 	.word	0x2000029c

080012ec <Entry_delayTask>:
//////////////////////////////////////////////////////////////////////

void Entry_delayTask(void *argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_delayTask */
  /* Infinite loop */
  for(;;){
    osDelay(1500);
 80012f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80012f8:	f003 fcec 	bl	8004cd4 <osDelay>
    osSemaphoreRelease(srtartDHTdataReadingHandle);
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <Entry_delayTask+0x1c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f003 fddd 	bl	8004ec0 <osSemaphoreRelease>
    osDelay(1500);
 8001306:	e7f5      	b.n	80012f4 <Entry_delayTask+0x8>
 8001308:	20000334 	.word	0x20000334

0800130c <Entry_printTask>:
  /* USER CODE END Entry_delayTask */
}

//////////////////////////////////////////////////////////////
void Entry_printTask(void *argument)
{
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_printTask */
  /* Infinite loop */
  for(;;){
	osSemaphoreAcquire(startDataPrintingHandle, osWaitForever);
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <Entry_printTask+0x44>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fd7d 	bl	8004e1c <osSemaphoreAcquire>
	printf("temperature =%4.1f , humidity=%4.1f \r\n", Dht_getTempperature(&dht), Dht_getHumidty(&dht));
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <Entry_printTask+0x48>)
 8001324:	f7ff ff6e 	bl	8001204 <Dht_getTempperature>
 8001328:	ec55 4b10 	vmov	r4, r5, d0
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <Entry_printTask+0x48>)
 800132e:	f7ff ff57 	bl	80011e0 <Dht_getHumidty>
 8001332:	eeb0 7a40 	vmov.f32	s14, s0
 8001336:	eef0 7a60 	vmov.f32	s15, s1
 800133a:	ed8d 7b00 	vstr	d7, [sp]
 800133e:	4622      	mov	r2, r4
 8001340:	462b      	mov	r3, r5
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <Entry_printTask+0x4c>)
 8001344:	f007 fb24 	bl	8008990 <iprintf>
	osDelay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f003 fcc3 	bl	8004cd4 <osDelay>
	osSemaphoreAcquire(startDataPrintingHandle, osWaitForever);
 800134e:	e7e1      	b.n	8001314 <Entry_printTask+0x8>
 8001350:	20000338 	.word	0x20000338
 8001354:	20000200 	.word	0x20000200
 8001358:	0800ab7c 	.word	0x0800ab7c

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Dht_init(&dht, GPIOB, GPIO_PIN_5, &htim7);
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <main+0xac>)
 8001362:	2220      	movs	r2, #32
 8001364:	4929      	ldr	r1, [pc, #164]	; (800140c <main+0xb0>)
 8001366:	482a      	ldr	r0, [pc, #168]	; (8001410 <main+0xb4>)
 8001368:	f7ff fda0 	bl	8000eac <Dht_init>
	Led_init(&ledB , LD2_GPIO_Port , LD2_Pin );
 800136c:	2220      	movs	r2, #32
 800136e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001372:	4828      	ldr	r0, [pc, #160]	; (8001414 <main+0xb8>)
 8001374:	f7ff ff72 	bl	800125c <Led_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fbc8 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f872 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 f928 	bl	80015d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001384:	f000 f8f6 	bl	8001574 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001388:	f000 f8be 	bl	8001508 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800138c:	f003 fbc6 	bl	8004b1c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of srtartDHTdataReading */
  srtartDHTdataReadingHandle = osSemaphoreNew(1, 1, &srtartDHTdataReading_attributes);
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <main+0xbc>)
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f003 fcb8 	bl	8004d0a <osSemaphoreNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <main+0xc0>)
 800139e:	6013      	str	r3, [r2, #0]

  /* creation of startDataPrinting */
  startDataPrintingHandle = osSemaphoreNew(1, 1, &startDataPrinting_attributes);
 80013a0:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <main+0xc4>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	2001      	movs	r0, #1
 80013a6:	f003 fcb0 	bl	8004d0a <osSemaphoreNew>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <main+0xc8>)
 80013ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <main+0xcc>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <main+0xd0>)
 80013b6:	f003 fbfb 	bl	8004bb0 <osThreadNew>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <main+0xd4>)
 80013be:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(Entry_DhtTask, NULL, &DhtTask_attributes);
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <main+0xd8>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <main+0xdc>)
 80013c6:	f003 fbf3 	bl	8004bb0 <osThreadNew>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <main+0xe0>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* creation of delayTask */
  delayTaskHandle = osThreadNew(Entry_delayTask, NULL, &delayTask_attributes);
 80013d0:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <main+0xe4>)
 80013d2:	2100      	movs	r1, #0
 80013d4:	481b      	ldr	r0, [pc, #108]	; (8001444 <main+0xe8>)
 80013d6:	f003 fbeb 	bl	8004bb0 <osThreadNew>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <main+0xec>)
 80013de:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(Entry_printTask, NULL, &printTask_attributes);
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <main+0xf0>)
 80013e2:	2100      	movs	r1, #0
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <main+0xf4>)
 80013e6:	f003 fbe3 	bl	8004bb0 <osThreadNew>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <main+0xf8>)
 80013ee:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(Entry_blinkTask, (void*) &ledB, &blinkTask_attributes);
 80013f0:	4a19      	ldr	r2, [pc, #100]	; (8001458 <main+0xfc>)
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <main+0xb8>)
 80013f4:	4819      	ldr	r0, [pc, #100]	; (800145c <main+0x100>)
 80013f6:	f003 fbdb 	bl	8004bb0 <osThreadNew>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <main+0x104>)
 80013fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001400:	f003 fbb0 	bl	8004b64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001404:	e7fe      	b.n	8001404 <main+0xa8>
 8001406:	bf00      	nop
 8001408:	20000250 	.word	0x20000250
 800140c:	48000400 	.word	0x48000400
 8001410:	20000200 	.word	0x20000200
 8001414:	20000238 	.word	0x20000238
 8001418:	0800ac70 	.word	0x0800ac70
 800141c:	20000334 	.word	0x20000334
 8001420:	0800ac80 	.word	0x0800ac80
 8001424:	20000338 	.word	0x20000338
 8001428:	0800abbc 	.word	0x0800abbc
 800142c:	080016cd 	.word	0x080016cd
 8001430:	20000320 	.word	0x20000320
 8001434:	0800abe0 	.word	0x0800abe0
 8001438:	08001229 	.word	0x08001229
 800143c:	20000324 	.word	0x20000324
 8001440:	0800ac04 	.word	0x0800ac04
 8001444:	080012ed 	.word	0x080012ed
 8001448:	20000328 	.word	0x20000328
 800144c:	0800ac28 	.word	0x0800ac28
 8001450:	0800130d 	.word	0x0800130d
 8001454:	2000032c 	.word	0x2000032c
 8001458:	0800ac4c 	.word	0x0800ac4c
 800145c:	08001297 	.word	0x08001297
 8001460:	20000330 	.word	0x20000330

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b096      	sub	sp, #88	; 0x58
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2244      	movs	r2, #68	; 0x44
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f006 fe1a 	bl	80080ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001486:	f44f 7000 	mov.w	r0, #512	; 0x200
 800148a:	f000 fe95 	bl	80021b8 <HAL_PWREx_ControlVoltageScaling>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001494:	f000 f934 	bl	8001700 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	2310      	movs	r3, #16
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014b2:	230a      	movs	r3, #10
 80014b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014b6:	2307      	movs	r3, #7
 80014b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fecc 	bl	8002264 <HAL_RCC_OscConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014d2:	f000 f915 	bl	8001700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	230f      	movs	r3, #15
 80014d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014da:	2303      	movs	r3, #3
 80014dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	2104      	movs	r1, #4
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fa94 	bl	8002a1c <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014fa:	f000 f901 	bl	8001700 <Error_Handler>
  }
}
 80014fe:	bf00      	nop
 8001500:	3758      	adds	r7, #88	; 0x58
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_TIM7_Init+0x64>)
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <MX_TIM7_Init+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_TIM7_Init+0x64>)
 8001520:	2250      	movs	r2, #80	; 0x50
 8001522:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_TIM7_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_TIM7_Init+0x64>)
 800152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_TIM7_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM7_Init+0x64>)
 800153a:	f002 f981 	bl	8003840 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001544:	f000 f8dc 	bl	8001700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM7_Init+0x64>)
 8001556:	f002 fcad 	bl	8003eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 f8ce 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000250 	.word	0x20000250
 8001570:	40001400 	.word	0x40001400

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MX_USART2_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART2_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART2_UART_Init+0x58>)
 80015b8:	f002 fd22 	bl	8004000 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 f89d 	bl	8001700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000029c 	.word	0x2000029c
 80015d0:	40004400 	.word	0x40004400

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_GPIO_Init+0xec>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4a34      	ldr	r2, [pc, #208]	; (80016c0 <MX_GPIO_Init+0xec>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <MX_GPIO_Init+0xec>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_GPIO_Init+0xec>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <MX_GPIO_Init+0xec>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f000 fd71 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2120      	movs	r1, #32
 800165a:	481a      	ldr	r0, [pc, #104]	; (80016c4 <MX_GPIO_Init+0xf0>)
 800165c:	f000 fd6c 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001666:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4814      	ldr	r0, [pc, #80]	; (80016c8 <MX_GPIO_Init+0xf4>)
 8001678:	f000 fb9c 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800167c:	2320      	movs	r3, #32
 800167e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f000 fb8d 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800169a:	2320      	movs	r3, #32
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <MX_GPIO_Init+0xf0>)
 80016b2:	f000 fb7f 	bl	8001db4 <HAL_GPIO_Init>

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	48000400 	.word	0x48000400
 80016c8:	48000800 	.word	0x48000800

080016cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f003 fafd 	bl	8004cd4 <osDelay>
 80016da:	e7fb      	b.n	80016d4 <StartDefaultTask+0x8>

080016dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016ee:	f000 fa2d 	bl	8001b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40014400 	.word	0x40014400

08001700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001708:	e7fe      	b.n	8001708 <Error_Handler+0x8>
	...

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_MspInit+0x4c>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <HAL_MspInit+0x4c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_MspInit+0x4c>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_MspInit+0x4c>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_MspInit+0x4c>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	210f      	movs	r1, #15
 8001746:	f06f 0001 	mvn.w	r0, #1
 800174a:	f000 fafb 	bl	8001d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000

0800175c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_TIM_Base_MspInit+0x38>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10b      	bne.n	8001786 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_TIM_Base_MspInit+0x3c>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <HAL_TIM_Base_MspInit+0x3c>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <HAL_TIM_Base_MspInit+0x3c>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40001400 	.word	0x40001400
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ac      	sub	sp, #176	; 0xb0
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2288      	movs	r2, #136	; 0x88
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f006 fc75 	bl	80080ac <memset>
  if(huart->Instance==USART2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <HAL_UART_MspInit+0xb0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d13b      	bne.n	8001844 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4618      	mov	r0, r3
 80017da:	f001 fb75 	bl	8002ec8 <HAL_RCCEx_PeriphCLKConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e4:	f7ff ff8c 	bl	8001700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017e8:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_UART_MspInit+0xb4>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	4a18      	ldr	r2, [pc, #96]	; (8001850 <HAL_UART_MspInit+0xb4>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6593      	str	r3, [r2, #88]	; 0x58
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_UART_MspInit+0xb4>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_UART_MspInit+0xb4>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_UART_MspInit+0xb4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_UART_MspInit+0xb4>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001818:	230c      	movs	r3, #12
 800181a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001830:	2307      	movs	r3, #7
 8001832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f000 fab8 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001844:	bf00      	nop
 8001846:	37b0      	adds	r7, #176	; 0xb0
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40004400 	.word	0x40004400
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2019      	movs	r0, #25
 800186a:	f000 fa6b 	bl	8001d44 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800186e:	2019      	movs	r0, #25
 8001870:	f000 fa84 	bl	8001d7c <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_InitTick+0x9c>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_InitTick+0x9c>)
 800187a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187e:	6613      	str	r3, [r2, #96]	; 0x60
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_InitTick+0x9c>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800188c:	f107 0210 	add.w	r2, r7, #16
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f001 fa84 	bl	8002da4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800189c:	f001 fa6c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80018a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_InitTick+0xa0>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	3b01      	subs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_InitTick+0xa4>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_InitTick+0xa8>)
 80018b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_InitTick+0xa4>)
 80018b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018bc:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_InitTick+0xa4>)
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_InitTick+0xa4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_InitTick+0xa4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <HAL_InitTick+0xa4>)
 80018d2:	f001 ffb5 	bl	8003840 <HAL_TIM_Base_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <HAL_InitTick+0xa4>)
 80018de:	f002 f897 	bl	8003a10 <HAL_TIM_Base_Start_IT>
 80018e2:	4603      	mov	r3, r0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3730      	adds	r7, #48	; 0x30
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	2000033c 	.word	0x2000033c
 80018fc:	40014400 	.word	0x40014400

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001932:	f002 f8dd 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000033c 	.word	0x2000033c

08001940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_kill>:

int _kill(int pid, int sig)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800195a:	f006 fb6f 	bl	800803c <__errno>
 800195e:	4603      	mov	r3, r0
 8001960:	2216      	movs	r2, #22
 8001962:	601a      	str	r2, [r3, #0]
	return -1;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_exit>:

void _exit (int status)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe7 	bl	8001950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001982:	e7fe      	b.n	8001982 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
	}

return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_close>:
	}
	return len;
}

int _close(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
	return -1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	605a      	str	r2, [r3, #4]
	return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_isatty>:

int _isatty(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	return 1;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d207      	bcs.n	8001a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a58:	f006 faf0 	bl	800803c <__errno>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	220c      	movs	r2, #12
 8001a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	e009      	b.n	8001a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <_sbrk+0x64>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <_sbrk+0x64>)
 8001a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20018000 	.word	0x20018000
 8001a88:	00000400 	.word	0x00000400
 8001a8c:	20000388 	.word	0x20000388
 8001a90:	20002478 	.word	0x20002478

08001a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SystemInit+0x20>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <SystemInit+0x20>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001abc:	f7ff ffea 	bl	8001a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ac2:	490d      	ldr	r1, [pc, #52]	; (8001af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac4:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <LoopForever+0xe>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <LoopForever+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f006 faaf 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aea:	f7ff fc37 	bl	800135c <main>

08001aee <LoopForever>:

LoopForever:
    b LoopForever
 8001aee:	e7fe      	b.n	8001aee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001af0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001afc:	0800b0c4 	.word	0x0800b0c4
  ldr r2, =_sbss
 8001b00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b04:	20002478 	.word	0x20002478

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <HAL_Init+0x3c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <HAL_Init+0x3c>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f000 f903 	bl	8001d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b28:	200f      	movs	r0, #15
 8001b2a:	f7ff fe93 	bl	8001854 <HAL_InitTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e001      	b.n	8001b3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3a:	f7ff fde7 	bl	800170c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	2000038c 	.word	0x2000038c

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000038c 	.word	0x2000038c

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db12      	blt.n	8001c64 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	490a      	ldr	r1, [pc, #40]	; (8001c70 <__NVIC_DisableIRQ+0x44>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	3320      	adds	r3, #32
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c58:	f3bf 8f4f 	dsb	sy
}
 8001c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c5e:	f3bf 8f6f 	isb	sy
}
 8001c62:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ff28 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d56:	f7ff ff3d 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	6978      	ldr	r0, [r7, #20]
 8001d62:	f7ff ffb1 	bl	8001cc8 <NVIC_EncodePriority>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff80 	bl	8001c74 <__NVIC_SetPriority>
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff30 	bl	8001bf0 <__NVIC_EnableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff40 	bl	8001c2c <__NVIC_DisableIRQ>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e17f      	b.n	80020c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8171 	beq.w	80020be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d005      	beq.n	8001df4 <HAL_GPIO_Init+0x40>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d130      	bne.n	8001e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	f003 0201 	and.w	r2, r3, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d118      	bne.n	8001e94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	6939      	ldr	r1, [r7, #16]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80ac 	beq.w	80020be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	4b5f      	ldr	r3, [pc, #380]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6a:	4a5e      	ldr	r2, [pc, #376]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6613      	str	r3, [r2, #96]	; 0x60
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <HAL_GPIO_Init+0x330>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f7e:	4a5a      	ldr	r2, [pc, #360]	; (80020e8 <HAL_GPIO_Init+0x334>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x242>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <HAL_GPIO_Init+0x338>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x23e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_GPIO_Init+0x33c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x23a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x340>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x236>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x344>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x232>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_GPIO_Init+0x348>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_GPIO_Init+0x34c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x22a>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00c      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fde:	2307      	movs	r3, #7
 8001fe0:	e00a      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e008      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fea:	2303      	movs	r3, #3
 8001fec:	e004      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e002      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_GPIO_Init+0x244>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	f002 0203 	and.w	r2, r2, #3
 8001ffe:	0092      	lsls	r2, r2, #2
 8002000:	4093      	lsls	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_GPIO_Init+0x334>)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	3302      	adds	r3, #2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002016:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203a:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_GPIO_Init+0x350>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002040:	4b30      	ldr	r3, [pc, #192]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002064:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_GPIO_Init+0x350>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <HAL_GPIO_Init+0x350>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	43db      	mvns	r3, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_GPIO_Init+0x350>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f ae78 	bne.w	8001dc4 <HAL_GPIO_Init+0x10>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	48001000 	.word	0x48001000
 80020fc:	48001400 	.word	0x48001400
 8002100:	48001800 	.word	0x48001800
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
 8002124:	e001      	b.n	800212a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43d9      	mvns	r1, r3
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	400b      	ands	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c6:	d130      	bne.n	800222a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c8:	4b23      	ldr	r3, [pc, #140]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	d038      	beq.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d6:	4b20      	ldr	r3, [pc, #128]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2232      	movs	r2, #50	; 0x32
 80021ec:	fb02 f303 	mul.w	r3, r2, r3
 80021f0:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9b      	lsrs	r3, r3, #18
 80021f8:	3301      	adds	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021fc:	e002      	b.n	8002204 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3b01      	subs	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002210:	d102      	bne.n	8002218 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1f2      	bne.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002224:	d110      	bne.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002236:	d007      	beq.n	8002248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002246:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000
 800225c:	20000000 	.word	0x20000000
 8002260:	431bde83 	.word	0x431bde83

08002264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3ca      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b97      	ldr	r3, [pc, #604]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b94      	ldr	r3, [pc, #592]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80e4 	beq.w	8002460 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <HAL_RCC_OscConfig+0x4a>
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b0c      	cmp	r3, #12
 80022a2:	f040 808b 	bne.w	80023bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 8087 	bne.w	80023bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ae:	4b89      	ldr	r3, [pc, #548]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x62>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e3a2      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	4b82      	ldr	r3, [pc, #520]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <HAL_RCC_OscConfig+0x7c>
 80022d6:	4b7f      	ldr	r3, [pc, #508]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022de:	e005      	b.n	80022ec <HAL_RCC_OscConfig+0x88>
 80022e0:	4b7c      	ldr	r3, [pc, #496]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d223      	bcs.n	8002338 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd87 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e383      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b70      	ldr	r3, [pc, #448]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	496d      	ldr	r1, [pc, #436]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002322:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	4968      	ldr	r1, [pc, #416]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
 8002336:	e025      	b.n	8002384 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4960      	ldr	r1, [pc, #384]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002356:	4b5f      	ldr	r3, [pc, #380]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	495b      	ldr	r1, [pc, #364]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fd47 	bl	8002e08 <RCC_SetFlashLatencyFromMSIRange>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e343      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002384:	f000 fc4a 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	4950      	ldr	r1, [pc, #320]	; (80024d8 <HAL_RCC_OscConfig+0x274>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_RCC_OscConfig+0x278>)
 80023a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a4:	4b4e      	ldr	r3, [pc, #312]	; (80024e0 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fa53 	bl	8001854 <HAL_InitTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d052      	beq.n	800245e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	e327      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d032      	beq.n	800242a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a42      	ldr	r2, [pc, #264]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fbd0 	bl	8001b74 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023d8:	f7ff fbcc 	bl	8001b74 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e310      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f6:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a36      	ldr	r2, [pc, #216]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4931      	ldr	r1, [pc, #196]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	492c      	ldr	r1, [pc, #176]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
 8002428:	e01a      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002436:	f7ff fb9d 	bl	8001b74 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800243e:	f7ff fb99 	bl	8001b74 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e2dd      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002450:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f0      	bne.n	800243e <HAL_RCC_OscConfig+0x1da>
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d074      	beq.n	8002556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x21a>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d10e      	bne.n	8002496 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d10b      	bne.n	8002496 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d064      	beq.n	8002554 <HAL_RCC_OscConfig+0x2f0>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d160      	bne.n	8002554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e2ba      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x24a>
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e026      	b.n	80024fc <HAL_RCC_OscConfig+0x298>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b6:	d115      	bne.n	80024e4 <HAL_RCC_OscConfig+0x280>
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a02      	ldr	r2, [pc, #8]	; (80024d4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e014      	b.n	80024fc <HAL_RCC_OscConfig+0x298>
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800ac90 	.word	0x0800ac90
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004
 80024e4:	4ba0      	ldr	r3, [pc, #640]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a9f      	ldr	r2, [pc, #636]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b9d      	ldr	r3, [pc, #628]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a9c      	ldr	r2, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fb36 	bl	8001b74 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250c:	f7ff fb32 	bl	8001b74 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e276      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800251e:	4b92      	ldr	r3, [pc, #584]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x2a8>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fb22 	bl	8001b74 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff fb1e 	bl	8001b74 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e262      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002546:	4b88      	ldr	r3, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x2d0>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d060      	beq.n	8002624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x310>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d116      	bne.n	80025a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x328>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e23f      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4973      	ldr	r1, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a0:	e040      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d023      	beq.n	80025f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025aa:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff fadd 	bl	8001b74 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fad9 	bl	8001b74 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e21d      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d0:	4b65      	ldr	r3, [pc, #404]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	495f      	ldr	r1, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e018      	b.n	8002624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b5d      	ldr	r3, [pc, #372]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7ff fab9 	bl	8001b74 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff fab5 	bl	8001b74 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1f9      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03c      	beq.n	80026aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800263a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263e:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7ff fa94 	bl	8001b74 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fa90 	bl	8001b74 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1d4      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ef      	beq.n	8002650 <HAL_RCC_OscConfig+0x3ec>
 8002670:	e01b      	b.n	80026aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff fa77 	bl	8001b74 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff fa73 	bl	8001b74 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1b7      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800269e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ef      	bne.n	800268a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a6 	beq.w	8002804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026bc:	4b2a      	ldr	r3, [pc, #168]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6593      	str	r3, [r2, #88]	; 0x58
 80026d4:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <HAL_RCC_OscConfig+0x508>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d118      	bne.n	8002722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f0:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_RCC_OscConfig+0x508>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_RCC_OscConfig+0x508>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fc:	f7ff fa3a 	bl	8001b74 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7ff fa36 	bl	8001b74 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e17a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_RCC_OscConfig+0x508>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d108      	bne.n	800273c <HAL_RCC_OscConfig+0x4d8>
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273a:	e029      	b.n	8002790 <HAL_RCC_OscConfig+0x52c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d115      	bne.n	8002770 <HAL_RCC_OscConfig+0x50c>
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a03      	ldr	r2, [pc, #12]	; (8002768 <HAL_RCC_OscConfig+0x504>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x52c>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
 8002770:	4b9c      	ldr	r3, [pc, #624]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002776:	4a9b      	ldr	r2, [pc, #620]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002780:	4b98      	ldr	r3, [pc, #608]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a97      	ldr	r2, [pc, #604]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002788:	f023 0304 	bic.w	r3, r3, #4
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d016      	beq.n	80027c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff f9ec 	bl	8001b74 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff f9e8 	bl	8001b74 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e12a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b8b      	ldr	r3, [pc, #556]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ed      	beq.n	80027a0 <HAL_RCC_OscConfig+0x53c>
 80027c4:	e015      	b.n	80027f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff f9d5 	bl	8001b74 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff f9d1 	bl	8001b74 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e113      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e4:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ed      	bne.n	80027ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b7a      	ldr	r3, [pc, #488]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a79      	ldr	r2, [pc, #484]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80fe 	beq.w	8002a0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002812:	2b02      	cmp	r3, #2
 8002814:	f040 80d0 	bne.w	80029b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002818:	4b72      	ldr	r3, [pc, #456]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d130      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	3b01      	subs	r3, #1
 8002838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d127      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d11f      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002858:	2a07      	cmp	r2, #7
 800285a:	bf14      	ite	ne
 800285c:	2201      	movne	r2, #1
 800285e:	2200      	moveq	r2, #0
 8002860:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002862:	4293      	cmp	r3, r2
 8002864:	d113      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	3b01      	subs	r3, #1
 8002874:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d109      	bne.n	800288e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d06e      	beq.n	800296c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d069      	beq.n	8002968 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0ad      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b0:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4b      	ldr	r2, [pc, #300]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028bc:	f7ff f95a 	bl	8001b74 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff f956 	bl	8001b74 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e09a      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d6:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e2:	4b40      	ldr	r3, [pc, #256]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_RCC_OscConfig+0x784>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028fc:	0212      	lsls	r2, r2, #8
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002904:	0852      	lsrs	r2, r2, #1
 8002906:	3a01      	subs	r2, #1
 8002908:	0552      	lsls	r2, r2, #21
 800290a:	4311      	orrs	r1, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002910:	0852      	lsrs	r2, r2, #1
 8002912:	3a01      	subs	r2, #1
 8002914:	0652      	lsls	r2, r2, #25
 8002916:	4311      	orrs	r1, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800291c:	0912      	lsrs	r2, r2, #4
 800291e:	0452      	lsls	r2, r2, #17
 8002920:	430a      	orrs	r2, r1
 8002922:	4930      	ldr	r1, [pc, #192]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002940:	f7ff f918 	bl	8001b74 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff f914 	bl	8001b74 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e058      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002966:	e050      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d148      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002990:	f7ff f8f0 	bl	8001b74 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff f8ec 	bl	8001b74 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e030      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x734>
 80029b6:	e028      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d023      	beq.n	8002a06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a08      	ldr	r2, [pc, #32]	; (80029e4 <HAL_RCC_OscConfig+0x780>)
 80029c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7ff f8d3 	bl	8001b74 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	e00c      	b.n	80029ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d2:	f7ff f8cf 	bl	8001b74 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d905      	bls.n	80029ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e013      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
 80029e4:	40021000 	.word	0x40021000
 80029e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ec      	bne.n	80029d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4905      	ldr	r1, [pc, #20]	; (8002a14 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x7b4>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	60cb      	str	r3, [r1, #12]
 8002a04:	e001      	b.n	8002a0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	feeefffc 	.word	0xfeeefffc

08002a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0e7      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b75      	ldr	r3, [pc, #468]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b72      	ldr	r3, [pc, #456]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4970      	ldr	r1, [pc, #448]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b6e      	ldr	r3, [pc, #440]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cf      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d908      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a7c:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4960      	ldr	r1, [pc, #384]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d04c      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d121      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e0a6      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aba:	4b54      	ldr	r3, [pc, #336]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e09a      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e08e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e086      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b46      	ldr	r3, [pc, #280]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4943      	ldr	r1, [pc, #268]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7ff f836 	bl	8001b74 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7ff f832 	bl	8001b74 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e06e      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d208      	bcs.n	8002b62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	492b      	ldr	r1, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b62:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d210      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4923      	ldr	r1, [pc, #140]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <HAL_RCC_ClockConfig+0x1ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e036      	b.n	8002c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4918      	ldr	r1, [pc, #96]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4910      	ldr	r1, [pc, #64]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd0:	f000 f824 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1f4>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1fc>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fe2d 	bl	8001854 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	0800ac90 	.word	0x0800ac90
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c34:	4b3b      	ldr	r3, [pc, #236]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d11e      	bne.n	8002c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c78:	4a2b      	ldr	r2, [pc, #172]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c94:	4b25      	ldr	r3, [pc, #148]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e004      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b0c      	cmp	r3, #12
 8002ca8:	d134      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002caa:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d003      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8002cc0:	e005      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc4:	617b      	str	r3, [r7, #20]
      break;
 8002cc6:	e005      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	617b      	str	r3, [r7, #20]
      break;
 8002ccc:	e002      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	617b      	str	r3, [r7, #20]
      break;
 8002cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	3301      	adds	r3, #1
 8002ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0e5b      	lsrs	r3, r3, #25
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	3301      	adds	r3, #1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d14:	69bb      	ldr	r3, [r7, #24]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	0800aca8 	.word	0x0800aca8
 8002d2c:	00f42400 	.word	0x00f42400
 8002d30:	007a1200 	.word	0x007a1200

08002d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d50:	f7ff fff0 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	0800aca0 	.word	0x0800aca0

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d7c:	f7ff ffda 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800aca0 	.word	0x0800aca0

08002da4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	220f      	movs	r2, #15
 8002db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_GetClockConfig+0x5c>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0203 	and.w	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RCC_GetClockConfig+0x5c>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_RCC_GetClockConfig+0x5c>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_RCC_GetClockConfig+0x60>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0207 	and.w	r2, r3, #7
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40022000 	.word	0x40022000

08002e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff f9bc 	bl	800219c <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
 8002e26:	e014      	b.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	; 0x58
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e40:	f7ff f9ac 	bl	800219c <HAL_PWREx_GetVoltageRange>
 8002e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e58:	d10b      	bne.n	8002e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b80      	cmp	r3, #128	; 0x80
 8002e5e:	d919      	bls.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2ba0      	cmp	r3, #160	; 0xa0
 8002e64:	d902      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e66:	2302      	movs	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	e013      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	e010      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d902      	bls.n	8002e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e78:	2303      	movs	r3, #3
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	e00a      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	d102      	bne.n	8002e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e84:	2302      	movs	r3, #2
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	e004      	b.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d101      	bne.n	8002e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e90:	2301      	movs	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f023 0207 	bic.w	r2, r3, #7
 8002e9c:	4909      	ldr	r1, [pc, #36]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ea4:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d001      	beq.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d041      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eec:	d02a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ef2:	d824      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef8:	d008      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002efe:	d81e      	bhi.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f08:	d010      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f0a:	e018      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f0c:	4b86      	ldr	r3, [pc, #536]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a85      	ldr	r2, [pc, #532]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f18:	e015      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fabb 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002f26:	4603      	mov	r3, r0
 8002f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f2a:	e00c      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3320      	adds	r3, #32
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fba6 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f3c:	e003      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	74fb      	strb	r3, [r7, #19]
      break;
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f4c:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5a:	4973      	ldr	r1, [pc, #460]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f62:	e001      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d041      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f7c:	d02a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f82:	d824      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f88:	d008      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f8e:	d81e      	bhi.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f98:	d010      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f9a:	e018      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f9c:	4b62      	ldr	r3, [pc, #392]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a61      	ldr	r2, [pc, #388]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fa73 	bl	800349c <RCCEx_PLLSAI1_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fba:	e00c      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3320      	adds	r3, #32
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fb5e 	bl	8003684 <RCCEx_PLLSAI2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fcc:	e003      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fdc:	4b52      	ldr	r3, [pc, #328]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fea:	494f      	ldr	r1, [pc, #316]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002ff2:	e001      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a0 	beq.w	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	4a40      	ldr	r2, [pc, #256]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302a:	6593      	str	r3, [r2, #88]	; 0x58
 800302c:	4b3e      	ldr	r3, [pc, #248]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003038:	2301      	movs	r3, #1
 800303a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a3a      	ldr	r2, [pc, #232]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003048:	f7fe fd94 	bl	8001b74 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7fe fd90 	bl	8001b74 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d902      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	74fb      	strb	r3, [r7, #19]
        break;
 8003062:	e005      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003064:	4b31      	ldr	r3, [pc, #196]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ef      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d15c      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	429a      	cmp	r2, r3
 8003092:	d019      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fd4f 	bl	8001b74 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	e00b      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fd4b 	bl	8001b74 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d902      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74fb      	strb	r3, [r7, #19]
            break;
 80030f0:	e006      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ec      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800311e:	e009      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003120:	7cfb      	ldrb	r3, [r7, #19]
 8003122:	74bb      	strb	r3, [r7, #18]
 8003124:	e006      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
 8003132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003134:	7c7b      	ldrb	r3, [r7, #17]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d105      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b9e      	ldr	r3, [pc, #632]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a9d      	ldr	r2, [pc, #628]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003152:	4b98      	ldr	r3, [pc, #608]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003158:	f023 0203 	bic.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	4994      	ldr	r1, [pc, #592]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003174:	4b8f      	ldr	r3, [pc, #572]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	f023 020c 	bic.w	r2, r3, #12
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	498c      	ldr	r1, [pc, #560]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003196:	4b87      	ldr	r3, [pc, #540]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4983      	ldr	r1, [pc, #524]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031b8:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	497b      	ldr	r1, [pc, #492]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e8:	4972      	ldr	r1, [pc, #456]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031fc:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	496a      	ldr	r1, [pc, #424]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	4961      	ldr	r1, [pc, #388]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003240:	4b5c      	ldr	r3, [pc, #368]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	4959      	ldr	r1, [pc, #356]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003262:	4b54      	ldr	r3, [pc, #336]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003270:	4950      	ldr	r1, [pc, #320]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	4948      	ldr	r1, [pc, #288]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	493f      	ldr	r1, [pc, #252]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032c8:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d6:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e6:	d106      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]
 80032f4:	e011      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fe:	d10c      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	2101      	movs	r1, #1
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f8c8 	bl	800349c <RCCEx_PLLSAI1_Config>
 800330c:	4603      	mov	r3, r0
 800330e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	491f      	ldr	r1, [pc, #124]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003344:	d106      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003350:	60d3      	str	r3, [r2, #12]
 8003352:	e011      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335c:	d10c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3304      	adds	r3, #4
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f899 	bl	800349c <RCCEx_PLLSAI1_Config>
 800336a:	4603      	mov	r3, r0
 800336c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02b      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a2:	d109      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a02      	ldr	r2, [pc, #8]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ae:	60d3      	str	r3, [r2, #12]
 80033b0:	e014      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 f867 	bl	800349c <RCCEx_PLLSAI1_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033d2:	7cfb      	ldrb	r3, [r7, #19]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033d8:	7cfb      	ldrb	r3, [r7, #19]
 80033da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d02f      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f6:	4928      	ldr	r1, [pc, #160]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003406:	d10d      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f844 	bl	800349c <RCCEx_PLLSAI1_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003418:	7cfb      	ldrb	r3, [r7, #19]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d014      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	74bb      	strb	r3, [r7, #18]
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342c:	d10c      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3320      	adds	r3, #32
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f925 	bl	8003684 <RCCEx_PLLSAI2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003462:	490d      	ldr	r1, [pc, #52]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003486:	4904      	ldr	r1, [pc, #16]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800348e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000

0800349c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034aa:	4b75      	ldr	r3, [pc, #468]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d018      	beq.n	80034e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034b6:	4b72      	ldr	r3, [pc, #456]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0203 	and.w	r2, r3, #3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d10d      	bne.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ce:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
       ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d047      	beq.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	e044      	b.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d018      	beq.n	8003522 <RCCEx_PLLSAI1_Config+0x86>
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d825      	bhi.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d002      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0x62>
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d009      	beq.n	8003510 <RCCEx_PLLSAI1_Config+0x74>
 80034fc:	e020      	b.n	8003540 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fe:	4b60      	ldr	r3, [pc, #384]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11d      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350e:	e01a      	b.n	8003546 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003510:	4b5b      	ldr	r3, [pc, #364]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d116      	bne.n	800354a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003520:	e013      	b.n	800354a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10f      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353e:	e006      	b.n	800354e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	e004      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800354e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10d      	bne.n	8003572 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003556:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6819      	ldr	r1, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	430b      	orrs	r3, r1
 800356c:	4944      	ldr	r1, [pc, #272]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d17d      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003578:	4b41      	ldr	r3, [pc, #260]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a40      	ldr	r2, [pc, #256]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003584:	f7fe faf6 	bl	8001b74 <HAL_GetTick>
 8003588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800358a:	e009      	b.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800358c:	f7fe faf2 	bl	8001b74 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d902      	bls.n	80035a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	73fb      	strb	r3, [r7, #15]
        break;
 800359e:	e005      	b.n	80035ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a0:	4b37      	ldr	r3, [pc, #220]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1ef      	bne.n	800358c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d160      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d111      	bne.n	80035dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6892      	ldr	r2, [r2, #8]
 80035c8:	0211      	lsls	r1, r2, #8
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68d2      	ldr	r2, [r2, #12]
 80035ce:	0912      	lsrs	r2, r2, #4
 80035d0:	0452      	lsls	r2, r2, #17
 80035d2:	430a      	orrs	r2, r1
 80035d4:	492a      	ldr	r1, [pc, #168]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	610b      	str	r3, [r1, #16]
 80035da:	e027      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d112      	bne.n	8003608 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	0211      	lsls	r1, r2, #8
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6912      	ldr	r2, [r2, #16]
 80035f8:	0852      	lsrs	r2, r2, #1
 80035fa:	3a01      	subs	r2, #1
 80035fc:	0552      	lsls	r2, r2, #21
 80035fe:	430a      	orrs	r2, r1
 8003600:	491f      	ldr	r1, [pc, #124]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	610b      	str	r3, [r1, #16]
 8003606:	e011      	b.n	800362c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6892      	ldr	r2, [r2, #8]
 8003618:	0211      	lsls	r1, r2, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6952      	ldr	r2, [r2, #20]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	3a01      	subs	r2, #1
 8003622:	0652      	lsls	r2, r2, #25
 8003624:	430a      	orrs	r2, r1
 8003626:	4916      	ldr	r1, [pc, #88]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	4313      	orrs	r3, r2
 800362a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fe fa9c 	bl	8001b74 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fe fa98 	bl	8001b74 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
          break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000

08003684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003692:	4b6a      	ldr	r3, [pc, #424]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d018      	beq.n	80036d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800369e:	4b67      	ldr	r3, [pc, #412]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
       ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
       ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d047      	beq.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e044      	b.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d018      	beq.n	800370a <RCCEx_PLLSAI2_Config+0x86>
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d825      	bhi.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d002      	beq.n	80036e6 <RCCEx_PLLSAI2_Config+0x62>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d009      	beq.n	80036f8 <RCCEx_PLLSAI2_Config+0x74>
 80036e4:	e020      	b.n	8003728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d11d      	bne.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f6:	e01a      	b.n	800372e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d116      	bne.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003708:	e013      	b.n	8003732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800370a:	4b4c      	ldr	r3, [pc, #304]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d109      	bne.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003726:	e006      	b.n	8003736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      break;
 800372c:	e004      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003736:	bf00      	nop
    }

    if(status == HAL_OK)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373e:	4b3f      	ldr	r3, [pc, #252]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	430b      	orrs	r3, r1
 8003754:	4939      	ldr	r1, [pc, #228]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d167      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a35      	ldr	r2, [pc, #212]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800376c:	f7fe fa02 	bl	8001b74 <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003774:	f7fe f9fe 	bl	8001b74 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
        break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ef      	bne.n	8003774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d14a      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	0211      	lsls	r1, r2, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68d2      	ldr	r2, [r2, #12]
 80037b6:	0912      	lsrs	r2, r2, #4
 80037b8:	0452      	lsls	r2, r2, #17
 80037ba:	430a      	orrs	r2, r1
 80037bc:	491f      	ldr	r1, [pc, #124]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	614b      	str	r3, [r1, #20]
 80037c2:	e011      	b.n	80037e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037c4:	4b1d      	ldr	r3, [pc, #116]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	0211      	lsls	r1, r2, #8
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6912      	ldr	r2, [r2, #16]
 80037da:	0852      	lsrs	r2, r2, #1
 80037dc:	3a01      	subs	r2, #1
 80037de:	0652      	lsls	r2, r2, #25
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4916      	ldr	r1, [pc, #88]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe f9be 	bl	8001b74 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037fa:	e009      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037fc:	f7fe f9ba 	bl	8001b74 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d902      	bls.n	8003810 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	73fb      	strb	r3, [r7, #15]
          break;
 800380e:	e005      	b.n	800381c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ef      	beq.n	80037fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4904      	ldr	r1, [pc, #16]	; (800383c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e049      	b.n	80038e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd ff78 	bl	800175c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 fa7e 	bl	8003d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e047      	b.n	8003998 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <HAL_TIM_Base_Start+0xb4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d018      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <HAL_TIM_Base_Start+0xb8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_TIM_Base_Start+0xbc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_TIM_Base_Start+0xc0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_TIM_Base_Start+0xc4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_TIM_Base_Start+0x66>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <HAL_TIM_Base_Start+0xc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d115      	bne.n	8003982 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_TIM_Base_Start+0xcc>)
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b06      	cmp	r3, #6
 8003966:	d015      	beq.n	8003994 <HAL_TIM_Base_Start+0xa4>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d011      	beq.n	8003994 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	e008      	b.n	8003994 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 0201 	orr.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e000      	b.n	8003996 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40000800 	.word	0x40000800
 80039b0:	40000c00 	.word	0x40000c00
 80039b4:	40013400 	.word	0x40013400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	00010007 	.word	0x00010007

080039c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10f      	bne.n	80039f8 <HAL_TIM_Base_Stop+0x38>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1a      	ldr	r2, [r3, #32]
 80039de:	f240 4344 	movw	r3, #1092	; 0x444
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_TIM_Base_Stop+0x38>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d001      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e04f      	b.n	8003ac8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a23      	ldr	r2, [pc, #140]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01d      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d018      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1e      	ldr	r2, [pc, #120]	; (8003adc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00e      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1c      	ldr	r2, [pc, #112]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d009      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1b      	ldr	r2, [pc, #108]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d004      	beq.n	8003a86 <HAL_TIM_Base_Start_IT+0x76>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d115      	bne.n	8003ab2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_TIM_Base_Start_IT+0xdc>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b06      	cmp	r3, #6
 8003a96:	d015      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0xb4>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a9e:	d011      	beq.n	8003ac4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	e008      	b.n	8003ac4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e000      	b.n	8003ac6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800
 8003ae0:	40000c00 	.word	0x40000c00
 8003ae4:	40013400 	.word	0x40013400
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	00010007 	.word	0x00010007

08003af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d122      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d11b      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0202 	mvn.w	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f905 	bl	8003d42 <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8f7 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f908 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d122      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0204 	mvn.w	r2, #4
 8003b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8db 	bl	8003d42 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8cd 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8de 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0208 	mvn.w	r2, #8
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8b1 	bl	8003d42 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8a3 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f8b4 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f887 	bl	8003d42 <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f879 	bl	8003d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f88a 	bl	8003d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0201 	mvn.w	r2, #1
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fd34 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f99c 	bl	8003fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d10e      	bne.n	8003cce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b80      	cmp	r3, #128	; 0x80
 8003cbc:	d107      	bne.n	8003cce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f98f 	bl	8003fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d10e      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d107      	bne.n	8003cfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f838 	bl	8003d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d10e      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d107      	bne.n	8003d26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0220 	mvn.w	r2, #32
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f94f 	bl	8003fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a40      	ldr	r2, [pc, #256]	; (8003e94 <TIM_Base_SetConfig+0x114>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9e:	d00f      	beq.n	8003dc0 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3d      	ldr	r2, [pc, #244]	; (8003e98 <TIM_Base_SetConfig+0x118>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3c      	ldr	r2, [pc, #240]	; (8003e9c <TIM_Base_SetConfig+0x11c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <TIM_Base_SetConfig+0x120>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3a      	ldr	r2, [pc, #232]	; (8003ea4 <TIM_Base_SetConfig+0x124>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <TIM_Base_SetConfig+0x114>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01f      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <TIM_Base_SetConfig+0x118>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <TIM_Base_SetConfig+0x11c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	; (8003ea0 <TIM_Base_SetConfig+0x120>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <TIM_Base_SetConfig+0x124>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a28      	ldr	r2, [pc, #160]	; (8003ea8 <TIM_Base_SetConfig+0x128>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <TIM_Base_SetConfig+0x12c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <TIM_Base_SetConfig+0x130>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <TIM_Base_SetConfig+0x114>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <TIM_Base_SetConfig+0x124>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_Base_SetConfig+0xf8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a11      	ldr	r2, [pc, #68]	; (8003ea8 <TIM_Base_SetConfig+0x128>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_Base_SetConfig+0xf8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	; (8003eac <TIM_Base_SetConfig+0x12c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_Base_SetConfig+0xf8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <TIM_Base_SetConfig+0x130>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d103      	bne.n	8003e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	615a      	str	r2, [r3, #20]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40013400 	.word	0x40013400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e068      	b.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01d      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d018      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10c      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40013400 	.word	0x40013400
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000

08003fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e040      	b.n	8004094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd fbba 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8c0 	bl	80041c4 <UART_SetConfig>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fb6c 	bl	8004734 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fbf3 	bl	8004878 <UART_CheckIdleState>
 8004092:	4603      	mov	r3, r0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	4613      	mov	r3, r2
 80040aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	f040 8082 	bne.w	80041ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_UART_Transmit+0x26>
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e07a      	b.n	80041bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_UART_Transmit+0x38>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e073      	b.n	80041bc <HAL_UART_Transmit+0x120>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ea:	f7fd fd43 	bl	8001b74 <HAL_GetTick>
 80040ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d108      	bne.n	800411c <HAL_UART_Transmit+0x80>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	e003      	b.n	8004124 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800412c:	e02d      	b.n	800418a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	2180      	movs	r1, #128	; 0x80
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 fbe6 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e039      	b.n	80041bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800415a:	b292      	uxth	r2, r2
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	3302      	adds	r3, #2
 8004162:	61bb      	str	r3, [r7, #24]
 8004164:	e008      	b.n	8004178 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b292      	uxth	r2, r2
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1cb      	bne.n	800412e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	2140      	movs	r1, #64	; 0x40
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbb2 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e005      	b.n	80041bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c8:	b08a      	sub	sp, #40	; 0x28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4ba4      	ldr	r3, [pc, #656]	; (8004484 <UART_SetConfig+0x2c0>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a99      	ldr	r2, [pc, #612]	; (8004488 <UART_SetConfig+0x2c4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d004      	beq.n	8004230 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	4313      	orrs	r3, r2
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a90      	ldr	r2, [pc, #576]	; (800448c <UART_SetConfig+0x2c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d126      	bne.n	800429c <UART_SetConfig+0xd8>
 800424e:	4b90      	ldr	r3, [pc, #576]	; (8004490 <UART_SetConfig+0x2cc>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	2b03      	cmp	r3, #3
 800425a:	d81b      	bhi.n	8004294 <UART_SetConfig+0xd0>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0xa0>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004275 	.word	0x08004275
 8004268:	08004285 	.word	0x08004285
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428d 	.word	0x0800428d
 8004274:	2301      	movs	r3, #1
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e116      	b.n	80044aa <UART_SetConfig+0x2e6>
 800427c:	2302      	movs	r3, #2
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e112      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e10e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e10a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e106      	b.n	80044aa <UART_SetConfig+0x2e6>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7c      	ldr	r2, [pc, #496]	; (8004494 <UART_SetConfig+0x2d0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d138      	bne.n	8004318 <UART_SetConfig+0x154>
 80042a6:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <UART_SetConfig+0x2cc>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d82d      	bhi.n	8004310 <UART_SetConfig+0x14c>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0xf8>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004311 	.word	0x08004311
 80042c4:	08004311 	.word	0x08004311
 80042c8:	08004311 	.word	0x08004311
 80042cc:	08004301 	.word	0x08004301
 80042d0:	08004311 	.word	0x08004311
 80042d4:	08004311 	.word	0x08004311
 80042d8:	08004311 	.word	0x08004311
 80042dc:	080042f9 	.word	0x080042f9
 80042e0:	08004311 	.word	0x08004311
 80042e4:	08004311 	.word	0x08004311
 80042e8:	08004311 	.word	0x08004311
 80042ec:	08004309 	.word	0x08004309
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042f6:	e0d8      	b.n	80044aa <UART_SetConfig+0x2e6>
 80042f8:	2302      	movs	r3, #2
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042fe:	e0d4      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004300:	2304      	movs	r3, #4
 8004302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004306:	e0d0      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004308:	2308      	movs	r3, #8
 800430a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430e:	e0cc      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004310:	2310      	movs	r3, #16
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004316:	e0c8      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a5e      	ldr	r2, [pc, #376]	; (8004498 <UART_SetConfig+0x2d4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d125      	bne.n	800436e <UART_SetConfig+0x1aa>
 8004322:	4b5b      	ldr	r3, [pc, #364]	; (8004490 <UART_SetConfig+0x2cc>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800432c:	2b30      	cmp	r3, #48	; 0x30
 800432e:	d016      	beq.n	800435e <UART_SetConfig+0x19a>
 8004330:	2b30      	cmp	r3, #48	; 0x30
 8004332:	d818      	bhi.n	8004366 <UART_SetConfig+0x1a2>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d00a      	beq.n	800434e <UART_SetConfig+0x18a>
 8004338:	2b20      	cmp	r3, #32
 800433a:	d814      	bhi.n	8004366 <UART_SetConfig+0x1a2>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <UART_SetConfig+0x182>
 8004340:	2b10      	cmp	r3, #16
 8004342:	d008      	beq.n	8004356 <UART_SetConfig+0x192>
 8004344:	e00f      	b.n	8004366 <UART_SetConfig+0x1a2>
 8004346:	2300      	movs	r3, #0
 8004348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434c:	e0ad      	b.n	80044aa <UART_SetConfig+0x2e6>
 800434e:	2302      	movs	r3, #2
 8004350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004354:	e0a9      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004356:	2304      	movs	r3, #4
 8004358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435c:	e0a5      	b.n	80044aa <UART_SetConfig+0x2e6>
 800435e:	2308      	movs	r3, #8
 8004360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004364:	e0a1      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004366:	2310      	movs	r3, #16
 8004368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436c:	e09d      	b.n	80044aa <UART_SetConfig+0x2e6>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a4a      	ldr	r2, [pc, #296]	; (800449c <UART_SetConfig+0x2d8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d125      	bne.n	80043c4 <UART_SetConfig+0x200>
 8004378:	4b45      	ldr	r3, [pc, #276]	; (8004490 <UART_SetConfig+0x2cc>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004382:	2bc0      	cmp	r3, #192	; 0xc0
 8004384:	d016      	beq.n	80043b4 <UART_SetConfig+0x1f0>
 8004386:	2bc0      	cmp	r3, #192	; 0xc0
 8004388:	d818      	bhi.n	80043bc <UART_SetConfig+0x1f8>
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d00a      	beq.n	80043a4 <UART_SetConfig+0x1e0>
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	d814      	bhi.n	80043bc <UART_SetConfig+0x1f8>
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <UART_SetConfig+0x1d8>
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d008      	beq.n	80043ac <UART_SetConfig+0x1e8>
 800439a:	e00f      	b.n	80043bc <UART_SetConfig+0x1f8>
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e082      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e07e      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e07a      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e076      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e072      	b.n	80044aa <UART_SetConfig+0x2e6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <UART_SetConfig+0x2dc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d12a      	bne.n	8004424 <UART_SetConfig+0x260>
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <UART_SetConfig+0x2cc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043dc:	d01a      	beq.n	8004414 <UART_SetConfig+0x250>
 80043de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e2:	d81b      	bhi.n	800441c <UART_SetConfig+0x258>
 80043e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e8:	d00c      	beq.n	8004404 <UART_SetConfig+0x240>
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ee:	d815      	bhi.n	800441c <UART_SetConfig+0x258>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <UART_SetConfig+0x238>
 80043f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f8:	d008      	beq.n	800440c <UART_SetConfig+0x248>
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x258>
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e052      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e04e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e04a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e046      	b.n	80044aa <UART_SetConfig+0x2e6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e042      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <UART_SetConfig+0x2c4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d13a      	bne.n	80044a4 <UART_SetConfig+0x2e0>
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <UART_SetConfig+0x2cc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d01a      	beq.n	8004474 <UART_SetConfig+0x2b0>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0x2b8>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00c      	beq.n	8004464 <UART_SetConfig+0x2a0>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d815      	bhi.n	800447c <UART_SetConfig+0x2b8>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x298>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d008      	beq.n	800446c <UART_SetConfig+0x2a8>
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x2b8>
 800445c:	2300      	movs	r3, #0
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e022      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004464:	2302      	movs	r3, #2
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e01e      	b.n	80044aa <UART_SetConfig+0x2e6>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e01a      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e016      	b.n	80044aa <UART_SetConfig+0x2e6>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e012      	b.n	80044aa <UART_SetConfig+0x2e6>
 8004484:	efff69f3 	.word	0xefff69f3
 8004488:	40008000 	.word	0x40008000
 800448c:	40013800 	.word	0x40013800
 8004490:	40021000 	.word	0x40021000
 8004494:	40004400 	.word	0x40004400
 8004498:	40004800 	.word	0x40004800
 800449c:	40004c00 	.word	0x40004c00
 80044a0:	40005000 	.word	0x40005000
 80044a4:	2310      	movs	r3, #16
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a9f      	ldr	r2, [pc, #636]	; (800472c <UART_SetConfig+0x568>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d17a      	bne.n	80045aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d824      	bhi.n	8004506 <UART_SetConfig+0x342>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x300>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	08004507 	.word	0x08004507
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004507 	.word	0x08004507
 80044d4:	080044f7 	.word	0x080044f7
 80044d8:	08004507 	.word	0x08004507
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004507 	.word	0x08004507
 80044e4:	080044ff 	.word	0x080044ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fe fc30 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80044ec:	61f8      	str	r0, [r7, #28]
        break;
 80044ee:	e010      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f0:	4b8f      	ldr	r3, [pc, #572]	; (8004730 <UART_SetConfig+0x56c>)
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e00d      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f6:	f7fe fb91 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80044fa:	61f8      	str	r0, [r7, #28]
        break;
 80044fc:	e009      	b.n	8004512 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	61fb      	str	r3, [r7, #28]
        break;
 8004504:	e005      	b.n	8004512 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004510:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80fb 	beq.w	8004710 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	429a      	cmp	r2, r3
 8004528:	d305      	bcc.n	8004536 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	429a      	cmp	r2, r3
 8004534:	d903      	bls.n	800453e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800453c:	e0e8      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2200      	movs	r2, #0
 8004542:	461c      	mov	r4, r3
 8004544:	4615      	mov	r5, r2
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	022b      	lsls	r3, r5, #8
 8004550:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004554:	0222      	lsls	r2, r4, #8
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6849      	ldr	r1, [r1, #4]
 800455a:	0849      	lsrs	r1, r1, #1
 800455c:	2000      	movs	r0, #0
 800455e:	4688      	mov	r8, r1
 8004560:	4681      	mov	r9, r0
 8004562:	eb12 0a08 	adds.w	sl, r2, r8
 8004566:	eb43 0b09 	adc.w	fp, r3, r9
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004578:	4650      	mov	r0, sl
 800457a:	4659      	mov	r1, fp
 800457c:	f7fc fb14 	bl	8000ba8 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458e:	d308      	bcc.n	80045a2 <UART_SetConfig+0x3de>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d204      	bcs.n	80045a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e0b6      	b.n	8004710 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045a8:	e0b2      	b.n	8004710 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b2:	d15e      	bne.n	8004672 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80045b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d828      	bhi.n	800460e <UART_SetConfig+0x44a>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x400>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045e9 	.word	0x080045e9
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f9 	.word	0x080045f9
 80045d0:	0800460f 	.word	0x0800460f
 80045d4:	080045ff 	.word	0x080045ff
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
 80045e4:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e8:	f7fe fbb0 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80045ec:	61f8      	str	r0, [r7, #28]
        break;
 80045ee:	e014      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7fe fbc2 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e010      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b4d      	ldr	r3, [pc, #308]	; (8004730 <UART_SetConfig+0x56c>)
 80045fa:	61fb      	str	r3, [r7, #28]
        break;
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7fe fb0d 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8004602:	61f8      	str	r0, [r7, #28]
        break;
 8004604:	e009      	b.n	800461a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e005      	b.n	800461a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d077      	beq.n	8004710 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005a      	lsls	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	441a      	add	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d916      	bls.n	800466a <UART_SetConfig+0x4a6>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d212      	bcs.n	800466a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f023 030f 	bic.w	r3, r3, #15
 800464c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	b29a      	uxth	r2, r3
 800465a:	8afb      	ldrh	r3, [r7, #22]
 800465c:	4313      	orrs	r3, r2
 800465e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	8afa      	ldrh	r2, [r7, #22]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e052      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004670:	e04e      	b.n	8004710 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004676:	2b08      	cmp	r3, #8
 8004678:	d827      	bhi.n	80046ca <UART_SetConfig+0x506>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x4bc>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe fb52 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 80046a8:	61f8      	str	r0, [r7, #28]
        break;
 80046aa:	e014      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7fe fb64 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
        break;
 80046b2:	e010      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <UART_SetConfig+0x56c>)
 80046b6:	61fb      	str	r3, [r7, #28]
        break;
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7fe faaf 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 80046be:	61f8      	str	r0, [r7, #28]
        break;
 80046c0:	e009      	b.n	80046d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e005      	b.n	80046d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046d4:	bf00      	nop
    }

    if (pclk != 0U)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085a      	lsrs	r2, r3, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d909      	bls.n	800470a <UART_SetConfig+0x546>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d205      	bcs.n	800470a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e002      	b.n	8004710 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800471c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	; 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	40008000 	.word	0x40008000
 8004730:	00f42400 	.word	0x00f42400

08004734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01a      	beq.n	800484a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004832:	d10a      	bne.n	800484a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  }
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004888:	f7fd f974 	bl	8001b74 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d10e      	bne.n	80048ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800489c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f82d 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e023      	b.n	8004902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d10e      	bne.n	80048e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f817 	bl	800490a <UART_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e00d      	b.n	8004902 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b09c      	sub	sp, #112	; 0x70
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	603b      	str	r3, [r7, #0]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800491a:	e0a5      	b.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	f000 80a1 	beq.w	8004a68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004926:	f7fd f925 	bl	8001b74 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004932:	429a      	cmp	r2, r3
 8004934:	d302      	bcc.n	800493c <UART_WaitOnFlagUntilTimeout+0x32>
 8004936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004938:	2b00      	cmp	r3, #0
 800493a:	d13e      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004950:	667b      	str	r3, [r7, #100]	; 0x64
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004960:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e6      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3308      	adds	r3, #8
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	663b      	str	r3, [r7, #96]	; 0x60
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800498e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004990:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004994:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800499c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e5      	bne.n	800496e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e067      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d04f      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d6:	d147      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e6      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	613b      	str	r3, [r7, #16]
   return(result);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f023 0301 	bic.w	r3, r3, #1
 8004a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a34:	623a      	str	r2, [r7, #32]
 8004a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	69f9      	ldr	r1, [r7, #28]
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e5      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e010      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f43f af4a 	beq.w	800491c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3770      	adds	r7, #112	; 0x70
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <__NVIC_SetPriority>:
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db0a      	blt.n	8004abe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	490c      	ldr	r1, [pc, #48]	; (8004ae0 <__NVIC_SetPriority+0x4c>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004abc:	e00a      	b.n	8004ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <__NVIC_SetPriority+0x50>)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3b04      	subs	r3, #4
 8004acc:	0112      	lsls	r2, r2, #4
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	761a      	strb	r2, [r3, #24]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000e100 	.word	0xe000e100
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <SysTick_Handler+0x1c>)
 8004aee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004af0:	f002 f93e 	bl	8006d70 <xTaskGetSchedulerState>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004afa:	f003 f825 	bl	8007b48 <xPortSysTickHandler>
  }
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	f06f 0004 	mvn.w	r0, #4
 8004b12:	f7ff ffbf 	bl	8004a94 <__NVIC_SetPriority>
#endif
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b22:	f3ef 8305 	mrs	r3, IPSR
 8004b26:	603b      	str	r3, [r7, #0]
  return(result);
 8004b28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b2e:	f06f 0305 	mvn.w	r3, #5
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e00c      	b.n	8004b50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <osKernelInitialize+0x44>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <osKernelInitialize+0x44>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	e002      	b.n	8004b50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000390 	.word	0x20000390

08004b64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b76:	f06f 0305 	mvn.w	r3, #5
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	e010      	b.n	8004ba0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <osKernelStart+0x48>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d109      	bne.n	8004b9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b86:	f7ff ffbf 	bl	8004b08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <osKernelStart+0x48>)
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b90:	f001 fca6 	bl	80064e0 <vTaskStartScheduler>
      stat = osOK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	607b      	str	r3, [r7, #4]
 8004b98:	e002      	b.n	8004ba0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ba0:	687b      	ldr	r3, [r7, #4]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000390 	.word	0x20000390

08004bb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af04      	add	r7, sp, #16
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc0:	f3ef 8305 	mrs	r3, IPSR
 8004bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d17e      	bne.n	8004cca <osThreadNew+0x11a>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d07b      	beq.n	8004cca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bd6:	2318      	movs	r3, #24
 8004bd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d045      	beq.n	8004c76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <osThreadNew+0x48>
        name = attr->name;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <osThreadNew+0x6e>
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	2b38      	cmp	r3, #56	; 0x38
 8004c10:	d805      	bhi.n	8004c1e <osThreadNew+0x6e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <osThreadNew+0x72>
        return (NULL);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e054      	b.n	8004ccc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <osThreadNew+0xa8>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b5b      	cmp	r3, #91	; 0x5b
 8004c40:	d90a      	bls.n	8004c58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <osThreadNew+0xa8>
        mem = 1;
 8004c52:	2301      	movs	r3, #1
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e010      	b.n	8004c7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10c      	bne.n	8004c7a <osThreadNew+0xca>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d108      	bne.n	8004c7a <osThreadNew+0xca>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <osThreadNew+0xca>
          mem = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	e001      	b.n	8004c7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d110      	bne.n	8004ca2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c88:	9202      	str	r2, [sp, #8]
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6a3a      	ldr	r2, [r7, #32]
 8004c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f001 fa4c 	bl	8006134 <xTaskCreateStatic>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e013      	b.n	8004cca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f107 0310 	add.w	r3, r7, #16
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f001 fa97 	bl	80061ee <xTaskCreate>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <osThreadNew+0x11a>
            hTask = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cca:	693b      	ldr	r3, [r7, #16]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3728      	adds	r7, #40	; 0x28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cdc:	f3ef 8305 	mrs	r3, IPSR
 8004ce0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <osDelay+0x1c>
    stat = osErrorISR;
 8004ce8:	f06f 0305 	mvn.w	r3, #5
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e007      	b.n	8004d00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fbbc 	bl	8006478 <vTaskDelay>
    }
  }

  return (stat);
 8004d00:	68fb      	ldr	r3, [r7, #12]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1a:	f3ef 8305 	mrs	r3, IPSR
 8004d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d175      	bne.n	8004e12 <osSemaphoreNew+0x108>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d072      	beq.n	8004e12 <osSemaphoreNew+0x108>
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d86e      	bhi.n	8004e12 <osSemaphoreNew+0x108>
    mem = -1;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295
 8004d38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d006      	beq.n	8004d56 <osSemaphoreNew+0x4c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b4f      	cmp	r3, #79	; 0x4f
 8004d4e:	d902      	bls.n	8004d56 <osSemaphoreNew+0x4c>
        mem = 1;
 8004d50:	2301      	movs	r3, #1
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e00c      	b.n	8004d70 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d108      	bne.n	8004d70 <osSemaphoreNew+0x66>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d104      	bne.n	8004d70 <osSemaphoreNew+0x66>
          mem = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e001      	b.n	8004d70 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d76:	d04c      	beq.n	8004e12 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d128      	bne.n	8004dd0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10a      	bne.n	8004d9a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2203      	movs	r2, #3
 8004d8a:	9200      	str	r2, [sp, #0]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2001      	movs	r0, #1
 8004d92:	f000 fa29 	bl	80051e8 <xQueueGenericCreateStatic>
 8004d96:	61f8      	str	r0, [r7, #28]
 8004d98:	e005      	b.n	8004da6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2001      	movs	r0, #1
 8004da0:	f000 fa9a 	bl	80052d8 <xQueueGenericCreate>
 8004da4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d022      	beq.n	8004df2 <osSemaphoreNew+0xe8>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01f      	beq.n	8004df2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004db2:	2300      	movs	r3, #0
 8004db4:	2200      	movs	r2, #0
 8004db6:	2100      	movs	r1, #0
 8004db8:	69f8      	ldr	r0, [r7, #28]
 8004dba:	f000 fb55 	bl	8005468 <xQueueGenericSend>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d016      	beq.n	8004df2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004dc4:	69f8      	ldr	r0, [r7, #28]
 8004dc6:	f000 ffe1 	bl	8005d8c <vQueueDelete>
            hSemaphore = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e010      	b.n	8004df2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d108      	bne.n	8004de8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 fad7 	bl	8005392 <xQueueCreateCountingSemaphoreStatic>
 8004de4:	61f8      	str	r0, [r7, #28]
 8004de6:	e004      	b.n	8004df2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb08 	bl	8005400 <xQueueCreateCountingSemaphore>
 8004df0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00c      	beq.n	8004e12 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e001      	b.n	8004e0a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004e0a:	6979      	ldr	r1, [r7, #20]
 8004e0c:	69f8      	ldr	r0, [r7, #28]
 8004e0e:	f001 f909 	bl	8006024 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004e12:	69fb      	ldr	r3, [r7, #28]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004e34:	f06f 0303 	mvn.w	r3, #3
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e039      	b.n	8004eb0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e3c:	f3ef 8305 	mrs	r3, IPSR
 8004e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e42:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004e4e:	f06f 0303 	mvn.w	r3, #3
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e02c      	b.n	8004eb0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2100      	movs	r1, #0
 8004e62:	6938      	ldr	r0, [r7, #16]
 8004e64:	f000 ff12 	bl	8005c8c <xQueueReceiveFromISR>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d003      	beq.n	8004e76 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004e6e:	f06f 0302 	mvn.w	r3, #2
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e01c      	b.n	8004eb0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d019      	beq.n	8004eb0 <osSemaphoreAcquire+0x94>
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <osSemaphoreAcquire+0xa0>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	e010      	b.n	8004eb0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6938      	ldr	r0, [r7, #16]
 8004e92:	f000 fdef 	bl	8005a74 <xQueueSemaphoreTake>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d009      	beq.n	8004eb0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004ea2:	f06f 0301 	mvn.w	r3, #1
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e002      	b.n	8004eb0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004eaa:	f06f 0302 	mvn.w	r3, #2
 8004eae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004eb0:	697b      	ldr	r3, [r7, #20]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004ed6:	f06f 0303 	mvn.w	r3, #3
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	e02c      	b.n	8004f38 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01a      	beq.n	8004f20 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6938      	ldr	r0, [r7, #16]
 8004ef6:	f000 fc50 	bl	800579a <xQueueGiveFromISR>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d003      	beq.n	8004f08 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004f00:	f06f 0302 	mvn.w	r3, #2
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e017      	b.n	8004f38 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <osSemaphoreRelease+0x78>
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <osSemaphoreRelease+0x84>)
 8004f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	e00b      	b.n	8004f38 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f20:	2300      	movs	r3, #0
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f000 fa9e 	bl	8005468 <xQueueGenericSend>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d002      	beq.n	8004f38 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004f32:	f06f 0302 	mvn.w	r3, #2
 8004f36:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004f38:	697b      	ldr	r3, [r7, #20]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4a06      	ldr	r2, [pc, #24]	; (8004f78 <vApplicationGetIdleTaskMemory+0x30>)
 8004f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2280      	movs	r2, #128	; 0x80
 8004f64:	601a      	str	r2, [r3, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000394 	.word	0x20000394
 8004f78:	200003f0 	.word	0x200003f0

08004f7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a07      	ldr	r2, [pc, #28]	; (8004fa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a06      	ldr	r2, [pc, #24]	; (8004fac <vApplicationGetTimerTaskMemory+0x30>)
 8004f92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f9a:	601a      	str	r2, [r3, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	200005f0 	.word	0x200005f0
 8004fac:	2000064c 	.word	0x2000064c

08004fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0208 	add.w	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f103 0208 	add.w	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f103 0208 	add.w	r2, r3, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800500a:	b480      	push	{r7}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]
}
 8005046:	bf00      	nop
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005052:	b480      	push	{r7}
 8005054:	b085      	sub	sp, #20
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d103      	bne.n	8005072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	e00c      	b.n	800508c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3308      	adds	r3, #8
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e002      	b.n	8005080 <vListInsert+0x2e>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	429a      	cmp	r2, r3
 800508a:	d2f6      	bcs.n	800507a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6852      	ldr	r2, [r2, #4]
 80050e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d103      	bne.n	80050f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	1e5a      	subs	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005142:	f002 fc6f 	bl	8007a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	68f9      	ldr	r1, [r7, #12]
 8005150:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005152:	fb01 f303 	mul.w	r3, r1, r3
 8005156:	441a      	add	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	3b01      	subs	r3, #1
 8005174:	68f9      	ldr	r1, [r7, #12]
 8005176:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	441a      	add	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	22ff      	movs	r2, #255	; 0xff
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d114      	bne.n	80051c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01a      	beq.n	80051d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3310      	adds	r3, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fc25 	bl	80069f4 <xTaskRemoveFromEventList>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d012      	beq.n	80051d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <xQueueGenericReset+0xcc>)
 80051b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	e009      	b.n	80051d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3310      	adds	r3, #16
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fef2 	bl	8004fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3324      	adds	r3, #36	; 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff feed 	bl	8004fb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f002 fc55 	bl	8007a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051da:	2301      	movs	r3, #1
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	; 0x38
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <xQueueGenericCreateStatic+0x52>
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <xQueueGenericCreateStatic+0x56>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueGenericCreateStatic+0x58>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xQueueGenericCreateStatic+0x7e>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueGenericCreateStatic+0x82>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericCreateStatic+0x84>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61fb      	str	r3, [r7, #28]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005286:	2350      	movs	r3, #80	; 0x50
 8005288:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b50      	cmp	r3, #80	; 0x50
 800528e:	d00a      	beq.n	80052a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	61bb      	str	r3, [r7, #24]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f83f 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3730      	adds	r7, #48	; 0x30
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10a      	bne.n	8005302 <xQueueGenericCreate+0x2a>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	613b      	str	r3, [r7, #16]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3350      	adds	r3, #80	; 0x50
 8005310:	4618      	mov	r0, r3
 8005312:	f002 fca9 	bl	8007c68 <pvPortMalloc>
 8005316:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d011      	beq.n	8005342 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3350      	adds	r3, #80	; 0x50
 8005326:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005330:	79fa      	ldrb	r2, [r7, #7]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f805 	bl	800534c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005342:	69bb      	ldr	r3, [r7, #24]
	}
 8005344:	4618      	mov	r0, r3
 8005346:	3720      	adds	r7, #32
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800537a:	2101      	movs	r1, #1
 800537c:	69b8      	ldr	r0, [r7, #24]
 800537e:	f7ff fecb 	bl	8005118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005392:	b580      	push	{r7, lr}
 8005394:	b08a      	sub	sp, #40	; 0x28
 8005396:	af02      	add	r7, sp, #8
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10a      	bne.n	80053ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	61bb      	str	r3, [r7, #24]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d90a      	bls.n	80053d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	617b      	str	r3, [r7, #20]
}
 80053d4:	bf00      	nop
 80053d6:	e7fe      	b.n	80053d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80053d8:	2302      	movs	r3, #2
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff ff00 	bl	80051e8 <xQueueGenericCreateStatic>
 80053e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80053f6:	69fb      	ldr	r3, [r7, #28]
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	429a      	cmp	r2, r3
 800542c:	d90a      	bls.n	8005444 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005444:	2202      	movs	r2, #2
 8005446:	2100      	movs	r1, #0
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff ff45 	bl	80052d8 <xQueueGenericCreate>
 800544e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800545c:	697b      	ldr	r3, [r7, #20]
	}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005476:	2300      	movs	r3, #0
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericSend+0x32>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <xQueueGenericSend+0x40>
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <xQueueGenericSend+0x44>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <xQueueGenericSend+0x46>
 80054ac:	2300      	movs	r3, #0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <xQueueGenericSend+0x60>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSend+0x6e>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0x72>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0x74>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	623b      	str	r3, [r7, #32]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f6:	f001 fc3b 	bl	8006d70 <xTaskGetSchedulerState>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <xQueueGenericSend+0x9e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <xQueueGenericSend+0xa2>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <xQueueGenericSend+0xa4>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <xQueueGenericSend+0xbe>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61fb      	str	r3, [r7, #28]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005526:	f002 fa7d 	bl	8007a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <xQueueGenericSend+0xd4>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d129      	bne.n	8005590 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005542:	f000 fc5e 	bl	8005e02 <prvCopyDataToQueue>
 8005546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	d010      	beq.n	8005572 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	4618      	mov	r0, r3
 8005556:	f001 fa4d 	bl	80069f4 <xTaskRemoveFromEventList>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d013      	beq.n	8005588 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005560:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <xQueueGenericSend+0x1f8>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	e00a      	b.n	8005588 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005578:	4b39      	ldr	r3, [pc, #228]	; (8005660 <xQueueGenericSend+0x1f8>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005588:	f002 fa7c 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	e063      	b.n	8005658 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005596:	f002 fa75 	bl	8007a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800559a:	2300      	movs	r3, #0
 800559c:	e05c      	b.n	8005658 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fa87 	bl	8006abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ae:	2301      	movs	r3, #1
 80055b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b2:	f002 fa67 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055b6:	f000 fff9 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ba:	f002 fa33 	bl	8007a24 <vPortEnterCritical>
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055c4:	b25b      	sxtb	r3, r3
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d103      	bne.n	80055d4 <xQueueGenericSend+0x16c>
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055da:	b25b      	sxtb	r3, r3
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSend+0x182>
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ea:	f002 fa4b 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ee:	1d3a      	adds	r2, r7, #4
 80055f0:	f107 0314 	add.w	r3, r7, #20
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fa76 	bl	8006ae8 <xTaskCheckForTimeOut>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d124      	bne.n	800564c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005604:	f000 fcf5 	bl	8005ff2 <prvIsQueueFull>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	3310      	adds	r3, #16
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f99c 	bl	8006954 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800561c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561e:	f000 fc80 	bl	8005f22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005622:	f000 ffd1 	bl	80065c8 <xTaskResumeAll>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f47f af7c 	bne.w	8005526 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800562e:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <xQueueGenericSend+0x1f8>)
 8005630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	e772      	b.n	8005526 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 fc6e 	bl	8005f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005646:	f000 ffbf 	bl	80065c8 <xTaskResumeAll>
 800564a:	e76c      	b.n	8005526 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800564c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800564e:	f000 fc68 	bl	8005f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005652:	f000 ffb9 	bl	80065c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005658:	4618      	mov	r0, r3
 800565a:	3738      	adds	r7, #56	; 0x38
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	e000ed04 	.word	0xe000ed04

08005664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b090      	sub	sp, #64	; 0x40
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d103      	bne.n	80056a0 <xQueueGenericSendFromISR+0x3c>
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <xQueueGenericSendFromISR+0x40>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <xQueueGenericSendFromISR+0x42>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d103      	bne.n	80056ce <xQueueGenericSendFromISR+0x6a>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <xQueueGenericSendFromISR+0x6e>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGenericSendFromISR+0x70>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10a      	bne.n	80056ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	623b      	str	r3, [r7, #32]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ee:	f002 fa7b 	bl	8007be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056f2:	f3ef 8211 	mrs	r2, BASEPRI
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61fa      	str	r2, [r7, #28]
 8005708:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800570a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800570c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800570e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <xQueueGenericSendFromISR+0xbc>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d12f      	bne.n	8005780 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005736:	f000 fb64 	bl	8005e02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d112      	bne.n	800576a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f94f 	bl	80069f4 <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e007      	b.n	800577a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800576e:	3301      	adds	r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	b25a      	sxtb	r2, r3
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800577e:	e001      	b.n	8005784 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005780:	2300      	movs	r3, #0
 8005782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005786:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800578e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005792:	4618      	mov	r0, r3
 8005794:	3740      	adds	r7, #64	; 0x40
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b08e      	sub	sp, #56	; 0x38
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10a      	bne.n	80057c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	623b      	str	r3, [r7, #32]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	61fb      	str	r3, [r7, #28]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <xQueueGiveFromISR+0x58>
 80057ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <xQueueGiveFromISR+0x5c>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <xQueueGiveFromISR+0x5e>
 80057f6:	2300      	movs	r3, #0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <xQueueGiveFromISR+0x78>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	61bb      	str	r3, [r7, #24]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005812:	f002 f9e9 	bl	8007be8 <vPortValidateInterruptPriority>
	__asm volatile
 8005816:	f3ef 8211 	mrs	r2, BASEPRI
 800581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581e:	f383 8811 	msr	BASEPRI, r3
 8005822:	f3bf 8f6f 	isb	sy
 8005826:	f3bf 8f4f 	dsb	sy
 800582a:	617a      	str	r2, [r7, #20]
 800582c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800582e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800583e:	429a      	cmp	r2, r3
 8005840:	d22b      	bcs.n	800589a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d112      	bne.n	8005884 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d016      	beq.n	8005894 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	4618      	mov	r0, r3
 800586c:	f001 f8c2 	bl	80069f4 <xTaskRemoveFromEventList>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00e      	beq.n	8005894 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e007      	b.n	8005894 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005888:	3301      	adds	r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	b25a      	sxtb	r2, r3
 800588e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005894:	2301      	movs	r3, #1
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
 8005898:	e001      	b.n	800589e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800589a:	2300      	movs	r3, #0
 800589c:	637b      	str	r3, [r7, #52]	; 0x34
 800589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f383 8811 	msr	BASEPRI, r3
}
 80058a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3738      	adds	r7, #56	; 0x38
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08c      	sub	sp, #48	; 0x30
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <xQueueReceive+0x30>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	623b      	str	r3, [r7, #32]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueReceive+0x3e>
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueReceive+0x42>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueReceive+0x44>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueReceive+0x5e>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61fb      	str	r3, [r7, #28]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005912:	f001 fa2d 	bl	8006d70 <xTaskGetSchedulerState>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d102      	bne.n	8005922 <xQueueReceive+0x6e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <xQueueReceive+0x72>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <xQueueReceive+0x74>
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <xQueueReceive+0x8e>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	61bb      	str	r3, [r7, #24]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005942:	f002 f86f 	bl	8007a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01f      	beq.n	8005992 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005952:	68b9      	ldr	r1, [r7, #8]
 8005954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005956:	f000 fabe 	bl	8005ed6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	1e5a      	subs	r2, r3, #1
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	3310      	adds	r3, #16
 800596e:	4618      	mov	r0, r3
 8005970:	f001 f840 	bl	80069f4 <xTaskRemoveFromEventList>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800597a:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <xQueueReceive+0x1bc>)
 800597c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800598a:	f002 f87b 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 800598e:	2301      	movs	r3, #1
 8005990:	e069      	b.n	8005a66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005998:	f002 f874 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800599c:	2300      	movs	r3, #0
 800599e:	e062      	b.n	8005a66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a6:	f107 0310 	add.w	r3, r7, #16
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 f886 	bl	8006abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b4:	f002 f866 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b8:	f000 fdf8 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059bc:	f002 f832 	bl	8007a24 <vPortEnterCritical>
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c6:	b25b      	sxtb	r3, r3
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d103      	bne.n	80059d6 <xQueueReceive+0x122>
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d103      	bne.n	80059ec <xQueueReceive+0x138>
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ec:	f002 f84a 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059f0:	1d3a      	adds	r2, r7, #4
 80059f2:	f107 0310 	add.w	r3, r7, #16
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f875 	bl	8006ae8 <xTaskCheckForTimeOut>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d123      	bne.n	8005a4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a06:	f000 fade 	bl	8005fc6 <prvIsQueueEmpty>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 ff9b 	bl	8006954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a20:	f000 fa7f 	bl	8005f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a24:	f000 fdd0 	bl	80065c8 <xTaskResumeAll>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d189      	bne.n	8005942 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <xQueueReceive+0x1bc>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e780      	b.n	8005942 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 fa6e 	bl	8005f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fdbf 	bl	80065c8 <xTaskResumeAll>
 8005a4a:	e77a      	b.n	8005942 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a4e:	f000 fa68 	bl	8005f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fdb9 	bl	80065c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a58:	f000 fab5 	bl	8005fc6 <prvIsQueueEmpty>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f43f af6f 	beq.w	8005942 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	; 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	; 0x38
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	623b      	str	r3, [r7, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	61fb      	str	r3, [r7, #28]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ac4:	f001 f954 	bl	8006d70 <xTaskGetSchedulerState>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d102      	bne.n	8005ad4 <xQueueSemaphoreTake+0x60>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <xQueueSemaphoreTake+0x64>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <xQueueSemaphoreTake+0x66>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	61bb      	str	r3, [r7, #24]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005af4:	f001 ff96 	bl	8007a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d024      	beq.n	8005b4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	1e5a      	subs	r2, r3, #1
 8005b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d104      	bne.n	8005b1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b14:	f001 faa2 	bl	800705c <pvTaskIncrementMutexHeldCount>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	3310      	adds	r3, #16
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 ff62 	bl	80069f4 <xTaskRemoveFromEventList>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b36:	4b54      	ldr	r3, [pc, #336]	; (8005c88 <xQueueSemaphoreTake+0x214>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b46:	f001 ff9d 	bl	8007a84 <vPortExitCritical>
				return pdPASS;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e097      	b.n	8005c7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d111      	bne.n	8005b78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	617b      	str	r3, [r7, #20]
}
 8005b6c:	bf00      	nop
 8005b6e:	e7fe      	b.n	8005b6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005b70:	f001 ff88 	bl	8007a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e082      	b.n	8005c7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 ff9a 	bl	8006abc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b8c:	f001 ff7a 	bl	8007a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b90:	f000 fd0c 	bl	80065ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b94:	f001 ff46 	bl	8007a24 <vPortEnterCritical>
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d103      	bne.n	8005bae <xQueueSemaphoreTake+0x13a>
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb4:	b25b      	sxtb	r3, r3
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d103      	bne.n	8005bc4 <xQueueSemaphoreTake+0x150>
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc4:	f001 ff5e 	bl	8007a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc8:	463a      	mov	r2, r7
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f000 ff89 	bl	8006ae8 <xTaskCheckForTimeOut>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d132      	bne.n	8005c42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005bde:	f000 f9f2 	bl	8005fc6 <prvIsQueueEmpty>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d026      	beq.n	8005c36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005bf0:	f001 ff18 	bl	8007a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f8d7 	bl	8006dac <xTaskPriorityInherit>
 8005bfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c00:	f001 ff40 	bl	8007a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fea1 	bl	8006954 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c14:	f000 f985 	bl	8005f22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c18:	f000 fcd6 	bl	80065c8 <xTaskResumeAll>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f47f af68 	bne.w	8005af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <xQueueSemaphoreTake+0x214>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	e75e      	b.n	8005af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c38:	f000 f973 	bl	8005f22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c3c:	f000 fcc4 	bl	80065c8 <xTaskResumeAll>
 8005c40:	e758      	b.n	8005af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c44:	f000 f96d 	bl	8005f22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c48:	f000 fcbe 	bl	80065c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c4e:	f000 f9ba 	bl	8005fc6 <prvIsQueueEmpty>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f43f af4d 	beq.w	8005af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005c60:	f001 fee0 	bl	8007a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c66:	f000 f8b4 	bl	8005dd2 <prvGetDisinheritPriorityAfterTimeout>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 f970 	bl	8006f58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005c78:	f001 ff04 	bl	8007a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3738      	adds	r7, #56	; 0x38
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08e      	sub	sp, #56	; 0x38
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	623b      	str	r3, [r7, #32]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d103      	bne.n	8005cc6 <xQueueReceiveFromISR+0x3a>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <xQueueReceiveFromISR+0x3e>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <xQueueReceiveFromISR+0x40>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10a      	bne.n	8005ce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	61fb      	str	r3, [r7, #28]
}
 8005ce2:	bf00      	nop
 8005ce4:	e7fe      	b.n	8005ce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ce6:	f001 ff7f 	bl	8007be8 <vPortValidateInterruptPriority>
	__asm volatile
 8005cea:	f3ef 8211 	mrs	r2, BASEPRI
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	61ba      	str	r2, [r7, #24]
 8005d00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d02f      	beq.n	8005d72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d20:	f000 f8d9 	bl	8005ed6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	1e5a      	subs	r2, r3, #1
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d112      	bne.n	8005d5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fe56 	bl	80069f4 <xTaskRemoveFromEventList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00e      	beq.n	8005d6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e007      	b.n	8005d6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	b25a      	sxtb	r2, r3
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d70:	e001      	b.n	8005d76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f383 8811 	msr	BASEPRI, r3
}
 8005d80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3738      	adds	r7, #56	; 0x38
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <vQueueDelete+0x28>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	60bb      	str	r3, [r7, #8]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f95f 	bl	8006078 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f002 f81b 	bl	8007e00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b085      	sub	sp, #20
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	e001      	b.n	8005df4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005df4:	68fb      	ldr	r3, [r7, #12]
	}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10d      	bne.n	8005e3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d14d      	bne.n	8005ec4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 f825 	bl	8006e7c <xTaskPriorityDisinherit>
 8005e32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	e043      	b.n	8005ec4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d119      	bne.n	8005e76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6858      	ldr	r0, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	f002 f91f 	bl	8008090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	441a      	add	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d32b      	bcc.n	8005ec4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]
 8005e74:	e026      	b.n	8005ec4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68d8      	ldr	r0, [r3, #12]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68b9      	ldr	r1, [r7, #8]
 8005e82:	f002 f905 	bl	8008090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	425b      	negs	r3, r3
 8005e90:	441a      	add	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d207      	bcs.n	8005eb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689a      	ldr	r2, [r3, #8]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	425b      	negs	r3, r3
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d105      	bne.n	8005ec4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ecc:	697b      	ldr	r3, [r7, #20]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d018      	beq.n	8005f1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d303      	bcc.n	8005f0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68d9      	ldr	r1, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	461a      	mov	r2, r3
 8005f14:	6838      	ldr	r0, [r7, #0]
 8005f16:	f002 f8bb 	bl	8008090 <memcpy>
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f2a:	f001 fd7b 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f36:	e011      	b.n	8005f5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3324      	adds	r3, #36	; 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fd55 	bl	80069f4 <xTaskRemoveFromEventList>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f50:	f000 fe2c 	bl	8006bac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dce9      	bgt.n	8005f38 <prvUnlockQueue+0x16>
 8005f64:	e000      	b.n	8005f68 <prvUnlockQueue+0x46>
					break;
 8005f66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	22ff      	movs	r2, #255	; 0xff
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f70:	f001 fd88 	bl	8007a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f74:	f001 fd56 	bl	8007a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f80:	e011      	b.n	8005fa6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d012      	beq.n	8005fb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fd30 	bl	80069f4 <xTaskRemoveFromEventList>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f9a:	f000 fe07 	bl	8006bac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f9e:	7bbb      	ldrb	r3, [r7, #14]
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dce9      	bgt.n	8005f82 <prvUnlockQueue+0x60>
 8005fae:	e000      	b.n	8005fb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005fb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005fba:	f001 fd63 	bl	8007a84 <vPortExitCritical>
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fce:	f001 fd29 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e001      	b.n	8005fe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fe4:	f001 fd4e 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ffa:	f001 fd13 	bl	8007a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	429a      	cmp	r2, r3
 8006008:	d102      	bne.n	8006010 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800600a:	2301      	movs	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e001      	b.n	8006014 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006014:	f001 fd36 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8006018:	68fb      	ldr	r3, [r7, #12]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	e014      	b.n	800605e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006034:	4a0f      	ldr	r2, [pc, #60]	; (8006074 <vQueueAddToRegistry+0x50>)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006040:	490c      	ldr	r1, [pc, #48]	; (8006074 <vQueueAddToRegistry+0x50>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800604a:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <vQueueAddToRegistry+0x50>)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006056:	e006      	b.n	8006066 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3301      	adds	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b07      	cmp	r3, #7
 8006062:	d9e7      	bls.n	8006034 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000a4c 	.word	0x20000a4c

08006078 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e016      	b.n	80060b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <vQueueUnregisterQueue+0x50>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	429a      	cmp	r2, r3
 8006094:	d10b      	bne.n	80060ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006096:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <vQueueUnregisterQueue+0x50>)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2100      	movs	r1, #0
 800609c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80060a0:	4a09      	ldr	r2, [pc, #36]	; (80060c8 <vQueueUnregisterQueue+0x50>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	4413      	add	r3, r2
 80060a8:	2200      	movs	r2, #0
 80060aa:	605a      	str	r2, [r3, #4]
				break;
 80060ac:	e006      	b.n	80060bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b07      	cmp	r3, #7
 80060b8:	d9e5      	bls.n	8006086 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	20000a4c 	.word	0x20000a4c

080060cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060dc:	f001 fca2 	bl	8007a24 <vPortEnterCritical>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <vQueueWaitForMessageRestricted+0x2a>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <vQueueWaitForMessageRestricted+0x40>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610c:	f001 fcba 	bl	8007a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fc3b 	bl	800699c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7ff fefb 	bl	8005f22 <prvUnlockQueue>
	}
 800612c:	bf00      	nop
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af04      	add	r7, sp, #16
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTaskCreateStatic+0x46>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	61fb      	str	r3, [r7, #28]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617a:	235c      	movs	r3, #92	; 0x5c
 800617c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b5c      	cmp	r3, #92	; 0x5c
 8006182:	d00a      	beq.n	800619a <xTaskCreateStatic+0x66>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61bb      	str	r3, [r7, #24]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800619a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01e      	beq.n	80061e0 <xTaskCreateStatic+0xac>
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01b      	beq.n	80061e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061ba:	2300      	movs	r3, #0
 80061bc:	9303      	str	r3, [sp, #12]
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	9302      	str	r3, [sp, #8]
 80061c2:	f107 0314 	add.w	r3, r7, #20
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f850 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80061da:	f000 f8dd 	bl	8006398 <prvAddNewTaskToReadyList>
 80061de:	e001      	b.n	80061e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e4:	697b      	ldr	r3, [r7, #20]
	}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3728      	adds	r7, #40	; 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b08c      	sub	sp, #48	; 0x30
 80061f2:	af04      	add	r7, sp, #16
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	603b      	str	r3, [r7, #0]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4618      	mov	r0, r3
 8006204:	f001 fd30 	bl	8007c68 <pvPortMalloc>
 8006208:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00e      	beq.n	800622e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006210:	205c      	movs	r0, #92	; 0x5c
 8006212:	f001 fd29 	bl	8007c68 <pvPortMalloc>
 8006216:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	631a      	str	r2, [r3, #48]	; 0x30
 8006224:	e005      	b.n	8006232 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f001 fdea 	bl	8007e00 <vPortFree>
 800622c:	e001      	b.n	8006232 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d017      	beq.n	8006268 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006240:	88fa      	ldrh	r2, [r7, #6]
 8006242:	2300      	movs	r3, #0
 8006244:	9303      	str	r3, [sp, #12]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	9302      	str	r3, [sp, #8]
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f80e 	bl	8006278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625c:	69f8      	ldr	r0, [r7, #28]
 800625e:	f000 f89b 	bl	8006398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006262:	2301      	movs	r3, #1
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e002      	b.n	800626e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295
 800626c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800626e:	69bb      	ldr	r3, [r7, #24]
	}
 8006270:	4618      	mov	r0, r3
 8006272:	3720      	adds	r7, #32
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	461a      	mov	r2, r3
 8006290:	21a5      	movs	r1, #165	; 0xa5
 8006292:	f001 ff0b 	bl	80080ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a0:	3b01      	subs	r3, #1
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d01f      	beq.n	8006316 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062d6:	2300      	movs	r3, #0
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e012      	b.n	8006302 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	4413      	add	r3, r2
 80062e2:	7819      	ldrb	r1, [r3, #0]
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	3334      	adds	r3, #52	; 0x34
 80062ec:	460a      	mov	r2, r1
 80062ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d006      	beq.n	800630a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	3301      	adds	r3, #1
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	2b0f      	cmp	r3, #15
 8006306:	d9e9      	bls.n	80062dc <prvInitialiseNewTask+0x64>
 8006308:	e000      	b.n	800630c <prvInitialiseNewTask+0x94>
			{
				break;
 800630a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	e003      	b.n	800631e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b37      	cmp	r3, #55	; 0x37
 8006322:	d901      	bls.n	8006328 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006324:	2337      	movs	r3, #55	; 0x37
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	2200      	movs	r2, #0
 8006338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	3304      	adds	r3, #4
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fe56 	bl	8004ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	3318      	adds	r3, #24
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fe51 	bl	8004ff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	2200      	movs	r2, #0
 8006368:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	69b8      	ldr	r0, [r7, #24]
 8006378:	f001 fa26 	bl	80077c8 <pxPortInitialiseStack>
 800637c:	4602      	mov	r2, r0
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638e:	bf00      	nop
 8006390:	3720      	adds	r7, #32
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063a0:	f001 fb40 	bl	8007a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a2c      	ldr	r2, [pc, #176]	; (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063ae:	4b2c      	ldr	r3, [pc, #176]	; (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063b6:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063bc:	4b27      	ldr	r3, [pc, #156]	; (800645c <prvAddNewTaskToReadyList+0xc4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d110      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063c4:	f000 fc16 	bl	8006bf4 <prvInitialiseTaskLists>
 80063c8:	e00d      	b.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ca:	4b26      	ldr	r3, [pc, #152]	; (8006464 <prvAddNewTaskToReadyList+0xcc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063d2:	4b23      	ldr	r3, [pc, #140]	; (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	429a      	cmp	r2, r3
 80063de:	d802      	bhi.n	80063e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063e0:	4a1f      	ldr	r2, [pc, #124]	; (8006460 <prvAddNewTaskToReadyList+0xc8>)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063e6:	4b20      	ldr	r3, [pc, #128]	; (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	4a1e      	ldr	r2, [pc, #120]	; (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <prvAddNewTaskToReadyList+0xd0>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <prvAddNewTaskToReadyList+0xd4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <prvAddNewTaskToReadyList+0x74>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a18      	ldr	r2, [pc, #96]	; (800646c <prvAddNewTaskToReadyList+0xd4>)
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a15      	ldr	r2, [pc, #84]	; (8006470 <prvAddNewTaskToReadyList+0xd8>)
 800641a:	441a      	add	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fe fdf1 	bl	800500a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006428:	f001 fb2c 	bl	8007a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <prvAddNewTaskToReadyList+0xcc>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvAddNewTaskToReadyList+0xc8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	429a      	cmp	r2, r3
 8006440:	d207      	bcs.n	8006452 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvAddNewTaskToReadyList+0xdc>)
 8006444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000f60 	.word	0x20000f60
 8006460:	20000a8c 	.word	0x20000a8c
 8006464:	20000f6c 	.word	0x20000f6c
 8006468:	20000f7c 	.word	0x20000f7c
 800646c:	20000f68 	.word	0x20000f68
 8006470:	20000a90 	.word	0x20000a90
 8006474:	e000ed04 	.word	0xe000ed04

08006478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d017      	beq.n	80064ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <vTaskDelay+0x60>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <vTaskDelay+0x30>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60bb      	str	r3, [r7, #8]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064a8:	f000 f880 	bl	80065ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ac:	2100      	movs	r1, #0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fde8 	bl	8007084 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064b4:	f000 f888 	bl	80065c8 <xTaskResumeAll>
 80064b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d107      	bne.n	80064d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <vTaskDelay+0x64>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000f88 	.word	0x20000f88
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064ee:	463a      	mov	r2, r7
 80064f0:	1d39      	adds	r1, r7, #4
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fd26 	bl	8004f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	9202      	str	r2, [sp, #8]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	2300      	movs	r3, #0
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2300      	movs	r3, #0
 800650c:	460a      	mov	r2, r1
 800650e:	4921      	ldr	r1, [pc, #132]	; (8006594 <vTaskStartScheduler+0xb4>)
 8006510:	4821      	ldr	r0, [pc, #132]	; (8006598 <vTaskStartScheduler+0xb8>)
 8006512:	f7ff fe0f 	bl	8006134 <xTaskCreateStatic>
 8006516:	4603      	mov	r3, r0
 8006518:	4a20      	ldr	r2, [pc, #128]	; (800659c <vTaskStartScheduler+0xbc>)
 800651a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <vTaskStartScheduler+0xbc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006524:	2301      	movs	r3, #1
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e001      	b.n	800652e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d102      	bne.n	800653a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006534:	f000 fdfa 	bl	800712c <xTimerCreateTimerTask>
 8006538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d116      	bne.n	800656e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006554:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <vTaskStartScheduler+0xc0>)
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <vTaskStartScheduler+0xc4>)
 800655e:	2201      	movs	r2, #1
 8006560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <vTaskStartScheduler+0xc8>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006568:	f001 f9ba 	bl	80078e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800656c:	e00e      	b.n	800658c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006574:	d10a      	bne.n	800658c <vTaskStartScheduler+0xac>
	__asm volatile
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	f383 8811 	msr	BASEPRI, r3
 800657e:	f3bf 8f6f 	isb	sy
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	60fb      	str	r3, [r7, #12]
}
 8006588:	bf00      	nop
 800658a:	e7fe      	b.n	800658a <vTaskStartScheduler+0xaa>
}
 800658c:	bf00      	nop
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	0800aba4 	.word	0x0800aba4
 8006598:	08006bc5 	.word	0x08006bc5
 800659c:	20000f84 	.word	0x20000f84
 80065a0:	20000f80 	.word	0x20000f80
 80065a4:	20000f6c 	.word	0x20000f6c
 80065a8:	20000f64 	.word	0x20000f64

080065ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065b0:	4b04      	ldr	r3, [pc, #16]	; (80065c4 <vTaskSuspendAll+0x18>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a03      	ldr	r2, [pc, #12]	; (80065c4 <vTaskSuspendAll+0x18>)
 80065b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065ba:	bf00      	nop
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	20000f88 	.word	0x20000f88

080065c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065d6:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <xTaskResumeAll+0x118>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	603b      	str	r3, [r7, #0]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065f4:	f001 fa16 	bl	8007a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065f8:	4b39      	ldr	r3, [pc, #228]	; (80066e0 <xTaskResumeAll+0x118>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	4a38      	ldr	r2, [pc, #224]	; (80066e0 <xTaskResumeAll+0x118>)
 8006600:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006602:	4b37      	ldr	r3, [pc, #220]	; (80066e0 <xTaskResumeAll+0x118>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d162      	bne.n	80066d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800660a:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <xTaskResumeAll+0x11c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d05e      	beq.n	80066d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006612:	e02f      	b.n	8006674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006614:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <xTaskResumeAll+0x120>)
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3318      	adds	r3, #24
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fd4f 	bl	80050c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fd4a 	bl	80050c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <xTaskResumeAll+0x124>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d903      	bls.n	8006644 <xTaskResumeAll+0x7c>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <xTaskResumeAll+0x124>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4a27      	ldr	r2, [pc, #156]	; (80066f0 <xTaskResumeAll+0x128>)
 8006652:	441a      	add	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7fe fcd5 	bl	800500a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006664:	4b23      	ldr	r3, [pc, #140]	; (80066f4 <xTaskResumeAll+0x12c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	429a      	cmp	r2, r3
 800666c:	d302      	bcc.n	8006674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <xTaskResumeAll+0x130>)
 8006670:	2201      	movs	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006674:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <xTaskResumeAll+0x120>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1cb      	bne.n	8006614 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006682:	f000 fb55 	bl	8006d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006686:	4b1d      	ldr	r3, [pc, #116]	; (80066fc <xTaskResumeAll+0x134>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d010      	beq.n	80066b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006692:	f000 f847 	bl	8006724 <xTaskIncrementTick>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800669c:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <xTaskResumeAll+0x130>)
 800669e:	2201      	movs	r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f1      	bne.n	8006692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80066ae:	4b13      	ldr	r3, [pc, #76]	; (80066fc <xTaskResumeAll+0x134>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066b4:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <xTaskResumeAll+0x130>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066bc:	2301      	movs	r3, #1
 80066be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <xTaskResumeAll+0x138>)
 80066c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066d0:	f001 f9d8 	bl	8007a84 <vPortExitCritical>

	return xAlreadyYielded;
 80066d4:	68bb      	ldr	r3, [r7, #8]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	20000f88 	.word	0x20000f88
 80066e4:	20000f60 	.word	0x20000f60
 80066e8:	20000f20 	.word	0x20000f20
 80066ec:	20000f68 	.word	0x20000f68
 80066f0:	20000a90 	.word	0x20000a90
 80066f4:	20000a8c 	.word	0x20000a8c
 80066f8:	20000f74 	.word	0x20000f74
 80066fc:	20000f70 	.word	0x20000f70
 8006700:	e000ed04 	.word	0xe000ed04

08006704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <xTaskGetTickCount+0x1c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006710:	687b      	ldr	r3, [r7, #4]
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000f64 	.word	0x20000f64

08006724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b4f      	ldr	r3, [pc, #316]	; (800686c <xTaskIncrementTick+0x148>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f040 808f 	bne.w	8006856 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <xTaskIncrementTick+0x14c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006740:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <xTaskIncrementTick+0x14c>)
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d120      	bne.n	800678e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800674c:	4b49      	ldr	r3, [pc, #292]	; (8006874 <xTaskIncrementTick+0x150>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <xTaskIncrementTick+0x48>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	603b      	str	r3, [r7, #0]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskIncrementTick+0x46>
 800676c:	4b41      	ldr	r3, [pc, #260]	; (8006874 <xTaskIncrementTick+0x150>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	4b41      	ldr	r3, [pc, #260]	; (8006878 <xTaskIncrementTick+0x154>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3f      	ldr	r2, [pc, #252]	; (8006874 <xTaskIncrementTick+0x150>)
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <xTaskIncrementTick+0x154>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <xTaskIncrementTick+0x158>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	4a3d      	ldr	r2, [pc, #244]	; (800687c <xTaskIncrementTick+0x158>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	f000 fad1 	bl	8006d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800678e:	4b3c      	ldr	r3, [pc, #240]	; (8006880 <xTaskIncrementTick+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d349      	bcc.n	800682c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006798:	4b36      	ldr	r3, [pc, #216]	; (8006874 <xTaskIncrementTick+0x150>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d104      	bne.n	80067ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	4b37      	ldr	r3, [pc, #220]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067a4:	f04f 32ff 	mov.w	r2, #4294967295
 80067a8:	601a      	str	r2, [r3, #0]
					break;
 80067aa:	e03f      	b.n	800682c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ac:	4b31      	ldr	r3, [pc, #196]	; (8006874 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d203      	bcs.n	80067cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067c4:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <xTaskIncrementTick+0x15c>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067ca:	e02f      	b.n	800682c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe fc77 	bl	80050c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fc6e 	bl	80050c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ec:	4b25      	ldr	r3, [pc, #148]	; (8006884 <xTaskIncrementTick+0x160>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d903      	bls.n	80067fc <xTaskIncrementTick+0xd8>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a22      	ldr	r2, [pc, #136]	; (8006884 <xTaskIncrementTick+0x160>)
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <xTaskIncrementTick+0x164>)
 800680a:	441a      	add	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	3304      	adds	r3, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7fe fbf9 	bl	800500a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <xTaskIncrementTick+0x168>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	429a      	cmp	r2, r3
 8006824:	d3b8      	bcc.n	8006798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006826:	2301      	movs	r3, #1
 8006828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682a:	e7b5      	b.n	8006798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800682c:	4b17      	ldr	r3, [pc, #92]	; (800688c <xTaskIncrementTick+0x168>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006832:	4915      	ldr	r1, [pc, #84]	; (8006888 <xTaskIncrementTick+0x164>)
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d901      	bls.n	8006848 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006848:	4b11      	ldr	r3, [pc, #68]	; (8006890 <xTaskIncrementTick+0x16c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e004      	b.n	8006860 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <xTaskIncrementTick+0x170>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3301      	adds	r3, #1
 800685c:	4a0d      	ldr	r2, [pc, #52]	; (8006894 <xTaskIncrementTick+0x170>)
 800685e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006860:	697b      	ldr	r3, [r7, #20]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000f88 	.word	0x20000f88
 8006870:	20000f64 	.word	0x20000f64
 8006874:	20000f18 	.word	0x20000f18
 8006878:	20000f1c 	.word	0x20000f1c
 800687c:	20000f78 	.word	0x20000f78
 8006880:	20000f80 	.word	0x20000f80
 8006884:	20000f68 	.word	0x20000f68
 8006888:	20000a90 	.word	0x20000a90
 800688c:	20000a8c 	.word	0x20000a8c
 8006890:	20000f74 	.word	0x20000f74
 8006894:	20000f70 	.word	0x20000f70

08006898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <vTaskSwitchContext+0xa8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <vTaskSwitchContext+0xac>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068ac:	e041      	b.n	8006932 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80068ae:	4b25      	ldr	r3, [pc, #148]	; (8006944 <vTaskSwitchContext+0xac>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068b4:	4b24      	ldr	r3, [pc, #144]	; (8006948 <vTaskSwitchContext+0xb0>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e010      	b.n	80068de <vTaskSwitchContext+0x46>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vTaskSwitchContext+0x3e>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3b01      	subs	r3, #1
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	491b      	ldr	r1, [pc, #108]	; (800694c <vTaskSwitchContext+0xb4>)
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d0e4      	beq.n	80068bc <vTaskSwitchContext+0x24>
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4a13      	ldr	r2, [pc, #76]	; (800694c <vTaskSwitchContext+0xb4>)
 80068fe:	4413      	add	r3, r2
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	605a      	str	r2, [r3, #4]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3308      	adds	r3, #8
 8006914:	429a      	cmp	r2, r3
 8006916:	d104      	bne.n	8006922 <vTaskSwitchContext+0x8a>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4a09      	ldr	r2, [pc, #36]	; (8006950 <vTaskSwitchContext+0xb8>)
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4a06      	ldr	r2, [pc, #24]	; (8006948 <vTaskSwitchContext+0xb0>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6013      	str	r3, [r2, #0]
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000f88 	.word	0x20000f88
 8006944:	20000f74 	.word	0x20000f74
 8006948:	20000f68 	.word	0x20000f68
 800694c:	20000a90 	.word	0x20000a90
 8006950:	20000a8c 	.word	0x20000a8c

08006954 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	60fb      	str	r3, [r7, #12]
}
 8006976:	bf00      	nop
 8006978:	e7fe      	b.n	8006978 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800697a:	4b07      	ldr	r3, [pc, #28]	; (8006998 <vTaskPlaceOnEventList+0x44>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3318      	adds	r3, #24
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fe fb65 	bl	8005052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006988:	2101      	movs	r1, #1
 800698a:	6838      	ldr	r0, [r7, #0]
 800698c:	f000 fb7a 	bl	8007084 <prvAddCurrentTaskToDelayedList>
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000a8c 	.word	0x20000a8c

0800699c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	617b      	str	r3, [r7, #20]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3318      	adds	r3, #24
 80069ca:	4619      	mov	r1, r3
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7fe fb1c 	bl	800500a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295
 80069dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	68b8      	ldr	r0, [r7, #8]
 80069e2:	f000 fb4f 	bl	8007084 <prvAddCurrentTaskToDelayedList>
	}
 80069e6:	bf00      	nop
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000a8c 	.word	0x20000a8c

080069f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60fb      	str	r3, [r7, #12]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	3318      	adds	r3, #24
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fe fb4d 	bl	80050c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <xTaskRemoveFromEventList+0xb0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d11d      	bne.n	8006a6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	3304      	adds	r3, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fe fb44 	bl	80050c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a40:	4b19      	ldr	r3, [pc, #100]	; (8006aa8 <xTaskRemoveFromEventList+0xb4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d903      	bls.n	8006a50 <xTaskRemoveFromEventList+0x5c>
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <xTaskRemoveFromEventList+0xb4>)
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a13      	ldr	r2, [pc, #76]	; (8006aac <xTaskRemoveFromEventList+0xb8>)
 8006a5e:	441a      	add	r2, r3
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f7fe facf 	bl	800500a <vListInsertEnd>
 8006a6c:	e005      	b.n	8006a7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3318      	adds	r3, #24
 8006a72:	4619      	mov	r1, r3
 8006a74:	480e      	ldr	r0, [pc, #56]	; (8006ab0 <xTaskRemoveFromEventList+0xbc>)
 8006a76:	f7fe fac8 	bl	800500a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <xTaskRemoveFromEventList+0xc0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d905      	bls.n	8006a94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <xTaskRemoveFromEventList+0xc4>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	e001      	b.n	8006a98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a98:	697b      	ldr	r3, [r7, #20]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000f88 	.word	0x20000f88
 8006aa8:	20000f68 	.word	0x20000f68
 8006aac:	20000a90 	.word	0x20000a90
 8006ab0:	20000f20 	.word	0x20000f20
 8006ab4:	20000a8c 	.word	0x20000a8c
 8006ab8:	20000f74 	.word	0x20000f74

08006abc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <vTaskInternalSetTimeOutState+0x24>)
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006acc:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <vTaskInternalSetTimeOutState+0x28>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	605a      	str	r2, [r3, #4]
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	20000f78 	.word	0x20000f78
 8006ae4:	20000f64 	.word	0x20000f64

08006ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	613b      	str	r3, [r7, #16]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	60fb      	str	r3, [r7, #12]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006b2a:	f000 ff7b 	bl	8007a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <xTaskCheckForTimeOut+0xbc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d102      	bne.n	8006b4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e023      	b.n	8006b96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	4b15      	ldr	r3, [pc, #84]	; (8006ba8 <xTaskCheckForTimeOut+0xc0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d007      	beq.n	8006b6a <xTaskCheckForTimeOut+0x82>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d302      	bcc.n	8006b6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	61fb      	str	r3, [r7, #28]
 8006b68:	e015      	b.n	8006b96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d20b      	bcs.n	8006b8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	1ad2      	subs	r2, r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff9b 	bl	8006abc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e004      	b.n	8006b96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b92:	2301      	movs	r3, #1
 8006b94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b96:	f000 ff75 	bl	8007a84 <vPortExitCritical>

	return xReturn;
 8006b9a:	69fb      	ldr	r3, [r7, #28]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3720      	adds	r7, #32
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000f64 	.word	0x20000f64
 8006ba8:	20000f78 	.word	0x20000f78

08006bac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bb0:	4b03      	ldr	r3, [pc, #12]	; (8006bc0 <vTaskMissedYield+0x14>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	601a      	str	r2, [r3, #0]
}
 8006bb6:	bf00      	nop
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000f74 	.word	0x20000f74

08006bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bcc:	f000 f852 	bl	8006c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bd0:	4b06      	ldr	r3, [pc, #24]	; (8006bec <prvIdleTask+0x28>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d9f9      	bls.n	8006bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bd8:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <prvIdleTask+0x2c>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006be8:	e7f0      	b.n	8006bcc <prvIdleTask+0x8>
 8006bea:	bf00      	nop
 8006bec:	20000a90 	.word	0x20000a90
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	e00c      	b.n	8006c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <prvInitialiseTaskLists+0x60>)
 8006c0c:	4413      	add	r3, r2
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe f9ce 	bl	8004fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	607b      	str	r3, [r7, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b37      	cmp	r3, #55	; 0x37
 8006c1e:	d9ef      	bls.n	8006c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c20:	480d      	ldr	r0, [pc, #52]	; (8006c58 <prvInitialiseTaskLists+0x64>)
 8006c22:	f7fe f9c5 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c26:	480d      	ldr	r0, [pc, #52]	; (8006c5c <prvInitialiseTaskLists+0x68>)
 8006c28:	f7fe f9c2 	bl	8004fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c2c:	480c      	ldr	r0, [pc, #48]	; (8006c60 <prvInitialiseTaskLists+0x6c>)
 8006c2e:	f7fe f9bf 	bl	8004fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c32:	480c      	ldr	r0, [pc, #48]	; (8006c64 <prvInitialiseTaskLists+0x70>)
 8006c34:	f7fe f9bc 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c38:	480b      	ldr	r0, [pc, #44]	; (8006c68 <prvInitialiseTaskLists+0x74>)
 8006c3a:	f7fe f9b9 	bl	8004fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <prvInitialiseTaskLists+0x78>)
 8006c40:	4a05      	ldr	r2, [pc, #20]	; (8006c58 <prvInitialiseTaskLists+0x64>)
 8006c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <prvInitialiseTaskLists+0x7c>)
 8006c46:	4a05      	ldr	r2, [pc, #20]	; (8006c5c <prvInitialiseTaskLists+0x68>)
 8006c48:	601a      	str	r2, [r3, #0]
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000a90 	.word	0x20000a90
 8006c58:	20000ef0 	.word	0x20000ef0
 8006c5c:	20000f04 	.word	0x20000f04
 8006c60:	20000f20 	.word	0x20000f20
 8006c64:	20000f34 	.word	0x20000f34
 8006c68:	20000f4c 	.word	0x20000f4c
 8006c6c:	20000f18 	.word	0x20000f18
 8006c70:	20000f1c 	.word	0x20000f1c

08006c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c7a:	e019      	b.n	8006cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c7c:	f000 fed2 	bl	8007a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c80:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <prvCheckTasksWaitingTermination+0x50>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fa19 	bl	80050c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <prvCheckTasksWaitingTermination+0x54>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <prvCheckTasksWaitingTermination+0x54>)
 8006c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <prvCheckTasksWaitingTermination+0x58>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <prvCheckTasksWaitingTermination+0x58>)
 8006ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ca6:	f000 feed 	bl	8007a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f810 	bl	8006cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <prvCheckTasksWaitingTermination+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e1      	bne.n	8006c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	20000f34 	.word	0x20000f34
 8006cc8:	20000f60 	.word	0x20000f60
 8006ccc:	20000f48 	.word	0x20000f48

08006cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f88a 	bl	8007e00 <vPortFree>
				vPortFree( pxTCB );
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 f887 	bl	8007e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cf2:	e018      	b.n	8006d26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d103      	bne.n	8006d06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 f87e 	bl	8007e00 <vPortFree>
	}
 8006d04:	e00f      	b.n	8006d26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d00a      	beq.n	8006d26 <prvDeleteTCB+0x56>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
}
 8006d22:	bf00      	nop
 8006d24:	e7fe      	b.n	8006d24 <prvDeleteTCB+0x54>
	}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d48:	e008      	b.n	8006d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <prvResetNextTaskUnblockTime+0x38>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	4a04      	ldr	r2, [pc, #16]	; (8006d6c <prvResetNextTaskUnblockTime+0x3c>)
 8006d5a:	6013      	str	r3, [r2, #0]
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000f18 	.word	0x20000f18
 8006d6c:	20000f80 	.word	0x20000f80

08006d70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d76:	4b0b      	ldr	r3, [pc, #44]	; (8006da4 <xTaskGetSchedulerState+0x34>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	e008      	b.n	8006d96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d84:	4b08      	ldr	r3, [pc, #32]	; (8006da8 <xTaskGetSchedulerState+0x38>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	e001      	b.n	8006d96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d96:	687b      	ldr	r3, [r7, #4]
	}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	20000f6c 	.word	0x20000f6c
 8006da8:	20000f88 	.word	0x20000f88

08006dac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d051      	beq.n	8006e66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <xTaskPriorityInherit+0xc4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d241      	bcs.n	8006e54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	db06      	blt.n	8006de6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <xTaskPriorityInherit+0xc4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6959      	ldr	r1, [r3, #20]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dee:	4613      	mov	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <xTaskPriorityInherit+0xc8>)
 8006df8:	4413      	add	r3, r2
 8006dfa:	4299      	cmp	r1, r3
 8006dfc:	d122      	bne.n	8006e44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe f95e 	bl	80050c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e08:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <xTaskPriorityInherit+0xc4>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4b18      	ldr	r3, [pc, #96]	; (8006e78 <xTaskPriorityInherit+0xcc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d903      	bls.n	8006e26 <xTaskPriorityInherit+0x7a>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <xTaskPriorityInherit+0xcc>)
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <xTaskPriorityInherit+0xc8>)
 8006e34:	441a      	add	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7fe f8e4 	bl	800500a <vListInsertEnd>
 8006e42:	e004      	b.n	8006e4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <xTaskPriorityInherit+0xc4>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	e008      	b.n	8006e66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e58:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <xTaskPriorityInherit+0xc4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d201      	bcs.n	8006e66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e62:	2301      	movs	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e66:	68fb      	ldr	r3, [r7, #12]
	}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000a8c 	.word	0x20000a8c
 8006e74:	20000a90 	.word	0x20000a90
 8006e78:	20000f68 	.word	0x20000f68

08006e7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d056      	beq.n	8006f40 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e92:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <xTaskPriorityDisinherit+0xd0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d00a      	beq.n	8006eb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	60bb      	str	r3, [r7, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	1e5a      	subs	r2, r3, #1
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d02c      	beq.n	8006f40 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d128      	bne.n	8006f40 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f8e6 	bl	80050c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <xTaskPriorityDisinherit+0xd4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d903      	bls.n	8006f20 <xTaskPriorityDisinherit+0xa4>
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <xTaskPriorityDisinherit+0xd4>)
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <xTaskPriorityDisinherit+0xd8>)
 8006f2e:	441a      	add	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7fe f867 	bl	800500a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f40:	697b      	ldr	r3, [r7, #20]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000a8c 	.word	0x20000a8c
 8006f50:	20000f68 	.word	0x20000f68
 8006f54:	20000a90 	.word	0x20000a90

08006f58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f66:	2301      	movs	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d06a      	beq.n	8007046 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	60fb      	str	r3, [r7, #12]
}
 8006f8a:	bf00      	nop
 8006f8c:	e7fe      	b.n	8006f8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d902      	bls.n	8006f9e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e002      	b.n	8006fa4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d04b      	beq.n	8007046 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d146      	bne.n	8007046 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fb8:	4b25      	ldr	r3, [pc, #148]	; (8007050 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d10a      	bne.n	8006fd8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60bb      	str	r3, [r7, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db04      	blt.n	8006ff6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007006:	4413      	add	r3, r2
 8007008:	4299      	cmp	r1, r3
 800700a:	d11c      	bne.n	8007046 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe f857 	bl	80050c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	4a0c      	ldr	r2, [pc, #48]	; (8007058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a07      	ldr	r2, [pc, #28]	; (8007054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007038:	441a      	add	r2, r3
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fd ffe2 	bl	800500a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007046:	bf00      	nop
 8007048:	3720      	adds	r7, #32
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000a8c 	.word	0x20000a8c
 8007054:	20000a90 	.word	0x20000a90
 8007058:	20000f68 	.word	0x20000f68

0800705c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pvTaskIncrementMutexHeldCount+0x24>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <pvTaskIncrementMutexHeldCount+0x24>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800706e:	3201      	adds	r2, #1
 8007070:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007072:	4b03      	ldr	r3, [pc, #12]	; (8007080 <pvTaskIncrementMutexHeldCount+0x24>)
 8007074:	681b      	ldr	r3, [r3, #0]
	}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000a8c 	.word	0x20000a8c

08007084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800708e:	4b21      	ldr	r3, [pc, #132]	; (8007114 <prvAddCurrentTaskToDelayedList+0x90>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007094:	4b20      	ldr	r3, [pc, #128]	; (8007118 <prvAddCurrentTaskToDelayedList+0x94>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe f812 	bl	80050c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d10a      	bne.n	80070be <prvAddCurrentTaskToDelayedList+0x3a>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ae:	4b1a      	ldr	r3, [pc, #104]	; (8007118 <prvAddCurrentTaskToDelayedList+0x94>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4819      	ldr	r0, [pc, #100]	; (800711c <prvAddCurrentTaskToDelayedList+0x98>)
 80070b8:	f7fd ffa7 	bl	800500a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070bc:	e026      	b.n	800710c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4413      	add	r3, r2
 80070c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d209      	bcs.n	80070ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <prvAddCurrentTaskToDelayedList+0x94>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fd ffb5 	bl	8005052 <vListInsert>
}
 80070e8:	e010      	b.n	800710c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	4b0a      	ldr	r3, [pc, #40]	; (8007118 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f7fd ffab 	bl	8005052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	d202      	bcs.n	800710c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007106:	4a08      	ldr	r2, [pc, #32]	; (8007128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6013      	str	r3, [r2, #0]
}
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	20000f64 	.word	0x20000f64
 8007118:	20000a8c 	.word	0x20000a8c
 800711c:	20000f4c 	.word	0x20000f4c
 8007120:	20000f1c 	.word	0x20000f1c
 8007124:	20000f18 	.word	0x20000f18
 8007128:	20000f80 	.word	0x20000f80

0800712c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007136:	f000 fb07 	bl	8007748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800713a:	4b1c      	ldr	r3, [pc, #112]	; (80071ac <xTimerCreateTimerTask+0x80>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d021      	beq.n	8007186 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800714a:	1d3a      	adds	r2, r7, #4
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd ff11 	bl	8004f7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800715a:	6879      	ldr	r1, [r7, #4]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	9202      	str	r2, [sp, #8]
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	2302      	movs	r3, #2
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	2300      	movs	r3, #0
 800716a:	460a      	mov	r2, r1
 800716c:	4910      	ldr	r1, [pc, #64]	; (80071b0 <xTimerCreateTimerTask+0x84>)
 800716e:	4811      	ldr	r0, [pc, #68]	; (80071b4 <xTimerCreateTimerTask+0x88>)
 8007170:	f7fe ffe0 	bl	8006134 <xTaskCreateStatic>
 8007174:	4603      	mov	r3, r0
 8007176:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <xTimerCreateTimerTask+0x8c>)
 8007178:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <xTimerCreateTimerTask+0x8c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007182:	2301      	movs	r3, #1
 8007184:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	613b      	str	r3, [r7, #16]
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071a2:	697b      	ldr	r3, [r7, #20]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20000fbc 	.word	0x20000fbc
 80071b0:	0800abac 	.word	0x0800abac
 80071b4:	080072f1 	.word	0x080072f1
 80071b8:	20000fc0 	.word	0x20000fc0

080071bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10a      	bne.n	80071ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	623b      	str	r3, [r7, #32]
}
 80071e6:	bf00      	nop
 80071e8:	e7fe      	b.n	80071e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <xTimerGenericCommand+0x98>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d02a      	beq.n	8007248 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b05      	cmp	r3, #5
 8007202:	dc18      	bgt.n	8007236 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007204:	f7ff fdb4 	bl	8006d70 <xTaskGetSchedulerState>
 8007208:	4603      	mov	r3, r0
 800720a:	2b02      	cmp	r3, #2
 800720c:	d109      	bne.n	8007222 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800720e:	4b11      	ldr	r3, [pc, #68]	; (8007254 <xTimerGenericCommand+0x98>)
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f107 0110 	add.w	r1, r7, #16
 8007216:	2300      	movs	r3, #0
 8007218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721a:	f7fe f925 	bl	8005468 <xQueueGenericSend>
 800721e:	6278      	str	r0, [r7, #36]	; 0x24
 8007220:	e012      	b.n	8007248 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007222:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <xTimerGenericCommand+0x98>)
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f107 0110 	add.w	r1, r7, #16
 800722a:	2300      	movs	r3, #0
 800722c:	2200      	movs	r2, #0
 800722e:	f7fe f91b 	bl	8005468 <xQueueGenericSend>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24
 8007234:	e008      	b.n	8007248 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007236:	4b07      	ldr	r3, [pc, #28]	; (8007254 <xTimerGenericCommand+0x98>)
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f107 0110 	add.w	r1, r7, #16
 800723e:	2300      	movs	r3, #0
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	f7fe fa0f 	bl	8005664 <xQueueGenericSendFromISR>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800724a:	4618      	mov	r0, r3
 800724c:	3728      	adds	r7, #40	; 0x28
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000fbc 	.word	0x20000fbc

08007258 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af02      	add	r7, sp, #8
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <prvProcessExpiredTimer+0x94>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	3304      	adds	r3, #4
 8007270:	4618      	mov	r0, r3
 8007272:	f7fd ff27 	bl	80050c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727c:	f003 0304 	and.w	r3, r3, #4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d022      	beq.n	80072ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	18d1      	adds	r1, r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f000 f8d1 	bl	8007438 <prvInsertTimerInActiveList>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01f      	beq.n	80072dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800729c:	2300      	movs	r3, #0
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	2100      	movs	r1, #0
 80072a6:	6978      	ldr	r0, [r7, #20]
 80072a8:	f7ff ff88 	bl	80071bc <xTimerGenericCommand>
 80072ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d113      	bne.n	80072dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	6978      	ldr	r0, [r7, #20]
 80072e2:	4798      	blx	r3
}
 80072e4:	bf00      	nop
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000fb4 	.word	0x20000fb4

080072f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072f8:	f107 0308 	add.w	r3, r7, #8
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f857 	bl	80073b0 <prvGetNextExpireTime>
 8007302:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f803 	bl	8007314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800730e:	f000 f8d5 	bl	80074bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007312:	e7f1      	b.n	80072f8 <prvTimerTask+0x8>

08007314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800731e:	f7ff f945 	bl	80065ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007322:	f107 0308 	add.w	r3, r7, #8
 8007326:	4618      	mov	r0, r3
 8007328:	f000 f866 	bl	80073f8 <prvSampleTimeNow>
 800732c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d130      	bne.n	8007396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <prvProcessTimerOrBlockTask+0x3c>
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	429a      	cmp	r2, r3
 8007340:	d806      	bhi.n	8007350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007342:	f7ff f941 	bl	80065c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007346:	68f9      	ldr	r1, [r7, #12]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff ff85 	bl	8007258 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800734e:	e024      	b.n	800739a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d008      	beq.n	8007368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <prvProcessTimerOrBlockTask+0x90>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <prvProcessTimerOrBlockTask+0x50>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <prvProcessTimerOrBlockTask+0x52>
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007368:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <prvProcessTimerOrBlockTask+0x94>)
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4619      	mov	r1, r3
 8007376:	f7fe fea9 	bl	80060cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800737a:	f7ff f925 	bl	80065c8 <xTaskResumeAll>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10a      	bne.n	800739a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007384:	4b09      	ldr	r3, [pc, #36]	; (80073ac <prvProcessTimerOrBlockTask+0x98>)
 8007386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	f3bf 8f6f 	isb	sy
}
 8007394:	e001      	b.n	800739a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007396:	f7ff f917 	bl	80065c8 <xTaskResumeAll>
}
 800739a:	bf00      	nop
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	20000fb8 	.word	0x20000fb8
 80073a8:	20000fbc 	.word	0x20000fbc
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073b8:	4b0e      	ldr	r3, [pc, #56]	; (80073f4 <prvGetNextExpireTime+0x44>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <prvGetNextExpireTime+0x16>
 80073c2:	2201      	movs	r2, #1
 80073c4:	e000      	b.n	80073c8 <prvGetNextExpireTime+0x18>
 80073c6:	2200      	movs	r2, #0
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <prvGetNextExpireTime+0x44>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e001      	b.n	80073e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073e4:	68fb      	ldr	r3, [r7, #12]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20000fb4 	.word	0x20000fb4

080073f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007400:	f7ff f980 	bl	8006704 <xTaskGetTickCount>
 8007404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <prvSampleTimeNow+0x3c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d205      	bcs.n	800741c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007410:	f000 f936 	bl	8007680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e002      	b.n	8007422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007422:	4a04      	ldr	r2, [pc, #16]	; (8007434 <prvSampleTimeNow+0x3c>)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007428:	68fb      	ldr	r3, [r7, #12]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000fc4 	.word	0x20000fc4

08007438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	429a      	cmp	r2, r3
 800745c:	d812      	bhi.n	8007484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	d302      	bcc.n	8007472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e01b      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007472:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <prvInsertTimerInActiveList+0x7c>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7fd fde8 	bl	8005052 <vListInsert>
 8007482:	e012      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d206      	bcs.n	800749a <prvInsertTimerInActiveList+0x62>
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d302      	bcc.n	800749a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	e007      	b.n	80074aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <prvInsertTimerInActiveList+0x80>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3304      	adds	r3, #4
 80074a2:	4619      	mov	r1, r3
 80074a4:	4610      	mov	r0, r2
 80074a6:	f7fd fdd4 	bl	8005052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000fb8 	.word	0x20000fb8
 80074b8:	20000fb4 	.word	0x20000fb4

080074bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08e      	sub	sp, #56	; 0x38
 80074c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074c2:	e0ca      	b.n	800765a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	da18      	bge.n	80074fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	3304      	adds	r3, #4
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f2:	6850      	ldr	r0, [r2, #4]
 80074f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f6:	6892      	ldr	r2, [r2, #8]
 80074f8:	4611      	mov	r1, r2
 80074fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f2c0 80aa 	blt.w	8007658 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	3304      	adds	r3, #4
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd fdd5 	bl	80050c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800751a:	463b      	mov	r3, r7
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff ff6b 	bl	80073f8 <prvSampleTimeNow>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b09      	cmp	r3, #9
 8007528:	f200 8097 	bhi.w	800765a <prvProcessReceivedCommands+0x19e>
 800752c:	a201      	add	r2, pc, #4	; (adr r2, 8007534 <prvProcessReceivedCommands+0x78>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	0800755d 	.word	0x0800755d
 8007538:	0800755d 	.word	0x0800755d
 800753c:	0800755d 	.word	0x0800755d
 8007540:	080075d1 	.word	0x080075d1
 8007544:	080075e5 	.word	0x080075e5
 8007548:	0800762f 	.word	0x0800762f
 800754c:	0800755d 	.word	0x0800755d
 8007550:	0800755d 	.word	0x0800755d
 8007554:	080075d1 	.word	0x080075d1
 8007558:	080075e5 	.word	0x080075e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	18d1      	adds	r1, r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800757c:	f7ff ff5c 	bl	8007438 <prvInsertTimerInActiveList>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d069      	beq.n	800765a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800758c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007594:	f003 0304 	and.w	r3, r3, #4
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05e      	beq.n	800765a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	441a      	add	r2, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f7ff fe05 	bl	80071bc <xTimerGenericCommand>
 80075b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d14f      	bne.n	800765a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	61bb      	str	r3, [r7, #24]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80075e2:	e03a      	b.n	800765a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	617b      	str	r3, [r7, #20]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007628:	f7ff ff06 	bl	8007438 <prvInsertTimerInActiveList>
					break;
 800762c:	e015      	b.n	800765a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800763c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800763e:	f000 fbdf 	bl	8007e00 <vPortFree>
 8007642:	e00a      	b.n	800765a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007656:	e000      	b.n	800765a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800765a:	4b08      	ldr	r3, [pc, #32]	; (800767c <prvProcessReceivedCommands+0x1c0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	1d39      	adds	r1, r7, #4
 8007660:	2200      	movs	r2, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f926 	bl	80058b4 <xQueueReceive>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f47f af2a 	bne.w	80074c4 <prvProcessReceivedCommands+0x8>
	}
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	3730      	adds	r7, #48	; 0x30
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20000fbc 	.word	0x20000fbc

08007680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007686:	e048      	b.n	800771a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007688:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <prvSwitchTimerLists+0xc0>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007692:	4b2b      	ldr	r3, [pc, #172]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3304      	adds	r3, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fd fd0f 	bl	80050c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d02e      	beq.n	800771a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4413      	add	r3, r2
 80076c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90e      	bls.n	80076ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <prvSwitchTimerLists+0xc0>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f7fd fcb4 	bl	8005052 <vListInsert>
 80076ea:	e016      	b.n	800771a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	2300      	movs	r3, #0
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	2100      	movs	r1, #0
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fd60 	bl	80071bc <xTimerGenericCommand>
 80076fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10a      	bne.n	800771a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	603b      	str	r3, [r7, #0]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800771a:	4b09      	ldr	r3, [pc, #36]	; (8007740 <prvSwitchTimerLists+0xc0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1b1      	bne.n	8007688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007724:	4b06      	ldr	r3, [pc, #24]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <prvSwitchTimerLists+0xc4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a04      	ldr	r2, [pc, #16]	; (8007740 <prvSwitchTimerLists+0xc0>)
 8007730:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <prvSwitchTimerLists+0xc4>)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6013      	str	r3, [r2, #0]
}
 8007738:	bf00      	nop
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000fb4 	.word	0x20000fb4
 8007744:	20000fb8 	.word	0x20000fb8

08007748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800774e:	f000 f969 	bl	8007a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007752:	4b15      	ldr	r3, [pc, #84]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d120      	bne.n	800779c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800775a:	4814      	ldr	r0, [pc, #80]	; (80077ac <prvCheckForValidListAndQueue+0x64>)
 800775c:	f7fd fc28 	bl	8004fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007760:	4813      	ldr	r0, [pc, #76]	; (80077b0 <prvCheckForValidListAndQueue+0x68>)
 8007762:	f7fd fc25 	bl	8004fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <prvCheckForValidListAndQueue+0x6c>)
 8007768:	4a10      	ldr	r2, [pc, #64]	; (80077ac <prvCheckForValidListAndQueue+0x64>)
 800776a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800776c:	4b12      	ldr	r3, [pc, #72]	; (80077b8 <prvCheckForValidListAndQueue+0x70>)
 800776e:	4a10      	ldr	r2, [pc, #64]	; (80077b0 <prvCheckForValidListAndQueue+0x68>)
 8007770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007772:	2300      	movs	r3, #0
 8007774:	9300      	str	r3, [sp, #0]
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <prvCheckForValidListAndQueue+0x74>)
 8007778:	4a11      	ldr	r2, [pc, #68]	; (80077c0 <prvCheckForValidListAndQueue+0x78>)
 800777a:	2110      	movs	r1, #16
 800777c:	200a      	movs	r0, #10
 800777e:	f7fd fd33 	bl	80051e8 <xQueueGenericCreateStatic>
 8007782:	4603      	mov	r3, r0
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007788:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <prvCheckForValidListAndQueue+0x60>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	490b      	ldr	r1, [pc, #44]	; (80077c4 <prvCheckForValidListAndQueue+0x7c>)
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fc44 	bl	8006024 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f000 f972 	bl	8007a84 <vPortExitCritical>
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000fbc 	.word	0x20000fbc
 80077ac:	20000f8c 	.word	0x20000f8c
 80077b0:	20000fa0 	.word	0x20000fa0
 80077b4:	20000fb4 	.word	0x20000fb4
 80077b8:	20000fb8 	.word	0x20000fb8
 80077bc:	20001068 	.word	0x20001068
 80077c0:	20000fc8 	.word	0x20000fc8
 80077c4:	0800abb4 	.word	0x0800abb4

080077c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b04      	subs	r3, #4
 80077d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f023 0201 	bic.w	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3b04      	subs	r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077f8:	4a0c      	ldr	r2, [pc, #48]	; (800782c <pxPortInitialiseStack+0x64>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	3b14      	subs	r3, #20
 8007802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3b04      	subs	r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f06f 0202 	mvn.w	r2, #2
 8007816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	3b20      	subs	r3, #32
 800781c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800781e:	68fb      	ldr	r3, [r7, #12]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	08007831 	.word	0x08007831

08007830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800783a:	4b12      	ldr	r3, [pc, #72]	; (8007884 <prvTaskExitError+0x54>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d00a      	beq.n	800785a <prvTaskExitError+0x2a>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	60fb      	str	r3, [r7, #12]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <prvTaskExitError+0x28>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	60bb      	str	r3, [r7, #8]
}
 800786c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800786e:	bf00      	nop
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0fc      	beq.n	8007870 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	2000000c 	.word	0x2000000c
	...

08007890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pxCurrentTCBConst2>)
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	f380 8809 	msr	PSP, r0
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	4770      	bx	lr
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst2>:
 80078b0:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078b8:	4808      	ldr	r0, [pc, #32]	; (80078dc <prvPortStartFirstTask+0x24>)
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f380 8808 	msr	MSP, r0
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	f380 8814 	msr	CONTROL, r0
 80078ca:	b662      	cpsie	i
 80078cc:	b661      	cpsie	f
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	df00      	svc	0
 80078d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078da:	bf00      	nop
 80078dc:	e000ed08 	.word	0xe000ed08

080078e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078e6:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <xPortStartScheduler+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a46      	ldr	r2, [pc, #280]	; (8007a04 <xPortStartScheduler+0x124>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10a      	bne.n	8007906 <xPortStartScheduler+0x26>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
 8007904:	e7fe      	b.n	8007904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007906:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <xPortStartScheduler+0x120>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a3f      	ldr	r2, [pc, #252]	; (8007a08 <xPortStartScheduler+0x128>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10a      	bne.n	8007926 <xPortStartScheduler+0x46>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007926:	4b39      	ldr	r3, [pc, #228]	; (8007a0c <xPortStartScheduler+0x12c>)
 8007928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	22ff      	movs	r2, #255	; 0xff
 8007936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <xPortStartScheduler+0x130>)
 800794c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <xPortStartScheduler+0x134>)
 8007950:	2207      	movs	r2, #7
 8007952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007954:	e009      	b.n	800796a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007956:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <xPortStartScheduler+0x134>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3b01      	subs	r3, #1
 800795c:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <xPortStartScheduler+0x134>)
 800795e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007960:	78fb      	ldrb	r3, [r7, #3]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d0ef      	beq.n	8007956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007976:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <xPortStartScheduler+0x134>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f1c3 0307 	rsb	r3, r3, #7
 800797e:	2b04      	cmp	r3, #4
 8007980:	d00a      	beq.n	8007998 <xPortStartScheduler+0xb8>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	60bb      	str	r3, [r7, #8]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007998:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <xPortStartScheduler+0x134>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <xPortStartScheduler+0x134>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079aa:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <xPortStartScheduler+0x134>)
 80079ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079b6:	4b18      	ldr	r3, [pc, #96]	; (8007a18 <xPortStartScheduler+0x138>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a17      	ldr	r2, [pc, #92]	; (8007a18 <xPortStartScheduler+0x138>)
 80079bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <xPortStartScheduler+0x138>)
 80079c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80079cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079ce:	f000 f8dd 	bl	8007b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079d2:	4b12      	ldr	r3, [pc, #72]	; (8007a1c <xPortStartScheduler+0x13c>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079d8:	f000 f8fc 	bl	8007bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xPortStartScheduler+0x140>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <xPortStartScheduler+0x140>)
 80079e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079e8:	f7ff ff66 	bl	80078b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ec:	f7fe ff54 	bl	8006898 <vTaskSwitchContext>
	prvTaskExitError();
 80079f0:	f7ff ff1e 	bl	8007830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000ed00 	.word	0xe000ed00
 8007a04:	410fc271 	.word	0x410fc271
 8007a08:	410fc270 	.word	0x410fc270
 8007a0c:	e000e400 	.word	0xe000e400
 8007a10:	200010b8 	.word	0x200010b8
 8007a14:	200010bc 	.word	0x200010bc
 8007a18:	e000ed20 	.word	0xe000ed20
 8007a1c:	2000000c 	.word	0x2000000c
 8007a20:	e000ef34 	.word	0xe000ef34

08007a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a3e:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	4a0d      	ldr	r2, [pc, #52]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a48:	4b0c      	ldr	r3, [pc, #48]	; (8007a7c <vPortEnterCritical+0x58>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d10f      	bne.n	8007a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vPortEnterCritical+0x5c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	603b      	str	r3, [r7, #0]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <vPortEnterCritical+0x4a>
	}
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000000c 	.word	0x2000000c
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a8a:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <vPortExitCritical+0x50>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10a      	bne.n	8007aa8 <vPortExitCritical+0x24>
	__asm volatile
 8007a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	607b      	str	r3, [r7, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	e7fe      	b.n	8007aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <vPortExitCritical+0x50>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ab2:	4b08      	ldr	r3, [pc, #32]	; (8007ad4 <vPortExitCritical+0x50>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <vPortExitCritical+0x42>
 8007aba:	2300      	movs	r3, #0
 8007abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	f383 8811 	msr	BASEPRI, r3
}
 8007ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	2000000c 	.word	0x2000000c
	...

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b15      	ldr	r3, [pc, #84]	; (8007b40 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f01e 0f10 	tst.w	lr, #16
 8007af0:	bf08      	it	eq
 8007af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b04:	f380 8811 	msr	BASEPRI, r0
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f7fe fec2 	bl	8006898 <vTaskSwitchContext>
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f380 8811 	msr	BASEPRI, r0
 8007b1c:	bc09      	pop	{r0, r3}
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	6808      	ldr	r0, [r1, #0]
 8007b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b26:	f01e 0f10 	tst.w	lr, #16
 8007b2a:	bf08      	it	eq
 8007b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b30:	f380 8809 	msr	PSP, r0
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst>:
 8007b40:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b62:	f7fe fddf 	bl	8006724 <xTaskIncrementTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <xPortSysTickHandler+0x40>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <vPortSetupTimerInterrupt+0x38>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <vPortSetupTimerInterrupt+0x3c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <vPortSetupTimerInterrupt+0x40>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	4a09      	ldr	r2, [pc, #36]	; (8007bd0 <vPortSetupTimerInterrupt+0x44>)
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bae:	4b04      	ldr	r3, [pc, #16]	; (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	e000e010 	.word	0xe000e010
 8007bc4:	e000e018 	.word	0xe000e018
 8007bc8:	20000000 	.word	0x20000000
 8007bcc:	10624dd3 	.word	0x10624dd3
 8007bd0:	e000e014 	.word	0xe000e014

08007bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007be4 <vPortEnableVFP+0x10>
 8007bd8:	6801      	ldr	r1, [r0, #0]
 8007bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bde:	6001      	str	r1, [r0, #0]
 8007be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007be2:	bf00      	nop
 8007be4:	e000ed88 	.word	0xe000ed88

08007be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bee:	f3ef 8305 	mrs	r3, IPSR
 8007bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d914      	bls.n	8007c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bfa:	4a17      	ldr	r2, [pc, #92]	; (8007c58 <vPortValidateInterruptPriority+0x70>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c04:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <vPortValidateInterruptPriority+0x74>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	7afa      	ldrb	r2, [r7, #11]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d20a      	bcs.n	8007c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	e7fe      	b.n	8007c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <vPortValidateInterruptPriority+0x78>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <vPortValidateInterruptPriority+0x7c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d90a      	bls.n	8007c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	603b      	str	r3, [r7, #0]
}
 8007c46:	bf00      	nop
 8007c48:	e7fe      	b.n	8007c48 <vPortValidateInterruptPriority+0x60>
	}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	e000e3f0 	.word	0xe000e3f0
 8007c5c:	200010b8 	.word	0x200010b8
 8007c60:	e000ed0c 	.word	0xe000ed0c
 8007c64:	200010bc 	.word	0x200010bc

08007c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c74:	f7fe fc9a 	bl	80065ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c78:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <pvPortMalloc+0x180>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c80:	f000 f920 	bl	8007ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c84:	4b59      	ldr	r3, [pc, #356]	; (8007dec <pvPortMalloc+0x184>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8093 	bne.w	8007db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01d      	beq.n	8007cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c98:	2208      	movs	r2, #8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d014      	beq.n	8007cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f023 0307 	bic.w	r3, r3, #7
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	617b      	str	r3, [r7, #20]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d06e      	beq.n	8007db8 <pvPortMalloc+0x150>
 8007cda:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <pvPortMalloc+0x188>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d869      	bhi.n	8007db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <pvPortMalloc+0x18c>)
 8007ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ce8:	4b42      	ldr	r3, [pc, #264]	; (8007df4 <pvPortMalloc+0x18c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cee:	e004      	b.n	8007cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <pvPortMalloc+0xa4>
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f1      	bne.n	8007cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d0c:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <pvPortMalloc+0x180>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d050      	beq.n	8007db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	4413      	add	r3, r2
 8007d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	2308      	movs	r3, #8
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d91f      	bls.n	8007d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <pvPortMalloc+0xf8>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	613b      	str	r3, [r7, #16]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d72:	69b8      	ldr	r0, [r7, #24]
 8007d74:	f000 f908 	bl	8007f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d78:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <pvPortMalloc+0x188>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <pvPortMalloc+0x188>)
 8007d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <pvPortMalloc+0x188>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <pvPortMalloc+0x190>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d203      	bcs.n	8007d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d92:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <pvPortMalloc+0x188>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <pvPortMalloc+0x190>)
 8007d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <pvPortMalloc+0x184>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <pvPortMalloc+0x194>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <pvPortMalloc+0x194>)
 8007db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007db8:	f7fe fc06 	bl	80065c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <pvPortMalloc+0x174>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <pvPortMalloc+0x172>
	return pvReturn;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20002450 	.word	0x20002450
 8007dec:	20002464 	.word	0x20002464
 8007df0:	20002454 	.word	0x20002454
 8007df4:	20002448 	.word	0x20002448
 8007df8:	20002458 	.word	0x20002458
 8007dfc:	2000245c 	.word	0x2000245c

08007e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d04d      	beq.n	8007eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e12:	2308      	movs	r3, #8
 8007e14:	425b      	negs	r3, r3
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <vPortFree+0xb8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <vPortFree+0x44>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <vPortFree+0x62>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <vPortFree+0xb8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01e      	beq.n	8007eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d11a      	bne.n	8007eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <vPortFree+0xb8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	43db      	mvns	r3, r3
 8007e82:	401a      	ands	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e88:	f7fe fb90 	bl	80065ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <vPortFree+0xbc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <vPortFree+0xbc>)
 8007e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f000 f874 	bl	8007f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <vPortFree+0xc0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a06      	ldr	r2, [pc, #24]	; (8007ec0 <vPortFree+0xc0>)
 8007ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eaa:	f7fe fb8d 	bl	80065c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eae:	bf00      	nop
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20002464 	.word	0x20002464
 8007ebc:	20002454 	.word	0x20002454
 8007ec0:	20002460 	.word	0x20002460

08007ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eca:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <prvHeapInit+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3307      	adds	r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <prvHeapInit+0xac>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007efc:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <prvHeapInit+0xb0>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <prvHeapInit+0xb0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f10:	2208      	movs	r2, #8
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0307 	bic.w	r3, r3, #7
 8007f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <prvHeapInit+0xb4>)
 8007f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <prvHeapInit+0xb4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvHeapInit+0xb4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f44:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvHeapInit+0xb4>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <prvHeapInit+0xb8>)
 8007f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <prvHeapInit+0xbc>)
 8007f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <prvHeapInit+0xc0>)
 8007f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	200010c0 	.word	0x200010c0
 8007f74:	20002448 	.word	0x20002448
 8007f78:	20002450 	.word	0x20002450
 8007f7c:	20002458 	.word	0x20002458
 8007f80:	20002454 	.word	0x20002454
 8007f84:	20002464 	.word	0x20002464

08007f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f90:	4b28      	ldr	r3, [pc, #160]	; (8008034 <prvInsertBlockIntoFreeList+0xac>)
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	e002      	b.n	8007f9c <prvInsertBlockIntoFreeList+0x14>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d8f7      	bhi.n	8007f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d108      	bne.n	8007fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d118      	bne.n	8008010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d00d      	beq.n	8008006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e008      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e003      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d002      	beq.n	8008026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20002448 	.word	0x20002448
 8008038:	20002450 	.word	0x20002450

0800803c <__errno>:
 800803c:	4b01      	ldr	r3, [pc, #4]	; (8008044 <__errno+0x8>)
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20000010 	.word	0x20000010

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	; (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	; (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	; (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	; (800808c <__libc_init_array+0x44>)
 800805c:	f002 fd4e 	bl	800aafc <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	0800b0bc 	.word	0x0800b0bc
 8008084:	0800b0bc 	.word	0x0800b0bc
 8008088:	0800b0bc 	.word	0x0800b0bc
 800808c:	0800b0c0 	.word	0x0800b0c0

08008090 <memcpy>:
 8008090:	440a      	add	r2, r1
 8008092:	4291      	cmp	r1, r2
 8008094:	f100 33ff 	add.w	r3, r0, #4294967295
 8008098:	d100      	bne.n	800809c <memcpy+0xc>
 800809a:	4770      	bx	lr
 800809c:	b510      	push	{r4, lr}
 800809e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080a6:	4291      	cmp	r1, r2
 80080a8:	d1f9      	bne.n	800809e <memcpy+0xe>
 80080aa:	bd10      	pop	{r4, pc}

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <__cvt>:
 80080bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	ec55 4b10 	vmov	r4, r5, d0
 80080c4:	2d00      	cmp	r5, #0
 80080c6:	460e      	mov	r6, r1
 80080c8:	4619      	mov	r1, r3
 80080ca:	462b      	mov	r3, r5
 80080cc:	bfbb      	ittet	lt
 80080ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080d2:	461d      	movlt	r5, r3
 80080d4:	2300      	movge	r3, #0
 80080d6:	232d      	movlt	r3, #45	; 0x2d
 80080d8:	700b      	strb	r3, [r1, #0]
 80080da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080e0:	4691      	mov	r9, r2
 80080e2:	f023 0820 	bic.w	r8, r3, #32
 80080e6:	bfbc      	itt	lt
 80080e8:	4622      	movlt	r2, r4
 80080ea:	4614      	movlt	r4, r2
 80080ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080f0:	d005      	beq.n	80080fe <__cvt+0x42>
 80080f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080f6:	d100      	bne.n	80080fa <__cvt+0x3e>
 80080f8:	3601      	adds	r6, #1
 80080fa:	2102      	movs	r1, #2
 80080fc:	e000      	b.n	8008100 <__cvt+0x44>
 80080fe:	2103      	movs	r1, #3
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	ab02      	add	r3, sp, #8
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	ec45 4b10 	vmov	d0, r4, r5
 800810c:	4653      	mov	r3, sl
 800810e:	4632      	mov	r2, r6
 8008110:	f000 fce2 	bl	8008ad8 <_dtoa_r>
 8008114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008118:	4607      	mov	r7, r0
 800811a:	d102      	bne.n	8008122 <__cvt+0x66>
 800811c:	f019 0f01 	tst.w	r9, #1
 8008120:	d022      	beq.n	8008168 <__cvt+0xac>
 8008122:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008126:	eb07 0906 	add.w	r9, r7, r6
 800812a:	d110      	bne.n	800814e <__cvt+0x92>
 800812c:	783b      	ldrb	r3, [r7, #0]
 800812e:	2b30      	cmp	r3, #48	; 0x30
 8008130:	d10a      	bne.n	8008148 <__cvt+0x8c>
 8008132:	2200      	movs	r2, #0
 8008134:	2300      	movs	r3, #0
 8008136:	4620      	mov	r0, r4
 8008138:	4629      	mov	r1, r5
 800813a:	f7f8 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800813e:	b918      	cbnz	r0, 8008148 <__cvt+0x8c>
 8008140:	f1c6 0601 	rsb	r6, r6, #1
 8008144:	f8ca 6000 	str.w	r6, [sl]
 8008148:	f8da 3000 	ldr.w	r3, [sl]
 800814c:	4499      	add	r9, r3
 800814e:	2200      	movs	r2, #0
 8008150:	2300      	movs	r3, #0
 8008152:	4620      	mov	r0, r4
 8008154:	4629      	mov	r1, r5
 8008156:	f7f8 fcb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800815a:	b108      	cbz	r0, 8008160 <__cvt+0xa4>
 800815c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008160:	2230      	movs	r2, #48	; 0x30
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	454b      	cmp	r3, r9
 8008166:	d307      	bcc.n	8008178 <__cvt+0xbc>
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800816c:	1bdb      	subs	r3, r3, r7
 800816e:	4638      	mov	r0, r7
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	b004      	add	sp, #16
 8008174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008178:	1c59      	adds	r1, r3, #1
 800817a:	9103      	str	r1, [sp, #12]
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e7f0      	b.n	8008162 <__cvt+0xa6>

08008180 <__exponent>:
 8008180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008182:	4603      	mov	r3, r0
 8008184:	2900      	cmp	r1, #0
 8008186:	bfb8      	it	lt
 8008188:	4249      	neglt	r1, r1
 800818a:	f803 2b02 	strb.w	r2, [r3], #2
 800818e:	bfb4      	ite	lt
 8008190:	222d      	movlt	r2, #45	; 0x2d
 8008192:	222b      	movge	r2, #43	; 0x2b
 8008194:	2909      	cmp	r1, #9
 8008196:	7042      	strb	r2, [r0, #1]
 8008198:	dd2a      	ble.n	80081f0 <__exponent+0x70>
 800819a:	f10d 0407 	add.w	r4, sp, #7
 800819e:	46a4      	mov	ip, r4
 80081a0:	270a      	movs	r7, #10
 80081a2:	46a6      	mov	lr, r4
 80081a4:	460a      	mov	r2, r1
 80081a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80081aa:	fb07 1516 	mls	r5, r7, r6, r1
 80081ae:	3530      	adds	r5, #48	; 0x30
 80081b0:	2a63      	cmp	r2, #99	; 0x63
 80081b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80081b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081ba:	4631      	mov	r1, r6
 80081bc:	dcf1      	bgt.n	80081a2 <__exponent+0x22>
 80081be:	3130      	adds	r1, #48	; 0x30
 80081c0:	f1ae 0502 	sub.w	r5, lr, #2
 80081c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c8:	1c44      	adds	r4, r0, #1
 80081ca:	4629      	mov	r1, r5
 80081cc:	4561      	cmp	r1, ip
 80081ce:	d30a      	bcc.n	80081e6 <__exponent+0x66>
 80081d0:	f10d 0209 	add.w	r2, sp, #9
 80081d4:	eba2 020e 	sub.w	r2, r2, lr
 80081d8:	4565      	cmp	r5, ip
 80081da:	bf88      	it	hi
 80081dc:	2200      	movhi	r2, #0
 80081de:	4413      	add	r3, r2
 80081e0:	1a18      	subs	r0, r3, r0
 80081e2:	b003      	add	sp, #12
 80081e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081ee:	e7ed      	b.n	80081cc <__exponent+0x4c>
 80081f0:	2330      	movs	r3, #48	; 0x30
 80081f2:	3130      	adds	r1, #48	; 0x30
 80081f4:	7083      	strb	r3, [r0, #2]
 80081f6:	70c1      	strb	r1, [r0, #3]
 80081f8:	1d03      	adds	r3, r0, #4
 80081fa:	e7f1      	b.n	80081e0 <__exponent+0x60>

080081fc <_printf_float>:
 80081fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	ed2d 8b02 	vpush	{d8}
 8008204:	b08d      	sub	sp, #52	; 0x34
 8008206:	460c      	mov	r4, r1
 8008208:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800820c:	4616      	mov	r6, r2
 800820e:	461f      	mov	r7, r3
 8008210:	4605      	mov	r5, r0
 8008212:	f001 fb45 	bl	80098a0 <_localeconv_r>
 8008216:	f8d0 a000 	ldr.w	sl, [r0]
 800821a:	4650      	mov	r0, sl
 800821c:	f7f7 ffd8 	bl	80001d0 <strlen>
 8008220:	2300      	movs	r3, #0
 8008222:	930a      	str	r3, [sp, #40]	; 0x28
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	9305      	str	r3, [sp, #20]
 8008228:	f8d8 3000 	ldr.w	r3, [r8]
 800822c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008230:	3307      	adds	r3, #7
 8008232:	f023 0307 	bic.w	r3, r3, #7
 8008236:	f103 0208 	add.w	r2, r3, #8
 800823a:	f8c8 2000 	str.w	r2, [r8]
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008246:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800824a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800824e:	9307      	str	r3, [sp, #28]
 8008250:	f8cd 8018 	str.w	r8, [sp, #24]
 8008254:	ee08 0a10 	vmov	s16, r0
 8008258:	4b9f      	ldr	r3, [pc, #636]	; (80084d8 <_printf_float+0x2dc>)
 800825a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	f7f8 fc63 	bl	8000b2c <__aeabi_dcmpun>
 8008266:	bb88      	cbnz	r0, 80082cc <_printf_float+0xd0>
 8008268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800826c:	4b9a      	ldr	r3, [pc, #616]	; (80084d8 <_printf_float+0x2dc>)
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	f7f8 fc3d 	bl	8000af0 <__aeabi_dcmple>
 8008276:	bb48      	cbnz	r0, 80082cc <_printf_float+0xd0>
 8008278:	2200      	movs	r2, #0
 800827a:	2300      	movs	r3, #0
 800827c:	4640      	mov	r0, r8
 800827e:	4649      	mov	r1, r9
 8008280:	f7f8 fc2c 	bl	8000adc <__aeabi_dcmplt>
 8008284:	b110      	cbz	r0, 800828c <_printf_float+0x90>
 8008286:	232d      	movs	r3, #45	; 0x2d
 8008288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800828c:	4b93      	ldr	r3, [pc, #588]	; (80084dc <_printf_float+0x2e0>)
 800828e:	4894      	ldr	r0, [pc, #592]	; (80084e0 <_printf_float+0x2e4>)
 8008290:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008294:	bf94      	ite	ls
 8008296:	4698      	movls	r8, r3
 8008298:	4680      	movhi	r8, r0
 800829a:	2303      	movs	r3, #3
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	f023 0204 	bic.w	r2, r3, #4
 80082a4:	6022      	str	r2, [r4, #0]
 80082a6:	f04f 0900 	mov.w	r9, #0
 80082aa:	9700      	str	r7, [sp, #0]
 80082ac:	4633      	mov	r3, r6
 80082ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 f9d8 	bl	8008668 <_printf_common>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f040 8090 	bne.w	80083de <_printf_float+0x1e2>
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	b00d      	add	sp, #52	; 0x34
 80082c4:	ecbd 8b02 	vpop	{d8}
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	4640      	mov	r0, r8
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7f8 fc2a 	bl	8000b2c <__aeabi_dcmpun>
 80082d8:	b140      	cbz	r0, 80082ec <_printf_float+0xf0>
 80082da:	464b      	mov	r3, r9
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfbc      	itt	lt
 80082e0:	232d      	movlt	r3, #45	; 0x2d
 80082e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082e6:	487f      	ldr	r0, [pc, #508]	; (80084e4 <_printf_float+0x2e8>)
 80082e8:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <_printf_float+0x2ec>)
 80082ea:	e7d1      	b.n	8008290 <_printf_float+0x94>
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082f2:	9206      	str	r2, [sp, #24]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	d13f      	bne.n	8008378 <_printf_float+0x17c>
 80082f8:	2306      	movs	r3, #6
 80082fa:	6063      	str	r3, [r4, #4]
 80082fc:	9b05      	ldr	r3, [sp, #20]
 80082fe:	6861      	ldr	r1, [r4, #4]
 8008300:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008304:	2300      	movs	r3, #0
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	ab0a      	add	r3, sp, #40	; 0x28
 800830a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800830e:	ab09      	add	r3, sp, #36	; 0x24
 8008310:	ec49 8b10 	vmov	d0, r8, r9
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	6022      	str	r2, [r4, #0]
 8008318:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800831c:	4628      	mov	r0, r5
 800831e:	f7ff fecd 	bl	80080bc <__cvt>
 8008322:	9b06      	ldr	r3, [sp, #24]
 8008324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008326:	2b47      	cmp	r3, #71	; 0x47
 8008328:	4680      	mov	r8, r0
 800832a:	d108      	bne.n	800833e <_printf_float+0x142>
 800832c:	1cc8      	adds	r0, r1, #3
 800832e:	db02      	blt.n	8008336 <_printf_float+0x13a>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	4299      	cmp	r1, r3
 8008334:	dd41      	ble.n	80083ba <_printf_float+0x1be>
 8008336:	f1ab 0b02 	sub.w	fp, fp, #2
 800833a:	fa5f fb8b 	uxtb.w	fp, fp
 800833e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008342:	d820      	bhi.n	8008386 <_printf_float+0x18a>
 8008344:	3901      	subs	r1, #1
 8008346:	465a      	mov	r2, fp
 8008348:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800834c:	9109      	str	r1, [sp, #36]	; 0x24
 800834e:	f7ff ff17 	bl	8008180 <__exponent>
 8008352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008354:	1813      	adds	r3, r2, r0
 8008356:	2a01      	cmp	r2, #1
 8008358:	4681      	mov	r9, r0
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	dc02      	bgt.n	8008364 <_printf_float+0x168>
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	07d2      	lsls	r2, r2, #31
 8008362:	d501      	bpl.n	8008368 <_printf_float+0x16c>
 8008364:	3301      	adds	r3, #1
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800836c:	2b00      	cmp	r3, #0
 800836e:	d09c      	beq.n	80082aa <_printf_float+0xae>
 8008370:	232d      	movs	r3, #45	; 0x2d
 8008372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008376:	e798      	b.n	80082aa <_printf_float+0xae>
 8008378:	9a06      	ldr	r2, [sp, #24]
 800837a:	2a47      	cmp	r2, #71	; 0x47
 800837c:	d1be      	bne.n	80082fc <_printf_float+0x100>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1bc      	bne.n	80082fc <_printf_float+0x100>
 8008382:	2301      	movs	r3, #1
 8008384:	e7b9      	b.n	80082fa <_printf_float+0xfe>
 8008386:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800838a:	d118      	bne.n	80083be <_printf_float+0x1c2>
 800838c:	2900      	cmp	r1, #0
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	dd0b      	ble.n	80083aa <_printf_float+0x1ae>
 8008392:	6121      	str	r1, [r4, #16]
 8008394:	b913      	cbnz	r3, 800839c <_printf_float+0x1a0>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	07d0      	lsls	r0, r2, #31
 800839a:	d502      	bpl.n	80083a2 <_printf_float+0x1a6>
 800839c:	3301      	adds	r3, #1
 800839e:	440b      	add	r3, r1
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083a4:	f04f 0900 	mov.w	r9, #0
 80083a8:	e7de      	b.n	8008368 <_printf_float+0x16c>
 80083aa:	b913      	cbnz	r3, 80083b2 <_printf_float+0x1b6>
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	07d2      	lsls	r2, r2, #31
 80083b0:	d501      	bpl.n	80083b6 <_printf_float+0x1ba>
 80083b2:	3302      	adds	r3, #2
 80083b4:	e7f4      	b.n	80083a0 <_printf_float+0x1a4>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7f2      	b.n	80083a0 <_printf_float+0x1a4>
 80083ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c0:	4299      	cmp	r1, r3
 80083c2:	db05      	blt.n	80083d0 <_printf_float+0x1d4>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	6121      	str	r1, [r4, #16]
 80083c8:	07d8      	lsls	r0, r3, #31
 80083ca:	d5ea      	bpl.n	80083a2 <_printf_float+0x1a6>
 80083cc:	1c4b      	adds	r3, r1, #1
 80083ce:	e7e7      	b.n	80083a0 <_printf_float+0x1a4>
 80083d0:	2900      	cmp	r1, #0
 80083d2:	bfd4      	ite	le
 80083d4:	f1c1 0202 	rsble	r2, r1, #2
 80083d8:	2201      	movgt	r2, #1
 80083da:	4413      	add	r3, r2
 80083dc:	e7e0      	b.n	80083a0 <_printf_float+0x1a4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	055a      	lsls	r2, r3, #21
 80083e2:	d407      	bmi.n	80083f4 <_printf_float+0x1f8>
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	4642      	mov	r2, r8
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	47b8      	blx	r7
 80083ee:	3001      	adds	r0, #1
 80083f0:	d12c      	bne.n	800844c <_printf_float+0x250>
 80083f2:	e764      	b.n	80082be <_printf_float+0xc2>
 80083f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f8:	f240 80e0 	bls.w	80085bc <_printf_float+0x3c0>
 80083fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008400:	2200      	movs	r2, #0
 8008402:	2300      	movs	r3, #0
 8008404:	f7f8 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008408:	2800      	cmp	r0, #0
 800840a:	d034      	beq.n	8008476 <_printf_float+0x27a>
 800840c:	4a37      	ldr	r2, [pc, #220]	; (80084ec <_printf_float+0x2f0>)
 800840e:	2301      	movs	r3, #1
 8008410:	4631      	mov	r1, r6
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f af51 	beq.w	80082be <_printf_float+0xc2>
 800841c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008420:	429a      	cmp	r2, r3
 8008422:	db02      	blt.n	800842a <_printf_float+0x22e>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	07d8      	lsls	r0, r3, #31
 8008428:	d510      	bpl.n	800844c <_printf_float+0x250>
 800842a:	ee18 3a10 	vmov	r3, s16
 800842e:	4652      	mov	r2, sl
 8008430:	4631      	mov	r1, r6
 8008432:	4628      	mov	r0, r5
 8008434:	47b8      	blx	r7
 8008436:	3001      	adds	r0, #1
 8008438:	f43f af41 	beq.w	80082be <_printf_float+0xc2>
 800843c:	f04f 0800 	mov.w	r8, #0
 8008440:	f104 091a 	add.w	r9, r4, #26
 8008444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008446:	3b01      	subs	r3, #1
 8008448:	4543      	cmp	r3, r8
 800844a:	dc09      	bgt.n	8008460 <_printf_float+0x264>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	f100 8105 	bmi.w	800865e <_printf_float+0x462>
 8008454:	68e0      	ldr	r0, [r4, #12]
 8008456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008458:	4298      	cmp	r0, r3
 800845a:	bfb8      	it	lt
 800845c:	4618      	movlt	r0, r3
 800845e:	e730      	b.n	80082c2 <_printf_float+0xc6>
 8008460:	2301      	movs	r3, #1
 8008462:	464a      	mov	r2, r9
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f af27 	beq.w	80082be <_printf_float+0xc2>
 8008470:	f108 0801 	add.w	r8, r8, #1
 8008474:	e7e6      	b.n	8008444 <_printf_float+0x248>
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc39      	bgt.n	80084f0 <_printf_float+0x2f4>
 800847c:	4a1b      	ldr	r2, [pc, #108]	; (80084ec <_printf_float+0x2f0>)
 800847e:	2301      	movs	r3, #1
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	47b8      	blx	r7
 8008486:	3001      	adds	r0, #1
 8008488:	f43f af19 	beq.w	80082be <_printf_float+0xc2>
 800848c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008490:	4313      	orrs	r3, r2
 8008492:	d102      	bne.n	800849a <_printf_float+0x29e>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	07d9      	lsls	r1, r3, #31
 8008498:	d5d8      	bpl.n	800844c <_printf_float+0x250>
 800849a:	ee18 3a10 	vmov	r3, s16
 800849e:	4652      	mov	r2, sl
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	f43f af09 	beq.w	80082be <_printf_float+0xc2>
 80084ac:	f04f 0900 	mov.w	r9, #0
 80084b0:	f104 0a1a 	add.w	sl, r4, #26
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	425b      	negs	r3, r3
 80084b8:	454b      	cmp	r3, r9
 80084ba:	dc01      	bgt.n	80084c0 <_printf_float+0x2c4>
 80084bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084be:	e792      	b.n	80083e6 <_printf_float+0x1ea>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f aef7 	beq.w	80082be <_printf_float+0xc2>
 80084d0:	f109 0901 	add.w	r9, r9, #1
 80084d4:	e7ee      	b.n	80084b4 <_printf_float+0x2b8>
 80084d6:	bf00      	nop
 80084d8:	7fefffff 	.word	0x7fefffff
 80084dc:	0800acdc 	.word	0x0800acdc
 80084e0:	0800ace0 	.word	0x0800ace0
 80084e4:	0800ace8 	.word	0x0800ace8
 80084e8:	0800ace4 	.word	0x0800ace4
 80084ec:	0800acec 	.word	0x0800acec
 80084f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f4:	429a      	cmp	r2, r3
 80084f6:	bfa8      	it	ge
 80084f8:	461a      	movge	r2, r3
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	4691      	mov	r9, r2
 80084fe:	dc37      	bgt.n	8008570 <_printf_float+0x374>
 8008500:	f04f 0b00 	mov.w	fp, #0
 8008504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008508:	f104 021a 	add.w	r2, r4, #26
 800850c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	eba3 0309 	sub.w	r3, r3, r9
 8008514:	455b      	cmp	r3, fp
 8008516:	dc33      	bgt.n	8008580 <_printf_float+0x384>
 8008518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800851c:	429a      	cmp	r2, r3
 800851e:	db3b      	blt.n	8008598 <_printf_float+0x39c>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07da      	lsls	r2, r3, #31
 8008524:	d438      	bmi.n	8008598 <_printf_float+0x39c>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	9a05      	ldr	r2, [sp, #20]
 800852a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800852c:	1a9a      	subs	r2, r3, r2
 800852e:	eba3 0901 	sub.w	r9, r3, r1
 8008532:	4591      	cmp	r9, r2
 8008534:	bfa8      	it	ge
 8008536:	4691      	movge	r9, r2
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	dc35      	bgt.n	80085aa <_printf_float+0x3ae>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008546:	f104 0a1a 	add.w	sl, r4, #26
 800854a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	eba3 0309 	sub.w	r3, r3, r9
 8008554:	4543      	cmp	r3, r8
 8008556:	f77f af79 	ble.w	800844c <_printf_float+0x250>
 800855a:	2301      	movs	r3, #1
 800855c:	4652      	mov	r2, sl
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	f43f aeaa 	beq.w	80082be <_printf_float+0xc2>
 800856a:	f108 0801 	add.w	r8, r8, #1
 800856e:	e7ec      	b.n	800854a <_printf_float+0x34e>
 8008570:	4613      	mov	r3, r2
 8008572:	4631      	mov	r1, r6
 8008574:	4642      	mov	r2, r8
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	d1c0      	bne.n	8008500 <_printf_float+0x304>
 800857e:	e69e      	b.n	80082be <_printf_float+0xc2>
 8008580:	2301      	movs	r3, #1
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	9205      	str	r2, [sp, #20]
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f ae97 	beq.w	80082be <_printf_float+0xc2>
 8008590:	9a05      	ldr	r2, [sp, #20]
 8008592:	f10b 0b01 	add.w	fp, fp, #1
 8008596:	e7b9      	b.n	800850c <_printf_float+0x310>
 8008598:	ee18 3a10 	vmov	r3, s16
 800859c:	4652      	mov	r2, sl
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1be      	bne.n	8008526 <_printf_float+0x32a>
 80085a8:	e689      	b.n	80082be <_printf_float+0xc2>
 80085aa:	9a05      	ldr	r2, [sp, #20]
 80085ac:	464b      	mov	r3, r9
 80085ae:	4442      	add	r2, r8
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b8      	blx	r7
 80085b6:	3001      	adds	r0, #1
 80085b8:	d1c1      	bne.n	800853e <_printf_float+0x342>
 80085ba:	e680      	b.n	80082be <_printf_float+0xc2>
 80085bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085be:	2a01      	cmp	r2, #1
 80085c0:	dc01      	bgt.n	80085c6 <_printf_float+0x3ca>
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d538      	bpl.n	8008638 <_printf_float+0x43c>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4642      	mov	r2, r8
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	f43f ae74 	beq.w	80082be <_printf_float+0xc2>
 80085d6:	ee18 3a10 	vmov	r3, s16
 80085da:	4652      	mov	r2, sl
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	f43f ae6b 	beq.w	80082be <_printf_float+0xc2>
 80085e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	f7f8 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f4:	b9d8      	cbnz	r0, 800862e <_printf_float+0x432>
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	f108 0201 	add.w	r2, r8, #1
 80085fc:	3b01      	subs	r3, #1
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	d10e      	bne.n	8008626 <_printf_float+0x42a>
 8008608:	e659      	b.n	80082be <_printf_float+0xc2>
 800860a:	2301      	movs	r3, #1
 800860c:	4652      	mov	r2, sl
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f ae52 	beq.w	80082be <_printf_float+0xc2>
 800861a:	f108 0801 	add.w	r8, r8, #1
 800861e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008620:	3b01      	subs	r3, #1
 8008622:	4543      	cmp	r3, r8
 8008624:	dcf1      	bgt.n	800860a <_printf_float+0x40e>
 8008626:	464b      	mov	r3, r9
 8008628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800862c:	e6dc      	b.n	80083e8 <_printf_float+0x1ec>
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	f104 0a1a 	add.w	sl, r4, #26
 8008636:	e7f2      	b.n	800861e <_printf_float+0x422>
 8008638:	2301      	movs	r3, #1
 800863a:	4642      	mov	r2, r8
 800863c:	e7df      	b.n	80085fe <_printf_float+0x402>
 800863e:	2301      	movs	r3, #1
 8008640:	464a      	mov	r2, r9
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae38 	beq.w	80082be <_printf_float+0xc2>
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	4543      	cmp	r3, r8
 800865a:	dcf0      	bgt.n	800863e <_printf_float+0x442>
 800865c:	e6fa      	b.n	8008454 <_printf_float+0x258>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	f104 0919 	add.w	r9, r4, #25
 8008666:	e7f4      	b.n	8008652 <_printf_float+0x456>

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4616      	mov	r6, r2
 800866e:	4699      	mov	r9, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008678:	4293      	cmp	r3, r2
 800867a:	bfb8      	it	lt
 800867c:	4613      	movlt	r3, r2
 800867e:	6033      	str	r3, [r6, #0]
 8008680:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008684:	4607      	mov	r7, r0
 8008686:	460c      	mov	r4, r1
 8008688:	b10a      	cbz	r2, 800868e <_printf_common+0x26>
 800868a:	3301      	adds	r3, #1
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	0699      	lsls	r1, r3, #26
 8008692:	bf42      	ittt	mi
 8008694:	6833      	ldrmi	r3, [r6, #0]
 8008696:	3302      	addmi	r3, #2
 8008698:	6033      	strmi	r3, [r6, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d106      	bne.n	80086b0 <_printf_common+0x48>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6832      	ldr	r2, [r6, #0]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc26      	bgt.n	80086fe <_printf_common+0x96>
 80086b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b4:	1e13      	subs	r3, r2, #0
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	0692      	lsls	r2, r2, #26
 80086be:	d42b      	bmi.n	8008718 <_printf_common+0xb0>
 80086c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c4:	4649      	mov	r1, r9
 80086c6:	4638      	mov	r0, r7
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d01e      	beq.n	800870c <_printf_common+0xa4>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	68e5      	ldr	r5, [r4, #12]
 80086d2:	6832      	ldr	r2, [r6, #0]
 80086d4:	f003 0306 	and.w	r3, r3, #6
 80086d8:	2b04      	cmp	r3, #4
 80086da:	bf08      	it	eq
 80086dc:	1aad      	subeq	r5, r5, r2
 80086de:	68a3      	ldr	r3, [r4, #8]
 80086e0:	6922      	ldr	r2, [r4, #16]
 80086e2:	bf0c      	ite	eq
 80086e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e8:	2500      	movne	r5, #0
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bfc4      	itt	gt
 80086ee:	1a9b      	subgt	r3, r3, r2
 80086f0:	18ed      	addgt	r5, r5, r3
 80086f2:	2600      	movs	r6, #0
 80086f4:	341a      	adds	r4, #26
 80086f6:	42b5      	cmp	r5, r6
 80086f8:	d11a      	bne.n	8008730 <_printf_common+0xc8>
 80086fa:	2000      	movs	r0, #0
 80086fc:	e008      	b.n	8008710 <_printf_common+0xa8>
 80086fe:	2301      	movs	r3, #1
 8008700:	4652      	mov	r2, sl
 8008702:	4649      	mov	r1, r9
 8008704:	4638      	mov	r0, r7
 8008706:	47c0      	blx	r8
 8008708:	3001      	adds	r0, #1
 800870a:	d103      	bne.n	8008714 <_printf_common+0xac>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008714:	3501      	adds	r5, #1
 8008716:	e7c6      	b.n	80086a6 <_printf_common+0x3e>
 8008718:	18e1      	adds	r1, r4, r3
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	2030      	movs	r0, #48	; 0x30
 800871e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008722:	4422      	add	r2, r4
 8008724:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800872c:	3302      	adds	r3, #2
 800872e:	e7c7      	b.n	80086c0 <_printf_common+0x58>
 8008730:	2301      	movs	r3, #1
 8008732:	4622      	mov	r2, r4
 8008734:	4649      	mov	r1, r9
 8008736:	4638      	mov	r0, r7
 8008738:	47c0      	blx	r8
 800873a:	3001      	adds	r0, #1
 800873c:	d0e6      	beq.n	800870c <_printf_common+0xa4>
 800873e:	3601      	adds	r6, #1
 8008740:	e7d9      	b.n	80086f6 <_printf_common+0x8e>
	...

08008744 <_printf_i>:
 8008744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	7e0f      	ldrb	r7, [r1, #24]
 800874a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800874c:	2f78      	cmp	r7, #120	; 0x78
 800874e:	4691      	mov	r9, r2
 8008750:	4680      	mov	r8, r0
 8008752:	460c      	mov	r4, r1
 8008754:	469a      	mov	sl, r3
 8008756:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800875a:	d807      	bhi.n	800876c <_printf_i+0x28>
 800875c:	2f62      	cmp	r7, #98	; 0x62
 800875e:	d80a      	bhi.n	8008776 <_printf_i+0x32>
 8008760:	2f00      	cmp	r7, #0
 8008762:	f000 80d8 	beq.w	8008916 <_printf_i+0x1d2>
 8008766:	2f58      	cmp	r7, #88	; 0x58
 8008768:	f000 80a3 	beq.w	80088b2 <_printf_i+0x16e>
 800876c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008770:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008774:	e03a      	b.n	80087ec <_printf_i+0xa8>
 8008776:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800877a:	2b15      	cmp	r3, #21
 800877c:	d8f6      	bhi.n	800876c <_printf_i+0x28>
 800877e:	a101      	add	r1, pc, #4	; (adr r1, 8008784 <_printf_i+0x40>)
 8008780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008784:	080087dd 	.word	0x080087dd
 8008788:	080087f1 	.word	0x080087f1
 800878c:	0800876d 	.word	0x0800876d
 8008790:	0800876d 	.word	0x0800876d
 8008794:	0800876d 	.word	0x0800876d
 8008798:	0800876d 	.word	0x0800876d
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	0800876d 	.word	0x0800876d
 80087a4:	0800876d 	.word	0x0800876d
 80087a8:	0800876d 	.word	0x0800876d
 80087ac:	0800876d 	.word	0x0800876d
 80087b0:	080088fd 	.word	0x080088fd
 80087b4:	08008821 	.word	0x08008821
 80087b8:	080088df 	.word	0x080088df
 80087bc:	0800876d 	.word	0x0800876d
 80087c0:	0800876d 	.word	0x0800876d
 80087c4:	0800891f 	.word	0x0800891f
 80087c8:	0800876d 	.word	0x0800876d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800876d 	.word	0x0800876d
 80087d4:	0800876d 	.word	0x0800876d
 80087d8:	080088e7 	.word	0x080088e7
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	602a      	str	r2, [r5, #0]
 80087e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0a3      	b.n	8008938 <_printf_i+0x1f4>
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	6829      	ldr	r1, [r5, #0]
 80087f4:	0606      	lsls	r6, r0, #24
 80087f6:	f101 0304 	add.w	r3, r1, #4
 80087fa:	d50a      	bpl.n	8008812 <_printf_i+0xce>
 80087fc:	680e      	ldr	r6, [r1, #0]
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	2e00      	cmp	r6, #0
 8008802:	da03      	bge.n	800880c <_printf_i+0xc8>
 8008804:	232d      	movs	r3, #45	; 0x2d
 8008806:	4276      	negs	r6, r6
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800880c:	485e      	ldr	r0, [pc, #376]	; (8008988 <_printf_i+0x244>)
 800880e:	230a      	movs	r3, #10
 8008810:	e019      	b.n	8008846 <_printf_i+0x102>
 8008812:	680e      	ldr	r6, [r1, #0]
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	f010 0f40 	tst.w	r0, #64	; 0x40
 800881a:	bf18      	it	ne
 800881c:	b236      	sxthne	r6, r6
 800881e:	e7ef      	b.n	8008800 <_printf_i+0xbc>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	6820      	ldr	r0, [r4, #0]
 8008824:	1d19      	adds	r1, r3, #4
 8008826:	6029      	str	r1, [r5, #0]
 8008828:	0601      	lsls	r1, r0, #24
 800882a:	d501      	bpl.n	8008830 <_printf_i+0xec>
 800882c:	681e      	ldr	r6, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0xf2>
 8008830:	0646      	lsls	r6, r0, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0xe8>
 8008834:	881e      	ldrh	r6, [r3, #0]
 8008836:	4854      	ldr	r0, [pc, #336]	; (8008988 <_printf_i+0x244>)
 8008838:	2f6f      	cmp	r7, #111	; 0x6f
 800883a:	bf0c      	ite	eq
 800883c:	2308      	moveq	r3, #8
 800883e:	230a      	movne	r3, #10
 8008840:	2100      	movs	r1, #0
 8008842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008846:	6865      	ldr	r5, [r4, #4]
 8008848:	60a5      	str	r5, [r4, #8]
 800884a:	2d00      	cmp	r5, #0
 800884c:	bfa2      	ittt	ge
 800884e:	6821      	ldrge	r1, [r4, #0]
 8008850:	f021 0104 	bicge.w	r1, r1, #4
 8008854:	6021      	strge	r1, [r4, #0]
 8008856:	b90e      	cbnz	r6, 800885c <_printf_i+0x118>
 8008858:	2d00      	cmp	r5, #0
 800885a:	d04d      	beq.n	80088f8 <_printf_i+0x1b4>
 800885c:	4615      	mov	r5, r2
 800885e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008862:	fb03 6711 	mls	r7, r3, r1, r6
 8008866:	5dc7      	ldrb	r7, [r0, r7]
 8008868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800886c:	4637      	mov	r7, r6
 800886e:	42bb      	cmp	r3, r7
 8008870:	460e      	mov	r6, r1
 8008872:	d9f4      	bls.n	800885e <_printf_i+0x11a>
 8008874:	2b08      	cmp	r3, #8
 8008876:	d10b      	bne.n	8008890 <_printf_i+0x14c>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	07de      	lsls	r6, r3, #31
 800887c:	d508      	bpl.n	8008890 <_printf_i+0x14c>
 800887e:	6923      	ldr	r3, [r4, #16]
 8008880:	6861      	ldr	r1, [r4, #4]
 8008882:	4299      	cmp	r1, r3
 8008884:	bfde      	ittt	le
 8008886:	2330      	movle	r3, #48	; 0x30
 8008888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800888c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008890:	1b52      	subs	r2, r2, r5
 8008892:	6122      	str	r2, [r4, #16]
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	464b      	mov	r3, r9
 800889a:	aa03      	add	r2, sp, #12
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f7ff fee2 	bl	8008668 <_printf_common>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d14c      	bne.n	8008942 <_printf_i+0x1fe>
 80088a8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ac:	b004      	add	sp, #16
 80088ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b2:	4835      	ldr	r0, [pc, #212]	; (8008988 <_printf_i+0x244>)
 80088b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088b8:	6829      	ldr	r1, [r5, #0]
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80088c0:	6029      	str	r1, [r5, #0]
 80088c2:	061d      	lsls	r5, r3, #24
 80088c4:	d514      	bpl.n	80088f0 <_printf_i+0x1ac>
 80088c6:	07df      	lsls	r7, r3, #31
 80088c8:	bf44      	itt	mi
 80088ca:	f043 0320 	orrmi.w	r3, r3, #32
 80088ce:	6023      	strmi	r3, [r4, #0]
 80088d0:	b91e      	cbnz	r6, 80088da <_printf_i+0x196>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f023 0320 	bic.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	2310      	movs	r3, #16
 80088dc:	e7b0      	b.n	8008840 <_printf_i+0xfc>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	f043 0320 	orr.w	r3, r3, #32
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	2378      	movs	r3, #120	; 0x78
 80088e8:	4828      	ldr	r0, [pc, #160]	; (800898c <_printf_i+0x248>)
 80088ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088ee:	e7e3      	b.n	80088b8 <_printf_i+0x174>
 80088f0:	0659      	lsls	r1, r3, #25
 80088f2:	bf48      	it	mi
 80088f4:	b2b6      	uxthmi	r6, r6
 80088f6:	e7e6      	b.n	80088c6 <_printf_i+0x182>
 80088f8:	4615      	mov	r5, r2
 80088fa:	e7bb      	b.n	8008874 <_printf_i+0x130>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	6826      	ldr	r6, [r4, #0]
 8008900:	6961      	ldr	r1, [r4, #20]
 8008902:	1d18      	adds	r0, r3, #4
 8008904:	6028      	str	r0, [r5, #0]
 8008906:	0635      	lsls	r5, r6, #24
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	d501      	bpl.n	8008910 <_printf_i+0x1cc>
 800890c:	6019      	str	r1, [r3, #0]
 800890e:	e002      	b.n	8008916 <_printf_i+0x1d2>
 8008910:	0670      	lsls	r0, r6, #25
 8008912:	d5fb      	bpl.n	800890c <_printf_i+0x1c8>
 8008914:	8019      	strh	r1, [r3, #0]
 8008916:	2300      	movs	r3, #0
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	4615      	mov	r5, r2
 800891c:	e7ba      	b.n	8008894 <_printf_i+0x150>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	1d1a      	adds	r2, r3, #4
 8008922:	602a      	str	r2, [r5, #0]
 8008924:	681d      	ldr	r5, [r3, #0]
 8008926:	6862      	ldr	r2, [r4, #4]
 8008928:	2100      	movs	r1, #0
 800892a:	4628      	mov	r0, r5
 800892c:	f7f7 fc58 	bl	80001e0 <memchr>
 8008930:	b108      	cbz	r0, 8008936 <_printf_i+0x1f2>
 8008932:	1b40      	subs	r0, r0, r5
 8008934:	6060      	str	r0, [r4, #4]
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	2300      	movs	r3, #0
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008940:	e7a8      	b.n	8008894 <_printf_i+0x150>
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	462a      	mov	r2, r5
 8008946:	4649      	mov	r1, r9
 8008948:	4640      	mov	r0, r8
 800894a:	47d0      	blx	sl
 800894c:	3001      	adds	r0, #1
 800894e:	d0ab      	beq.n	80088a8 <_printf_i+0x164>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	079b      	lsls	r3, r3, #30
 8008954:	d413      	bmi.n	800897e <_printf_i+0x23a>
 8008956:	68e0      	ldr	r0, [r4, #12]
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	4298      	cmp	r0, r3
 800895c:	bfb8      	it	lt
 800895e:	4618      	movlt	r0, r3
 8008960:	e7a4      	b.n	80088ac <_printf_i+0x168>
 8008962:	2301      	movs	r3, #1
 8008964:	4632      	mov	r2, r6
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d09b      	beq.n	80088a8 <_printf_i+0x164>
 8008970:	3501      	adds	r5, #1
 8008972:	68e3      	ldr	r3, [r4, #12]
 8008974:	9903      	ldr	r1, [sp, #12]
 8008976:	1a5b      	subs	r3, r3, r1
 8008978:	42ab      	cmp	r3, r5
 800897a:	dcf2      	bgt.n	8008962 <_printf_i+0x21e>
 800897c:	e7eb      	b.n	8008956 <_printf_i+0x212>
 800897e:	2500      	movs	r5, #0
 8008980:	f104 0619 	add.w	r6, r4, #25
 8008984:	e7f5      	b.n	8008972 <_printf_i+0x22e>
 8008986:	bf00      	nop
 8008988:	0800acee 	.word	0x0800acee
 800898c:	0800acff 	.word	0x0800acff

08008990 <iprintf>:
 8008990:	b40f      	push	{r0, r1, r2, r3}
 8008992:	4b0a      	ldr	r3, [pc, #40]	; (80089bc <iprintf+0x2c>)
 8008994:	b513      	push	{r0, r1, r4, lr}
 8008996:	681c      	ldr	r4, [r3, #0]
 8008998:	b124      	cbz	r4, 80089a4 <iprintf+0x14>
 800899a:	69a3      	ldr	r3, [r4, #24]
 800899c:	b913      	cbnz	r3, 80089a4 <iprintf+0x14>
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 fee0 	bl	8009764 <__sinit>
 80089a4:	ab05      	add	r3, sp, #20
 80089a6:	9a04      	ldr	r2, [sp, #16]
 80089a8:	68a1      	ldr	r1, [r4, #8]
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	4620      	mov	r0, r4
 80089ae:	f001 fc2b 	bl	800a208 <_vfiprintf_r>
 80089b2:	b002      	add	sp, #8
 80089b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089b8:	b004      	add	sp, #16
 80089ba:	4770      	bx	lr
 80089bc:	20000010 	.word	0x20000010

080089c0 <quorem>:
 80089c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	6903      	ldr	r3, [r0, #16]
 80089c6:	690c      	ldr	r4, [r1, #16]
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	4607      	mov	r7, r0
 80089cc:	f2c0 8081 	blt.w	8008ad2 <quorem+0x112>
 80089d0:	3c01      	subs	r4, #1
 80089d2:	f101 0814 	add.w	r8, r1, #20
 80089d6:	f100 0514 	add.w	r5, r0, #20
 80089da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089e8:	3301      	adds	r3, #1
 80089ea:	429a      	cmp	r2, r3
 80089ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80089f8:	d331      	bcc.n	8008a5e <quorem+0x9e>
 80089fa:	f04f 0e00 	mov.w	lr, #0
 80089fe:	4640      	mov	r0, r8
 8008a00:	46ac      	mov	ip, r5
 8008a02:	46f2      	mov	sl, lr
 8008a04:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a08:	b293      	uxth	r3, r2
 8008a0a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	ebaa 0303 	sub.w	r3, sl, r3
 8008a18:	f8dc a000 	ldr.w	sl, [ip]
 8008a1c:	0c12      	lsrs	r2, r2, #16
 8008a1e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a22:	fb06 e202 	mla	r2, r6, r2, lr
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	9b00      	ldr	r3, [sp, #0]
 8008a2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a38:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a3c:	4581      	cmp	r9, r0
 8008a3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a42:	f84c 3b04 	str.w	r3, [ip], #4
 8008a46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a4a:	d2db      	bcs.n	8008a04 <quorem+0x44>
 8008a4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a50:	b92b      	cbnz	r3, 8008a5e <quorem+0x9e>
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	3b04      	subs	r3, #4
 8008a56:	429d      	cmp	r5, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	d32e      	bcc.n	8008aba <quorem+0xfa>
 8008a5c:	613c      	str	r4, [r7, #16]
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f001 f9b0 	bl	8009dc4 <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	db24      	blt.n	8008ab2 <quorem+0xf2>
 8008a68:	3601      	adds	r6, #1
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f04f 0c00 	mov.w	ip, #0
 8008a70:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a74:	f8d0 e000 	ldr.w	lr, [r0]
 8008a78:	b293      	uxth	r3, r2
 8008a7a:	ebac 0303 	sub.w	r3, ip, r3
 8008a7e:	0c12      	lsrs	r2, r2, #16
 8008a80:	fa13 f38e 	uxtah	r3, r3, lr
 8008a84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a92:	45c1      	cmp	r9, r8
 8008a94:	f840 3b04 	str.w	r3, [r0], #4
 8008a98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a9c:	d2e8      	bcs.n	8008a70 <quorem+0xb0>
 8008a9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aa6:	b922      	cbnz	r2, 8008ab2 <quorem+0xf2>
 8008aa8:	3b04      	subs	r3, #4
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	d30a      	bcc.n	8008ac6 <quorem+0x106>
 8008ab0:	613c      	str	r4, [r7, #16]
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	3b04      	subs	r3, #4
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	d1cc      	bne.n	8008a5c <quorem+0x9c>
 8008ac2:	3c01      	subs	r4, #1
 8008ac4:	e7c7      	b.n	8008a56 <quorem+0x96>
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	d1f0      	bne.n	8008ab0 <quorem+0xf0>
 8008ace:	3c01      	subs	r4, #1
 8008ad0:	e7eb      	b.n	8008aaa <quorem+0xea>
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	e7ee      	b.n	8008ab4 <quorem+0xf4>
	...

08008ad8 <_dtoa_r>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	ed2d 8b04 	vpush	{d8-d9}
 8008ae0:	ec57 6b10 	vmov	r6, r7, d0
 8008ae4:	b093      	sub	sp, #76	; 0x4c
 8008ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ae8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008aec:	9106      	str	r1, [sp, #24]
 8008aee:	ee10 aa10 	vmov	sl, s0
 8008af2:	4604      	mov	r4, r0
 8008af4:	9209      	str	r2, [sp, #36]	; 0x24
 8008af6:	930c      	str	r3, [sp, #48]	; 0x30
 8008af8:	46bb      	mov	fp, r7
 8008afa:	b975      	cbnz	r5, 8008b1a <_dtoa_r+0x42>
 8008afc:	2010      	movs	r0, #16
 8008afe:	f000 fed7 	bl	80098b0 <malloc>
 8008b02:	4602      	mov	r2, r0
 8008b04:	6260      	str	r0, [r4, #36]	; 0x24
 8008b06:	b920      	cbnz	r0, 8008b12 <_dtoa_r+0x3a>
 8008b08:	4ba7      	ldr	r3, [pc, #668]	; (8008da8 <_dtoa_r+0x2d0>)
 8008b0a:	21ea      	movs	r1, #234	; 0xea
 8008b0c:	48a7      	ldr	r0, [pc, #668]	; (8008dac <_dtoa_r+0x2d4>)
 8008b0e:	f001 fdd1 	bl	800a6b4 <__assert_func>
 8008b12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b16:	6005      	str	r5, [r0, #0]
 8008b18:	60c5      	str	r5, [r0, #12]
 8008b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	b151      	cbz	r1, 8008b36 <_dtoa_r+0x5e>
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	604a      	str	r2, [r1, #4]
 8008b24:	2301      	movs	r3, #1
 8008b26:	4093      	lsls	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 ff08 	bl	8009940 <_Bfree>
 8008b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b32:	2200      	movs	r2, #0
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	1e3b      	subs	r3, r7, #0
 8008b38:	bfaa      	itet	ge
 8008b3a:	2300      	movge	r3, #0
 8008b3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b40:	f8c8 3000 	strge.w	r3, [r8]
 8008b44:	4b9a      	ldr	r3, [pc, #616]	; (8008db0 <_dtoa_r+0x2d8>)
 8008b46:	bfbc      	itt	lt
 8008b48:	2201      	movlt	r2, #1
 8008b4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b4e:	ea33 030b 	bics.w	r3, r3, fp
 8008b52:	d11b      	bne.n	8008b8c <_dtoa_r+0xb4>
 8008b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b60:	4333      	orrs	r3, r6
 8008b62:	f000 8592 	beq.w	800968a <_dtoa_r+0xbb2>
 8008b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b68:	b963      	cbnz	r3, 8008b84 <_dtoa_r+0xac>
 8008b6a:	4b92      	ldr	r3, [pc, #584]	; (8008db4 <_dtoa_r+0x2dc>)
 8008b6c:	e022      	b.n	8008bb4 <_dtoa_r+0xdc>
 8008b6e:	4b92      	ldr	r3, [pc, #584]	; (8008db8 <_dtoa_r+0x2e0>)
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	3308      	adds	r3, #8
 8008b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	9801      	ldr	r0, [sp, #4]
 8008b7a:	b013      	add	sp, #76	; 0x4c
 8008b7c:	ecbd 8b04 	vpop	{d8-d9}
 8008b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b84:	4b8b      	ldr	r3, [pc, #556]	; (8008db4 <_dtoa_r+0x2dc>)
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	3303      	adds	r3, #3
 8008b8a:	e7f3      	b.n	8008b74 <_dtoa_r+0x9c>
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4650      	mov	r0, sl
 8008b92:	4659      	mov	r1, fp
 8008b94:	f7f7 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b98:	ec4b ab19 	vmov	d9, sl, fp
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	b158      	cbz	r0, 8008bb8 <_dtoa_r+0xe0>
 8008ba0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 856b 	beq.w	8009684 <_dtoa_r+0xbac>
 8008bae:	4883      	ldr	r0, [pc, #524]	; (8008dbc <_dtoa_r+0x2e4>)
 8008bb0:	6018      	str	r0, [r3, #0]
 8008bb2:	1e43      	subs	r3, r0, #1
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	e7df      	b.n	8008b78 <_dtoa_r+0xa0>
 8008bb8:	ec4b ab10 	vmov	d0, sl, fp
 8008bbc:	aa10      	add	r2, sp, #64	; 0x40
 8008bbe:	a911      	add	r1, sp, #68	; 0x44
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f001 f9a5 	bl	8009f10 <__d2b>
 8008bc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bca:	ee08 0a10 	vmov	s16, r0
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	f000 8084 	beq.w	8008cdc <_dtoa_r+0x204>
 8008bd4:	ee19 3a90 	vmov	r3, s19
 8008bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008be0:	4656      	mov	r6, sl
 8008be2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008bee:	4b74      	ldr	r3, [pc, #464]	; (8008dc0 <_dtoa_r+0x2e8>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fb47 	bl	8000288 <__aeabi_dsub>
 8008bfa:	a365      	add	r3, pc, #404	; (adr r3, 8008d90 <_dtoa_r+0x2b8>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fcfa 	bl	80005f8 <__aeabi_dmul>
 8008c04:	a364      	add	r3, pc, #400	; (adr r3, 8008d98 <_dtoa_r+0x2c0>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	f7f7 fb3f 	bl	800028c <__adddf3>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	4628      	mov	r0, r5
 8008c12:	460f      	mov	r7, r1
 8008c14:	f7f7 fc86 	bl	8000524 <__aeabi_i2d>
 8008c18:	a361      	add	r3, pc, #388	; (adr r3, 8008da0 <_dtoa_r+0x2c8>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fceb 	bl	80005f8 <__aeabi_dmul>
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	4606      	mov	r6, r0
 8008c30:	460f      	mov	r7, r1
 8008c32:	f7f7 ff91 	bl	8000b58 <__aeabi_d2iz>
 8008c36:	2200      	movs	r2, #0
 8008c38:	9000      	str	r0, [sp, #0]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8008c44:	b150      	cbz	r0, 8008c5c <_dtoa_r+0x184>
 8008c46:	9800      	ldr	r0, [sp, #0]
 8008c48:	f7f7 fc6c 	bl	8000524 <__aeabi_i2d>
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	463b      	mov	r3, r7
 8008c50:	f7f7 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c54:	b910      	cbnz	r0, 8008c5c <_dtoa_r+0x184>
 8008c56:	9b00      	ldr	r3, [sp, #0]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	9b00      	ldr	r3, [sp, #0]
 8008c5e:	2b16      	cmp	r3, #22
 8008c60:	d85a      	bhi.n	8008d18 <_dtoa_r+0x240>
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	4b57      	ldr	r3, [pc, #348]	; (8008dc4 <_dtoa_r+0x2ec>)
 8008c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6e:	ec51 0b19 	vmov	r0, r1, d9
 8008c72:	f7f7 ff33 	bl	8000adc <__aeabi_dcmplt>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d050      	beq.n	8008d1c <_dtoa_r+0x244>
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	2300      	movs	r3, #0
 8008c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c86:	1b5d      	subs	r5, r3, r5
 8008c88:	1e6b      	subs	r3, r5, #1
 8008c8a:	9305      	str	r3, [sp, #20]
 8008c8c:	bf45      	ittet	mi
 8008c8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008c92:	9304      	strmi	r3, [sp, #16]
 8008c94:	2300      	movpl	r3, #0
 8008c96:	2300      	movmi	r3, #0
 8008c98:	bf4c      	ite	mi
 8008c9a:	9305      	strmi	r3, [sp, #20]
 8008c9c:	9304      	strpl	r3, [sp, #16]
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	db3d      	blt.n	8008d20 <_dtoa_r+0x248>
 8008ca4:	9b05      	ldr	r3, [sp, #20]
 8008ca6:	9a00      	ldr	r2, [sp, #0]
 8008ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8008caa:	4413      	add	r3, r2
 8008cac:	9305      	str	r3, [sp, #20]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	9b06      	ldr	r3, [sp, #24]
 8008cb4:	2b09      	cmp	r3, #9
 8008cb6:	f200 8089 	bhi.w	8008dcc <_dtoa_r+0x2f4>
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	bfc4      	itt	gt
 8008cbe:	3b04      	subgt	r3, #4
 8008cc0:	9306      	strgt	r3, [sp, #24]
 8008cc2:	9b06      	ldr	r3, [sp, #24]
 8008cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cc8:	bfcc      	ite	gt
 8008cca:	2500      	movgt	r5, #0
 8008ccc:	2501      	movle	r5, #1
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	f200 8087 	bhi.w	8008de2 <_dtoa_r+0x30a>
 8008cd4:	e8df f003 	tbb	[pc, r3]
 8008cd8:	59383a2d 	.word	0x59383a2d
 8008cdc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ce0:	441d      	add	r5, r3
 8008ce2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ce6:	2b20      	cmp	r3, #32
 8008ce8:	bfc1      	itttt	gt
 8008cea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cf2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008cf6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cfa:	bfda      	itte	le
 8008cfc:	f1c3 0320 	rsble	r3, r3, #32
 8008d00:	fa06 f003 	lslle.w	r0, r6, r3
 8008d04:	4318      	orrgt	r0, r3
 8008d06:	f7f7 fbfd 	bl	8000504 <__aeabi_ui2d>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4606      	mov	r6, r0
 8008d0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d12:	3d01      	subs	r5, #1
 8008d14:	930e      	str	r3, [sp, #56]	; 0x38
 8008d16:	e76a      	b.n	8008bee <_dtoa_r+0x116>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e7b2      	b.n	8008c82 <_dtoa_r+0x1aa>
 8008d1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d1e:	e7b1      	b.n	8008c84 <_dtoa_r+0x1ac>
 8008d20:	9b04      	ldr	r3, [sp, #16]
 8008d22:	9a00      	ldr	r2, [sp, #0]
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	4253      	negs	r3, r2
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d30:	e7bf      	b.n	8008cb2 <_dtoa_r+0x1da>
 8008d32:	2300      	movs	r3, #0
 8008d34:	9308      	str	r3, [sp, #32]
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dc55      	bgt.n	8008de8 <_dtoa_r+0x310>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d42:	461a      	mov	r2, r3
 8008d44:	9209      	str	r2, [sp, #36]	; 0x24
 8008d46:	e00c      	b.n	8008d62 <_dtoa_r+0x28a>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7f3      	b.n	8008d34 <_dtoa_r+0x25c>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d50:	9308      	str	r3, [sp, #32]
 8008d52:	9b00      	ldr	r3, [sp, #0]
 8008d54:	4413      	add	r3, r2
 8008d56:	9302      	str	r3, [sp, #8]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	9303      	str	r3, [sp, #12]
 8008d5e:	bfb8      	it	lt
 8008d60:	2301      	movlt	r3, #1
 8008d62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d64:	2200      	movs	r2, #0
 8008d66:	6042      	str	r2, [r0, #4]
 8008d68:	2204      	movs	r2, #4
 8008d6a:	f102 0614 	add.w	r6, r2, #20
 8008d6e:	429e      	cmp	r6, r3
 8008d70:	6841      	ldr	r1, [r0, #4]
 8008d72:	d93d      	bls.n	8008df0 <_dtoa_r+0x318>
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 fda3 	bl	80098c0 <_Balloc>
 8008d7a:	9001      	str	r0, [sp, #4]
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d13b      	bne.n	8008df8 <_dtoa_r+0x320>
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <_dtoa_r+0x2f0>)
 8008d82:	4602      	mov	r2, r0
 8008d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d88:	e6c0      	b.n	8008b0c <_dtoa_r+0x34>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7df      	b.n	8008d4e <_dtoa_r+0x276>
 8008d8e:	bf00      	nop
 8008d90:	636f4361 	.word	0x636f4361
 8008d94:	3fd287a7 	.word	0x3fd287a7
 8008d98:	8b60c8b3 	.word	0x8b60c8b3
 8008d9c:	3fc68a28 	.word	0x3fc68a28
 8008da0:	509f79fb 	.word	0x509f79fb
 8008da4:	3fd34413 	.word	0x3fd34413
 8008da8:	0800ae1e 	.word	0x0800ae1e
 8008dac:	0800ae35 	.word	0x0800ae35
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	0800ae1a 	.word	0x0800ae1a
 8008db8:	0800ae11 	.word	0x0800ae11
 8008dbc:	0800aced 	.word	0x0800aced
 8008dc0:	3ff80000 	.word	0x3ff80000
 8008dc4:	0800af88 	.word	0x0800af88
 8008dc8:	0800ae90 	.word	0x0800ae90
 8008dcc:	2501      	movs	r5, #1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9306      	str	r3, [sp, #24]
 8008dd2:	9508      	str	r5, [sp, #32]
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2312      	movs	r3, #18
 8008de0:	e7b0      	b.n	8008d44 <_dtoa_r+0x26c>
 8008de2:	2301      	movs	r3, #1
 8008de4:	9308      	str	r3, [sp, #32]
 8008de6:	e7f5      	b.n	8008dd4 <_dtoa_r+0x2fc>
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dee:	e7b8      	b.n	8008d62 <_dtoa_r+0x28a>
 8008df0:	3101      	adds	r1, #1
 8008df2:	6041      	str	r1, [r0, #4]
 8008df4:	0052      	lsls	r2, r2, #1
 8008df6:	e7b8      	b.n	8008d6a <_dtoa_r+0x292>
 8008df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfa:	9a01      	ldr	r2, [sp, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b0e      	cmp	r3, #14
 8008e02:	f200 809d 	bhi.w	8008f40 <_dtoa_r+0x468>
 8008e06:	2d00      	cmp	r5, #0
 8008e08:	f000 809a 	beq.w	8008f40 <_dtoa_r+0x468>
 8008e0c:	9b00      	ldr	r3, [sp, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	dd32      	ble.n	8008e78 <_dtoa_r+0x3a0>
 8008e12:	4ab7      	ldr	r2, [pc, #732]	; (80090f0 <_dtoa_r+0x618>)
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e20:	9b00      	ldr	r3, [sp, #0]
 8008e22:	05d8      	lsls	r0, r3, #23
 8008e24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e28:	d516      	bpl.n	8008e58 <_dtoa_r+0x380>
 8008e2a:	4bb2      	ldr	r3, [pc, #712]	; (80090f4 <_dtoa_r+0x61c>)
 8008e2c:	ec51 0b19 	vmov	r0, r1, d9
 8008e30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e34:	f7f7 fd0a 	bl	800084c <__aeabi_ddiv>
 8008e38:	f007 070f 	and.w	r7, r7, #15
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	468b      	mov	fp, r1
 8008e40:	2503      	movs	r5, #3
 8008e42:	4eac      	ldr	r6, [pc, #688]	; (80090f4 <_dtoa_r+0x61c>)
 8008e44:	b957      	cbnz	r7, 8008e5c <_dtoa_r+0x384>
 8008e46:	4642      	mov	r2, r8
 8008e48:	464b      	mov	r3, r9
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fcfd 	bl	800084c <__aeabi_ddiv>
 8008e52:	4682      	mov	sl, r0
 8008e54:	468b      	mov	fp, r1
 8008e56:	e028      	b.n	8008eaa <_dtoa_r+0x3d2>
 8008e58:	2502      	movs	r5, #2
 8008e5a:	e7f2      	b.n	8008e42 <_dtoa_r+0x36a>
 8008e5c:	07f9      	lsls	r1, r7, #31
 8008e5e:	d508      	bpl.n	8008e72 <_dtoa_r+0x39a>
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e68:	f7f7 fbc6 	bl	80005f8 <__aeabi_dmul>
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	4680      	mov	r8, r0
 8008e70:	4689      	mov	r9, r1
 8008e72:	107f      	asrs	r7, r7, #1
 8008e74:	3608      	adds	r6, #8
 8008e76:	e7e5      	b.n	8008e44 <_dtoa_r+0x36c>
 8008e78:	f000 809b 	beq.w	8008fb2 <_dtoa_r+0x4da>
 8008e7c:	9b00      	ldr	r3, [sp, #0]
 8008e7e:	4f9d      	ldr	r7, [pc, #628]	; (80090f4 <_dtoa_r+0x61c>)
 8008e80:	425e      	negs	r6, r3
 8008e82:	4b9b      	ldr	r3, [pc, #620]	; (80090f0 <_dtoa_r+0x618>)
 8008e84:	f006 020f 	and.w	r2, r6, #15
 8008e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	ec51 0b19 	vmov	r0, r1, d9
 8008e94:	f7f7 fbb0 	bl	80005f8 <__aeabi_dmul>
 8008e98:	1136      	asrs	r6, r6, #4
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	2502      	movs	r5, #2
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d17a      	bne.n	8008f9c <_dtoa_r+0x4c4>
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1d3      	bne.n	8008e52 <_dtoa_r+0x37a>
 8008eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 8082 	beq.w	8008fb6 <_dtoa_r+0x4de>
 8008eb2:	4b91      	ldr	r3, [pc, #580]	; (80090f8 <_dtoa_r+0x620>)
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	4659      	mov	r1, fp
 8008eba:	f7f7 fe0f 	bl	8000adc <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d079      	beq.n	8008fb6 <_dtoa_r+0x4de>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d076      	beq.n	8008fb6 <_dtoa_r+0x4de>
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dd36      	ble.n	8008f3c <_dtoa_r+0x464>
 8008ece:	9b00      	ldr	r3, [sp, #0]
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	1e5f      	subs	r7, r3, #1
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	4b88      	ldr	r3, [pc, #544]	; (80090fc <_dtoa_r+0x624>)
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	9e02      	ldr	r6, [sp, #8]
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	468b      	mov	fp, r1
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7f7 fb1c 	bl	8000524 <__aeabi_i2d>
 8008eec:	4652      	mov	r2, sl
 8008eee:	465b      	mov	r3, fp
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	4b82      	ldr	r3, [pc, #520]	; (8009100 <_dtoa_r+0x628>)
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f7f7 f9c8 	bl	800028c <__adddf3>
 8008efc:	46d0      	mov	r8, sl
 8008efe:	46d9      	mov	r9, fp
 8008f00:	4682      	mov	sl, r0
 8008f02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	d158      	bne.n	8008fbc <_dtoa_r+0x4e4>
 8008f0a:	4b7e      	ldr	r3, [pc, #504]	; (8009104 <_dtoa_r+0x62c>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	f7f7 f9b9 	bl	8000288 <__aeabi_dsub>
 8008f16:	4652      	mov	r2, sl
 8008f18:	465b      	mov	r3, fp
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	f7f7 fdfb 	bl	8000b18 <__aeabi_dcmpgt>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f040 8295 	bne.w	8009452 <_dtoa_r+0x97a>
 8008f28:	4652      	mov	r2, sl
 8008f2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f2e:	4640      	mov	r0, r8
 8008f30:	4649      	mov	r1, r9
 8008f32:	f7f7 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	f040 8289 	bne.w	800944e <_dtoa_r+0x976>
 8008f3c:	ec5b ab19 	vmov	sl, fp, d9
 8008f40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f2c0 8148 	blt.w	80091d8 <_dtoa_r+0x700>
 8008f48:	9a00      	ldr	r2, [sp, #0]
 8008f4a:	2a0e      	cmp	r2, #14
 8008f4c:	f300 8144 	bgt.w	80091d8 <_dtoa_r+0x700>
 8008f50:	4b67      	ldr	r3, [pc, #412]	; (80090f0 <_dtoa_r+0x618>)
 8008f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f280 80d5 	bge.w	800910c <_dtoa_r+0x634>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f300 80d1 	bgt.w	800910c <_dtoa_r+0x634>
 8008f6a:	f040 826f 	bne.w	800944c <_dtoa_r+0x974>
 8008f6e:	4b65      	ldr	r3, [pc, #404]	; (8009104 <_dtoa_r+0x62c>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	4640      	mov	r0, r8
 8008f74:	4649      	mov	r1, r9
 8008f76:	f7f7 fb3f 	bl	80005f8 <__aeabi_dmul>
 8008f7a:	4652      	mov	r2, sl
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	f7f7 fdc1 	bl	8000b04 <__aeabi_dcmpge>
 8008f82:	9e03      	ldr	r6, [sp, #12]
 8008f84:	4637      	mov	r7, r6
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f040 8245 	bne.w	8009416 <_dtoa_r+0x93e>
 8008f8c:	9d01      	ldr	r5, [sp, #4]
 8008f8e:	2331      	movs	r3, #49	; 0x31
 8008f90:	f805 3b01 	strb.w	r3, [r5], #1
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	e240      	b.n	800941e <_dtoa_r+0x946>
 8008f9c:	07f2      	lsls	r2, r6, #31
 8008f9e:	d505      	bpl.n	8008fac <_dtoa_r+0x4d4>
 8008fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	3501      	adds	r5, #1
 8008faa:	2301      	movs	r3, #1
 8008fac:	1076      	asrs	r6, r6, #1
 8008fae:	3708      	adds	r7, #8
 8008fb0:	e777      	b.n	8008ea2 <_dtoa_r+0x3ca>
 8008fb2:	2502      	movs	r5, #2
 8008fb4:	e779      	b.n	8008eaa <_dtoa_r+0x3d2>
 8008fb6:	9f00      	ldr	r7, [sp, #0]
 8008fb8:	9e03      	ldr	r6, [sp, #12]
 8008fba:	e794      	b.n	8008ee6 <_dtoa_r+0x40e>
 8008fbc:	9901      	ldr	r1, [sp, #4]
 8008fbe:	4b4c      	ldr	r3, [pc, #304]	; (80090f0 <_dtoa_r+0x618>)
 8008fc0:	4431      	add	r1, r6
 8008fc2:	910d      	str	r1, [sp, #52]	; 0x34
 8008fc4:	9908      	ldr	r1, [sp, #32]
 8008fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d043      	beq.n	800905a <_dtoa_r+0x582>
 8008fd2:	494d      	ldr	r1, [pc, #308]	; (8009108 <_dtoa_r+0x630>)
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f7 fc39 	bl	800084c <__aeabi_ddiv>
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	f7f7 f953 	bl	8000288 <__aeabi_dsub>
 8008fe2:	9d01      	ldr	r5, [sp, #4]
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	468b      	mov	fp, r1
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7f7 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	f7f7 fa97 	bl	8000524 <__aeabi_i2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 f943 	bl	8000288 <__aeabi_dsub>
 8009002:	3630      	adds	r6, #48	; 0x30
 8009004:	f805 6b01 	strb.w	r6, [r5], #1
 8009008:	4652      	mov	r2, sl
 800900a:	465b      	mov	r3, fp
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	f7f7 fd64 	bl	8000adc <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d163      	bne.n	80090e0 <_dtoa_r+0x608>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	4936      	ldr	r1, [pc, #216]	; (80090f8 <_dtoa_r+0x620>)
 800901e:	2000      	movs	r0, #0
 8009020:	f7f7 f932 	bl	8000288 <__aeabi_dsub>
 8009024:	4652      	mov	r2, sl
 8009026:	465b      	mov	r3, fp
 8009028:	f7f7 fd58 	bl	8000adc <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 80b5 	bne.w	800919c <_dtoa_r+0x6c4>
 8009032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009034:	429d      	cmp	r5, r3
 8009036:	d081      	beq.n	8008f3c <_dtoa_r+0x464>
 8009038:	4b30      	ldr	r3, [pc, #192]	; (80090fc <_dtoa_r+0x624>)
 800903a:	2200      	movs	r2, #0
 800903c:	4650      	mov	r0, sl
 800903e:	4659      	mov	r1, fp
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	4b2d      	ldr	r3, [pc, #180]	; (80090fc <_dtoa_r+0x624>)
 8009046:	4682      	mov	sl, r0
 8009048:	468b      	mov	fp, r1
 800904a:	4640      	mov	r0, r8
 800904c:	4649      	mov	r1, r9
 800904e:	2200      	movs	r2, #0
 8009050:	f7f7 fad2 	bl	80005f8 <__aeabi_dmul>
 8009054:	4680      	mov	r8, r0
 8009056:	4689      	mov	r9, r1
 8009058:	e7c6      	b.n	8008fe8 <_dtoa_r+0x510>
 800905a:	4650      	mov	r0, sl
 800905c:	4659      	mov	r1, fp
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	9d01      	ldr	r5, [sp, #4]
 8009066:	930f      	str	r3, [sp, #60]	; 0x3c
 8009068:	4682      	mov	sl, r0
 800906a:	468b      	mov	fp, r1
 800906c:	4649      	mov	r1, r9
 800906e:	4640      	mov	r0, r8
 8009070:	f7f7 fd72 	bl	8000b58 <__aeabi_d2iz>
 8009074:	4606      	mov	r6, r0
 8009076:	f7f7 fa55 	bl	8000524 <__aeabi_i2d>
 800907a:	3630      	adds	r6, #48	; 0x30
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4640      	mov	r0, r8
 8009082:	4649      	mov	r1, r9
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	f805 6b01 	strb.w	r6, [r5], #1
 800908c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800908e:	429d      	cmp	r5, r3
 8009090:	4680      	mov	r8, r0
 8009092:	4689      	mov	r9, r1
 8009094:	f04f 0200 	mov.w	r2, #0
 8009098:	d124      	bne.n	80090e4 <_dtoa_r+0x60c>
 800909a:	4b1b      	ldr	r3, [pc, #108]	; (8009108 <_dtoa_r+0x630>)
 800909c:	4650      	mov	r0, sl
 800909e:	4659      	mov	r1, fp
 80090a0:	f7f7 f8f4 	bl	800028c <__adddf3>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fd34 	bl	8000b18 <__aeabi_dcmpgt>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d173      	bne.n	800919c <_dtoa_r+0x6c4>
 80090b4:	4652      	mov	r2, sl
 80090b6:	465b      	mov	r3, fp
 80090b8:	4913      	ldr	r1, [pc, #76]	; (8009108 <_dtoa_r+0x630>)
 80090ba:	2000      	movs	r0, #0
 80090bc:	f7f7 f8e4 	bl	8000288 <__aeabi_dsub>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f7f7 fd08 	bl	8000adc <__aeabi_dcmplt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f af35 	beq.w	8008f3c <_dtoa_r+0x464>
 80090d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090d4:	1e6b      	subs	r3, r5, #1
 80090d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80090d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d0f8      	beq.n	80090d2 <_dtoa_r+0x5fa>
 80090e0:	9700      	str	r7, [sp, #0]
 80090e2:	e049      	b.n	8009178 <_dtoa_r+0x6a0>
 80090e4:	4b05      	ldr	r3, [pc, #20]	; (80090fc <_dtoa_r+0x624>)
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	4680      	mov	r8, r0
 80090ec:	4689      	mov	r9, r1
 80090ee:	e7bd      	b.n	800906c <_dtoa_r+0x594>
 80090f0:	0800af88 	.word	0x0800af88
 80090f4:	0800af60 	.word	0x0800af60
 80090f8:	3ff00000 	.word	0x3ff00000
 80090fc:	40240000 	.word	0x40240000
 8009100:	401c0000 	.word	0x401c0000
 8009104:	40140000 	.word	0x40140000
 8009108:	3fe00000 	.word	0x3fe00000
 800910c:	9d01      	ldr	r5, [sp, #4]
 800910e:	4656      	mov	r6, sl
 8009110:	465f      	mov	r7, fp
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 fb97 	bl	800084c <__aeabi_ddiv>
 800911e:	f7f7 fd1b 	bl	8000b58 <__aeabi_d2iz>
 8009122:	4682      	mov	sl, r0
 8009124:	f7f7 f9fe 	bl	8000524 <__aeabi_i2d>
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	f7f7 fa64 	bl	80005f8 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800913c:	f7f7 f8a4 	bl	8000288 <__aeabi_dsub>
 8009140:	f805 6b01 	strb.w	r6, [r5], #1
 8009144:	9e01      	ldr	r6, [sp, #4]
 8009146:	9f03      	ldr	r7, [sp, #12]
 8009148:	1bae      	subs	r6, r5, r6
 800914a:	42b7      	cmp	r7, r6
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	d135      	bne.n	80091be <_dtoa_r+0x6e6>
 8009152:	f7f7 f89b 	bl	800028c <__adddf3>
 8009156:	4642      	mov	r2, r8
 8009158:	464b      	mov	r3, r9
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	f7f7 fcdb 	bl	8000b18 <__aeabi_dcmpgt>
 8009162:	b9d0      	cbnz	r0, 800919a <_dtoa_r+0x6c2>
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009170:	b110      	cbz	r0, 8009178 <_dtoa_r+0x6a0>
 8009172:	f01a 0f01 	tst.w	sl, #1
 8009176:	d110      	bne.n	800919a <_dtoa_r+0x6c2>
 8009178:	4620      	mov	r0, r4
 800917a:	ee18 1a10 	vmov	r1, s16
 800917e:	f000 fbdf 	bl	8009940 <_Bfree>
 8009182:	2300      	movs	r3, #0
 8009184:	9800      	ldr	r0, [sp, #0]
 8009186:	702b      	strb	r3, [r5, #0]
 8009188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800918a:	3001      	adds	r0, #1
 800918c:	6018      	str	r0, [r3, #0]
 800918e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009190:	2b00      	cmp	r3, #0
 8009192:	f43f acf1 	beq.w	8008b78 <_dtoa_r+0xa0>
 8009196:	601d      	str	r5, [r3, #0]
 8009198:	e4ee      	b.n	8008b78 <_dtoa_r+0xa0>
 800919a:	9f00      	ldr	r7, [sp, #0]
 800919c:	462b      	mov	r3, r5
 800919e:	461d      	mov	r5, r3
 80091a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a4:	2a39      	cmp	r2, #57	; 0x39
 80091a6:	d106      	bne.n	80091b6 <_dtoa_r+0x6de>
 80091a8:	9a01      	ldr	r2, [sp, #4]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d1f7      	bne.n	800919e <_dtoa_r+0x6c6>
 80091ae:	9901      	ldr	r1, [sp, #4]
 80091b0:	2230      	movs	r2, #48	; 0x30
 80091b2:	3701      	adds	r7, #1
 80091b4:	700a      	strb	r2, [r1, #0]
 80091b6:	781a      	ldrb	r2, [r3, #0]
 80091b8:	3201      	adds	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e790      	b.n	80090e0 <_dtoa_r+0x608>
 80091be:	4ba6      	ldr	r3, [pc, #664]	; (8009458 <_dtoa_r+0x980>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 fa19 	bl	80005f8 <__aeabi_dmul>
 80091c6:	2200      	movs	r2, #0
 80091c8:	2300      	movs	r3, #0
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	f7f7 fc7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d09d      	beq.n	8009112 <_dtoa_r+0x63a>
 80091d6:	e7cf      	b.n	8009178 <_dtoa_r+0x6a0>
 80091d8:	9a08      	ldr	r2, [sp, #32]
 80091da:	2a00      	cmp	r2, #0
 80091dc:	f000 80d7 	beq.w	800938e <_dtoa_r+0x8b6>
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	2a01      	cmp	r2, #1
 80091e4:	f300 80ba 	bgt.w	800935c <_dtoa_r+0x884>
 80091e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	f000 80b2 	beq.w	8009354 <_dtoa_r+0x87c>
 80091f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091f4:	9e07      	ldr	r6, [sp, #28]
 80091f6:	9d04      	ldr	r5, [sp, #16]
 80091f8:	9a04      	ldr	r2, [sp, #16]
 80091fa:	441a      	add	r2, r3
 80091fc:	9204      	str	r2, [sp, #16]
 80091fe:	9a05      	ldr	r2, [sp, #20]
 8009200:	2101      	movs	r1, #1
 8009202:	441a      	add	r2, r3
 8009204:	4620      	mov	r0, r4
 8009206:	9205      	str	r2, [sp, #20]
 8009208:	f000 fc52 	bl	8009ab0 <__i2b>
 800920c:	4607      	mov	r7, r0
 800920e:	2d00      	cmp	r5, #0
 8009210:	dd0c      	ble.n	800922c <_dtoa_r+0x754>
 8009212:	9b05      	ldr	r3, [sp, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd09      	ble.n	800922c <_dtoa_r+0x754>
 8009218:	42ab      	cmp	r3, r5
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	bfa8      	it	ge
 800921e:	462b      	movge	r3, r5
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	9204      	str	r2, [sp, #16]
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	1aed      	subs	r5, r5, r3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	b31b      	cbz	r3, 8009278 <_dtoa_r+0x7a0>
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 80af 	beq.w	8009396 <_dtoa_r+0x8be>
 8009238:	2e00      	cmp	r6, #0
 800923a:	dd13      	ble.n	8009264 <_dtoa_r+0x78c>
 800923c:	4639      	mov	r1, r7
 800923e:	4632      	mov	r2, r6
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fcf5 	bl	8009c30 <__pow5mult>
 8009246:	ee18 2a10 	vmov	r2, s16
 800924a:	4601      	mov	r1, r0
 800924c:	4607      	mov	r7, r0
 800924e:	4620      	mov	r0, r4
 8009250:	f000 fc44 	bl	8009adc <__multiply>
 8009254:	ee18 1a10 	vmov	r1, s16
 8009258:	4680      	mov	r8, r0
 800925a:	4620      	mov	r0, r4
 800925c:	f000 fb70 	bl	8009940 <_Bfree>
 8009260:	ee08 8a10 	vmov	s16, r8
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	1b9a      	subs	r2, r3, r6
 8009268:	d006      	beq.n	8009278 <_dtoa_r+0x7a0>
 800926a:	ee18 1a10 	vmov	r1, s16
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fcde 	bl	8009c30 <__pow5mult>
 8009274:	ee08 0a10 	vmov	s16, r0
 8009278:	2101      	movs	r1, #1
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fc18 	bl	8009ab0 <__i2b>
 8009280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009282:	2b00      	cmp	r3, #0
 8009284:	4606      	mov	r6, r0
 8009286:	f340 8088 	ble.w	800939a <_dtoa_r+0x8c2>
 800928a:	461a      	mov	r2, r3
 800928c:	4601      	mov	r1, r0
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fcce 	bl	8009c30 <__pow5mult>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	2b01      	cmp	r3, #1
 8009298:	4606      	mov	r6, r0
 800929a:	f340 8081 	ble.w	80093a0 <_dtoa_r+0x8c8>
 800929e:	f04f 0800 	mov.w	r8, #0
 80092a2:	6933      	ldr	r3, [r6, #16]
 80092a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092a8:	6918      	ldr	r0, [r3, #16]
 80092aa:	f000 fbb1 	bl	8009a10 <__hi0bits>
 80092ae:	f1c0 0020 	rsb	r0, r0, #32
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	4418      	add	r0, r3
 80092b6:	f010 001f 	ands.w	r0, r0, #31
 80092ba:	f000 8092 	beq.w	80093e2 <_dtoa_r+0x90a>
 80092be:	f1c0 0320 	rsb	r3, r0, #32
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	f340 808a 	ble.w	80093dc <_dtoa_r+0x904>
 80092c8:	f1c0 001c 	rsb	r0, r0, #28
 80092cc:	9b04      	ldr	r3, [sp, #16]
 80092ce:	4403      	add	r3, r0
 80092d0:	9304      	str	r3, [sp, #16]
 80092d2:	9b05      	ldr	r3, [sp, #20]
 80092d4:	4403      	add	r3, r0
 80092d6:	4405      	add	r5, r0
 80092d8:	9305      	str	r3, [sp, #20]
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dd07      	ble.n	80092f0 <_dtoa_r+0x818>
 80092e0:	ee18 1a10 	vmov	r1, s16
 80092e4:	461a      	mov	r2, r3
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fcfc 	bl	8009ce4 <__lshift>
 80092ec:	ee08 0a10 	vmov	s16, r0
 80092f0:	9b05      	ldr	r3, [sp, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd05      	ble.n	8009302 <_dtoa_r+0x82a>
 80092f6:	4631      	mov	r1, r6
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f000 fcf2 	bl	8009ce4 <__lshift>
 8009300:	4606      	mov	r6, r0
 8009302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d06e      	beq.n	80093e6 <_dtoa_r+0x90e>
 8009308:	ee18 0a10 	vmov	r0, s16
 800930c:	4631      	mov	r1, r6
 800930e:	f000 fd59 	bl	8009dc4 <__mcmp>
 8009312:	2800      	cmp	r0, #0
 8009314:	da67      	bge.n	80093e6 <_dtoa_r+0x90e>
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	3b01      	subs	r3, #1
 800931a:	ee18 1a10 	vmov	r1, s16
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	220a      	movs	r2, #10
 8009322:	2300      	movs	r3, #0
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fb2d 	bl	8009984 <__multadd>
 800932a:	9b08      	ldr	r3, [sp, #32]
 800932c:	ee08 0a10 	vmov	s16, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 81b1 	beq.w	8009698 <_dtoa_r+0xbc0>
 8009336:	2300      	movs	r3, #0
 8009338:	4639      	mov	r1, r7
 800933a:	220a      	movs	r2, #10
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fb21 	bl	8009984 <__multadd>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	4607      	mov	r7, r0
 8009348:	f300 808e 	bgt.w	8009468 <_dtoa_r+0x990>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	2b02      	cmp	r3, #2
 8009350:	dc51      	bgt.n	80093f6 <_dtoa_r+0x91e>
 8009352:	e089      	b.n	8009468 <_dtoa_r+0x990>
 8009354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800935a:	e74b      	b.n	80091f4 <_dtoa_r+0x71c>
 800935c:	9b03      	ldr	r3, [sp, #12]
 800935e:	1e5e      	subs	r6, r3, #1
 8009360:	9b07      	ldr	r3, [sp, #28]
 8009362:	42b3      	cmp	r3, r6
 8009364:	bfbf      	itttt	lt
 8009366:	9b07      	ldrlt	r3, [sp, #28]
 8009368:	9607      	strlt	r6, [sp, #28]
 800936a:	1af2      	sublt	r2, r6, r3
 800936c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800936e:	bfb6      	itet	lt
 8009370:	189b      	addlt	r3, r3, r2
 8009372:	1b9e      	subge	r6, r3, r6
 8009374:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009376:	9b03      	ldr	r3, [sp, #12]
 8009378:	bfb8      	it	lt
 800937a:	2600      	movlt	r6, #0
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfb7      	itett	lt
 8009380:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009384:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009388:	1a9d      	sublt	r5, r3, r2
 800938a:	2300      	movlt	r3, #0
 800938c:	e734      	b.n	80091f8 <_dtoa_r+0x720>
 800938e:	9e07      	ldr	r6, [sp, #28]
 8009390:	9d04      	ldr	r5, [sp, #16]
 8009392:	9f08      	ldr	r7, [sp, #32]
 8009394:	e73b      	b.n	800920e <_dtoa_r+0x736>
 8009396:	9a07      	ldr	r2, [sp, #28]
 8009398:	e767      	b.n	800926a <_dtoa_r+0x792>
 800939a:	9b06      	ldr	r3, [sp, #24]
 800939c:	2b01      	cmp	r3, #1
 800939e:	dc18      	bgt.n	80093d2 <_dtoa_r+0x8fa>
 80093a0:	f1ba 0f00 	cmp.w	sl, #0
 80093a4:	d115      	bne.n	80093d2 <_dtoa_r+0x8fa>
 80093a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093aa:	b993      	cbnz	r3, 80093d2 <_dtoa_r+0x8fa>
 80093ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093b0:	0d1b      	lsrs	r3, r3, #20
 80093b2:	051b      	lsls	r3, r3, #20
 80093b4:	b183      	cbz	r3, 80093d8 <_dtoa_r+0x900>
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	3301      	adds	r3, #1
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	9b05      	ldr	r3, [sp, #20]
 80093be:	3301      	adds	r3, #1
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	f04f 0801 	mov.w	r8, #1
 80093c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f af6a 	bne.w	80092a2 <_dtoa_r+0x7ca>
 80093ce:	2001      	movs	r0, #1
 80093d0:	e76f      	b.n	80092b2 <_dtoa_r+0x7da>
 80093d2:	f04f 0800 	mov.w	r8, #0
 80093d6:	e7f6      	b.n	80093c6 <_dtoa_r+0x8ee>
 80093d8:	4698      	mov	r8, r3
 80093da:	e7f4      	b.n	80093c6 <_dtoa_r+0x8ee>
 80093dc:	f43f af7d 	beq.w	80092da <_dtoa_r+0x802>
 80093e0:	4618      	mov	r0, r3
 80093e2:	301c      	adds	r0, #28
 80093e4:	e772      	b.n	80092cc <_dtoa_r+0x7f4>
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc37      	bgt.n	800945c <_dtoa_r+0x984>
 80093ec:	9b06      	ldr	r3, [sp, #24]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	dd34      	ble.n	800945c <_dtoa_r+0x984>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	9b02      	ldr	r3, [sp, #8]
 80093f8:	b96b      	cbnz	r3, 8009416 <_dtoa_r+0x93e>
 80093fa:	4631      	mov	r1, r6
 80093fc:	2205      	movs	r2, #5
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fac0 	bl	8009984 <__multadd>
 8009404:	4601      	mov	r1, r0
 8009406:	4606      	mov	r6, r0
 8009408:	ee18 0a10 	vmov	r0, s16
 800940c:	f000 fcda 	bl	8009dc4 <__mcmp>
 8009410:	2800      	cmp	r0, #0
 8009412:	f73f adbb 	bgt.w	8008f8c <_dtoa_r+0x4b4>
 8009416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009418:	9d01      	ldr	r5, [sp, #4]
 800941a:	43db      	mvns	r3, r3
 800941c:	9300      	str	r3, [sp, #0]
 800941e:	f04f 0800 	mov.w	r8, #0
 8009422:	4631      	mov	r1, r6
 8009424:	4620      	mov	r0, r4
 8009426:	f000 fa8b 	bl	8009940 <_Bfree>
 800942a:	2f00      	cmp	r7, #0
 800942c:	f43f aea4 	beq.w	8009178 <_dtoa_r+0x6a0>
 8009430:	f1b8 0f00 	cmp.w	r8, #0
 8009434:	d005      	beq.n	8009442 <_dtoa_r+0x96a>
 8009436:	45b8      	cmp	r8, r7
 8009438:	d003      	beq.n	8009442 <_dtoa_r+0x96a>
 800943a:	4641      	mov	r1, r8
 800943c:	4620      	mov	r0, r4
 800943e:	f000 fa7f 	bl	8009940 <_Bfree>
 8009442:	4639      	mov	r1, r7
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fa7b 	bl	8009940 <_Bfree>
 800944a:	e695      	b.n	8009178 <_dtoa_r+0x6a0>
 800944c:	2600      	movs	r6, #0
 800944e:	4637      	mov	r7, r6
 8009450:	e7e1      	b.n	8009416 <_dtoa_r+0x93e>
 8009452:	9700      	str	r7, [sp, #0]
 8009454:	4637      	mov	r7, r6
 8009456:	e599      	b.n	8008f8c <_dtoa_r+0x4b4>
 8009458:	40240000 	.word	0x40240000
 800945c:	9b08      	ldr	r3, [sp, #32]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80ca 	beq.w	80095f8 <_dtoa_r+0xb20>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	9302      	str	r3, [sp, #8]
 8009468:	2d00      	cmp	r5, #0
 800946a:	dd05      	ble.n	8009478 <_dtoa_r+0x9a0>
 800946c:	4639      	mov	r1, r7
 800946e:	462a      	mov	r2, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fc37 	bl	8009ce4 <__lshift>
 8009476:	4607      	mov	r7, r0
 8009478:	f1b8 0f00 	cmp.w	r8, #0
 800947c:	d05b      	beq.n	8009536 <_dtoa_r+0xa5e>
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fa1d 	bl	80098c0 <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b928      	cbnz	r0, 8009496 <_dtoa_r+0x9be>
 800948a:	4b87      	ldr	r3, [pc, #540]	; (80096a8 <_dtoa_r+0xbd0>)
 800948c:	4602      	mov	r2, r0
 800948e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009492:	f7ff bb3b 	b.w	8008b0c <_dtoa_r+0x34>
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	f107 010c 	add.w	r1, r7, #12
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7fe fdf5 	bl	8008090 <memcpy>
 80094a6:	2201      	movs	r2, #1
 80094a8:	4629      	mov	r1, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 fc1a 	bl	8009ce4 <__lshift>
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	f103 0901 	add.w	r9, r3, #1
 80094b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ba:	4413      	add	r3, r2
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	f00a 0301 	and.w	r3, sl, #1
 80094c2:	46b8      	mov	r8, r7
 80094c4:	9304      	str	r3, [sp, #16]
 80094c6:	4607      	mov	r7, r0
 80094c8:	4631      	mov	r1, r6
 80094ca:	ee18 0a10 	vmov	r0, s16
 80094ce:	f7ff fa77 	bl	80089c0 <quorem>
 80094d2:	4641      	mov	r1, r8
 80094d4:	9002      	str	r0, [sp, #8]
 80094d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80094da:	ee18 0a10 	vmov	r0, s16
 80094de:	f000 fc71 	bl	8009dc4 <__mcmp>
 80094e2:	463a      	mov	r2, r7
 80094e4:	9003      	str	r0, [sp, #12]
 80094e6:	4631      	mov	r1, r6
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 fc87 	bl	8009dfc <__mdiff>
 80094ee:	68c2      	ldr	r2, [r0, #12]
 80094f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80094f4:	4605      	mov	r5, r0
 80094f6:	bb02      	cbnz	r2, 800953a <_dtoa_r+0xa62>
 80094f8:	4601      	mov	r1, r0
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f000 fc61 	bl	8009dc4 <__mcmp>
 8009502:	4602      	mov	r2, r0
 8009504:	4629      	mov	r1, r5
 8009506:	4620      	mov	r0, r4
 8009508:	9207      	str	r2, [sp, #28]
 800950a:	f000 fa19 	bl	8009940 <_Bfree>
 800950e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009512:	ea43 0102 	orr.w	r1, r3, r2
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	430b      	orrs	r3, r1
 800951a:	464d      	mov	r5, r9
 800951c:	d10f      	bne.n	800953e <_dtoa_r+0xa66>
 800951e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009522:	d02a      	beq.n	800957a <_dtoa_r+0xaa2>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd02      	ble.n	8009530 <_dtoa_r+0xa58>
 800952a:	9b02      	ldr	r3, [sp, #8]
 800952c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009530:	f88b a000 	strb.w	sl, [fp]
 8009534:	e775      	b.n	8009422 <_dtoa_r+0x94a>
 8009536:	4638      	mov	r0, r7
 8009538:	e7ba      	b.n	80094b0 <_dtoa_r+0x9d8>
 800953a:	2201      	movs	r2, #1
 800953c:	e7e2      	b.n	8009504 <_dtoa_r+0xa2c>
 800953e:	9b03      	ldr	r3, [sp, #12]
 8009540:	2b00      	cmp	r3, #0
 8009542:	db04      	blt.n	800954e <_dtoa_r+0xa76>
 8009544:	9906      	ldr	r1, [sp, #24]
 8009546:	430b      	orrs	r3, r1
 8009548:	9904      	ldr	r1, [sp, #16]
 800954a:	430b      	orrs	r3, r1
 800954c:	d122      	bne.n	8009594 <_dtoa_r+0xabc>
 800954e:	2a00      	cmp	r2, #0
 8009550:	ddee      	ble.n	8009530 <_dtoa_r+0xa58>
 8009552:	ee18 1a10 	vmov	r1, s16
 8009556:	2201      	movs	r2, #1
 8009558:	4620      	mov	r0, r4
 800955a:	f000 fbc3 	bl	8009ce4 <__lshift>
 800955e:	4631      	mov	r1, r6
 8009560:	ee08 0a10 	vmov	s16, r0
 8009564:	f000 fc2e 	bl	8009dc4 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	dc03      	bgt.n	8009574 <_dtoa_r+0xa9c>
 800956c:	d1e0      	bne.n	8009530 <_dtoa_r+0xa58>
 800956e:	f01a 0f01 	tst.w	sl, #1
 8009572:	d0dd      	beq.n	8009530 <_dtoa_r+0xa58>
 8009574:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009578:	d1d7      	bne.n	800952a <_dtoa_r+0xa52>
 800957a:	2339      	movs	r3, #57	; 0x39
 800957c:	f88b 3000 	strb.w	r3, [fp]
 8009580:	462b      	mov	r3, r5
 8009582:	461d      	mov	r5, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800958a:	2a39      	cmp	r2, #57	; 0x39
 800958c:	d071      	beq.n	8009672 <_dtoa_r+0xb9a>
 800958e:	3201      	adds	r2, #1
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	e746      	b.n	8009422 <_dtoa_r+0x94a>
 8009594:	2a00      	cmp	r2, #0
 8009596:	dd07      	ble.n	80095a8 <_dtoa_r+0xad0>
 8009598:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800959c:	d0ed      	beq.n	800957a <_dtoa_r+0xaa2>
 800959e:	f10a 0301 	add.w	r3, sl, #1
 80095a2:	f88b 3000 	strb.w	r3, [fp]
 80095a6:	e73c      	b.n	8009422 <_dtoa_r+0x94a>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095ae:	4599      	cmp	r9, r3
 80095b0:	d047      	beq.n	8009642 <_dtoa_r+0xb6a>
 80095b2:	ee18 1a10 	vmov	r1, s16
 80095b6:	2300      	movs	r3, #0
 80095b8:	220a      	movs	r2, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f9e2 	bl	8009984 <__multadd>
 80095c0:	45b8      	cmp	r8, r7
 80095c2:	ee08 0a10 	vmov	s16, r0
 80095c6:	f04f 0300 	mov.w	r3, #0
 80095ca:	f04f 020a 	mov.w	r2, #10
 80095ce:	4641      	mov	r1, r8
 80095d0:	4620      	mov	r0, r4
 80095d2:	d106      	bne.n	80095e2 <_dtoa_r+0xb0a>
 80095d4:	f000 f9d6 	bl	8009984 <__multadd>
 80095d8:	4680      	mov	r8, r0
 80095da:	4607      	mov	r7, r0
 80095dc:	f109 0901 	add.w	r9, r9, #1
 80095e0:	e772      	b.n	80094c8 <_dtoa_r+0x9f0>
 80095e2:	f000 f9cf 	bl	8009984 <__multadd>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4680      	mov	r8, r0
 80095ea:	2300      	movs	r3, #0
 80095ec:	220a      	movs	r2, #10
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 f9c8 	bl	8009984 <__multadd>
 80095f4:	4607      	mov	r7, r0
 80095f6:	e7f1      	b.n	80095dc <_dtoa_r+0xb04>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	9d01      	ldr	r5, [sp, #4]
 80095fe:	ee18 0a10 	vmov	r0, s16
 8009602:	4631      	mov	r1, r6
 8009604:	f7ff f9dc 	bl	80089c0 <quorem>
 8009608:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	f805 ab01 	strb.w	sl, [r5], #1
 8009612:	1aea      	subs	r2, r5, r3
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	4293      	cmp	r3, r2
 8009618:	dd09      	ble.n	800962e <_dtoa_r+0xb56>
 800961a:	ee18 1a10 	vmov	r1, s16
 800961e:	2300      	movs	r3, #0
 8009620:	220a      	movs	r2, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f000 f9ae 	bl	8009984 <__multadd>
 8009628:	ee08 0a10 	vmov	s16, r0
 800962c:	e7e7      	b.n	80095fe <_dtoa_r+0xb26>
 800962e:	9b02      	ldr	r3, [sp, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	bfc8      	it	gt
 8009634:	461d      	movgt	r5, r3
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	bfd8      	it	le
 800963a:	2501      	movle	r5, #1
 800963c:	441d      	add	r5, r3
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	ee18 1a10 	vmov	r1, s16
 8009646:	2201      	movs	r2, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fb4b 	bl	8009ce4 <__lshift>
 800964e:	4631      	mov	r1, r6
 8009650:	ee08 0a10 	vmov	s16, r0
 8009654:	f000 fbb6 	bl	8009dc4 <__mcmp>
 8009658:	2800      	cmp	r0, #0
 800965a:	dc91      	bgt.n	8009580 <_dtoa_r+0xaa8>
 800965c:	d102      	bne.n	8009664 <_dtoa_r+0xb8c>
 800965e:	f01a 0f01 	tst.w	sl, #1
 8009662:	d18d      	bne.n	8009580 <_dtoa_r+0xaa8>
 8009664:	462b      	mov	r3, r5
 8009666:	461d      	mov	r5, r3
 8009668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966c:	2a30      	cmp	r2, #48	; 0x30
 800966e:	d0fa      	beq.n	8009666 <_dtoa_r+0xb8e>
 8009670:	e6d7      	b.n	8009422 <_dtoa_r+0x94a>
 8009672:	9a01      	ldr	r2, [sp, #4]
 8009674:	429a      	cmp	r2, r3
 8009676:	d184      	bne.n	8009582 <_dtoa_r+0xaaa>
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	3301      	adds	r3, #1
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	2331      	movs	r3, #49	; 0x31
 8009680:	7013      	strb	r3, [r2, #0]
 8009682:	e6ce      	b.n	8009422 <_dtoa_r+0x94a>
 8009684:	4b09      	ldr	r3, [pc, #36]	; (80096ac <_dtoa_r+0xbd4>)
 8009686:	f7ff ba95 	b.w	8008bb4 <_dtoa_r+0xdc>
 800968a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f aa6e 	bne.w	8008b6e <_dtoa_r+0x96>
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <_dtoa_r+0xbd8>)
 8009694:	f7ff ba8e 	b.w	8008bb4 <_dtoa_r+0xdc>
 8009698:	9b02      	ldr	r3, [sp, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	dcae      	bgt.n	80095fc <_dtoa_r+0xb24>
 800969e:	9b06      	ldr	r3, [sp, #24]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	f73f aea8 	bgt.w	80093f6 <_dtoa_r+0x91e>
 80096a6:	e7a9      	b.n	80095fc <_dtoa_r+0xb24>
 80096a8:	0800ae90 	.word	0x0800ae90
 80096ac:	0800acec 	.word	0x0800acec
 80096b0:	0800ae11 	.word	0x0800ae11

080096b4 <std>:
 80096b4:	2300      	movs	r3, #0
 80096b6:	b510      	push	{r4, lr}
 80096b8:	4604      	mov	r4, r0
 80096ba:	e9c0 3300 	strd	r3, r3, [r0]
 80096be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c2:	6083      	str	r3, [r0, #8]
 80096c4:	8181      	strh	r1, [r0, #12]
 80096c6:	6643      	str	r3, [r0, #100]	; 0x64
 80096c8:	81c2      	strh	r2, [r0, #14]
 80096ca:	6183      	str	r3, [r0, #24]
 80096cc:	4619      	mov	r1, r3
 80096ce:	2208      	movs	r2, #8
 80096d0:	305c      	adds	r0, #92	; 0x5c
 80096d2:	f7fe fceb 	bl	80080ac <memset>
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x38>)
 80096d8:	6263      	str	r3, [r4, #36]	; 0x24
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x3c>)
 80096dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x40>)
 80096e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x44>)
 80096e4:	6224      	str	r4, [r4, #32]
 80096e6:	6323      	str	r3, [r4, #48]	; 0x30
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	bf00      	nop
 80096ec:	0800a489 	.word	0x0800a489
 80096f0:	0800a4ab 	.word	0x0800a4ab
 80096f4:	0800a4e3 	.word	0x0800a4e3
 80096f8:	0800a507 	.word	0x0800a507

080096fc <_cleanup_r>:
 80096fc:	4901      	ldr	r1, [pc, #4]	; (8009704 <_cleanup_r+0x8>)
 80096fe:	f000 b8af 	b.w	8009860 <_fwalk_reent>
 8009702:	bf00      	nop
 8009704:	0800a81d 	.word	0x0800a81d

08009708 <__sfmoreglue>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	2268      	movs	r2, #104	; 0x68
 800970c:	1e4d      	subs	r5, r1, #1
 800970e:	4355      	muls	r5, r2
 8009710:	460e      	mov	r6, r1
 8009712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009716:	f000 fcd9 	bl	800a0cc <_malloc_r>
 800971a:	4604      	mov	r4, r0
 800971c:	b140      	cbz	r0, 8009730 <__sfmoreglue+0x28>
 800971e:	2100      	movs	r1, #0
 8009720:	e9c0 1600 	strd	r1, r6, [r0]
 8009724:	300c      	adds	r0, #12
 8009726:	60a0      	str	r0, [r4, #8]
 8009728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800972c:	f7fe fcbe 	bl	80080ac <memset>
 8009730:	4620      	mov	r0, r4
 8009732:	bd70      	pop	{r4, r5, r6, pc}

08009734 <__sfp_lock_acquire>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__sfp_lock_acquire+0x8>)
 8009736:	f000 b8b8 	b.w	80098aa <__retarget_lock_acquire_recursive>
 800973a:	bf00      	nop
 800973c:	20002469 	.word	0x20002469

08009740 <__sfp_lock_release>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sfp_lock_release+0x8>)
 8009742:	f000 b8b3 	b.w	80098ac <__retarget_lock_release_recursive>
 8009746:	bf00      	nop
 8009748:	20002469 	.word	0x20002469

0800974c <__sinit_lock_acquire>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sinit_lock_acquire+0x8>)
 800974e:	f000 b8ac 	b.w	80098aa <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	2000246a 	.word	0x2000246a

08009758 <__sinit_lock_release>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__sinit_lock_release+0x8>)
 800975a:	f000 b8a7 	b.w	80098ac <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	2000246a 	.word	0x2000246a

08009764 <__sinit>:
 8009764:	b510      	push	{r4, lr}
 8009766:	4604      	mov	r4, r0
 8009768:	f7ff fff0 	bl	800974c <__sinit_lock_acquire>
 800976c:	69a3      	ldr	r3, [r4, #24]
 800976e:	b11b      	cbz	r3, 8009778 <__sinit+0x14>
 8009770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009774:	f7ff bff0 	b.w	8009758 <__sinit_lock_release>
 8009778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800977c:	6523      	str	r3, [r4, #80]	; 0x50
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <__sinit+0x68>)
 8009780:	4a13      	ldr	r2, [pc, #76]	; (80097d0 <__sinit+0x6c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	62a2      	str	r2, [r4, #40]	; 0x28
 8009786:	42a3      	cmp	r3, r4
 8009788:	bf04      	itt	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	61a3      	streq	r3, [r4, #24]
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f820 	bl	80097d4 <__sfp>
 8009794:	6060      	str	r0, [r4, #4]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f81c 	bl	80097d4 <__sfp>
 800979c:	60a0      	str	r0, [r4, #8]
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f818 	bl	80097d4 <__sfp>
 80097a4:	2200      	movs	r2, #0
 80097a6:	60e0      	str	r0, [r4, #12]
 80097a8:	2104      	movs	r1, #4
 80097aa:	6860      	ldr	r0, [r4, #4]
 80097ac:	f7ff ff82 	bl	80096b4 <std>
 80097b0:	68a0      	ldr	r0, [r4, #8]
 80097b2:	2201      	movs	r2, #1
 80097b4:	2109      	movs	r1, #9
 80097b6:	f7ff ff7d 	bl	80096b4 <std>
 80097ba:	68e0      	ldr	r0, [r4, #12]
 80097bc:	2202      	movs	r2, #2
 80097be:	2112      	movs	r1, #18
 80097c0:	f7ff ff78 	bl	80096b4 <std>
 80097c4:	2301      	movs	r3, #1
 80097c6:	61a3      	str	r3, [r4, #24]
 80097c8:	e7d2      	b.n	8009770 <__sinit+0xc>
 80097ca:	bf00      	nop
 80097cc:	0800acd8 	.word	0x0800acd8
 80097d0:	080096fd 	.word	0x080096fd

080097d4 <__sfp>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	4607      	mov	r7, r0
 80097d8:	f7ff ffac 	bl	8009734 <__sfp_lock_acquire>
 80097dc:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <__sfp+0x84>)
 80097de:	681e      	ldr	r6, [r3, #0]
 80097e0:	69b3      	ldr	r3, [r6, #24]
 80097e2:	b913      	cbnz	r3, 80097ea <__sfp+0x16>
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff ffbd 	bl	8009764 <__sinit>
 80097ea:	3648      	adds	r6, #72	; 0x48
 80097ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	d503      	bpl.n	80097fc <__sfp+0x28>
 80097f4:	6833      	ldr	r3, [r6, #0]
 80097f6:	b30b      	cbz	r3, 800983c <__sfp+0x68>
 80097f8:	6836      	ldr	r6, [r6, #0]
 80097fa:	e7f7      	b.n	80097ec <__sfp+0x18>
 80097fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009800:	b9d5      	cbnz	r5, 8009838 <__sfp+0x64>
 8009802:	4b16      	ldr	r3, [pc, #88]	; (800985c <__sfp+0x88>)
 8009804:	60e3      	str	r3, [r4, #12]
 8009806:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800980a:	6665      	str	r5, [r4, #100]	; 0x64
 800980c:	f000 f84c 	bl	80098a8 <__retarget_lock_init_recursive>
 8009810:	f7ff ff96 	bl	8009740 <__sfp_lock_release>
 8009814:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009818:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800981c:	6025      	str	r5, [r4, #0]
 800981e:	61a5      	str	r5, [r4, #24]
 8009820:	2208      	movs	r2, #8
 8009822:	4629      	mov	r1, r5
 8009824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009828:	f7fe fc40 	bl	80080ac <memset>
 800982c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009834:	4620      	mov	r0, r4
 8009836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009838:	3468      	adds	r4, #104	; 0x68
 800983a:	e7d9      	b.n	80097f0 <__sfp+0x1c>
 800983c:	2104      	movs	r1, #4
 800983e:	4638      	mov	r0, r7
 8009840:	f7ff ff62 	bl	8009708 <__sfmoreglue>
 8009844:	4604      	mov	r4, r0
 8009846:	6030      	str	r0, [r6, #0]
 8009848:	2800      	cmp	r0, #0
 800984a:	d1d5      	bne.n	80097f8 <__sfp+0x24>
 800984c:	f7ff ff78 	bl	8009740 <__sfp_lock_release>
 8009850:	230c      	movs	r3, #12
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	e7ee      	b.n	8009834 <__sfp+0x60>
 8009856:	bf00      	nop
 8009858:	0800acd8 	.word	0x0800acd8
 800985c:	ffff0001 	.word	0xffff0001

08009860 <_fwalk_reent>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	4606      	mov	r6, r0
 8009866:	4688      	mov	r8, r1
 8009868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800986c:	2700      	movs	r7, #0
 800986e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009872:	f1b9 0901 	subs.w	r9, r9, #1
 8009876:	d505      	bpl.n	8009884 <_fwalk_reent+0x24>
 8009878:	6824      	ldr	r4, [r4, #0]
 800987a:	2c00      	cmp	r4, #0
 800987c:	d1f7      	bne.n	800986e <_fwalk_reent+0xe>
 800987e:	4638      	mov	r0, r7
 8009880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009884:	89ab      	ldrh	r3, [r5, #12]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d907      	bls.n	800989a <_fwalk_reent+0x3a>
 800988a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800988e:	3301      	adds	r3, #1
 8009890:	d003      	beq.n	800989a <_fwalk_reent+0x3a>
 8009892:	4629      	mov	r1, r5
 8009894:	4630      	mov	r0, r6
 8009896:	47c0      	blx	r8
 8009898:	4307      	orrs	r7, r0
 800989a:	3568      	adds	r5, #104	; 0x68
 800989c:	e7e9      	b.n	8009872 <_fwalk_reent+0x12>
	...

080098a0 <_localeconv_r>:
 80098a0:	4800      	ldr	r0, [pc, #0]	; (80098a4 <_localeconv_r+0x4>)
 80098a2:	4770      	bx	lr
 80098a4:	20000164 	.word	0x20000164

080098a8 <__retarget_lock_init_recursive>:
 80098a8:	4770      	bx	lr

080098aa <__retarget_lock_acquire_recursive>:
 80098aa:	4770      	bx	lr

080098ac <__retarget_lock_release_recursive>:
 80098ac:	4770      	bx	lr
	...

080098b0 <malloc>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <malloc+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f000 bc09 	b.w	800a0cc <_malloc_r>
 80098ba:	bf00      	nop
 80098bc:	20000010 	.word	0x20000010

080098c0 <_Balloc>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098c4:	4604      	mov	r4, r0
 80098c6:	460d      	mov	r5, r1
 80098c8:	b976      	cbnz	r6, 80098e8 <_Balloc+0x28>
 80098ca:	2010      	movs	r0, #16
 80098cc:	f7ff fff0 	bl	80098b0 <malloc>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6260      	str	r0, [r4, #36]	; 0x24
 80098d4:	b920      	cbnz	r0, 80098e0 <_Balloc+0x20>
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <_Balloc+0x78>)
 80098d8:	4818      	ldr	r0, [pc, #96]	; (800993c <_Balloc+0x7c>)
 80098da:	2166      	movs	r1, #102	; 0x66
 80098dc:	f000 feea 	bl	800a6b4 <__assert_func>
 80098e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098e4:	6006      	str	r6, [r0, #0]
 80098e6:	60c6      	str	r6, [r0, #12]
 80098e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098ea:	68f3      	ldr	r3, [r6, #12]
 80098ec:	b183      	cbz	r3, 8009910 <_Balloc+0x50>
 80098ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098f6:	b9b8      	cbnz	r0, 8009928 <_Balloc+0x68>
 80098f8:	2101      	movs	r1, #1
 80098fa:	fa01 f605 	lsl.w	r6, r1, r5
 80098fe:	1d72      	adds	r2, r6, #5
 8009900:	0092      	lsls	r2, r2, #2
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fb60 	bl	8009fc8 <_calloc_r>
 8009908:	b160      	cbz	r0, 8009924 <_Balloc+0x64>
 800990a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800990e:	e00e      	b.n	800992e <_Balloc+0x6e>
 8009910:	2221      	movs	r2, #33	; 0x21
 8009912:	2104      	movs	r1, #4
 8009914:	4620      	mov	r0, r4
 8009916:	f000 fb57 	bl	8009fc8 <_calloc_r>
 800991a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800991c:	60f0      	str	r0, [r6, #12]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d1e4      	bne.n	80098ee <_Balloc+0x2e>
 8009924:	2000      	movs	r0, #0
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	6802      	ldr	r2, [r0, #0]
 800992a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800992e:	2300      	movs	r3, #0
 8009930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009934:	e7f7      	b.n	8009926 <_Balloc+0x66>
 8009936:	bf00      	nop
 8009938:	0800ae1e 	.word	0x0800ae1e
 800993c:	0800af04 	.word	0x0800af04

08009940 <_Bfree>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009944:	4605      	mov	r5, r0
 8009946:	460c      	mov	r4, r1
 8009948:	b976      	cbnz	r6, 8009968 <_Bfree+0x28>
 800994a:	2010      	movs	r0, #16
 800994c:	f7ff ffb0 	bl	80098b0 <malloc>
 8009950:	4602      	mov	r2, r0
 8009952:	6268      	str	r0, [r5, #36]	; 0x24
 8009954:	b920      	cbnz	r0, 8009960 <_Bfree+0x20>
 8009956:	4b09      	ldr	r3, [pc, #36]	; (800997c <_Bfree+0x3c>)
 8009958:	4809      	ldr	r0, [pc, #36]	; (8009980 <_Bfree+0x40>)
 800995a:	218a      	movs	r1, #138	; 0x8a
 800995c:	f000 feaa 	bl	800a6b4 <__assert_func>
 8009960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009964:	6006      	str	r6, [r0, #0]
 8009966:	60c6      	str	r6, [r0, #12]
 8009968:	b13c      	cbz	r4, 800997a <_Bfree+0x3a>
 800996a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800996c:	6862      	ldr	r2, [r4, #4]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009974:	6021      	str	r1, [r4, #0]
 8009976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	0800ae1e 	.word	0x0800ae1e
 8009980:	0800af04 	.word	0x0800af04

08009984 <__multadd>:
 8009984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	690d      	ldr	r5, [r1, #16]
 800998a:	4607      	mov	r7, r0
 800998c:	460c      	mov	r4, r1
 800998e:	461e      	mov	r6, r3
 8009990:	f101 0c14 	add.w	ip, r1, #20
 8009994:	2000      	movs	r0, #0
 8009996:	f8dc 3000 	ldr.w	r3, [ip]
 800999a:	b299      	uxth	r1, r3
 800999c:	fb02 6101 	mla	r1, r2, r1, r6
 80099a0:	0c1e      	lsrs	r6, r3, #16
 80099a2:	0c0b      	lsrs	r3, r1, #16
 80099a4:	fb02 3306 	mla	r3, r2, r6, r3
 80099a8:	b289      	uxth	r1, r1
 80099aa:	3001      	adds	r0, #1
 80099ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099b0:	4285      	cmp	r5, r0
 80099b2:	f84c 1b04 	str.w	r1, [ip], #4
 80099b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ba:	dcec      	bgt.n	8009996 <__multadd+0x12>
 80099bc:	b30e      	cbz	r6, 8009a02 <__multadd+0x7e>
 80099be:	68a3      	ldr	r3, [r4, #8]
 80099c0:	42ab      	cmp	r3, r5
 80099c2:	dc19      	bgt.n	80099f8 <__multadd+0x74>
 80099c4:	6861      	ldr	r1, [r4, #4]
 80099c6:	4638      	mov	r0, r7
 80099c8:	3101      	adds	r1, #1
 80099ca:	f7ff ff79 	bl	80098c0 <_Balloc>
 80099ce:	4680      	mov	r8, r0
 80099d0:	b928      	cbnz	r0, 80099de <__multadd+0x5a>
 80099d2:	4602      	mov	r2, r0
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <__multadd+0x84>)
 80099d6:	480d      	ldr	r0, [pc, #52]	; (8009a0c <__multadd+0x88>)
 80099d8:	21b5      	movs	r1, #181	; 0xb5
 80099da:	f000 fe6b 	bl	800a6b4 <__assert_func>
 80099de:	6922      	ldr	r2, [r4, #16]
 80099e0:	3202      	adds	r2, #2
 80099e2:	f104 010c 	add.w	r1, r4, #12
 80099e6:	0092      	lsls	r2, r2, #2
 80099e8:	300c      	adds	r0, #12
 80099ea:	f7fe fb51 	bl	8008090 <memcpy>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff ffa5 	bl	8009940 <_Bfree>
 80099f6:	4644      	mov	r4, r8
 80099f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099fc:	3501      	adds	r5, #1
 80099fe:	615e      	str	r6, [r3, #20]
 8009a00:	6125      	str	r5, [r4, #16]
 8009a02:	4620      	mov	r0, r4
 8009a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a08:	0800ae90 	.word	0x0800ae90
 8009a0c:	0800af04 	.word	0x0800af04

08009a10 <__hi0bits>:
 8009a10:	0c03      	lsrs	r3, r0, #16
 8009a12:	041b      	lsls	r3, r3, #16
 8009a14:	b9d3      	cbnz	r3, 8009a4c <__hi0bits+0x3c>
 8009a16:	0400      	lsls	r0, r0, #16
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a1e:	bf04      	itt	eq
 8009a20:	0200      	lsleq	r0, r0, #8
 8009a22:	3308      	addeq	r3, #8
 8009a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a28:	bf04      	itt	eq
 8009a2a:	0100      	lsleq	r0, r0, #4
 8009a2c:	3304      	addeq	r3, #4
 8009a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a32:	bf04      	itt	eq
 8009a34:	0080      	lsleq	r0, r0, #2
 8009a36:	3302      	addeq	r3, #2
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	db05      	blt.n	8009a48 <__hi0bits+0x38>
 8009a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a40:	f103 0301 	add.w	r3, r3, #1
 8009a44:	bf08      	it	eq
 8009a46:	2320      	moveq	r3, #32
 8009a48:	4618      	mov	r0, r3
 8009a4a:	4770      	bx	lr
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e7e4      	b.n	8009a1a <__hi0bits+0xa>

08009a50 <__lo0bits>:
 8009a50:	6803      	ldr	r3, [r0, #0]
 8009a52:	f013 0207 	ands.w	r2, r3, #7
 8009a56:	4601      	mov	r1, r0
 8009a58:	d00b      	beq.n	8009a72 <__lo0bits+0x22>
 8009a5a:	07da      	lsls	r2, r3, #31
 8009a5c:	d423      	bmi.n	8009aa6 <__lo0bits+0x56>
 8009a5e:	0798      	lsls	r0, r3, #30
 8009a60:	bf49      	itett	mi
 8009a62:	085b      	lsrmi	r3, r3, #1
 8009a64:	089b      	lsrpl	r3, r3, #2
 8009a66:	2001      	movmi	r0, #1
 8009a68:	600b      	strmi	r3, [r1, #0]
 8009a6a:	bf5c      	itt	pl
 8009a6c:	600b      	strpl	r3, [r1, #0]
 8009a6e:	2002      	movpl	r0, #2
 8009a70:	4770      	bx	lr
 8009a72:	b298      	uxth	r0, r3
 8009a74:	b9a8      	cbnz	r0, 8009aa2 <__lo0bits+0x52>
 8009a76:	0c1b      	lsrs	r3, r3, #16
 8009a78:	2010      	movs	r0, #16
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	b90a      	cbnz	r2, 8009a82 <__lo0bits+0x32>
 8009a7e:	3008      	adds	r0, #8
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	071a      	lsls	r2, r3, #28
 8009a84:	bf04      	itt	eq
 8009a86:	091b      	lsreq	r3, r3, #4
 8009a88:	3004      	addeq	r0, #4
 8009a8a:	079a      	lsls	r2, r3, #30
 8009a8c:	bf04      	itt	eq
 8009a8e:	089b      	lsreq	r3, r3, #2
 8009a90:	3002      	addeq	r0, #2
 8009a92:	07da      	lsls	r2, r3, #31
 8009a94:	d403      	bmi.n	8009a9e <__lo0bits+0x4e>
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	f100 0001 	add.w	r0, r0, #1
 8009a9c:	d005      	beq.n	8009aaa <__lo0bits+0x5a>
 8009a9e:	600b      	str	r3, [r1, #0]
 8009aa0:	4770      	bx	lr
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	e7e9      	b.n	8009a7a <__lo0bits+0x2a>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	4770      	bx	lr
 8009aaa:	2020      	movs	r0, #32
 8009aac:	4770      	bx	lr
	...

08009ab0 <__i2b>:
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	f7ff ff03 	bl	80098c0 <_Balloc>
 8009aba:	4602      	mov	r2, r0
 8009abc:	b928      	cbnz	r0, 8009aca <__i2b+0x1a>
 8009abe:	4b05      	ldr	r3, [pc, #20]	; (8009ad4 <__i2b+0x24>)
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <__i2b+0x28>)
 8009ac2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009ac6:	f000 fdf5 	bl	800a6b4 <__assert_func>
 8009aca:	2301      	movs	r3, #1
 8009acc:	6144      	str	r4, [r0, #20]
 8009ace:	6103      	str	r3, [r0, #16]
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0800ae90 	.word	0x0800ae90
 8009ad8:	0800af04 	.word	0x0800af04

08009adc <__multiply>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	690a      	ldr	r2, [r1, #16]
 8009ae4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	bfb8      	it	lt
 8009aec:	460b      	movlt	r3, r1
 8009aee:	460c      	mov	r4, r1
 8009af0:	bfbc      	itt	lt
 8009af2:	464c      	movlt	r4, r9
 8009af4:	4699      	movlt	r9, r3
 8009af6:	6927      	ldr	r7, [r4, #16]
 8009af8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	6861      	ldr	r1, [r4, #4]
 8009b00:	eb07 060a 	add.w	r6, r7, sl
 8009b04:	42b3      	cmp	r3, r6
 8009b06:	b085      	sub	sp, #20
 8009b08:	bfb8      	it	lt
 8009b0a:	3101      	addlt	r1, #1
 8009b0c:	f7ff fed8 	bl	80098c0 <_Balloc>
 8009b10:	b930      	cbnz	r0, 8009b20 <__multiply+0x44>
 8009b12:	4602      	mov	r2, r0
 8009b14:	4b44      	ldr	r3, [pc, #272]	; (8009c28 <__multiply+0x14c>)
 8009b16:	4845      	ldr	r0, [pc, #276]	; (8009c2c <__multiply+0x150>)
 8009b18:	f240 115d 	movw	r1, #349	; 0x15d
 8009b1c:	f000 fdca 	bl	800a6b4 <__assert_func>
 8009b20:	f100 0514 	add.w	r5, r0, #20
 8009b24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b28:	462b      	mov	r3, r5
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4543      	cmp	r3, r8
 8009b2e:	d321      	bcc.n	8009b74 <__multiply+0x98>
 8009b30:	f104 0314 	add.w	r3, r4, #20
 8009b34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b38:	f109 0314 	add.w	r3, r9, #20
 8009b3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b40:	9202      	str	r2, [sp, #8]
 8009b42:	1b3a      	subs	r2, r7, r4
 8009b44:	3a15      	subs	r2, #21
 8009b46:	f022 0203 	bic.w	r2, r2, #3
 8009b4a:	3204      	adds	r2, #4
 8009b4c:	f104 0115 	add.w	r1, r4, #21
 8009b50:	428f      	cmp	r7, r1
 8009b52:	bf38      	it	cc
 8009b54:	2204      	movcc	r2, #4
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9a02      	ldr	r2, [sp, #8]
 8009b5a:	9303      	str	r3, [sp, #12]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d80c      	bhi.n	8009b7a <__multiply+0x9e>
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	dd03      	ble.n	8009b6c <__multiply+0x90>
 8009b64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d05a      	beq.n	8009c22 <__multiply+0x146>
 8009b6c:	6106      	str	r6, [r0, #16]
 8009b6e:	b005      	add	sp, #20
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	f843 2b04 	str.w	r2, [r3], #4
 8009b78:	e7d8      	b.n	8009b2c <__multiply+0x50>
 8009b7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b7e:	f1ba 0f00 	cmp.w	sl, #0
 8009b82:	d024      	beq.n	8009bce <__multiply+0xf2>
 8009b84:	f104 0e14 	add.w	lr, r4, #20
 8009b88:	46a9      	mov	r9, r5
 8009b8a:	f04f 0c00 	mov.w	ip, #0
 8009b8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b92:	f8d9 1000 	ldr.w	r1, [r9]
 8009b96:	fa1f fb82 	uxth.w	fp, r2
 8009b9a:	b289      	uxth	r1, r1
 8009b9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ba0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ba8:	4461      	add	r1, ip
 8009baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bae:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bb6:	b289      	uxth	r1, r1
 8009bb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bbc:	4577      	cmp	r7, lr
 8009bbe:	f849 1b04 	str.w	r1, [r9], #4
 8009bc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bc6:	d8e2      	bhi.n	8009b8e <__multiply+0xb2>
 8009bc8:	9a01      	ldr	r2, [sp, #4]
 8009bca:	f845 c002 	str.w	ip, [r5, r2]
 8009bce:	9a03      	ldr	r2, [sp, #12]
 8009bd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	f1b9 0f00 	cmp.w	r9, #0
 8009bda:	d020      	beq.n	8009c1e <__multiply+0x142>
 8009bdc:	6829      	ldr	r1, [r5, #0]
 8009bde:	f104 0c14 	add.w	ip, r4, #20
 8009be2:	46ae      	mov	lr, r5
 8009be4:	f04f 0a00 	mov.w	sl, #0
 8009be8:	f8bc b000 	ldrh.w	fp, [ip]
 8009bec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bf0:	fb09 220b 	mla	r2, r9, fp, r2
 8009bf4:	4492      	add	sl, r2
 8009bf6:	b289      	uxth	r1, r1
 8009bf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009bfc:	f84e 1b04 	str.w	r1, [lr], #4
 8009c00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c04:	f8be 1000 	ldrh.w	r1, [lr]
 8009c08:	0c12      	lsrs	r2, r2, #16
 8009c0a:	fb09 1102 	mla	r1, r9, r2, r1
 8009c0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c12:	4567      	cmp	r7, ip
 8009c14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c18:	d8e6      	bhi.n	8009be8 <__multiply+0x10c>
 8009c1a:	9a01      	ldr	r2, [sp, #4]
 8009c1c:	50a9      	str	r1, [r5, r2]
 8009c1e:	3504      	adds	r5, #4
 8009c20:	e79a      	b.n	8009b58 <__multiply+0x7c>
 8009c22:	3e01      	subs	r6, #1
 8009c24:	e79c      	b.n	8009b60 <__multiply+0x84>
 8009c26:	bf00      	nop
 8009c28:	0800ae90 	.word	0x0800ae90
 8009c2c:	0800af04 	.word	0x0800af04

08009c30 <__pow5mult>:
 8009c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c34:	4615      	mov	r5, r2
 8009c36:	f012 0203 	ands.w	r2, r2, #3
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460f      	mov	r7, r1
 8009c3e:	d007      	beq.n	8009c50 <__pow5mult+0x20>
 8009c40:	4c25      	ldr	r4, [pc, #148]	; (8009cd8 <__pow5mult+0xa8>)
 8009c42:	3a01      	subs	r2, #1
 8009c44:	2300      	movs	r3, #0
 8009c46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c4a:	f7ff fe9b 	bl	8009984 <__multadd>
 8009c4e:	4607      	mov	r7, r0
 8009c50:	10ad      	asrs	r5, r5, #2
 8009c52:	d03d      	beq.n	8009cd0 <__pow5mult+0xa0>
 8009c54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c56:	b97c      	cbnz	r4, 8009c78 <__pow5mult+0x48>
 8009c58:	2010      	movs	r0, #16
 8009c5a:	f7ff fe29 	bl	80098b0 <malloc>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	6270      	str	r0, [r6, #36]	; 0x24
 8009c62:	b928      	cbnz	r0, 8009c70 <__pow5mult+0x40>
 8009c64:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <__pow5mult+0xac>)
 8009c66:	481e      	ldr	r0, [pc, #120]	; (8009ce0 <__pow5mult+0xb0>)
 8009c68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c6c:	f000 fd22 	bl	800a6b4 <__assert_func>
 8009c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c74:	6004      	str	r4, [r0, #0]
 8009c76:	60c4      	str	r4, [r0, #12]
 8009c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c80:	b94c      	cbnz	r4, 8009c96 <__pow5mult+0x66>
 8009c82:	f240 2171 	movw	r1, #625	; 0x271
 8009c86:	4630      	mov	r0, r6
 8009c88:	f7ff ff12 	bl	8009ab0 <__i2b>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c92:	4604      	mov	r4, r0
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	f04f 0900 	mov.w	r9, #0
 8009c9a:	07eb      	lsls	r3, r5, #31
 8009c9c:	d50a      	bpl.n	8009cb4 <__pow5mult+0x84>
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	4622      	mov	r2, r4
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ff1a 	bl	8009adc <__multiply>
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4680      	mov	r8, r0
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff fe47 	bl	8009940 <_Bfree>
 8009cb2:	4647      	mov	r7, r8
 8009cb4:	106d      	asrs	r5, r5, #1
 8009cb6:	d00b      	beq.n	8009cd0 <__pow5mult+0xa0>
 8009cb8:	6820      	ldr	r0, [r4, #0]
 8009cba:	b938      	cbnz	r0, 8009ccc <__pow5mult+0x9c>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff ff0b 	bl	8009adc <__multiply>
 8009cc6:	6020      	str	r0, [r4, #0]
 8009cc8:	f8c0 9000 	str.w	r9, [r0]
 8009ccc:	4604      	mov	r4, r0
 8009cce:	e7e4      	b.n	8009c9a <__pow5mult+0x6a>
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd6:	bf00      	nop
 8009cd8:	0800b050 	.word	0x0800b050
 8009cdc:	0800ae1e 	.word	0x0800ae1e
 8009ce0:	0800af04 	.word	0x0800af04

08009ce4 <__lshift>:
 8009ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce8:	460c      	mov	r4, r1
 8009cea:	6849      	ldr	r1, [r1, #4]
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cf2:	68a3      	ldr	r3, [r4, #8]
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	4691      	mov	r9, r2
 8009cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cfc:	f108 0601 	add.w	r6, r8, #1
 8009d00:	42b3      	cmp	r3, r6
 8009d02:	db0b      	blt.n	8009d1c <__lshift+0x38>
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff fddb 	bl	80098c0 <_Balloc>
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	b948      	cbnz	r0, 8009d22 <__lshift+0x3e>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <__lshift+0xd8>)
 8009d12:	482b      	ldr	r0, [pc, #172]	; (8009dc0 <__lshift+0xdc>)
 8009d14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d18:	f000 fccc 	bl	800a6b4 <__assert_func>
 8009d1c:	3101      	adds	r1, #1
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	e7ee      	b.n	8009d00 <__lshift+0x1c>
 8009d22:	2300      	movs	r3, #0
 8009d24:	f100 0114 	add.w	r1, r0, #20
 8009d28:	f100 0210 	add.w	r2, r0, #16
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	4553      	cmp	r3, sl
 8009d30:	db37      	blt.n	8009da2 <__lshift+0xbe>
 8009d32:	6920      	ldr	r0, [r4, #16]
 8009d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d38:	f104 0314 	add.w	r3, r4, #20
 8009d3c:	f019 091f 	ands.w	r9, r9, #31
 8009d40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d48:	d02f      	beq.n	8009daa <__lshift+0xc6>
 8009d4a:	f1c9 0e20 	rsb	lr, r9, #32
 8009d4e:	468a      	mov	sl, r1
 8009d50:	f04f 0c00 	mov.w	ip, #0
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	fa02 f209 	lsl.w	r2, r2, r9
 8009d5a:	ea42 020c 	orr.w	r2, r2, ip
 8009d5e:	f84a 2b04 	str.w	r2, [sl], #4
 8009d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d66:	4298      	cmp	r0, r3
 8009d68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d6c:	d8f2      	bhi.n	8009d54 <__lshift+0x70>
 8009d6e:	1b03      	subs	r3, r0, r4
 8009d70:	3b15      	subs	r3, #21
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	3304      	adds	r3, #4
 8009d78:	f104 0215 	add.w	r2, r4, #21
 8009d7c:	4290      	cmp	r0, r2
 8009d7e:	bf38      	it	cc
 8009d80:	2304      	movcc	r3, #4
 8009d82:	f841 c003 	str.w	ip, [r1, r3]
 8009d86:	f1bc 0f00 	cmp.w	ip, #0
 8009d8a:	d001      	beq.n	8009d90 <__lshift+0xac>
 8009d8c:	f108 0602 	add.w	r6, r8, #2
 8009d90:	3e01      	subs	r6, #1
 8009d92:	4638      	mov	r0, r7
 8009d94:	612e      	str	r6, [r5, #16]
 8009d96:	4621      	mov	r1, r4
 8009d98:	f7ff fdd2 	bl	8009940 <_Bfree>
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009da6:	3301      	adds	r3, #1
 8009da8:	e7c1      	b.n	8009d2e <__lshift+0x4a>
 8009daa:	3904      	subs	r1, #4
 8009dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009db4:	4298      	cmp	r0, r3
 8009db6:	d8f9      	bhi.n	8009dac <__lshift+0xc8>
 8009db8:	e7ea      	b.n	8009d90 <__lshift+0xac>
 8009dba:	bf00      	nop
 8009dbc:	0800ae90 	.word	0x0800ae90
 8009dc0:	0800af04 	.word	0x0800af04

08009dc4 <__mcmp>:
 8009dc4:	b530      	push	{r4, r5, lr}
 8009dc6:	6902      	ldr	r2, [r0, #16]
 8009dc8:	690c      	ldr	r4, [r1, #16]
 8009dca:	1b12      	subs	r2, r2, r4
 8009dcc:	d10e      	bne.n	8009dec <__mcmp+0x28>
 8009dce:	f100 0314 	add.w	r3, r0, #20
 8009dd2:	3114      	adds	r1, #20
 8009dd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009de0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d003      	beq.n	8009df0 <__mcmp+0x2c>
 8009de8:	d305      	bcc.n	8009df6 <__mcmp+0x32>
 8009dea:	2201      	movs	r2, #1
 8009dec:	4610      	mov	r0, r2
 8009dee:	bd30      	pop	{r4, r5, pc}
 8009df0:	4283      	cmp	r3, r0
 8009df2:	d3f3      	bcc.n	8009ddc <__mcmp+0x18>
 8009df4:	e7fa      	b.n	8009dec <__mcmp+0x28>
 8009df6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dfa:	e7f7      	b.n	8009dec <__mcmp+0x28>

08009dfc <__mdiff>:
 8009dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	4606      	mov	r6, r0
 8009e04:	4611      	mov	r1, r2
 8009e06:	4620      	mov	r0, r4
 8009e08:	4690      	mov	r8, r2
 8009e0a:	f7ff ffdb 	bl	8009dc4 <__mcmp>
 8009e0e:	1e05      	subs	r5, r0, #0
 8009e10:	d110      	bne.n	8009e34 <__mdiff+0x38>
 8009e12:	4629      	mov	r1, r5
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff fd53 	bl	80098c0 <_Balloc>
 8009e1a:	b930      	cbnz	r0, 8009e2a <__mdiff+0x2e>
 8009e1c:	4b3a      	ldr	r3, [pc, #232]	; (8009f08 <__mdiff+0x10c>)
 8009e1e:	4602      	mov	r2, r0
 8009e20:	f240 2132 	movw	r1, #562	; 0x232
 8009e24:	4839      	ldr	r0, [pc, #228]	; (8009f0c <__mdiff+0x110>)
 8009e26:	f000 fc45 	bl	800a6b4 <__assert_func>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e34:	bfa4      	itt	ge
 8009e36:	4643      	movge	r3, r8
 8009e38:	46a0      	movge	r8, r4
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e40:	bfa6      	itte	ge
 8009e42:	461c      	movge	r4, r3
 8009e44:	2500      	movge	r5, #0
 8009e46:	2501      	movlt	r5, #1
 8009e48:	f7ff fd3a 	bl	80098c0 <_Balloc>
 8009e4c:	b920      	cbnz	r0, 8009e58 <__mdiff+0x5c>
 8009e4e:	4b2e      	ldr	r3, [pc, #184]	; (8009f08 <__mdiff+0x10c>)
 8009e50:	4602      	mov	r2, r0
 8009e52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e56:	e7e5      	b.n	8009e24 <__mdiff+0x28>
 8009e58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e5c:	6926      	ldr	r6, [r4, #16]
 8009e5e:	60c5      	str	r5, [r0, #12]
 8009e60:	f104 0914 	add.w	r9, r4, #20
 8009e64:	f108 0514 	add.w	r5, r8, #20
 8009e68:	f100 0e14 	add.w	lr, r0, #20
 8009e6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e74:	f108 0210 	add.w	r2, r8, #16
 8009e78:	46f2      	mov	sl, lr
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e84:	fa1f f883 	uxth.w	r8, r3
 8009e88:	fa11 f18b 	uxtah	r1, r1, fp
 8009e8c:	0c1b      	lsrs	r3, r3, #16
 8009e8e:	eba1 0808 	sub.w	r8, r1, r8
 8009e92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e9a:	fa1f f888 	uxth.w	r8, r8
 8009e9e:	1419      	asrs	r1, r3, #16
 8009ea0:	454e      	cmp	r6, r9
 8009ea2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ea6:	f84a 3b04 	str.w	r3, [sl], #4
 8009eaa:	d8e7      	bhi.n	8009e7c <__mdiff+0x80>
 8009eac:	1b33      	subs	r3, r6, r4
 8009eae:	3b15      	subs	r3, #21
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	3415      	adds	r4, #21
 8009eb8:	42a6      	cmp	r6, r4
 8009eba:	bf38      	it	cc
 8009ebc:	2304      	movcc	r3, #4
 8009ebe:	441d      	add	r5, r3
 8009ec0:	4473      	add	r3, lr
 8009ec2:	469e      	mov	lr, r3
 8009ec4:	462e      	mov	r6, r5
 8009ec6:	4566      	cmp	r6, ip
 8009ec8:	d30e      	bcc.n	8009ee8 <__mdiff+0xec>
 8009eca:	f10c 0203 	add.w	r2, ip, #3
 8009ece:	1b52      	subs	r2, r2, r5
 8009ed0:	f022 0203 	bic.w	r2, r2, #3
 8009ed4:	3d03      	subs	r5, #3
 8009ed6:	45ac      	cmp	ip, r5
 8009ed8:	bf38      	it	cc
 8009eda:	2200      	movcc	r2, #0
 8009edc:	441a      	add	r2, r3
 8009ede:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009ee2:	b17b      	cbz	r3, 8009f04 <__mdiff+0x108>
 8009ee4:	6107      	str	r7, [r0, #16]
 8009ee6:	e7a3      	b.n	8009e30 <__mdiff+0x34>
 8009ee8:	f856 8b04 	ldr.w	r8, [r6], #4
 8009eec:	fa11 f288 	uxtah	r2, r1, r8
 8009ef0:	1414      	asrs	r4, r2, #16
 8009ef2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ef6:	b292      	uxth	r2, r2
 8009ef8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009efc:	f84e 2b04 	str.w	r2, [lr], #4
 8009f00:	1421      	asrs	r1, r4, #16
 8009f02:	e7e0      	b.n	8009ec6 <__mdiff+0xca>
 8009f04:	3f01      	subs	r7, #1
 8009f06:	e7ea      	b.n	8009ede <__mdiff+0xe2>
 8009f08:	0800ae90 	.word	0x0800ae90
 8009f0c:	0800af04 	.word	0x0800af04

08009f10 <__d2b>:
 8009f10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4689      	mov	r9, r1
 8009f16:	2101      	movs	r1, #1
 8009f18:	ec57 6b10 	vmov	r6, r7, d0
 8009f1c:	4690      	mov	r8, r2
 8009f1e:	f7ff fccf 	bl	80098c0 <_Balloc>
 8009f22:	4604      	mov	r4, r0
 8009f24:	b930      	cbnz	r0, 8009f34 <__d2b+0x24>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <__d2b+0xb0>)
 8009f2a:	4826      	ldr	r0, [pc, #152]	; (8009fc4 <__d2b+0xb4>)
 8009f2c:	f240 310a 	movw	r1, #778	; 0x30a
 8009f30:	f000 fbc0 	bl	800a6b4 <__assert_func>
 8009f34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f3c:	bb35      	cbnz	r5, 8009f8c <__d2b+0x7c>
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	d028      	beq.n	8009f96 <__d2b+0x86>
 8009f44:	4668      	mov	r0, sp
 8009f46:	9600      	str	r6, [sp, #0]
 8009f48:	f7ff fd82 	bl	8009a50 <__lo0bits>
 8009f4c:	9900      	ldr	r1, [sp, #0]
 8009f4e:	b300      	cbz	r0, 8009f92 <__d2b+0x82>
 8009f50:	9a01      	ldr	r2, [sp, #4]
 8009f52:	f1c0 0320 	rsb	r3, r0, #32
 8009f56:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	40c2      	lsrs	r2, r0
 8009f5e:	6163      	str	r3, [r4, #20]
 8009f60:	9201      	str	r2, [sp, #4]
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	61a3      	str	r3, [r4, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2202      	movne	r2, #2
 8009f6c:	2201      	moveq	r2, #1
 8009f6e:	6122      	str	r2, [r4, #16]
 8009f70:	b1d5      	cbz	r5, 8009fa8 <__d2b+0x98>
 8009f72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f76:	4405      	add	r5, r0
 8009f78:	f8c9 5000 	str.w	r5, [r9]
 8009f7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f80:	f8c8 0000 	str.w	r0, [r8]
 8009f84:	4620      	mov	r0, r4
 8009f86:	b003      	add	sp, #12
 8009f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f90:	e7d5      	b.n	8009f3e <__d2b+0x2e>
 8009f92:	6161      	str	r1, [r4, #20]
 8009f94:	e7e5      	b.n	8009f62 <__d2b+0x52>
 8009f96:	a801      	add	r0, sp, #4
 8009f98:	f7ff fd5a 	bl	8009a50 <__lo0bits>
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	6163      	str	r3, [r4, #20]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	6122      	str	r2, [r4, #16]
 8009fa4:	3020      	adds	r0, #32
 8009fa6:	e7e3      	b.n	8009f70 <__d2b+0x60>
 8009fa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fb0:	f8c9 0000 	str.w	r0, [r9]
 8009fb4:	6918      	ldr	r0, [r3, #16]
 8009fb6:	f7ff fd2b 	bl	8009a10 <__hi0bits>
 8009fba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fbe:	e7df      	b.n	8009f80 <__d2b+0x70>
 8009fc0:	0800ae90 	.word	0x0800ae90
 8009fc4:	0800af04 	.word	0x0800af04

08009fc8 <_calloc_r>:
 8009fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fca:	fba1 2402 	umull	r2, r4, r1, r2
 8009fce:	b94c      	cbnz	r4, 8009fe4 <_calloc_r+0x1c>
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	f000 f87a 	bl	800a0cc <_malloc_r>
 8009fd8:	9a01      	ldr	r2, [sp, #4]
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b930      	cbnz	r0, 8009fec <_calloc_r+0x24>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bd30      	pop	{r4, r5, pc}
 8009fe4:	220c      	movs	r2, #12
 8009fe6:	6002      	str	r2, [r0, #0]
 8009fe8:	2500      	movs	r5, #0
 8009fea:	e7f8      	b.n	8009fde <_calloc_r+0x16>
 8009fec:	4621      	mov	r1, r4
 8009fee:	f7fe f85d 	bl	80080ac <memset>
 8009ff2:	e7f4      	b.n	8009fde <_calloc_r+0x16>

08009ff4 <_free_r>:
 8009ff4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d044      	beq.n	800a084 <_free_r+0x90>
 8009ffa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ffe:	9001      	str	r0, [sp, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	f1a1 0404 	sub.w	r4, r1, #4
 800a006:	bfb8      	it	lt
 800a008:	18e4      	addlt	r4, r4, r3
 800a00a:	f000 fcdf 	bl	800a9cc <__malloc_lock>
 800a00e:	4a1e      	ldr	r2, [pc, #120]	; (800a088 <_free_r+0x94>)
 800a010:	9801      	ldr	r0, [sp, #4]
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	b933      	cbnz	r3, 800a024 <_free_r+0x30>
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	6014      	str	r4, [r2, #0]
 800a01a:	b003      	add	sp, #12
 800a01c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a020:	f000 bcda 	b.w	800a9d8 <__malloc_unlock>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d908      	bls.n	800a03a <_free_r+0x46>
 800a028:	6825      	ldr	r5, [r4, #0]
 800a02a:	1961      	adds	r1, r4, r5
 800a02c:	428b      	cmp	r3, r1
 800a02e:	bf01      	itttt	eq
 800a030:	6819      	ldreq	r1, [r3, #0]
 800a032:	685b      	ldreq	r3, [r3, #4]
 800a034:	1949      	addeq	r1, r1, r5
 800a036:	6021      	streq	r1, [r4, #0]
 800a038:	e7ed      	b.n	800a016 <_free_r+0x22>
 800a03a:	461a      	mov	r2, r3
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	b10b      	cbz	r3, 800a044 <_free_r+0x50>
 800a040:	42a3      	cmp	r3, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x46>
 800a044:	6811      	ldr	r1, [r2, #0]
 800a046:	1855      	adds	r5, r2, r1
 800a048:	42a5      	cmp	r5, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x70>
 800a04c:	6824      	ldr	r4, [r4, #0]
 800a04e:	4421      	add	r1, r4
 800a050:	1854      	adds	r4, r2, r1
 800a052:	42a3      	cmp	r3, r4
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	d1e0      	bne.n	800a01a <_free_r+0x26>
 800a058:	681c      	ldr	r4, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	6053      	str	r3, [r2, #4]
 800a05e:	4421      	add	r1, r4
 800a060:	6011      	str	r1, [r2, #0]
 800a062:	e7da      	b.n	800a01a <_free_r+0x26>
 800a064:	d902      	bls.n	800a06c <_free_r+0x78>
 800a066:	230c      	movs	r3, #12
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	e7d6      	b.n	800a01a <_free_r+0x26>
 800a06c:	6825      	ldr	r5, [r4, #0]
 800a06e:	1961      	adds	r1, r4, r5
 800a070:	428b      	cmp	r3, r1
 800a072:	bf04      	itt	eq
 800a074:	6819      	ldreq	r1, [r3, #0]
 800a076:	685b      	ldreq	r3, [r3, #4]
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	bf04      	itt	eq
 800a07c:	1949      	addeq	r1, r1, r5
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	6054      	str	r4, [r2, #4]
 800a082:	e7ca      	b.n	800a01a <_free_r+0x26>
 800a084:	b003      	add	sp, #12
 800a086:	bd30      	pop	{r4, r5, pc}
 800a088:	2000246c 	.word	0x2000246c

0800a08c <sbrk_aligned>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	4e0e      	ldr	r6, [pc, #56]	; (800a0c8 <sbrk_aligned+0x3c>)
 800a090:	460c      	mov	r4, r1
 800a092:	6831      	ldr	r1, [r6, #0]
 800a094:	4605      	mov	r5, r0
 800a096:	b911      	cbnz	r1, 800a09e <sbrk_aligned+0x12>
 800a098:	f000 f9e6 	bl	800a468 <_sbrk_r>
 800a09c:	6030      	str	r0, [r6, #0]
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f000 f9e1 	bl	800a468 <_sbrk_r>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d00a      	beq.n	800a0c0 <sbrk_aligned+0x34>
 800a0aa:	1cc4      	adds	r4, r0, #3
 800a0ac:	f024 0403 	bic.w	r4, r4, #3
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d007      	beq.n	800a0c4 <sbrk_aligned+0x38>
 800a0b4:	1a21      	subs	r1, r4, r0
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f000 f9d6 	bl	800a468 <_sbrk_r>
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d101      	bne.n	800a0c4 <sbrk_aligned+0x38>
 800a0c0:	f04f 34ff 	mov.w	r4, #4294967295
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	20002470 	.word	0x20002470

0800a0cc <_malloc_r>:
 800a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	1ccd      	adds	r5, r1, #3
 800a0d2:	f025 0503 	bic.w	r5, r5, #3
 800a0d6:	3508      	adds	r5, #8
 800a0d8:	2d0c      	cmp	r5, #12
 800a0da:	bf38      	it	cc
 800a0dc:	250c      	movcc	r5, #12
 800a0de:	2d00      	cmp	r5, #0
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	db01      	blt.n	800a0e8 <_malloc_r+0x1c>
 800a0e4:	42a9      	cmp	r1, r5
 800a0e6:	d905      	bls.n	800a0f4 <_malloc_r+0x28>
 800a0e8:	230c      	movs	r3, #12
 800a0ea:	603b      	str	r3, [r7, #0]
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f4:	4e2e      	ldr	r6, [pc, #184]	; (800a1b0 <_malloc_r+0xe4>)
 800a0f6:	f000 fc69 	bl	800a9cc <__malloc_lock>
 800a0fa:	6833      	ldr	r3, [r6, #0]
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	bb34      	cbnz	r4, 800a14e <_malloc_r+0x82>
 800a100:	4629      	mov	r1, r5
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff ffc2 	bl	800a08c <sbrk_aligned>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	4604      	mov	r4, r0
 800a10c:	d14d      	bne.n	800a1aa <_malloc_r+0xde>
 800a10e:	6834      	ldr	r4, [r6, #0]
 800a110:	4626      	mov	r6, r4
 800a112:	2e00      	cmp	r6, #0
 800a114:	d140      	bne.n	800a198 <_malloc_r+0xcc>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	4631      	mov	r1, r6
 800a11a:	4638      	mov	r0, r7
 800a11c:	eb04 0803 	add.w	r8, r4, r3
 800a120:	f000 f9a2 	bl	800a468 <_sbrk_r>
 800a124:	4580      	cmp	r8, r0
 800a126:	d13a      	bne.n	800a19e <_malloc_r+0xd2>
 800a128:	6821      	ldr	r1, [r4, #0]
 800a12a:	3503      	adds	r5, #3
 800a12c:	1a6d      	subs	r5, r5, r1
 800a12e:	f025 0503 	bic.w	r5, r5, #3
 800a132:	3508      	adds	r5, #8
 800a134:	2d0c      	cmp	r5, #12
 800a136:	bf38      	it	cc
 800a138:	250c      	movcc	r5, #12
 800a13a:	4629      	mov	r1, r5
 800a13c:	4638      	mov	r0, r7
 800a13e:	f7ff ffa5 	bl	800a08c <sbrk_aligned>
 800a142:	3001      	adds	r0, #1
 800a144:	d02b      	beq.n	800a19e <_malloc_r+0xd2>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	442b      	add	r3, r5
 800a14a:	6023      	str	r3, [r4, #0]
 800a14c:	e00e      	b.n	800a16c <_malloc_r+0xa0>
 800a14e:	6822      	ldr	r2, [r4, #0]
 800a150:	1b52      	subs	r2, r2, r5
 800a152:	d41e      	bmi.n	800a192 <_malloc_r+0xc6>
 800a154:	2a0b      	cmp	r2, #11
 800a156:	d916      	bls.n	800a186 <_malloc_r+0xba>
 800a158:	1961      	adds	r1, r4, r5
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	6025      	str	r5, [r4, #0]
 800a15e:	bf18      	it	ne
 800a160:	6059      	strne	r1, [r3, #4]
 800a162:	6863      	ldr	r3, [r4, #4]
 800a164:	bf08      	it	eq
 800a166:	6031      	streq	r1, [r6, #0]
 800a168:	5162      	str	r2, [r4, r5]
 800a16a:	604b      	str	r3, [r1, #4]
 800a16c:	4638      	mov	r0, r7
 800a16e:	f104 060b 	add.w	r6, r4, #11
 800a172:	f000 fc31 	bl	800a9d8 <__malloc_unlock>
 800a176:	f026 0607 	bic.w	r6, r6, #7
 800a17a:	1d23      	adds	r3, r4, #4
 800a17c:	1af2      	subs	r2, r6, r3
 800a17e:	d0b6      	beq.n	800a0ee <_malloc_r+0x22>
 800a180:	1b9b      	subs	r3, r3, r6
 800a182:	50a3      	str	r3, [r4, r2]
 800a184:	e7b3      	b.n	800a0ee <_malloc_r+0x22>
 800a186:	6862      	ldr	r2, [r4, #4]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	bf0c      	ite	eq
 800a18c:	6032      	streq	r2, [r6, #0]
 800a18e:	605a      	strne	r2, [r3, #4]
 800a190:	e7ec      	b.n	800a16c <_malloc_r+0xa0>
 800a192:	4623      	mov	r3, r4
 800a194:	6864      	ldr	r4, [r4, #4]
 800a196:	e7b2      	b.n	800a0fe <_malloc_r+0x32>
 800a198:	4634      	mov	r4, r6
 800a19a:	6876      	ldr	r6, [r6, #4]
 800a19c:	e7b9      	b.n	800a112 <_malloc_r+0x46>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	603b      	str	r3, [r7, #0]
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f000 fc18 	bl	800a9d8 <__malloc_unlock>
 800a1a8:	e7a1      	b.n	800a0ee <_malloc_r+0x22>
 800a1aa:	6025      	str	r5, [r4, #0]
 800a1ac:	e7de      	b.n	800a16c <_malloc_r+0xa0>
 800a1ae:	bf00      	nop
 800a1b0:	2000246c 	.word	0x2000246c

0800a1b4 <__sfputc_r>:
 800a1b4:	6893      	ldr	r3, [r2, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	b410      	push	{r4}
 800a1bc:	6093      	str	r3, [r2, #8]
 800a1be:	da08      	bge.n	800a1d2 <__sfputc_r+0x1e>
 800a1c0:	6994      	ldr	r4, [r2, #24]
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	db01      	blt.n	800a1ca <__sfputc_r+0x16>
 800a1c6:	290a      	cmp	r1, #10
 800a1c8:	d103      	bne.n	800a1d2 <__sfputc_r+0x1e>
 800a1ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1ce:	f000 b99f 	b.w	800a510 <__swbuf_r>
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	1c58      	adds	r0, r3, #1
 800a1d6:	6010      	str	r0, [r2, #0]
 800a1d8:	7019      	strb	r1, [r3, #0]
 800a1da:	4608      	mov	r0, r1
 800a1dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <__sfputs_r>:
 800a1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	460f      	mov	r7, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	18d5      	adds	r5, r2, r3
 800a1ec:	42ac      	cmp	r4, r5
 800a1ee:	d101      	bne.n	800a1f4 <__sfputs_r+0x12>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e007      	b.n	800a204 <__sfputs_r+0x22>
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	463a      	mov	r2, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7ff ffda 	bl	800a1b4 <__sfputc_r>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d1f3      	bne.n	800a1ec <__sfputs_r+0xa>
 800a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a208 <_vfiprintf_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	460d      	mov	r5, r1
 800a20e:	b09d      	sub	sp, #116	; 0x74
 800a210:	4614      	mov	r4, r2
 800a212:	4698      	mov	r8, r3
 800a214:	4606      	mov	r6, r0
 800a216:	b118      	cbz	r0, 800a220 <_vfiprintf_r+0x18>
 800a218:	6983      	ldr	r3, [r0, #24]
 800a21a:	b90b      	cbnz	r3, 800a220 <_vfiprintf_r+0x18>
 800a21c:	f7ff faa2 	bl	8009764 <__sinit>
 800a220:	4b89      	ldr	r3, [pc, #548]	; (800a448 <_vfiprintf_r+0x240>)
 800a222:	429d      	cmp	r5, r3
 800a224:	d11b      	bne.n	800a25e <_vfiprintf_r+0x56>
 800a226:	6875      	ldr	r5, [r6, #4]
 800a228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a22a:	07d9      	lsls	r1, r3, #31
 800a22c:	d405      	bmi.n	800a23a <_vfiprintf_r+0x32>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d402      	bmi.n	800a23a <_vfiprintf_r+0x32>
 800a234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a236:	f7ff fb38 	bl	80098aa <__retarget_lock_acquire_recursive>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	071b      	lsls	r3, r3, #28
 800a23e:	d501      	bpl.n	800a244 <_vfiprintf_r+0x3c>
 800a240:	692b      	ldr	r3, [r5, #16]
 800a242:	b9eb      	cbnz	r3, 800a280 <_vfiprintf_r+0x78>
 800a244:	4629      	mov	r1, r5
 800a246:	4630      	mov	r0, r6
 800a248:	f000 f9c6 	bl	800a5d8 <__swsetup_r>
 800a24c:	b1c0      	cbz	r0, 800a280 <_vfiprintf_r+0x78>
 800a24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a250:	07dc      	lsls	r4, r3, #31
 800a252:	d50e      	bpl.n	800a272 <_vfiprintf_r+0x6a>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	b01d      	add	sp, #116	; 0x74
 800a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25e:	4b7b      	ldr	r3, [pc, #492]	; (800a44c <_vfiprintf_r+0x244>)
 800a260:	429d      	cmp	r5, r3
 800a262:	d101      	bne.n	800a268 <_vfiprintf_r+0x60>
 800a264:	68b5      	ldr	r5, [r6, #8]
 800a266:	e7df      	b.n	800a228 <_vfiprintf_r+0x20>
 800a268:	4b79      	ldr	r3, [pc, #484]	; (800a450 <_vfiprintf_r+0x248>)
 800a26a:	429d      	cmp	r5, r3
 800a26c:	bf08      	it	eq
 800a26e:	68f5      	ldreq	r5, [r6, #12]
 800a270:	e7da      	b.n	800a228 <_vfiprintf_r+0x20>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	0598      	lsls	r0, r3, #22
 800a276:	d4ed      	bmi.n	800a254 <_vfiprintf_r+0x4c>
 800a278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27a:	f7ff fb17 	bl	80098ac <__retarget_lock_release_recursive>
 800a27e:	e7e9      	b.n	800a254 <_vfiprintf_r+0x4c>
 800a280:	2300      	movs	r3, #0
 800a282:	9309      	str	r3, [sp, #36]	; 0x24
 800a284:	2320      	movs	r3, #32
 800a286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a28e:	2330      	movs	r3, #48	; 0x30
 800a290:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a454 <_vfiprintf_r+0x24c>
 800a294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a298:	f04f 0901 	mov.w	r9, #1
 800a29c:	4623      	mov	r3, r4
 800a29e:	469a      	mov	sl, r3
 800a2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a4:	b10a      	cbz	r2, 800a2aa <_vfiprintf_r+0xa2>
 800a2a6:	2a25      	cmp	r2, #37	; 0x25
 800a2a8:	d1f9      	bne.n	800a29e <_vfiprintf_r+0x96>
 800a2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ae:	d00b      	beq.n	800a2c8 <_vfiprintf_r+0xc0>
 800a2b0:	465b      	mov	r3, fp
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7ff ff93 	bl	800a1e2 <__sfputs_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f000 80aa 	beq.w	800a416 <_vfiprintf_r+0x20e>
 800a2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c4:	445a      	add	r2, fp
 800a2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80a2 	beq.w	800a416 <_vfiprintf_r+0x20e>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2dc:	f10a 0a01 	add.w	sl, sl, #1
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ea:	4654      	mov	r4, sl
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f2:	4858      	ldr	r0, [pc, #352]	; (800a454 <_vfiprintf_r+0x24c>)
 800a2f4:	f7f5 ff74 	bl	80001e0 <memchr>
 800a2f8:	9a04      	ldr	r2, [sp, #16]
 800a2fa:	b9d8      	cbnz	r0, 800a334 <_vfiprintf_r+0x12c>
 800a2fc:	06d1      	lsls	r1, r2, #27
 800a2fe:	bf44      	itt	mi
 800a300:	2320      	movmi	r3, #32
 800a302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a306:	0713      	lsls	r3, r2, #28
 800a308:	bf44      	itt	mi
 800a30a:	232b      	movmi	r3, #43	; 0x2b
 800a30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a310:	f89a 3000 	ldrb.w	r3, [sl]
 800a314:	2b2a      	cmp	r3, #42	; 0x2a
 800a316:	d015      	beq.n	800a344 <_vfiprintf_r+0x13c>
 800a318:	9a07      	ldr	r2, [sp, #28]
 800a31a:	4654      	mov	r4, sl
 800a31c:	2000      	movs	r0, #0
 800a31e:	f04f 0c0a 	mov.w	ip, #10
 800a322:	4621      	mov	r1, r4
 800a324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a328:	3b30      	subs	r3, #48	; 0x30
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d94e      	bls.n	800a3cc <_vfiprintf_r+0x1c4>
 800a32e:	b1b0      	cbz	r0, 800a35e <_vfiprintf_r+0x156>
 800a330:	9207      	str	r2, [sp, #28]
 800a332:	e014      	b.n	800a35e <_vfiprintf_r+0x156>
 800a334:	eba0 0308 	sub.w	r3, r0, r8
 800a338:	fa09 f303 	lsl.w	r3, r9, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	9304      	str	r3, [sp, #16]
 800a340:	46a2      	mov	sl, r4
 800a342:	e7d2      	b.n	800a2ea <_vfiprintf_r+0xe2>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	1d19      	adds	r1, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	9103      	str	r1, [sp, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfbb      	ittet	lt
 800a350:	425b      	neglt	r3, r3
 800a352:	f042 0202 	orrlt.w	r2, r2, #2
 800a356:	9307      	strge	r3, [sp, #28]
 800a358:	9307      	strlt	r3, [sp, #28]
 800a35a:	bfb8      	it	lt
 800a35c:	9204      	strlt	r2, [sp, #16]
 800a35e:	7823      	ldrb	r3, [r4, #0]
 800a360:	2b2e      	cmp	r3, #46	; 0x2e
 800a362:	d10c      	bne.n	800a37e <_vfiprintf_r+0x176>
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	2b2a      	cmp	r3, #42	; 0x2a
 800a368:	d135      	bne.n	800a3d6 <_vfiprintf_r+0x1ce>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	1d1a      	adds	r2, r3, #4
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	9203      	str	r2, [sp, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	bfb8      	it	lt
 800a376:	f04f 33ff 	movlt.w	r3, #4294967295
 800a37a:	3402      	adds	r4, #2
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a464 <_vfiprintf_r+0x25c>
 800a382:	7821      	ldrb	r1, [r4, #0]
 800a384:	2203      	movs	r2, #3
 800a386:	4650      	mov	r0, sl
 800a388:	f7f5 ff2a 	bl	80001e0 <memchr>
 800a38c:	b140      	cbz	r0, 800a3a0 <_vfiprintf_r+0x198>
 800a38e:	2340      	movs	r3, #64	; 0x40
 800a390:	eba0 000a 	sub.w	r0, r0, sl
 800a394:	fa03 f000 	lsl.w	r0, r3, r0
 800a398:	9b04      	ldr	r3, [sp, #16]
 800a39a:	4303      	orrs	r3, r0
 800a39c:	3401      	adds	r4, #1
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	482c      	ldr	r0, [pc, #176]	; (800a458 <_vfiprintf_r+0x250>)
 800a3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	f7f5 ff18 	bl	80001e0 <memchr>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d03f      	beq.n	800a434 <_vfiprintf_r+0x22c>
 800a3b4:	4b29      	ldr	r3, [pc, #164]	; (800a45c <_vfiprintf_r+0x254>)
 800a3b6:	bb1b      	cbnz	r3, 800a400 <_vfiprintf_r+0x1f8>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	443b      	add	r3, r7
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	e767      	b.n	800a29c <_vfiprintf_r+0x94>
 800a3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7a5      	b.n	800a322 <_vfiprintf_r+0x11a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	3401      	adds	r4, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f04f 0c0a 	mov.w	ip, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	; 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_vfiprintf_r+0x1ee>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c5      	beq.n	800a37e <_vfiprintf_r+0x176>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c3      	b.n	800a37e <_vfiprintf_r+0x176>
 800a3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7f0      	b.n	800a3e2 <_vfiprintf_r+0x1da>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4b16      	ldr	r3, [pc, #88]	; (800a460 <_vfiprintf_r+0x258>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7fd fef6 	bl	80081fc <_printf_float>
 800a410:	4607      	mov	r7, r0
 800a412:	1c78      	adds	r0, r7, #1
 800a414:	d1d6      	bne.n	800a3c4 <_vfiprintf_r+0x1bc>
 800a416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a418:	07d9      	lsls	r1, r3, #31
 800a41a:	d405      	bmi.n	800a428 <_vfiprintf_r+0x220>
 800a41c:	89ab      	ldrh	r3, [r5, #12]
 800a41e:	059a      	lsls	r2, r3, #22
 800a420:	d402      	bmi.n	800a428 <_vfiprintf_r+0x220>
 800a422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a424:	f7ff fa42 	bl	80098ac <__retarget_lock_release_recursive>
 800a428:	89ab      	ldrh	r3, [r5, #12]
 800a42a:	065b      	lsls	r3, r3, #25
 800a42c:	f53f af12 	bmi.w	800a254 <_vfiprintf_r+0x4c>
 800a430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a432:	e711      	b.n	800a258 <_vfiprintf_r+0x50>
 800a434:	ab03      	add	r3, sp, #12
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	462a      	mov	r2, r5
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <_vfiprintf_r+0x258>)
 800a43c:	a904      	add	r1, sp, #16
 800a43e:	4630      	mov	r0, r6
 800a440:	f7fe f980 	bl	8008744 <_printf_i>
 800a444:	e7e4      	b.n	800a410 <_vfiprintf_r+0x208>
 800a446:	bf00      	nop
 800a448:	0800aec4 	.word	0x0800aec4
 800a44c:	0800aee4 	.word	0x0800aee4
 800a450:	0800aea4 	.word	0x0800aea4
 800a454:	0800b05c 	.word	0x0800b05c
 800a458:	0800b066 	.word	0x0800b066
 800a45c:	080081fd 	.word	0x080081fd
 800a460:	0800a1e3 	.word	0x0800a1e3
 800a464:	0800b062 	.word	0x0800b062

0800a468 <_sbrk_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	; (800a484 <_sbrk_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f7 fad8 	bl	8001a28 <_sbrk>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_sbrk_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_sbrk_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	20002474 	.word	0x20002474

0800a488 <__sread>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	460c      	mov	r4, r1
 800a48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a490:	f000 faa8 	bl	800a9e4 <_read_r>
 800a494:	2800      	cmp	r0, #0
 800a496:	bfab      	itete	ge
 800a498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a49a:	89a3      	ldrhlt	r3, [r4, #12]
 800a49c:	181b      	addge	r3, r3, r0
 800a49e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4a2:	bfac      	ite	ge
 800a4a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4a6:	81a3      	strhlt	r3, [r4, #12]
 800a4a8:	bd10      	pop	{r4, pc}

0800a4aa <__swrite>:
 800a4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	461f      	mov	r7, r3
 800a4b0:	898b      	ldrh	r3, [r1, #12]
 800a4b2:	05db      	lsls	r3, r3, #23
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	4616      	mov	r6, r2
 800a4ba:	d505      	bpl.n	800a4c8 <__swrite+0x1e>
 800a4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f000 f9f8 	bl	800a8b8 <_lseek_r>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4d2:	81a3      	strh	r3, [r4, #12]
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	4628      	mov	r0, r5
 800a4da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4de:	f000 b869 	b.w	800a5b4 <_write_r>

0800a4e2 <__sseek>:
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ea:	f000 f9e5 	bl	800a8b8 <_lseek_r>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	bf15      	itete	ne
 800a4f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4fe:	81a3      	strheq	r3, [r4, #12]
 800a500:	bf18      	it	ne
 800a502:	81a3      	strhne	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__sclose>:
 800a506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50a:	f000 b8f1 	b.w	800a6f0 <_close_r>
	...

0800a510 <__swbuf_r>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	460e      	mov	r6, r1
 800a514:	4614      	mov	r4, r2
 800a516:	4605      	mov	r5, r0
 800a518:	b118      	cbz	r0, 800a522 <__swbuf_r+0x12>
 800a51a:	6983      	ldr	r3, [r0, #24]
 800a51c:	b90b      	cbnz	r3, 800a522 <__swbuf_r+0x12>
 800a51e:	f7ff f921 	bl	8009764 <__sinit>
 800a522:	4b21      	ldr	r3, [pc, #132]	; (800a5a8 <__swbuf_r+0x98>)
 800a524:	429c      	cmp	r4, r3
 800a526:	d12b      	bne.n	800a580 <__swbuf_r+0x70>
 800a528:	686c      	ldr	r4, [r5, #4]
 800a52a:	69a3      	ldr	r3, [r4, #24]
 800a52c:	60a3      	str	r3, [r4, #8]
 800a52e:	89a3      	ldrh	r3, [r4, #12]
 800a530:	071a      	lsls	r2, r3, #28
 800a532:	d52f      	bpl.n	800a594 <__swbuf_r+0x84>
 800a534:	6923      	ldr	r3, [r4, #16]
 800a536:	b36b      	cbz	r3, 800a594 <__swbuf_r+0x84>
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	6820      	ldr	r0, [r4, #0]
 800a53c:	1ac0      	subs	r0, r0, r3
 800a53e:	6963      	ldr	r3, [r4, #20]
 800a540:	b2f6      	uxtb	r6, r6
 800a542:	4283      	cmp	r3, r0
 800a544:	4637      	mov	r7, r6
 800a546:	dc04      	bgt.n	800a552 <__swbuf_r+0x42>
 800a548:	4621      	mov	r1, r4
 800a54a:	4628      	mov	r0, r5
 800a54c:	f000 f966 	bl	800a81c <_fflush_r>
 800a550:	bb30      	cbnz	r0, 800a5a0 <__swbuf_r+0x90>
 800a552:	68a3      	ldr	r3, [r4, #8]
 800a554:	3b01      	subs	r3, #1
 800a556:	60a3      	str	r3, [r4, #8]
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	6022      	str	r2, [r4, #0]
 800a55e:	701e      	strb	r6, [r3, #0]
 800a560:	6963      	ldr	r3, [r4, #20]
 800a562:	3001      	adds	r0, #1
 800a564:	4283      	cmp	r3, r0
 800a566:	d004      	beq.n	800a572 <__swbuf_r+0x62>
 800a568:	89a3      	ldrh	r3, [r4, #12]
 800a56a:	07db      	lsls	r3, r3, #31
 800a56c:	d506      	bpl.n	800a57c <__swbuf_r+0x6c>
 800a56e:	2e0a      	cmp	r6, #10
 800a570:	d104      	bne.n	800a57c <__swbuf_r+0x6c>
 800a572:	4621      	mov	r1, r4
 800a574:	4628      	mov	r0, r5
 800a576:	f000 f951 	bl	800a81c <_fflush_r>
 800a57a:	b988      	cbnz	r0, 800a5a0 <__swbuf_r+0x90>
 800a57c:	4638      	mov	r0, r7
 800a57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a580:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <__swbuf_r+0x9c>)
 800a582:	429c      	cmp	r4, r3
 800a584:	d101      	bne.n	800a58a <__swbuf_r+0x7a>
 800a586:	68ac      	ldr	r4, [r5, #8]
 800a588:	e7cf      	b.n	800a52a <__swbuf_r+0x1a>
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <__swbuf_r+0xa0>)
 800a58c:	429c      	cmp	r4, r3
 800a58e:	bf08      	it	eq
 800a590:	68ec      	ldreq	r4, [r5, #12]
 800a592:	e7ca      	b.n	800a52a <__swbuf_r+0x1a>
 800a594:	4621      	mov	r1, r4
 800a596:	4628      	mov	r0, r5
 800a598:	f000 f81e 	bl	800a5d8 <__swsetup_r>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d0cb      	beq.n	800a538 <__swbuf_r+0x28>
 800a5a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5a4:	e7ea      	b.n	800a57c <__swbuf_r+0x6c>
 800a5a6:	bf00      	nop
 800a5a8:	0800aec4 	.word	0x0800aec4
 800a5ac:	0800aee4 	.word	0x0800aee4
 800a5b0:	0800aea4 	.word	0x0800aea4

0800a5b4 <_write_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	4d07      	ldr	r5, [pc, #28]	; (800a5d4 <_write_r+0x20>)
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	4608      	mov	r0, r1
 800a5bc:	4611      	mov	r1, r2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	602a      	str	r2, [r5, #0]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f7f6 fe7c 	bl	80012c0 <_write>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_write_r+0x1e>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_write_r+0x1e>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	20002474 	.word	0x20002474

0800a5d8 <__swsetup_r>:
 800a5d8:	4b32      	ldr	r3, [pc, #200]	; (800a6a4 <__swsetup_r+0xcc>)
 800a5da:	b570      	push	{r4, r5, r6, lr}
 800a5dc:	681d      	ldr	r5, [r3, #0]
 800a5de:	4606      	mov	r6, r0
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	b125      	cbz	r5, 800a5ee <__swsetup_r+0x16>
 800a5e4:	69ab      	ldr	r3, [r5, #24]
 800a5e6:	b913      	cbnz	r3, 800a5ee <__swsetup_r+0x16>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f7ff f8bb 	bl	8009764 <__sinit>
 800a5ee:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <__swsetup_r+0xd0>)
 800a5f0:	429c      	cmp	r4, r3
 800a5f2:	d10f      	bne.n	800a614 <__swsetup_r+0x3c>
 800a5f4:	686c      	ldr	r4, [r5, #4]
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5fc:	0719      	lsls	r1, r3, #28
 800a5fe:	d42c      	bmi.n	800a65a <__swsetup_r+0x82>
 800a600:	06dd      	lsls	r5, r3, #27
 800a602:	d411      	bmi.n	800a628 <__swsetup_r+0x50>
 800a604:	2309      	movs	r3, #9
 800a606:	6033      	str	r3, [r6, #0]
 800a608:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a60c:	81a3      	strh	r3, [r4, #12]
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295
 800a612:	e03e      	b.n	800a692 <__swsetup_r+0xba>
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <__swsetup_r+0xd4>)
 800a616:	429c      	cmp	r4, r3
 800a618:	d101      	bne.n	800a61e <__swsetup_r+0x46>
 800a61a:	68ac      	ldr	r4, [r5, #8]
 800a61c:	e7eb      	b.n	800a5f6 <__swsetup_r+0x1e>
 800a61e:	4b24      	ldr	r3, [pc, #144]	; (800a6b0 <__swsetup_r+0xd8>)
 800a620:	429c      	cmp	r4, r3
 800a622:	bf08      	it	eq
 800a624:	68ec      	ldreq	r4, [r5, #12]
 800a626:	e7e6      	b.n	800a5f6 <__swsetup_r+0x1e>
 800a628:	0758      	lsls	r0, r3, #29
 800a62a:	d512      	bpl.n	800a652 <__swsetup_r+0x7a>
 800a62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a62e:	b141      	cbz	r1, 800a642 <__swsetup_r+0x6a>
 800a630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a634:	4299      	cmp	r1, r3
 800a636:	d002      	beq.n	800a63e <__swsetup_r+0x66>
 800a638:	4630      	mov	r0, r6
 800a63a:	f7ff fcdb 	bl	8009ff4 <_free_r>
 800a63e:	2300      	movs	r3, #0
 800a640:	6363      	str	r3, [r4, #52]	; 0x34
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	2300      	movs	r3, #0
 800a64c:	6063      	str	r3, [r4, #4]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f043 0308 	orr.w	r3, r3, #8
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	b94b      	cbnz	r3, 800a672 <__swsetup_r+0x9a>
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a668:	d003      	beq.n	800a672 <__swsetup_r+0x9a>
 800a66a:	4621      	mov	r1, r4
 800a66c:	4630      	mov	r0, r6
 800a66e:	f000 f95b 	bl	800a928 <__smakebuf_r>
 800a672:	89a0      	ldrh	r0, [r4, #12]
 800a674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a678:	f010 0301 	ands.w	r3, r0, #1
 800a67c:	d00a      	beq.n	800a694 <__swsetup_r+0xbc>
 800a67e:	2300      	movs	r3, #0
 800a680:	60a3      	str	r3, [r4, #8]
 800a682:	6963      	ldr	r3, [r4, #20]
 800a684:	425b      	negs	r3, r3
 800a686:	61a3      	str	r3, [r4, #24]
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	b943      	cbnz	r3, 800a69e <__swsetup_r+0xc6>
 800a68c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a690:	d1ba      	bne.n	800a608 <__swsetup_r+0x30>
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	0781      	lsls	r1, r0, #30
 800a696:	bf58      	it	pl
 800a698:	6963      	ldrpl	r3, [r4, #20]
 800a69a:	60a3      	str	r3, [r4, #8]
 800a69c:	e7f4      	b.n	800a688 <__swsetup_r+0xb0>
 800a69e:	2000      	movs	r0, #0
 800a6a0:	e7f7      	b.n	800a692 <__swsetup_r+0xba>
 800a6a2:	bf00      	nop
 800a6a4:	20000010 	.word	0x20000010
 800a6a8:	0800aec4 	.word	0x0800aec4
 800a6ac:	0800aee4 	.word	0x0800aee4
 800a6b0:	0800aea4 	.word	0x0800aea4

0800a6b4 <__assert_func>:
 800a6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <__assert_func+0x2c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4605      	mov	r5, r0
 800a6c0:	68d8      	ldr	r0, [r3, #12]
 800a6c2:	b14c      	cbz	r4, 800a6d8 <__assert_func+0x24>
 800a6c4:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <__assert_func+0x30>)
 800a6c6:	9100      	str	r1, [sp, #0]
 800a6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6cc:	4906      	ldr	r1, [pc, #24]	; (800a6e8 <__assert_func+0x34>)
 800a6ce:	462b      	mov	r3, r5
 800a6d0:	f000 f8e0 	bl	800a894 <fiprintf>
 800a6d4:	f000 f9a5 	bl	800aa22 <abort>
 800a6d8:	4b04      	ldr	r3, [pc, #16]	; (800a6ec <__assert_func+0x38>)
 800a6da:	461c      	mov	r4, r3
 800a6dc:	e7f3      	b.n	800a6c6 <__assert_func+0x12>
 800a6de:	bf00      	nop
 800a6e0:	20000010 	.word	0x20000010
 800a6e4:	0800b06d 	.word	0x0800b06d
 800a6e8:	0800b07a 	.word	0x0800b07a
 800a6ec:	0800b0a8 	.word	0x0800b0a8

0800a6f0 <_close_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	; (800a70c <_close_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7f7 f95f 	bl	80019be <_close>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_close_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_close_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	20002474 	.word	0x20002474

0800a710 <__sflush_r>:
 800a710:	898a      	ldrh	r2, [r1, #12]
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	4605      	mov	r5, r0
 800a718:	0710      	lsls	r0, r2, #28
 800a71a:	460c      	mov	r4, r1
 800a71c:	d458      	bmi.n	800a7d0 <__sflush_r+0xc0>
 800a71e:	684b      	ldr	r3, [r1, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	dc05      	bgt.n	800a730 <__sflush_r+0x20>
 800a724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	dc02      	bgt.n	800a730 <__sflush_r+0x20>
 800a72a:	2000      	movs	r0, #0
 800a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a732:	2e00      	cmp	r6, #0
 800a734:	d0f9      	beq.n	800a72a <__sflush_r+0x1a>
 800a736:	2300      	movs	r3, #0
 800a738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a73c:	682f      	ldr	r7, [r5, #0]
 800a73e:	602b      	str	r3, [r5, #0]
 800a740:	d032      	beq.n	800a7a8 <__sflush_r+0x98>
 800a742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	075a      	lsls	r2, r3, #29
 800a748:	d505      	bpl.n	800a756 <__sflush_r+0x46>
 800a74a:	6863      	ldr	r3, [r4, #4]
 800a74c:	1ac0      	subs	r0, r0, r3
 800a74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a750:	b10b      	cbz	r3, 800a756 <__sflush_r+0x46>
 800a752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a754:	1ac0      	subs	r0, r0, r3
 800a756:	2300      	movs	r3, #0
 800a758:	4602      	mov	r2, r0
 800a75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a75c:	6a21      	ldr	r1, [r4, #32]
 800a75e:	4628      	mov	r0, r5
 800a760:	47b0      	blx	r6
 800a762:	1c43      	adds	r3, r0, #1
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	d106      	bne.n	800a776 <__sflush_r+0x66>
 800a768:	6829      	ldr	r1, [r5, #0]
 800a76a:	291d      	cmp	r1, #29
 800a76c:	d82c      	bhi.n	800a7c8 <__sflush_r+0xb8>
 800a76e:	4a2a      	ldr	r2, [pc, #168]	; (800a818 <__sflush_r+0x108>)
 800a770:	40ca      	lsrs	r2, r1
 800a772:	07d6      	lsls	r6, r2, #31
 800a774:	d528      	bpl.n	800a7c8 <__sflush_r+0xb8>
 800a776:	2200      	movs	r2, #0
 800a778:	6062      	str	r2, [r4, #4]
 800a77a:	04d9      	lsls	r1, r3, #19
 800a77c:	6922      	ldr	r2, [r4, #16]
 800a77e:	6022      	str	r2, [r4, #0]
 800a780:	d504      	bpl.n	800a78c <__sflush_r+0x7c>
 800a782:	1c42      	adds	r2, r0, #1
 800a784:	d101      	bne.n	800a78a <__sflush_r+0x7a>
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	b903      	cbnz	r3, 800a78c <__sflush_r+0x7c>
 800a78a:	6560      	str	r0, [r4, #84]	; 0x54
 800a78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78e:	602f      	str	r7, [r5, #0]
 800a790:	2900      	cmp	r1, #0
 800a792:	d0ca      	beq.n	800a72a <__sflush_r+0x1a>
 800a794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a798:	4299      	cmp	r1, r3
 800a79a:	d002      	beq.n	800a7a2 <__sflush_r+0x92>
 800a79c:	4628      	mov	r0, r5
 800a79e:	f7ff fc29 	bl	8009ff4 <_free_r>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800a7a6:	e7c1      	b.n	800a72c <__sflush_r+0x1c>
 800a7a8:	6a21      	ldr	r1, [r4, #32]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b0      	blx	r6
 800a7b0:	1c41      	adds	r1, r0, #1
 800a7b2:	d1c7      	bne.n	800a744 <__sflush_r+0x34>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0c4      	beq.n	800a744 <__sflush_r+0x34>
 800a7ba:	2b1d      	cmp	r3, #29
 800a7bc:	d001      	beq.n	800a7c2 <__sflush_r+0xb2>
 800a7be:	2b16      	cmp	r3, #22
 800a7c0:	d101      	bne.n	800a7c6 <__sflush_r+0xb6>
 800a7c2:	602f      	str	r7, [r5, #0]
 800a7c4:	e7b1      	b.n	800a72a <__sflush_r+0x1a>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	e7ad      	b.n	800a72c <__sflush_r+0x1c>
 800a7d0:	690f      	ldr	r7, [r1, #16]
 800a7d2:	2f00      	cmp	r7, #0
 800a7d4:	d0a9      	beq.n	800a72a <__sflush_r+0x1a>
 800a7d6:	0793      	lsls	r3, r2, #30
 800a7d8:	680e      	ldr	r6, [r1, #0]
 800a7da:	bf08      	it	eq
 800a7dc:	694b      	ldreq	r3, [r1, #20]
 800a7de:	600f      	str	r7, [r1, #0]
 800a7e0:	bf18      	it	ne
 800a7e2:	2300      	movne	r3, #0
 800a7e4:	eba6 0807 	sub.w	r8, r6, r7
 800a7e8:	608b      	str	r3, [r1, #8]
 800a7ea:	f1b8 0f00 	cmp.w	r8, #0
 800a7ee:	dd9c      	ble.n	800a72a <__sflush_r+0x1a>
 800a7f0:	6a21      	ldr	r1, [r4, #32]
 800a7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f4:	4643      	mov	r3, r8
 800a7f6:	463a      	mov	r2, r7
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b0      	blx	r6
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dc06      	bgt.n	800a80e <__sflush_r+0xfe>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	e78e      	b.n	800a72c <__sflush_r+0x1c>
 800a80e:	4407      	add	r7, r0
 800a810:	eba8 0800 	sub.w	r8, r8, r0
 800a814:	e7e9      	b.n	800a7ea <__sflush_r+0xda>
 800a816:	bf00      	nop
 800a818:	20400001 	.word	0x20400001

0800a81c <_fflush_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	690b      	ldr	r3, [r1, #16]
 800a820:	4605      	mov	r5, r0
 800a822:	460c      	mov	r4, r1
 800a824:	b913      	cbnz	r3, 800a82c <_fflush_r+0x10>
 800a826:	2500      	movs	r5, #0
 800a828:	4628      	mov	r0, r5
 800a82a:	bd38      	pop	{r3, r4, r5, pc}
 800a82c:	b118      	cbz	r0, 800a836 <_fflush_r+0x1a>
 800a82e:	6983      	ldr	r3, [r0, #24]
 800a830:	b90b      	cbnz	r3, 800a836 <_fflush_r+0x1a>
 800a832:	f7fe ff97 	bl	8009764 <__sinit>
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <_fflush_r+0x6c>)
 800a838:	429c      	cmp	r4, r3
 800a83a:	d11b      	bne.n	800a874 <_fflush_r+0x58>
 800a83c:	686c      	ldr	r4, [r5, #4]
 800a83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0ef      	beq.n	800a826 <_fflush_r+0xa>
 800a846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a848:	07d0      	lsls	r0, r2, #31
 800a84a:	d404      	bmi.n	800a856 <_fflush_r+0x3a>
 800a84c:	0599      	lsls	r1, r3, #22
 800a84e:	d402      	bmi.n	800a856 <_fflush_r+0x3a>
 800a850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a852:	f7ff f82a 	bl	80098aa <__retarget_lock_acquire_recursive>
 800a856:	4628      	mov	r0, r5
 800a858:	4621      	mov	r1, r4
 800a85a:	f7ff ff59 	bl	800a710 <__sflush_r>
 800a85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a860:	07da      	lsls	r2, r3, #31
 800a862:	4605      	mov	r5, r0
 800a864:	d4e0      	bmi.n	800a828 <_fflush_r+0xc>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	059b      	lsls	r3, r3, #22
 800a86a:	d4dd      	bmi.n	800a828 <_fflush_r+0xc>
 800a86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a86e:	f7ff f81d 	bl	80098ac <__retarget_lock_release_recursive>
 800a872:	e7d9      	b.n	800a828 <_fflush_r+0xc>
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <_fflush_r+0x70>)
 800a876:	429c      	cmp	r4, r3
 800a878:	d101      	bne.n	800a87e <_fflush_r+0x62>
 800a87a:	68ac      	ldr	r4, [r5, #8]
 800a87c:	e7df      	b.n	800a83e <_fflush_r+0x22>
 800a87e:	4b04      	ldr	r3, [pc, #16]	; (800a890 <_fflush_r+0x74>)
 800a880:	429c      	cmp	r4, r3
 800a882:	bf08      	it	eq
 800a884:	68ec      	ldreq	r4, [r5, #12]
 800a886:	e7da      	b.n	800a83e <_fflush_r+0x22>
 800a888:	0800aec4 	.word	0x0800aec4
 800a88c:	0800aee4 	.word	0x0800aee4
 800a890:	0800aea4 	.word	0x0800aea4

0800a894 <fiprintf>:
 800a894:	b40e      	push	{r1, r2, r3}
 800a896:	b503      	push	{r0, r1, lr}
 800a898:	4601      	mov	r1, r0
 800a89a:	ab03      	add	r3, sp, #12
 800a89c:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <fiprintf+0x20>)
 800a89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a2:	6800      	ldr	r0, [r0, #0]
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	f7ff fcaf 	bl	800a208 <_vfiprintf_r>
 800a8aa:	b002      	add	sp, #8
 800a8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b0:	b003      	add	sp, #12
 800a8b2:	4770      	bx	lr
 800a8b4:	20000010 	.word	0x20000010

0800a8b8 <_lseek_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4d07      	ldr	r5, [pc, #28]	; (800a8d8 <_lseek_r+0x20>)
 800a8bc:	4604      	mov	r4, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	602a      	str	r2, [r5, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	f7f7 f8a0 	bl	8001a0c <_lseek>
 800a8cc:	1c43      	adds	r3, r0, #1
 800a8ce:	d102      	bne.n	800a8d6 <_lseek_r+0x1e>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	b103      	cbz	r3, 800a8d6 <_lseek_r+0x1e>
 800a8d4:	6023      	str	r3, [r4, #0]
 800a8d6:	bd38      	pop	{r3, r4, r5, pc}
 800a8d8:	20002474 	.word	0x20002474

0800a8dc <__swhatbuf_r>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	460e      	mov	r6, r1
 800a8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8e4:	2900      	cmp	r1, #0
 800a8e6:	b096      	sub	sp, #88	; 0x58
 800a8e8:	4614      	mov	r4, r2
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	da08      	bge.n	800a900 <__swhatbuf_r+0x24>
 800a8ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	602a      	str	r2, [r5, #0]
 800a8f6:	061a      	lsls	r2, r3, #24
 800a8f8:	d410      	bmi.n	800a91c <__swhatbuf_r+0x40>
 800a8fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8fe:	e00e      	b.n	800a91e <__swhatbuf_r+0x42>
 800a900:	466a      	mov	r2, sp
 800a902:	f000 f895 	bl	800aa30 <_fstat_r>
 800a906:	2800      	cmp	r0, #0
 800a908:	dbf1      	blt.n	800a8ee <__swhatbuf_r+0x12>
 800a90a:	9a01      	ldr	r2, [sp, #4]
 800a90c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a910:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a914:	425a      	negs	r2, r3
 800a916:	415a      	adcs	r2, r3
 800a918:	602a      	str	r2, [r5, #0]
 800a91a:	e7ee      	b.n	800a8fa <__swhatbuf_r+0x1e>
 800a91c:	2340      	movs	r3, #64	; 0x40
 800a91e:	2000      	movs	r0, #0
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	b016      	add	sp, #88	; 0x58
 800a924:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a928 <__smakebuf_r>:
 800a928:	898b      	ldrh	r3, [r1, #12]
 800a92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a92c:	079d      	lsls	r5, r3, #30
 800a92e:	4606      	mov	r6, r0
 800a930:	460c      	mov	r4, r1
 800a932:	d507      	bpl.n	800a944 <__smakebuf_r+0x1c>
 800a934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	2301      	movs	r3, #1
 800a93e:	6163      	str	r3, [r4, #20]
 800a940:	b002      	add	sp, #8
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	ab01      	add	r3, sp, #4
 800a946:	466a      	mov	r2, sp
 800a948:	f7ff ffc8 	bl	800a8dc <__swhatbuf_r>
 800a94c:	9900      	ldr	r1, [sp, #0]
 800a94e:	4605      	mov	r5, r0
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff fbbb 	bl	800a0cc <_malloc_r>
 800a956:	b948      	cbnz	r0, 800a96c <__smakebuf_r+0x44>
 800a958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a95c:	059a      	lsls	r2, r3, #22
 800a95e:	d4ef      	bmi.n	800a940 <__smakebuf_r+0x18>
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	f043 0302 	orr.w	r3, r3, #2
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	e7e3      	b.n	800a934 <__smakebuf_r+0xc>
 800a96c:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <__smakebuf_r+0x7c>)
 800a96e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	9b00      	ldr	r3, [sp, #0]
 800a97c:	6163      	str	r3, [r4, #20]
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	6120      	str	r0, [r4, #16]
 800a982:	b15b      	cbz	r3, 800a99c <__smakebuf_r+0x74>
 800a984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 f863 	bl	800aa54 <_isatty_r>
 800a98e:	b128      	cbz	r0, 800a99c <__smakebuf_r+0x74>
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	f043 0301 	orr.w	r3, r3, #1
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	89a0      	ldrh	r0, [r4, #12]
 800a99e:	4305      	orrs	r5, r0
 800a9a0:	81a5      	strh	r5, [r4, #12]
 800a9a2:	e7cd      	b.n	800a940 <__smakebuf_r+0x18>
 800a9a4:	080096fd 	.word	0x080096fd

0800a9a8 <__ascii_mbtowc>:
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	b901      	cbnz	r1, 800a9ae <__ascii_mbtowc+0x6>
 800a9ac:	a901      	add	r1, sp, #4
 800a9ae:	b142      	cbz	r2, 800a9c2 <__ascii_mbtowc+0x1a>
 800a9b0:	b14b      	cbz	r3, 800a9c6 <__ascii_mbtowc+0x1e>
 800a9b2:	7813      	ldrb	r3, [r2, #0]
 800a9b4:	600b      	str	r3, [r1, #0]
 800a9b6:	7812      	ldrb	r2, [r2, #0]
 800a9b8:	1e10      	subs	r0, r2, #0
 800a9ba:	bf18      	it	ne
 800a9bc:	2001      	movne	r0, #1
 800a9be:	b002      	add	sp, #8
 800a9c0:	4770      	bx	lr
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	e7fb      	b.n	800a9be <__ascii_mbtowc+0x16>
 800a9c6:	f06f 0001 	mvn.w	r0, #1
 800a9ca:	e7f8      	b.n	800a9be <__ascii_mbtowc+0x16>

0800a9cc <__malloc_lock>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__malloc_lock+0x8>)
 800a9ce:	f7fe bf6c 	b.w	80098aa <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	20002468 	.word	0x20002468

0800a9d8 <__malloc_unlock>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__malloc_unlock+0x8>)
 800a9da:	f7fe bf67 	b.w	80098ac <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20002468 	.word	0x20002468

0800a9e4 <_read_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d07      	ldr	r5, [pc, #28]	; (800aa04 <_read_r+0x20>)
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	f7f6 ffc6 	bl	8001984 <_read>
 800a9f8:	1c43      	adds	r3, r0, #1
 800a9fa:	d102      	bne.n	800aa02 <_read_r+0x1e>
 800a9fc:	682b      	ldr	r3, [r5, #0]
 800a9fe:	b103      	cbz	r3, 800aa02 <_read_r+0x1e>
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	bd38      	pop	{r3, r4, r5, pc}
 800aa04:	20002474 	.word	0x20002474

0800aa08 <__ascii_wctomb>:
 800aa08:	b149      	cbz	r1, 800aa1e <__ascii_wctomb+0x16>
 800aa0a:	2aff      	cmp	r2, #255	; 0xff
 800aa0c:	bf85      	ittet	hi
 800aa0e:	238a      	movhi	r3, #138	; 0x8a
 800aa10:	6003      	strhi	r3, [r0, #0]
 800aa12:	700a      	strbls	r2, [r1, #0]
 800aa14:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa18:	bf98      	it	ls
 800aa1a:	2001      	movls	r0, #1
 800aa1c:	4770      	bx	lr
 800aa1e:	4608      	mov	r0, r1
 800aa20:	4770      	bx	lr

0800aa22 <abort>:
 800aa22:	b508      	push	{r3, lr}
 800aa24:	2006      	movs	r0, #6
 800aa26:	f000 f84d 	bl	800aac4 <raise>
 800aa2a:	2001      	movs	r0, #1
 800aa2c:	f7f6 ffa0 	bl	8001970 <_exit>

0800aa30 <_fstat_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	; (800aa50 <_fstat_r+0x20>)
 800aa34:	2300      	movs	r3, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	4608      	mov	r0, r1
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	f7f6 ffca 	bl	80019d6 <_fstat>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d102      	bne.n	800aa4c <_fstat_r+0x1c>
 800aa46:	682b      	ldr	r3, [r5, #0]
 800aa48:	b103      	cbz	r3, 800aa4c <_fstat_r+0x1c>
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20002474 	.word	0x20002474

0800aa54 <_isatty_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	4d06      	ldr	r5, [pc, #24]	; (800aa70 <_isatty_r+0x1c>)
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f6 ffc9 	bl	80019f6 <_isatty>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_isatty_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_isatty_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	20002474 	.word	0x20002474

0800aa74 <_raise_r>:
 800aa74:	291f      	cmp	r1, #31
 800aa76:	b538      	push	{r3, r4, r5, lr}
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	d904      	bls.n	800aa88 <_raise_r+0x14>
 800aa7e:	2316      	movs	r3, #22
 800aa80:	6003      	str	r3, [r0, #0]
 800aa82:	f04f 30ff 	mov.w	r0, #4294967295
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa8a:	b112      	cbz	r2, 800aa92 <_raise_r+0x1e>
 800aa8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa90:	b94b      	cbnz	r3, 800aaa6 <_raise_r+0x32>
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 f830 	bl	800aaf8 <_getpid_r>
 800aa98:	462a      	mov	r2, r5
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaa2:	f000 b817 	b.w	800aad4 <_kill_r>
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d00a      	beq.n	800aac0 <_raise_r+0x4c>
 800aaaa:	1c59      	adds	r1, r3, #1
 800aaac:	d103      	bne.n	800aab6 <_raise_r+0x42>
 800aaae:	2316      	movs	r3, #22
 800aab0:	6003      	str	r3, [r0, #0]
 800aab2:	2001      	movs	r0, #1
 800aab4:	e7e7      	b.n	800aa86 <_raise_r+0x12>
 800aab6:	2400      	movs	r4, #0
 800aab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aabc:	4628      	mov	r0, r5
 800aabe:	4798      	blx	r3
 800aac0:	2000      	movs	r0, #0
 800aac2:	e7e0      	b.n	800aa86 <_raise_r+0x12>

0800aac4 <raise>:
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <raise+0xc>)
 800aac6:	4601      	mov	r1, r0
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f7ff bfd3 	b.w	800aa74 <_raise_r>
 800aace:	bf00      	nop
 800aad0:	20000010 	.word	0x20000010

0800aad4 <_kill_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4d07      	ldr	r5, [pc, #28]	; (800aaf4 <_kill_r+0x20>)
 800aad8:	2300      	movs	r3, #0
 800aada:	4604      	mov	r4, r0
 800aadc:	4608      	mov	r0, r1
 800aade:	4611      	mov	r1, r2
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f7f6 ff35 	bl	8001950 <_kill>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d102      	bne.n	800aaf0 <_kill_r+0x1c>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	b103      	cbz	r3, 800aaf0 <_kill_r+0x1c>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	bd38      	pop	{r3, r4, r5, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20002474 	.word	0x20002474

0800aaf8 <_getpid_r>:
 800aaf8:	f7f6 bf22 	b.w	8001940 <_getpid>

0800aafc <_init>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr

0800ab08 <_fini>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr
