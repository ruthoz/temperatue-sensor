
cdCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bfc  08007bfc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c04  08007c04  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c08  08007c08  00017c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000088  08007c94  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08007c94  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cf1  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000257d  00000000  00000000  00030da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00033328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00034168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028325  00000000  00000000  00034ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013536  00000000  00000000  0005d1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edd45  00000000  00000000  000706fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  0015e490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078ec 	.word	0x080078ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080078ec 	.word	0x080078ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000584:	b40f      	push	{r0, r1, r2, r3}
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	693a      	ldr	r2, [r7, #16]
 8000596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <myprintf+0x44>)
 800059c:	f006 fd4a 	bl	8007034 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <myprintf+0x44>)
 80005a2:	f7ff fe15 	bl	80001d0 <strlen>
 80005a6:	4603      	mov	r3, r0
 80005a8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	4905      	ldr	r1, [pc, #20]	; (80005c8 <myprintf+0x44>)
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <myprintf+0x48>)
 80005b6:	f002 fea7 	bl	8003308 <HAL_UART_Transmit>

}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c4:	b004      	add	sp, #16
 80005c6:	4770      	bx	lr
 80005c8:	2000018c 	.word	0x2000018c
 80005cc:	20000108 	.word	0x20000108

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fbac 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f90c 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f9ca 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f998 	bl	8000918 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005e8:	f003 fb8a 	bl	8003d00 <MX_FATFS_Init>
  MX_SPI1_Init();
 80005ec:	f000 f956 	bl	800089c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005f0:	4871      	ldr	r0, [pc, #452]	; (80007b8 <main+0x1e8>)
 80005f2:	f7ff ffc7 	bl	8000584 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fa:	f000 fc17 	bl	8000e2c <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 80005fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000602:	2201      	movs	r2, #1
 8000604:	496d      	ldr	r1, [pc, #436]	; (80007bc <main+0x1ec>)
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fe08 	bl	800621c <f_mount>
 800060c:	4603      	mov	r3, r0
 800060e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 8000612:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <main+0x58>
  	myprintf("f_mount error (%i)\r\n", fres);
 800061a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800061e:	4619      	mov	r1, r3
 8000620:	4867      	ldr	r0, [pc, #412]	; (80007c0 <main+0x1f0>)
 8000622:	f7ff ffaf 	bl	8000584 <myprintf>
  	while(1);
 8000626:	e7fe      	b.n	8000626 <main+0x56>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000628:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800062c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000630:	4619      	mov	r1, r3
 8000632:	4862      	ldr	r0, [pc, #392]	; (80007bc <main+0x1ec>)
 8000634:	f006 fb52 	bl	8006cdc <f_getfree>
 8000638:	4603      	mov	r3, r0
 800063a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 800063e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <main+0x84>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8000646:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800064a:	4619      	mov	r1, r3
 800064c:	485d      	ldr	r0, [pc, #372]	; (80007c4 <main+0x1f4>)
 800064e:	f7ff ff99 	bl	8000584 <myprintf>
  	while(1);
 8000652:	e7fe      	b.n	8000652 <main+0x82>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000654:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000658:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	3b02      	subs	r3, #2
 8000662:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000666:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	8952      	ldrh	r2, [r2, #10]
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
    free_sectors = free_clusters * getFreeFs->csize;
 8000676:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800067a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	895b      	ldrh	r3, [r3, #10]
 8000682:	461a      	mov	r2, r3
 8000684:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000688:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000696:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800069a:	0859      	lsrs	r1, r3, #1
 800069c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006a0:	085b      	lsrs	r3, r3, #1
 80006a2:	461a      	mov	r2, r3
 80006a4:	4848      	ldr	r0, [pc, #288]	; (80007c8 <main+0x1f8>)
 80006a6:	f7ff ff6d 	bl	8000584 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 80006aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ae:	2201      	movs	r2, #1
 80006b0:	4946      	ldr	r1, [pc, #280]	; (80007cc <main+0x1fc>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fdf8 	bl	80062a8 <f_open>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if (fres != FR_OK) {
 80006be:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <main+0xfe>
  	myprintf("f_open error (%i)\r\n");
 80006c6:	4842      	ldr	r0, [pc, #264]	; (80007d0 <main+0x200>)
 80006c8:	f7ff ff5c 	bl	8000584 <myprintf>
  	while(1);
 80006cc:	e7fe      	b.n	80006cc <main+0xfc>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006ce:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x204>)
 80006d0:	f7ff ff58 	bl	8000584 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	211e      	movs	r1, #30
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 fbb1 	bl	8006e46 <f_gets>
 80006e4:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
    if(rres != 0) {
 80006e8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d006      	beq.n	80006fe <main+0x12e>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	4838      	ldr	r0, [pc, #224]	; (80007d8 <main+0x208>)
 80006f8:	f7ff ff44 	bl	8000584 <myprintf>
 80006fc:	e005      	b.n	800070a <main+0x13a>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 80006fe:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000702:	4619      	mov	r1, r3
 8000704:	4835      	ldr	r0, [pc, #212]	; (80007dc <main+0x20c>)
 8000706:	f7ff ff3d 	bl	8000584 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800070a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800070e:	4618      	mov	r0, r3
 8000710:	f006 faba 	bl	8006c88 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000714:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000718:	221a      	movs	r2, #26
 800071a:	4931      	ldr	r1, [pc, #196]	; (80007e0 <main+0x210>)
 800071c:	4618      	mov	r0, r3
 800071e:	f005 fdc3 	bl	80062a8 <f_open>
 8000722:	4603      	mov	r3, r0
 8000724:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 8000728:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800072c:	2b00      	cmp	r3, #0
 800072e:	d103      	bne.n	8000738 <main+0x168>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000730:	482c      	ldr	r0, [pc, #176]	; (80007e4 <main+0x214>)
 8000732:	f7ff ff27 	bl	8000584 <myprintf>
 8000736:	e005      	b.n	8000744 <main+0x174>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 8000738:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800073c:	4619      	mov	r1, r3
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <main+0x200>)
 8000740:	f7ff ff20 	bl	8000584 <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 20);
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4a27      	ldr	r2, [pc, #156]	; (80007e8 <main+0x218>)
 800074a:	461c      	mov	r4, r3
 800074c:	4615      	mov	r5, r2
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	682b      	ldr	r3, [r5, #0]
 8000754:	6023      	str	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	f107 0108 	add.w	r1, r7, #8
 800075c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000760:	2213      	movs	r2, #19
 8000762:	f006 f89e 	bl	80068a2 <f_write>
 8000766:	4603      	mov	r3, r0
 8000768:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
    if(fres == FR_OK) {
 800076c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <main+0x1b8>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000774:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000778:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <main+0x21c>)
 8000782:	f7ff feff 	bl	8000584 <myprintf>
 8000786:	e002      	b.n	800078e <main+0x1be>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000788:	4819      	ldr	r0, [pc, #100]	; (80007f0 <main+0x220>)
 800078a:	f7ff fefb 	bl	8000584 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 800078e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fa78 	bl	8006c88 <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000798:	2200      	movs	r2, #0
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <main+0x1ec>)
 800079c:	2000      	movs	r0, #0
 800079e:	f005 fd3d 	bl	800621c <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <main+0x224>)
 80007a8:	f000 fe0c 	bl	80013c4 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f000 fb3c 	bl	8000e2c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b4:	e7f5      	b.n	80007a2 <main+0x1d2>
 80007b6:	bf00      	nop
 80007b8:	08007904 	.word	0x08007904
 80007bc:	08007924 	.word	0x08007924
 80007c0:	08007928 	.word	0x08007928
 80007c4:	08007940 	.word	0x08007940
 80007c8:	08007958 	.word	0x08007958
 80007cc:	080079a0 	.word	0x080079a0
 80007d0:	080079ac 	.word	0x080079ac
 80007d4:	080079c0 	.word	0x080079c0
 80007d8:	080079f0 	.word	0x080079f0
 80007dc:	08007a1c 	.word	0x08007a1c
 80007e0:	08007a30 	.word	0x08007a30
 80007e4:	08007a3c 	.word	0x08007a3c
 80007e8:	08007a6c 	.word	0x08007a6c
 80007ec:	08007a80 	.word	0x08007a80
 80007f0:	08007aa4 	.word	0x08007aa4
 80007f4:	48000400 	.word	0x48000400

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b096      	sub	sp, #88	; 0x58
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2244      	movs	r2, #68	; 0x44
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f006 fbe0 	bl	8006fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800081a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081e:	f000 fdf9 	bl	8001414 <HAL_PWREx_ControlVoltageScaling>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000828:	f000 f920 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2310      	movs	r3, #16
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000846:	230a      	movs	r3, #10
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084a:	2307      	movs	r3, #7
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fe30 	bl	80014c0 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000866:	f000 f901 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f9f8 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088e:	f000 f8ed 	bl	8000a6c <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3758      	adds	r7, #88	; 0x58
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_SPI1_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_SPI1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_SPI1_Init+0x74>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI1_Init+0x74>)
 80008b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI1_Init+0x74>)
 80008ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI1_Init+0x74>)
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI1_Init+0x74>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI1_Init+0x74>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_SPI1_Init+0x74>)
 80008fc:	f002 f89c 	bl	8002a38 <HAL_SPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f8b1 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a4 	.word	0x200000a4
 8000914:	40013000 	.word	0x40013000

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART2_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800095c:	f002 fc86 	bl	800326c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f881 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000108 	.word	0x20000108
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <MX_GPIO_Init+0xe8>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <MX_GPIO_Init+0xe8>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <MX_GPIO_Init+0xe8>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_GPIO_Init+0xe8>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f246 0140 	movw	r1, #24640	; 0x6040
 80009f4:	481b      	ldr	r0, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009f6:	f000 fccd 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4815      	ldr	r0, [pc, #84]	; (8000a68 <MX_GPIO_Init+0xf0>)
 8000a12:	f000 fb15 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SD_CS_Pin;
 8000a16:	f246 0340 	movw	r3, #24640	; 0x6040
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_GPIO_Init+0xec>)
 8000a30:	f000 fb06 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_GPIO_Init+0xec>)
 8000a52:	f000 faf5 	bl	8001040 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_SPI_MspInit+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d128      	bne.n	8000b34 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aec:	6613      	str	r3, [r2, #96]	; 0x60
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_SPI_MspInit+0x80>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b12:	23e0      	movs	r3, #224	; 0xe0
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b22:	2305      	movs	r3, #5
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f000 fa86 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b0ac      	sub	sp, #176	; 0xb0
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2288      	movs	r2, #136	; 0x88
 8000b62:	2100      	movs	r1, #0
 8000b64:	4618      	mov	r0, r3
 8000b66:	f006 fa31 	bl	8006fcc <memset>
  if(huart->Instance==USART2)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <HAL_UART_MspInit+0xb0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d13b      	bne.n	8000bec <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fa9d 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b8c:	f7ff ff6e 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_UART_MspInit+0xb4>)
 8000bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fa2a 	bl	8001040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	37b0      	adds	r7, #176	; 0xb0
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8d0 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f006 f97a 	bl	8006f78 <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20018000 	.word	0x20018000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	2000028c 	.word	0x2000028c
 8000cb8:	200002f0 	.word	0x200002f0

08000cbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce4:	f7ff ffea 	bl	8000cbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f006 f939 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d12:	f7ff fc5d 	bl	80005d0 <main>

08000d16 <LoopForever>:

LoopForever:
    b LoopForever
 8000d16:	e7fe      	b.n	8000d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d24:	08007c0c 	.word	0x08007c0c
  ldr r2, =_sbss
 8000d28:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d2c:	200002ec 	.word	0x200002ec

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_Init+0x3c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_Init+0x3c>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f944 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f80f 	bl	8000d74 <HAL_InitTick>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	e001      	b.n	8000d66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d62:	f7ff fe89 	bl	8000a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d023      	beq.n	8000dd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_InitTick+0x70>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f941 	bl	8001026 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10f      	bne.n	8000dca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d809      	bhi.n	8000dc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f919 	bl	8000fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_InitTick+0x74>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e007      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
 8000dc8:	e004      	b.n	8000dd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	e001      	b.n	8000dd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000290 	.word	0x20000290

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000290 	.word	0x20000290

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db0a      	blt.n	8000f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	490c      	ldr	r1, [pc, #48]	; (8000f24 <__NVIC_SetPriority+0x4c>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f00:	e00a      	b.n	8000f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4908      	ldr	r1, [pc, #32]	; (8000f28 <__NVIC_SetPriority+0x50>)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	3b04      	subs	r3, #4
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	440b      	add	r3, r1
 8000f16:	761a      	strb	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000e100 	.word	0xe000e100
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b089      	sub	sp, #36	; 0x24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f1c3 0307 	rsb	r3, r3, #7
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	bf28      	it	cs
 8000f4a:	2304      	movcs	r3, #4
 8000f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3304      	adds	r3, #4
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	d902      	bls.n	8000f5c <NVIC_EncodePriority+0x30>
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3b03      	subs	r3, #3
 8000f5a:	e000      	b.n	8000f5e <NVIC_EncodePriority+0x32>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	43d9      	mvns	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	4313      	orrs	r3, r2
         );
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3724      	adds	r7, #36	; 0x24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff8e 	bl	8000ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff47 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff5c 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff8e 	bl	8000f2c <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5d 	bl	8000ed8 <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffb0 	bl	8000f94 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e17f      	b.n	8001350 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8171 	beq.w	800134a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x40>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d118      	bne.n	8001120 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	08db      	lsrs	r3, r3, #3
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	6939      	ldr	r1, [r7, #16]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80ac 	beq.w	800134a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_GPIO_Init+0x330>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	4a5e      	ldr	r2, [pc, #376]	; (8001370 <HAL_GPIO_Init+0x330>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6613      	str	r3, [r2, #96]	; 0x60
 80011fe:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_GPIO_Init+0x334>)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x242>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_GPIO_Init+0x338>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x23e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4e      	ldr	r2, [pc, #312]	; (800137c <HAL_GPIO_Init+0x33c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x23a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_GPIO_Init+0x340>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x236>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x344>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x232>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <HAL_GPIO_Init+0x348>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x22e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4a      	ldr	r2, [pc, #296]	; (800138c <HAL_GPIO_Init+0x34c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x22a>
 8001266:	2306      	movs	r3, #6
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x244>
 800126a:	2307      	movs	r3, #7
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x244>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x244>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x244>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x244>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x244>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x244>
 8001282:	2300      	movs	r3, #0
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001294:	4937      	ldr	r1, [pc, #220]	; (8001374 <HAL_GPIO_Init+0x334>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_GPIO_Init+0x350>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x350>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_GPIO_Init+0x350>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f0:	4a27      	ldr	r2, [pc, #156]	; (8001390 <HAL_GPIO_Init+0x350>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_GPIO_Init+0x350>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x350>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_GPIO_Init+0x350>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001344:	4a12      	ldr	r2, [pc, #72]	; (8001390 <HAL_GPIO_Init+0x350>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	f47f ae78 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	48001400 	.word	0x48001400
 800138c:	48001800 	.word	0x48001800
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43d9      	mvns	r1, r3
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	400b      	ands	r3, r1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_PWREx_GetVoltageRange+0x18>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001422:	d130      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001430:	d038      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2232      	movs	r2, #50	; 0x32
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001458:	e002      	b.n	8001460 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3b01      	subs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146c:	d102      	bne.n	8001474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f2      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001480:	d110      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e00f      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001492:	d007      	beq.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40007000 	.word	0x40007000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	431bde83 	.word	0x431bde83

080014c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e3ca      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d2:	4b97      	ldr	r3, [pc, #604]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014dc:	4b94      	ldr	r3, [pc, #592]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80e4 	beq.w	80016bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x4a>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	f040 808b 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 8087 	bne.w	8001618 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800150a:	4b89      	ldr	r3, [pc, #548]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x62>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e3a2      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b82      	ldr	r3, [pc, #520]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d004      	beq.n	800153c <HAL_RCC_OscConfig+0x7c>
 8001532:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153a:	e005      	b.n	8001548 <HAL_RCC_OscConfig+0x88>
 800153c:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800153e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001548:	4293      	cmp	r3, r2
 800154a:	d223      	bcs.n	8001594 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fd55 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e383      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001560:	4b73      	ldr	r3, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a72      	ldr	r2, [pc, #456]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	496d      	ldr	r1, [pc, #436]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157e:	4b6c      	ldr	r3, [pc, #432]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	4968      	ldr	r1, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800158e:	4313      	orrs	r3, r2
 8001590:	604b      	str	r3, [r1, #4]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001594:	4b66      	ldr	r3, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a65      	ldr	r2, [pc, #404]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4960      	ldr	r1, [pc, #384]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b2:	4b5f      	ldr	r3, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	495b      	ldr	r1, [pc, #364]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d109      	bne.n	80015e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 fd15 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e343      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015e0:	f000 fc4a 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	4950      	ldr	r1, [pc, #320]	; (8001734 <HAL_RCC_OscConfig+0x274>)
 80015f2:	5ccb      	ldrb	r3, [r1, r3]
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	4a4e      	ldr	r2, [pc, #312]	; (8001738 <HAL_RCC_OscConfig+0x278>)
 80015fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <HAL_RCC_OscConfig+0x27c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fbb5 	bl	8000d74 <HAL_InitTick>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d052      	beq.n	80016ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	e327      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d032      	beq.n	8001686 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001620:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a42      	ldr	r2, [pc, #264]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162c:	f7ff fbf2 	bl	8000e14 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001634:	f7ff fbee 	bl	8000e14 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e310      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4931      	ldr	r1, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	492c      	ldr	r1, [pc, #176]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e01a      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800168c:	f023 0301 	bic.w	r3, r3, #1
 8001690:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001692:	f7ff fbbf 	bl	8000e14 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169a:	f7ff fbbb 	bl	8000e14 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e2dd      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x1da>
 80016b8:	e000      	b.n	80016bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d074      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x21a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d10b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d064      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d160      	bne.n	80017b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e2ba      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x24a>
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e026      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001712:	d115      	bne.n	8001740 <HAL_RCC_OscConfig+0x280>
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 800171a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a02      	ldr	r2, [pc, #8]	; (8001730 <HAL_RCC_OscConfig+0x270>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x298>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	08007b00 	.word	0x08007b00
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004
 8001740:	4ba0      	ldr	r3, [pc, #640]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a9f      	ldr	r2, [pc, #636]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fb58 	bl	8000e14 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fb54 	bl	8000e14 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e276      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb44 	bl	8000e14 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fb40 	bl	8000e14 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e262      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d0>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d060      	beq.n	8001880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x310>
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d119      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d116      	bne.n	80017fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x328>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e23f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	4973      	ldr	r1, [pc, #460]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fc:	e040      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001806:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6e      	ldr	r2, [pc, #440]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff faff 	bl	8000e14 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fafb 	bl	8000e14 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e21d      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	495f      	ldr	r1, [pc, #380]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	e018      	b.n	8001880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a5c      	ldr	r2, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fadb 	bl	8000e14 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fad7 	bl	8000e14 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1f9      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d03c      	beq.n	8001906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d01c      	beq.n	80018ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001894:	4b4b      	ldr	r3, [pc, #300]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff fab6 	bl	8000e14 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ac:	f7ff fab2 	bl	8000e14 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1d4      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0ef      	beq.n	80018ac <HAL_RCC_OscConfig+0x3ec>
 80018cc:	e01b      	b.n	8001906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d4:	4a3b      	ldr	r2, [pc, #236]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff fa99 	bl	8000e14 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa95 	bl	8000e14 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1b7      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ef      	bne.n	80018e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80a6 	beq.w	8001a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001918:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	; 0x58
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193c:	2301      	movs	r3, #1
 800193e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d118      	bne.n	800197e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800194c:	4b1e      	ldr	r3, [pc, #120]	; (80019c8 <HAL_RCC_OscConfig+0x508>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001958:	f7ff fa5c 	bl	8000e14 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001960:	f7ff fa58 	bl	8000e14 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e17a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_RCC_OscConfig+0x508>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d108      	bne.n	8001998 <HAL_RCC_OscConfig+0x4d8>
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001996:	e029      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b05      	cmp	r3, #5
 800199e:	d115      	bne.n	80019cc <HAL_RCC_OscConfig+0x50c>
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x52c>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	4b9c      	ldr	r3, [pc, #624]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d2:	4a9b      	ldr	r2, [pc, #620]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019dc:	4b98      	ldr	r3, [pc, #608]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e2:	4a97      	ldr	r2, [pc, #604]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d016      	beq.n	8001a22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f4:	f7ff fa0e 	bl	8000e14 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa0a 	bl	8000e14 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e12a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a12:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ed      	beq.n	80019fc <HAL_RCC_OscConfig+0x53c>
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff f9f7 	bl	8000e14 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f9f3 	bl	8000e14 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e113      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	4b7f      	ldr	r3, [pc, #508]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ed      	bne.n	8001a2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b7a      	ldr	r3, [pc, #488]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	4a79      	ldr	r2, [pc, #484]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80fe 	beq.w	8001c66 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	f040 80d0 	bne.w	8001c14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a74:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d130      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	3b01      	subs	r3, #1
 8001a94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d127      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d11f      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab4:	2a07      	cmp	r2, #7
 8001ab6:	bf14      	ite	ne
 8001ab8:	2201      	movne	r2, #1
 8001aba:	2200      	moveq	r2, #0
 8001abc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d113      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d06e      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d069      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0ad      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b18:	f7ff f97c 	bl	8000e14 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f978 	bl	8000e14 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e09a      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <HAL_RCC_OscConfig+0x784>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b4e:	3a01      	subs	r2, #1
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b60:	0852      	lsrs	r2, r2, #1
 8001b62:	3a01      	subs	r2, #1
 8001b64:	0552      	lsls	r2, r2, #21
 8001b66:	4311      	orrs	r1, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b6c:	0852      	lsrs	r2, r2, #1
 8001b6e:	3a01      	subs	r2, #1
 8001b70:	0652      	lsls	r2, r2, #25
 8001b72:	4311      	orrs	r1, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b78:	0912      	lsrs	r2, r2, #4
 8001b7a:	0452      	lsls	r2, r2, #17
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	4930      	ldr	r1, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b84:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a2d      	ldr	r2, [pc, #180]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4a2a      	ldr	r2, [pc, #168]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b9c:	f7ff f93a 	bl	8000e14 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f936 	bl	8000e14 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e058      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc2:	e050      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e04f      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d148      	bne.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bec:	f7ff f912 	bl	8000e14 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f90e 	bl	8000e14 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e030      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x734>
 8001c12:	e028      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d023      	beq.n	8001c62 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_RCC_OscConfig+0x780>)
 8001c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f8f5 	bl	8000e14 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2c:	e00c      	b.n	8001c48 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f8f1 	bl	8000e14 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d905      	bls.n	8001c48 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e013      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
 8001c40:	40021000 	.word	0x40021000
 8001c44:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ec      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4905      	ldr	r1, [pc, #20]	; (8001c70 <HAL_RCC_OscConfig+0x7b0>)
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x7b4>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60cb      	str	r3, [r1, #12]
 8001c60:	e001      	b.n	8001c66 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3720      	adds	r7, #32
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	feeefffc 	.word	0xfeeefffc

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0e7      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d910      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 0207 	bic.w	r2, r3, #7
 8001ca2:	4970      	ldr	r1, [pc, #448]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b6e      	ldr	r3, [pc, #440]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cf      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4960      	ldr	r1, [pc, #384]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d04c      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0a6      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d115      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e09a      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e086      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4943      	ldr	r1, [pc, #268]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d60:	f7ff f858 	bl	8000e14 <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7ff f854 	bl	8000e14 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e06e      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d208      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	492b      	ldr	r1, [pc, #172]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d210      	bcs.n	8001dee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0207 	bic.w	r2, r3, #7
 8001dd4:	4923      	ldr	r1, [pc, #140]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ddc:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_ClockConfig+0x1ec>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e036      	b.n	8001e5c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfa:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	4918      	ldr	r1, [pc, #96]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4910      	ldr	r1, [pc, #64]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e2c:	f000 f824 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_ClockConfig+0x1f0>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	490b      	ldr	r1, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a09      	ldr	r2, [pc, #36]	; (8001e70 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1fc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff8f 	bl	8000d74 <HAL_InitTick>
 8001e56:	4603      	mov	r3, r0
 8001e58:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08007b00 	.word	0x08007b00
 8001e70:	20000000 	.word	0x20000000
 8001e74:	20000004 	.word	0x20000004

08001e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0x34>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11e      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eac:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e005      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e004      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001efc:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001efe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d134      	bne.n	8001f70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d003      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xac>
 8001f1c:	e005      	b.n	8001f2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e002      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fb03 f202 	mul.w	r2, r3, r2
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0e5b      	lsrs	r3, r3, #25
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f70:	69bb      	ldr	r3, [r7, #24]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08007b18 	.word	0x08007b18
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	007a1200 	.word	0x007a1200

08001f90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fac:	f7ff fff0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	08007b10 	.word	0x08007b10

08001fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fd8:	f7ff ffda 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	0adb      	lsrs	r3, r3, #11
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	4904      	ldr	r1, [pc, #16]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08007b10 	.word	0x08007b10

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f9ee 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f9de 	bl	80013f8 <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	; 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d041      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020e4:	d02a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020ea:	d824      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020f6:	d81e      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002100:	d010      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002102:	e018      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002104:	4b86      	ldr	r3, [pc, #536]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a85      	ldr	r2, [pc, #532]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002110:	e015      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fabb 	bl	8002694 <RCCEx_PLLSAI1_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002122:	e00c      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fba6 	bl	800287c <RCCEx_PLLSAI2_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	74fb      	strb	r3, [r7, #19]
      break;
 800213a:	e000      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800213c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002152:	4973      	ldr	r1, [pc, #460]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215a:	e001      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d041      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002170:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002174:	d02a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002176:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800217a:	d824      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800217c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002180:	d008      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002186:	d81e      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d010      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002192:	e018      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002194:	4b62      	ldr	r3, [pc, #392]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a61      	ldr	r2, [pc, #388]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a0:	e015      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fa73 	bl	8002694 <RCCEx_PLLSAI1_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b2:	e00c      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3320      	adds	r3, #32
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fb5e 	bl	800287c <RCCEx_PLLSAI2_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c4:	e003      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	74fb      	strb	r3, [r7, #19]
      break;
 80021ca:	e000      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d4:	4b52      	ldr	r3, [pc, #328]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021e2:	494f      	ldr	r1, [pc, #316]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021ea:	e001      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a0 	beq.w	800233e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002212:	2300      	movs	r3, #0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00d      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a40      	ldr	r2, [pc, #256]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
 8002224:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3a      	ldr	r2, [pc, #232]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002240:	f7fe fde8 	bl	8000e14 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002246:	e009      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fde4 	bl	8000e14 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d902      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	74fb      	strb	r3, [r7, #19]
        break;
 800225a:	e005      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ef      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d15c      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002278:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01f      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	d019      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ca:	f7fe fda3 	bl	8000e14 <HAL_GetTick>
 80022ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d0:	e00b      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fd9f 	bl	8000e14 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d902      	bls.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	74fb      	strb	r3, [r7, #19]
            break;
 80022e8:	e006      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ec      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022f8:	7cfb      	ldrb	r3, [r7, #19]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	4904      	ldr	r1, [pc, #16]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002316:	e009      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
 800231c:	e006      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232c:	7c7b      	ldrb	r3, [r7, #17]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002332:	4b9e      	ldr	r3, [pc, #632]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a9d      	ldr	r2, [pc, #628]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800234a:	4b98      	ldr	r3, [pc, #608]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002350:	f023 0203 	bic.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	4994      	ldr	r1, [pc, #592]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800236c:	4b8f      	ldr	r3, [pc, #572]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	f023 020c 	bic.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	498c      	ldr	r1, [pc, #560]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800238e:	4b87      	ldr	r3, [pc, #540]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4983      	ldr	r1, [pc, #524]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	497b      	ldr	r1, [pc, #492]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e0:	4972      	ldr	r1, [pc, #456]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f4:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	496a      	ldr	r1, [pc, #424]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002416:	4b65      	ldr	r3, [pc, #404]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	4961      	ldr	r1, [pc, #388]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002438:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	4959      	ldr	r1, [pc, #356]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800245a:	4b54      	ldr	r3, [pc, #336]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	4950      	ldr	r1, [pc, #320]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247c:	4b4b      	ldr	r3, [pc, #300]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	4948      	ldr	r1, [pc, #288]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249e:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	493f      	ldr	r1, [pc, #252]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d028      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	4937      	ldr	r1, [pc, #220]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024de:	d106      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e0:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a31      	ldr	r2, [pc, #196]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e011      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f6:	d10c      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f8c8 	bl	8002694 <RCCEx_PLLSAI1_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d028      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	491f      	ldr	r1, [pc, #124]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800253c:	d106      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002548:	60d3      	str	r3, [r2, #12]
 800254a:	e011      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002554:	d10c      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3304      	adds	r3, #4
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f000 f899 	bl	8002694 <RCCEx_PLLSAI1_Config>
 8002562:	4603      	mov	r3, r0
 8002564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02b      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259a:	d109      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a02      	ldr	r2, [pc, #8]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a6:	60d3      	str	r3, [r2, #12]
 80025a8:	e014      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	2101      	movs	r1, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f000 f867 	bl	8002694 <RCCEx_PLLSAI1_Config>
 80025c6:	4603      	mov	r3, r0
 80025c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02f      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	4928      	ldr	r1, [pc, #160]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025fe:	d10d      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f000 f844 	bl	8002694 <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d014      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3320      	adds	r3, #32
 800262a:	2102      	movs	r1, #2
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f925 	bl	800287c <RCCEx_PLLSAI2_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800265a:	490d      	ldr	r1, [pc, #52]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800267e:	4904      	ldr	r1, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002686:	7cbb      	ldrb	r3, [r7, #18]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a2:	4b75      	ldr	r3, [pc, #468]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026ae:	4b72      	ldr	r3, [pc, #456]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10d      	bne.n	80026da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
       ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026c6:	4b6c      	ldr	r3, [pc, #432]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
       ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d047      	beq.n	800276a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e044      	b.n	800276a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d018      	beq.n	800271a <RCCEx_PLLSAI1_Config+0x86>
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d825      	bhi.n	8002738 <RCCEx_PLLSAI1_Config+0xa4>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0x62>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d009      	beq.n	8002708 <RCCEx_PLLSAI1_Config+0x74>
 80026f4:	e020      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f6:	4b60      	ldr	r3, [pc, #384]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11d      	bne.n	800273e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e01a      	b.n	800273e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002708:	4b5b      	ldr	r3, [pc, #364]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e013      	b.n	8002742 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271a:	4b57      	ldr	r3, [pc, #348]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002726:	4b54      	ldr	r3, [pc, #336]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002736:	e006      	b.n	8002746 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e004      	b.n	8002748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002746:	bf00      	nop
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800274e:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	430b      	orrs	r3, r1
 8002764:	4944      	ldr	r1, [pc, #272]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d17d      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002770:	4b41      	ldr	r3, [pc, #260]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a40      	ldr	r2, [pc, #256]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002776:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fb4a 	bl	8000e14 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002782:	e009      	b.n	8002798 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002784:	f7fe fb46 	bl	8000e14 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	73fb      	strb	r3, [r7, #15]
        break;
 8002796:	e005      	b.n	80027a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002798:	4b37      	ldr	r3, [pc, #220]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ef      	bne.n	8002784 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d160      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b0:	4b31      	ldr	r3, [pc, #196]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	0211      	lsls	r1, r2, #8
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	0912      	lsrs	r2, r2, #4
 80027c8:	0452      	lsls	r2, r2, #17
 80027ca:	430a      	orrs	r2, r1
 80027cc:	492a      	ldr	r1, [pc, #168]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	610b      	str	r3, [r1, #16]
 80027d2:	e027      	b.n	8002824 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d112      	bne.n	8002800 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6892      	ldr	r2, [r2, #8]
 80027ea:	0211      	lsls	r1, r2, #8
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6912      	ldr	r2, [r2, #16]
 80027f0:	0852      	lsrs	r2, r2, #1
 80027f2:	3a01      	subs	r2, #1
 80027f4:	0552      	lsls	r2, r2, #21
 80027f6:	430a      	orrs	r2, r1
 80027f8:	491f      	ldr	r1, [pc, #124]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	610b      	str	r3, [r1, #16]
 80027fe:	e011      	b.n	8002824 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002808:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6892      	ldr	r2, [r2, #8]
 8002810:	0211      	lsls	r1, r2, #8
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6952      	ldr	r2, [r2, #20]
 8002816:	0852      	lsrs	r2, r2, #1
 8002818:	3a01      	subs	r2, #1
 800281a:	0652      	lsls	r2, r2, #25
 800281c:	430a      	orrs	r2, r1
 800281e:	4916      	ldr	r1, [pc, #88]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800282a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800282e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe faf0 	bl	8000e14 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002836:	e009      	b.n	800284c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002838:	f7fe faec 	bl	8000e14 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d902      	bls.n	800284c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	73fb      	strb	r3, [r7, #15]
          break;
 800284a:	e005      	b.n	8002858 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ef      	beq.n	8002838 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4904      	ldr	r1, [pc, #16]	; (8002878 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40021000 	.word	0x40021000

0800287c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288a:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
       ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028ae:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
       ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d047      	beq.n	8002952 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d018      	beq.n	8002902 <RCCEx_PLLSAI2_Config+0x86>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d825      	bhi.n	8002920 <RCCEx_PLLSAI2_Config+0xa4>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <RCCEx_PLLSAI2_Config+0x62>
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d009      	beq.n	80028f0 <RCCEx_PLLSAI2_Config+0x74>
 80028dc:	e020      	b.n	8002920 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028de:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11d      	bne.n	8002926 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e01a      	b.n	8002926 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f0:	4b50      	ldr	r3, [pc, #320]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e013      	b.n	800292a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002902:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291e:	e006      	b.n	800292e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e004      	b.n	8002930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800292e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4939      	ldr	r1, [pc, #228]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	4313      	orrs	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d167      	bne.n	8002a28 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002958:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a35      	ldr	r2, [pc, #212]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fa56 	bl	8000e14 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800296c:	f7fe fa52 	bl	8000e14 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
        break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d14a      	bne.n	8002a28 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002998:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0912      	lsrs	r2, r2, #4
 80029b0:	0452      	lsls	r2, r2, #17
 80029b2:	430a      	orrs	r2, r1
 80029b4:	491f      	ldr	r1, [pc, #124]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	614b      	str	r3, [r1, #20]
 80029ba:	e011      	b.n	80029e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6892      	ldr	r2, [r2, #8]
 80029cc:	0211      	lsls	r1, r2, #8
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6912      	ldr	r2, [r2, #16]
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	0652      	lsls	r2, r2, #25
 80029d8:	430a      	orrs	r2, r1
 80029da:	4916      	ldr	r1, [pc, #88]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ec:	f7fe fa12 	bl	8000e14 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f4:	f7fe fa0e 	bl	8000e14 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
          break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ef      	beq.n	80029f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e095      	b.n	8002b76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d108      	bne.n	8002a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a5a:	d009      	beq.n	8002a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
 8002a62:	e005      	b.n	8002a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d106      	bne.n	8002a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fe f818 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ab0:	d902      	bls.n	8002ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e002      	b.n	8002abe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ac6:	d007      	beq.n	8002ad8 <HAL_SPI_Init+0xa0>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad0:	d002      	beq.n	8002ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	ea42 0103 	orr.w	r1, r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0204 	and.w	r2, r3, #4
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b54:	ea42 0103 	orr.w	r1, r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b08a      	sub	sp, #40	; 0x28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_SPI_TransmitReceive+0x26>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e1fb      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x41e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bac:	f7fe f932 	bl	8000e14 <HAL_GetTick>
 8002bb0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bb8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bc8:	7efb      	ldrb	r3, [r7, #27]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d00e      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x6e>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd4:	d106      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x66>
 8002bde:	7efb      	ldrb	r3, [r7, #27]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d003      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
 8002be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bea:	e1cd      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x80>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x80>
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c04:	e1c0      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d003      	beq.n	8002c1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2205      	movs	r2, #5
 8002c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	887a      	ldrh	r2, [r7, #2]
 8002c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	887a      	ldrh	r2, [r7, #2]
 8002c46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c5c:	d802      	bhi.n	8002c64 <HAL_SPI_TransmitReceive+0xe6>
 8002c5e:	8a3b      	ldrh	r3, [r7, #16]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d908      	bls.n	8002c76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	e007      	b.n	8002c86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d007      	beq.n	8002ca4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cac:	d97c      	bls.n	8002da8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_SPI_TransmitReceive+0x13e>
 8002cb6:	8a7b      	ldrh	r3, [r7, #18]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d169      	bne.n	8002d90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	881a      	ldrh	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	1c9a      	adds	r2, r3, #2
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ce0:	e056      	b.n	8002d90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d11b      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x1aa>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x1aa>
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d113      	bne.n	8002d28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	1c9a      	adds	r2, r3, #2
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d11c      	bne.n	8002d70 <HAL_SPI_TransmitReceive+0x1f2>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d70:	f7fe f850 	bl	8000e14 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d807      	bhi.n	8002d90 <HAL_SPI_TransmitReceive+0x212>
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d003      	beq.n	8002d90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d8e:	e0fb      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1a3      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x164>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d19d      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x164>
 8002da6:	e0df      	b.n	8002f68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_SPI_TransmitReceive+0x23a>
 8002db0:	8a7b      	ldrh	r3, [r7, #18]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	f040 80cb 	bne.w	8002f4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d912      	bls.n	8002de8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	881a      	ldrh	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	1c9a      	adds	r2, r3, #2
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	3b02      	subs	r3, #2
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002de6:	e0b2      	b.n	8002f4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	7812      	ldrb	r2, [r2, #0]
 8002df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0e:	e09e      	b.n	8002f4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d134      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x30a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02f      	beq.n	8002e88 <HAL_SPI_TransmitReceive+0x30a>
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d12c      	bne.n	8002e88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d912      	bls.n	8002e5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b02      	subs	r3, #2
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e5c:	e012      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d148      	bne.n	8002f28 <HAL_SPI_TransmitReceive+0x3aa>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d042      	beq.n	8002f28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d923      	bls.n	8002ef6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	b292      	uxth	r2, r2
 8002eba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	1c9a      	adds	r2, r3, #2
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b02      	subs	r3, #2
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d81f      	bhi.n	8002f24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	e016      	b.n	8002f24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f103 020c 	add.w	r2, r3, #12
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f28:	f7fd ff74 	bl	8000e14 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d803      	bhi.n	8002f40 <HAL_SPI_TransmitReceive+0x3c2>
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d102      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x3c8>
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d103      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f4c:	e01c      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f47f af5b 	bne.w	8002e10 <HAL_SPI_TransmitReceive+0x292>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f47f af54 	bne.w	8002e10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f937 	bl	80031e0 <SPI_EndRxTxTransaction>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	661a      	str	r2, [r3, #96]	; 0x60
 8002f84:	e000      	b.n	8002f88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002f86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fb4:	f7fd ff2e 	bl	8000e14 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fc4:	f7fd ff26 	bl	8000e14 <HAL_GetTick>
 8002fc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	015b      	lsls	r3, r3, #5
 8002fd0:	0d1b      	lsrs	r3, r3, #20
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fda:	e054      	b.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe2:	d050      	beq.n	8003086 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fe4:	f7fd ff16 	bl	8000e14 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d902      	bls.n	8002ffa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d13d      	bne.n	8003076 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003012:	d111      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301c:	d004      	beq.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003026:	d107      	bne.n	8003038 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003040:	d10f      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e017      	b.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3b01      	subs	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d19b      	bne.n	8002fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000000 	.word	0x20000000

080030b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030c6:	f7fd fea5 	bl	8000e14 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030d6:	f7fd fe9d 	bl	8000e14 <HAL_GetTick>
 80030da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	00da      	lsls	r2, r3, #3
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	0d1b      	lsrs	r3, r3, #20
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030fc:	e060      	b.n	80031c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003104:	d107      	bne.n	8003116 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003114:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d050      	beq.n	80031c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800311e:	f7fd fe79 	bl	8000e14 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	429a      	cmp	r2, r3
 800312c:	d902      	bls.n	8003134 <SPI_WaitFifoStateUntilTimeout+0x80>
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d13d      	bne.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003142:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314c:	d111      	bne.n	8003172 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d004      	beq.n	8003162 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003160:	d107      	bne.n	8003172 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d10f      	bne.n	800319c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e010      	b.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	3b01      	subs	r3, #1
 80031be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d196      	bne.n	80030fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3728      	adds	r7, #40	; 0x28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f7ff ff5b 	bl	80030b4 <SPI_WaitFifoStateUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e027      	b.n	8003264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2200      	movs	r2, #0
 800321c:	2180      	movs	r1, #128	; 0x80
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f7ff fec0 	bl	8002fa4 <SPI_WaitFlagStateUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e014      	b.n	8003264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f7ff ff34 	bl	80030b4 <SPI_WaitFifoStateUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e000      	b.n	8003264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e040      	b.n	8003300 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fc58 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	; 0x24
 8003298:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0201 	bic.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8c0 	bl	8003430 <UART_SetConfig>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e022      	b.n	8003300 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fb6c 	bl	80039a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fbf3 	bl	8003ae4 <UART_CheckIdleState>
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331c:	2b20      	cmp	r3, #32
 800331e:	f040 8082 	bne.w	8003426 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_UART_Transmit+0x26>
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07a      	b.n	8003428 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_UART_Transmit+0x38>
 800333c:	2302      	movs	r3, #2
 800333e:	e073      	b.n	8003428 <HAL_UART_Transmit+0x120>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2221      	movs	r2, #33	; 0x21
 8003354:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003356:	f7fd fd5d 	bl	8000e14 <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	88fa      	ldrh	r2, [r7, #6]
 8003368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d108      	bne.n	8003388 <HAL_UART_Transmit+0x80>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d104      	bne.n	8003388 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e003      	b.n	8003390 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003398:	e02d      	b.n	80033f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	; 0x80
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fbe6 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e039      	b.n	8003428 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10b      	bne.n	80033d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033c6:	b292      	uxth	r2, r2
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3302      	adds	r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	e008      	b.n	80033e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b292      	uxth	r2, r2
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3301      	adds	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1cb      	bne.n	800339a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2200      	movs	r2, #0
 800340a:	2140      	movs	r1, #64	; 0x40
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fbb2 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e005      	b.n	8003428 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b08a      	sub	sp, #40	; 0x28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4313      	orrs	r3, r2
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4ba4      	ldr	r3, [pc, #656]	; (80036f0 <UART_SetConfig+0x2c0>)
 8003460:	4013      	ands	r3, r2
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a99      	ldr	r2, [pc, #612]	; (80036f4 <UART_SetConfig+0x2c4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4313      	orrs	r3, r2
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a90      	ldr	r2, [pc, #576]	; (80036f8 <UART_SetConfig+0x2c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d126      	bne.n	8003508 <UART_SetConfig+0xd8>
 80034ba:	4b90      	ldr	r3, [pc, #576]	; (80036fc <UART_SetConfig+0x2cc>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d81b      	bhi.n	8003500 <UART_SetConfig+0xd0>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <UART_SetConfig+0xa0>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f1 	.word	0x080034f1
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034f9 	.word	0x080034f9
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e6:	e116      	b.n	8003716 <UART_SetConfig+0x2e6>
 80034e8:	2302      	movs	r3, #2
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e112      	b.n	8003716 <UART_SetConfig+0x2e6>
 80034f0:	2304      	movs	r3, #4
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f6:	e10e      	b.n	8003716 <UART_SetConfig+0x2e6>
 80034f8:	2308      	movs	r3, #8
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e10a      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003500:	2310      	movs	r3, #16
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e106      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a7c      	ldr	r2, [pc, #496]	; (8003700 <UART_SetConfig+0x2d0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d138      	bne.n	8003584 <UART_SetConfig+0x154>
 8003512:	4b7a      	ldr	r3, [pc, #488]	; (80036fc <UART_SetConfig+0x2cc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d82d      	bhi.n	800357c <UART_SetConfig+0x14c>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0xf8>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	0800357d 	.word	0x0800357d
 8003530:	0800357d 	.word	0x0800357d
 8003534:	0800357d 	.word	0x0800357d
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800357d 	.word	0x0800357d
 8003540:	0800357d 	.word	0x0800357d
 8003544:	0800357d 	.word	0x0800357d
 8003548:	08003565 	.word	0x08003565
 800354c:	0800357d 	.word	0x0800357d
 8003550:	0800357d 	.word	0x0800357d
 8003554:	0800357d 	.word	0x0800357d
 8003558:	08003575 	.word	0x08003575
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003562:	e0d8      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003564:	2302      	movs	r3, #2
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e0d4      	b.n	8003716 <UART_SetConfig+0x2e6>
 800356c:	2304      	movs	r3, #4
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e0d0      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003574:	2308      	movs	r3, #8
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e0cc      	b.n	8003716 <UART_SetConfig+0x2e6>
 800357c:	2310      	movs	r3, #16
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e0c8      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a5e      	ldr	r2, [pc, #376]	; (8003704 <UART_SetConfig+0x2d4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d125      	bne.n	80035da <UART_SetConfig+0x1aa>
 800358e:	4b5b      	ldr	r3, [pc, #364]	; (80036fc <UART_SetConfig+0x2cc>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d016      	beq.n	80035ca <UART_SetConfig+0x19a>
 800359c:	2b30      	cmp	r3, #48	; 0x30
 800359e:	d818      	bhi.n	80035d2 <UART_SetConfig+0x1a2>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d00a      	beq.n	80035ba <UART_SetConfig+0x18a>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d814      	bhi.n	80035d2 <UART_SetConfig+0x1a2>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <UART_SetConfig+0x182>
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d008      	beq.n	80035c2 <UART_SetConfig+0x192>
 80035b0:	e00f      	b.n	80035d2 <UART_SetConfig+0x1a2>
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b8:	e0ad      	b.n	8003716 <UART_SetConfig+0x2e6>
 80035ba:	2302      	movs	r3, #2
 80035bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c0:	e0a9      	b.n	8003716 <UART_SetConfig+0x2e6>
 80035c2:	2304      	movs	r3, #4
 80035c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c8:	e0a5      	b.n	8003716 <UART_SetConfig+0x2e6>
 80035ca:	2308      	movs	r3, #8
 80035cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d0:	e0a1      	b.n	8003716 <UART_SetConfig+0x2e6>
 80035d2:	2310      	movs	r3, #16
 80035d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d8:	e09d      	b.n	8003716 <UART_SetConfig+0x2e6>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4a      	ldr	r2, [pc, #296]	; (8003708 <UART_SetConfig+0x2d8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d125      	bne.n	8003630 <UART_SetConfig+0x200>
 80035e4:	4b45      	ldr	r3, [pc, #276]	; (80036fc <UART_SetConfig+0x2cc>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ee:	2bc0      	cmp	r3, #192	; 0xc0
 80035f0:	d016      	beq.n	8003620 <UART_SetConfig+0x1f0>
 80035f2:	2bc0      	cmp	r3, #192	; 0xc0
 80035f4:	d818      	bhi.n	8003628 <UART_SetConfig+0x1f8>
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	d00a      	beq.n	8003610 <UART_SetConfig+0x1e0>
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d814      	bhi.n	8003628 <UART_SetConfig+0x1f8>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <UART_SetConfig+0x1d8>
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d008      	beq.n	8003618 <UART_SetConfig+0x1e8>
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x1f8>
 8003608:	2300      	movs	r3, #0
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360e:	e082      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003616:	e07e      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361e:	e07a      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e076      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e072      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a35      	ldr	r2, [pc, #212]	; (800370c <UART_SetConfig+0x2dc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d12a      	bne.n	8003690 <UART_SetConfig+0x260>
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <UART_SetConfig+0x2cc>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d01a      	beq.n	8003680 <UART_SetConfig+0x250>
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d81b      	bhi.n	8003688 <UART_SetConfig+0x258>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d00c      	beq.n	8003670 <UART_SetConfig+0x240>
 8003656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365a:	d815      	bhi.n	8003688 <UART_SetConfig+0x258>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <UART_SetConfig+0x238>
 8003660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003664:	d008      	beq.n	8003678 <UART_SetConfig+0x248>
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x258>
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e052      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003670:	2302      	movs	r3, #2
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e04e      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003678:	2304      	movs	r3, #4
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e04a      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003680:	2308      	movs	r3, #8
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e046      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003688:	2310      	movs	r3, #16
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e042      	b.n	8003716 <UART_SetConfig+0x2e6>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <UART_SetConfig+0x2c4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d13a      	bne.n	8003710 <UART_SetConfig+0x2e0>
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <UART_SetConfig+0x2cc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a8:	d01a      	beq.n	80036e0 <UART_SetConfig+0x2b0>
 80036aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ae:	d81b      	bhi.n	80036e8 <UART_SetConfig+0x2b8>
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b4:	d00c      	beq.n	80036d0 <UART_SetConfig+0x2a0>
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ba:	d815      	bhi.n	80036e8 <UART_SetConfig+0x2b8>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <UART_SetConfig+0x298>
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d008      	beq.n	80036d8 <UART_SetConfig+0x2a8>
 80036c6:	e00f      	b.n	80036e8 <UART_SetConfig+0x2b8>
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e022      	b.n	8003716 <UART_SetConfig+0x2e6>
 80036d0:	2302      	movs	r3, #2
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e01e      	b.n	8003716 <UART_SetConfig+0x2e6>
 80036d8:	2304      	movs	r3, #4
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e01a      	b.n	8003716 <UART_SetConfig+0x2e6>
 80036e0:	2308      	movs	r3, #8
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e016      	b.n	8003716 <UART_SetConfig+0x2e6>
 80036e8:	2310      	movs	r3, #16
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e012      	b.n	8003716 <UART_SetConfig+0x2e6>
 80036f0:	efff69f3 	.word	0xefff69f3
 80036f4:	40008000 	.word	0x40008000
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40021000 	.word	0x40021000
 8003700:	40004400 	.word	0x40004400
 8003704:	40004800 	.word	0x40004800
 8003708:	40004c00 	.word	0x40004c00
 800370c:	40005000 	.word	0x40005000
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a9f      	ldr	r2, [pc, #636]	; (8003998 <UART_SetConfig+0x568>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d17a      	bne.n	8003816 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003724:	2b08      	cmp	r3, #8
 8003726:	d824      	bhi.n	8003772 <UART_SetConfig+0x342>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <UART_SetConfig+0x300>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003755 	.word	0x08003755
 8003734:	08003773 	.word	0x08003773
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003773 	.word	0x08003773
 8003740:	08003763 	.word	0x08003763
 8003744:	08003773 	.word	0x08003773
 8003748:	08003773 	.word	0x08003773
 800374c:	08003773 	.word	0x08003773
 8003750:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe fc28 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8003758:	61f8      	str	r0, [r7, #28]
        break;
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b8f      	ldr	r3, [pc, #572]	; (800399c <UART_SetConfig+0x56c>)
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e00d      	b.n	800377e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe fb89 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8003766:	61f8      	str	r0, [r7, #28]
        break;
 8003768:	e009      	b.n	800377e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	61fb      	str	r3, [r7, #28]
        break;
 8003770:	e005      	b.n	800377e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800377c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80fb 	beq.w	800397c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	429a      	cmp	r2, r3
 8003794:	d305      	bcc.n	80037a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d903      	bls.n	80037aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037a8:	e0e8      	b.n	800397c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2200      	movs	r2, #0
 80037ae:	461c      	mov	r4, r3
 80037b0:	4615      	mov	r5, r2
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	022b      	lsls	r3, r5, #8
 80037bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037c0:	0222      	lsls	r2, r4, #8
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	6849      	ldr	r1, [r1, #4]
 80037c6:	0849      	lsrs	r1, r1, #1
 80037c8:	2000      	movs	r0, #0
 80037ca:	4688      	mov	r8, r1
 80037cc:	4681      	mov	r9, r0
 80037ce:	eb12 0a08 	adds.w	sl, r2, r8
 80037d2:	eb43 0b09 	adc.w	fp, r3, r9
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	603b      	str	r3, [r7, #0]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037e4:	4650      	mov	r0, sl
 80037e6:	4659      	mov	r1, fp
 80037e8:	f7fc fd4a 	bl	8000280 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037fa:	d308      	bcc.n	800380e <UART_SetConfig+0x3de>
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003802:	d204      	bcs.n	800380e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e0b6      	b.n	800397c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003814:	e0b2      	b.n	800397c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800381e:	d15e      	bne.n	80038de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003824:	2b08      	cmp	r3, #8
 8003826:	d828      	bhi.n	800387a <UART_SetConfig+0x44a>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0x400>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387b 	.word	0x0800387b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800387b 	.word	0x0800387b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7fe fba8 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8003858:	61f8      	str	r0, [r7, #28]
        break;
 800385a:	e014      	b.n	8003886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7fe fbba 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 8003860:	61f8      	str	r0, [r7, #28]
        break;
 8003862:	e010      	b.n	8003886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b4d      	ldr	r3, [pc, #308]	; (800399c <UART_SetConfig+0x56c>)
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fb05 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 800386e:	61f8      	str	r0, [r7, #28]
        break;
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	61fb      	str	r3, [r7, #28]
        break;
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d077      	beq.n	800397c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005a      	lsls	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	441a      	add	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d916      	bls.n	80038d6 <UART_SetConfig+0x4a6>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	d212      	bcs.n	80038d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f023 030f 	bic.w	r3, r3, #15
 80038b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	8afa      	ldrh	r2, [r7, #22]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	e052      	b.n	800397c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038dc:	e04e      	b.n	800397c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d827      	bhi.n	8003936 <UART_SetConfig+0x506>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0x4bc>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003919 	.word	0x08003919
 80038f4:	08003921 	.word	0x08003921
 80038f8:	08003937 	.word	0x08003937
 80038fc:	08003927 	.word	0x08003927
 8003900:	08003937 	.word	0x08003937
 8003904:	08003937 	.word	0x08003937
 8003908:	08003937 	.word	0x08003937
 800390c:	0800392f 	.word	0x0800392f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003910:	f7fe fb4a 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 8003914:	61f8      	str	r0, [r7, #28]
        break;
 8003916:	e014      	b.n	8003942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7fe fb5c 	bl	8001fd4 <HAL_RCC_GetPCLK2Freq>
 800391c:	61f8      	str	r0, [r7, #28]
        break;
 800391e:	e010      	b.n	8003942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <UART_SetConfig+0x56c>)
 8003922:	61fb      	str	r3, [r7, #28]
        break;
 8003924:	e00d      	b.n	8003942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003926:	f7fe faa7 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 800392a:	61f8      	str	r0, [r7, #28]
        break;
 800392c:	e009      	b.n	8003942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800392e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003932:	61fb      	str	r3, [r7, #28]
        break;
 8003934:	e005      	b.n	8003942 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003940:	bf00      	nop
    }

    if (pclk != 0U)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d019      	beq.n	800397c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	085a      	lsrs	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	441a      	add	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	d909      	bls.n	8003976 <UART_SetConfig+0x546>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d205      	bcs.n	8003976 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	e002      	b.n	800397c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800398c:	4618      	mov	r0, r3
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	40008000 	.word	0x40008000
 800399c:	00f42400 	.word	0x00f42400

080039a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9e:	d10a      	bne.n	8003ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af4:	f7fd f98e 	bl	8000e14 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d10e      	bne.n	8003b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f82d 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e023      	b.n	8003b6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d10e      	bne.n	8003b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f817 	bl	8003b76 <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e00d      	b.n	8003b6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b09c      	sub	sp, #112	; 0x70
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	603b      	str	r3, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	e0a5      	b.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	f000 80a1 	beq.w	8003cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fd f93f 	bl	8000e14 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d13e      	bne.n	8003c26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e6      	bne.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be4:	e853 3f00 	ldrex	r3, [r3]
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e5      	bne.n	8003bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e067      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d04f      	beq.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c42:	d147      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	e853 3f00 	ldrex	r3, [r3]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e6      	bne.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ca0:	623a      	str	r2, [r7, #32]
 8003ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e5      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e010      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f43f af4a 	beq.w	8003b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3770      	adds	r7, #112	; 0x70
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <MX_FATFS_Init+0x18>)
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <MX_FATFS_Init+0x1c>)
 8003d08:	f003 f926 	bl	8006f58 <FATFS_LinkDriver>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <MX_FATFS_Init+0x20>)
 8003d12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d14:	bf00      	nop
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000298 	.word	0x20000298
 8003d1c:	2000000c 	.word	0x2000000c
 8003d20:	20000294 	.word	0x20000294

08003d24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED THIS LINE
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f9d9 	bl	80040f8 <USER_SPI_initialize>
 8003d46:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADDED THIS LINE
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fab7 	bl	80042d0 <USER_SPI_status>
 8003d62:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	607a      	str	r2, [r7, #4]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADDED THIS LINE
 8003d7c:	7bf8      	ldrb	r0, [r7, #15]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	f000 faba 	bl	80042fc <USER_SPI_read>
 8003d88:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	4603      	mov	r3, r0
 8003da0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADDED THIS LINE
 8003da2:	7bf8      	ldrb	r0, [r7, #15]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	f000 fb0d 	bl	80043c8 <USER_SPI_write>
 8003dae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	603a      	str	r2, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADDED THIS LINE
 8003dc8:	79b9      	ldrb	r1, [r7, #6]
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fb76 	bl	80044c0 <USER_SPI_ioctl>
 8003dd4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003de8:	f7fd f814 	bl	8000e14 <HAL_GetTick>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <SPI_Timer_On+0x20>)
 8003df0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003df2:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <SPI_Timer_On+0x24>)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200002a0 	.word	0x200002a0
 8003e04:	200002a4 	.word	0x200002a4

08003e08 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003e0c:	f7fd f802 	bl	8000e14 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <SPI_Timer_Status+0x24>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	4b05      	ldr	r3, [pc, #20]	; (8003e30 <SPI_Timer_Status+0x28>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	bf34      	ite	cc
 8003e20:	2301      	movcc	r3, #1
 8003e22:	2300      	movcs	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200002a0 	.word	0x200002a0
 8003e30:	200002a4 	.word	0x200002a4

08003e34 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003e3e:	f107 020f 	add.w	r2, r7, #15
 8003e42:	1df9      	adds	r1, r7, #7
 8003e44:	2332      	movs	r3, #50	; 0x32
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4804      	ldr	r0, [pc, #16]	; (8003e5c <xchg_spi+0x28>)
 8003e4c:	f7fe fe97 	bl	8002b7e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200000a4 	.word	0x200000a4

08003e60 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e00a      	b.n	8003e86 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	18d4      	adds	r4, r2, r3
 8003e76:	20ff      	movs	r0, #255	; 0xff
 8003e78:	f7ff ffdc 	bl	8003e34 <xchg_spi>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3301      	adds	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3f0      	bcc.n	8003e70 <rcvr_spi_multi+0x10>
	}
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}

08003e98 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e009      	b.n	8003ebc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff ffbf 	bl	8003e34 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3f1      	bcc.n	8003ea8 <xmit_spi_multi+0x10>
	}
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003ed6:	f7fc ff9d 	bl	8000e14 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003ee0:	20ff      	movs	r0, #255	; 0xff
 8003ee2:	f7ff ffa7 	bl	8003e34 <xchg_spi>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2bff      	cmp	r3, #255	; 0xff
 8003eee:	d007      	beq.n	8003f00 <wait_ready+0x32>
 8003ef0:	f7fc ff90 	bl	8000e14 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d8ef      	bhi.n	8003ee0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2bff      	cmp	r3, #255	; 0xff
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2140      	movs	r1, #64	; 0x40
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <despiselect+0x18>)
 8003f1e:	f7fd fa39 	bl	8001394 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003f22:	20ff      	movs	r0, #255	; 0xff
 8003f24:	f7ff ff86 	bl	8003e34 <xchg_spi>

}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	48000400 	.word	0x48000400

08003f30 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003f34:	2200      	movs	r2, #0
 8003f36:	2140      	movs	r1, #64	; 0x40
 8003f38:	4809      	ldr	r0, [pc, #36]	; (8003f60 <spiselect+0x30>)
 8003f3a:	f7fd fa2b 	bl	8001394 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003f3e:	20ff      	movs	r0, #255	; 0xff
 8003f40:	f7ff ff78 	bl	8003e34 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003f44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f48:	f7ff ffc1 	bl	8003ece <wait_ready>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <spiselect+0x26>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e002      	b.n	8003f5c <spiselect+0x2c>

	despiselect();
 8003f56:	f7ff ffdd 	bl	8003f14 <despiselect>
	return 0;	/* Timeout */
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	48000400 	.word	0x48000400

08003f64 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003f6e:	20c8      	movs	r0, #200	; 0xc8
 8003f70:	f7ff ff36 	bl	8003de0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003f74:	20ff      	movs	r0, #255	; 0xff
 8003f76:	f7ff ff5d 	bl	8003e34 <xchg_spi>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2bff      	cmp	r3, #255	; 0xff
 8003f82:	d104      	bne.n	8003f8e <rcvr_datablock+0x2a>
 8003f84:	f7ff ff40 	bl	8003e08 <SPI_Timer_Status>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f2      	bne.n	8003f74 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2bfe      	cmp	r3, #254	; 0xfe
 8003f92:	d001      	beq.n	8003f98 <rcvr_datablock+0x34>
 8003f94:	2300      	movs	r3, #0
 8003f96:	e00a      	b.n	8003fae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff ff60 	bl	8003e60 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003fa0:	20ff      	movs	r0, #255	; 0xff
 8003fa2:	f7ff ff47 	bl	8003e34 <xchg_spi>
 8003fa6:	20ff      	movs	r0, #255	; 0xff
 8003fa8:	f7ff ff44 	bl	8003e34 <xchg_spi>

	return 1;						/* Function succeeded */
 8003fac:	2301      	movs	r3, #1
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003fc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fc6:	f7ff ff82 	bl	8003ece <wait_ready>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xmit_datablock+0x1e>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e01e      	b.n	8004012 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ff2c 	bl	8003e34 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	2bfd      	cmp	r3, #253	; 0xfd
 8003fe0:	d016      	beq.n	8004010 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ff56 	bl	8003e98 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003fec:	20ff      	movs	r0, #255	; 0xff
 8003fee:	f7ff ff21 	bl	8003e34 <xchg_spi>
 8003ff2:	20ff      	movs	r0, #255	; 0xff
 8003ff4:	f7ff ff1e 	bl	8003e34 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003ff8:	20ff      	movs	r0, #255	; 0xff
 8003ffa:	f7ff ff1b 	bl	8003e34 <xchg_spi>
 8003ffe:	4603      	mov	r3, r0
 8004000:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2b05      	cmp	r3, #5
 800400a:	d001      	beq.n	8004010 <xmit_datablock+0x5a>
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <xmit_datablock+0x5c>
	}
	return 1;
 8004010:	2301      	movs	r3, #1
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	6039      	str	r1, [r7, #0]
 8004024:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	da0e      	bge.n	800404c <send_cmd+0x32>
		cmd &= 0x7F;
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004034:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004036:	2100      	movs	r1, #0
 8004038:	2037      	movs	r0, #55	; 0x37
 800403a:	f7ff ffee 	bl	800401a <send_cmd>
 800403e:	4603      	mov	r3, r0
 8004040:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004042:	7bbb      	ldrb	r3, [r7, #14]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d901      	bls.n	800404c <send_cmd+0x32>
 8004048:	7bbb      	ldrb	r3, [r7, #14]
 800404a:	e051      	b.n	80040f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d008      	beq.n	8004064 <send_cmd+0x4a>
		despiselect();
 8004052:	f7ff ff5f 	bl	8003f14 <despiselect>
		if (!spiselect()) return 0xFF;
 8004056:	f7ff ff6b 	bl	8003f30 <spiselect>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <send_cmd+0x4a>
 8004060:	23ff      	movs	r3, #255	; 0xff
 8004062:	e045      	b.n	80040f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406a:	b2db      	uxtb	r3, r3
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fee1 	bl	8003e34 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fedb 	bl	8003e34 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	b2db      	uxtb	r3, r3
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fed5 	bl	8003e34 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fecf 	bl	8003e34 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff feca 	bl	8003e34 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <send_cmd+0x94>
 80040aa:	2395      	movs	r3, #149	; 0x95
 80040ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d101      	bne.n	80040b8 <send_cmd+0x9e>
 80040b4:	2387      	movs	r3, #135	; 0x87
 80040b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff feba 	bl	8003e34 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d102      	bne.n	80040cc <send_cmd+0xb2>
 80040c6:	20ff      	movs	r0, #255	; 0xff
 80040c8:	f7ff feb4 	bl	8003e34 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80040cc:	230a      	movs	r3, #10
 80040ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80040d0:	20ff      	movs	r0, #255	; 0xff
 80040d2:	f7ff feaf 	bl	8003e34 <xchg_spi>
 80040d6:	4603      	mov	r3, r0
 80040d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80040da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da05      	bge.n	80040ee <send_cmd+0xd4>
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80040ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <USER_SPI_initialize+0x14>
 8004108:	2301      	movs	r3, #1
 800410a:	e0d6      	b.n	80042ba <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800410c:	4b6d      	ldr	r3, [pc, #436]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <USER_SPI_initialize+0x2a>
 800411a:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e0cb      	b.n	80042ba <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004122:	4b69      	ldr	r3, [pc, #420]	; (80042c8 <USER_SPI_initialize+0x1d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800412c:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <USER_SPI_initialize+0x1d0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004134:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004136:	230a      	movs	r3, #10
 8004138:	73fb      	strb	r3, [r7, #15]
 800413a:	e005      	b.n	8004148 <USER_SPI_initialize+0x50>
 800413c:	20ff      	movs	r0, #255	; 0xff
 800413e:	f7ff fe79 	bl	8003e34 <xchg_spi>
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	3b01      	subs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f6      	bne.n	800413c <USER_SPI_initialize+0x44>

	ty = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004152:	2100      	movs	r1, #0
 8004154:	2000      	movs	r0, #0
 8004156:	f7ff ff60 	bl	800401a <send_cmd>
 800415a:	4603      	mov	r3, r0
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 808b 	bne.w	8004278 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004166:	f7ff fe3b 	bl	8003de0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800416a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800416e:	2008      	movs	r0, #8
 8004170:	f7ff ff53 	bl	800401a <send_cmd>
 8004174:	4603      	mov	r3, r0
 8004176:	2b01      	cmp	r3, #1
 8004178:	d151      	bne.n	800421e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800417a:	2300      	movs	r3, #0
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	e00d      	b.n	800419c <USER_SPI_initialize+0xa4>
 8004180:	7bfc      	ldrb	r4, [r7, #15]
 8004182:	20ff      	movs	r0, #255	; 0xff
 8004184:	f7ff fe56 	bl	8003e34 <xchg_spi>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	f104 0310 	add.w	r3, r4, #16
 8004190:	443b      	add	r3, r7
 8004192:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	3301      	adds	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d9ee      	bls.n	8004180 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80041a2:	7abb      	ldrb	r3, [r7, #10]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d167      	bne.n	8004278 <USER_SPI_initialize+0x180>
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	2baa      	cmp	r3, #170	; 0xaa
 80041ac:	d164      	bne.n	8004278 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80041ae:	bf00      	nop
 80041b0:	f7ff fe2a 	bl	8003e08 <SPI_Timer_Status>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <USER_SPI_initialize+0xd2>
 80041ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80041be:	20a9      	movs	r0, #169	; 0xa9
 80041c0:	f7ff ff2b 	bl	800401a <send_cmd>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f2      	bne.n	80041b0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80041ca:	f7ff fe1d 	bl	8003e08 <SPI_Timer_Status>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d051      	beq.n	8004278 <USER_SPI_initialize+0x180>
 80041d4:	2100      	movs	r1, #0
 80041d6:	203a      	movs	r0, #58	; 0x3a
 80041d8:	f7ff ff1f 	bl	800401a <send_cmd>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d14a      	bne.n	8004278 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80041e2:	2300      	movs	r3, #0
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e00d      	b.n	8004204 <USER_SPI_initialize+0x10c>
 80041e8:	7bfc      	ldrb	r4, [r7, #15]
 80041ea:	20ff      	movs	r0, #255	; 0xff
 80041ec:	f7ff fe22 	bl	8003e34 <xchg_spi>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	f104 0310 	add.w	r3, r4, #16
 80041f8:	443b      	add	r3, r7
 80041fa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	3301      	adds	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d9ee      	bls.n	80041e8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800420a:	7a3b      	ldrb	r3, [r7, #8]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <USER_SPI_initialize+0x120>
 8004214:	230c      	movs	r3, #12
 8004216:	e000      	b.n	800421a <USER_SPI_initialize+0x122>
 8004218:	2304      	movs	r3, #4
 800421a:	737b      	strb	r3, [r7, #13]
 800421c:	e02c      	b.n	8004278 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800421e:	2100      	movs	r1, #0
 8004220:	20a9      	movs	r0, #169	; 0xa9
 8004222:	f7ff fefa 	bl	800401a <send_cmd>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d804      	bhi.n	8004236 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800422c:	2302      	movs	r3, #2
 800422e:	737b      	strb	r3, [r7, #13]
 8004230:	23a9      	movs	r3, #169	; 0xa9
 8004232:	73bb      	strb	r3, [r7, #14]
 8004234:	e003      	b.n	800423e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004236:	2301      	movs	r3, #1
 8004238:	737b      	strb	r3, [r7, #13]
 800423a:	2301      	movs	r3, #1
 800423c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800423e:	bf00      	nop
 8004240:	f7ff fde2 	bl	8003e08 <SPI_Timer_Status>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <USER_SPI_initialize+0x162>
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fee3 	bl	800401a <send_cmd>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f2      	bne.n	8004240 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800425a:	f7ff fdd5 	bl	8003e08 <SPI_Timer_Status>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <USER_SPI_initialize+0x17c>
 8004264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004268:	2010      	movs	r0, #16
 800426a:	f7ff fed6 	bl	800401a <send_cmd>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <USER_SPI_initialize+0x180>
				ty = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <USER_SPI_initialize+0x1d4>)
 800427a:	7b7b      	ldrb	r3, [r7, #13]
 800427c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800427e:	f7ff fe49 	bl	8003f14 <despiselect>

	if (ty) {			/* OK */
 8004282:	7b7b      	ldrb	r3, [r7, #13]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <USER_SPI_initialize+0x1d0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <USER_SPI_initialize+0x1d0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0210 	orr.w	r2, r2, #16
 800429a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e002      	b.n	80042b4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80042b4:	4b03      	ldr	r3, [pc, #12]	; (80042c4 <USER_SPI_initialize+0x1cc>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000020 	.word	0x20000020
 80042c8:	200000a4 	.word	0x200000a4
 80042cc:	2000029c 	.word	0x2000029c

080042d0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <USER_SPI_status+0x14>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e002      	b.n	80042ea <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <USER_SPI_status+0x28>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000020 	.word	0x20000020

080042fc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d102      	bne.n	8004318 <USER_SPI_read+0x1c>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <USER_SPI_read+0x20>
 8004318:	2304      	movs	r3, #4
 800431a:	e04d      	b.n	80043b8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <USER_SPI_read+0xc4>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <USER_SPI_read+0x32>
 800432a:	2303      	movs	r3, #3
 800432c:	e044      	b.n	80043b8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800432e:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <USER_SPI_read+0xc8>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <USER_SPI_read+0x44>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	025b      	lsls	r3, r3, #9
 800433e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d111      	bne.n	800436a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	2011      	movs	r0, #17
 800434a:	f7ff fe66 	bl	800401a <send_cmd>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d129      	bne.n	80043a8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004358:	68b8      	ldr	r0, [r7, #8]
 800435a:	f7ff fe03 	bl	8003f64 <rcvr_datablock>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d021      	beq.n	80043a8 <USER_SPI_read+0xac>
			count = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	603b      	str	r3, [r7, #0]
 8004368:	e01e      	b.n	80043a8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	2012      	movs	r0, #18
 800436e:	f7ff fe54 	bl	800401a <send_cmd>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d117      	bne.n	80043a8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	f7ff fdf1 	bl	8003f64 <rcvr_datablock>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <USER_SPI_read+0xa2>
				buff += 512;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800438e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	3b01      	subs	r3, #1
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1ed      	bne.n	8004378 <USER_SPI_read+0x7c>
 800439c:	e000      	b.n	80043a0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800439e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80043a0:	2100      	movs	r1, #0
 80043a2:	200c      	movs	r0, #12
 80043a4:	f7ff fe39 	bl	800401a <send_cmd>
		}
	}
	despiselect();
 80043a8:	f7ff fdb4 	bl	8003f14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf14      	ite	ne
 80043b2:	2301      	movne	r3, #1
 80043b4:	2300      	moveq	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000020 	.word	0x20000020
 80043c4:	2000029c 	.word	0x2000029c

080043c8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <USER_SPI_write+0x1c>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <USER_SPI_write+0x20>
 80043e4:	2304      	movs	r3, #4
 80043e6:	e063      	b.n	80044b0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80043e8:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <USER_SPI_write+0xf0>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <USER_SPI_write+0x32>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e05a      	b.n	80044b0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80043fa:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <USER_SPI_write+0xf0>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <USER_SPI_write+0x44>
 8004408:	2302      	movs	r3, #2
 800440a:	e051      	b.n	80044b0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800440c:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <USER_SPI_write+0xf4>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <USER_SPI_write+0x56>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	025b      	lsls	r3, r3, #9
 800441c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d110      	bne.n	8004446 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	2018      	movs	r0, #24
 8004428:	f7ff fdf7 	bl	800401a <send_cmd>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d136      	bne.n	80044a0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004432:	21fe      	movs	r1, #254	; 0xfe
 8004434:	68b8      	ldr	r0, [r7, #8]
 8004436:	f7ff fdbe 	bl	8003fb6 <xmit_datablock>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d02f      	beq.n	80044a0 <USER_SPI_write+0xd8>
			count = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	e02c      	b.n	80044a0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <USER_SPI_write+0xf4>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f003 0306 	and.w	r3, r3, #6
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <USER_SPI_write+0x92>
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	2097      	movs	r0, #151	; 0x97
 8004456:	f7ff fde0 	bl	800401a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	2019      	movs	r0, #25
 800445e:	f7ff fddc 	bl	800401a <send_cmd>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11b      	bne.n	80044a0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004468:	21fc      	movs	r1, #252	; 0xfc
 800446a:	68b8      	ldr	r0, [r7, #8]
 800446c:	f7ff fda3 	bl	8003fb6 <xmit_datablock>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <USER_SPI_write+0xc4>
				buff += 512;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800447c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1ee      	bne.n	8004468 <USER_SPI_write+0xa0>
 800448a:	e000      	b.n	800448e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800448c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800448e:	21fd      	movs	r1, #253	; 0xfd
 8004490:	2000      	movs	r0, #0
 8004492:	f7ff fd90 	bl	8003fb6 <xmit_datablock>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <USER_SPI_write+0xd8>
 800449c:	2301      	movs	r3, #1
 800449e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80044a0:	f7ff fd38 	bl	8003f14 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000020 	.word	0x20000020
 80044bc:	2000029c 	.word	0x2000029c

080044c0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	603a      	str	r2, [r7, #0]
 80044ca:	71fb      	strb	r3, [r7, #7]
 80044cc:	460b      	mov	r3, r1
 80044ce:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <USER_SPI_ioctl+0x1a>
 80044d6:	2304      	movs	r3, #4
 80044d8:	e15a      	b.n	8004790 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80044da:	4baf      	ldr	r3, [pc, #700]	; (8004798 <USER_SPI_ioctl+0x2d8>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <USER_SPI_ioctl+0x2c>
 80044e8:	2303      	movs	r3, #3
 80044ea:	e151      	b.n	8004790 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80044f2:	79bb      	ldrb	r3, [r7, #6]
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	f200 8136 	bhi.w	8004766 <USER_SPI_ioctl+0x2a6>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <USER_SPI_ioctl+0x40>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	08004515 	.word	0x08004515
 8004504:	08004529 	.word	0x08004529
 8004508:	08004767 	.word	0x08004767
 800450c:	080045d5 	.word	0x080045d5
 8004510:	080046cb 	.word	0x080046cb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8004514:	f7ff fd0c 	bl	8003f30 <spiselect>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8127 	beq.w	800476e <USER_SPI_ioctl+0x2ae>
 8004520:	2300      	movs	r3, #0
 8004522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004526:	e122      	b.n	800476e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004528:	2100      	movs	r1, #0
 800452a:	2009      	movs	r0, #9
 800452c:	f7ff fd75 	bl	800401a <send_cmd>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 811d 	bne.w	8004772 <USER_SPI_ioctl+0x2b2>
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	2110      	movs	r1, #16
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fd10 	bl	8003f64 <rcvr_datablock>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8113 	beq.w	8004772 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800454c:	7b3b      	ldrb	r3, [r7, #12]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d111      	bne.n	800457a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8004556:	7d7b      	ldrb	r3, [r7, #21]
 8004558:	461a      	mov	r2, r3
 800455a:	7d3b      	ldrb	r3, [r7, #20]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	4413      	add	r3, r2
 8004560:	461a      	mov	r2, r3
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800456a:	4413      	add	r3, r2
 800456c:	3301      	adds	r3, #1
 800456e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	029a      	lsls	r2, r3, #10
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e028      	b.n	80045cc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800457a:	7c7b      	ldrb	r3, [r7, #17]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	b2da      	uxtb	r2, r3
 8004582:	7dbb      	ldrb	r3, [r7, #22]
 8004584:	09db      	lsrs	r3, r3, #7
 8004586:	b2db      	uxtb	r3, r3
 8004588:	4413      	add	r3, r2
 800458a:	b2da      	uxtb	r2, r3
 800458c:	7d7b      	ldrb	r3, [r7, #21]
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 0306 	and.w	r3, r3, #6
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4413      	add	r3, r2
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3302      	adds	r3, #2
 800459e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80045a2:	7d3b      	ldrb	r3, [r7, #20]
 80045a4:	099b      	lsrs	r3, r3, #6
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	7cbb      	ldrb	r3, [r7, #18]
 80045b2:	029b      	lsls	r3, r3, #10
 80045b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045b8:	4413      	add	r3, r2
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80045be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045c2:	3b09      	subs	r3, #9
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	409a      	lsls	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80045d2:	e0ce      	b.n	8004772 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80045d4:	4b71      	ldr	r3, [pc, #452]	; (800479c <USER_SPI_ioctl+0x2dc>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d031      	beq.n	8004644 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80045e0:	2100      	movs	r1, #0
 80045e2:	208d      	movs	r0, #141	; 0x8d
 80045e4:	f7ff fd19 	bl	800401a <send_cmd>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 80c3 	bne.w	8004776 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80045f0:	20ff      	movs	r0, #255	; 0xff
 80045f2:	f7ff fc1f 	bl	8003e34 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80045f6:	f107 030c 	add.w	r3, r7, #12
 80045fa:	2110      	movs	r1, #16
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff fcb1 	bl	8003f64 <rcvr_datablock>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80b6 	beq.w	8004776 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800460a:	2330      	movs	r3, #48	; 0x30
 800460c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004610:	e007      	b.n	8004622 <USER_SPI_ioctl+0x162>
 8004612:	20ff      	movs	r0, #255	; 0xff
 8004614:	f7ff fc0e 	bl	8003e34 <xchg_spi>
 8004618:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800461c:	3b01      	subs	r3, #1
 800461e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004622:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f3      	bne.n	8004612 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800462a:	7dbb      	ldrb	r3, [r7, #22]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	2310      	movs	r3, #16
 8004634:	fa03 f202 	lsl.w	r2, r3, r2
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8004642:	e098      	b.n	8004776 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8004644:	2100      	movs	r1, #0
 8004646:	2009      	movs	r0, #9
 8004648:	f7ff fce7 	bl	800401a <send_cmd>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8091 	bne.w	8004776 <USER_SPI_ioctl+0x2b6>
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	2110      	movs	r1, #16
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff fc82 	bl	8003f64 <rcvr_datablock>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8087 	beq.w	8004776 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8004668:	4b4c      	ldr	r3, [pc, #304]	; (800479c <USER_SPI_ioctl+0x2dc>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004674:	7dbb      	ldrb	r3, [r7, #22]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800467c:	7dfa      	ldrb	r2, [r7, #23]
 800467e:	09d2      	lsrs	r2, r2, #7
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4413      	add	r3, r2
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	7e7b      	ldrb	r3, [r7, #25]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	461a      	mov	r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e013      	b.n	80046c2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800469a:	7dbb      	ldrb	r3, [r7, #22]
 800469c:	109b      	asrs	r3, r3, #2
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	3301      	adds	r3, #1
 80046a6:	7dfa      	ldrb	r2, [r7, #23]
 80046a8:	00d2      	lsls	r2, r2, #3
 80046aa:	f002 0218 	and.w	r2, r2, #24
 80046ae:	7df9      	ldrb	r1, [r7, #23]
 80046b0:	0949      	lsrs	r1, r1, #5
 80046b2:	b2c9      	uxtb	r1, r1
 80046b4:	440a      	add	r2, r1
 80046b6:	3201      	adds	r2, #1
 80046b8:	fb02 f303 	mul.w	r3, r2, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80046c8:	e055      	b.n	8004776 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <USER_SPI_ioctl+0x2dc>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f003 0306 	and.w	r3, r3, #6
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d051      	beq.n	800477a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80046d6:	f107 020c 	add.w	r2, r7, #12
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	210b      	movs	r1, #11
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff feee 	bl	80044c0 <USER_SPI_ioctl>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d149      	bne.n	800477e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80046ea:	7b3b      	ldrb	r3, [r7, #12]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <USER_SPI_ioctl+0x23e>
 80046f4:	7dbb      	ldrb	r3, [r7, #22]
 80046f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d041      	beq.n	8004782 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <USER_SPI_ioctl+0x2dc>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471c:	025b      	lsls	r3, r3, #9
 800471e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	025b      	lsls	r3, r3, #9
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004728:	2020      	movs	r0, #32
 800472a:	f7ff fc76 	bl	800401a <send_cmd>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d128      	bne.n	8004786 <USER_SPI_ioctl+0x2c6>
 8004734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004736:	2021      	movs	r0, #33	; 0x21
 8004738:	f7ff fc6f 	bl	800401a <send_cmd>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d121      	bne.n	8004786 <USER_SPI_ioctl+0x2c6>
 8004742:	2100      	movs	r1, #0
 8004744:	2026      	movs	r0, #38	; 0x26
 8004746:	f7ff fc68 	bl	800401a <send_cmd>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11a      	bne.n	8004786 <USER_SPI_ioctl+0x2c6>
 8004750:	f247 5030 	movw	r0, #30000	; 0x7530
 8004754:	f7ff fbbb 	bl	8003ece <wait_ready>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d013      	beq.n	8004786 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800475e:	2300      	movs	r3, #0
 8004760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8004764:	e00f      	b.n	8004786 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8004766:	2304      	movs	r3, #4
 8004768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800476c:	e00c      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		break;
 800476e:	bf00      	nop
 8004770:	e00a      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		break;
 8004772:	bf00      	nop
 8004774:	e008      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		break;
 8004776:	bf00      	nop
 8004778:	e006      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800477a:	bf00      	nop
 800477c:	e004      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800477e:	bf00      	nop
 8004780:	e002      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004782:	bf00      	nop
 8004784:	e000      	b.n	8004788 <USER_SPI_ioctl+0x2c8>
		break;
 8004786:	bf00      	nop
	}

	despiselect();
 8004788:	f7ff fbc4 	bl	8003f14 <despiselect>

	return res;
 800478c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004790:	4618      	mov	r0, r3
 8004792:	3730      	adds	r7, #48	; 0x30
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000020 	.word	0x20000020
 800479c:	2000029c 	.word	0x2000029c

080047a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <disk_status+0x30>)
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	79fa      	ldrb	r2, [r7, #7]
 80047b8:	4905      	ldr	r1, [pc, #20]	; (80047d0 <disk_status+0x30>)
 80047ba:	440a      	add	r2, r1
 80047bc:	7a12      	ldrb	r2, [r2, #8]
 80047be:	4610      	mov	r0, r2
 80047c0:	4798      	blx	r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	200002d0 	.word	0x200002d0

080047d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <disk_initialize+0x48>)
 80047e6:	5cd3      	ldrb	r3, [r2, r3]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d111      	bne.n	8004810 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	4a0b      	ldr	r2, [pc, #44]	; (800481c <disk_initialize+0x48>)
 80047f0:	2101      	movs	r1, #1
 80047f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <disk_initialize+0x48>)
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	79fa      	ldrb	r2, [r7, #7]
 8004802:	4906      	ldr	r1, [pc, #24]	; (800481c <disk_initialize+0x48>)
 8004804:	440a      	add	r2, r1
 8004806:	7a12      	ldrb	r2, [r2, #8]
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
 800480c:	4603      	mov	r3, r0
 800480e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	200002d0 	.word	0x200002d0

08004820 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <disk_read+0x3c>)
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	689c      	ldr	r4, [r3, #8]
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	4a07      	ldr	r2, [pc, #28]	; (800485c <disk_read+0x3c>)
 8004840:	4413      	add	r3, r2
 8004842:	7a18      	ldrb	r0, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	47a0      	blx	r4
 800484c:	4603      	mov	r3, r0
 800484e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004850:	7dfb      	ldrb	r3, [r7, #23]
}
 8004852:	4618      	mov	r0, r3
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bd90      	pop	{r4, r7, pc}
 800485a:	bf00      	nop
 800485c:	200002d0 	.word	0x200002d0

08004860 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004860:	b590      	push	{r4, r7, lr}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <disk_write+0x3c>)
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68dc      	ldr	r4, [r3, #12]
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	4a07      	ldr	r2, [pc, #28]	; (800489c <disk_write+0x3c>)
 8004880:	4413      	add	r3, r2
 8004882:	7a18      	ldrb	r0, [r3, #8]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	47a0      	blx	r4
 800488c:	4603      	mov	r3, r0
 800488e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd90      	pop	{r4, r7, pc}
 800489a:	bf00      	nop
 800489c:	200002d0 	.word	0x200002d0

080048a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	603a      	str	r2, [r7, #0]
 80048aa:	71fb      	strb	r3, [r7, #7]
 80048ac:	460b      	mov	r3, r1
 80048ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <disk_ioctl+0x38>)
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	79fa      	ldrb	r2, [r7, #7]
 80048be:	4906      	ldr	r1, [pc, #24]	; (80048d8 <disk_ioctl+0x38>)
 80048c0:	440a      	add	r2, r1
 80048c2:	7a10      	ldrb	r0, [r2, #8]
 80048c4:	79b9      	ldrb	r1, [r7, #6]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4798      	blx	r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200002d0 	.word	0x200002d0

080048dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3301      	adds	r3, #1
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80048ec:	89fb      	ldrh	r3, [r7, #14]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	b21a      	sxth	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b21b      	sxth	r3, r3
 80048f8:	4313      	orrs	r3, r2
 80048fa:	b21b      	sxth	r3, r3
 80048fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048fe:	89fb      	ldrh	r3, [r7, #14]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3303      	adds	r3, #3
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	3202      	adds	r2, #2
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	3201      	adds	r2, #1
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
	return rv;
 8004944:	68fb      	ldr	r3, [r7, #12]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	460b      	mov	r3, r1
 800495c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	887a      	ldrh	r2, [r7, #2]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	887b      	ldrh	r3, [r7, #2]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	607a      	str	r2, [r7, #4]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00d      	beq.n	8004a16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	1c53      	adds	r3, r2, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1c59      	adds	r1, r3, #1
 8004a04:	6179      	str	r1, [r7, #20]
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f1      	bne.n	80049fa <mem_cpy+0x1a>
	}
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004a22:	b480      	push	{r7}
 8004a24:	b087      	sub	sp, #28
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	617a      	str	r2, [r7, #20]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f3      	bne.n	8004a32 <mem_set+0x10>
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	371c      	adds	r7, #28
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	61ba      	str	r2, [r7, #24]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	1acb      	subs	r3, r1, r3
 8004a84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	607b      	str	r3, [r7, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <mem_cmp+0x40>
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0eb      	beq.n	8004a70 <mem_cmp+0x18>

	return r;
 8004a98:	697b      	ldr	r3, [r7, #20]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004ab0:	e002      	b.n	8004ab8 <chk_chr+0x12>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	607b      	str	r3, [r7, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <chk_chr+0x26>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d1f2      	bne.n	8004ab2 <chk_chr+0xc>
	return *str;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	781b      	ldrb	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e029      	b.n	8004b44 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004af0:	4a27      	ldr	r2, [pc, #156]	; (8004b90 <chk_lock+0xb4>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01d      	beq.n	8004b3a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004afe:	4a24      	ldr	r2, [pc, #144]	; (8004b90 <chk_lock+0xb4>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	4413      	add	r3, r2
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d116      	bne.n	8004b3e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <chk_lock+0xb4>)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d10c      	bne.n	8004b3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <chk_lock+0xb4>)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d102      	bne.n	8004b3e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b38:	e007      	b.n	8004b4a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d9d2      	bls.n	8004af0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d109      	bne.n	8004b64 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <chk_lock+0x80>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d101      	bne.n	8004b60 <chk_lock+0x84>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e010      	b.n	8004b82 <chk_lock+0xa6>
 8004b60:	2312      	movs	r3, #18
 8004b62:	e00e      	b.n	8004b82 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <chk_lock+0xa0>
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <chk_lock+0xb4>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	4413      	add	r3, r2
 8004b72:	330c      	adds	r3, #12
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7a:	d101      	bne.n	8004b80 <chk_lock+0xa4>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	e000      	b.n	8004b82 <chk_lock+0xa6>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200002b0 	.word	0x200002b0

08004b94 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e002      	b.n	8004ba6 <enq_lock+0x12>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d806      	bhi.n	8004bba <enq_lock+0x26>
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <enq_lock+0x40>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	4413      	add	r3, r2
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	bf14      	ite	ne
 8004bc0:	2301      	movne	r3, #1
 8004bc2:	2300      	moveq	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	200002b0 	.word	0x200002b0

08004bd8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	e01f      	b.n	8004c28 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004be8:	4a41      	ldr	r2, [pc, #260]	; (8004cf0 <inc_lock+0x118>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4413      	add	r3, r2
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d113      	bne.n	8004c22 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004bfa:	4a3d      	ldr	r2, [pc, #244]	; (8004cf0 <inc_lock+0x118>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d109      	bne.n	8004c22 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004c0e:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <inc_lock+0x118>)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	4413      	add	r3, r2
 8004c16:	3308      	adds	r3, #8
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d006      	beq.n	8004c30 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d9dc      	bls.n	8004be8 <inc_lock+0x10>
 8004c2e:	e000      	b.n	8004c32 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004c30:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d132      	bne.n	8004c9e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e002      	b.n	8004c44 <inc_lock+0x6c>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3301      	adds	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d806      	bhi.n	8004c58 <inc_lock+0x80>
 8004c4a:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <inc_lock+0x118>)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	4413      	add	r3, r2
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f2      	bne.n	8004c3e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d101      	bne.n	8004c62 <inc_lock+0x8a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e040      	b.n	8004ce4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4922      	ldr	r1, [pc, #136]	; (8004cf0 <inc_lock+0x118>)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	440b      	add	r3, r1
 8004c6e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	491e      	ldr	r1, [pc, #120]	; (8004cf0 <inc_lock+0x118>)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695a      	ldr	r2, [r3, #20]
 8004c84:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <inc_lock+0x118>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	440b      	add	r3, r1
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <inc_lock+0x118>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	4413      	add	r3, r2
 8004c98:	330c      	adds	r3, #12
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <inc_lock+0xe0>
 8004ca4:	4a12      	ldr	r2, [pc, #72]	; (8004cf0 <inc_lock+0x118>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4413      	add	r3, r2
 8004cac:	330c      	adds	r3, #12
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <inc_lock+0xe0>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e015      	b.n	8004ce4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <inc_lock+0xf8>
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <inc_lock+0x118>)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	4413      	add	r3, r2
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	e001      	b.n	8004cd4 <inc_lock+0xfc>
 8004cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cd4:	4906      	ldr	r1, [pc, #24]	; (8004cf0 <inc_lock+0x118>)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	440b      	add	r3, r1
 8004cdc:	330c      	adds	r3, #12
 8004cde:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	200002b0 	.word	0x200002b0

08004cf4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d825      	bhi.n	8004d54 <dec_lock+0x60>
		n = Files[i].ctr;
 8004d08:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <dec_lock+0x74>)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	4413      	add	r3, r2
 8004d10:	330c      	adds	r3, #12
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004d16:	89fb      	ldrh	r3, [r7, #14]
 8004d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1c:	d101      	bne.n	8004d22 <dec_lock+0x2e>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004d22:	89fb      	ldrh	r3, [r7, #14]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <dec_lock+0x3a>
 8004d28:	89fb      	ldrh	r3, [r7, #14]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004d2e:	4a0e      	ldr	r2, [pc, #56]	; (8004d68 <dec_lock+0x74>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4413      	add	r3, r2
 8004d36:	330c      	adds	r3, #12
 8004d38:	89fa      	ldrh	r2, [r7, #14]
 8004d3a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d105      	bne.n	8004d4e <dec_lock+0x5a>
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <dec_lock+0x74>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	737b      	strb	r3, [r7, #13]
 8004d52:	e001      	b.n	8004d58 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d54:	2302      	movs	r3, #2
 8004d56:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d58:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	200002b0 	.word	0x200002b0

08004d6c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e010      	b.n	8004d9c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d7a:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <clear_lock+0x44>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	4413      	add	r3, r2
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d105      	bne.n	8004d96 <clear_lock+0x2a>
 8004d8a:	4a09      	ldr	r2, [pc, #36]	; (8004db0 <clear_lock+0x44>)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d9eb      	bls.n	8004d7a <clear_lock+0xe>
	}
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	200002b0 	.word	0x200002b0

08004db4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	78db      	ldrb	r3, [r3, #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d034      	beq.n	8004e32 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7858      	ldrb	r0, [r3, #1]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004dd8:	2301      	movs	r3, #1
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	f7ff fd40 	bl	8004860 <disk_write>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <sync_window+0x38>
			res = FR_DISK_ERR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
 8004dea:	e022      	b.n	8004e32 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d217      	bcs.n	8004e32 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	789b      	ldrb	r3, [r3, #2]
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	e010      	b.n	8004e2c <sync_window+0x78>
					wsect += fs->fsize;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7858      	ldrb	r0, [r3, #1]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e1e:	2301      	movs	r3, #1
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	f7ff fd1d 	bl	8004860 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d8eb      	bhi.n	8004e0a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d01b      	beq.n	8004e8c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ffad 	bl	8004db4 <sync_window>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d113      	bne.n	8004e8c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	7858      	ldrb	r0, [r3, #1]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e6e:	2301      	movs	r3, #1
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	f7ff fcd5 	bl	8004820 <disk_read>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff87 	bl	8004db4 <sync_window>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d158      	bne.n	8004f62 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d148      	bne.n	8004f4a <sync_fs+0xb2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d144      	bne.n	8004f4a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3330      	adds	r3, #48	; 0x30
 8004ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fda9 	bl	8004a22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3330      	adds	r3, #48	; 0x30
 8004ed4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ed8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fd38 	bl	8004952 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3330      	adds	r3, #48	; 0x30
 8004ee6:	4921      	ldr	r1, [pc, #132]	; (8004f6c <sync_fs+0xd4>)
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fd4d 	bl	8004988 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3330      	adds	r3, #48	; 0x30
 8004ef2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ef6:	491e      	ldr	r1, [pc, #120]	; (8004f70 <sync_fs+0xd8>)
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fd45 	bl	8004988 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3330      	adds	r3, #48	; 0x30
 8004f02:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f7ff fd3b 	bl	8004988 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3330      	adds	r3, #48	; 0x30
 8004f16:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f7ff fd31 	bl	8004988 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7858      	ldrb	r0, [r3, #1]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f7ff fc8e 	bl	8004860 <disk_write>
			fs->fsi_flag = 0;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fca4 	bl	80048a0 <disk_ioctl>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <sync_fs+0xca>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	41615252 	.word	0x41615252
 8004f70:	61417272 	.word	0x61417272

08004f74 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	3b02      	subs	r3, #2
 8004f82:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	3b02      	subs	r3, #2
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d301      	bcc.n	8004f94 <clust2sect+0x20>
 8004f90:	2300      	movs	r3, #0
 8004f92:	e008      	b.n	8004fa6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	895b      	ldrh	r3, [r3, #10]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	fb03 f202 	mul.w	r2, r3, r2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	4413      	add	r3, r2
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d904      	bls.n	8004fd2 <get_fat+0x20>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d302      	bcc.n	8004fd8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e08f      	b.n	80050f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fdc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d062      	beq.n	80050ac <get_fat+0xfa>
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	dc7c      	bgt.n	80050e4 <get_fat+0x132>
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d002      	beq.n	8004ff4 <get_fat+0x42>
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d042      	beq.n	8005078 <get_fat+0xc6>
 8004ff2:	e077      	b.n	80050e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6a1a      	ldr	r2, [r3, #32]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	4413      	add	r3, r2
 800500c:	4619      	mov	r1, r3
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f7ff ff14 	bl	8004e3c <move_window>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d167      	bne.n	80050ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	60fa      	str	r2, [r7, #12]
 8005020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800502c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6a1a      	ldr	r2, [r3, #32]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	4413      	add	r3, r2
 8005038:	4619      	mov	r1, r3
 800503a:	6938      	ldr	r0, [r7, #16]
 800503c:	f7ff fefe 	bl	8004e3c <move_window>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d153      	bne.n	80050ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <get_fat+0xbc>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	e002      	b.n	8005074 <get_fat+0xc2>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005074:	617b      	str	r3, [r7, #20]
			break;
 8005076:	e03f      	b.n	80050f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	4413      	add	r3, r2
 8005082:	4619      	mov	r1, r3
 8005084:	6938      	ldr	r0, [r7, #16]
 8005086:	f7ff fed9 	bl	8004e3c <move_window>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d130      	bne.n	80050f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800509e:	4413      	add	r3, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fc1b 	bl	80048dc <ld_word>
 80050a6:	4603      	mov	r3, r0
 80050a8:	617b      	str	r3, [r7, #20]
			break;
 80050aa:	e025      	b.n	80050f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	09db      	lsrs	r3, r3, #7
 80050b4:	4413      	add	r3, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6938      	ldr	r0, [r7, #16]
 80050ba:	f7ff febf 	bl	8004e3c <move_window>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d118      	bne.n	80050f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80050d2:	4413      	add	r3, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fc19 	bl	800490c <ld_dword>
 80050da:	4603      	mov	r3, r0
 80050dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050e0:	617b      	str	r3, [r7, #20]
			break;
 80050e2:	e009      	b.n	80050f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e006      	b.n	80050f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050f6:	bf00      	nop
		}
	}

	return val;
 80050f8:	697b      	ldr	r3, [r7, #20]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005102:	b590      	push	{r4, r7, lr}
 8005104:	b089      	sub	sp, #36	; 0x24
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b01      	cmp	r3, #1
 8005116:	f240 80d2 	bls.w	80052be <put_fat+0x1bc>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	f080 80cc 	bcs.w	80052be <put_fat+0x1bc>
		switch (fs->fs_type) {
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b03      	cmp	r3, #3
 800512c:	f000 8096 	beq.w	800525c <put_fat+0x15a>
 8005130:	2b03      	cmp	r3, #3
 8005132:	f300 80cd 	bgt.w	80052d0 <put_fat+0x1ce>
 8005136:	2b01      	cmp	r3, #1
 8005138:	d002      	beq.n	8005140 <put_fat+0x3e>
 800513a:	2b02      	cmp	r3, #2
 800513c:	d06e      	beq.n	800521c <put_fat+0x11a>
 800513e:	e0c7      	b.n	80052d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4413      	add	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	4413      	add	r3, r2
 8005158:	4619      	mov	r1, r3
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fe6e 	bl	8004e3c <move_window>
 8005160:	4603      	mov	r3, r0
 8005162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005164:	7ffb      	ldrb	r3, [r7, #31]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 80ab 	bne.w	80052c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	61b9      	str	r1, [r7, #24]
 8005178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800517c:	4413      	add	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <put_fat+0xa4>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b25b      	sxtb	r3, r3
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	b25a      	sxtb	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	b25b      	sxtb	r3, r3
 800519e:	4313      	orrs	r3, r2
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	e001      	b.n	80051aa <put_fat+0xa8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	0a5b      	lsrs	r3, r3, #9
 80051bc:	4413      	add	r3, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fe3b 	bl	8004e3c <move_window>
 80051c6:	4603      	mov	r3, r0
 80051c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d17a      	bne.n	80052c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <put_fat+0xf0>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e00e      	b.n	8005210 <put_fat+0x10e>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	f023 030f 	bic.w	r3, r3, #15
 80051fc:	b25a      	sxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	b25b      	sxtb	r3, r3
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	b25b      	sxtb	r3, r3
 800520a:	4313      	orrs	r3, r2
 800520c:	b25b      	sxtb	r3, r3
 800520e:	b2db      	uxtb	r3, r3
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	70da      	strb	r2, [r3, #3]
			break;
 800521a:	e059      	b.n	80052d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	4413      	add	r3, r2
 8005226:	4619      	mov	r1, r3
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff fe07 	bl	8004e3c <move_window>
 800522e:	4603      	mov	r3, r0
 8005230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005232:	7ffb      	ldrb	r3, [r7, #31]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d148      	bne.n	80052ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005246:	4413      	add	r3, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	b292      	uxth	r2, r2
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fb7f 	bl	8004952 <st_word>
			fs->wflag = 1;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	70da      	strb	r2, [r3, #3]
			break;
 800525a:	e039      	b.n	80052d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	4413      	add	r3, r2
 8005266:	4619      	mov	r1, r3
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff fde7 	bl	8004e3c <move_window>
 800526e:	4603      	mov	r3, r0
 8005270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005272:	7ffb      	ldrb	r3, [r7, #31]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d12a      	bne.n	80052ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800528c:	4413      	add	r3, r2
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fb3c 	bl	800490c <ld_dword>
 8005294:	4603      	mov	r3, r0
 8005296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800529a:	4323      	orrs	r3, r4
 800529c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80052ac:	4413      	add	r3, r2
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fb69 	bl	8004988 <st_dword>
			fs->wflag = 1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2201      	movs	r2, #1
 80052ba:	70da      	strb	r2, [r3, #3]
			break;
 80052bc:	e008      	b.n	80052d0 <put_fat+0x1ce>
		}
	}
 80052be:	bf00      	nop
 80052c0:	e006      	b.n	80052d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80052c2:	bf00      	nop
 80052c4:	e004      	b.n	80052d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80052ce:	bf00      	nop
	return res;
 80052d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}

080052da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d904      	bls.n	8005300 <remove_chain+0x26>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d301      	bcc.n	8005304 <remove_chain+0x2a>
 8005300:	2302      	movs	r3, #2
 8005302:	e04b      	b.n	800539c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00c      	beq.n	8005324 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800530a:	f04f 32ff 	mov.w	r2, #4294967295
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	69b8      	ldr	r0, [r7, #24]
 8005312:	f7ff fef6 	bl	8005102 <put_fat>
 8005316:	4603      	mov	r3, r0
 8005318:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <remove_chain+0x4a>
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	e03b      	b.n	800539c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff fe43 	bl	8004fb2 <get_fat>
 800532c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d031      	beq.n	8005398 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <remove_chain+0x64>
 800533a:	2302      	movs	r3, #2
 800533c:	e02e      	b.n	800539c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d101      	bne.n	800534a <remove_chain+0x70>
 8005346:	2301      	movs	r3, #1
 8005348:	e028      	b.n	800539c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800534a:	2200      	movs	r2, #0
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	69b8      	ldr	r0, [r7, #24]
 8005350:	f7ff fed7 	bl	8005102 <put_fat>
 8005354:	4603      	mov	r3, r0
 8005356:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <remove_chain+0x88>
 800535e:	7ffb      	ldrb	r3, [r7, #31]
 8005360:	e01c      	b.n	800539c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	3b02      	subs	r3, #2
 800536c:	429a      	cmp	r2, r3
 800536e:	d20b      	bcs.n	8005388 <remove_chain+0xae>
			fs->free_clst++;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	f043 0301 	orr.w	r3, r3, #1
 8005382:	b2da      	uxtb	r2, r3
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	d3c6      	bcc.n	8005324 <remove_chain+0x4a>
 8005396:	e000      	b.n	800539a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005398:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <create_chain+0x2c>
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d31b      	bcc.n	8005408 <create_chain+0x64>
 80053d0:	2301      	movs	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e018      	b.n	8005408 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fdea 	bl	8004fb2 <get_fat>
 80053de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d801      	bhi.n	80053ea <create_chain+0x46>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e070      	b.n	80054cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d101      	bne.n	80053f6 <create_chain+0x52>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	e06a      	b.n	80054cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d201      	bcs.n	8005404 <create_chain+0x60>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	e063      	b.n	80054cc <create_chain+0x128>
		scl = clst;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	429a      	cmp	r2, r3
 800541a:	d307      	bcc.n	800542c <create_chain+0x88>
				ncl = 2;
 800541c:	2302      	movs	r3, #2
 800541e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d901      	bls.n	800542c <create_chain+0x88>
 8005428:	2300      	movs	r3, #0
 800542a:	e04f      	b.n	80054cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fdbf 	bl	8004fb2 <get_fat>
 8005434:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00e      	beq.n	800545a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d003      	beq.n	800544a <create_chain+0xa6>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d101      	bne.n	800544e <create_chain+0xaa>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e03e      	b.n	80054cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	429a      	cmp	r2, r3
 8005454:	d1da      	bne.n	800540c <create_chain+0x68>
 8005456:	2300      	movs	r3, #0
 8005458:	e038      	b.n	80054cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800545a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800545c:	f04f 32ff 	mov.w	r2, #4294967295
 8005460:	69f9      	ldr	r1, [r7, #28]
 8005462:	6938      	ldr	r0, [r7, #16]
 8005464:	f7ff fe4d 	bl	8005102 <put_fat>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <create_chain+0xe2>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	6938      	ldr	r0, [r7, #16]
 800547e:	f7ff fe40 	bl	8005102 <put_fat>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d116      	bne.n	80054ba <create_chain+0x116>
		fs->last_clst = ncl;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	3b02      	subs	r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d804      	bhi.n	80054aa <create_chain+0x106>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	1e5a      	subs	r2, r3, #1
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	791b      	ldrb	r3, [r3, #4]
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	711a      	strb	r2, [r3, #4]
 80054b8:	e007      	b.n	80054ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d102      	bne.n	80054c6 <create_chain+0x122>
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	e000      	b.n	80054c8 <create_chain+0x124>
 80054c6:	2301      	movs	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80054ca:	69fb      	ldr	r3, [r7, #28]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	3304      	adds	r3, #4
 80054ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	0a5b      	lsrs	r3, r3, #9
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	8952      	ldrh	r2, [r2, #10]
 80054f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1d1a      	adds	r2, r3, #4
 80054fe:	613a      	str	r2, [r7, #16]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <clmt_clust+0x3a>
 800550a:	2300      	movs	r3, #0
 800550c:	e010      	b.n	8005530 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	d307      	bcc.n	8005526 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3304      	adds	r3, #4
 8005522:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005524:	e7e9      	b.n	80054fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005526:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	4413      	add	r3, r2
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005552:	d204      	bcs.n	800555e <dir_sdi+0x22>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <dir_sdi+0x26>
		return FR_INT_ERR;
 800555e:	2302      	movs	r3, #2
 8005560:	e063      	b.n	800562a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <dir_sdi+0x46>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d902      	bls.n	8005582 <dir_sdi+0x46>
		clst = fs->dirbase;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10c      	bne.n	80055a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	8912      	ldrh	r2, [r2, #8]
 8005590:	4293      	cmp	r3, r2
 8005592:	d301      	bcc.n	8005598 <dir_sdi+0x5c>
 8005594:	2302      	movs	r3, #2
 8005596:	e048      	b.n	800562a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	61da      	str	r2, [r3, #28]
 80055a0:	e029      	b.n	80055f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	895b      	ldrh	r3, [r3, #10]
 80055a6:	025b      	lsls	r3, r3, #9
 80055a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80055aa:	e019      	b.n	80055e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fcfe 	bl	8004fb2 <get_fat>
 80055b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d101      	bne.n	80055c4 <dir_sdi+0x88>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e032      	b.n	800562a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d904      	bls.n	80055d4 <dir_sdi+0x98>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d301      	bcc.n	80055d8 <dir_sdi+0x9c>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e028      	b.n	800562a <dir_sdi+0xee>
			ofs -= csz;
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d2e1      	bcs.n	80055ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80055e8:	6979      	ldr	r1, [r7, #20]
 80055ea:	6938      	ldr	r0, [r7, #16]
 80055ec:	f7ff fcc2 	bl	8004f74 <clust2sect>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <dir_sdi+0xcc>
 8005604:	2302      	movs	r3, #2
 8005606:	e010      	b.n	800562a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	0a5b      	lsrs	r3, r3, #9
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005622:	441a      	add	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	3320      	adds	r3, #32
 8005648:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <dir_next+0x28>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005658:	d301      	bcc.n	800565e <dir_next+0x2c>
 800565a:	2304      	movs	r3, #4
 800565c:	e0aa      	b.n	80057b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 8098 	bne.w	800579a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10b      	bne.n	8005694 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	8912      	ldrh	r2, [r2, #8]
 8005684:	4293      	cmp	r3, r2
 8005686:	f0c0 8088 	bcc.w	800579a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	61da      	str	r2, [r3, #28]
 8005690:	2304      	movs	r3, #4
 8005692:	e08f      	b.n	80057b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	0a5b      	lsrs	r3, r3, #9
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	8952      	ldrh	r2, [r2, #10]
 800569c:	3a01      	subs	r2, #1
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d17a      	bne.n	800579a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f7ff fc80 	bl	8004fb2 <get_fat>
 80056b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d801      	bhi.n	80056be <dir_next+0x8c>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e07a      	b.n	80057b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d101      	bne.n	80056ca <dir_next+0x98>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e074      	b.n	80057b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d358      	bcc.n	8005786 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	61da      	str	r2, [r3, #28]
 80056e0:	2304      	movs	r3, #4
 80056e2:	e067      	b.n	80057b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7ff fe59 	bl	80053a4 <create_chain>
 80056f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <dir_next+0xcc>
 80056fa:	2307      	movs	r3, #7
 80056fc:	e05a      	b.n	80057b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <dir_next+0xd6>
 8005704:	2302      	movs	r3, #2
 8005706:	e055      	b.n	80057b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d101      	bne.n	8005714 <dir_next+0xe2>
 8005710:	2301      	movs	r3, #1
 8005712:	e04f      	b.n	80057b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fb4d 	bl	8004db4 <sync_window>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <dir_next+0xf2>
 8005720:	2301      	movs	r3, #1
 8005722:	e047      	b.n	80057b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3330      	adds	r3, #48	; 0x30
 8005728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff f977 	bl	8004a22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005734:	2300      	movs	r3, #0
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	6979      	ldr	r1, [r7, #20]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fc1a 	bl	8004f74 <clust2sect>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	62da      	str	r2, [r3, #44]	; 0x2c
 8005746:	e012      	b.n	800576e <dir_next+0x13c>
						fs->wflag = 1;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fb30 	bl	8004db4 <sync_window>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <dir_next+0x12c>
 800575a:	2301      	movs	r3, #1
 800575c:	e02a      	b.n	80057b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3301      	adds	r3, #1
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	895b      	ldrh	r3, [r3, #10]
 8005772:	461a      	mov	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4293      	cmp	r3, r2
 8005778:	d3e6      	bcc.n	8005748 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fbf0 	bl	8004f74 <clust2sect>
 8005794:	4602      	mov	r2, r0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ac:	441a      	add	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff feb4 	bl	800553c <dir_sdi>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d12b      	bne.n	8005836 <dir_alloc+0x7a>
		n = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	4619      	mov	r1, r3
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fb27 	bl	8004e3c <move_window>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11d      	bne.n	8005834 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2be5      	cmp	r3, #229	; 0xe5
 8005800:	d004      	beq.n	800580c <dir_alloc+0x50>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d107      	bne.n	800581c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	3301      	adds	r3, #1
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d102      	bne.n	8005820 <dir_alloc+0x64>
 800581a:	e00c      	b.n	8005836 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005820:	2101      	movs	r1, #1
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ff05 	bl	8005632 <dir_next>
 8005828:	4603      	mov	r3, r0
 800582a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0d7      	beq.n	80057e2 <dir_alloc+0x26>
 8005832:	e000      	b.n	8005836 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005834:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d101      	bne.n	8005840 <dir_alloc+0x84>
 800583c:	2307      	movs	r3, #7
 800583e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	331a      	adds	r3, #26
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff f83f 	bl	80048dc <ld_word>
 800585e:	4603      	mov	r3, r0
 8005860:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d109      	bne.n	800587e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	3314      	adds	r3, #20
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff f834 	bl	80048dc <ld_word>
 8005874:	4603      	mov	r3, r0
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800587e:	68fb      	ldr	r3, [r7, #12]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	331a      	adds	r3, #26
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	b292      	uxth	r2, r2
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff f857 	bl	8004952 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d109      	bne.n	80058c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f103 0214 	add.w	r2, r3, #20
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7ff f849 	bl	8004952 <st_word>
	}
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80058d6:	2100      	movs	r1, #0
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fe2f 	bl	800553c <dir_sdi>
 80058de:	4603      	mov	r3, r0
 80058e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <dir_find+0x24>
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	e03e      	b.n	800596a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4619      	mov	r1, r3
 80058f2:	6938      	ldr	r0, [r7, #16]
 80058f4:	f7ff faa2 	bl	8004e3c <move_window>
 80058f8:	4603      	mov	r3, r0
 80058fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d12f      	bne.n	8005962 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d102      	bne.n	8005916 <dir_find+0x4e>
 8005910:	2304      	movs	r3, #4
 8005912:	75fb      	strb	r3, [r7, #23]
 8005914:	e028      	b.n	8005968 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	330b      	adds	r3, #11
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005922:	b2da      	uxtb	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	330b      	adds	r3, #11
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <dir_find+0x86>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a18      	ldr	r0, [r3, #32]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	220b      	movs	r2, #11
 8005942:	4619      	mov	r1, r3
 8005944:	f7ff f888 	bl	8004a58 <mem_cmp>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800594e:	2100      	movs	r1, #0
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fe6e 	bl	8005632 <dir_next>
 8005956:	4603      	mov	r3, r0
 8005958:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0c5      	beq.n	80058ec <dir_find+0x24>
 8005960:	e002      	b.n	8005968 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005962:	bf00      	nop
 8005964:	e000      	b.n	8005968 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005966:	bf00      	nop

	return res;
 8005968:	7dfb      	ldrb	r3, [r7, #23]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005980:	2101      	movs	r1, #1
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff1a 	bl	80057bc <dir_alloc>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11c      	bne.n	80059cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	4619      	mov	r1, r3
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	f7ff fa4f 	bl	8004e3c <move_window>
 800599e:	4603      	mov	r3, r0
 80059a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d111      	bne.n	80059cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	2220      	movs	r2, #32
 80059ae:	2100      	movs	r1, #0
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff f836 	bl	8004a22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a18      	ldr	r0, [r3, #32]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3324      	adds	r3, #36	; 0x24
 80059be:	220b      	movs	r2, #11
 80059c0:	4619      	mov	r1, r3
 80059c2:	f7ff f80d 	bl	80049e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2201      	movs	r2, #1
 80059ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80059ee:	220b      	movs	r2, #11
 80059f0:	2120      	movs	r1, #32
 80059f2:	68b8      	ldr	r0, [r7, #8]
 80059f4:	f7ff f815 	bl	8004a22 <mem_set>
	si = i = 0; ni = 8;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	2308      	movs	r3, #8
 8005a02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a12:	7efb      	ldrb	r3, [r7, #27]
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	d94e      	bls.n	8005ab6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005a18:	7efb      	ldrb	r3, [r7, #27]
 8005a1a:	2b2f      	cmp	r3, #47	; 0x2f
 8005a1c:	d006      	beq.n	8005a2c <create_name+0x54>
 8005a1e:	7efb      	ldrb	r3, [r7, #27]
 8005a20:	2b5c      	cmp	r3, #92	; 0x5c
 8005a22:	d110      	bne.n	8005a46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005a24:	e002      	b.n	8005a2c <create_name+0x54>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b2f      	cmp	r3, #47	; 0x2f
 8005a36:	d0f6      	beq.n	8005a26 <create_name+0x4e>
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b5c      	cmp	r3, #92	; 0x5c
 8005a42:	d0f0      	beq.n	8005a26 <create_name+0x4e>
			break;
 8005a44:	e038      	b.n	8005ab8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005a46:	7efb      	ldrb	r3, [r7, #27]
 8005a48:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4a:	d003      	beq.n	8005a54 <create_name+0x7c>
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d30c      	bcc.n	8005a6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b0b      	cmp	r3, #11
 8005a58:	d002      	beq.n	8005a60 <create_name+0x88>
 8005a5a:	7efb      	ldrb	r3, [r7, #27]
 8005a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a5e:	d001      	beq.n	8005a64 <create_name+0x8c>
 8005a60:	2306      	movs	r3, #6
 8005a62:	e044      	b.n	8005aee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005a64:	2308      	movs	r3, #8
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	230b      	movs	r3, #11
 8005a6a:	617b      	str	r3, [r7, #20]
			continue;
 8005a6c:	e022      	b.n	8005ab4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005a6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da04      	bge.n	8005a80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005a76:	7efb      	ldrb	r3, [r7, #27]
 8005a78:	3b80      	subs	r3, #128	; 0x80
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <create_name+0x120>)
 8005a7c:	5cd3      	ldrb	r3, [r2, r3]
 8005a7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005a80:	7efb      	ldrb	r3, [r7, #27]
 8005a82:	4619      	mov	r1, r3
 8005a84:	481d      	ldr	r0, [pc, #116]	; (8005afc <create_name+0x124>)
 8005a86:	f7ff f80e 	bl	8004aa6 <chk_chr>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <create_name+0xbc>
 8005a90:	2306      	movs	r3, #6
 8005a92:	e02c      	b.n	8005aee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005a94:	7efb      	ldrb	r3, [r7, #27]
 8005a96:	2b60      	cmp	r3, #96	; 0x60
 8005a98:	d905      	bls.n	8005aa6 <create_name+0xce>
 8005a9a:	7efb      	ldrb	r3, [r7, #27]
 8005a9c:	2b7a      	cmp	r3, #122	; 0x7a
 8005a9e:	d802      	bhi.n	8005aa6 <create_name+0xce>
 8005aa0:	7efb      	ldrb	r3, [r7, #27]
 8005aa2:	3b20      	subs	r3, #32
 8005aa4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	613a      	str	r2, [r7, #16]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	4413      	add	r3, r2
 8005ab0:	7efa      	ldrb	r2, [r7, #27]
 8005ab2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005ab4:	e7a6      	b.n	8005a04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ab6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	441a      	add	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <create_name+0xf4>
 8005ac8:	2306      	movs	r3, #6
 8005aca:	e010      	b.n	8005aee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2be5      	cmp	r3, #229	; 0xe5
 8005ad2:	d102      	bne.n	8005ada <create_name+0x102>
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2205      	movs	r2, #5
 8005ad8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005ada:	7efb      	ldrb	r3, [r7, #27]
 8005adc:	2b20      	cmp	r3, #32
 8005ade:	d801      	bhi.n	8005ae4 <create_name+0x10c>
 8005ae0:	2204      	movs	r2, #4
 8005ae2:	e000      	b.n	8005ae6 <create_name+0x10e>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	330b      	adds	r3, #11
 8005aea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005aec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	08007b48 	.word	0x08007b48
 8005afc:	08007abc 	.word	0x08007abc

08005b00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005b14:	e002      	b.n	8005b1c <follow_path+0x1c>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b2f      	cmp	r3, #47	; 0x2f
 8005b22:	d0f8      	beq.n	8005b16 <follow_path+0x16>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	2b5c      	cmp	r3, #92	; 0x5c
 8005b2a:	d0f4      	beq.n	8005b16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b1f      	cmp	r3, #31
 8005b38:	d80a      	bhi.n	8005b50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2280      	movs	r2, #128	; 0x80
 8005b3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005b42:	2100      	movs	r1, #0
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fcf9 	bl	800553c <dir_sdi>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	75fb      	strb	r3, [r7, #23]
 8005b4e:	e043      	b.n	8005bd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b50:	463b      	mov	r3, r7
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ff3f 	bl	80059d8 <create_name>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d134      	bne.n	8005bce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff feaf 	bl	80058c8 <dir_find>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d127      	bne.n	8005bd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b82:	7afb      	ldrb	r3, [r7, #11]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d122      	bne.n	8005bd2 <follow_path+0xd2>
 8005b8c:	2305      	movs	r3, #5
 8005b8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b90:	e01f      	b.n	8005bd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11c      	bne.n	8005bd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	799b      	ldrb	r3, [r3, #6]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005ba8:	2305      	movs	r3, #5
 8005baa:	75fb      	strb	r3, [r7, #23]
 8005bac:	e014      	b.n	8005bd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	4413      	add	r3, r2
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fe42 	bl	800584a <ld_clust>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005bcc:	e7c0      	b.n	8005b50 <follow_path+0x50>
			if (res != FR_OK) break;
 8005bce:	bf00      	nop
 8005bd0:	e002      	b.n	8005bd8 <follow_path+0xd8>
				break;
 8005bd2:	bf00      	nop
 8005bd4:	e000      	b.n	8005bd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005bd6:	bf00      	nop
			}
		}
	}

	return res;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b087      	sub	sp, #28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d031      	beq.n	8005c5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e002      	b.n	8005c06 <get_ldnumber+0x24>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3301      	adds	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	d903      	bls.n	8005c16 <get_ldnumber+0x34>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b3a      	cmp	r3, #58	; 0x3a
 8005c14:	d1f4      	bne.n	8005c00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8005c1c:	d11c      	bne.n	8005c58 <get_ldnumber+0x76>
			tp = *path;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	60fa      	str	r2, [r7, #12]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	3b30      	subs	r3, #48	; 0x30
 8005c2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d80e      	bhi.n	8005c54 <get_ldnumber+0x72>
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d10a      	bne.n	8005c54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d107      	bne.n	8005c54 <get_ldnumber+0x72>
					vol = (int)i;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	e002      	b.n	8005c5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005c5c:	693b      	ldr	r3, [r7, #16]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	70da      	strb	r2, [r3, #3]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff f8d8 	bl	8004e3c <move_window>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <check_fs+0x2a>
 8005c92:	2304      	movs	r3, #4
 8005c94:	e038      	b.n	8005d08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fe1c 	bl	80048dc <ld_word>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <check_fs+0x48>
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e029      	b.n	8005d08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cba:	2be9      	cmp	r3, #233	; 0xe9
 8005cbc:	d009      	beq.n	8005cd2 <check_fs+0x66>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cc4:	2beb      	cmp	r3, #235	; 0xeb
 8005cc6:	d11e      	bne.n	8005d06 <check_fs+0x9a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005cce:	2b90      	cmp	r3, #144	; 0x90
 8005cd0:	d119      	bne.n	8005d06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3330      	adds	r3, #48	; 0x30
 8005cd6:	3336      	adds	r3, #54	; 0x36
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fe fe17 	bl	800490c <ld_dword>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <check_fs+0xa4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <check_fs+0x82>
 8005cea:	2300      	movs	r3, #0
 8005cec:	e00c      	b.n	8005d08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3330      	adds	r3, #48	; 0x30
 8005cf2:	3352      	adds	r3, #82	; 0x52
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fe09 	bl	800490c <ld_dword>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4a05      	ldr	r2, [pc, #20]	; (8005d14 <check_fs+0xa8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <check_fs+0x9a>
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005d06:	2302      	movs	r3, #2
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	00544146 	.word	0x00544146
 8005d14:	33544146 	.word	0x33544146

08005d18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b096      	sub	sp, #88	; 0x58
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	4613      	mov	r3, r2
 8005d24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff ff58 	bl	8005be2 <get_ldnumber>
 8005d32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da01      	bge.n	8005d3e <find_volume+0x26>
 8005d3a:	230b      	movs	r3, #11
 8005d3c:	e22d      	b.n	800619a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005d3e:	4aa1      	ldr	r2, [pc, #644]	; (8005fc4 <find_volume+0x2ac>)
 8005d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <find_volume+0x3a>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	e223      	b.n	800619a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	f023 0301 	bic.w	r3, r3, #1
 8005d5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01a      	beq.n	8005d9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fe fd17 	bl	80047a0 <disk_status>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10c      	bne.n	8005d9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <find_volume+0x82>
 8005d8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d8e:	f003 0304 	and.w	r3, r3, #4
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005d96:	230a      	movs	r3, #10
 8005d98:	e1ff      	b.n	800619a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e1fd      	b.n	800619a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fe fd0f 	bl	80047d4 <disk_initialize>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e1e6      	b.n	800619a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <find_volume+0xca>
 8005dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005dd6:	f003 0304 	and.w	r3, r3, #4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005dde:	230a      	movs	r3, #10
 8005de0:	e1db      	b.n	800619a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005de6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005de8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dea:	f7ff ff3f 	bl	8005c6c <check_fs>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005df4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d149      	bne.n	8005e90 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005e00:	e01e      	b.n	8005e40 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005e10:	4413      	add	r3, r2
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	3304      	adds	r3, #4
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d006      	beq.n	8005e2c <find_volume+0x114>
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	3308      	adds	r3, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fd72 	bl	800490c <ld_dword>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	e000      	b.n	8005e2e <find_volume+0x116>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	3358      	adds	r3, #88	; 0x58
 8005e34:	443b      	add	r3, r7
 8005e36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d9dd      	bls.n	8005e02 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005e46:	2300      	movs	r3, #0
 8005e48:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <find_volume+0x13e>
 8005e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e52:	3b01      	subs	r3, #1
 8005e54:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	3358      	adds	r3, #88	; 0x58
 8005e5c:	443b      	add	r3, r7
 8005e5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005e62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <find_volume+0x15e>
 8005e6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e6e:	f7ff fefd 	bl	8005c6c <check_fs>
 8005e72:	4603      	mov	r3, r0
 8005e74:	e000      	b.n	8005e78 <find_volume+0x160>
 8005e76:	2303      	movs	r3, #3
 8005e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d905      	bls.n	8005e90 <find_volume+0x178>
 8005e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e86:	3301      	adds	r3, #1
 8005e88:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d9e2      	bls.n	8005e56 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d101      	bne.n	8005e9c <find_volume+0x184>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e17e      	b.n	800619a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d901      	bls.n	8005ea8 <find_volume+0x190>
 8005ea4:	230d      	movs	r3, #13
 8005ea6:	e178      	b.n	800619a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	3330      	adds	r3, #48	; 0x30
 8005eac:	330b      	adds	r3, #11
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fd14 	bl	80048dc <ld_word>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eba:	d001      	beq.n	8005ec0 <find_volume+0x1a8>
 8005ebc:	230d      	movs	r3, #13
 8005ebe:	e16c      	b.n	800619a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	3330      	adds	r3, #48	; 0x30
 8005ec4:	3316      	adds	r3, #22
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fd08 	bl	80048dc <ld_word>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <find_volume+0x1cc>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	3330      	adds	r3, #48	; 0x30
 8005eda:	3324      	adds	r3, #36	; 0x24
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fd15 	bl	800490c <ld_dword>
 8005ee2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ee8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	789b      	ldrb	r3, [r3, #2]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d005      	beq.n	8005f08 <find_volume+0x1f0>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	789b      	ldrb	r3, [r3, #2]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d001      	beq.n	8005f08 <find_volume+0x1f0>
 8005f04:	230d      	movs	r3, #13
 8005f06:	e148      	b.n	800619a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	789b      	ldrb	r3, [r3, #2]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	895b      	ldrh	r3, [r3, #10]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <find_volume+0x224>
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	895b      	ldrh	r3, [r3, #10]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	895b      	ldrh	r3, [r3, #10]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <find_volume+0x228>
 8005f3c:	230d      	movs	r3, #13
 8005f3e:	e12c      	b.n	800619a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	3330      	adds	r3, #48	; 0x30
 8005f44:	3311      	adds	r3, #17
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fcc8 	bl	80048dc <ld_word>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	891b      	ldrh	r3, [r3, #8]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <find_volume+0x24e>
 8005f62:	230d      	movs	r3, #13
 8005f64:	e119      	b.n	800619a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	3330      	adds	r3, #48	; 0x30
 8005f6a:	3313      	adds	r3, #19
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe fcb5 	bl	80048dc <ld_word>
 8005f72:	4603      	mov	r3, r0
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <find_volume+0x272>
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	3330      	adds	r3, #48	; 0x30
 8005f80:	3320      	adds	r3, #32
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fe fcc2 	bl	800490c <ld_dword>
 8005f88:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	3330      	adds	r3, #48	; 0x30
 8005f8e:	330e      	adds	r3, #14
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fca3 	bl	80048dc <ld_word>
 8005f96:	4603      	mov	r3, r0
 8005f98:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <find_volume+0x28c>
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	e0fa      	b.n	800619a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005fa4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa8:	4413      	add	r3, r2
 8005faa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fac:	8912      	ldrh	r2, [r2, #8]
 8005fae:	0912      	lsrs	r2, r2, #4
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d204      	bcs.n	8005fc8 <find_volume+0x2b0>
 8005fbe:	230d      	movs	r3, #13
 8005fc0:	e0eb      	b.n	800619a <find_volume+0x482>
 8005fc2:	bf00      	nop
 8005fc4:	200002a8 	.word	0x200002a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fd0:	8952      	ldrh	r2, [r2, #10]
 8005fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <find_volume+0x2ca>
 8005fde:	230d      	movs	r3, #13
 8005fe0:	e0db      	b.n	800619a <find_volume+0x482>
		fmt = FS_FAT32;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d802      	bhi.n	8005ff8 <find_volume+0x2e0>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d802      	bhi.n	8006008 <find_volume+0x2f0>
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	1c9a      	adds	r2, r3, #2
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006014:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006016:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800601a:	441a      	add	r2, r3
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006020:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	441a      	add	r2, r3
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800602a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800602e:	2b03      	cmp	r3, #3
 8006030:	d11e      	bne.n	8006070 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	3330      	adds	r3, #48	; 0x30
 8006036:	332a      	adds	r3, #42	; 0x2a
 8006038:	4618      	mov	r0, r3
 800603a:	f7fe fc4f 	bl	80048dc <ld_word>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <find_volume+0x330>
 8006044:	230d      	movs	r3, #13
 8006046:	e0a8      	b.n	800619a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604a:	891b      	ldrh	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <find_volume+0x33c>
 8006050:	230d      	movs	r3, #13
 8006052:	e0a2      	b.n	800619a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	3330      	adds	r3, #48	; 0x30
 8006058:	332c      	adds	r3, #44	; 0x2c
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc56 	bl	800490c <ld_dword>
 8006060:	4602      	mov	r2, r0
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	647b      	str	r3, [r7, #68]	; 0x44
 800606e:	e01f      	b.n	80060b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	891b      	ldrh	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <find_volume+0x364>
 8006078:	230d      	movs	r3, #13
 800607a:	e08e      	b.n	800619a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006082:	441a      	add	r2, r3
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800608c:	2b02      	cmp	r3, #2
 800608e:	d103      	bne.n	8006098 <find_volume+0x380>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	e00a      	b.n	80060ae <find_volume+0x396>
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	085a      	lsrs	r2, r3, #1
 80060a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80060ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80060ba:	0a5b      	lsrs	r3, r3, #9
 80060bc:	429a      	cmp	r2, r3
 80060be:	d201      	bcs.n	80060c4 <find_volume+0x3ac>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e06a      	b.n	800619a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	611a      	str	r2, [r3, #16]
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	2280      	movs	r2, #128	; 0x80
 80060d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80060da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d149      	bne.n	8006176 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80060e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e4:	3330      	adds	r3, #48	; 0x30
 80060e6:	3330      	adds	r3, #48	; 0x30
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fbf7 	bl	80048dc <ld_word>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d140      	bne.n	8006176 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f6:	3301      	adds	r3, #1
 80060f8:	4619      	mov	r1, r3
 80060fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060fc:	f7fe fe9e 	bl	8004e3c <move_window>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d137      	bne.n	8006176 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	2200      	movs	r2, #0
 800610a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	3330      	adds	r3, #48	; 0x30
 8006110:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fbe1 	bl	80048dc <ld_word>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006122:	429a      	cmp	r2, r3
 8006124:	d127      	bne.n	8006176 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	3330      	adds	r3, #48	; 0x30
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fbee 	bl	800490c <ld_dword>
 8006130:	4603      	mov	r3, r0
 8006132:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <find_volume+0x48c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d11e      	bne.n	8006176 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	3330      	adds	r3, #48	; 0x30
 800613c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006140:	4618      	mov	r0, r3
 8006142:	f7fe fbe3 	bl	800490c <ld_dword>
 8006146:	4603      	mov	r3, r0
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <find_volume+0x490>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d113      	bne.n	8006176 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800614e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006150:	3330      	adds	r3, #48	; 0x30
 8006152:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fbd8 	bl	800490c <ld_dword>
 800615c:	4602      	mov	r2, r0
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	3330      	adds	r3, #48	; 0x30
 8006166:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe fbce 	bl	800490c <ld_dword>
 8006170:	4602      	mov	r2, r0
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800617c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <find_volume+0x494>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <find_volume+0x494>)
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	4b08      	ldr	r3, [pc, #32]	; (80061ac <find_volume+0x494>)
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006192:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006194:	f7fe fdea 	bl	8004d6c <clear_lock>
#endif
	return FR_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3758      	adds	r7, #88	; 0x58
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	41615252 	.word	0x41615252
 80061a8:	61417272 	.word	0x61417272
 80061ac:	200002ac 	.word	0x200002ac

080061b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80061ba:	2309      	movs	r3, #9
 80061bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01c      	beq.n	80061fe <validate+0x4e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d018      	beq.n	80061fe <validate+0x4e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d013      	beq.n	80061fe <validate+0x4e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	889a      	ldrh	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	88db      	ldrh	r3, [r3, #6]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d10c      	bne.n	80061fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	785b      	ldrb	r3, [r3, #1]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe fad8 	bl	80047a0 <disk_status>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <validate+0x4e>
			res = FR_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <validate+0x5a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	e000      	b.n	800620c <validate+0x5c>
 800620a:	2300      	movs	r3, #0
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	6013      	str	r3, [r2, #0]
	return res;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800622e:	f107 0310 	add.w	r3, r7, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fcd5 	bl	8005be2 <get_ldnumber>
 8006238:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da01      	bge.n	8006244 <f_mount+0x28>
 8006240:	230b      	movs	r3, #11
 8006242:	e02b      	b.n	800629c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006244:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <f_mount+0x88>)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d005      	beq.n	8006260 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006254:	69b8      	ldr	r0, [r7, #24]
 8006256:	f7fe fd89 	bl	8004d6c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	490d      	ldr	r1, [pc, #52]	; (80062a4 <f_mount+0x88>)
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <f_mount+0x66>
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <f_mount+0x6a>
 8006282:	2300      	movs	r3, #0
 8006284:	e00a      	b.n	800629c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006286:	f107 010c 	add.w	r1, r7, #12
 800628a:	f107 0308 	add.w	r3, r7, #8
 800628e:	2200      	movs	r2, #0
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fd41 	bl	8005d18 <find_volume>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200002a8 	.word	0x200002a8

080062a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b098      	sub	sp, #96	; 0x60
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <f_open+0x18>
 80062bc:	2309      	movs	r3, #9
 80062be:	e1ad      	b.n	800661c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80062c8:	79fa      	ldrb	r2, [r7, #7]
 80062ca:	f107 0110 	add.w	r1, r7, #16
 80062ce:	f107 0308 	add.w	r3, r7, #8
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fd20 	bl	8005d18 <find_volume>
 80062d8:	4603      	mov	r3, r0
 80062da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80062de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 8191 	bne.w	800660a <f_open+0x362>
		dj.obj.fs = fs;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	f107 0314 	add.w	r3, r7, #20
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fc03 	bl	8005b00 <follow_path>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006304:	2b00      	cmp	r3, #0
 8006306:	d11a      	bne.n	800633e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006308:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800630c:	b25b      	sxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	da03      	bge.n	800631a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006312:	2306      	movs	r3, #6
 8006314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006318:	e011      	b.n	800633e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf14      	ite	ne
 8006324:	2301      	movne	r3, #1
 8006326:	2300      	moveq	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	f107 0314 	add.w	r3, r7, #20
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fbd2 	bl	8004adc <chk_lock>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	f003 031c 	and.w	r3, r3, #28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d07f      	beq.n	8006448 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800634c:	2b00      	cmp	r3, #0
 800634e:	d017      	beq.n	8006380 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006354:	2b04      	cmp	r3, #4
 8006356:	d10e      	bne.n	8006376 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006358:	f7fe fc1c 	bl	8004b94 <enq_lock>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d006      	beq.n	8006370 <f_open+0xc8>
 8006362:	f107 0314 	add.w	r3, r7, #20
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fb03 	bl	8005972 <dir_register>
 800636c:	4603      	mov	r3, r0
 800636e:	e000      	b.n	8006372 <f_open+0xca>
 8006370:	2312      	movs	r3, #18
 8006372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	f043 0308 	orr.w	r3, r3, #8
 800637c:	71fb      	strb	r3, [r7, #7]
 800637e:	e010      	b.n	80063a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006380:	7ebb      	ldrb	r3, [r7, #26]
 8006382:	f003 0311 	and.w	r3, r3, #17
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <f_open+0xea>
					res = FR_DENIED;
 800638a:	2307      	movs	r3, #7
 800638c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006390:	e007      	b.n	80063a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <f_open+0xfa>
 800639c:	2308      	movs	r3, #8
 800639e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80063a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d168      	bne.n	800647c <f_open+0x1d4>
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d063      	beq.n	800647c <f_open+0x1d4>
				dw = GET_FATTIME();
 80063b4:	f7fd fcb6 	bl	8003d24 <get_fattime>
 80063b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	330e      	adds	r3, #14
 80063be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fae1 	bl	8004988 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	3316      	adds	r3, #22
 80063ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fe fadb 	bl	8004988 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	330b      	adds	r3, #11
 80063d6:	2220      	movs	r2, #32
 80063d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063de:	4611      	mov	r1, r2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fa32 	bl	800584a <ld_clust>
 80063e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ec:	2200      	movs	r2, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7ff fa4a 	bl	8005888 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f6:	331c      	adds	r3, #28
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fac4 	bl	8004988 <st_dword>
					fs->wflag = 1;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2201      	movs	r2, #1
 8006404:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d037      	beq.n	800647c <f_open+0x1d4>
						dw = fs->winsect;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006412:	f107 0314 	add.w	r3, r7, #20
 8006416:	2200      	movs	r2, #0
 8006418:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe ff5d 	bl	80052da <remove_chain>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d126      	bne.n	800647c <f_open+0x1d4>
							res = move_window(fs, dw);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fd02 	bl	8004e3c <move_window>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006442:	3a01      	subs	r2, #1
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	e019      	b.n	800647c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800644c:	2b00      	cmp	r3, #0
 800644e:	d115      	bne.n	800647c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006450:	7ebb      	ldrb	r3, [r7, #26]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <f_open+0x1ba>
					res = FR_NO_FILE;
 800645a:	2304      	movs	r3, #4
 800645c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006460:	e00c      	b.n	800647c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <f_open+0x1d4>
 800646c:	7ebb      	ldrb	r3, [r7, #26]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <f_open+0x1d4>
						res = FR_DENIED;
 8006476:	2307      	movs	r3, #7
 8006478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800647c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006480:	2b00      	cmp	r3, #0
 8006482:	d128      	bne.n	80064d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006494:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800649e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	f107 0314 	add.w	r3, r7, #20
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe fb8b 	bl	8004bd8 <inc_lock>
 80064c2:	4602      	mov	r2, r0
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d102      	bne.n	80064d6 <f_open+0x22e>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80064d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 8095 	bne.w	800660a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff f9af 	bl	800584a <ld_clust>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	331c      	adds	r3, #28
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fa08 	bl	800490c <ld_dword>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	88da      	ldrh	r2, [r3, #6]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	79fa      	ldrb	r2, [r7, #7]
 800651a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3330      	adds	r3, #48	; 0x30
 8006532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe fa72 	bl	8004a22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d060      	beq.n	800660a <f_open+0x362>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05c      	beq.n	800660a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	895b      	ldrh	r3, [r3, #10]
 800655c:	025b      	lsls	r3, r3, #9
 800655e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	657b      	str	r3, [r7, #84]	; 0x54
 800656c:	e016      	b.n	800659c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fd1d 	bl	8004fb2 <get_fat>
 8006578:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800657a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800657c:	2b01      	cmp	r3, #1
 800657e:	d802      	bhi.n	8006586 <f_open+0x2de>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d102      	bne.n	8006594 <f_open+0x2ec>
 800658e:	2301      	movs	r3, #1
 8006590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006594:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	657b      	str	r3, [r7, #84]	; 0x54
 800659c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <f_open+0x304>
 80065a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d8e0      	bhi.n	800656e <f_open+0x2c6>
				}
				fp->clust = clst;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80065b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d127      	bne.n	800660a <f_open+0x362>
 80065ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d022      	beq.n	800660a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fcd3 	bl	8004f74 <clust2sect>
 80065ce:	6478      	str	r0, [r7, #68]	; 0x44
 80065d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d103      	bne.n	80065de <f_open+0x336>
						res = FR_INT_ERR;
 80065d6:	2302      	movs	r3, #2
 80065d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065dc:	e015      	b.n	800660a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	0a5a      	lsrs	r2, r3, #9
 80065e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e4:	441a      	add	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	7858      	ldrb	r0, [r3, #1]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1a      	ldr	r2, [r3, #32]
 80065f8:	2301      	movs	r3, #1
 80065fa:	f7fe f911 	bl	8004820 <disk_read>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <f_open+0x362>
 8006604:	2301      	movs	r3, #1
 8006606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800660a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <f_open+0x370>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800661c:	4618      	mov	r0, r3
 800661e:	3760      	adds	r7, #96	; 0x60
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f107 0214 	add.w	r2, r7, #20
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fdb3 	bl	80061b0 <validate>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006654:	2b00      	cmp	r3, #0
 8006656:	d107      	bne.n	8006668 <f_read+0x44>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	7d5b      	ldrb	r3, [r3, #21]
 800665c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <f_read+0x4a>
 8006668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800666c:	e115      	b.n	800689a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	7d1b      	ldrb	r3, [r3, #20]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <f_read+0x5a>
 800667a:	2307      	movs	r3, #7
 800667c:	e10d      	b.n	800689a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	429a      	cmp	r2, r3
 8006690:	f240 80fe 	bls.w	8006890 <f_read+0x26c>
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006698:	e0fa      	b.n	8006890 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 80c6 	bne.w	8006834 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	0a5b      	lsrs	r3, r3, #9
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	8952      	ldrh	r2, [r2, #10]
 80066b2:	3a01      	subs	r2, #1
 80066b4:	4013      	ands	r3, r2
 80066b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d12f      	bne.n	800671e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d103      	bne.n	80066ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30
 80066cc:	e013      	b.n	80066f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	4619      	mov	r1, r3
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7fe fef9 	bl	80054d4 <clmt_clust>
 80066e2:	6338      	str	r0, [r7, #48]	; 0x30
 80066e4:	e007      	b.n	80066f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f7fe fc5f 	bl	8004fb2 <get_fat>
 80066f4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d804      	bhi.n	8006706 <f_read+0xe2>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2202      	movs	r2, #2
 8006700:	755a      	strb	r2, [r3, #21]
 8006702:	2302      	movs	r3, #2
 8006704:	e0c9      	b.n	800689a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d104      	bne.n	8006718 <f_read+0xf4>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	755a      	strb	r2, [r3, #21]
 8006714:	2301      	movs	r3, #1
 8006716:	e0c0      	b.n	800689a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fe fc24 	bl	8004f74 <clust2sect>
 800672c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <f_read+0x11a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2202      	movs	r2, #2
 8006738:	755a      	strb	r2, [r3, #21]
 800673a:	2302      	movs	r3, #2
 800673c:	e0ad      	b.n	800689a <f_read+0x276>
			sect += csect;
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	4413      	add	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0a5b      	lsrs	r3, r3, #9
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2b00      	cmp	r3, #0
 8006750:	d039      	beq.n	80067c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	4413      	add	r3, r2
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	8952      	ldrh	r2, [r2, #10]
 800675c:	4293      	cmp	r3, r2
 800675e:	d905      	bls.n	800676c <f_read+0x148>
					cc = fs->csize - csect;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	895b      	ldrh	r3, [r3, #10]
 8006764:	461a      	mov	r2, r3
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	7858      	ldrb	r0, [r3, #1]
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006776:	f7fe f853 	bl	8004820 <disk_read>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d004      	beq.n	800678a <f_read+0x166>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	755a      	strb	r2, [r3, #21]
 8006786:	2301      	movs	r3, #1
 8006788:	e087      	b.n	800689a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	7d1b      	ldrb	r3, [r3, #20]
 800678e:	b25b      	sxtb	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	da14      	bge.n	80067be <f_read+0x19a>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800679e:	429a      	cmp	r2, r3
 80067a0:	d90d      	bls.n	80067be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	025b      	lsls	r3, r3, #9
 80067ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ae:	18d0      	adds	r0, r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3330      	adds	r3, #48	; 0x30
 80067b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fe f911 	bl	80049e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	025b      	lsls	r3, r3, #9
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80067c4:	e050      	b.n	8006868 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d02e      	beq.n	800682e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	7d1b      	ldrb	r3, [r3, #20]
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	da18      	bge.n	800680c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	7858      	ldrb	r0, [r3, #1]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	2301      	movs	r3, #1
 80067ea:	f7fe f839 	bl	8004860 <disk_write>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d004      	beq.n	80067fe <f_read+0x1da>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	755a      	strb	r2, [r3, #21]
 80067fa:	2301      	movs	r3, #1
 80067fc:	e04d      	b.n	800689a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7d1b      	ldrb	r3, [r3, #20]
 8006802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006806:	b2da      	uxtb	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	7858      	ldrb	r0, [r3, #1]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006816:	2301      	movs	r3, #1
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	f7fe f801 	bl	8004820 <disk_read>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <f_read+0x20a>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	755a      	strb	r2, [r3, #21]
 800682a:	2301      	movs	r3, #1
 800682c:	e035      	b.n	800689a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	429a      	cmp	r2, r3
 8006848:	d901      	bls.n	800684e <f_read+0x22a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685c:	4413      	add	r3, r2
 800685e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006860:	4619      	mov	r1, r3
 8006862:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006864:	f7fe f8bc 	bl	80049e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686c:	4413      	add	r3, r2
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	619a      	str	r2, [r3, #24]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	441a      	add	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f47f af01 	bne.w	800669a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3738      	adds	r7, #56	; 0x38
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b08c      	sub	sp, #48	; 0x30
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f107 0210 	add.w	r2, r7, #16
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fc74 	bl	80061b0 <validate>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d107      	bne.n	80068e6 <f_write+0x44>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7d5b      	ldrb	r3, [r3, #21]
 80068da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80068de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <f_write+0x4a>
 80068e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ea:	e14b      	b.n	8006b84 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	7d1b      	ldrb	r3, [r3, #20]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <f_write+0x5a>
 80068f8:	2307      	movs	r3, #7
 80068fa:	e143      	b.n	8006b84 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699a      	ldr	r2, [r3, #24]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	441a      	add	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	429a      	cmp	r2, r3
 800690a:	f080 812d 	bcs.w	8006b68 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	43db      	mvns	r3, r3
 8006914:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006916:	e127      	b.n	8006b68 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006920:	2b00      	cmp	r3, #0
 8006922:	f040 80e3 	bne.w	8006aec <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	0a5b      	lsrs	r3, r3, #9
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	8952      	ldrh	r2, [r2, #10]
 8006930:	3a01      	subs	r2, #1
 8006932:	4013      	ands	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d143      	bne.n	80069c4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10c      	bne.n	800695e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	2b00      	cmp	r3, #0
 800694e:	d11a      	bne.n	8006986 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fd25 	bl	80053a4 <create_chain>
 800695a:	62b8      	str	r0, [r7, #40]	; 0x28
 800695c:	e013      	b.n	8006986 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	4619      	mov	r1, r3
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7fe fdb1 	bl	80054d4 <clmt_clust>
 8006972:	62b8      	str	r0, [r7, #40]	; 0x28
 8006974:	e007      	b.n	8006986 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7fe fd10 	bl	80053a4 <create_chain>
 8006984:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80f2 	beq.w	8006b72 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	2b01      	cmp	r3, #1
 8006992:	d104      	bne.n	800699e <f_write+0xfc>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2202      	movs	r2, #2
 8006998:	755a      	strb	r2, [r3, #21]
 800699a:	2302      	movs	r3, #2
 800699c:	e0f2      	b.n	8006b84 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d104      	bne.n	80069b0 <f_write+0x10e>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	755a      	strb	r2, [r3, #21]
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0e9      	b.n	8006b84 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <f_write+0x122>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	7d1b      	ldrb	r3, [r3, #20]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da18      	bge.n	8006a00 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	7858      	ldrb	r0, [r3, #1]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	2301      	movs	r3, #1
 80069de:	f7fd ff3f 	bl	8004860 <disk_write>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <f_write+0x150>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	755a      	strb	r2, [r3, #21]
 80069ee:	2301      	movs	r3, #1
 80069f0:	e0c8      	b.n	8006b84 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7d1b      	ldrb	r3, [r3, #20]
 80069f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe fab3 	bl	8004f74 <clust2sect>
 8006a0e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <f_write+0x17e>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	755a      	strb	r2, [r3, #21]
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e0b1      	b.n	8006b84 <f_write+0x2e2>
			sect += csect;
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	4413      	add	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0a5b      	lsrs	r3, r3, #9
 8006a2c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d03c      	beq.n	8006aae <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	4413      	add	r3, r2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	8952      	ldrh	r2, [r2, #10]
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d905      	bls.n	8006a4e <f_write+0x1ac>
					cc = fs->csize - csect;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	895b      	ldrh	r3, [r3, #10]
 8006a46:	461a      	mov	r2, r3
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	7858      	ldrb	r0, [r3, #1]
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	69f9      	ldr	r1, [r7, #28]
 8006a58:	f7fd ff02 	bl	8004860 <disk_write>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d004      	beq.n	8006a6c <f_write+0x1ca>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	755a      	strb	r2, [r3, #21]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e08b      	b.n	8006b84 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a1a      	ldr	r2, [r3, #32]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d915      	bls.n	8006aa6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a92:	4619      	mov	r1, r3
 8006a94:	f7fd ffa4 	bl	80049e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	7d1b      	ldrb	r3, [r3, #20]
 8006a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	025b      	lsls	r3, r3, #9
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006aac:	e03f      	b.n	8006b2e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d016      	beq.n	8006ae6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	699a      	ldr	r2, [r3, #24]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d210      	bcs.n	8006ae6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	7858      	ldrb	r0, [r3, #1]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ace:	2301      	movs	r3, #1
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	f7fd fea5 	bl	8004820 <disk_read>
 8006ad6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	755a      	strb	r2, [r3, #21]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e04e      	b.n	8006b84 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d901      	bls.n	8006b06 <f_write+0x264>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	4413      	add	r3, r2
 8006b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b18:	69f9      	ldr	r1, [r7, #28]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fd ff60 	bl	80049e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	7d1b      	ldrb	r3, [r3, #20]
 8006b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	4413      	add	r3, r2
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bf38      	it	cc
 8006b4e:	461a      	movcc	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	441a      	add	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f47f aed4 	bne.w	8006918 <f_write+0x76>
 8006b70:	e000      	b.n	8006b74 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b72:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	7d1b      	ldrb	r3, [r3, #20]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3730      	adds	r7, #48	; 0x30
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f107 0208 	add.w	r2, r7, #8
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fb07 	bl	80061b0 <validate>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d168      	bne.n	8006c7e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7d1b      	ldrb	r3, [r3, #20]
 8006bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d062      	beq.n	8006c7e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	7d1b      	ldrb	r3, [r3, #20]
 8006bbc:	b25b      	sxtb	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da15      	bge.n	8006bee <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	7858      	ldrb	r0, [r3, #1]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1a      	ldr	r2, [r3, #32]
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f7fd fe45 	bl	8004860 <disk_write>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <f_sync+0x54>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e04f      	b.n	8006c80 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
 8006be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006bee:	f7fd f899 	bl	8003d24 <get_fattime>
 8006bf2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7fe f91d 	bl	8004e3c <move_window>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d138      	bne.n	8006c7e <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c10:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	330b      	adds	r3, #11
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	330b      	adds	r3, #11
 8006c1c:	f042 0220 	orr.w	r2, r2, #32
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	f7fe fe2a 	bl	8005888 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f103 021c 	add.w	r2, r3, #28
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4610      	mov	r0, r2
 8006c42:	f7fd fea1 	bl	8004988 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3316      	adds	r3, #22
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fd fe9b 	bl	8004988 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3312      	adds	r3, #18
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd fe7a 	bl	8004952 <st_word>
					fs->wflag = 1;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2201      	movs	r2, #1
 8006c62:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe f916 	bl	8004e98 <sync_fs>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	7d1b      	ldrb	r3, [r3, #20]
 8006c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff ff7b 	bl	8006b8c <f_sync>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d118      	bne.n	8006cd2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f107 0208 	add.w	r2, r7, #8
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fa81 	bl	80061b0 <validate>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10c      	bne.n	8006cd2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe f819 	bl	8004cf4 <dec_lock>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d102      	bne.n	8006cd2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b092      	sub	sp, #72	; 0x48
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006ce8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006cec:	f107 030c 	add.w	r3, r7, #12
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff f810 	bl	8005d18 <find_volume>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006cfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f040 8099 	bne.w	8006e3a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006d08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	3b02      	subs	r3, #2
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d804      	bhi.n	8006d26 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e089      	b.n	8006e3a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d128      	bne.n	8006d84 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006d32:	2302      	movs	r3, #2
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006d3a:	f107 0314 	add.w	r3, r7, #20
 8006d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe f936 	bl	8004fb2 <get_fat>
 8006d46:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4e:	d103      	bne.n	8006d58 <f_getfree+0x7c>
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d56:	e063      	b.n	8006e20 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d103      	bne.n	8006d66 <f_getfree+0x8a>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006d64:	e05c      	b.n	8006e20 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <f_getfree+0x96>
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6e:	3301      	adds	r3, #1
 8006d70:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	3301      	adds	r3, #1
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d3db      	bcc.n	8006d3a <f_getfree+0x5e>
 8006d82:	e04d      	b.n	8006e20 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	637b      	str	r3, [r7, #52]	; 0x34
 8006d94:	2300      	movs	r3, #0
 8006d96:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d113      	bne.n	8006dc6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8006da6:	4619      	mov	r1, r3
 8006da8:	f7fe f848 	bl	8004e3c <move_window>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006db2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d131      	bne.n	8006e1e <f_getfree+0x142>
							p = fs->win;
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	3330      	adds	r3, #48	; 0x30
 8006dbe:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d10f      	bne.n	8006dee <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dd0:	f7fd fd84 	bl	80048dc <ld_word>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <f_getfree+0x104>
 8006dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ddc:	3301      	adds	r3, #1
 8006dde:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	3302      	adds	r3, #2
 8006de4:	633b      	str	r3, [r7, #48]	; 0x30
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	3b02      	subs	r3, #2
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
 8006dec:	e010      	b.n	8006e10 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df0:	f7fd fd8c 	bl	800490c <ld_dword>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <f_getfree+0x128>
 8006dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e00:	3301      	adds	r3, #1
 8006e02:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	3304      	adds	r3, #4
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0c:	3b04      	subs	r3, #4
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e12:	3b01      	subs	r3, #1
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1bd      	bne.n	8006d98 <f_getfree+0xbc>
 8006e1c:	e000      	b.n	8006e20 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006e1e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e24:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e2a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	791a      	ldrb	r2, [r3, #4]
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006e3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3748      	adds	r7, #72	; 0x48
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006e5a:	e01b      	b.n	8006e94 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	f107 0114 	add.w	r1, r7, #20
 8006e64:	2201      	movs	r2, #1
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff fbdc 	bl	8006624 <f_read>
		if (rc != 1) break;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d116      	bne.n	8006ea0 <f_gets+0x5a>
		c = s[0];
 8006e72:	7d3b      	ldrb	r3, [r7, #20]
 8006e74:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b0d      	cmp	r3, #13
 8006e7a:	d100      	bne.n	8006e7e <f_gets+0x38>
 8006e7c:	e00a      	b.n	8006e94 <f_gets+0x4e>
		*p++ = c;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	61ba      	str	r2, [r7, #24]
 8006e84:	7dfa      	ldrb	r2, [r7, #23]
 8006e86:	701a      	strb	r2, [r3, #0]
		n++;
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d007      	beq.n	8006ea4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	dbde      	blt.n	8006e5c <f_gets+0x16>
 8006e9e:	e002      	b.n	8006ea6 <f_gets+0x60>
		if (rc != 1) break;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8006ea4:	bf00      	nop
	}
	*p = 0;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d001      	beq.n	8006eb6 <f_gets+0x70>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	e000      	b.n	8006eb8 <f_gets+0x72>
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ed6:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006ed8:	7a5b      	ldrb	r3, [r3, #9]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d131      	bne.n	8006f44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006ee0:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006ee2:	7a5b      	ldrb	r3, [r3, #9]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006eea:	2100      	movs	r1, #0
 8006eec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006ef0:	7a5b      	ldrb	r3, [r3, #9]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4a17      	ldr	r2, [pc, #92]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006efe:	4b15      	ldr	r3, [pc, #84]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006f00:	7a5b      	ldrb	r3, [r3, #9]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006f08:	4413      	add	r3, r2
 8006f0a:	79fa      	ldrb	r2, [r7, #7]
 8006f0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006f0e:	4b11      	ldr	r3, [pc, #68]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006f10:	7a5b      	ldrb	r3, [r3, #9]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	b2d1      	uxtb	r1, r2
 8006f18:	4a0e      	ldr	r2, [pc, #56]	; (8006f54 <FATFS_LinkDriverEx+0x94>)
 8006f1a:	7251      	strb	r1, [r2, #9]
 8006f1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006f1e:	7dbb      	ldrb	r3, [r7, #22]
 8006f20:	3330      	adds	r3, #48	; 0x30
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	223a      	movs	r2, #58	; 0x3a
 8006f2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	3302      	adds	r3, #2
 8006f34:	222f      	movs	r2, #47	; 0x2f
 8006f36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	3303      	adds	r3, #3
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	200002d0 	.word	0x200002d0

08006f58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f62:	2200      	movs	r2, #0
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ffaa 	bl	8006ec0 <FATFS_LinkDriverEx>
 8006f6c:	4603      	mov	r3, r0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <__errno>:
 8006f78:	4b01      	ldr	r3, [pc, #4]	; (8006f80 <__errno+0x8>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000024 	.word	0x20000024

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4d0d      	ldr	r5, [pc, #52]	; (8006fbc <__libc_init_array+0x38>)
 8006f88:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	4d0b      	ldr	r5, [pc, #44]	; (8006fc4 <__libc_init_array+0x40>)
 8006f96:	4c0c      	ldr	r4, [pc, #48]	; (8006fc8 <__libc_init_array+0x44>)
 8006f98:	f000 fca8 	bl	80078ec <_init>
 8006f9c:	1b64      	subs	r4, r4, r5
 8006f9e:	10a4      	asrs	r4, r4, #2
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fac:	4798      	blx	r3
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb6:	4798      	blx	r3
 8006fb8:	3601      	adds	r6, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	08007c04 	.word	0x08007c04
 8006fc0:	08007c04 	.word	0x08007c04
 8006fc4:	08007c04 	.word	0x08007c04
 8006fc8:	08007c08 	.word	0x08007c08

08006fcc <memset>:
 8006fcc:	4402      	add	r2, r0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d100      	bne.n	8006fd6 <memset+0xa>
 8006fd4:	4770      	bx	lr
 8006fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fda:	e7f9      	b.n	8006fd0 <memset+0x4>

08006fdc <_vsniprintf_r>:
 8006fdc:	b530      	push	{r4, r5, lr}
 8006fde:	4614      	mov	r4, r2
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	b09b      	sub	sp, #108	; 0x6c
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	da05      	bge.n	8006ff6 <_vsniprintf_r+0x1a>
 8006fea:	238b      	movs	r3, #139	; 0x8b
 8006fec:	6003      	str	r3, [r0, #0]
 8006fee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff2:	b01b      	add	sp, #108	; 0x6c
 8006ff4:	bd30      	pop	{r4, r5, pc}
 8006ff6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006ffa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006ffe:	bf14      	ite	ne
 8007000:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007004:	4623      	moveq	r3, r4
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	9305      	str	r3, [sp, #20]
 800700a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800700e:	9100      	str	r1, [sp, #0]
 8007010:	9104      	str	r1, [sp, #16]
 8007012:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007016:	4669      	mov	r1, sp
 8007018:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800701a:	f000 f875 	bl	8007108 <_svfiprintf_r>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	bfbc      	itt	lt
 8007022:	238b      	movlt	r3, #139	; 0x8b
 8007024:	602b      	strlt	r3, [r5, #0]
 8007026:	2c00      	cmp	r4, #0
 8007028:	d0e3      	beq.n	8006ff2 <_vsniprintf_r+0x16>
 800702a:	9b00      	ldr	r3, [sp, #0]
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e7df      	b.n	8006ff2 <_vsniprintf_r+0x16>
	...

08007034 <vsniprintf>:
 8007034:	b507      	push	{r0, r1, r2, lr}
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	460a      	mov	r2, r1
 800703c:	4601      	mov	r1, r0
 800703e:	4803      	ldr	r0, [pc, #12]	; (800704c <vsniprintf+0x18>)
 8007040:	6800      	ldr	r0, [r0, #0]
 8007042:	f7ff ffcb 	bl	8006fdc <_vsniprintf_r>
 8007046:	b003      	add	sp, #12
 8007048:	f85d fb04 	ldr.w	pc, [sp], #4
 800704c:	20000024 	.word	0x20000024

08007050 <__ssputs_r>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	688e      	ldr	r6, [r1, #8]
 8007056:	429e      	cmp	r6, r3
 8007058:	4682      	mov	sl, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4690      	mov	r8, r2
 800705e:	461f      	mov	r7, r3
 8007060:	d838      	bhi.n	80070d4 <__ssputs_r+0x84>
 8007062:	898a      	ldrh	r2, [r1, #12]
 8007064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007068:	d032      	beq.n	80070d0 <__ssputs_r+0x80>
 800706a:	6825      	ldr	r5, [r4, #0]
 800706c:	6909      	ldr	r1, [r1, #16]
 800706e:	eba5 0901 	sub.w	r9, r5, r1
 8007072:	6965      	ldr	r5, [r4, #20]
 8007074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800707c:	3301      	adds	r3, #1
 800707e:	444b      	add	r3, r9
 8007080:	106d      	asrs	r5, r5, #1
 8007082:	429d      	cmp	r5, r3
 8007084:	bf38      	it	cc
 8007086:	461d      	movcc	r5, r3
 8007088:	0553      	lsls	r3, r2, #21
 800708a:	d531      	bpl.n	80070f0 <__ssputs_r+0xa0>
 800708c:	4629      	mov	r1, r5
 800708e:	f000 fb63 	bl	8007758 <_malloc_r>
 8007092:	4606      	mov	r6, r0
 8007094:	b950      	cbnz	r0, 80070ac <__ssputs_r+0x5c>
 8007096:	230c      	movs	r3, #12
 8007098:	f8ca 3000 	str.w	r3, [sl]
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	6921      	ldr	r1, [r4, #16]
 80070ae:	464a      	mov	r2, r9
 80070b0:	f000 fabe 	bl	8007630 <memcpy>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	6126      	str	r6, [r4, #16]
 80070c2:	6165      	str	r5, [r4, #20]
 80070c4:	444e      	add	r6, r9
 80070c6:	eba5 0509 	sub.w	r5, r5, r9
 80070ca:	6026      	str	r6, [r4, #0]
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	463e      	mov	r6, r7
 80070d0:	42be      	cmp	r6, r7
 80070d2:	d900      	bls.n	80070d6 <__ssputs_r+0x86>
 80070d4:	463e      	mov	r6, r7
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	4632      	mov	r2, r6
 80070da:	4641      	mov	r1, r8
 80070dc:	f000 fab6 	bl	800764c <memmove>
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	1b9b      	subs	r3, r3, r6
 80070e4:	60a3      	str	r3, [r4, #8]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	4433      	add	r3, r6
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	2000      	movs	r0, #0
 80070ee:	e7db      	b.n	80070a8 <__ssputs_r+0x58>
 80070f0:	462a      	mov	r2, r5
 80070f2:	f000 fba5 	bl	8007840 <_realloc_r>
 80070f6:	4606      	mov	r6, r0
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d1e1      	bne.n	80070c0 <__ssputs_r+0x70>
 80070fc:	6921      	ldr	r1, [r4, #16]
 80070fe:	4650      	mov	r0, sl
 8007100:	f000 fabe 	bl	8007680 <_free_r>
 8007104:	e7c7      	b.n	8007096 <__ssputs_r+0x46>
	...

08007108 <_svfiprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	4698      	mov	r8, r3
 800710e:	898b      	ldrh	r3, [r1, #12]
 8007110:	061b      	lsls	r3, r3, #24
 8007112:	b09d      	sub	sp, #116	; 0x74
 8007114:	4607      	mov	r7, r0
 8007116:	460d      	mov	r5, r1
 8007118:	4614      	mov	r4, r2
 800711a:	d50e      	bpl.n	800713a <_svfiprintf_r+0x32>
 800711c:	690b      	ldr	r3, [r1, #16]
 800711e:	b963      	cbnz	r3, 800713a <_svfiprintf_r+0x32>
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	f000 fb19 	bl	8007758 <_malloc_r>
 8007126:	6028      	str	r0, [r5, #0]
 8007128:	6128      	str	r0, [r5, #16]
 800712a:	b920      	cbnz	r0, 8007136 <_svfiprintf_r+0x2e>
 800712c:	230c      	movs	r3, #12
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e0d1      	b.n	80072da <_svfiprintf_r+0x1d2>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	616b      	str	r3, [r5, #20]
 800713a:	2300      	movs	r3, #0
 800713c:	9309      	str	r3, [sp, #36]	; 0x24
 800713e:	2320      	movs	r3, #32
 8007140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007144:	f8cd 800c 	str.w	r8, [sp, #12]
 8007148:	2330      	movs	r3, #48	; 0x30
 800714a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072f4 <_svfiprintf_r+0x1ec>
 800714e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007152:	f04f 0901 	mov.w	r9, #1
 8007156:	4623      	mov	r3, r4
 8007158:	469a      	mov	sl, r3
 800715a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800715e:	b10a      	cbz	r2, 8007164 <_svfiprintf_r+0x5c>
 8007160:	2a25      	cmp	r2, #37	; 0x25
 8007162:	d1f9      	bne.n	8007158 <_svfiprintf_r+0x50>
 8007164:	ebba 0b04 	subs.w	fp, sl, r4
 8007168:	d00b      	beq.n	8007182 <_svfiprintf_r+0x7a>
 800716a:	465b      	mov	r3, fp
 800716c:	4622      	mov	r2, r4
 800716e:	4629      	mov	r1, r5
 8007170:	4638      	mov	r0, r7
 8007172:	f7ff ff6d 	bl	8007050 <__ssputs_r>
 8007176:	3001      	adds	r0, #1
 8007178:	f000 80aa 	beq.w	80072d0 <_svfiprintf_r+0x1c8>
 800717c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800717e:	445a      	add	r2, fp
 8007180:	9209      	str	r2, [sp, #36]	; 0x24
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80a2 	beq.w	80072d0 <_svfiprintf_r+0x1c8>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007196:	f10a 0a01 	add.w	sl, sl, #1
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071a2:	931a      	str	r3, [sp, #104]	; 0x68
 80071a4:	4654      	mov	r4, sl
 80071a6:	2205      	movs	r2, #5
 80071a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ac:	4851      	ldr	r0, [pc, #324]	; (80072f4 <_svfiprintf_r+0x1ec>)
 80071ae:	f7f9 f817 	bl	80001e0 <memchr>
 80071b2:	9a04      	ldr	r2, [sp, #16]
 80071b4:	b9d8      	cbnz	r0, 80071ee <_svfiprintf_r+0xe6>
 80071b6:	06d0      	lsls	r0, r2, #27
 80071b8:	bf44      	itt	mi
 80071ba:	2320      	movmi	r3, #32
 80071bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071c0:	0711      	lsls	r1, r2, #28
 80071c2:	bf44      	itt	mi
 80071c4:	232b      	movmi	r3, #43	; 0x2b
 80071c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b2a      	cmp	r3, #42	; 0x2a
 80071d0:	d015      	beq.n	80071fe <_svfiprintf_r+0xf6>
 80071d2:	9a07      	ldr	r2, [sp, #28]
 80071d4:	4654      	mov	r4, sl
 80071d6:	2000      	movs	r0, #0
 80071d8:	f04f 0c0a 	mov.w	ip, #10
 80071dc:	4621      	mov	r1, r4
 80071de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e2:	3b30      	subs	r3, #48	; 0x30
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d94e      	bls.n	8007286 <_svfiprintf_r+0x17e>
 80071e8:	b1b0      	cbz	r0, 8007218 <_svfiprintf_r+0x110>
 80071ea:	9207      	str	r2, [sp, #28]
 80071ec:	e014      	b.n	8007218 <_svfiprintf_r+0x110>
 80071ee:	eba0 0308 	sub.w	r3, r0, r8
 80071f2:	fa09 f303 	lsl.w	r3, r9, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	46a2      	mov	sl, r4
 80071fc:	e7d2      	b.n	80071a4 <_svfiprintf_r+0x9c>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d19      	adds	r1, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9103      	str	r1, [sp, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfbb      	ittet	lt
 800720a:	425b      	neglt	r3, r3
 800720c:	f042 0202 	orrlt.w	r2, r2, #2
 8007210:	9307      	strge	r3, [sp, #28]
 8007212:	9307      	strlt	r3, [sp, #28]
 8007214:	bfb8      	it	lt
 8007216:	9204      	strlt	r2, [sp, #16]
 8007218:	7823      	ldrb	r3, [r4, #0]
 800721a:	2b2e      	cmp	r3, #46	; 0x2e
 800721c:	d10c      	bne.n	8007238 <_svfiprintf_r+0x130>
 800721e:	7863      	ldrb	r3, [r4, #1]
 8007220:	2b2a      	cmp	r3, #42	; 0x2a
 8007222:	d135      	bne.n	8007290 <_svfiprintf_r+0x188>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	9203      	str	r2, [sp, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfb8      	it	lt
 8007230:	f04f 33ff 	movlt.w	r3, #4294967295
 8007234:	3402      	adds	r4, #2
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007304 <_svfiprintf_r+0x1fc>
 800723c:	7821      	ldrb	r1, [r4, #0]
 800723e:	2203      	movs	r2, #3
 8007240:	4650      	mov	r0, sl
 8007242:	f7f8 ffcd 	bl	80001e0 <memchr>
 8007246:	b140      	cbz	r0, 800725a <_svfiprintf_r+0x152>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	eba0 000a 	sub.w	r0, r0, sl
 800724e:	fa03 f000 	lsl.w	r0, r3, r0
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	4303      	orrs	r3, r0
 8007256:	3401      	adds	r4, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725e:	4826      	ldr	r0, [pc, #152]	; (80072f8 <_svfiprintf_r+0x1f0>)
 8007260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007264:	2206      	movs	r2, #6
 8007266:	f7f8 ffbb 	bl	80001e0 <memchr>
 800726a:	2800      	cmp	r0, #0
 800726c:	d038      	beq.n	80072e0 <_svfiprintf_r+0x1d8>
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <_svfiprintf_r+0x1f4>)
 8007270:	bb1b      	cbnz	r3, 80072ba <_svfiprintf_r+0x1b2>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	3308      	adds	r3, #8
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	4433      	add	r3, r6
 8007282:	9309      	str	r3, [sp, #36]	; 0x24
 8007284:	e767      	b.n	8007156 <_svfiprintf_r+0x4e>
 8007286:	fb0c 3202 	mla	r2, ip, r2, r3
 800728a:	460c      	mov	r4, r1
 800728c:	2001      	movs	r0, #1
 800728e:	e7a5      	b.n	80071dc <_svfiprintf_r+0xd4>
 8007290:	2300      	movs	r3, #0
 8007292:	3401      	adds	r4, #1
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	4619      	mov	r1, r3
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4620      	mov	r0, r4
 800729e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a2:	3a30      	subs	r2, #48	; 0x30
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d903      	bls.n	80072b0 <_svfiprintf_r+0x1a8>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c5      	beq.n	8007238 <_svfiprintf_r+0x130>
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	e7c3      	b.n	8007238 <_svfiprintf_r+0x130>
 80072b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b4:	4604      	mov	r4, r0
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7f0      	b.n	800729c <_svfiprintf_r+0x194>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <_svfiprintf_r+0x1f8>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	4638      	mov	r0, r7
 80072c6:	f3af 8000 	nop.w
 80072ca:	1c42      	adds	r2, r0, #1
 80072cc:	4606      	mov	r6, r0
 80072ce:	d1d6      	bne.n	800727e <_svfiprintf_r+0x176>
 80072d0:	89ab      	ldrh	r3, [r5, #12]
 80072d2:	065b      	lsls	r3, r3, #25
 80072d4:	f53f af2c 	bmi.w	8007130 <_svfiprintf_r+0x28>
 80072d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072da:	b01d      	add	sp, #116	; 0x74
 80072dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e0:	ab03      	add	r3, sp, #12
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	462a      	mov	r2, r5
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <_svfiprintf_r+0x1f8>)
 80072e8:	a904      	add	r1, sp, #16
 80072ea:	4638      	mov	r0, r7
 80072ec:	f000 f87a 	bl	80073e4 <_printf_i>
 80072f0:	e7eb      	b.n	80072ca <_svfiprintf_r+0x1c2>
 80072f2:	bf00      	nop
 80072f4:	08007bc8 	.word	0x08007bc8
 80072f8:	08007bd2 	.word	0x08007bd2
 80072fc:	00000000 	.word	0x00000000
 8007300:	08007051 	.word	0x08007051
 8007304:	08007bce 	.word	0x08007bce

08007308 <_printf_common>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	4616      	mov	r6, r2
 800730e:	4699      	mov	r9, r3
 8007310:	688a      	ldr	r2, [r1, #8]
 8007312:	690b      	ldr	r3, [r1, #16]
 8007314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007318:	4293      	cmp	r3, r2
 800731a:	bfb8      	it	lt
 800731c:	4613      	movlt	r3, r2
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b10a      	cbz	r2, 800732e <_printf_common+0x26>
 800732a:	3301      	adds	r3, #1
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	0699      	lsls	r1, r3, #26
 8007332:	bf42      	ittt	mi
 8007334:	6833      	ldrmi	r3, [r6, #0]
 8007336:	3302      	addmi	r3, #2
 8007338:	6033      	strmi	r3, [r6, #0]
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	f015 0506 	ands.w	r5, r5, #6
 8007340:	d106      	bne.n	8007350 <_printf_common+0x48>
 8007342:	f104 0a19 	add.w	sl, r4, #25
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc26      	bgt.n	800739e <_printf_common+0x96>
 8007350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007354:	1e13      	subs	r3, r2, #0
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	2301      	movne	r3, #1
 800735c:	0692      	lsls	r2, r2, #26
 800735e:	d42b      	bmi.n	80073b8 <_printf_common+0xb0>
 8007360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007364:	4649      	mov	r1, r9
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	3001      	adds	r0, #1
 800736c:	d01e      	beq.n	80073ac <_printf_common+0xa4>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	68e5      	ldr	r5, [r4, #12]
 8007372:	6832      	ldr	r2, [r6, #0]
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	2b04      	cmp	r3, #4
 800737a:	bf08      	it	eq
 800737c:	1aad      	subeq	r5, r5, r2
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	bf0c      	ite	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	2500      	movne	r5, #0
 800738a:	4293      	cmp	r3, r2
 800738c:	bfc4      	itt	gt
 800738e:	1a9b      	subgt	r3, r3, r2
 8007390:	18ed      	addgt	r5, r5, r3
 8007392:	2600      	movs	r6, #0
 8007394:	341a      	adds	r4, #26
 8007396:	42b5      	cmp	r5, r6
 8007398:	d11a      	bne.n	80073d0 <_printf_common+0xc8>
 800739a:	2000      	movs	r0, #0
 800739c:	e008      	b.n	80073b0 <_printf_common+0xa8>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4649      	mov	r1, r9
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d103      	bne.n	80073b4 <_printf_common+0xac>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7c6      	b.n	8007346 <_printf_common+0x3e>
 80073b8:	18e1      	adds	r1, r4, r3
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	2030      	movs	r0, #48	; 0x30
 80073be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c2:	4422      	add	r2, r4
 80073c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073cc:	3302      	adds	r3, #2
 80073ce:	e7c7      	b.n	8007360 <_printf_common+0x58>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d0e6      	beq.n	80073ac <_printf_common+0xa4>
 80073de:	3601      	adds	r6, #1
 80073e0:	e7d9      	b.n	8007396 <_printf_common+0x8e>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	7e0f      	ldrb	r7, [r1, #24]
 80073ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ec:	2f78      	cmp	r7, #120	; 0x78
 80073ee:	4691      	mov	r9, r2
 80073f0:	4680      	mov	r8, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	469a      	mov	sl, r3
 80073f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073fa:	d807      	bhi.n	800740c <_printf_i+0x28>
 80073fc:	2f62      	cmp	r7, #98	; 0x62
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x32>
 8007400:	2f00      	cmp	r7, #0
 8007402:	f000 80d8 	beq.w	80075b6 <_printf_i+0x1d2>
 8007406:	2f58      	cmp	r7, #88	; 0x58
 8007408:	f000 80a3 	beq.w	8007552 <_printf_i+0x16e>
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007414:	e03a      	b.n	800748c <_printf_i+0xa8>
 8007416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800741a:	2b15      	cmp	r3, #21
 800741c:	d8f6      	bhi.n	800740c <_printf_i+0x28>
 800741e:	a101      	add	r1, pc, #4	; (adr r1, 8007424 <_printf_i+0x40>)
 8007420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007424:	0800747d 	.word	0x0800747d
 8007428:	08007491 	.word	0x08007491
 800742c:	0800740d 	.word	0x0800740d
 8007430:	0800740d 	.word	0x0800740d
 8007434:	0800740d 	.word	0x0800740d
 8007438:	0800740d 	.word	0x0800740d
 800743c:	08007491 	.word	0x08007491
 8007440:	0800740d 	.word	0x0800740d
 8007444:	0800740d 	.word	0x0800740d
 8007448:	0800740d 	.word	0x0800740d
 800744c:	0800740d 	.word	0x0800740d
 8007450:	0800759d 	.word	0x0800759d
 8007454:	080074c1 	.word	0x080074c1
 8007458:	0800757f 	.word	0x0800757f
 800745c:	0800740d 	.word	0x0800740d
 8007460:	0800740d 	.word	0x0800740d
 8007464:	080075bf 	.word	0x080075bf
 8007468:	0800740d 	.word	0x0800740d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800740d 	.word	0x0800740d
 8007474:	0800740d 	.word	0x0800740d
 8007478:	08007587 	.word	0x08007587
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	602a      	str	r2, [r5, #0]
 8007484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800748c:	2301      	movs	r3, #1
 800748e:	e0a3      	b.n	80075d8 <_printf_i+0x1f4>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	6829      	ldr	r1, [r5, #0]
 8007494:	0606      	lsls	r6, r0, #24
 8007496:	f101 0304 	add.w	r3, r1, #4
 800749a:	d50a      	bpl.n	80074b2 <_printf_i+0xce>
 800749c:	680e      	ldr	r6, [r1, #0]
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	da03      	bge.n	80074ac <_printf_i+0xc8>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	4276      	negs	r6, r6
 80074a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ac:	485e      	ldr	r0, [pc, #376]	; (8007628 <_printf_i+0x244>)
 80074ae:	230a      	movs	r3, #10
 80074b0:	e019      	b.n	80074e6 <_printf_i+0x102>
 80074b2:	680e      	ldr	r6, [r1, #0]
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ba:	bf18      	it	ne
 80074bc:	b236      	sxthne	r6, r6
 80074be:	e7ef      	b.n	80074a0 <_printf_i+0xbc>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	0601      	lsls	r1, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xec>
 80074cc:	681e      	ldr	r6, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0xf2>
 80074d0:	0646      	lsls	r6, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xe8>
 80074d4:	881e      	ldrh	r6, [r3, #0]
 80074d6:	4854      	ldr	r0, [pc, #336]	; (8007628 <_printf_i+0x244>)
 80074d8:	2f6f      	cmp	r7, #111	; 0x6f
 80074da:	bf0c      	ite	eq
 80074dc:	2308      	moveq	r3, #8
 80074de:	230a      	movne	r3, #10
 80074e0:	2100      	movs	r1, #0
 80074e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e6:	6865      	ldr	r5, [r4, #4]
 80074e8:	60a5      	str	r5, [r4, #8]
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	bfa2      	ittt	ge
 80074ee:	6821      	ldrge	r1, [r4, #0]
 80074f0:	f021 0104 	bicge.w	r1, r1, #4
 80074f4:	6021      	strge	r1, [r4, #0]
 80074f6:	b90e      	cbnz	r6, 80074fc <_printf_i+0x118>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d04d      	beq.n	8007598 <_printf_i+0x1b4>
 80074fc:	4615      	mov	r5, r2
 80074fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007502:	fb03 6711 	mls	r7, r3, r1, r6
 8007506:	5dc7      	ldrb	r7, [r0, r7]
 8007508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800750c:	4637      	mov	r7, r6
 800750e:	42bb      	cmp	r3, r7
 8007510:	460e      	mov	r6, r1
 8007512:	d9f4      	bls.n	80074fe <_printf_i+0x11a>
 8007514:	2b08      	cmp	r3, #8
 8007516:	d10b      	bne.n	8007530 <_printf_i+0x14c>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07de      	lsls	r6, r3, #31
 800751c:	d508      	bpl.n	8007530 <_printf_i+0x14c>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4299      	cmp	r1, r3
 8007524:	bfde      	ittt	le
 8007526:	2330      	movle	r3, #48	; 0x30
 8007528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007530:	1b52      	subs	r2, r2, r5
 8007532:	6122      	str	r2, [r4, #16]
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	464b      	mov	r3, r9
 800753a:	aa03      	add	r2, sp, #12
 800753c:	4621      	mov	r1, r4
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fee2 	bl	8007308 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	d14c      	bne.n	80075e2 <_printf_i+0x1fe>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b004      	add	sp, #16
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	4835      	ldr	r0, [pc, #212]	; (8007628 <_printf_i+0x244>)
 8007554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007560:	6029      	str	r1, [r5, #0]
 8007562:	061d      	lsls	r5, r3, #24
 8007564:	d514      	bpl.n	8007590 <_printf_i+0x1ac>
 8007566:	07df      	lsls	r7, r3, #31
 8007568:	bf44      	itt	mi
 800756a:	f043 0320 	orrmi.w	r3, r3, #32
 800756e:	6023      	strmi	r3, [r4, #0]
 8007570:	b91e      	cbnz	r6, 800757a <_printf_i+0x196>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	f023 0320 	bic.w	r3, r3, #32
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	2310      	movs	r3, #16
 800757c:	e7b0      	b.n	80074e0 <_printf_i+0xfc>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	2378      	movs	r3, #120	; 0x78
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <_printf_i+0x248>)
 800758a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800758e:	e7e3      	b.n	8007558 <_printf_i+0x174>
 8007590:	0659      	lsls	r1, r3, #25
 8007592:	bf48      	it	mi
 8007594:	b2b6      	uxthmi	r6, r6
 8007596:	e7e6      	b.n	8007566 <_printf_i+0x182>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bb      	b.n	8007514 <_printf_i+0x130>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1cc>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1d2>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c8>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7ba      	b.n	8007534 <_printf_i+0x150>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe08 	bl	80001e0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1f2>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7a8      	b.n	8007534 <_printf_i+0x150>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ab      	beq.n	8007548 <_printf_i+0x164>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x23a>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a4      	b.n	800754c <_printf_i+0x168>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09b      	beq.n	8007548 <_printf_i+0x164>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x21e>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x212>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x22e>
 8007626:	bf00      	nop
 8007628:	08007bd9 	.word	0x08007bd9
 800762c:	08007bea 	.word	0x08007bea

08007630 <memcpy>:
 8007630:	440a      	add	r2, r1
 8007632:	4291      	cmp	r1, r2
 8007634:	f100 33ff 	add.w	r3, r0, #4294967295
 8007638:	d100      	bne.n	800763c <memcpy+0xc>
 800763a:	4770      	bx	lr
 800763c:	b510      	push	{r4, lr}
 800763e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007646:	4291      	cmp	r1, r2
 8007648:	d1f9      	bne.n	800763e <memcpy+0xe>
 800764a:	bd10      	pop	{r4, pc}

0800764c <memmove>:
 800764c:	4288      	cmp	r0, r1
 800764e:	b510      	push	{r4, lr}
 8007650:	eb01 0402 	add.w	r4, r1, r2
 8007654:	d902      	bls.n	800765c <memmove+0x10>
 8007656:	4284      	cmp	r4, r0
 8007658:	4623      	mov	r3, r4
 800765a:	d807      	bhi.n	800766c <memmove+0x20>
 800765c:	1e43      	subs	r3, r0, #1
 800765e:	42a1      	cmp	r1, r4
 8007660:	d008      	beq.n	8007674 <memmove+0x28>
 8007662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800766a:	e7f8      	b.n	800765e <memmove+0x12>
 800766c:	4402      	add	r2, r0
 800766e:	4601      	mov	r1, r0
 8007670:	428a      	cmp	r2, r1
 8007672:	d100      	bne.n	8007676 <memmove+0x2a>
 8007674:	bd10      	pop	{r4, pc}
 8007676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800767a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800767e:	e7f7      	b.n	8007670 <memmove+0x24>

08007680 <_free_r>:
 8007680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007682:	2900      	cmp	r1, #0
 8007684:	d044      	beq.n	8007710 <_free_r+0x90>
 8007686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768a:	9001      	str	r0, [sp, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f1a1 0404 	sub.w	r4, r1, #4
 8007692:	bfb8      	it	lt
 8007694:	18e4      	addlt	r4, r4, r3
 8007696:	f000 f913 	bl	80078c0 <__malloc_lock>
 800769a:	4a1e      	ldr	r2, [pc, #120]	; (8007714 <_free_r+0x94>)
 800769c:	9801      	ldr	r0, [sp, #4]
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	b933      	cbnz	r3, 80076b0 <_free_r+0x30>
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	6014      	str	r4, [r2, #0]
 80076a6:	b003      	add	sp, #12
 80076a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076ac:	f000 b90e 	b.w	80078cc <__malloc_unlock>
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d908      	bls.n	80076c6 <_free_r+0x46>
 80076b4:	6825      	ldr	r5, [r4, #0]
 80076b6:	1961      	adds	r1, r4, r5
 80076b8:	428b      	cmp	r3, r1
 80076ba:	bf01      	itttt	eq
 80076bc:	6819      	ldreq	r1, [r3, #0]
 80076be:	685b      	ldreq	r3, [r3, #4]
 80076c0:	1949      	addeq	r1, r1, r5
 80076c2:	6021      	streq	r1, [r4, #0]
 80076c4:	e7ed      	b.n	80076a2 <_free_r+0x22>
 80076c6:	461a      	mov	r2, r3
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	b10b      	cbz	r3, 80076d0 <_free_r+0x50>
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	d9fa      	bls.n	80076c6 <_free_r+0x46>
 80076d0:	6811      	ldr	r1, [r2, #0]
 80076d2:	1855      	adds	r5, r2, r1
 80076d4:	42a5      	cmp	r5, r4
 80076d6:	d10b      	bne.n	80076f0 <_free_r+0x70>
 80076d8:	6824      	ldr	r4, [r4, #0]
 80076da:	4421      	add	r1, r4
 80076dc:	1854      	adds	r4, r2, r1
 80076de:	42a3      	cmp	r3, r4
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	d1e0      	bne.n	80076a6 <_free_r+0x26>
 80076e4:	681c      	ldr	r4, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6053      	str	r3, [r2, #4]
 80076ea:	4421      	add	r1, r4
 80076ec:	6011      	str	r1, [r2, #0]
 80076ee:	e7da      	b.n	80076a6 <_free_r+0x26>
 80076f0:	d902      	bls.n	80076f8 <_free_r+0x78>
 80076f2:	230c      	movs	r3, #12
 80076f4:	6003      	str	r3, [r0, #0]
 80076f6:	e7d6      	b.n	80076a6 <_free_r+0x26>
 80076f8:	6825      	ldr	r5, [r4, #0]
 80076fa:	1961      	adds	r1, r4, r5
 80076fc:	428b      	cmp	r3, r1
 80076fe:	bf04      	itt	eq
 8007700:	6819      	ldreq	r1, [r3, #0]
 8007702:	685b      	ldreq	r3, [r3, #4]
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	bf04      	itt	eq
 8007708:	1949      	addeq	r1, r1, r5
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	6054      	str	r4, [r2, #4]
 800770e:	e7ca      	b.n	80076a6 <_free_r+0x26>
 8007710:	b003      	add	sp, #12
 8007712:	bd30      	pop	{r4, r5, pc}
 8007714:	200002dc 	.word	0x200002dc

08007718 <sbrk_aligned>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4e0e      	ldr	r6, [pc, #56]	; (8007754 <sbrk_aligned+0x3c>)
 800771c:	460c      	mov	r4, r1
 800771e:	6831      	ldr	r1, [r6, #0]
 8007720:	4605      	mov	r5, r0
 8007722:	b911      	cbnz	r1, 800772a <sbrk_aligned+0x12>
 8007724:	f000 f8bc 	bl	80078a0 <_sbrk_r>
 8007728:	6030      	str	r0, [r6, #0]
 800772a:	4621      	mov	r1, r4
 800772c:	4628      	mov	r0, r5
 800772e:	f000 f8b7 	bl	80078a0 <_sbrk_r>
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	d00a      	beq.n	800774c <sbrk_aligned+0x34>
 8007736:	1cc4      	adds	r4, r0, #3
 8007738:	f024 0403 	bic.w	r4, r4, #3
 800773c:	42a0      	cmp	r0, r4
 800773e:	d007      	beq.n	8007750 <sbrk_aligned+0x38>
 8007740:	1a21      	subs	r1, r4, r0
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f8ac 	bl	80078a0 <_sbrk_r>
 8007748:	3001      	adds	r0, #1
 800774a:	d101      	bne.n	8007750 <sbrk_aligned+0x38>
 800774c:	f04f 34ff 	mov.w	r4, #4294967295
 8007750:	4620      	mov	r0, r4
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	200002e0 	.word	0x200002e0

08007758 <_malloc_r>:
 8007758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	1ccd      	adds	r5, r1, #3
 800775e:	f025 0503 	bic.w	r5, r5, #3
 8007762:	3508      	adds	r5, #8
 8007764:	2d0c      	cmp	r5, #12
 8007766:	bf38      	it	cc
 8007768:	250c      	movcc	r5, #12
 800776a:	2d00      	cmp	r5, #0
 800776c:	4607      	mov	r7, r0
 800776e:	db01      	blt.n	8007774 <_malloc_r+0x1c>
 8007770:	42a9      	cmp	r1, r5
 8007772:	d905      	bls.n	8007780 <_malloc_r+0x28>
 8007774:	230c      	movs	r3, #12
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	2600      	movs	r6, #0
 800777a:	4630      	mov	r0, r6
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	4e2e      	ldr	r6, [pc, #184]	; (800783c <_malloc_r+0xe4>)
 8007782:	f000 f89d 	bl	80078c0 <__malloc_lock>
 8007786:	6833      	ldr	r3, [r6, #0]
 8007788:	461c      	mov	r4, r3
 800778a:	bb34      	cbnz	r4, 80077da <_malloc_r+0x82>
 800778c:	4629      	mov	r1, r5
 800778e:	4638      	mov	r0, r7
 8007790:	f7ff ffc2 	bl	8007718 <sbrk_aligned>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	4604      	mov	r4, r0
 8007798:	d14d      	bne.n	8007836 <_malloc_r+0xde>
 800779a:	6834      	ldr	r4, [r6, #0]
 800779c:	4626      	mov	r6, r4
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d140      	bne.n	8007824 <_malloc_r+0xcc>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	4631      	mov	r1, r6
 80077a6:	4638      	mov	r0, r7
 80077a8:	eb04 0803 	add.w	r8, r4, r3
 80077ac:	f000 f878 	bl	80078a0 <_sbrk_r>
 80077b0:	4580      	cmp	r8, r0
 80077b2:	d13a      	bne.n	800782a <_malloc_r+0xd2>
 80077b4:	6821      	ldr	r1, [r4, #0]
 80077b6:	3503      	adds	r5, #3
 80077b8:	1a6d      	subs	r5, r5, r1
 80077ba:	f025 0503 	bic.w	r5, r5, #3
 80077be:	3508      	adds	r5, #8
 80077c0:	2d0c      	cmp	r5, #12
 80077c2:	bf38      	it	cc
 80077c4:	250c      	movcc	r5, #12
 80077c6:	4629      	mov	r1, r5
 80077c8:	4638      	mov	r0, r7
 80077ca:	f7ff ffa5 	bl	8007718 <sbrk_aligned>
 80077ce:	3001      	adds	r0, #1
 80077d0:	d02b      	beq.n	800782a <_malloc_r+0xd2>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	442b      	add	r3, r5
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	e00e      	b.n	80077f8 <_malloc_r+0xa0>
 80077da:	6822      	ldr	r2, [r4, #0]
 80077dc:	1b52      	subs	r2, r2, r5
 80077de:	d41e      	bmi.n	800781e <_malloc_r+0xc6>
 80077e0:	2a0b      	cmp	r2, #11
 80077e2:	d916      	bls.n	8007812 <_malloc_r+0xba>
 80077e4:	1961      	adds	r1, r4, r5
 80077e6:	42a3      	cmp	r3, r4
 80077e8:	6025      	str	r5, [r4, #0]
 80077ea:	bf18      	it	ne
 80077ec:	6059      	strne	r1, [r3, #4]
 80077ee:	6863      	ldr	r3, [r4, #4]
 80077f0:	bf08      	it	eq
 80077f2:	6031      	streq	r1, [r6, #0]
 80077f4:	5162      	str	r2, [r4, r5]
 80077f6:	604b      	str	r3, [r1, #4]
 80077f8:	4638      	mov	r0, r7
 80077fa:	f104 060b 	add.w	r6, r4, #11
 80077fe:	f000 f865 	bl	80078cc <__malloc_unlock>
 8007802:	f026 0607 	bic.w	r6, r6, #7
 8007806:	1d23      	adds	r3, r4, #4
 8007808:	1af2      	subs	r2, r6, r3
 800780a:	d0b6      	beq.n	800777a <_malloc_r+0x22>
 800780c:	1b9b      	subs	r3, r3, r6
 800780e:	50a3      	str	r3, [r4, r2]
 8007810:	e7b3      	b.n	800777a <_malloc_r+0x22>
 8007812:	6862      	ldr	r2, [r4, #4]
 8007814:	42a3      	cmp	r3, r4
 8007816:	bf0c      	ite	eq
 8007818:	6032      	streq	r2, [r6, #0]
 800781a:	605a      	strne	r2, [r3, #4]
 800781c:	e7ec      	b.n	80077f8 <_malloc_r+0xa0>
 800781e:	4623      	mov	r3, r4
 8007820:	6864      	ldr	r4, [r4, #4]
 8007822:	e7b2      	b.n	800778a <_malloc_r+0x32>
 8007824:	4634      	mov	r4, r6
 8007826:	6876      	ldr	r6, [r6, #4]
 8007828:	e7b9      	b.n	800779e <_malloc_r+0x46>
 800782a:	230c      	movs	r3, #12
 800782c:	603b      	str	r3, [r7, #0]
 800782e:	4638      	mov	r0, r7
 8007830:	f000 f84c 	bl	80078cc <__malloc_unlock>
 8007834:	e7a1      	b.n	800777a <_malloc_r+0x22>
 8007836:	6025      	str	r5, [r4, #0]
 8007838:	e7de      	b.n	80077f8 <_malloc_r+0xa0>
 800783a:	bf00      	nop
 800783c:	200002dc 	.word	0x200002dc

08007840 <_realloc_r>:
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	4680      	mov	r8, r0
 8007846:	4614      	mov	r4, r2
 8007848:	460e      	mov	r6, r1
 800784a:	b921      	cbnz	r1, 8007856 <_realloc_r+0x16>
 800784c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007850:	4611      	mov	r1, r2
 8007852:	f7ff bf81 	b.w	8007758 <_malloc_r>
 8007856:	b92a      	cbnz	r2, 8007864 <_realloc_r+0x24>
 8007858:	f7ff ff12 	bl	8007680 <_free_r>
 800785c:	4625      	mov	r5, r4
 800785e:	4628      	mov	r0, r5
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	f000 f838 	bl	80078d8 <_malloc_usable_size_r>
 8007868:	4284      	cmp	r4, r0
 800786a:	4607      	mov	r7, r0
 800786c:	d802      	bhi.n	8007874 <_realloc_r+0x34>
 800786e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007872:	d812      	bhi.n	800789a <_realloc_r+0x5a>
 8007874:	4621      	mov	r1, r4
 8007876:	4640      	mov	r0, r8
 8007878:	f7ff ff6e 	bl	8007758 <_malloc_r>
 800787c:	4605      	mov	r5, r0
 800787e:	2800      	cmp	r0, #0
 8007880:	d0ed      	beq.n	800785e <_realloc_r+0x1e>
 8007882:	42bc      	cmp	r4, r7
 8007884:	4622      	mov	r2, r4
 8007886:	4631      	mov	r1, r6
 8007888:	bf28      	it	cs
 800788a:	463a      	movcs	r2, r7
 800788c:	f7ff fed0 	bl	8007630 <memcpy>
 8007890:	4631      	mov	r1, r6
 8007892:	4640      	mov	r0, r8
 8007894:	f7ff fef4 	bl	8007680 <_free_r>
 8007898:	e7e1      	b.n	800785e <_realloc_r+0x1e>
 800789a:	4635      	mov	r5, r6
 800789c:	e7df      	b.n	800785e <_realloc_r+0x1e>
	...

080078a0 <_sbrk_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d06      	ldr	r5, [pc, #24]	; (80078bc <_sbrk_r+0x1c>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	602b      	str	r3, [r5, #0]
 80078ac:	f7f9 f9d0 	bl	8000c50 <_sbrk>
 80078b0:	1c43      	adds	r3, r0, #1
 80078b2:	d102      	bne.n	80078ba <_sbrk_r+0x1a>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	b103      	cbz	r3, 80078ba <_sbrk_r+0x1a>
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	bd38      	pop	{r3, r4, r5, pc}
 80078bc:	200002e4 	.word	0x200002e4

080078c0 <__malloc_lock>:
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <__malloc_lock+0x8>)
 80078c2:	f000 b811 	b.w	80078e8 <__retarget_lock_acquire_recursive>
 80078c6:	bf00      	nop
 80078c8:	200002e8 	.word	0x200002e8

080078cc <__malloc_unlock>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__malloc_unlock+0x8>)
 80078ce:	f000 b80c 	b.w	80078ea <__retarget_lock_release_recursive>
 80078d2:	bf00      	nop
 80078d4:	200002e8 	.word	0x200002e8

080078d8 <_malloc_usable_size_r>:
 80078d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078dc:	1f18      	subs	r0, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfbc      	itt	lt
 80078e2:	580b      	ldrlt	r3, [r1, r0]
 80078e4:	18c0      	addlt	r0, r0, r3
 80078e6:	4770      	bx	lr

080078e8 <__retarget_lock_acquire_recursive>:
 80078e8:	4770      	bx	lr

080078ea <__retarget_lock_release_recursive>:
 80078ea:	4770      	bx	lr

080078ec <_init>:
 80078ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ee:	bf00      	nop
 80078f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078f2:	bc08      	pop	{r3}
 80078f4:	469e      	mov	lr, r3
 80078f6:	4770      	bx	lr

080078f8 <_fini>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	bf00      	nop
 80078fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fe:	bc08      	pop	{r3}
 8007900:	469e      	mov	lr, r3
 8007902:	4770      	bx	lr
