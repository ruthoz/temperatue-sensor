
queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c00  08008c00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c08  08008c08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00018c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a8c  20000074  08008c84  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b00  08008c84  00021b00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b59a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377f  00000000  00000000  0003b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00040510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1f7  00000000  00000000  00041b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a099  00000000  00000000  0006bcff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100182  00000000  00000000  00085d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc8  00000000  00000000  00185f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800890c 	.word	0x0800890c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800890c 	.word	0x0800890c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_write>:
extern osMessageQueueId_t brightnessQueueHandle;
extern LedStatus ledState;

////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <_write+0x28>)
 80005bc:	f003 fa28 	bl	8003a10 <HAL_UART_Transmit>
	return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000014c 	.word	0x2000014c

080005d0 <Communication_commTask>:
//////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
int Communication_commTask()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80005d6:	1db9      	adds	r1, r7, #6
 80005d8:	230a      	movs	r3, #10
 80005da:	2201      	movs	r2, #1
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <Communication_commTask+0xe8>)
 80005de:	f003 faab 	bl	8003b38 <HAL_UART_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d020      	beq.n	800062e <Communication_commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <Communication_commTask+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d011      	beq.n	800061e <Communication_commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <Communication_commTask+0xe8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2208      	movs	r2, #8
 8000600:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000602:	e00c      	b.n	800061e <Communication_commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <Communication_commTask+0xec>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	492c      	ldr	r1, [pc, #176]	; (80006bc <Communication_commTask+0xec>)
 800060c:	600a      	str	r2, [r1, #0]
 800060e:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <Communication_commTask+0xf0>)
 8000610:	1899      	adds	r1, r3, r2
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	2201      	movs	r2, #1
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <Communication_commTask+0xe8>)
 800061a:	f003 f9f9 	bl	8003a10 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <Communication_commTask+0xec>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <Communication_commTask+0xf4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbec      	blt.n	8000604 <Communication_commTask+0x34>
		}

		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e03f      	b.n	80006ae <Communication_commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d023      	beq.n	800067c <Communication_commTask+0xac>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d020      	beq.n	800067c <Communication_commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <Communication_commTask+0xf4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b63      	cmp	r3, #99	; 0x63
 8000640:	dd05      	ble.n	800064e <Communication_commTask+0x7e>
		{
			cmdcount = 0;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <Communication_commTask+0xf4>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Communication_commTask+0xec>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <Communication_commTask+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	491b      	ldr	r1, [pc, #108]	; (80006c4 <Communication_commTask+0xf4>)
 8000656:	600a      	str	r2, [r1, #0]
 8000658:	79b9      	ldrb	r1, [r7, #6]
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <Communication_commTask+0xf0>)
 800065c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e025      	b.n	80006ae <Communication_commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <Communication_commTask+0xec>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	4914      	ldr	r1, [pc, #80]	; (80006bc <Communication_commTask+0xec>)
 800066a:	600a      	str	r2, [r1, #0]
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <Communication_commTask+0xf0>)
 800066e:	1899      	adds	r1, r3, r2
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	2201      	movs	r2, #1
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <Communication_commTask+0xe8>)
 8000678:	f003 f9ca 	bl	8003a10 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <Communication_commTask+0xec>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <Communication_commTask+0xf4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbec      	blt.n	8000662 <Communication_commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	2202      	movs	r2, #2
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <Communication_commTask+0xf8>)
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <Communication_commTask+0xe8>)
 8000692:	f003 f9bd 	bl	8003a10 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Communication_commTask+0xf4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <Communication_commTask+0xf0>)
 800069c:	2100      	movs	r1, #0
 800069e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <Communication_commTask+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <Communication_commTask+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
	return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000014c 	.word	0x2000014c
 80006bc:	200000f8 	.word	0x200000f8
 80006c0:	20000090 	.word	0x20000090
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	08008924 	.word	0x08008924

080006cc <Communication_handleCommand>:


void Communication_handleCommand()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];
    int params = sscanf((const char*)cmdbuffer, "%s %s", cmd, param);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	f107 0218 	add.w	r2, r7, #24
 80006d8:	4921      	ldr	r1, [pc, #132]	; (8000760 <Communication_handleCommand+0x94>)
 80006da:	4822      	ldr	r0, [pc, #136]	; (8000764 <Communication_handleCommand+0x98>)
 80006dc:	f006 ff90 	bl	8007600 <siscanf>
 80006e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d037      	beq.n	8000758 <Communication_handleCommand+0x8c>
	   return;
   }

   if (strcmp(cmd, "bright") == 0){
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	491e      	ldr	r1, [pc, #120]	; (8000768 <Communication_handleCommand+0x9c>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd6e 	bl	80001d0 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d110      	bne.n	800071c <Communication_handleCommand+0x50>
	   ledState.brightness = atoi(param);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fec5 	bl	800748c <atoi>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <Communication_handleCommand+0xa0>)
 8000708:	805a      	strh	r2, [r3, #2]
	   osMessageQueuePut(brightnessQueueHandle, &ledState, 0, osWaitForever);
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <Communication_handleCommand+0xa4>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2200      	movs	r2, #0
 8000714:	4915      	ldr	r1, [pc, #84]	; (800076c <Communication_handleCommand+0xa0>)
 8000716:	f004 f8e7 	bl	80048e8 <osMessageQueuePut>
 800071a:	e01e      	b.n	800075a <Communication_handleCommand+0x8e>
   }
   else if (strcmp(cmd, "delay") == 0){
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4914      	ldr	r1, [pc, #80]	; (8000774 <Communication_handleCommand+0xa8>)
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd54 	bl	80001d0 <strcmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d110      	bne.n	8000750 <Communication_handleCommand+0x84>
   	   ledState.delay = atoi(param);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f006 feab 	bl	800748c <atoi>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <Communication_handleCommand+0xa0>)
 800073c:	801a      	strh	r2, [r3, #0]
   	   osMessageQueuePut(brightnessQueueHandle, &ledState, 0, osWaitForever);
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <Communication_handleCommand+0xa4>)
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	2200      	movs	r2, #0
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <Communication_handleCommand+0xa0>)
 800074a:	f004 f8cd 	bl	80048e8 <osMessageQueuePut>
 800074e:	e004      	b.n	800075a <Communication_handleCommand+0x8e>
   }
   else{
   	  printf("Invalid command\r\n");
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <Communication_handleCommand+0xac>)
 8000752:	f006 ff4d 	bl	80075f0 <puts>
 8000756:	e000      	b.n	800075a <Communication_handleCommand+0x8e>
	   return;
 8000758:	bf00      	nop
   }
}
 800075a:	3730      	adds	r7, #48	; 0x30
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	08008928 	.word	0x08008928
 8000764:	20000090 	.word	0x20000090
 8000768:	08008930 	.word	0x08008930
 800076c:	200000fc 	.word	0x200000fc
 8000770:	200001dc 	.word	0x200001dc
 8000774:	08008938 	.word	0x08008938
 8000778:	08008940 	.word	0x08008940

0800077c <Entry_commTask>:

void Entry_commTask(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_uartTask */
  /* Infinite loop */
  for(;;)
  {
	  if (Communication_commTask()){
 8000784:	f7ff ff24 	bl	80005d0 <Communication_commTask>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0fa      	beq.n	8000784 <Entry_commTask+0x8>
		  Communication_handleCommand();
 800078e:	f7ff ff9d 	bl	80006cc <Communication_handleCommand>
	  if (Communication_commTask()){
 8000792:	e7f7      	b.n	8000784 <Entry_commTask+0x8>

08000794 <Entry_blinkTask>:
//	led->delay = 1000;
//}


void Entry_blinkTask(void *obj)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_blinkTask */
  HAL_TIM_Base_Start_IT(&htim2);
 800079c:	4816      	ldr	r0, [pc, #88]	; (80007f8 <Entry_blinkTask+0x64>)
 800079e:	f002 f99b 	bl	8002ad8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80007a2:	2100      	movs	r1, #0
 80007a4:	4814      	ldr	r0, [pc, #80]	; (80007f8 <Entry_blinkTask+0x64>)
 80007a6:	f002 fa5f 	bl	8002c68 <HAL_TIM_PWM_Start_IT>
  LedStatus msg;
  uint16_t brightness = 10;
 80007aa:	230a      	movs	r3, #10
 80007ac:	82fb      	strh	r3, [r7, #22]
  uint16_t delay = 500;
 80007ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007b2:	82bb      	strh	r3, [r7, #20]
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <Entry_blinkTask+0x64>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
	  status = osMessageQueueGet(brightnessQueueHandle, &msg, 0, delay);
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Entry_blinkTask+0x68>)
 80007be:	6818      	ldr	r0, [r3, #0]
 80007c0:	8abb      	ldrh	r3, [r7, #20]
 80007c2:	f107 010c 	add.w	r1, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	f004 f8ee 	bl	80049a8 <osMessageQueueGet>
 80007cc:	6138      	str	r0, [r7, #16]
	  if (status == osOK) {
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d103      	bne.n	80007dc <Entry_blinkTask+0x48>
		  brightness = msg.brightness;
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	82fb      	strh	r3, [r7, #22]
		  delay = msg.delay;
 80007d8:	89bb      	ldrh	r3, [r7, #12]
 80007da:	82bb      	strh	r3, [r7, #20]
	  }
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, brightness*10);
 80007dc:	8afa      	ldrh	r2, [r7, #22]
 80007de:	4613      	mov	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <Entry_blinkTask+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
	  osDelay(delay);
 80007ee:	8abb      	ldrh	r3, [r7, #20]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f003 ffeb 	bl	80047cc <osDelay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007f6:	e7dd      	b.n	80007b4 <Entry_blinkTask+0x20>
 80007f8:	20000100 	.word	0x20000100
 80007fc:	200001dc 	.word	0x200001dc

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fb3c 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f842 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 f91c 	bl	8000a48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000810:	f000 f8ea 	bl	80009e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000814:	f000 f88e 	bl	8000934 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000818:	f003 fefc 	bl	8004614 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of brightnessQueue */
  brightnessQueueHandle = osMessageQueueNew (1, 4, &brightnessQueue_attributes);
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <main+0x64>)
 800081e:	2104      	movs	r1, #4
 8000820:	2001      	movs	r0, #1
 8000822:	f003 ffee 	bl	8004802 <osMessageQueueNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <main+0x68>)
 800082a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <main+0x6c>)
 800082e:	2100      	movs	r1, #0
 8000830:	480f      	ldr	r0, [pc, #60]	; (8000870 <main+0x70>)
 8000832:	f003 ff39 	bl	80046a8 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <main+0x74>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(Entry_blinkTask, NULL, &blinkTask_attributes);
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <main+0x78>)
 800083e:	2100      	movs	r1, #0
 8000840:	480e      	ldr	r0, [pc, #56]	; (800087c <main+0x7c>)
 8000842:	f003 ff31 	bl	80046a8 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <main+0x80>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(Entry_commTask, NULL, &commTask_attributes);
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <main+0x84>)
 800084e:	2100      	movs	r1, #0
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <main+0x88>)
 8000852:	f003 ff29 	bl	80046a8 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <main+0x8c>)
 800085a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800085c:	f003 fefe 	bl	800465c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x60>
 8000862:	bf00      	nop
 8000864:	08008a18 	.word	0x08008a18
 8000868:	200001dc 	.word	0x200001dc
 800086c:	080089ac 	.word	0x080089ac
 8000870:	08000aed 	.word	0x08000aed
 8000874:	200001d0 	.word	0x200001d0
 8000878:	080089d0 	.word	0x080089d0
 800087c:	08000795 	.word	0x08000795
 8000880:	200001d4 	.word	0x200001d4
 8000884:	080089f4 	.word	0x080089f4
 8000888:	0800077d 	.word	0x0800077d
 800088c:	200001d8 	.word	0x200001d8

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	; 0x58
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2244      	movs	r2, #68	; 0x44
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fe30 	bl	8007504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b6:	f000 fdfd 	bl	80014b4 <HAL_PWREx_ControlVoltageScaling>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c0:	f000 f91c 	bl	8000afc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2310      	movs	r3, #16
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008de:	230a      	movs	r3, #10
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e2:	2307      	movs	r3, #7
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fe34 	bl	8001560 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008fe:	f000 f8fd 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2303      	movs	r3, #3
 8000908:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f9fc 	bl	8001d18 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000926:	f000 f8e9 	bl	8000afc <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3758      	adds	r7, #88	; 0x58
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000946:	463b      	mov	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_TIM2_Init+0xb0>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_TIM2_Init+0xb0>)
 8000962:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000966:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_TIM2_Init+0xb0>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_TIM2_Init+0xb0>)
 8000970:	2264      	movs	r2, #100	; 0x64
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_TIM2_Init+0xb0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_TIM2_Init+0xb0>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000980:	4818      	ldr	r0, [pc, #96]	; (80009e4 <MX_TIM2_Init+0xb0>)
 8000982:	f002 f919 	bl	8002bb8 <HAL_TIM_PWM_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 f8b6 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_TIM2_Init+0xb0>)
 80009a0:	f002 ff60 	bl	8003864 <HAL_TIMEx_MasterConfigSynchronization>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009aa:	f000 f8a7 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 80009b2:	2364      	movs	r3, #100	; 0x64
 80009b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM2_Init+0xb0>)
 80009c6:	f002 faa3 	bl	8002f10 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009d0:	f000 f894 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM2_Init+0xb0>)
 80009d6:	f000 f8dd 	bl	8000b94 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000100 	.word	0x20000100

080009e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_USART2_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a2c:	f002 ffa2 	bl	8003974 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f861 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000014c 	.word	0x2000014c
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x9c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_GPIO_Init+0xa0>)
 8000ad6:	f000 fb35 	bl	8001144 <HAL_GPIO_Init>

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	; 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f003 fe69 	bl	80047cc <osDelay>
 8000afa:	e7fb      	b.n	8000af4 <StartDefaultTask+0x8>

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_MspInit+0x4c>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 fad4 	bl	80010f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b68:	d10b      	bne.n	8000b82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_TIM_PWM_MspInit+0x38>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_TIM_PWM_MspInit+0x38>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_TIM_PWM_MspInit+0x38>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d11c      	bne.n	8000bf0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_TIM_MspPostInit+0x64>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_TIM_MspPostInit+0x64>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_TIM_MspPostInit+0x64>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f000 faaa 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0ac      	sub	sp, #176	; 0xb0
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2288      	movs	r2, #136	; 0x88
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f006 fc71 	bl	8007504 <memset>
  if(huart->Instance==USART2)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <HAL_UART_MspInit+0xb0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d13b      	bne.n	8000ca4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fa91 	bl	8002160 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c44:	f7ff ff5a 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4c:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c52:	6593      	str	r3, [r2, #88]	; 0x58
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6c:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_UART_MspInit+0xb4>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c78:	230c      	movs	r3, #12
 8000c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c90:	2307      	movs	r3, #7
 8000c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca0:	f000 fa50 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	37b0      	adds	r7, #176	; 0xb0
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce4:	f000 f928 	bl	8000f38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ce8:	f005 fb68 	bl	80063bc <xTaskGetSchedulerState>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d001      	beq.n	8000cf6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cf2:	f006 f951 	bl	8006f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e00a      	b.n	8000d22 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d0c:	f3af 8000 	nop.w
 8000d10:	4601      	mov	r1, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	60ba      	str	r2, [r7, #8]
 8000d18:	b2ca      	uxtb	r2, r1
 8000d1a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbf0      	blt.n	8000d0c <_read+0x12>
	}

return len;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5c:	605a      	str	r2, [r3, #4]
	return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_isatty>:

int _isatty(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
	return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f006 fb62 	bl	8007494 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20018000 	.word	0x20018000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200001e0 	.word	0x200001e0
 8000e04:	20001b00 	.word	0x20001b00

08000e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f006 fb21 	bl	80074a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fccf 	bl	8000800 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e70:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8000e74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e78:	20001b00 	.word	0x20001b00

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_Init+0x3c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <HAL_Init+0x3c>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f920 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f000 f80f 	bl	8000ec0 <HAL_InitTick>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	e001      	b.n	8000eb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eae:	f7ff fe2b 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_InitTick+0x6c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d023      	beq.n	8000f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_InitTick+0x70>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_InitTick+0x6c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f91d 	bl	800112a <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d809      	bhi.n	8000f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f8f5 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0x74>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e007      	b.n	8000f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e004      	b.n	8000f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e001      	b.n	8000f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200001e4 	.word	0x200001e4

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200001e4 	.word	0x200001e4

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e17f      	b.n	8001454 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8171 	beq.w	800144e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d005      	beq.n	8001184 <HAL_GPIO_Init+0x40>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d130      	bne.n	80011e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ba:	2201      	movs	r2, #1
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	f003 0201 	and.w	r2, r3, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d118      	bne.n	8001224 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	08db      	lsrs	r3, r3, #3
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	6939      	ldr	r1, [r7, #16]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80ac 	beq.w	800144e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_GPIO_Init+0x330>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130e:	4a5a      	ldr	r2, [pc, #360]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001338:	d025      	beq.n	8001386 <HAL_GPIO_Init+0x242>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01f      	beq.n	8001382 <HAL_GPIO_Init+0x23e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4e      	ldr	r2, [pc, #312]	; (8001480 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x23a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x236>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4c      	ldr	r2, [pc, #304]	; (8001488 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x232>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x22e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x22a>
 800136a:	2306      	movs	r3, #6
 800136c:	e00c      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800136e:	2307      	movs	r3, #7
 8001370:	e00a      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001376:	2304      	movs	r3, #4
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x244>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x244>
 8001386:	2300      	movs	r3, #0
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	f002 0203 	and.w	r2, r2, #3
 800138e:	0092      	lsls	r2, r2, #2
 8001390:	4093      	lsls	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_GPIO_Init+0x334>)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3302      	adds	r3, #2
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ca:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <HAL_GPIO_Init+0x350>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141e:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_GPIO_Init+0x350>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_GPIO_Init+0x350>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa22 f303 	lsr.w	r3, r2, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f47f ae78 	bne.w	8001154 <HAL_GPIO_Init+0x10>
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	48000400 	.word	0x48000400
 8001480:	48000800 	.word	0x48000800
 8001484:	48000c00 	.word	0x48000c00
 8001488:	48001000 	.word	0x48001000
 800148c:	48001400 	.word	0x48001400
 8001490:	48001800 	.word	0x48001800
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40007000 	.word	0x40007000

080014b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c2:	d130      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d0:	d038      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2232      	movs	r2, #50	; 0x32
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	0c9b      	lsrs	r3, r3, #18
 80014f4:	3301      	adds	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	e002      	b.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800150c:	d102      	bne.n	8001514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f2      	bne.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001520:	d110      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e00f      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800152e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001532:	d007      	beq.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40007000 	.word	0x40007000
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e3ca      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001572:	4b97      	ldr	r3, [pc, #604]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157c:	4b94      	ldr	r3, [pc, #592]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 80e4 	beq.w	800175c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d007      	beq.n	80015aa <HAL_RCC_OscConfig+0x4a>
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b0c      	cmp	r3, #12
 800159e:	f040 808b 	bne.w	80016b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	f040 8087 	bne.w	80016b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015aa:	4b89      	ldr	r3, [pc, #548]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x62>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3a2      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	4b82      	ldr	r3, [pc, #520]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_RCC_OscConfig+0x7c>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015da:	e005      	b.n	80015e8 <HAL_RCC_OscConfig+0x88>
 80015dc:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80015de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e2:	091b      	lsrs	r3, r3, #4
 80015e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d223      	bcs.n	8001634 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd55 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e383      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001600:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a72      	ldr	r2, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b70      	ldr	r3, [pc, #448]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	496d      	ldr	r1, [pc, #436]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161e:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	4968      	ldr	r1, [pc, #416]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
 8001632:	e025      	b.n	8001680 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001634:	4b66      	ldr	r3, [pc, #408]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a65      	ldr	r2, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b63      	ldr	r3, [pc, #396]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4960      	ldr	r1, [pc, #384]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001652:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	495b      	ldr	r1, [pc, #364]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d109      	bne.n	8001680 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 fd15 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e343      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001680:	f000 fc4a 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001684:	4602      	mov	r2, r0
 8001686:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 030f 	and.w	r3, r3, #15
 8001690:	4950      	ldr	r1, [pc, #320]	; (80017d4 <HAL_RCC_OscConfig+0x274>)
 8001692:	5ccb      	ldrb	r3, [r1, r3]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	4a4e      	ldr	r2, [pc, #312]	; (80017d8 <HAL_RCC_OscConfig+0x278>)
 800169e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016a0:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <HAL_RCC_OscConfig+0x27c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc0b 	bl	8000ec0 <HAL_InitTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d052      	beq.n	800175a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	e327      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d032      	beq.n	8001726 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a42      	ldr	r2, [pc, #264]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc48 	bl	8000f60 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc44 	bl	8000f60 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e310      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e6:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a36      	ldr	r2, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b34      	ldr	r3, [pc, #208]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4931      	ldr	r1, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001710:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e01a      	b.n	800175c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a29      	ldr	r2, [pc, #164]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001732:	f7ff fc15 	bl	8000f60 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173a:	f7ff fc11 	bl	8000f60 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e2dd      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x1da>
 8001758:	e000      	b.n	800175c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800175a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d074      	beq.n	8001852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x21a>
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d10e      	bne.n	8001792 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d10b      	bne.n	8001792 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d064      	beq.n	8001850 <HAL_RCC_OscConfig+0x2f0>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d160      	bne.n	8001850 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e2ba      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x24a>
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e026      	b.n	80017f8 <HAL_RCC_OscConfig+0x298>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b2:	d115      	bne.n	80017e0 <HAL_RCC_OscConfig+0x280>
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a02      	ldr	r2, [pc, #8]	; (80017d0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e014      	b.n	80017f8 <HAL_RCC_OscConfig+0x298>
 80017ce:	bf00      	nop
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08008a30 	.word	0x08008a30
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a9f      	ldr	r2, [pc, #636]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b9d      	ldr	r3, [pc, #628]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a9c      	ldr	r2, [pc, #624]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fbae 	bl	8000f60 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fbaa 	bl	8000f60 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e276      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800181a:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x2a8>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb9a 	bl	8000f60 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fb96 	bl	8000f60 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e262      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001842:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x2d0>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d060      	beq.n	8001920 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b04      	cmp	r3, #4
 8001862:	d005      	beq.n	8001870 <HAL_RCC_OscConfig+0x310>
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d119      	bne.n	800189e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d116      	bne.n	800189e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001870:	4b7c      	ldr	r3, [pc, #496]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x328>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e23f      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4973      	ldr	r1, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	e040      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff fb55 	bl	8000f60 <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb51 	bl	8000f60 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e21d      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b62      	ldr	r3, [pc, #392]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	495f      	ldr	r1, [pc, #380]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a5c      	ldr	r2, [pc, #368]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80018f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb31 	bl	8000f60 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fb2d 	bl	8000f60 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1f9      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	4a4a      	ldr	r2, [pc, #296]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fb0c 	bl	8000f60 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff fb08 	bl	8000f60 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1d4      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195e:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x3ec>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff faef 	bl	8000f60 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff faeb 	bl	8000f60 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e1b7      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a6 	beq.w	8001b00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10d      	bne.n	80019e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ce:	6593      	str	r3, [r2, #88]	; 0x58
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019dc:	2301      	movs	r3, #1
 80019de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d118      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x508>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f8:	f7ff fab2 	bl	8000f60 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a00:	f7ff faae 	bl	8000f60 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e17a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x508>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_OscConfig+0x4d8>
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a36:	e029      	b.n	8001a8c <HAL_RCC_OscConfig+0x52c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d115      	bne.n	8001a6c <HAL_RCC_OscConfig+0x50c>
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <HAL_RCC_OscConfig+0x504>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x52c>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	4b9c      	ldr	r3, [pc, #624]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a9b      	ldr	r2, [pc, #620]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	4b98      	ldr	r3, [pc, #608]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a97      	ldr	r2, [pc, #604]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d016      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa64 	bl	8000f60 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa60 	bl	8000f60 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e12a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab2:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ed      	beq.n	8001a9c <HAL_RCC_OscConfig+0x53c>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fa4d 	bl	8000f60 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fa49 	bl	8000f60 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e113      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ed      	bne.n	8001aca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	4a79      	ldr	r2, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80fe 	beq.w	8001d06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f040 80d0 	bne.w	8001cb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b14:	4b72      	ldr	r3, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d130      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	3b01      	subs	r3, #1
 8001b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d127      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11f      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b54:	2a07      	cmp	r2, #7
 8001b56:	bf14      	ite	ne
 8001b58:	2201      	movne	r2, #1
 8001b5a:	2200      	moveq	r2, #0
 8001b5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d113      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d06e      	beq.n	8001c68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d069      	beq.n	8001c64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b90:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b9c:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0ad      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb8:	f7ff f9d2 	bl	8000f60 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7ff f9ce 	bl	8000f60 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e09a      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <HAL_RCC_OscConfig+0x784>)
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf8:	0212      	lsls	r2, r2, #8
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c00:	0852      	lsrs	r2, r2, #1
 8001c02:	3a01      	subs	r2, #1
 8001c04:	0552      	lsls	r2, r2, #21
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c0c:	0852      	lsrs	r2, r2, #1
 8001c0e:	3a01      	subs	r2, #1
 8001c10:	0652      	lsls	r2, r2, #25
 8001c12:	4311      	orrs	r1, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c18:	0912      	lsrs	r2, r2, #4
 8001c1a:	0452      	lsls	r2, r2, #17
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	4930      	ldr	r1, [pc, #192]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c24:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a2a      	ldr	r2, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c3c:	f7ff f990 	bl	8000f60 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f98c 	bl	8000f60 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e058      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c62:	e050      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e04f      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d148      	bne.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a16      	ldr	r2, [pc, #88]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c8c:	f7ff f968 	bl	8000f60 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f964 	bl	8000f60 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e030      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x734>
 8001cb2:	e028      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d023      	beq.n	8001d02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x780>)
 8001cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f94b 	bl	8000f60 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e00c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f947 	bl	8000f60 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d905      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e013      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4905      	ldr	r1, [pc, #20]	; (8001d10 <HAL_RCC_OscConfig+0x7b0>)
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_OscConfig+0x7b4>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e001      	b.n	8001d06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3720      	adds	r7, #32
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	feeefffc 	.word	0xfeeefffc

08001d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0e7      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	4970      	ldr	r1, [pc, #448]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b6e      	ldr	r3, [pc, #440]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0cf      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d010      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d908      	bls.n	8001d8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4960      	ldr	r1, [pc, #384]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d04c      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d121      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0a6      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	4b54      	ldr	r3, [pc, #336]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dce:	4b4e      	ldr	r3, [pc, #312]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e08e      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e086      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4943      	ldr	r1, [pc, #268]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7ff f8ae 	bl	8000f60 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7ff f8aa 	bl	8000f60 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e06e      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d208      	bcs.n	8001e5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	492b      	ldr	r1, [pc, #172]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d210      	bcs.n	8001e8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0207 	bic.w	r2, r3, #7
 8001e74:	4923      	ldr	r1, [pc, #140]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_ClockConfig+0x1ec>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e036      	b.n	8001efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d008      	beq.n	8001eac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9a:	4b1b      	ldr	r3, [pc, #108]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	4918      	ldr	r1, [pc, #96]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4910      	ldr	r1, [pc, #64]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ecc:	f000 f824 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	490b      	ldr	r1, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1f4>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1fc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe ffe5 	bl	8000ec0 <HAL_InitTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001efa:	7afb      	ldrb	r3, [r7, #11]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	08008a30 	.word	0x08008a30
 8001f10:	20000000 	.word	0x20000000
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x34>
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b0c      	cmp	r3, #12
 8001f44:	d121      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d11e      	bne.n	8001f8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f4c:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f58:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	f003 030f 	and.w	r3, r3, #15
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e005      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f68:	4b2d      	ldr	r3, [pc, #180]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10d      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f90:	4b25      	ldr	r3, [pc, #148]	; (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f92:	61bb      	str	r3, [r7, #24]
 8001f94:	e004      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001f9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	2b0c      	cmp	r3, #12
 8001fa4:	d134      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc0:	617b      	str	r3, [r7, #20]
      break;
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fc6:	617b      	str	r3, [r7, #20]
      break;
 8001fc8:	e002      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	617b      	str	r3, [r7, #20]
      break;
 8001fce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	3301      	adds	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	fb03 f202 	mul.w	r2, r3, r2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	0e5b      	lsrs	r3, r3, #25
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	3301      	adds	r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002010:	69bb      	ldr	r3, [r7, #24]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	08008a48 	.word	0x08008a48
 8002028:	00f42400 	.word	0x00f42400
 800202c:	007a1200 	.word	0x007a1200

08002030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_RCC_GetHCLKFreq+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800204c:	f7ff fff0 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	08008a40 	.word	0x08008a40

08002074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002078:	f7ff ffda 	bl	8002030 <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0adb      	lsrs	r3, r3, #11
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <HAL_RCC_GetPCLK2Freq+0x28>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08008a40 	.word	0x08008a40

080020a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b8:	f7ff f9ee 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 80020bc:	6178      	str	r0, [r7, #20]
 80020be:	e014      	b.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a24      	ldr	r2, [pc, #144]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff f9de 	bl	8001498 <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f0:	d10b      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d919      	bls.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2ba0      	cmp	r3, #160	; 0xa0
 80020fc:	d902      	bls.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020fe:	2302      	movs	r3, #2
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e013      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e010      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d902      	bls.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e00a      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b80      	cmp	r3, #128	; 0x80
 800211a:	d102      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e004      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b70      	cmp	r3, #112	; 0x70
 8002126:	d101      	bne.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0207 	bic.w	r2, r3, #7
 8002134:	4909      	ldr	r1, [pc, #36]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002168:	2300      	movs	r3, #0
 800216a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800216c:	2300      	movs	r3, #0
 800216e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002178:	2b00      	cmp	r3, #0
 800217a:	d041      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002180:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002184:	d02a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002186:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800218a:	d824      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800218c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002190:	d008      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002196:	d81e      	bhi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a0:	d010      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021a2:	e018      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021a4:	4b86      	ldr	r3, [pc, #536]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a85      	ldr	r2, [pc, #532]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021b0:	e015      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fabb 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c2:	e00c      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3320      	adds	r3, #32
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fba6 	bl	800291c <RCCEx_PLLSAI2_Config>
 80021d0:	4603      	mov	r3, r0
 80021d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021d4:	e003      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	74fb      	strb	r3, [r7, #19]
      break;
 80021da:	e000      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021e4:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f2:	4973      	ldr	r1, [pc, #460]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021fa:	e001      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d041      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002210:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002214:	d02a      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002216:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800221a:	d824      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800221c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002226:	d81e      	bhi.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d010      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002232:	e018      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002234:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002240:	e015      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3304      	adds	r3, #4
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fa73 	bl	8002734 <RCCEx_PLLSAI1_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002252:	e00c      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3320      	adds	r3, #32
 8002258:	2100      	movs	r1, #0
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fb5e 	bl	800291c <RCCEx_PLLSAI2_Config>
 8002260:	4603      	mov	r3, r0
 8002262:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002264:	e003      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	74fb      	strb	r3, [r7, #19]
      break;
 800226a:	e000      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800226c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800226e:	7cfb      	ldrb	r3, [r7, #19]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002274:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002282:	494f      	ldr	r1, [pc, #316]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800228a:	e001      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a0 	beq.w	80023de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00d      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a40      	ldr	r2, [pc, #256]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022d4:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3a      	ldr	r2, [pc, #232]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fe3e 	bl	8000f60 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e6:	e009      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe fe3a 	bl	8000f60 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d902      	bls.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	74fb      	strb	r3, [r7, #19]
        break;
 80022fa:	e005      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d15c      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002318:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01f      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	d019      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d016      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7fe fdf9 	bl	8000f60 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002370:	e00b      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe fdf5 	bl	8000f60 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d902      	bls.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	74fb      	strb	r3, [r7, #19]
            break;
 8002388:	e006      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ec      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10c      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ae:	4904      	ldr	r1, [pc, #16]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023b6:	e009      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
 80023bc:	e006      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023cc:	7c7b      	ldrb	r3, [r7, #17]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b9e      	ldr	r3, [pc, #632]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	4a9d      	ldr	r2, [pc, #628]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ea:	4b98      	ldr	r3, [pc, #608]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f023 0203 	bic.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	4994      	ldr	r1, [pc, #592]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800240c:	4b8f      	ldr	r3, [pc, #572]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 020c 	bic.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	498c      	ldr	r1, [pc, #560]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800242e:	4b87      	ldr	r3, [pc, #540]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	4983      	ldr	r1, [pc, #524]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00a      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002450:	4b7e      	ldr	r3, [pc, #504]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	497b      	ldr	r1, [pc, #492]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	4972      	ldr	r1, [pc, #456]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002494:	4b6d      	ldr	r3, [pc, #436]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	496a      	ldr	r1, [pc, #424]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	4961      	ldr	r1, [pc, #388]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d8:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	4959      	ldr	r1, [pc, #356]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00a      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fa:	4b54      	ldr	r3, [pc, #336]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	4950      	ldr	r1, [pc, #320]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00a      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	4948      	ldr	r1, [pc, #288]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	493f      	ldr	r1, [pc, #252]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d028      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002560:	4b3a      	ldr	r3, [pc, #232]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800256e:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800257e:	d106      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a31      	ldr	r2, [pc, #196]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	60d3      	str	r3, [r2, #12]
 800258c:	e011      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002592:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002596:	d10c      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f8c8 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	491f      	ldr	r1, [pc, #124]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025dc:	d106      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e8:	60d3      	str	r3, [r2, #12]
 80025ea:	e011      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f899 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d02b      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	4908      	ldr	r1, [pc, #32]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800263a:	d109      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a02      	ldr	r2, [pc, #8]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002646:	60d3      	str	r3, [r2, #12]
 8002648:	e014      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002658:	d10c      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	2101      	movs	r1, #1
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f867 	bl	8002734 <RCCEx_PLLSAI1_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02f      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268e:	4928      	ldr	r1, [pc, #160]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800269e:	d10d      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3304      	adds	r3, #4
 80026a4:	2102      	movs	r1, #2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f844 	bl	8002734 <RCCEx_PLLSAI1_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d014      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	74bb      	strb	r3, [r7, #18]
 80026ba:	e011      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3320      	adds	r3, #32
 80026ca:	2102      	movs	r1, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f925 	bl	800291c <RCCEx_PLLSAI2_Config>
 80026d2:	4603      	mov	r3, r0
 80026d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fa:	490d      	ldr	r1, [pc, #52]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271e:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002726:	7cbb      	ldrb	r3, [r7, #18]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000

08002734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002742:	4b75      	ldr	r3, [pc, #468]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d018      	beq.n	8002780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800274e:	4b72      	ldr	r3, [pc, #456]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d10d      	bne.n	800277a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
       ||
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002766:	4b6c      	ldr	r3, [pc, #432]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
       ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d047      	beq.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e044      	b.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d018      	beq.n	80027ba <RCCEx_PLLSAI1_Config+0x86>
 8002788:	2b03      	cmp	r3, #3
 800278a:	d825      	bhi.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
 800278c:	2b01      	cmp	r3, #1
 800278e:	d002      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0x62>
 8002790:	2b02      	cmp	r3, #2
 8002792:	d009      	beq.n	80027a8 <RCCEx_PLLSAI1_Config+0x74>
 8002794:	e020      	b.n	80027d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002796:	4b60      	ldr	r3, [pc, #384]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11d      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a6:	e01a      	b.n	80027de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a8:	4b5b      	ldr	r3, [pc, #364]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b8:	e013      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ba:	4b57      	ldr	r3, [pc, #348]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027c6:	4b54      	ldr	r3, [pc, #336]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027d6:	e006      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
      break;
 80027dc:	e004      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
 80027e0:	e002      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027ee:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	430b      	orrs	r3, r1
 8002804:	4944      	ldr	r1, [pc, #272]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d17d      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002810:	4b41      	ldr	r3, [pc, #260]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a40      	ldr	r2, [pc, #256]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800281a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fba0 	bl	8000f60 <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002822:	e009      	b.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002824:	f7fe fb9c 	bl	8000f60 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	73fb      	strb	r3, [r7, #15]
        break;
 8002836:	e005      	b.n	8002844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002838:	4b37      	ldr	r3, [pc, #220]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ef      	bne.n	8002824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d160      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002850:	4b31      	ldr	r3, [pc, #196]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6892      	ldr	r2, [r2, #8]
 8002860:	0211      	lsls	r1, r2, #8
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	0912      	lsrs	r2, r2, #4
 8002868:	0452      	lsls	r2, r2, #17
 800286a:	430a      	orrs	r2, r1
 800286c:	492a      	ldr	r1, [pc, #168]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	610b      	str	r3, [r1, #16]
 8002872:	e027      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d112      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6912      	ldr	r2, [r2, #16]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0552      	lsls	r2, r2, #21
 8002896:	430a      	orrs	r2, r1
 8002898:	491f      	ldr	r1, [pc, #124]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
 800289e:	e011      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6952      	ldr	r2, [r2, #20]
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0652      	lsls	r2, r2, #25
 80028bc:	430a      	orrs	r2, r1
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a13      	ldr	r2, [pc, #76]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d0:	f7fe fb46 	bl	8000f60 <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d6:	e009      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d8:	f7fe fb42 	bl	8000f60 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d902      	bls.n	80028ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	73fb      	strb	r3, [r7, #15]
          break;
 80028ea:	e005      	b.n	80028f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ef      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4904      	ldr	r1, [pc, #16]	; (8002918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000

0800291c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292a:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
       ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800294e:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
       ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d047      	beq.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
 8002966:	e044      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b03      	cmp	r3, #3
 800296e:	d018      	beq.n	80029a2 <RCCEx_PLLSAI2_Config+0x86>
 8002970:	2b03      	cmp	r3, #3
 8002972:	d825      	bhi.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
 8002974:	2b01      	cmp	r3, #1
 8002976:	d002      	beq.n	800297e <RCCEx_PLLSAI2_Config+0x62>
 8002978:	2b02      	cmp	r3, #2
 800297a:	d009      	beq.n	8002990 <RCCEx_PLLSAI2_Config+0x74>
 800297c:	e020      	b.n	80029c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297e:	4b55      	ldr	r3, [pc, #340]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11d      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298e:	e01a      	b.n	80029c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a0:	e013      	b.n	80029ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a2:	4b4c      	ldr	r3, [pc, #304]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029ae:	4b49      	ldr	r3, [pc, #292]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029be:	e006      	b.n	80029ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e004      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e002      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10d      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	430b      	orrs	r3, r1
 80029ec:	4939      	ldr	r1, [pc, #228]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d167      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a35      	ldr	r2, [pc, #212]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe faac 	bl	8000f60 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a0a:	e009      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a0c:	f7fe faa8 	bl	8000f60 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d902      	bls.n	8002a20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1e:	e005      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a20:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ef      	bne.n	8002a0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d14a      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6892      	ldr	r2, [r2, #8]
 8002a48:	0211      	lsls	r1, r2, #8
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68d2      	ldr	r2, [r2, #12]
 8002a4e:	0912      	lsrs	r2, r2, #4
 8002a50:	0452      	lsls	r2, r2, #17
 8002a52:	430a      	orrs	r2, r1
 8002a54:	491f      	ldr	r1, [pc, #124]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	614b      	str	r3, [r1, #20]
 8002a5a:	e011      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6912      	ldr	r2, [r2, #16]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0652      	lsls	r2, r2, #25
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fa68 	bl	8000f60 <HAL_GetTick>
 8002a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a92:	e009      	b.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a94:	f7fe fa64 	bl	8000f60 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d902      	bls.n	8002aa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8002aa6:	e005      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ef      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40021000 	.word	0x40021000

08002ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d001      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04f      	b.n	8002b90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a23      	ldr	r2, [pc, #140]	; (8002b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d018      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1c      	ldr	r2, [pc, #112]	; (8002ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_TIM_Base_Start_IT+0xd4>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_TIM_Base_Start_IT+0x76>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d115      	bne.n	8002b7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b06      	cmp	r3, #6
 8002b5e:	d015      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0xb4>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b66:	d011      	beq.n	8002b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	e008      	b.n	8002b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	e000      	b.n	8002b8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40012c00 	.word	0x40012c00
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40013400 	.word	0x40013400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	00010007 	.word	0x00010007

08002bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e049      	b.n	8002c5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fd ffba 	bl	8000b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fa9e 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <HAL_TIM_PWM_Start_IT+0x28>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	bf14      	ite	ne
 8002c88:	2301      	movne	r3, #1
 8002c8a:	2300      	moveq	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e03c      	b.n	8002d0a <HAL_TIM_PWM_Start_IT+0xa2>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d109      	bne.n	8002caa <HAL_TIM_PWM_Start_IT+0x42>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	bf14      	ite	ne
 8002ca2:	2301      	movne	r3, #1
 8002ca4:	2300      	moveq	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e02f      	b.n	8002d0a <HAL_TIM_PWM_Start_IT+0xa2>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d109      	bne.n	8002cc4 <HAL_TIM_PWM_Start_IT+0x5c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e022      	b.n	8002d0a <HAL_TIM_PWM_Start_IT+0xa2>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d109      	bne.n	8002cde <HAL_TIM_PWM_Start_IT+0x76>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e015      	b.n	8002d0a <HAL_TIM_PWM_Start_IT+0xa2>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d109      	bne.n	8002cf8 <HAL_TIM_PWM_Start_IT+0x90>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e008      	b.n	8002d0a <HAL_TIM_PWM_Start_IT+0xa2>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0e7      	b.n	8002ee2 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_TIM_PWM_Start_IT+0xba>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d20:	e023      	b.n	8002d6a <HAL_TIM_PWM_Start_IT+0x102>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d104      	bne.n	8002d32 <HAL_TIM_PWM_Start_IT+0xca>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	e01b      	b.n	8002d6a <HAL_TIM_PWM_Start_IT+0x102>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_PWM_Start_IT+0xda>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	e013      	b.n	8002d6a <HAL_TIM_PWM_Start_IT+0x102>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start_IT+0xea>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d50:	e00b      	b.n	8002d6a <HAL_TIM_PWM_Start_IT+0x102>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start_IT+0xfa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d60:	e003      	b.n	8002d6a <HAL_TIM_PWM_Start_IT+0x102>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d841      	bhi.n	8002df4 <HAL_TIM_PWM_Start_IT+0x18c>
 8002d70:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <HAL_TIM_PWM_Start_IT+0x110>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002dad 	.word	0x08002dad
 8002d7c:	08002df5 	.word	0x08002df5
 8002d80:	08002df5 	.word	0x08002df5
 8002d84:	08002df5 	.word	0x08002df5
 8002d88:	08002dbf 	.word	0x08002dbf
 8002d8c:	08002df5 	.word	0x08002df5
 8002d90:	08002df5 	.word	0x08002df5
 8002d94:	08002df5 	.word	0x08002df5
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002df5 	.word	0x08002df5
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002df5 	.word	0x08002df5
 8002da8:	08002de3 	.word	0x08002de3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0202 	orr.w	r2, r2, #2
 8002dba:	60da      	str	r2, [r3, #12]
      break;
 8002dbc:	e01d      	b.n	8002dfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0204 	orr.w	r2, r2, #4
 8002dcc:	60da      	str	r2, [r3, #12]
      break;
 8002dce:	e014      	b.n	8002dfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0208 	orr.w	r2, r2, #8
 8002dde:	60da      	str	r2, [r3, #12]
      break;
 8002de0:	e00b      	b.n	8002dfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0210 	orr.w	r2, r2, #16
 8002df0:	60da      	str	r2, [r3, #12]
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d16f      	bne.n	8002ee0 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2201      	movs	r2, #1
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fd05 	bl	8003818 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a36      	ldr	r2, [pc, #216]	; (8002eec <HAL_TIM_PWM_Start_IT+0x284>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_TIM_PWM_Start_IT+0x288>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00e      	beq.n	8002e40 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a33      	ldr	r2, [pc, #204]	; (8002ef4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d009      	beq.n	8002e40 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_TIM_PWM_Start_IT+0x290>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d004      	beq.n	8002e40 <HAL_TIM_PWM_Start_IT+0x1d8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a30      	ldr	r2, [pc, #192]	; (8002efc <HAL_TIM_PWM_Start_IT+0x294>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIM_PWM_Start_IT+0x1dc>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_TIM_PWM_Start_IT+0x1de>
 8002e44:	2300      	movs	r3, #0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_TIM_PWM_Start_IT+0x284>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d01d      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e6c:	d018      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <HAL_TIM_PWM_Start_IT+0x298>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a21      	ldr	r2, [pc, #132]	; (8002f04 <HAL_TIM_PWM_Start_IT+0x29c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a20      	ldr	r2, [pc, #128]	; (8002f08 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_TIM_PWM_Start_IT+0x288>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIM_PWM_Start_IT+0x238>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d115      	bne.n	8002ecc <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d015      	beq.n	8002ede <HAL_TIM_PWM_Start_IT+0x276>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d011      	beq.n	8002ede <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	e008      	b.n	8002ede <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e000      	b.n	8002ee0 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40013400 	.word	0x40013400
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	00010007 	.word	0x00010007

08002f10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e0ff      	b.n	800312e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b14      	cmp	r3, #20
 8002f3a:	f200 80f0 	bhi.w	800311e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f99 	.word	0x08002f99
 8002f48:	0800311f 	.word	0x0800311f
 8002f4c:	0800311f 	.word	0x0800311f
 8002f50:	0800311f 	.word	0x0800311f
 8002f54:	08002fd9 	.word	0x08002fd9
 8002f58:	0800311f 	.word	0x0800311f
 8002f5c:	0800311f 	.word	0x0800311f
 8002f60:	0800311f 	.word	0x0800311f
 8002f64:	0800301b 	.word	0x0800301b
 8002f68:	0800311f 	.word	0x0800311f
 8002f6c:	0800311f 	.word	0x0800311f
 8002f70:	0800311f 	.word	0x0800311f
 8002f74:	0800305b 	.word	0x0800305b
 8002f78:	0800311f 	.word	0x0800311f
 8002f7c:	0800311f 	.word	0x0800311f
 8002f80:	0800311f 	.word	0x0800311f
 8002f84:	0800309d 	.word	0x0800309d
 8002f88:	0800311f 	.word	0x0800311f
 8002f8c:	0800311f 	.word	0x0800311f
 8002f90:	0800311f 	.word	0x0800311f
 8002f94:	080030dd 	.word	0x080030dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f964 	bl	800326c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e0a5      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f9d4 	bl	800338c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e084      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa3d 	bl	80034a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e064      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 faa5 	bl	80035b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e043      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 faee 	bl	8003684 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0208 	orr.w	r2, r2, #8
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0204 	bic.w	r2, r2, #4
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030da:	e023      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fb32 	bl	800374c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800311c:	e002      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
      break;
 8003122:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800312c:	7dfb      	ldrb	r3, [r7, #23]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <TIM_Base_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d013      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d00f      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3d      	ldr	r2, [pc, #244]	; (8003250 <TIM_Base_SetConfig+0x118>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <TIM_Base_SetConfig+0x11c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <TIM_Base_SetConfig+0x120>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3a      	ldr	r2, [pc, #232]	; (800325c <TIM_Base_SetConfig+0x124>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d108      	bne.n	800318a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2f      	ldr	r2, [pc, #188]	; (800324c <TIM_Base_SetConfig+0x114>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d01f      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d01b      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <TIM_Base_SetConfig+0x118>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d017      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a2b      	ldr	r2, [pc, #172]	; (8003254 <TIM_Base_SetConfig+0x11c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <TIM_Base_SetConfig+0x120>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00f      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a29      	ldr	r2, [pc, #164]	; (800325c <TIM_Base_SetConfig+0x124>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00b      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <TIM_Base_SetConfig+0x128>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d003      	beq.n	80031d2 <TIM_Base_SetConfig+0x9a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <TIM_Base_SetConfig+0x130>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d108      	bne.n	80031e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <TIM_Base_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a12      	ldr	r2, [pc, #72]	; (800325c <TIM_Base_SetConfig+0x124>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <TIM_Base_SetConfig+0x128>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <TIM_Base_SetConfig+0x12c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0xf8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <TIM_Base_SetConfig+0x130>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40013400 	.word	0x40013400
 8003260:	40014000 	.word	0x40014000
 8003264:	40014400 	.word	0x40014400
 8003268:	40014800 	.word	0x40014800

0800326c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <TIM_OC1_SetConfig+0x10c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00f      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a2b      	ldr	r2, [pc, #172]	; (800337c <TIM_OC1_SetConfig+0x110>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <TIM_OC1_SetConfig+0x114>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a29      	ldr	r2, [pc, #164]	; (8003384 <TIM_OC1_SetConfig+0x118>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC1_SetConfig+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a28      	ldr	r2, [pc, #160]	; (8003388 <TIM_OC1_SetConfig+0x11c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d10c      	bne.n	8003306 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0308 	bic.w	r3, r3, #8
 80032f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <TIM_OC1_SetConfig+0x10c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00f      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1a      	ldr	r2, [pc, #104]	; (800337c <TIM_OC1_SetConfig+0x110>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00b      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a19      	ldr	r2, [pc, #100]	; (8003380 <TIM_OC1_SetConfig+0x114>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a18      	ldr	r2, [pc, #96]	; (8003384 <TIM_OC1_SetConfig+0x118>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <TIM_OC1_SetConfig+0xc2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a17      	ldr	r2, [pc, #92]	; (8003388 <TIM_OC1_SetConfig+0x11c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d111      	bne.n	8003352 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40012c00 	.word	0x40012c00
 800337c:	40013400 	.word	0x40013400
 8003380:	40014000 	.word	0x40014000
 8003384:	40014400 	.word	0x40014400
 8003388:	40014800 	.word	0x40014800

0800338c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b480      	push	{r7}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0210 	bic.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <TIM_OC2_SetConfig+0x100>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_OC2_SetConfig+0x6c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a27      	ldr	r2, [pc, #156]	; (8003490 <TIM_OC2_SetConfig+0x104>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10d      	bne.n	8003414 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <TIM_OC2_SetConfig+0x100>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00f      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <TIM_OC2_SetConfig+0x104>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00b      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <TIM_OC2_SetConfig+0x108>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d007      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1a      	ldr	r2, [pc, #104]	; (8003498 <TIM_OC2_SetConfig+0x10c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC2_SetConfig+0xb0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <TIM_OC2_SetConfig+0x110>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d113      	bne.n	8003464 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	621a      	str	r2, [r3, #32]
}
 800347e:	bf00      	nop
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800

080034a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0303 	bic.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <TIM_OC3_SetConfig+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC3_SetConfig+0x6a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10d      	bne.n	8003526 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <TIM_OC3_SetConfig+0xfc>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00f      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <TIM_OC3_SetConfig+0x100>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00b      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <TIM_OC3_SetConfig+0x104>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <TIM_OC3_SetConfig+0x108>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d003      	beq.n	800354e <TIM_OC3_SetConfig+0xae>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <TIM_OC3_SetConfig+0x10c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d113      	bne.n	8003576 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800355c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	031b      	lsls	r3, r3, #12
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <TIM_OC4_SetConfig+0xc0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a17      	ldr	r2, [pc, #92]	; (8003674 <TIM_OC4_SetConfig+0xc4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <TIM_OC4_SetConfig+0xc8>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a15      	ldr	r2, [pc, #84]	; (800367c <TIM_OC4_SetConfig+0xcc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_OC4_SetConfig+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <TIM_OC4_SetConfig+0xd0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d109      	bne.n	8003648 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800363a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <TIM_OC5_SetConfig+0xb4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <TIM_OC5_SetConfig+0xb8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <TIM_OC5_SetConfig+0xbc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <TIM_OC5_SetConfig+0xc0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC5_SetConfig+0x7a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a13      	ldr	r2, [pc, #76]	; (8003748 <TIM_OC5_SetConfig+0xc4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d109      	bne.n	8003712 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	621a      	str	r2, [r3, #32]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40013400 	.word	0x40013400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800

0800374c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	051b      	lsls	r3, r3, #20
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <TIM_OC6_SetConfig+0xb8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <TIM_OC6_SetConfig+0xbc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a16      	ldr	r2, [pc, #88]	; (800380c <TIM_OC6_SetConfig+0xc0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <TIM_OC6_SetConfig+0xc4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC6_SetConfig+0x7c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC6_SetConfig+0xc8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d109      	bne.n	80037dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	029b      	lsls	r3, r3, #10
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800

08003818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2201      	movs	r2, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1a      	ldr	r2, [r3, #32]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1a      	ldr	r2, [r3, #32]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	431a      	orrs	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e068      	b.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2e      	ldr	r2, [pc, #184]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d018      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10c      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000

08003974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e040      	b.n	8003a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd f930 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	; 0x24
 80039a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f992 	bl	8003cdc <UART_SetConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fc3e 	bl	800424c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fcc5 	bl	8004390 <UART_CheckIdleState>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	; 0x28
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	f040 8082 	bne.w	8003b2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Transmit+0x26>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07a      	b.n	8003b30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Transmit+0x38>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e073      	b.n	8003b30 <HAL_UART_Transmit+0x120>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	; 0x21
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5e:	f7fd fa7f 	bl	8000f60 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d108      	bne.n	8003a90 <HAL_UART_Transmit+0x80>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e003      	b.n	8003a98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003aa0:	e02d      	b.n	8003afe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2180      	movs	r1, #128	; 0x80
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fcb8 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e039      	b.n	8003b30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10b      	bne.n	8003ada <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	881a      	ldrh	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ace:	b292      	uxth	r2, r2
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e008      	b.n	8003aec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cb      	bne.n	8003aa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2140      	movs	r1, #64	; 0x40
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fc84 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e005      	b.n	8003b30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	f040 80bf 	bne.w	8003cd0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_Receive+0x26>
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0b7      	b.n	8003cd2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UART_Receive+0x38>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0b0      	b.n	8003cd2 <HAL_UART_Receive+0x19a>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8c:	f7fd f9e8 	bl	8000f60 <HAL_GetTick>
 8003b90:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	88fa      	ldrh	r2, [r7, #6]
 8003b9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d10e      	bne.n	8003bca <HAL_UART_Receive+0x92>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <HAL_UART_Receive+0x88>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bbe:	e02d      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	22ff      	movs	r2, #255	; 0xff
 8003bc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bc8:	e028      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_UART_Receive+0xb6>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <HAL_UART_Receive+0xac>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be2:	e01b      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	227f      	movs	r2, #127	; 0x7f
 8003be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bec:	e016      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10d      	bne.n	8003c14 <HAL_UART_Receive+0xdc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d104      	bne.n	8003c0a <HAL_UART_Receive+0xd2>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	227f      	movs	r2, #127	; 0x7f
 8003c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c08:	e008      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	223f      	movs	r2, #63	; 0x3f
 8003c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c12:	e003      	b.n	8003c1c <HAL_UART_Receive+0xe4>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c22:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d108      	bne.n	8003c40 <HAL_UART_Receive+0x108>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e003      	b.n	8003c48 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c50:	e033      	b.n	8003cba <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fbe0 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e032      	b.n	8003cd2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	8a7b      	ldrh	r3, [r7, #18]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	3302      	adds	r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	e00d      	b.n	8003ca8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	8a7b      	ldrh	r3, [r7, #18]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1c5      	bne.n	8003c52 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4ba4      	ldr	r3, [pc, #656]	; (8003f9c <UART_SetConfig+0x2c0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d14:	430b      	orrs	r3, r1
 8003d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a99      	ldr	r2, [pc, #612]	; (8003fa0 <UART_SetConfig+0x2c4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	4313      	orrs	r3, r2
 8003d46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a90      	ldr	r2, [pc, #576]	; (8003fa4 <UART_SetConfig+0x2c8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d126      	bne.n	8003db4 <UART_SetConfig+0xd8>
 8003d66:	4b90      	ldr	r3, [pc, #576]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d81b      	bhi.n	8003dac <UART_SetConfig+0xd0>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0xa0>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d9d 	.word	0x08003d9d
 8003d84:	08003d95 	.word	0x08003d95
 8003d88:	08003da5 	.word	0x08003da5
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e116      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003d94:	2302      	movs	r3, #2
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e112      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e10e      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003da4:	2308      	movs	r3, #8
 8003da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003daa:	e10a      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db2:	e106      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a7c      	ldr	r2, [pc, #496]	; (8003fac <UART_SetConfig+0x2d0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d138      	bne.n	8003e30 <UART_SetConfig+0x154>
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d82d      	bhi.n	8003e28 <UART_SetConfig+0x14c>
 8003dcc:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0xf8>)
 8003dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd2:	bf00      	nop
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e29 	.word	0x08003e29
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e29 	.word	0x08003e29
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003e29 	.word	0x08003e29
 8003df4:	08003e11 	.word	0x08003e11
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e29 	.word	0x08003e29
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e21 	.word	0x08003e21
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0e:	e0d8      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e10:	2302      	movs	r3, #2
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e0d4      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e0d0      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e20:	2308      	movs	r3, #8
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e0cc      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e0c8      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <UART_SetConfig+0x2d4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d125      	bne.n	8003e86 <UART_SetConfig+0x1aa>
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e44:	2b30      	cmp	r3, #48	; 0x30
 8003e46:	d016      	beq.n	8003e76 <UART_SetConfig+0x19a>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d818      	bhi.n	8003e7e <UART_SetConfig+0x1a2>
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d00a      	beq.n	8003e66 <UART_SetConfig+0x18a>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d814      	bhi.n	8003e7e <UART_SetConfig+0x1a2>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <UART_SetConfig+0x182>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d008      	beq.n	8003e6e <UART_SetConfig+0x192>
 8003e5c:	e00f      	b.n	8003e7e <UART_SetConfig+0x1a2>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e64:	e0ad      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e66:	2302      	movs	r3, #2
 8003e68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6c:	e0a9      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e6e:	2304      	movs	r3, #4
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e74:	e0a5      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e76:	2308      	movs	r3, #8
 8003e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7c:	e0a1      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e7e:	2310      	movs	r3, #16
 8003e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e84:	e09d      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a4a      	ldr	r2, [pc, #296]	; (8003fb4 <UART_SetConfig+0x2d8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d125      	bne.n	8003edc <UART_SetConfig+0x200>
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e9c:	d016      	beq.n	8003ecc <UART_SetConfig+0x1f0>
 8003e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea0:	d818      	bhi.n	8003ed4 <UART_SetConfig+0x1f8>
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d00a      	beq.n	8003ebc <UART_SetConfig+0x1e0>
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d814      	bhi.n	8003ed4 <UART_SetConfig+0x1f8>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <UART_SetConfig+0x1d8>
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d008      	beq.n	8003ec4 <UART_SetConfig+0x1e8>
 8003eb2:	e00f      	b.n	8003ed4 <UART_SetConfig+0x1f8>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e082      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e07e      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e07a      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003ecc:	2308      	movs	r3, #8
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e076      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e072      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a35      	ldr	r2, [pc, #212]	; (8003fb8 <UART_SetConfig+0x2dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d12a      	bne.n	8003f3c <UART_SetConfig+0x260>
 8003ee6:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef4:	d01a      	beq.n	8003f2c <UART_SetConfig+0x250>
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efa:	d81b      	bhi.n	8003f34 <UART_SetConfig+0x258>
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d00c      	beq.n	8003f1c <UART_SetConfig+0x240>
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f06:	d815      	bhi.n	8003f34 <UART_SetConfig+0x258>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <UART_SetConfig+0x238>
 8003f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f10:	d008      	beq.n	8003f24 <UART_SetConfig+0x248>
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x258>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e052      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e04e      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e04a      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e046      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e042      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <UART_SetConfig+0x2c4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d13a      	bne.n	8003fbc <UART_SetConfig+0x2e0>
 8003f46:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <UART_SetConfig+0x2cc>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x2b0>
 8003f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0x2b8>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	d00c      	beq.n	8003f7c <UART_SetConfig+0x2a0>
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f66:	d815      	bhi.n	8003f94 <UART_SetConfig+0x2b8>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <UART_SetConfig+0x298>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f70:	d008      	beq.n	8003f84 <UART_SetConfig+0x2a8>
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x2b8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e022      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e01e      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e01a      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e016      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	e012      	b.n	8003fc2 <UART_SetConfig+0x2e6>
 8003f9c:	efff69f3 	.word	0xefff69f3
 8003fa0:	40008000 	.word	0x40008000
 8003fa4:	40013800 	.word	0x40013800
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40004400 	.word	0x40004400
 8003fb0:	40004800 	.word	0x40004800
 8003fb4:	40004c00 	.word	0x40004c00
 8003fb8:	40005000 	.word	0x40005000
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a9f      	ldr	r2, [pc, #636]	; (8004244 <UART_SetConfig+0x568>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d17a      	bne.n	80040c2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d824      	bhi.n	800401e <UART_SetConfig+0x342>
 8003fd4:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0x300>)
 8003fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fda:	bf00      	nop
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	0800401f 	.word	0x0800401f
 8003fe4:	08004009 	.word	0x08004009
 8003fe8:	0800401f 	.word	0x0800401f
 8003fec:	0800400f 	.word	0x0800400f
 8003ff0:	0800401f 	.word	0x0800401f
 8003ff4:	0800401f 	.word	0x0800401f
 8003ff8:	0800401f 	.word	0x0800401f
 8003ffc:	08004017 	.word	0x08004017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe f822 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8004004:	61f8      	str	r0, [r7, #28]
        break;
 8004006:	e010      	b.n	800402a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <UART_SetConfig+0x56c>)
 800400a:	61fb      	str	r3, [r7, #28]
        break;
 800400c:	e00d      	b.n	800402a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fd ff83 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8004012:	61f8      	str	r0, [r7, #28]
        break;
 8004014:	e009      	b.n	800402a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401a:	61fb      	str	r3, [r7, #28]
        break;
 800401c:	e005      	b.n	800402a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80fb 	beq.w	8004228 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	429a      	cmp	r2, r3
 8004040:	d305      	bcc.n	800404e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	429a      	cmp	r2, r3
 800404c:	d903      	bls.n	8004056 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004054:	e0e8      	b.n	8004228 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2200      	movs	r2, #0
 800405a:	461c      	mov	r4, r3
 800405c:	4615      	mov	r5, r2
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	022b      	lsls	r3, r5, #8
 8004068:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800406c:	0222      	lsls	r2, r4, #8
 800406e:	68f9      	ldr	r1, [r7, #12]
 8004070:	6849      	ldr	r1, [r1, #4]
 8004072:	0849      	lsrs	r1, r1, #1
 8004074:	2000      	movs	r0, #0
 8004076:	4688      	mov	r8, r1
 8004078:	4681      	mov	r9, r0
 800407a:	eb12 0a08 	adds.w	sl, r2, r8
 800407e:	eb43 0b09 	adc.w	fp, r3, r9
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004090:	4650      	mov	r0, sl
 8004092:	4659      	mov	r1, fp
 8004094:	f7fc f904 	bl	80002a0 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a6:	d308      	bcc.n	80040ba <UART_SetConfig+0x3de>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ae:	d204      	bcs.n	80040ba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	e0b6      	b.n	8004228 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040c0:	e0b2      	b.n	8004228 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ca:	d15e      	bne.n	800418a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80040cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d828      	bhi.n	8004126 <UART_SetConfig+0x44a>
 80040d4:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <UART_SetConfig+0x400>)
 80040d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040da:	bf00      	nop
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004109 	.word	0x08004109
 80040e4:	08004111 	.word	0x08004111
 80040e8:	08004127 	.word	0x08004127
 80040ec:	08004117 	.word	0x08004117
 80040f0:	08004127 	.word	0x08004127
 80040f4:	08004127 	.word	0x08004127
 80040f8:	08004127 	.word	0x08004127
 80040fc:	0800411f 	.word	0x0800411f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004100:	f7fd ffa2 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 8004104:	61f8      	str	r0, [r7, #28]
        break;
 8004106:	e014      	b.n	8004132 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004108:	f7fd ffb4 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 800410c:	61f8      	str	r0, [r7, #28]
        break;
 800410e:	e010      	b.n	8004132 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004110:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <UART_SetConfig+0x56c>)
 8004112:	61fb      	str	r3, [r7, #28]
        break;
 8004114:	e00d      	b.n	8004132 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004116:	f7fd feff 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 800411a:	61f8      	str	r0, [r7, #28]
        break;
 800411c:	e009      	b.n	8004132 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004122:	61fb      	str	r3, [r7, #28]
        break;
 8004124:	e005      	b.n	8004132 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d077      	beq.n	8004228 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005a      	lsls	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	441a      	add	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b0f      	cmp	r3, #15
 8004152:	d916      	bls.n	8004182 <UART_SetConfig+0x4a6>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415a:	d212      	bcs.n	8004182 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f023 030f 	bic.w	r3, r3, #15
 8004164:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	b29a      	uxth	r2, r3
 8004172:	8afb      	ldrh	r3, [r7, #22]
 8004174:	4313      	orrs	r3, r2
 8004176:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	8afa      	ldrh	r2, [r7, #22]
 800417e:	60da      	str	r2, [r3, #12]
 8004180:	e052      	b.n	8004228 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004188:	e04e      	b.n	8004228 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800418a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800418e:	2b08      	cmp	r3, #8
 8004190:	d827      	bhi.n	80041e2 <UART_SetConfig+0x506>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <UART_SetConfig+0x4bc>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	080041e3 	.word	0x080041e3
 80041a8:	080041d3 	.word	0x080041d3
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	080041e3 	.word	0x080041e3
 80041b4:	080041e3 	.word	0x080041e3
 80041b8:	080041db 	.word	0x080041db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7fd ff44 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 80041c0:	61f8      	str	r0, [r7, #28]
        break;
 80041c2:	e014      	b.n	80041ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7fd ff56 	bl	8002074 <HAL_RCC_GetPCLK2Freq>
 80041c8:	61f8      	str	r0, [r7, #28]
        break;
 80041ca:	e010      	b.n	80041ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <UART_SetConfig+0x56c>)
 80041ce:	61fb      	str	r3, [r7, #28]
        break;
 80041d0:	e00d      	b.n	80041ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d2:	f7fd fea1 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 80041d6:	61f8      	str	r0, [r7, #28]
        break;
 80041d8:	e009      	b.n	80041ee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	61fb      	str	r3, [r7, #28]
        break;
 80041e0:	e005      	b.n	80041ee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041ec:	bf00      	nop
    }

    if (pclk != 0U)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d019      	beq.n	8004228 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	085a      	lsrs	r2, r3, #1
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	441a      	add	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	fbb2 f3f3 	udiv	r3, r2, r3
 8004206:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0f      	cmp	r3, #15
 800420c:	d909      	bls.n	8004222 <UART_SetConfig+0x546>
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d205      	bcs.n	8004222 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	e002      	b.n	8004228 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004234:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004238:	4618      	mov	r0, r3
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004242:	bf00      	nop
 8004244:	40008000 	.word	0x40008000
 8004248:	00f42400 	.word	0x00f42400

0800424c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01a      	beq.n	8004362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800434a:	d10a      	bne.n	8004362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043a0:	f7fc fdde 	bl	8000f60 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d10e      	bne.n	80043d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f82d 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e023      	b.n	800441a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d10e      	bne.n	80043fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f817 	bl	8004422 <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e00d      	b.n	800441a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b09c      	sub	sp, #112	; 0x70
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	603b      	str	r3, [r7, #0]
 800442e:	4613      	mov	r3, r2
 8004430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	e0a5      	b.n	8004580 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	f000 80a1 	beq.w	8004580 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fc fd8f 	bl	8000f60 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <UART_WaitOnFlagUntilTimeout+0x32>
 800444e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004450:	2b00      	cmp	r3, #0
 8004452:	d13e      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004464:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004468:	667b      	str	r3, [r7, #100]	; 0x64
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004474:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004478:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e6      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3308      	adds	r3, #8
 800448c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	663b      	str	r3, [r7, #96]	; 0x60
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ae:	e841 2300 	strex	r3, r2, [r1]
 80044b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e5      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e067      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d04f      	beq.n	8004580 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d147      	bne.n	8004580 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800450e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
 800451a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800451e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	66bb      	str	r3, [r7, #104]	; 0x68
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800454c:	623a      	str	r2, [r7, #32]
 800454e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	69f9      	ldr	r1, [r7, #28]
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	61bb      	str	r3, [r7, #24]
   return(result);
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e010      	b.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4013      	ands	r3, r2
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	429a      	cmp	r2, r3
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	429a      	cmp	r2, r3
 800459c:	f43f af4a 	beq.w	8004434 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3770      	adds	r7, #112	; 0x70
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <__NVIC_SetPriority>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	6039      	str	r1, [r7, #0]
 80045b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db0a      	blt.n	80045d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	490c      	ldr	r1, [pc, #48]	; (80045f8 <__NVIC_SetPriority+0x4c>)
 80045c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ca:	0112      	lsls	r2, r2, #4
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	440b      	add	r3, r1
 80045d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80045d4:	e00a      	b.n	80045ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <__NVIC_SetPriority+0x50>)
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	3b04      	subs	r3, #4
 80045e4:	0112      	lsls	r2, r2, #4
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	440b      	add	r3, r1
 80045ea:	761a      	strb	r2, [r3, #24]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100
 80045fc:	e000ed00 	.word	0xe000ed00

08004600 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004604:	2100      	movs	r1, #0
 8004606:	f06f 0004 	mvn.w	r0, #4
 800460a:	f7ff ffcf 	bl	80045ac <__NVIC_SetPriority>
#endif
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461a:	f3ef 8305 	mrs	r3, IPSR
 800461e:	603b      	str	r3, [r7, #0]
  return(result);
 8004620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004626:	f06f 0305 	mvn.w	r3, #5
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e00c      	b.n	8004648 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <osKernelInitialize+0x44>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <osKernelInitialize+0x44>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800463c:	2300      	movs	r3, #0
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	e002      	b.n	8004648 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004648:	687b      	ldr	r3, [r7, #4]
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	200001e8 	.word	0x200001e8

0800465c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004662:	f3ef 8305 	mrs	r3, IPSR
 8004666:	603b      	str	r3, [r7, #0]
  return(result);
 8004668:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <osKernelStart+0x1a>
    stat = osErrorISR;
 800466e:	f06f 0305 	mvn.w	r3, #5
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e010      	b.n	8004698 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <osKernelStart+0x48>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d109      	bne.n	8004692 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800467e:	f7ff ffbf 	bl	8004600 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <osKernelStart+0x48>)
 8004684:	2202      	movs	r2, #2
 8004686:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004688:	f001 fa50 	bl	8005b2c <vTaskStartScheduler>
      stat = osOK;
 800468c:	2300      	movs	r3, #0
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e002      	b.n	8004698 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004698:	687b      	ldr	r3, [r7, #4]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200001e8 	.word	0x200001e8

080046a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af04      	add	r7, sp, #16
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b8:	f3ef 8305 	mrs	r3, IPSR
 80046bc:	617b      	str	r3, [r7, #20]
  return(result);
 80046be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d17e      	bne.n	80047c2 <osThreadNew+0x11a>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d07b      	beq.n	80047c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046ce:	2318      	movs	r3, #24
 80046d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295
 80046da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d045      	beq.n	800476e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osThreadNew+0x48>
        name = attr->name;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <osThreadNew+0x6e>
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b38      	cmp	r3, #56	; 0x38
 8004708:	d805      	bhi.n	8004716 <osThreadNew+0x6e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <osThreadNew+0x72>
        return (NULL);
 8004716:	2300      	movs	r3, #0
 8004718:	e054      	b.n	80047c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	089b      	lsrs	r3, r3, #2
 8004728:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <osThreadNew+0xa8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b5b      	cmp	r3, #91	; 0x5b
 8004738:	d90a      	bls.n	8004750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800473e:	2b00      	cmp	r3, #0
 8004740:	d006      	beq.n	8004750 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <osThreadNew+0xa8>
        mem = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e010      	b.n	8004772 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10c      	bne.n	8004772 <osThreadNew+0xca>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d108      	bne.n	8004772 <osThreadNew+0xca>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <osThreadNew+0xca>
          mem = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e001      	b.n	8004772 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d110      	bne.n	800479a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004780:	9202      	str	r2, [sp, #8]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	6a3a      	ldr	r2, [r7, #32]
 800478c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fff6 	bl	8005780 <xTaskCreateStatic>
 8004794:	4603      	mov	r3, r0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e013      	b.n	80047c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d110      	bne.n	80047c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f001 f841 	bl	800583a <xTaskCreate>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <osThreadNew+0x11a>
            hTask = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047c2:	693b      	ldr	r3, [r7, #16]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d4:	f3ef 8305 	mrs	r3, IPSR
 80047d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <osDelay+0x1c>
    stat = osErrorISR;
 80047e0:	f06f 0305 	mvn.w	r3, #5
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e007      	b.n	80047f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f001 f966 	bl	8005ac4 <vTaskDelay>
    }
  }

  return (stat);
 80047f8:	68fb      	ldr	r3, [r7, #12]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004802:	b580      	push	{r7, lr}
 8004804:	b08a      	sub	sp, #40	; 0x28
 8004806:	af02      	add	r7, sp, #8
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004812:	f3ef 8305 	mrs	r3, IPSR
 8004816:	613b      	str	r3, [r7, #16]
  return(result);
 8004818:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800481a:	2b00      	cmp	r3, #0
 800481c:	d15f      	bne.n	80048de <osMessageQueueNew+0xdc>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d05c      	beq.n	80048de <osMessageQueueNew+0xdc>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d059      	beq.n	80048de <osMessageQueueNew+0xdc>
    mem = -1;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d029      	beq.n	800488a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <osMessageQueueNew+0x62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b4f      	cmp	r3, #79	; 0x4f
 8004844:	d90e      	bls.n	8004864 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <osMessageQueueNew+0x62>
        mem = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	e014      	b.n	800488e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d110      	bne.n	800488e <osMessageQueueNew+0x8c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10c      	bne.n	800488e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	d108      	bne.n	800488e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <osMessageQueueNew+0x8c>
          mem = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	e001      	b.n	800488e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10b      	bne.n	80048ac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2100      	movs	r1, #0
 800489e:	9100      	str	r1, [sp, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fa2e 	bl	8004d04 <xQueueGenericCreateStatic>
 80048a8:	61f8      	str	r0, [r7, #28]
 80048aa:	e008      	b.n	80048be <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80048b2:	2200      	movs	r2, #0
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa9c 	bl	8004df4 <xQueueGenericCreate>
 80048bc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00c      	beq.n	80048de <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e001      	b.n	80048d6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80048d6:	6979      	ldr	r1, [r7, #20]
 80048d8:	69f8      	ldr	r0, [r7, #28]
 80048da:	f000 fef3 	bl	80056c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80048de:	69fb      	ldr	r3, [r7, #28]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004900:	f3ef 8305 	mrs	r3, IPSR
 8004904:	617b      	str	r3, [r7, #20]
  return(result);
 8004906:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004908:	2b00      	cmp	r3, #0
 800490a:	d028      	beq.n	800495e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <osMessageQueuePut+0x36>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <osMessageQueuePut+0x36>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800491e:	f06f 0303 	mvn.w	r3, #3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e038      	b.n	8004998 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800492a:	f107 0210 	add.w	r2, r7, #16
 800492e:	2300      	movs	r3, #0
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	69b8      	ldr	r0, [r7, #24]
 8004934:	f000 fbba 	bl	80050ac <xQueueGenericSendFromISR>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d003      	beq.n	8004946 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800493e:	f06f 0302 	mvn.w	r3, #2
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e028      	b.n	8004998 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d025      	beq.n	8004998 <osMessageQueuePut+0xb0>
 800494c:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <osMessageQueuePut+0xbc>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	e01c      	b.n	8004998 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <osMessageQueuePut+0x82>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800496a:	f06f 0303 	mvn.w	r3, #3
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e012      	b.n	8004998 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004972:	2300      	movs	r3, #0
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	69b8      	ldr	r0, [r7, #24]
 800497a:	f000 fa99 	bl	8004eb0 <xQueueGenericSend>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d009      	beq.n	8004998 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800498a:	f06f 0301 	mvn.w	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e002      	b.n	8004998 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004992:	f06f 0302 	mvn.w	r3, #2
 8004996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004998:	69fb      	ldr	r3, [r7, #28]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049be:	f3ef 8305 	mrs	r3, IPSR
 80049c2:	617b      	str	r3, [r7, #20]
  return(result);
 80049c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d028      	beq.n	8004a1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <osMessageQueueGet+0x34>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <osMessageQueueGet+0x34>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80049dc:	f06f 0303 	mvn.w	r3, #3
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e037      	b.n	8004a54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80049e8:	f107 0310 	add.w	r3, r7, #16
 80049ec:	461a      	mov	r2, r3
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	69b8      	ldr	r0, [r7, #24]
 80049f2:	f000 fcd7 	bl	80053a4 <xQueueReceiveFromISR>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d003      	beq.n	8004a04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80049fc:	f06f 0302 	mvn.w	r3, #2
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e027      	b.n	8004a54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d024      	beq.n	8004a54 <osMessageQueueGet+0xac>
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <osMessageQueueGet+0xb8>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	e01b      	b.n	8004a54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <osMessageQueueGet+0x80>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d103      	bne.n	8004a30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004a28:	f06f 0303 	mvn.w	r3, #3
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e011      	b.n	8004a54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	69b8      	ldr	r0, [r7, #24]
 8004a36:	f000 fbd5 	bl	80051e4 <xQueueReceive>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d009      	beq.n	8004a54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a46:	f06f 0301 	mvn.w	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	e002      	b.n	8004a54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004a4e:	f06f 0302 	mvn.w	r3, #2
 8004a52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a54:	69fb      	ldr	r3, [r7, #28]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	e000ed04 	.word	0xe000ed04

08004a64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vApplicationGetIdleTaskMemory+0x30>)
 8004a7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2280      	movs	r2, #128	; 0x80
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	200001ec 	.word	0x200001ec
 8004a94:	20000248 	.word	0x20000248

08004a98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a07      	ldr	r2, [pc, #28]	; (8004ac4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004aa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a06      	ldr	r2, [pc, #24]	; (8004ac8 <vApplicationGetTimerTaskMemory+0x30>)
 8004aae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	20000448 	.word	0x20000448
 8004ac8:	200004a4 	.word	0x200004a4

08004acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f103 0208 	add.w	r2, r3, #8
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f103 0208 	add.w	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f103 0208 	add.w	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b1a:	bf00      	nop
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b085      	sub	sp, #20
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b84:	d103      	bne.n	8004b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e00c      	b.n	8004ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3308      	adds	r3, #8
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e002      	b.n	8004b9c <vListInsert+0x2e>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d2f6      	bcs.n	8004b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
}
 8004bd4:	bf00      	nop
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6892      	ldr	r2, [r2, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6852      	ldr	r2, [r2, #4]
 8004c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d103      	bne.n	8004c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1e5a      	subs	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c5e:	f002 f909 	bl	8006e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	441a      	add	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	; 0xff
 8004ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d114      	bne.n	8004cde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01a      	beq.n	8004cf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3310      	adds	r3, #16
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 f9bd 	bl	8006040 <xTaskRemoveFromEventList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d012      	beq.n	8004cf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <xQueueGenericReset+0xcc>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	e009      	b.n	8004cf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fef2 	bl	8004acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3324      	adds	r3, #36	; 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff feed 	bl	8004acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cf2:	f002 f8ef 	bl	8006ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cf6:	2301      	movs	r3, #1
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	e000ed04 	.word	0xe000ed04

08004d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08e      	sub	sp, #56	; 0x38
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <xQueueGenericCreateStatic+0x52>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <xQueueGenericCreateStatic+0x56>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <xQueueGenericCreateStatic+0x58>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	623b      	str	r3, [r7, #32]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <xQueueGenericCreateStatic+0x7e>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <xQueueGenericCreateStatic+0x82>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueGenericCreateStatic+0x84>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	61fb      	str	r3, [r7, #28]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004da2:	2350      	movs	r3, #80	; 0x50
 8004da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b50      	cmp	r3, #80	; 0x50
 8004daa:	d00a      	beq.n	8004dc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61bb      	str	r3, [r7, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	4613      	mov	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f83f 	bl	8004e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3730      	adds	r7, #48	; 0x30
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	613b      	str	r3, [r7, #16]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3350      	adds	r3, #80	; 0x50
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f002 f943 	bl	80070b8 <pvPortMalloc>
 8004e32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d011      	beq.n	8004e5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	3350      	adds	r3, #80	; 0x50
 8004e42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e4c:	79fa      	ldrb	r2, [r7, #7]
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	4613      	mov	r3, r2
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f805 	bl	8004e68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e002      	b.n	8004e8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e96:	2101      	movs	r1, #1
 8004e98:	69b8      	ldr	r0, [r7, #24]
 8004e9a:	f7ff fecb 	bl	8004c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	; 0x38
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <xQueueGenericSend+0x32>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <xQueueGenericSend+0x40>
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <xQueueGenericSend+0x44>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <xQueueGenericSend+0x46>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <xQueueGenericSend+0x60>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d103      	bne.n	8004f1e <xQueueGenericSend+0x6e>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <xQueueGenericSend+0x72>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueGenericSend+0x74>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueGenericSend+0x8e>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f3e:	f001 fa3d 	bl	80063bc <xTaskGetSchedulerState>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <xQueueGenericSend+0x9e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <xQueueGenericSend+0xa2>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <xQueueGenericSend+0xa4>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <xQueueGenericSend+0xbe>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	61fb      	str	r3, [r7, #28]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f6e:	f001 ff81 	bl	8006e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <xQueueGenericSend+0xd4>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d129      	bne.n	8004fd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8a:	f000 fa8b 	bl	80054a4 <prvCopyDataToQueue>
 8004f8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d010      	beq.n	8004fba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	3324      	adds	r3, #36	; 0x24
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f001 f84f 	bl	8006040 <xTaskRemoveFromEventList>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fa8:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8004faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	e00a      	b.n	8004fd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fc0:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fd0:	f001 ff80 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e063      	b.n	80050a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fde:	f001 ff79 	bl	8006ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e05c      	b.n	80050a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 f889 	bl	8006108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ffa:	f001 ff6b 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ffe:	f000 fdfb 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005002:	f001 ff37 	bl	8006e74 <vPortEnterCritical>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800500c:	b25b      	sxtb	r3, r3
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d103      	bne.n	800501c <xQueueGenericSend+0x16c>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005022:	b25b      	sxtb	r3, r3
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d103      	bne.n	8005032 <xQueueGenericSend+0x182>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005032:	f001 ff4f 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005036:	1d3a      	adds	r2, r7, #4
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f001 f878 	bl	8006134 <xTaskCheckForTimeOut>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d124      	bne.n	8005094 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800504a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800504c:	f000 fb22 	bl	8005694 <prvIsQueueFull>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	3310      	adds	r3, #16
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff9e 	bl	8005fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 faad 	bl	80055c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800506a:	f000 fdd3 	bl	8005c14 <xTaskResumeAll>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f af7c 	bne.w	8004f6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <xQueueGenericSend+0x1f8>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e772      	b.n	8004f6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800508a:	f000 fa9b 	bl	80055c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800508e:	f000 fdc1 	bl	8005c14 <xTaskResumeAll>
 8005092:	e76c      	b.n	8004f6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005096:	f000 fa95 	bl	80055c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800509a:	f000 fdbb 	bl	8005c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800509e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3738      	adds	r7, #56	; 0x38
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b090      	sub	sp, #64	; 0x40
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80050be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <xQueueGenericSendFromISR+0x3c>
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <xQueueGenericSendFromISR+0x40>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <xQueueGenericSendFromISR+0x42>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d103      	bne.n	8005116 <xQueueGenericSendFromISR+0x6a>
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <xQueueGenericSendFromISR+0x6e>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericSendFromISR+0x70>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	623b      	str	r3, [r7, #32]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005136:	f001 ff7f 	bl	8007038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800513a:	f3ef 8211 	mrs	r2, BASEPRI
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	61fa      	str	r2, [r7, #28]
 8005150:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005152:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <xQueueGenericSendFromISR+0xbc>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d12f      	bne.n	80051c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800517e:	f000 f991 	bl	80054a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005182:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d112      	bne.n	80051b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d016      	beq.n	80051c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	3324      	adds	r3, #36	; 0x24
 8005198:	4618      	mov	r0, r3
 800519a:	f000 ff51 	bl	8006040 <xTaskRemoveFromEventList>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e007      	b.n	80051c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	b25a      	sxtb	r2, r3
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051c2:	2301      	movs	r3, #1
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051c6:	e001      	b.n	80051cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3740      	adds	r7, #64	; 0x40
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
	...

080051e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08c      	sub	sp, #48	; 0x30
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <xQueueReceive+0x30>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	623b      	str	r3, [r7, #32]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <xQueueReceive+0x3e>
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <xQueueReceive+0x42>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <xQueueReceive+0x44>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueReceive+0x5e>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005242:	f001 f8bb 	bl	80063bc <xTaskGetSchedulerState>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <xQueueReceive+0x6e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <xQueueReceive+0x72>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <xQueueReceive+0x74>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xQueueReceive+0x8e>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	61bb      	str	r3, [r7, #24]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005272:	f001 fdff 	bl	8006e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01f      	beq.n	80052c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005286:	f000 f977 	bl	8005578 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00f      	beq.n	80052ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	3310      	adds	r3, #16
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fece 	bl	8006040 <xTaskRemoveFromEventList>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <xQueueReceive+0x1bc>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052ba:	f001 fe0b 	bl	8006ed4 <vPortExitCritical>
				return pdPASS;
 80052be:	2301      	movs	r3, #1
 80052c0:	e069      	b.n	8005396 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d103      	bne.n	80052d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052c8:	f001 fe04 	bl	8006ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e062      	b.n	8005396 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 ff14 	bl	8006108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052e4:	f001 fdf6 	bl	8006ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052e8:	f000 fc86 	bl	8005bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052ec:	f001 fdc2 	bl	8006e74 <vPortEnterCritical>
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d103      	bne.n	8005306 <xQueueReceive+0x122>
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800530c:	b25b      	sxtb	r3, r3
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d103      	bne.n	800531c <xQueueReceive+0x138>
 8005314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800531c:	f001 fdda 	bl	8006ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005320:	1d3a      	adds	r2, r7, #4
 8005322:	f107 0310 	add.w	r3, r7, #16
 8005326:	4611      	mov	r1, r2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 ff03 	bl	8006134 <xTaskCheckForTimeOut>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d123      	bne.n	800537c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005336:	f000 f997 	bl	8005668 <prvIsQueueEmpty>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d017      	beq.n	8005370 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	4611      	mov	r1, r2
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fe29 	bl	8005fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800534e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005350:	f000 f938 	bl	80055c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005354:	f000 fc5e 	bl	8005c14 <xTaskResumeAll>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d189      	bne.n	8005272 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <xQueueReceive+0x1bc>)
 8005360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	e780      	b.n	8005272 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005372:	f000 f927 	bl	80055c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005376:	f000 fc4d 	bl	8005c14 <xTaskResumeAll>
 800537a:	e77a      	b.n	8005272 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800537c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537e:	f000 f921 	bl	80055c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005382:	f000 fc47 	bl	8005c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005388:	f000 f96e 	bl	8005668 <prvIsQueueEmpty>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	f43f af6f 	beq.w	8005272 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005396:	4618      	mov	r0, r3
 8005398:	3730      	adds	r7, #48	; 0x30
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08e      	sub	sp, #56	; 0x38
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	623b      	str	r3, [r7, #32]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <xQueueReceiveFromISR+0x3a>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueReceiveFromISR+0x3e>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueReceiveFromISR+0x40>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61fb      	str	r3, [r7, #28]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053fe:	f001 fe1b 	bl	8007038 <vPortValidateInterruptPriority>
	__asm volatile
 8005402:	f3ef 8211 	mrs	r2, BASEPRI
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	61ba      	str	r2, [r7, #24]
 8005418:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800541a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d02f      	beq.n	800548a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005438:	f000 f89e 	bl	8005578 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800543c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543e:	1e5a      	subs	r2, r3, #1
 8005440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005444:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d112      	bne.n	8005474 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	3310      	adds	r3, #16
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fdf0 	bl	8006040 <xTaskRemoveFromEventList>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e007      	b.n	8005484 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005478:	3301      	adds	r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	b25a      	sxtb	r2, r3
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005484:	2301      	movs	r3, #1
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
 8005488:	e001      	b.n	800548e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800548a:	2300      	movs	r3, #0
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f383 8811 	msr	BASEPRI, r3
}
 8005498:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800549c:	4618      	mov	r0, r3
 800549e:	3738      	adds	r7, #56	; 0x38
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10d      	bne.n	80054de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d14d      	bne.n	8005566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ff92 	bl	80063f8 <xTaskPriorityDisinherit>
 80054d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	e043      	b.n	8005566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d119      	bne.n	8005518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6858      	ldr	r0, [r3, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	461a      	mov	r2, r3
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	f001 fffa 	bl	80074e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	441a      	add	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d32b      	bcc.n	8005566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	e026      	b.n	8005566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	68d8      	ldr	r0, [r3, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	461a      	mov	r2, r3
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	f001 ffe0 	bl	80074e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	425b      	negs	r3, r3
 8005532:	441a      	add	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d207      	bcs.n	8005554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	425b      	negs	r3, r3
 800554e:	441a      	add	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d105      	bne.n	8005566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	3b01      	subs	r3, #1
 8005564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800556e:	697b      	ldr	r3, [r7, #20]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	441a      	add	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d303      	bcc.n	80055ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68d9      	ldr	r1, [r3, #12]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	461a      	mov	r2, r3
 80055b6:	6838      	ldr	r0, [r7, #0]
 80055b8:	f001 ff96 	bl	80074e8 <memcpy>
	}
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055cc:	f001 fc52 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055d8:	e011      	b.n	80055fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d012      	beq.n	8005608 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3324      	adds	r3, #36	; 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fd2a 	bl	8006040 <xTaskRemoveFromEventList>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055f2:	f000 fe01 	bl	80061f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	dce9      	bgt.n	80055da <prvUnlockQueue+0x16>
 8005606:	e000      	b.n	800560a <prvUnlockQueue+0x46>
					break;
 8005608:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005612:	f001 fc5f 	bl	8006ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005616:	f001 fc2d 	bl	8006e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005620:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005622:	e011      	b.n	8005648 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3310      	adds	r3, #16
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fd05 	bl	8006040 <xTaskRemoveFromEventList>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800563c:	f000 fddc 	bl	80061f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	3b01      	subs	r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dce9      	bgt.n	8005624 <prvUnlockQueue+0x60>
 8005650:	e000      	b.n	8005654 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005652:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800565c:	f001 fc3a 	bl	8006ed4 <vPortExitCritical>
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005670:	f001 fc00 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d102      	bne.n	8005682 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e001      	b.n	8005686 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005686:	f001 fc25 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 800568a:	68fb      	ldr	r3, [r7, #12]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800569c:	f001 fbea 	bl	8006e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d102      	bne.n	80056b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056ac:	2301      	movs	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	e001      	b.n	80056b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056b6:	f001 fc0d 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 80056ba:	68fb      	ldr	r3, [r7, #12]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e014      	b.n	80056fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056d4:	4a0f      	ldr	r2, [pc, #60]	; (8005714 <vQueueAddToRegistry+0x50>)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056e0:	490c      	ldr	r1, [pc, #48]	; (8005714 <vQueueAddToRegistry+0x50>)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056ea:	4a0a      	ldr	r2, [pc, #40]	; (8005714 <vQueueAddToRegistry+0x50>)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056f6:	e006      	b.n	8005706 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b07      	cmp	r3, #7
 8005702:	d9e7      	bls.n	80056d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	200008a4 	.word	0x200008a4

08005718 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005728:	f001 fba4 	bl	8006e74 <vPortEnterCritical>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005732:	b25b      	sxtb	r3, r3
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d103      	bne.n	8005742 <vQueueWaitForMessageRestricted+0x2a>
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005748:	b25b      	sxtb	r3, r3
 800574a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574e:	d103      	bne.n	8005758 <vQueueWaitForMessageRestricted+0x40>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005758:	f001 fbbc 	bl	8006ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	3324      	adds	r3, #36	; 0x24
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fc3b 	bl	8005fe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7ff ff26 	bl	80055c4 <prvUnlockQueue>
	}
 8005778:	bf00      	nop
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08e      	sub	sp, #56	; 0x38
 8005784:	af04      	add	r7, sp, #16
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800578e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	623b      	str	r3, [r7, #32]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61fb      	str	r3, [r7, #28]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057c6:	235c      	movs	r3, #92	; 0x5c
 80057c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b5c      	cmp	r3, #92	; 0x5c
 80057ce:	d00a      	beq.n	80057e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	61bb      	str	r3, [r7, #24]
}
 80057e2:	bf00      	nop
 80057e4:	e7fe      	b.n	80057e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <xTaskCreateStatic+0xac>
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01b      	beq.n	800582c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	2202      	movs	r2, #2
 8005802:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005806:	2300      	movs	r3, #0
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	9301      	str	r3, [sp, #4]
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f850 	bl	80058c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005826:	f000 f8dd 	bl	80059e4 <prvAddNewTaskToReadyList>
 800582a:	e001      	b.n	8005830 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005830:	697b      	ldr	r3, [r7, #20]
	}
 8005832:	4618      	mov	r0, r3
 8005834:	3728      	adds	r7, #40	; 0x28
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08c      	sub	sp, #48	; 0x30
 800583e:	af04      	add	r7, sp, #16
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f001 fc32 	bl	80070b8 <pvPortMalloc>
 8005854:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800585c:	205c      	movs	r0, #92	; 0x5c
 800585e:	f001 fc2b 	bl	80070b8 <pvPortMalloc>
 8005862:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	631a      	str	r2, [r3, #48]	; 0x30
 8005870:	e005      	b.n	800587e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f001 fcec 	bl	8007250 <vPortFree>
 8005878:	e001      	b.n	800587e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d017      	beq.n	80058b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	2300      	movs	r3, #0
 8005890:	9303      	str	r3, [sp, #12]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 f80e 	bl	80058c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058a8:	69f8      	ldr	r0, [r7, #28]
 80058aa:	f000 f89b 	bl	80059e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e002      	b.n	80058ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295
 80058b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058ba:	69bb      	ldr	r3, [r7, #24]
	}
 80058bc:	4618      	mov	r0, r3
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b088      	sub	sp, #32
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	461a      	mov	r2, r3
 80058dc:	21a5      	movs	r1, #165	; 0xa5
 80058de:	f001 fe11 	bl	8007504 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058ec:	3b01      	subs	r3, #1
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617b      	str	r3, [r7, #20]
}
 8005918:	bf00      	nop
 800591a:	e7fe      	b.n	800591a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01f      	beq.n	8005962 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e012      	b.n	800594e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	7819      	ldrb	r1, [r3, #0]
 8005930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	3334      	adds	r3, #52	; 0x34
 8005938:	460a      	mov	r2, r1
 800593a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d006      	beq.n	8005956 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3301      	adds	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b0f      	cmp	r3, #15
 8005952:	d9e9      	bls.n	8005928 <prvInitialiseNewTask+0x64>
 8005954:	e000      	b.n	8005958 <prvInitialiseNewTask+0x94>
			{
				break;
 8005956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005960:	e003      	b.n	800596a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	2b37      	cmp	r3, #55	; 0x37
 800596e:	d901      	bls.n	8005974 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005970:	2337      	movs	r3, #55	; 0x37
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800597e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	3304      	adds	r3, #4
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff f8be 	bl	8004b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	3318      	adds	r3, #24
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff f8b9 	bl	8004b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	68f9      	ldr	r1, [r7, #12]
 80059c2:	69b8      	ldr	r0, [r7, #24]
 80059c4:	f001 f928 	bl	8006c18 <pxPortInitialiseStack>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059ec:	f001 fa42 	bl	8006e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f0:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a2c      	ldr	r2, [pc, #176]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 80059f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80059fa:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a08:	4b27      	ldr	r3, [pc, #156]	; (8005aa8 <prvAddNewTaskToReadyList+0xc4>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d110      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a10:	f000 fc16 	bl	8006240 <prvInitialiseTaskLists>
 8005a14:	e00d      	b.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a16:	4b26      	ldr	r3, [pc, #152]	; (8005ab0 <prvAddNewTaskToReadyList+0xcc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a1e:	4b23      	ldr	r3, [pc, #140]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d802      	bhi.n	8005a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a2c:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	; (8005ab4 <prvAddNewTaskToReadyList+0xd0>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <prvAddNewTaskToReadyList+0xd4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d903      	bls.n	8005a58 <prvAddNewTaskToReadyList+0x74>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a18      	ldr	r2, [pc, #96]	; (8005ab8 <prvAddNewTaskToReadyList+0xd4>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <prvAddNewTaskToReadyList+0xd8>)
 8005a66:	441a      	add	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7ff f859 	bl	8004b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a74:	f001 fa2e 	bl	8006ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a78:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <prvAddNewTaskToReadyList+0xcc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00e      	beq.n	8005a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <prvAddNewTaskToReadyList+0xc8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d207      	bcs.n	8005a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <prvAddNewTaskToReadyList+0xdc>)
 8005a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	f3bf 8f4f 	dsb	sy
 8005a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20000db8 	.word	0x20000db8
 8005aac:	200008e4 	.word	0x200008e4
 8005ab0:	20000dc4 	.word	0x20000dc4
 8005ab4:	20000dd4 	.word	0x20000dd4
 8005ab8:	20000dc0 	.word	0x20000dc0
 8005abc:	200008e8 	.word	0x200008e8
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d017      	beq.n	8005b06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ad6:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <vTaskDelay+0x60>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <vTaskDelay+0x30>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60bb      	str	r3, [r7, #8]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005af4:	f000 f880 	bl	8005bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fcea 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b00:	f000 f888 	bl	8005c14 <xTaskResumeAll>
 8005b04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <vTaskDelay+0x64>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000de0 	.word	0x20000de0
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b3a:	463a      	mov	r2, r7
 8005b3c:	1d39      	adds	r1, r7, #4
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe ff8e 	bl	8004a64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	9202      	str	r2, [sp, #8]
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	2300      	movs	r3, #0
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2300      	movs	r3, #0
 8005b58:	460a      	mov	r2, r1
 8005b5a:	4921      	ldr	r1, [pc, #132]	; (8005be0 <vTaskStartScheduler+0xb4>)
 8005b5c:	4821      	ldr	r0, [pc, #132]	; (8005be4 <vTaskStartScheduler+0xb8>)
 8005b5e:	f7ff fe0f 	bl	8005780 <xTaskCreateStatic>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <vTaskStartScheduler+0xbc>)
 8005b66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <vTaskStartScheduler+0xbc>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b70:	2301      	movs	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	e001      	b.n	8005b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d102      	bne.n	8005b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b80:	f000 fcfc 	bl	800657c <xTimerCreateTimerTask>
 8005b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d116      	bne.n	8005bba <vTaskStartScheduler+0x8e>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba0:	4b12      	ldr	r3, [pc, #72]	; (8005bec <vTaskStartScheduler+0xc0>)
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <vTaskStartScheduler+0xc4>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <vTaskStartScheduler+0xc8>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bb4:	f001 f8bc 	bl	8006d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bb8:	e00e      	b.n	8005bd8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d10a      	bne.n	8005bd8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	60fb      	str	r3, [r7, #12]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <vTaskStartScheduler+0xaa>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	08008988 	.word	0x08008988
 8005be4:	08006211 	.word	0x08006211
 8005be8:	20000ddc 	.word	0x20000ddc
 8005bec:	20000dd8 	.word	0x20000dd8
 8005bf0:	20000dc4 	.word	0x20000dc4
 8005bf4:	20000dbc 	.word	0x20000dbc

08005bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a03      	ldr	r2, [pc, #12]	; (8005c10 <vTaskSuspendAll+0x18>)
 8005c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	20000de0 	.word	0x20000de0

08005c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c22:	4b42      	ldr	r3, [pc, #264]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	603b      	str	r3, [r7, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	e7fe      	b.n	8005c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c40:	f001 f918 	bl	8006e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c44:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4e:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <xTaskResumeAll+0x118>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d162      	bne.n	8005d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <xTaskResumeAll+0x11c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d05e      	beq.n	8005d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c5e:	e02f      	b.n	8005cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c60:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <xTaskResumeAll+0x120>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe ffb7 	bl	8004be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe ffb2 	bl	8004be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c80:	4b2d      	ldr	r3, [pc, #180]	; (8005d38 <xTaskResumeAll+0x124>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d903      	bls.n	8005c90 <xTaskResumeAll+0x7c>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a2a      	ldr	r2, [pc, #168]	; (8005d38 <xTaskResumeAll+0x124>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a27      	ldr	r2, [pc, #156]	; (8005d3c <xTaskResumeAll+0x128>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe ff3d 	bl	8004b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <xTaskResumeAll+0x12c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d302      	bcc.n	8005cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cba:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <xTaskResumeAll+0x120>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1cb      	bne.n	8005c60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cce:	f000 fb55 	bl	800637c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <xTaskResumeAll+0x134>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d010      	beq.n	8005d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005cde:	f000 f847 	bl	8005d70 <xTaskIncrementTick>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ce8:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <xTaskResumeAll+0x130>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f1      	bne.n	8005cde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cfa:	4b13      	ldr	r3, [pc, #76]	; (8005d48 <xTaskResumeAll+0x134>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d00:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <xTaskResumeAll+0x130>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d009      	beq.n	8005d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <xTaskResumeAll+0x138>)
 8005d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d1c:	f001 f8da 	bl	8006ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d20:	68bb      	ldr	r3, [r7, #8]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000de0 	.word	0x20000de0
 8005d30:	20000db8 	.word	0x20000db8
 8005d34:	20000d78 	.word	0x20000d78
 8005d38:	20000dc0 	.word	0x20000dc0
 8005d3c:	200008e8 	.word	0x200008e8
 8005d40:	200008e4 	.word	0x200008e4
 8005d44:	20000dcc 	.word	0x20000dcc
 8005d48:	20000dc8 	.word	0x20000dc8
 8005d4c:	e000ed04 	.word	0xe000ed04

08005d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d56:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <xTaskGetTickCount+0x1c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d5c:	687b      	ldr	r3, [r7, #4]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000dbc 	.word	0x20000dbc

08005d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	; (8005eb8 <xTaskIncrementTick+0x148>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f040 808f 	bne.w	8005ea2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d84:	4b4d      	ldr	r3, [pc, #308]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d8c:	4a4b      	ldr	r2, [pc, #300]	; (8005ebc <xTaskIncrementTick+0x14c>)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d120      	bne.n	8005dda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	603b      	str	r3, [r7, #0]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <xTaskIncrementTick+0x46>
 8005db8:	4b41      	ldr	r3, [pc, #260]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a3f      	ldr	r2, [pc, #252]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <xTaskIncrementTick+0x154>)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	4b3e      	ldr	r3, [pc, #248]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4a3d      	ldr	r2, [pc, #244]	; (8005ec8 <xTaskIncrementTick+0x158>)
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	f000 fad1 	bl	800637c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dda:	4b3c      	ldr	r3, [pc, #240]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d349      	bcc.n	8005e78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dee:	4b37      	ldr	r3, [pc, #220]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
					break;
 8005df6:	e03f      	b.n	8005e78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <xTaskIncrementTick+0x150>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d203      	bcs.n	8005e18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e10:	4a2e      	ldr	r2, [pc, #184]	; (8005ecc <xTaskIncrementTick+0x15c>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e16:	e02f      	b.n	8005e78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fe fedf 	bl	8004be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fed6 	bl	8004be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d903      	bls.n	8005e48 <xTaskIncrementTick+0xd8>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <xTaskIncrementTick+0x160>)
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f7fe fe61 	bl	8004b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3b8      	bcc.n	8005de4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e76:	e7b5      	b.n	8005de4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e78:	4b17      	ldr	r3, [pc, #92]	; (8005ed8 <xTaskIncrementTick+0x168>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4915      	ldr	r1, [pc, #84]	; (8005ed4 <xTaskIncrementTick+0x164>)
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d901      	bls.n	8005e94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e90:	2301      	movs	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <xTaskIncrementTick+0x16c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e004      	b.n	8005eac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ea2:	4b0f      	ldr	r3, [pc, #60]	; (8005ee0 <xTaskIncrementTick+0x170>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <xTaskIncrementTick+0x170>)
 8005eaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005eac:	697b      	ldr	r3, [r7, #20]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000de0 	.word	0x20000de0
 8005ebc:	20000dbc 	.word	0x20000dbc
 8005ec0:	20000d70 	.word	0x20000d70
 8005ec4:	20000d74 	.word	0x20000d74
 8005ec8:	20000dd0 	.word	0x20000dd0
 8005ecc:	20000dd8 	.word	0x20000dd8
 8005ed0:	20000dc0 	.word	0x20000dc0
 8005ed4:	200008e8 	.word	0x200008e8
 8005ed8:	200008e4 	.word	0x200008e4
 8005edc:	20000dcc 	.word	0x20000dcc
 8005ee0:	20000dc8 	.word	0x20000dc8

08005ee4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eea:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <vTaskSwitchContext+0xa8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ef2:	4b27      	ldr	r3, [pc, #156]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ef8:	e041      	b.n	8005f7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005efa:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <vTaskSwitchContext+0xac>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e010      	b.n	8005f2a <vTaskSwitchContext+0x46>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vTaskSwitchContext+0x3e>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	491b      	ldr	r1, [pc, #108]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0e4      	beq.n	8005f08 <vTaskSwitchContext+0x24>
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4a13      	ldr	r2, [pc, #76]	; (8005f98 <vTaskSwitchContext+0xb4>)
 8005f4a:	4413      	add	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	605a      	str	r2, [r3, #4]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d104      	bne.n	8005f6e <vTaskSwitchContext+0x8a>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <vTaskSwitchContext+0xb8>)
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	4a06      	ldr	r2, [pc, #24]	; (8005f94 <vTaskSwitchContext+0xb0>)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6013      	str	r3, [r2, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20000de0 	.word	0x20000de0
 8005f90:	20000dcc 	.word	0x20000dcc
 8005f94:	20000dc0 	.word	0x20000dc0
 8005f98:	200008e8 	.word	0x200008e8
 8005f9c:	200008e4 	.word	0x200008e4

08005fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
}
 8005fc2:	bf00      	nop
 8005fc4:	e7fe      	b.n	8005fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <vTaskPlaceOnEventList+0x44>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3318      	adds	r3, #24
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fe fdcd 	bl	8004b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6838      	ldr	r0, [r7, #0]
 8005fd8:	f000 fa7c 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	200008e4 	.word	0x200008e4

08005fe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	617b      	str	r3, [r7, #20]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <vTaskPlaceOnEventListRestricted+0x54>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3318      	adds	r3, #24
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7fe fd84 	bl	8004b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	68b8      	ldr	r0, [r7, #8]
 800602e:	f000 fa51 	bl	80064d4 <prvAddCurrentTaskToDelayedList>
	}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	200008e4 	.word	0x200008e4

08006040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60fb      	str	r3, [r7, #12]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	3318      	adds	r3, #24
 8006070:	4618      	mov	r0, r3
 8006072:	f7fe fdb5 	bl	8004be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <xTaskRemoveFromEventList+0xb0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d11d      	bne.n	80060ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fdac 	bl	8004be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <xTaskRemoveFromEventList+0xb4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <xTaskRemoveFromEventList+0x5c>
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <xTaskRemoveFromEventList+0xb4>)
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <xTaskRemoveFromEventList+0xb8>)
 80060aa:	441a      	add	r2, r3
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	3304      	adds	r3, #4
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f7fe fd37 	bl	8004b26 <vListInsertEnd>
 80060b8:	e005      	b.n	80060c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	3318      	adds	r3, #24
 80060be:	4619      	mov	r1, r3
 80060c0:	480e      	ldr	r0, [pc, #56]	; (80060fc <xTaskRemoveFromEventList+0xbc>)
 80060c2:	f7fe fd30 	bl	8004b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <xTaskRemoveFromEventList+0xc0>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d905      	bls.n	80060e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060d4:	2301      	movs	r3, #1
 80060d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060d8:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <xTaskRemoveFromEventList+0xc4>)
 80060da:	2201      	movs	r2, #1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e001      	b.n	80060e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060e4:	697b      	ldr	r3, [r7, #20]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	20000de0 	.word	0x20000de0
 80060f4:	20000dc0 	.word	0x20000dc0
 80060f8:	200008e8 	.word	0x200008e8
 80060fc:	20000d78 	.word	0x20000d78
 8006100:	200008e4 	.word	0x200008e4
 8006104:	20000dcc 	.word	0x20000dcc

08006108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006110:	4b06      	ldr	r3, [pc, #24]	; (800612c <vTaskInternalSetTimeOutState+0x24>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006118:	4b05      	ldr	r3, [pc, #20]	; (8006130 <vTaskInternalSetTimeOutState+0x28>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	605a      	str	r2, [r3, #4]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	20000dd0 	.word	0x20000dd0
 8006130:	20000dbc 	.word	0x20000dbc

08006134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10a      	bne.n	8006176 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	60fb      	str	r3, [r7, #12]
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006176:	f000 fe7d 	bl	8006e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800617a:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <xTaskCheckForTimeOut+0xbc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006192:	d102      	bne.n	800619a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006194:	2300      	movs	r3, #0
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e023      	b.n	80061e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <xTaskCheckForTimeOut+0xc0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d007      	beq.n	80061b6 <xTaskCheckForTimeOut+0x82>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d302      	bcc.n	80061b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061b0:	2301      	movs	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e015      	b.n	80061e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d20b      	bcs.n	80061d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	1ad2      	subs	r2, r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff ff9b 	bl	8006108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	e004      	b.n	80061e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061de:	2301      	movs	r3, #1
 80061e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061e2:	f000 fe77 	bl	8006ed4 <vPortExitCritical>

	return xReturn;
 80061e6:	69fb      	ldr	r3, [r7, #28]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3720      	adds	r7, #32
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000dbc 	.word	0x20000dbc
 80061f4:	20000dd0 	.word	0x20000dd0

080061f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061fc:	4b03      	ldr	r3, [pc, #12]	; (800620c <vTaskMissedYield+0x14>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	20000dcc 	.word	0x20000dcc

08006210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006218:	f000 f852 	bl	80062c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <prvIdleTask+0x28>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d9f9      	bls.n	8006218 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006224:	4b05      	ldr	r3, [pc, #20]	; (800623c <prvIdleTask+0x2c>)
 8006226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006234:	e7f0      	b.n	8006218 <prvIdleTask+0x8>
 8006236:	bf00      	nop
 8006238:	200008e8 	.word	0x200008e8
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006246:	2300      	movs	r3, #0
 8006248:	607b      	str	r3, [r7, #4]
 800624a:	e00c      	b.n	8006266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <prvInitialiseTaskLists+0x60>)
 8006258:	4413      	add	r3, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe fc36 	bl	8004acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3301      	adds	r3, #1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b37      	cmp	r3, #55	; 0x37
 800626a:	d9ef      	bls.n	800624c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800626c:	480d      	ldr	r0, [pc, #52]	; (80062a4 <prvInitialiseTaskLists+0x64>)
 800626e:	f7fe fc2d 	bl	8004acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006272:	480d      	ldr	r0, [pc, #52]	; (80062a8 <prvInitialiseTaskLists+0x68>)
 8006274:	f7fe fc2a 	bl	8004acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006278:	480c      	ldr	r0, [pc, #48]	; (80062ac <prvInitialiseTaskLists+0x6c>)
 800627a:	f7fe fc27 	bl	8004acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800627e:	480c      	ldr	r0, [pc, #48]	; (80062b0 <prvInitialiseTaskLists+0x70>)
 8006280:	f7fe fc24 	bl	8004acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006284:	480b      	ldr	r0, [pc, #44]	; (80062b4 <prvInitialiseTaskLists+0x74>)
 8006286:	f7fe fc21 	bl	8004acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <prvInitialiseTaskLists+0x78>)
 800628c:	4a05      	ldr	r2, [pc, #20]	; (80062a4 <prvInitialiseTaskLists+0x64>)
 800628e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <prvInitialiseTaskLists+0x7c>)
 8006292:	4a05      	ldr	r2, [pc, #20]	; (80062a8 <prvInitialiseTaskLists+0x68>)
 8006294:	601a      	str	r2, [r3, #0]
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200008e8 	.word	0x200008e8
 80062a4:	20000d48 	.word	0x20000d48
 80062a8:	20000d5c 	.word	0x20000d5c
 80062ac:	20000d78 	.word	0x20000d78
 80062b0:	20000d8c 	.word	0x20000d8c
 80062b4:	20000da4 	.word	0x20000da4
 80062b8:	20000d70 	.word	0x20000d70
 80062bc:	20000d74 	.word	0x20000d74

080062c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c6:	e019      	b.n	80062fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062c8:	f000 fdd4 	bl	8006e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <prvCheckTasksWaitingTermination+0x50>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe fc81 	bl	8004be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <prvCheckTasksWaitingTermination+0x54>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	4a0b      	ldr	r2, [pc, #44]	; (8006314 <prvCheckTasksWaitingTermination+0x54>)
 80062e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <prvCheckTasksWaitingTermination+0x58>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	4a0a      	ldr	r2, [pc, #40]	; (8006318 <prvCheckTasksWaitingTermination+0x58>)
 80062f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062f2:	f000 fdef 	bl	8006ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f810 	bl	800631c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <prvCheckTasksWaitingTermination+0x58>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e1      	bne.n	80062c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000d8c 	.word	0x20000d8c
 8006314:	20000db8 	.word	0x20000db8
 8006318:	20000da0 	.word	0x20000da0

0800631c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800632a:	2b00      	cmp	r3, #0
 800632c:	d108      	bne.n	8006340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4618      	mov	r0, r3
 8006334:	f000 ff8c 	bl	8007250 <vPortFree>
				vPortFree( pxTCB );
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 ff89 	bl	8007250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800633e:	e018      	b.n	8006372 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006346:	2b01      	cmp	r3, #1
 8006348:	d103      	bne.n	8006352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 ff80 	bl	8007250 <vPortFree>
	}
 8006350:	e00f      	b.n	8006372 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006358:	2b02      	cmp	r3, #2
 800635a:	d00a      	beq.n	8006372 <prvDeleteTCB+0x56>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	60fb      	str	r3, [r7, #12]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <prvDeleteTCB+0x54>
	}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006382:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <prvResetNextTaskUnblockTime+0x38>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d104      	bne.n	8006396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvResetNextTaskUnblockTime+0x3c>)
 800638e:	f04f 32ff 	mov.w	r2, #4294967295
 8006392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006394:	e008      	b.n	80063a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006396:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <prvResetNextTaskUnblockTime+0x38>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a04      	ldr	r2, [pc, #16]	; (80063b8 <prvResetNextTaskUnblockTime+0x3c>)
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	20000d70 	.word	0x20000d70
 80063b8:	20000dd8 	.word	0x20000dd8

080063bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063c2:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <xTaskGetSchedulerState+0x34>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ca:	2301      	movs	r3, #1
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	e008      	b.n	80063e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d0:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <xTaskGetSchedulerState+0x38>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063d8:	2302      	movs	r3, #2
 80063da:	607b      	str	r3, [r7, #4]
 80063dc:	e001      	b.n	80063e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063de:	2300      	movs	r3, #0
 80063e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063e2:	687b      	ldr	r3, [r7, #4]
	}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000dc4 	.word	0x20000dc4
 80063f4:	20000de0 	.word	0x20000de0

080063f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d056      	beq.n	80064bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800640e:	4b2e      	ldr	r3, [pc, #184]	; (80064c8 <xTaskPriorityDisinherit+0xd0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	429a      	cmp	r2, r3
 8006416:	d00a      	beq.n	800642e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	60fb      	str	r3, [r7, #12]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60bb      	str	r3, [r7, #8]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006450:	1e5a      	subs	r2, r3, #1
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	429a      	cmp	r2, r3
 8006460:	d02c      	beq.n	80064bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d128      	bne.n	80064bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fbb6 	bl	8004be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4b0f      	ldr	r3, [pc, #60]	; (80064cc <xTaskPriorityDisinherit+0xd4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d903      	bls.n	800649c <xTaskPriorityDisinherit+0xa4>
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <xTaskPriorityDisinherit+0xd4>)
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <xTaskPriorityDisinherit+0xd8>)
 80064aa:	441a      	add	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fe fb37 	bl	8004b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064bc:	697b      	ldr	r3, [r7, #20]
	}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200008e4 	.word	0x200008e4
 80064cc:	20000dc0 	.word	0x20000dc0
 80064d0:	200008e8 	.word	0x200008e8

080064d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064de:	4b21      	ldr	r3, [pc, #132]	; (8006564 <prvAddCurrentTaskToDelayedList+0x90>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fb78 	bl	8004be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d10a      	bne.n	800650e <prvAddCurrentTaskToDelayedList+0x3a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064fe:	4b1a      	ldr	r3, [pc, #104]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4819      	ldr	r0, [pc, #100]	; (800656c <prvAddCurrentTaskToDelayedList+0x98>)
 8006508:	f7fe fb0d 	bl	8004b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800650c:	e026      	b.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4413      	add	r3, r2
 8006514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	429a      	cmp	r2, r3
 8006524:	d209      	bcs.n	800653a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fe fb1b 	bl	8004b6e <vListInsert>
}
 8006538:	e010      	b.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653a:	4b0e      	ldr	r3, [pc, #56]	; (8006574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <prvAddCurrentTaskToDelayedList+0x94>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4610      	mov	r0, r2
 8006548:	f7fe fb11 	bl	8004b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d202      	bcs.n	800655c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006556:	4a08      	ldr	r2, [pc, #32]	; (8006578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	6013      	str	r3, [r2, #0]
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000dbc 	.word	0x20000dbc
 8006568:	200008e4 	.word	0x200008e4
 800656c:	20000da4 	.word	0x20000da4
 8006570:	20000d74 	.word	0x20000d74
 8006574:	20000d70 	.word	0x20000d70
 8006578:	20000dd8 	.word	0x20000dd8

0800657c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006582:	2300      	movs	r3, #0
 8006584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006586:	f000 fb07 	bl	8006b98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800658a:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <xTimerCreateTimerTask+0x80>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d021      	beq.n	80065d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800659a:	1d3a      	adds	r2, r7, #4
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	f107 030c 	add.w	r3, r7, #12
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fa77 	bl	8004a98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	9202      	str	r2, [sp, #8]
 80065b2:	9301      	str	r3, [sp, #4]
 80065b4:	2302      	movs	r3, #2
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	2300      	movs	r3, #0
 80065ba:	460a      	mov	r2, r1
 80065bc:	4910      	ldr	r1, [pc, #64]	; (8006600 <xTimerCreateTimerTask+0x84>)
 80065be:	4811      	ldr	r0, [pc, #68]	; (8006604 <xTimerCreateTimerTask+0x88>)
 80065c0:	f7ff f8de 	bl	8005780 <xTaskCreateStatic>
 80065c4:	4603      	mov	r3, r0
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <xTimerCreateTimerTask+0x8c>)
 80065c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <xTimerCreateTimerTask+0x8c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065d2:	2301      	movs	r3, #1
 80065d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	613b      	str	r3, [r7, #16]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20000e14 	.word	0x20000e14
 8006600:	08008990 	.word	0x08008990
 8006604:	08006741 	.word	0x08006741
 8006608:	20000e18 	.word	0x20000e18

0800660c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08a      	sub	sp, #40	; 0x28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800661a:	2300      	movs	r3, #0
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	623b      	str	r3, [r7, #32]
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800663a:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <xTimerGenericCommand+0x98>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02a      	beq.n	8006698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b05      	cmp	r3, #5
 8006652:	dc18      	bgt.n	8006686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006654:	f7ff feb2 	bl	80063bc <xTaskGetSchedulerState>
 8006658:	4603      	mov	r3, r0
 800665a:	2b02      	cmp	r3, #2
 800665c:	d109      	bne.n	8006672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f107 0110 	add.w	r1, r7, #16
 8006666:	2300      	movs	r3, #0
 8006668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800666a:	f7fe fc21 	bl	8004eb0 <xQueueGenericSend>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
 8006670:	e012      	b.n	8006698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f107 0110 	add.w	r1, r7, #16
 800667a:	2300      	movs	r3, #0
 800667c:	2200      	movs	r2, #0
 800667e:	f7fe fc17 	bl	8004eb0 <xQueueGenericSend>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24
 8006684:	e008      	b.n	8006698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006686:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <xTimerGenericCommand+0x98>)
 8006688:	6818      	ldr	r0, [r3, #0]
 800668a:	f107 0110 	add.w	r1, r7, #16
 800668e:	2300      	movs	r3, #0
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	f7fe fd0b 	bl	80050ac <xQueueGenericSendFromISR>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000e14 	.word	0x20000e14

080066a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <prvProcessExpiredTimer+0x94>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fa8d 	bl	8004be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d022      	beq.n	800671a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	18d1      	adds	r1, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f000 f8d1 	bl	8006888 <prvInsertTimerInActiveList>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01f      	beq.n	800672c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f7ff ff88 	bl	800660c <xTimerGenericCommand>
 80066fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d113      	bne.n	800672c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	60fb      	str	r3, [r7, #12]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	b2da      	uxtb	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	6978      	ldr	r0, [r7, #20]
 8006732:	4798      	blx	r3
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	20000e0c 	.word	0x20000e0c

08006740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006748:	f107 0308 	add.w	r3, r7, #8
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f857 	bl	8006800 <prvGetNextExpireTime>
 8006752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4619      	mov	r1, r3
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f803 	bl	8006764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800675e:	f000 f8d5 	bl	800690c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006762:	e7f1      	b.n	8006748 <prvTimerTask+0x8>

08006764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800676e:	f7ff fa43 	bl	8005bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f866 	bl	8006848 <prvSampleTimeNow>
 800677c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d130      	bne.n	80067e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x3c>
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	429a      	cmp	r2, r3
 8006790:	d806      	bhi.n	80067a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006792:	f7ff fa3f 	bl	8005c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff ff85 	bl	80066a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800679e:	e024      	b.n	80067ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067a6:	4b13      	ldr	r3, [pc, #76]	; (80067f4 <prvProcessTimerOrBlockTask+0x90>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <prvProcessTimerOrBlockTask+0x50>
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <prvProcessTimerOrBlockTask+0x52>
 80067b4:	2300      	movs	r3, #0
 80067b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067b8:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <prvProcessTimerOrBlockTask+0x94>)
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	f7fe ffa7 	bl	8005718 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067ca:	f7ff fa23 	bl	8005c14 <xTaskResumeAll>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <prvProcessTimerOrBlockTask+0x98>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
}
 80067e4:	e001      	b.n	80067ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067e6:	f7ff fa15 	bl	8005c14 <xTaskResumeAll>
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000e10 	.word	0x20000e10
 80067f8:	20000e14 	.word	0x20000e14
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006808:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <prvGetNextExpireTime+0x44>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <prvGetNextExpireTime+0x16>
 8006812:	2201      	movs	r2, #1
 8006814:	e000      	b.n	8006818 <prvGetNextExpireTime+0x18>
 8006816:	2200      	movs	r2, #0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006824:	4b07      	ldr	r3, [pc, #28]	; (8006844 <prvGetNextExpireTime+0x44>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e001      	b.n	8006834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006834:	68fb      	ldr	r3, [r7, #12]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000e0c 	.word	0x20000e0c

08006848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006850:	f7ff fa7e 	bl	8005d50 <xTaskGetTickCount>
 8006854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <prvSampleTimeNow+0x3c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	429a      	cmp	r2, r3
 800685e:	d205      	bcs.n	800686c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006860:	f000 f936 	bl	8006ad0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	e002      	b.n	8006872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006872:	4a04      	ldr	r2, [pc, #16]	; (8006884 <prvSampleTimeNow+0x3c>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000e1c 	.word	0x20000e1c

08006888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d812      	bhi.n	80068d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e01b      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <prvInsertTimerInActiveList+0x7c>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fe f94e 	bl	8004b6e <vListInsert>
 80068d2:	e012      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d206      	bcs.n	80068ea <prvInsertTimerInActiveList+0x62>
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d302      	bcc.n	80068ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e007      	b.n	80068fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <prvInsertTimerInActiveList+0x80>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4619      	mov	r1, r3
 80068f4:	4610      	mov	r0, r2
 80068f6:	f7fe f93a 	bl	8004b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068fa:	697b      	ldr	r3, [r7, #20]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	20000e10 	.word	0x20000e10
 8006908:	20000e0c 	.word	0x20000e0c

0800690c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006912:	e0ca      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	da18      	bge.n	800694c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800691a:	1d3b      	adds	r3, r7, #4
 800691c:	3304      	adds	r3, #4
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61fb      	str	r3, [r7, #28]
}
 8006938:	bf00      	nop
 800693a:	e7fe      	b.n	800693a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006942:	6850      	ldr	r0, [r2, #4]
 8006944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006946:	6892      	ldr	r2, [r2, #8]
 8006948:	4611      	mov	r1, r2
 800694a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f2c0 80aa 	blt.w	8006aa8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe f93b 	bl	8004be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800696a:	463b      	mov	r3, r7
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff6b 	bl	8006848 <prvSampleTimeNow>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b09      	cmp	r3, #9
 8006978:	f200 8097 	bhi.w	8006aaa <prvProcessReceivedCommands+0x19e>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <prvProcessReceivedCommands+0x78>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069ad 	.word	0x080069ad
 8006988:	080069ad 	.word	0x080069ad
 800698c:	080069ad 	.word	0x080069ad
 8006990:	08006a21 	.word	0x08006a21
 8006994:	08006a35 	.word	0x08006a35
 8006998:	08006a7f 	.word	0x08006a7f
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069ad 	.word	0x080069ad
 80069a4:	08006a21 	.word	0x08006a21
 80069a8:	08006a35 	.word	0x08006a35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	18d1      	adds	r1, r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069cc:	f7ff ff5c 	bl	8006888 <prvInsertTimerInActiveList>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d069      	beq.n	8006aaa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05e      	beq.n	8006aaa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	441a      	add	r2, r3
 80069f4:	2300      	movs	r3, #0
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	2100      	movs	r1, #0
 80069fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fe:	f7ff fe05 	bl	800660c <xTimerGenericCommand>
 8006a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d14f      	bne.n	8006aaa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	61bb      	str	r3, [r7, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a26:	f023 0301 	bic.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a32:	e03a      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	617b      	str	r3, [r7, #20]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	18d1      	adds	r1, r2, r3
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a78:	f7ff ff06 	bl	8006888 <prvInsertTimerInActiveList>
					break;
 8006a7c:	e015      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d103      	bne.n	8006a94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8e:	f000 fbdf 	bl	8007250 <vPortFree>
 8006a92:	e00a      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006aa6:	e000      	b.n	8006aaa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006aa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aaa:	4b08      	ldr	r3, [pc, #32]	; (8006acc <prvProcessReceivedCommands+0x1c0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	1d39      	adds	r1, r7, #4
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fe fb96 	bl	80051e4 <xQueueReceive>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f47f af2a 	bne.w	8006914 <prvProcessReceivedCommands+0x8>
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	3730      	adds	r7, #48	; 0x30
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000e14 	.word	0x20000e14

08006ad0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ad6:	e048      	b.n	8006b6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae2:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe f875 	bl	8004be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d02e      	beq.n	8006b6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4413      	add	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d90e      	bls.n	8006b3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b2a:	4b19      	ldr	r3, [pc, #100]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	4610      	mov	r0, r2
 8006b36:	f7fe f81a 	bl	8004b6e <vListInsert>
 8006b3a:	e016      	b.n	8006b6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	2100      	movs	r1, #0
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fd60 	bl	800660c <xTimerGenericCommand>
 8006b4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	603b      	str	r3, [r7, #0]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1b1      	bne.n	8006ad8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b7a:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <prvSwitchTimerLists+0xc4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <prvSwitchTimerLists+0xc0>)
 8006b80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b82:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <prvSwitchTimerLists+0xc4>)
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000e0c 	.word	0x20000e0c
 8006b94:	20000e10 	.word	0x20000e10

08006b98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b9e:	f000 f969 	bl	8006e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d120      	bne.n	8006bec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006baa:	4814      	ldr	r0, [pc, #80]	; (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bac:	f7fd ff8e 	bl	8004acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006bb0:	4813      	ldr	r0, [pc, #76]	; (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bb2:	f7fd ff8b 	bl	8004acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006bb6:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <prvCheckForValidListAndQueue+0x6c>)
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <prvCheckForValidListAndQueue+0x64>)
 8006bba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006bbc:	4b12      	ldr	r3, [pc, #72]	; (8006c08 <prvCheckForValidListAndQueue+0x70>)
 8006bbe:	4a10      	ldr	r2, [pc, #64]	; (8006c00 <prvCheckForValidListAndQueue+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <prvCheckForValidListAndQueue+0x74>)
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <prvCheckForValidListAndQueue+0x78>)
 8006bca:	2110      	movs	r1, #16
 8006bcc:	200a      	movs	r0, #10
 8006bce:	f7fe f899 	bl	8004d04 <xQueueGenericCreateStatic>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bd8:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006be0:	4b05      	ldr	r3, [pc, #20]	; (8006bf8 <prvCheckForValidListAndQueue+0x60>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	490b      	ldr	r1, [pc, #44]	; (8006c14 <prvCheckForValidListAndQueue+0x7c>)
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fd6c 	bl	80056c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bec:	f000 f972 	bl	8006ed4 <vPortExitCritical>
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000e14 	.word	0x20000e14
 8006bfc:	20000de4 	.word	0x20000de4
 8006c00:	20000df8 	.word	0x20000df8
 8006c04:	20000e0c 	.word	0x20000e0c
 8006c08:	20000e10 	.word	0x20000e10
 8006c0c:	20000ec0 	.word	0x20000ec0
 8006c10:	20000e20 	.word	0x20000e20
 8006c14:	08008998 	.word	0x08008998

08006c18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3b04      	subs	r3, #4
 8006c28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	3b04      	subs	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3b04      	subs	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <pxPortInitialiseStack+0x64>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3b14      	subs	r3, #20
 8006c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f06f 0202 	mvn.w	r2, #2
 8006c66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3b20      	subs	r3, #32
 8006c6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	08006c81 	.word	0x08006c81

08006c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <prvTaskExitError+0x54>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c92:	d00a      	beq.n	8006caa <prvTaskExitError+0x2a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	60fb      	str	r3, [r7, #12]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <prvTaskExitError+0x28>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	60bb      	str	r3, [r7, #8]
}
 8006cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006cbe:	bf00      	nop
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0fc      	beq.n	8006cc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	2000000c 	.word	0x2000000c
	...

08006ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ce0:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <pxCurrentTCBConst2>)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	6808      	ldr	r0, [r1, #0]
 8006ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	f380 8809 	msr	PSP, r0
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f04f 0000 	mov.w	r0, #0
 8006cf6:	f380 8811 	msr	BASEPRI, r0
 8006cfa:	4770      	bx	lr
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst2>:
 8006d00:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d08:	4808      	ldr	r0, [pc, #32]	; (8006d2c <prvPortStartFirstTask+0x24>)
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	6800      	ldr	r0, [r0, #0]
 8006d0e:	f380 8808 	msr	MSP, r0
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f380 8814 	msr	CONTROL, r0
 8006d1a:	b662      	cpsie	i
 8006d1c:	b661      	cpsie	f
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	df00      	svc	0
 8006d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d2a:	bf00      	nop
 8006d2c:	e000ed08 	.word	0xe000ed08

08006d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d36:	4b46      	ldr	r3, [pc, #280]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a46      	ldr	r2, [pc, #280]	; (8006e54 <xPortStartScheduler+0x124>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10a      	bne.n	8006d56 <xPortStartScheduler+0x26>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d56:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <xPortStartScheduler+0x120>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3f      	ldr	r2, [pc, #252]	; (8006e58 <xPortStartScheduler+0x128>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d10a      	bne.n	8006d76 <xPortStartScheduler+0x46>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60fb      	str	r3, [r7, #12]
}
 8006d72:	bf00      	nop
 8006d74:	e7fe      	b.n	8006d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <xPortStartScheduler+0x12c>)
 8006d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	22ff      	movs	r2, #255	; 0xff
 8006d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	4b31      	ldr	r3, [pc, #196]	; (8006e60 <xPortStartScheduler+0x130>)
 8006d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006da4:	e009      	b.n	8006dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <xPortStartScheduler+0x134>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d0ef      	beq.n	8006da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006dc6:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f1c3 0307 	rsb	r3, r3, #7
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00a      	beq.n	8006de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006de8:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006df2:	4b1c      	ldr	r3, [pc, #112]	; (8006e64 <xPortStartScheduler+0x134>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <xPortStartScheduler+0x134>)
 8006dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e06:	4b18      	ldr	r3, [pc, #96]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <xPortStartScheduler+0x138>)
 8006e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e1e:	f000 f8dd 	bl	8006fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <xPortStartScheduler+0x13c>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e28:	f000 f8fc 	bl	8007024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e2c:	4b10      	ldr	r3, [pc, #64]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	; (8006e70 <xPortStartScheduler+0x140>)
 8006e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e38:	f7ff ff66 	bl	8006d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e3c:	f7ff f852 	bl	8005ee4 <vTaskSwitchContext>
	prvTaskExitError();
 8006e40:	f7ff ff1e 	bl	8006c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000ed00 	.word	0xe000ed00
 8006e54:	410fc271 	.word	0x410fc271
 8006e58:	410fc270 	.word	0x410fc270
 8006e5c:	e000e400 	.word	0xe000e400
 8006e60:	20000f10 	.word	0x20000f10
 8006e64:	20000f14 	.word	0x20000f14
 8006e68:	e000ed20 	.word	0xe000ed20
 8006e6c:	2000000c 	.word	0x2000000c
 8006e70:	e000ef34 	.word	0xe000ef34

08006e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	607b      	str	r3, [r7, #4]
}
 8006e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e8e:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <vPortEnterCritical+0x58>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d10f      	bne.n	8006ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <vPortEnterCritical+0x5c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	603b      	str	r3, [r7, #0]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <vPortEnterCritical+0x4a>
	}
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	2000000c 	.word	0x2000000c
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <vPortExitCritical+0x50>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <vPortExitCritical+0x24>
	__asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	607b      	str	r3, [r7, #4]
}
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vPortExitCritical+0x50>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vPortExitCritical+0x50>)
 8006f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f02:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <vPortExitCritical+0x50>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d105      	bne.n	8006f16 <vPortExitCritical+0x42>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f383 8811 	msr	BASEPRI, r3
}
 8006f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000000c 	.word	0x2000000c
	...

08006f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f30:	f3ef 8009 	mrs	r0, PSP
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	4b15      	ldr	r3, [pc, #84]	; (8006f90 <pxCurrentTCBConst>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f01e 0f10 	tst.w	lr, #16
 8006f40:	bf08      	it	eq
 8006f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4a:	6010      	str	r0, [r2, #0]
 8006f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f54:	f380 8811 	msr	BASEPRI, r0
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f7fe ffc0 	bl	8005ee4 <vTaskSwitchContext>
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f380 8811 	msr	BASEPRI, r0
 8006f6c:	bc09      	pop	{r0, r3}
 8006f6e:	6819      	ldr	r1, [r3, #0]
 8006f70:	6808      	ldr	r0, [r1, #0]
 8006f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f76:	f01e 0f10 	tst.w	lr, #16
 8006f7a:	bf08      	it	eq
 8006f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f80:	f380 8809 	msr	PSP, r0
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst>:
 8006f90:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fb2:	f7fe fedd 	bl	8005d70 <xTaskIncrementTick>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <xPortSysTickHandler+0x40>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <vPortSetupTimerInterrupt+0x38>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <vPortSetupTimerInterrupt+0x3c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	; (800701c <vPortSetupTimerInterrupt+0x40>)
 8006ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <vPortSetupTimerInterrupt+0x44>)
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <vPortSetupTimerInterrupt+0x34>)
 8007000:	2207      	movs	r2, #7
 8007002:	601a      	str	r2, [r3, #0]
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e010 	.word	0xe000e010
 8007014:	e000e018 	.word	0xe000e018
 8007018:	20000000 	.word	0x20000000
 800701c:	10624dd3 	.word	0x10624dd3
 8007020:	e000e014 	.word	0xe000e014

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007032:	bf00      	nop
 8007034:	e000ed88 	.word	0xe000ed88

08007038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b0f      	cmp	r3, #15
 8007048:	d914      	bls.n	8007074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704a:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <vPortValidateInterruptPriority+0x70>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007054:	4b15      	ldr	r3, [pc, #84]	; (80070ac <vPortValidateInterruptPriority+0x74>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	7afa      	ldrb	r2, [r7, #11]
 800705a:	429a      	cmp	r2, r3
 800705c:	d20a      	bcs.n	8007074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	e7fe      	b.n	8007072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007074:	4b0e      	ldr	r3, [pc, #56]	; (80070b0 <vPortValidateInterruptPriority+0x78>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800707c:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <vPortValidateInterruptPriority+0x7c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d90a      	bls.n	800709a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	603b      	str	r3, [r7, #0]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <vPortValidateInterruptPriority+0x60>
	}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	e000e3f0 	.word	0xe000e3f0
 80070ac:	20000f10 	.word	0x20000f10
 80070b0:	e000ed0c 	.word	0xe000ed0c
 80070b4:	20000f14 	.word	0x20000f14

080070b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08a      	sub	sp, #40	; 0x28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070c0:	2300      	movs	r3, #0
 80070c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070c4:	f7fe fd98 	bl	8005bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070c8:	4b5b      	ldr	r3, [pc, #364]	; (8007238 <pvPortMalloc+0x180>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070d0:	f000 f920 	bl	8007314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070d4:	4b59      	ldr	r3, [pc, #356]	; (800723c <pvPortMalloc+0x184>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f040 8093 	bne.w	8007208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01d      	beq.n	8007124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070e8:	2208      	movs	r2, #8
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d014      	beq.n	8007124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f023 0307 	bic.w	r3, r3, #7
 8007100:	3308      	adds	r3, #8
 8007102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f003 0307 	and.w	r3, r3, #7
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <pvPortMalloc+0x6c>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	617b      	str	r3, [r7, #20]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d06e      	beq.n	8007208 <pvPortMalloc+0x150>
 800712a:	4b45      	ldr	r3, [pc, #276]	; (8007240 <pvPortMalloc+0x188>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d869      	bhi.n	8007208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007134:	4b43      	ldr	r3, [pc, #268]	; (8007244 <pvPortMalloc+0x18c>)
 8007136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007138:	4b42      	ldr	r3, [pc, #264]	; (8007244 <pvPortMalloc+0x18c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713e:	e004      	b.n	800714a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <pvPortMalloc+0xa4>
 8007154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f1      	bne.n	8007140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800715c:	4b36      	ldr	r3, [pc, #216]	; (8007238 <pvPortMalloc+0x180>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	429a      	cmp	r2, r3
 8007164:	d050      	beq.n	8007208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2308      	movs	r3, #8
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	429a      	cmp	r2, r3
 8007186:	d91f      	bls.n	80071c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <pvPortMalloc+0xf8>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	613b      	str	r3, [r7, #16]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad2      	subs	r2, r2, r3
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071c2:	69b8      	ldr	r0, [r7, #24]
 80071c4:	f000 f908 	bl	80073d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <pvPortMalloc+0x188>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	4a1b      	ldr	r2, [pc, #108]	; (8007240 <pvPortMalloc+0x188>)
 80071d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <pvPortMalloc+0x188>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	4b1b      	ldr	r3, [pc, #108]	; (8007248 <pvPortMalloc+0x190>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <pvPortMalloc+0x188>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a18      	ldr	r2, [pc, #96]	; (8007248 <pvPortMalloc+0x190>)
 80071e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x184>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <pvPortMalloc+0x194>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <pvPortMalloc+0x194>)
 8007206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007208:	f7fe fd04 	bl	8005c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <pvPortMalloc+0x174>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60fb      	str	r3, [r7, #12]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <pvPortMalloc+0x172>
	return pvReturn;
 800722c:	69fb      	ldr	r3, [r7, #28]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20001ad8 	.word	0x20001ad8
 800723c:	20001aec 	.word	0x20001aec
 8007240:	20001adc 	.word	0x20001adc
 8007244:	20001ad0 	.word	0x20001ad0
 8007248:	20001ae0 	.word	0x20001ae0
 800724c:	20001ae4 	.word	0x20001ae4

08007250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04d      	beq.n	80072fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007262:	2308      	movs	r3, #8
 8007264:	425b      	negs	r3, r3
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4413      	add	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <vPortFree+0xb8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4013      	ands	r3, r2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <vPortFree+0x44>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <vPortFree+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60bb      	str	r3, [r7, #8]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <vPortFree+0xb8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d11a      	bne.n	80072fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <vPortFree+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	43db      	mvns	r3, r3
 80072d2:	401a      	ands	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072d8:	f7fe fc8e 	bl	8005bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <vPortFree+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <vPortFree+0xbc>)
 80072e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f000 f874 	bl	80073d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <vPortFree+0xc0>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3301      	adds	r3, #1
 80072f6:	4a06      	ldr	r2, [pc, #24]	; (8007310 <vPortFree+0xc0>)
 80072f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072fa:	f7fe fc8b 	bl	8005c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20001aec 	.word	0x20001aec
 800730c:	20001adc 	.word	0x20001adc
 8007310:	20001ae8 	.word	0x20001ae8

08007314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800731a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800731e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007320:	4b27      	ldr	r3, [pc, #156]	; (80073c0 <prvHeapInit+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3307      	adds	r3, #7
 8007332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	4a1f      	ldr	r2, [pc, #124]	; (80073c0 <prvHeapInit+0xac>)
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <prvHeapInit+0xb0>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007352:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <prvHeapInit+0xb0>)
 8007354:	2200      	movs	r2, #0
 8007356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	4413      	add	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007360:	2208      	movs	r2, #8
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1a9b      	subs	r3, r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0307 	bic.w	r3, r3, #7
 800736e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <prvHeapInit+0xb4>)
 8007374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007376:	4b14      	ldr	r3, [pc, #80]	; (80073c8 <prvHeapInit+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800737e:	4b12      	ldr	r3, [pc, #72]	; (80073c8 <prvHeapInit+0xb4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007394:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvHeapInit+0xb4>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	4a0a      	ldr	r2, [pc, #40]	; (80073cc <prvHeapInit+0xb8>)
 80073a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <prvHeapInit+0xbc>)
 80073aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvHeapInit+0xc0>)
 80073ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073b2:	601a      	str	r2, [r3, #0]
}
 80073b4:	bf00      	nop
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	20000f18 	.word	0x20000f18
 80073c4:	20001ad0 	.word	0x20001ad0
 80073c8:	20001ad8 	.word	0x20001ad8
 80073cc:	20001ae0 	.word	0x20001ae0
 80073d0:	20001adc 	.word	0x20001adc
 80073d4:	20001aec 	.word	0x20001aec

080073d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073e0:	4b28      	ldr	r3, [pc, #160]	; (8007484 <prvInsertBlockIntoFreeList+0xac>)
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <prvInsertBlockIntoFreeList+0x14>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d8f7      	bhi.n	80073e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	429a      	cmp	r2, r3
 8007406:	d108      	bne.n	800741a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	441a      	add	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	441a      	add	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d118      	bne.n	8007460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	4b15      	ldr	r3, [pc, #84]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d00d      	beq.n	8007456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e008      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <prvInsertBlockIntoFreeList+0xb0>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e003      	b.n	8007468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	d002      	beq.n	8007476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20001ad0 	.word	0x20001ad0
 8007488:	20001ad8 	.word	0x20001ad8

0800748c <atoi>:
 800748c:	220a      	movs	r2, #10
 800748e:	2100      	movs	r1, #0
 8007490:	f000 b9ac 	b.w	80077ec <strtol>

08007494 <__errno>:
 8007494:	4b01      	ldr	r3, [pc, #4]	; (800749c <__errno+0x8>)
 8007496:	6818      	ldr	r0, [r3, #0]
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000010 	.word	0x20000010

080074a0 <__libc_init_array>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4d0d      	ldr	r5, [pc, #52]	; (80074d8 <__libc_init_array+0x38>)
 80074a4:	4c0d      	ldr	r4, [pc, #52]	; (80074dc <__libc_init_array+0x3c>)
 80074a6:	1b64      	subs	r4, r4, r5
 80074a8:	10a4      	asrs	r4, r4, #2
 80074aa:	2600      	movs	r6, #0
 80074ac:	42a6      	cmp	r6, r4
 80074ae:	d109      	bne.n	80074c4 <__libc_init_array+0x24>
 80074b0:	4d0b      	ldr	r5, [pc, #44]	; (80074e0 <__libc_init_array+0x40>)
 80074b2:	4c0c      	ldr	r4, [pc, #48]	; (80074e4 <__libc_init_array+0x44>)
 80074b4:	f001 fa2a 	bl	800890c <_init>
 80074b8:	1b64      	subs	r4, r4, r5
 80074ba:	10a4      	asrs	r4, r4, #2
 80074bc:	2600      	movs	r6, #0
 80074be:	42a6      	cmp	r6, r4
 80074c0:	d105      	bne.n	80074ce <__libc_init_array+0x2e>
 80074c2:	bd70      	pop	{r4, r5, r6, pc}
 80074c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074c8:	4798      	blx	r3
 80074ca:	3601      	adds	r6, #1
 80074cc:	e7ee      	b.n	80074ac <__libc_init_array+0xc>
 80074ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d2:	4798      	blx	r3
 80074d4:	3601      	adds	r6, #1
 80074d6:	e7f2      	b.n	80074be <__libc_init_array+0x1e>
 80074d8:	08008c08 	.word	0x08008c08
 80074dc:	08008c08 	.word	0x08008c08
 80074e0:	08008c08 	.word	0x08008c08
 80074e4:	08008c0c 	.word	0x08008c0c

080074e8 <memcpy>:
 80074e8:	440a      	add	r2, r1
 80074ea:	4291      	cmp	r1, r2
 80074ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80074f0:	d100      	bne.n	80074f4 <memcpy+0xc>
 80074f2:	4770      	bx	lr
 80074f4:	b510      	push	{r4, lr}
 80074f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074fe:	4291      	cmp	r1, r2
 8007500:	d1f9      	bne.n	80074f6 <memcpy+0xe>
 8007502:	bd10      	pop	{r4, pc}

08007504 <memset>:
 8007504:	4402      	add	r2, r0
 8007506:	4603      	mov	r3, r0
 8007508:	4293      	cmp	r3, r2
 800750a:	d100      	bne.n	800750e <memset+0xa>
 800750c:	4770      	bx	lr
 800750e:	f803 1b01 	strb.w	r1, [r3], #1
 8007512:	e7f9      	b.n	8007508 <memset+0x4>

08007514 <_puts_r>:
 8007514:	b570      	push	{r4, r5, r6, lr}
 8007516:	460e      	mov	r6, r1
 8007518:	4605      	mov	r5, r0
 800751a:	b118      	cbz	r0, 8007524 <_puts_r+0x10>
 800751c:	6983      	ldr	r3, [r0, #24]
 800751e:	b90b      	cbnz	r3, 8007524 <_puts_r+0x10>
 8007520:	f000 fb6a 	bl	8007bf8 <__sinit>
 8007524:	69ab      	ldr	r3, [r5, #24]
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	b913      	cbnz	r3, 8007530 <_puts_r+0x1c>
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fb64 	bl	8007bf8 <__sinit>
 8007530:	4b2c      	ldr	r3, [pc, #176]	; (80075e4 <_puts_r+0xd0>)
 8007532:	429c      	cmp	r4, r3
 8007534:	d120      	bne.n	8007578 <_puts_r+0x64>
 8007536:	686c      	ldr	r4, [r5, #4]
 8007538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753a:	07db      	lsls	r3, r3, #31
 800753c:	d405      	bmi.n	800754a <_puts_r+0x36>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	0598      	lsls	r0, r3, #22
 8007542:	d402      	bmi.n	800754a <_puts_r+0x36>
 8007544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007546:	f000 fbf5 	bl	8007d34 <__retarget_lock_acquire_recursive>
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	0719      	lsls	r1, r3, #28
 800754e:	d51d      	bpl.n	800758c <_puts_r+0x78>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	b1db      	cbz	r3, 800758c <_puts_r+0x78>
 8007554:	3e01      	subs	r6, #1
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800755c:	3b01      	subs	r3, #1
 800755e:	60a3      	str	r3, [r4, #8]
 8007560:	bb39      	cbnz	r1, 80075b2 <_puts_r+0x9e>
 8007562:	2b00      	cmp	r3, #0
 8007564:	da38      	bge.n	80075d8 <_puts_r+0xc4>
 8007566:	4622      	mov	r2, r4
 8007568:	210a      	movs	r1, #10
 800756a:	4628      	mov	r0, r5
 800756c:	f000 f948 	bl	8007800 <__swbuf_r>
 8007570:	3001      	adds	r0, #1
 8007572:	d011      	beq.n	8007598 <_puts_r+0x84>
 8007574:	250a      	movs	r5, #10
 8007576:	e011      	b.n	800759c <_puts_r+0x88>
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <_puts_r+0xd4>)
 800757a:	429c      	cmp	r4, r3
 800757c:	d101      	bne.n	8007582 <_puts_r+0x6e>
 800757e:	68ac      	ldr	r4, [r5, #8]
 8007580:	e7da      	b.n	8007538 <_puts_r+0x24>
 8007582:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <_puts_r+0xd8>)
 8007584:	429c      	cmp	r4, r3
 8007586:	bf08      	it	eq
 8007588:	68ec      	ldreq	r4, [r5, #12]
 800758a:	e7d5      	b.n	8007538 <_puts_r+0x24>
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f99a 	bl	80078c8 <__swsetup_r>
 8007594:	2800      	cmp	r0, #0
 8007596:	d0dd      	beq.n	8007554 <_puts_r+0x40>
 8007598:	f04f 35ff 	mov.w	r5, #4294967295
 800759c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800759e:	07da      	lsls	r2, r3, #31
 80075a0:	d405      	bmi.n	80075ae <_puts_r+0x9a>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	059b      	lsls	r3, r3, #22
 80075a6:	d402      	bmi.n	80075ae <_puts_r+0x9a>
 80075a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075aa:	f000 fbc4 	bl	8007d36 <__retarget_lock_release_recursive>
 80075ae:	4628      	mov	r0, r5
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da04      	bge.n	80075c0 <_puts_r+0xac>
 80075b6:	69a2      	ldr	r2, [r4, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	dc06      	bgt.n	80075ca <_puts_r+0xb6>
 80075bc:	290a      	cmp	r1, #10
 80075be:	d004      	beq.n	80075ca <_puts_r+0xb6>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	6022      	str	r2, [r4, #0]
 80075c6:	7019      	strb	r1, [r3, #0]
 80075c8:	e7c5      	b.n	8007556 <_puts_r+0x42>
 80075ca:	4622      	mov	r2, r4
 80075cc:	4628      	mov	r0, r5
 80075ce:	f000 f917 	bl	8007800 <__swbuf_r>
 80075d2:	3001      	adds	r0, #1
 80075d4:	d1bf      	bne.n	8007556 <_puts_r+0x42>
 80075d6:	e7df      	b.n	8007598 <_puts_r+0x84>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	250a      	movs	r5, #10
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	6022      	str	r2, [r4, #0]
 80075e0:	701d      	strb	r5, [r3, #0]
 80075e2:	e7db      	b.n	800759c <_puts_r+0x88>
 80075e4:	08008ba0 	.word	0x08008ba0
 80075e8:	08008bc0 	.word	0x08008bc0
 80075ec:	08008b80 	.word	0x08008b80

080075f0 <puts>:
 80075f0:	4b02      	ldr	r3, [pc, #8]	; (80075fc <puts+0xc>)
 80075f2:	4601      	mov	r1, r0
 80075f4:	6818      	ldr	r0, [r3, #0]
 80075f6:	f7ff bf8d 	b.w	8007514 <_puts_r>
 80075fa:	bf00      	nop
 80075fc:	20000010 	.word	0x20000010

08007600 <siscanf>:
 8007600:	b40e      	push	{r1, r2, r3}
 8007602:	b510      	push	{r4, lr}
 8007604:	b09f      	sub	sp, #124	; 0x7c
 8007606:	ac21      	add	r4, sp, #132	; 0x84
 8007608:	f44f 7101 	mov.w	r1, #516	; 0x204
 800760c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007610:	9201      	str	r2, [sp, #4]
 8007612:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007616:	9004      	str	r0, [sp, #16]
 8007618:	9008      	str	r0, [sp, #32]
 800761a:	f7f8 fde3 	bl	80001e4 <strlen>
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <siscanf+0x50>)
 8007620:	9005      	str	r0, [sp, #20]
 8007622:	9009      	str	r0, [sp, #36]	; 0x24
 8007624:	930d      	str	r3, [sp, #52]	; 0x34
 8007626:	480b      	ldr	r0, [pc, #44]	; (8007654 <siscanf+0x54>)
 8007628:	9a01      	ldr	r2, [sp, #4]
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9403      	str	r4, [sp, #12]
 800762e:	2300      	movs	r3, #0
 8007630:	9311      	str	r3, [sp, #68]	; 0x44
 8007632:	9316      	str	r3, [sp, #88]	; 0x58
 8007634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007638:	f8ad 301e 	strh.w	r3, [sp, #30]
 800763c:	a904      	add	r1, sp, #16
 800763e:	4623      	mov	r3, r4
 8007640:	f000 fd2c 	bl	800809c <__ssvfiscanf_r>
 8007644:	b01f      	add	sp, #124	; 0x7c
 8007646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764a:	b003      	add	sp, #12
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	0800767b 	.word	0x0800767b
 8007654:	20000010 	.word	0x20000010

08007658 <__sread>:
 8007658:	b510      	push	{r4, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	f000 ffe6 	bl	8008630 <_read_r>
 8007664:	2800      	cmp	r0, #0
 8007666:	bfab      	itete	ge
 8007668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800766a:	89a3      	ldrhlt	r3, [r4, #12]
 800766c:	181b      	addge	r3, r3, r0
 800766e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007672:	bfac      	ite	ge
 8007674:	6563      	strge	r3, [r4, #84]	; 0x54
 8007676:	81a3      	strhlt	r3, [r4, #12]
 8007678:	bd10      	pop	{r4, pc}

0800767a <__seofread>:
 800767a:	2000      	movs	r0, #0
 800767c:	4770      	bx	lr

0800767e <__swrite>:
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	461f      	mov	r7, r3
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	05db      	lsls	r3, r3, #23
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d505      	bpl.n	800769c <__swrite+0x1e>
 8007690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007694:	2302      	movs	r3, #2
 8007696:	2200      	movs	r2, #0
 8007698:	f000 fb4e 	bl	8007d38 <_lseek_r>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	4632      	mov	r2, r6
 80076aa:	463b      	mov	r3, r7
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f000 b8f7 	b.w	80078a4 <_write_r>

080076b6 <__sseek>:
 80076b6:	b510      	push	{r4, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076be:	f000 fb3b 	bl	8007d38 <_lseek_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	bf15      	itete	ne
 80076c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80076ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076d2:	81a3      	strheq	r3, [r4, #12]
 80076d4:	bf18      	it	ne
 80076d6:	81a3      	strhne	r3, [r4, #12]
 80076d8:	bd10      	pop	{r4, pc}

080076da <__sclose>:
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 b961 	b.w	80079a4 <_close_r>
	...

080076e4 <_strtol_l.constprop.0>:
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ea:	d001      	beq.n	80076f0 <_strtol_l.constprop.0+0xc>
 80076ec:	2b24      	cmp	r3, #36	; 0x24
 80076ee:	d906      	bls.n	80076fe <_strtol_l.constprop.0+0x1a>
 80076f0:	f7ff fed0 	bl	8007494 <__errno>
 80076f4:	2316      	movs	r3, #22
 80076f6:	6003      	str	r3, [r0, #0]
 80076f8:	2000      	movs	r0, #0
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80077e4 <_strtol_l.constprop.0+0x100>
 8007702:	460d      	mov	r5, r1
 8007704:	462e      	mov	r6, r5
 8007706:	f815 4b01 	ldrb.w	r4, [r5], #1
 800770a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800770e:	f017 0708 	ands.w	r7, r7, #8
 8007712:	d1f7      	bne.n	8007704 <_strtol_l.constprop.0+0x20>
 8007714:	2c2d      	cmp	r4, #45	; 0x2d
 8007716:	d132      	bne.n	800777e <_strtol_l.constprop.0+0x9a>
 8007718:	782c      	ldrb	r4, [r5, #0]
 800771a:	2701      	movs	r7, #1
 800771c:	1cb5      	adds	r5, r6, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d05b      	beq.n	80077da <_strtol_l.constprop.0+0xf6>
 8007722:	2b10      	cmp	r3, #16
 8007724:	d109      	bne.n	800773a <_strtol_l.constprop.0+0x56>
 8007726:	2c30      	cmp	r4, #48	; 0x30
 8007728:	d107      	bne.n	800773a <_strtol_l.constprop.0+0x56>
 800772a:	782c      	ldrb	r4, [r5, #0]
 800772c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007730:	2c58      	cmp	r4, #88	; 0x58
 8007732:	d14d      	bne.n	80077d0 <_strtol_l.constprop.0+0xec>
 8007734:	786c      	ldrb	r4, [r5, #1]
 8007736:	2310      	movs	r3, #16
 8007738:	3502      	adds	r5, #2
 800773a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800773e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007742:	f04f 0c00 	mov.w	ip, #0
 8007746:	fbb8 f9f3 	udiv	r9, r8, r3
 800774a:	4666      	mov	r6, ip
 800774c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007750:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007754:	f1be 0f09 	cmp.w	lr, #9
 8007758:	d816      	bhi.n	8007788 <_strtol_l.constprop.0+0xa4>
 800775a:	4674      	mov	r4, lr
 800775c:	42a3      	cmp	r3, r4
 800775e:	dd24      	ble.n	80077aa <_strtol_l.constprop.0+0xc6>
 8007760:	f1bc 0f00 	cmp.w	ip, #0
 8007764:	db1e      	blt.n	80077a4 <_strtol_l.constprop.0+0xc0>
 8007766:	45b1      	cmp	r9, r6
 8007768:	d31c      	bcc.n	80077a4 <_strtol_l.constprop.0+0xc0>
 800776a:	d101      	bne.n	8007770 <_strtol_l.constprop.0+0x8c>
 800776c:	45a2      	cmp	sl, r4
 800776e:	db19      	blt.n	80077a4 <_strtol_l.constprop.0+0xc0>
 8007770:	fb06 4603 	mla	r6, r6, r3, r4
 8007774:	f04f 0c01 	mov.w	ip, #1
 8007778:	f815 4b01 	ldrb.w	r4, [r5], #1
 800777c:	e7e8      	b.n	8007750 <_strtol_l.constprop.0+0x6c>
 800777e:	2c2b      	cmp	r4, #43	; 0x2b
 8007780:	bf04      	itt	eq
 8007782:	782c      	ldrbeq	r4, [r5, #0]
 8007784:	1cb5      	addeq	r5, r6, #2
 8007786:	e7ca      	b.n	800771e <_strtol_l.constprop.0+0x3a>
 8007788:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800778c:	f1be 0f19 	cmp.w	lr, #25
 8007790:	d801      	bhi.n	8007796 <_strtol_l.constprop.0+0xb2>
 8007792:	3c37      	subs	r4, #55	; 0x37
 8007794:	e7e2      	b.n	800775c <_strtol_l.constprop.0+0x78>
 8007796:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800779a:	f1be 0f19 	cmp.w	lr, #25
 800779e:	d804      	bhi.n	80077aa <_strtol_l.constprop.0+0xc6>
 80077a0:	3c57      	subs	r4, #87	; 0x57
 80077a2:	e7db      	b.n	800775c <_strtol_l.constprop.0+0x78>
 80077a4:	f04f 3cff 	mov.w	ip, #4294967295
 80077a8:	e7e6      	b.n	8007778 <_strtol_l.constprop.0+0x94>
 80077aa:	f1bc 0f00 	cmp.w	ip, #0
 80077ae:	da05      	bge.n	80077bc <_strtol_l.constprop.0+0xd8>
 80077b0:	2322      	movs	r3, #34	; 0x22
 80077b2:	6003      	str	r3, [r0, #0]
 80077b4:	4646      	mov	r6, r8
 80077b6:	b942      	cbnz	r2, 80077ca <_strtol_l.constprop.0+0xe6>
 80077b8:	4630      	mov	r0, r6
 80077ba:	e79e      	b.n	80076fa <_strtol_l.constprop.0+0x16>
 80077bc:	b107      	cbz	r7, 80077c0 <_strtol_l.constprop.0+0xdc>
 80077be:	4276      	negs	r6, r6
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	d0f9      	beq.n	80077b8 <_strtol_l.constprop.0+0xd4>
 80077c4:	f1bc 0f00 	cmp.w	ip, #0
 80077c8:	d000      	beq.n	80077cc <_strtol_l.constprop.0+0xe8>
 80077ca:	1e69      	subs	r1, r5, #1
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	e7f3      	b.n	80077b8 <_strtol_l.constprop.0+0xd4>
 80077d0:	2430      	movs	r4, #48	; 0x30
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1b1      	bne.n	800773a <_strtol_l.constprop.0+0x56>
 80077d6:	2308      	movs	r3, #8
 80077d8:	e7af      	b.n	800773a <_strtol_l.constprop.0+0x56>
 80077da:	2c30      	cmp	r4, #48	; 0x30
 80077dc:	d0a5      	beq.n	800772a <_strtol_l.constprop.0+0x46>
 80077de:	230a      	movs	r3, #10
 80077e0:	e7ab      	b.n	800773a <_strtol_l.constprop.0+0x56>
 80077e2:	bf00      	nop
 80077e4:	08008a7d 	.word	0x08008a7d

080077e8 <_strtol_r>:
 80077e8:	f7ff bf7c 	b.w	80076e4 <_strtol_l.constprop.0>

080077ec <strtol>:
 80077ec:	4613      	mov	r3, r2
 80077ee:	460a      	mov	r2, r1
 80077f0:	4601      	mov	r1, r0
 80077f2:	4802      	ldr	r0, [pc, #8]	; (80077fc <strtol+0x10>)
 80077f4:	6800      	ldr	r0, [r0, #0]
 80077f6:	f7ff bf75 	b.w	80076e4 <_strtol_l.constprop.0>
 80077fa:	bf00      	nop
 80077fc:	20000010 	.word	0x20000010

08007800 <__swbuf_r>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	460e      	mov	r6, r1
 8007804:	4614      	mov	r4, r2
 8007806:	4605      	mov	r5, r0
 8007808:	b118      	cbz	r0, 8007812 <__swbuf_r+0x12>
 800780a:	6983      	ldr	r3, [r0, #24]
 800780c:	b90b      	cbnz	r3, 8007812 <__swbuf_r+0x12>
 800780e:	f000 f9f3 	bl	8007bf8 <__sinit>
 8007812:	4b21      	ldr	r3, [pc, #132]	; (8007898 <__swbuf_r+0x98>)
 8007814:	429c      	cmp	r4, r3
 8007816:	d12b      	bne.n	8007870 <__swbuf_r+0x70>
 8007818:	686c      	ldr	r4, [r5, #4]
 800781a:	69a3      	ldr	r3, [r4, #24]
 800781c:	60a3      	str	r3, [r4, #8]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	071a      	lsls	r2, r3, #28
 8007822:	d52f      	bpl.n	8007884 <__swbuf_r+0x84>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	b36b      	cbz	r3, 8007884 <__swbuf_r+0x84>
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	6820      	ldr	r0, [r4, #0]
 800782c:	1ac0      	subs	r0, r0, r3
 800782e:	6963      	ldr	r3, [r4, #20]
 8007830:	b2f6      	uxtb	r6, r6
 8007832:	4283      	cmp	r3, r0
 8007834:	4637      	mov	r7, r6
 8007836:	dc04      	bgt.n	8007842 <__swbuf_r+0x42>
 8007838:	4621      	mov	r1, r4
 800783a:	4628      	mov	r0, r5
 800783c:	f000 f948 	bl	8007ad0 <_fflush_r>
 8007840:	bb30      	cbnz	r0, 8007890 <__swbuf_r+0x90>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	3b01      	subs	r3, #1
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	6022      	str	r2, [r4, #0]
 800784e:	701e      	strb	r6, [r3, #0]
 8007850:	6963      	ldr	r3, [r4, #20]
 8007852:	3001      	adds	r0, #1
 8007854:	4283      	cmp	r3, r0
 8007856:	d004      	beq.n	8007862 <__swbuf_r+0x62>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	07db      	lsls	r3, r3, #31
 800785c:	d506      	bpl.n	800786c <__swbuf_r+0x6c>
 800785e:	2e0a      	cmp	r6, #10
 8007860:	d104      	bne.n	800786c <__swbuf_r+0x6c>
 8007862:	4621      	mov	r1, r4
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f933 	bl	8007ad0 <_fflush_r>
 800786a:	b988      	cbnz	r0, 8007890 <__swbuf_r+0x90>
 800786c:	4638      	mov	r0, r7
 800786e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007870:	4b0a      	ldr	r3, [pc, #40]	; (800789c <__swbuf_r+0x9c>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swbuf_r+0x7a>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7cf      	b.n	800781a <__swbuf_r+0x1a>
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <__swbuf_r+0xa0>)
 800787c:	429c      	cmp	r4, r3
 800787e:	bf08      	it	eq
 8007880:	68ec      	ldreq	r4, [r5, #12]
 8007882:	e7ca      	b.n	800781a <__swbuf_r+0x1a>
 8007884:	4621      	mov	r1, r4
 8007886:	4628      	mov	r0, r5
 8007888:	f000 f81e 	bl	80078c8 <__swsetup_r>
 800788c:	2800      	cmp	r0, #0
 800788e:	d0cb      	beq.n	8007828 <__swbuf_r+0x28>
 8007890:	f04f 37ff 	mov.w	r7, #4294967295
 8007894:	e7ea      	b.n	800786c <__swbuf_r+0x6c>
 8007896:	bf00      	nop
 8007898:	08008ba0 	.word	0x08008ba0
 800789c:	08008bc0 	.word	0x08008bc0
 80078a0:	08008b80 	.word	0x08008b80

080078a4 <_write_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	; (80078c4 <_write_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7f8 fe76 	bl	80005a4 <_write>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_write_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_write_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20001afc 	.word	0x20001afc

080078c8 <__swsetup_r>:
 80078c8:	4b32      	ldr	r3, [pc, #200]	; (8007994 <__swsetup_r+0xcc>)
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	4606      	mov	r6, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	b125      	cbz	r5, 80078de <__swsetup_r+0x16>
 80078d4:	69ab      	ldr	r3, [r5, #24]
 80078d6:	b913      	cbnz	r3, 80078de <__swsetup_r+0x16>
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f98d 	bl	8007bf8 <__sinit>
 80078de:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <__swsetup_r+0xd0>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	d10f      	bne.n	8007904 <__swsetup_r+0x3c>
 80078e4:	686c      	ldr	r4, [r5, #4]
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ec:	0719      	lsls	r1, r3, #28
 80078ee:	d42c      	bmi.n	800794a <__swsetup_r+0x82>
 80078f0:	06dd      	lsls	r5, r3, #27
 80078f2:	d411      	bmi.n	8007918 <__swsetup_r+0x50>
 80078f4:	2309      	movs	r3, #9
 80078f6:	6033      	str	r3, [r6, #0]
 80078f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	e03e      	b.n	8007982 <__swsetup_r+0xba>
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <__swsetup_r+0xd4>)
 8007906:	429c      	cmp	r4, r3
 8007908:	d101      	bne.n	800790e <__swsetup_r+0x46>
 800790a:	68ac      	ldr	r4, [r5, #8]
 800790c:	e7eb      	b.n	80078e6 <__swsetup_r+0x1e>
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <__swsetup_r+0xd8>)
 8007910:	429c      	cmp	r4, r3
 8007912:	bf08      	it	eq
 8007914:	68ec      	ldreq	r4, [r5, #12]
 8007916:	e7e6      	b.n	80078e6 <__swsetup_r+0x1e>
 8007918:	0758      	lsls	r0, r3, #29
 800791a:	d512      	bpl.n	8007942 <__swsetup_r+0x7a>
 800791c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800791e:	b141      	cbz	r1, 8007932 <__swsetup_r+0x6a>
 8007920:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007924:	4299      	cmp	r1, r3
 8007926:	d002      	beq.n	800792e <__swsetup_r+0x66>
 8007928:	4630      	mov	r0, r6
 800792a:	f000 fa7d 	bl	8007e28 <_free_r>
 800792e:	2300      	movs	r3, #0
 8007930:	6363      	str	r3, [r4, #52]	; 0x34
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	2300      	movs	r3, #0
 800793c:	6063      	str	r3, [r4, #4]
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	6023      	str	r3, [r4, #0]
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	f043 0308 	orr.w	r3, r3, #8
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	b94b      	cbnz	r3, 8007962 <__swsetup_r+0x9a>
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007958:	d003      	beq.n	8007962 <__swsetup_r+0x9a>
 800795a:	4621      	mov	r1, r4
 800795c:	4630      	mov	r0, r6
 800795e:	f000 fa23 	bl	8007da8 <__smakebuf_r>
 8007962:	89a0      	ldrh	r0, [r4, #12]
 8007964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007968:	f010 0301 	ands.w	r3, r0, #1
 800796c:	d00a      	beq.n	8007984 <__swsetup_r+0xbc>
 800796e:	2300      	movs	r3, #0
 8007970:	60a3      	str	r3, [r4, #8]
 8007972:	6963      	ldr	r3, [r4, #20]
 8007974:	425b      	negs	r3, r3
 8007976:	61a3      	str	r3, [r4, #24]
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	b943      	cbnz	r3, 800798e <__swsetup_r+0xc6>
 800797c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007980:	d1ba      	bne.n	80078f8 <__swsetup_r+0x30>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	0781      	lsls	r1, r0, #30
 8007986:	bf58      	it	pl
 8007988:	6963      	ldrpl	r3, [r4, #20]
 800798a:	60a3      	str	r3, [r4, #8]
 800798c:	e7f4      	b.n	8007978 <__swsetup_r+0xb0>
 800798e:	2000      	movs	r0, #0
 8007990:	e7f7      	b.n	8007982 <__swsetup_r+0xba>
 8007992:	bf00      	nop
 8007994:	20000010 	.word	0x20000010
 8007998:	08008ba0 	.word	0x08008ba0
 800799c:	08008bc0 	.word	0x08008bc0
 80079a0:	08008b80 	.word	0x08008b80

080079a4 <_close_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d06      	ldr	r5, [pc, #24]	; (80079c0 <_close_r+0x1c>)
 80079a8:	2300      	movs	r3, #0
 80079aa:	4604      	mov	r4, r0
 80079ac:	4608      	mov	r0, r1
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	f7f9 f9c0 	bl	8000d34 <_close>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_close_r+0x1a>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_close_r+0x1a>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20001afc 	.word	0x20001afc

080079c4 <__sflush_r>:
 80079c4:	898a      	ldrh	r2, [r1, #12]
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	0710      	lsls	r0, r2, #28
 80079ce:	460c      	mov	r4, r1
 80079d0:	d458      	bmi.n	8007a84 <__sflush_r+0xc0>
 80079d2:	684b      	ldr	r3, [r1, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc05      	bgt.n	80079e4 <__sflush_r+0x20>
 80079d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dc02      	bgt.n	80079e4 <__sflush_r+0x20>
 80079de:	2000      	movs	r0, #0
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	d0f9      	beq.n	80079de <__sflush_r+0x1a>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079f0:	682f      	ldr	r7, [r5, #0]
 80079f2:	602b      	str	r3, [r5, #0]
 80079f4:	d032      	beq.n	8007a5c <__sflush_r+0x98>
 80079f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	075a      	lsls	r2, r3, #29
 80079fc:	d505      	bpl.n	8007a0a <__sflush_r+0x46>
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	1ac0      	subs	r0, r0, r3
 8007a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a04:	b10b      	cbz	r3, 8007a0a <__sflush_r+0x46>
 8007a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a08:	1ac0      	subs	r0, r0, r3
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a10:	6a21      	ldr	r1, [r4, #32]
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b0      	blx	r6
 8007a16:	1c43      	adds	r3, r0, #1
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	d106      	bne.n	8007a2a <__sflush_r+0x66>
 8007a1c:	6829      	ldr	r1, [r5, #0]
 8007a1e:	291d      	cmp	r1, #29
 8007a20:	d82c      	bhi.n	8007a7c <__sflush_r+0xb8>
 8007a22:	4a2a      	ldr	r2, [pc, #168]	; (8007acc <__sflush_r+0x108>)
 8007a24:	40ca      	lsrs	r2, r1
 8007a26:	07d6      	lsls	r6, r2, #31
 8007a28:	d528      	bpl.n	8007a7c <__sflush_r+0xb8>
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6062      	str	r2, [r4, #4]
 8007a2e:	04d9      	lsls	r1, r3, #19
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	6022      	str	r2, [r4, #0]
 8007a34:	d504      	bpl.n	8007a40 <__sflush_r+0x7c>
 8007a36:	1c42      	adds	r2, r0, #1
 8007a38:	d101      	bne.n	8007a3e <__sflush_r+0x7a>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	b903      	cbnz	r3, 8007a40 <__sflush_r+0x7c>
 8007a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8007a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a42:	602f      	str	r7, [r5, #0]
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d0ca      	beq.n	80079de <__sflush_r+0x1a>
 8007a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	d002      	beq.n	8007a56 <__sflush_r+0x92>
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f9e9 	bl	8007e28 <_free_r>
 8007a56:	2000      	movs	r0, #0
 8007a58:	6360      	str	r0, [r4, #52]	; 0x34
 8007a5a:	e7c1      	b.n	80079e0 <__sflush_r+0x1c>
 8007a5c:	6a21      	ldr	r1, [r4, #32]
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b0      	blx	r6
 8007a64:	1c41      	adds	r1, r0, #1
 8007a66:	d1c7      	bne.n	80079f8 <__sflush_r+0x34>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0c4      	beq.n	80079f8 <__sflush_r+0x34>
 8007a6e:	2b1d      	cmp	r3, #29
 8007a70:	d001      	beq.n	8007a76 <__sflush_r+0xb2>
 8007a72:	2b16      	cmp	r3, #22
 8007a74:	d101      	bne.n	8007a7a <__sflush_r+0xb6>
 8007a76:	602f      	str	r7, [r5, #0]
 8007a78:	e7b1      	b.n	80079de <__sflush_r+0x1a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e7ad      	b.n	80079e0 <__sflush_r+0x1c>
 8007a84:	690f      	ldr	r7, [r1, #16]
 8007a86:	2f00      	cmp	r7, #0
 8007a88:	d0a9      	beq.n	80079de <__sflush_r+0x1a>
 8007a8a:	0793      	lsls	r3, r2, #30
 8007a8c:	680e      	ldr	r6, [r1, #0]
 8007a8e:	bf08      	it	eq
 8007a90:	694b      	ldreq	r3, [r1, #20]
 8007a92:	600f      	str	r7, [r1, #0]
 8007a94:	bf18      	it	ne
 8007a96:	2300      	movne	r3, #0
 8007a98:	eba6 0807 	sub.w	r8, r6, r7
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	dd9c      	ble.n	80079de <__sflush_r+0x1a>
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aa8:	4643      	mov	r3, r8
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b0      	blx	r6
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dc06      	bgt.n	8007ac2 <__sflush_r+0xfe>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e78e      	b.n	80079e0 <__sflush_r+0x1c>
 8007ac2:	4407      	add	r7, r0
 8007ac4:	eba8 0800 	sub.w	r8, r8, r0
 8007ac8:	e7e9      	b.n	8007a9e <__sflush_r+0xda>
 8007aca:	bf00      	nop
 8007acc:	20400001 	.word	0x20400001

08007ad0 <_fflush_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	690b      	ldr	r3, [r1, #16]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b913      	cbnz	r3, 8007ae0 <_fflush_r+0x10>
 8007ada:	2500      	movs	r5, #0
 8007adc:	4628      	mov	r0, r5
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	b118      	cbz	r0, 8007aea <_fflush_r+0x1a>
 8007ae2:	6983      	ldr	r3, [r0, #24]
 8007ae4:	b90b      	cbnz	r3, 8007aea <_fflush_r+0x1a>
 8007ae6:	f000 f887 	bl	8007bf8 <__sinit>
 8007aea:	4b14      	ldr	r3, [pc, #80]	; (8007b3c <_fflush_r+0x6c>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d11b      	bne.n	8007b28 <_fflush_r+0x58>
 8007af0:	686c      	ldr	r4, [r5, #4]
 8007af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0ef      	beq.n	8007ada <_fflush_r+0xa>
 8007afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007afc:	07d0      	lsls	r0, r2, #31
 8007afe:	d404      	bmi.n	8007b0a <_fflush_r+0x3a>
 8007b00:	0599      	lsls	r1, r3, #22
 8007b02:	d402      	bmi.n	8007b0a <_fflush_r+0x3a>
 8007b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b06:	f000 f915 	bl	8007d34 <__retarget_lock_acquire_recursive>
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f7ff ff59 	bl	80079c4 <__sflush_r>
 8007b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b14:	07da      	lsls	r2, r3, #31
 8007b16:	4605      	mov	r5, r0
 8007b18:	d4e0      	bmi.n	8007adc <_fflush_r+0xc>
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	059b      	lsls	r3, r3, #22
 8007b1e:	d4dd      	bmi.n	8007adc <_fflush_r+0xc>
 8007b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b22:	f000 f908 	bl	8007d36 <__retarget_lock_release_recursive>
 8007b26:	e7d9      	b.n	8007adc <_fflush_r+0xc>
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <_fflush_r+0x70>)
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	d101      	bne.n	8007b32 <_fflush_r+0x62>
 8007b2e:	68ac      	ldr	r4, [r5, #8]
 8007b30:	e7df      	b.n	8007af2 <_fflush_r+0x22>
 8007b32:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <_fflush_r+0x74>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	bf08      	it	eq
 8007b38:	68ec      	ldreq	r4, [r5, #12]
 8007b3a:	e7da      	b.n	8007af2 <_fflush_r+0x22>
 8007b3c:	08008ba0 	.word	0x08008ba0
 8007b40:	08008bc0 	.word	0x08008bc0
 8007b44:	08008b80 	.word	0x08008b80

08007b48 <std>:
 8007b48:	2300      	movs	r3, #0
 8007b4a:	b510      	push	{r4, lr}
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b56:	6083      	str	r3, [r0, #8]
 8007b58:	8181      	strh	r1, [r0, #12]
 8007b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b5c:	81c2      	strh	r2, [r0, #14]
 8007b5e:	6183      	str	r3, [r0, #24]
 8007b60:	4619      	mov	r1, r3
 8007b62:	2208      	movs	r2, #8
 8007b64:	305c      	adds	r0, #92	; 0x5c
 8007b66:	f7ff fccd 	bl	8007504 <memset>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x38>)
 8007b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x3c>)
 8007b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x40>)
 8007b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <std+0x44>)
 8007b78:	6224      	str	r4, [r4, #32]
 8007b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	08007659 	.word	0x08007659
 8007b84:	0800767f 	.word	0x0800767f
 8007b88:	080076b7 	.word	0x080076b7
 8007b8c:	080076db 	.word	0x080076db

08007b90 <_cleanup_r>:
 8007b90:	4901      	ldr	r1, [pc, #4]	; (8007b98 <_cleanup_r+0x8>)
 8007b92:	f000 b8af 	b.w	8007cf4 <_fwalk_reent>
 8007b96:	bf00      	nop
 8007b98:	08007ad1 	.word	0x08007ad1

08007b9c <__sfmoreglue>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	2268      	movs	r2, #104	; 0x68
 8007ba0:	1e4d      	subs	r5, r1, #1
 8007ba2:	4355      	muls	r5, r2
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007baa:	f000 f9a9 	bl	8007f00 <_malloc_r>
 8007bae:	4604      	mov	r4, r0
 8007bb0:	b140      	cbz	r0, 8007bc4 <__sfmoreglue+0x28>
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb8:	300c      	adds	r0, #12
 8007bba:	60a0      	str	r0, [r4, #8]
 8007bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bc0:	f7ff fca0 	bl	8007504 <memset>
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}

08007bc8 <__sfp_lock_acquire>:
 8007bc8:	4801      	ldr	r0, [pc, #4]	; (8007bd0 <__sfp_lock_acquire+0x8>)
 8007bca:	f000 b8b3 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 8007bce:	bf00      	nop
 8007bd0:	20001af1 	.word	0x20001af1

08007bd4 <__sfp_lock_release>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sfp_lock_release+0x8>)
 8007bd6:	f000 b8ae 	b.w	8007d36 <__retarget_lock_release_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20001af1 	.word	0x20001af1

08007be0 <__sinit_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sinit_lock_acquire+0x8>)
 8007be2:	f000 b8a7 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	20001af2 	.word	0x20001af2

08007bec <__sinit_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sinit_lock_release+0x8>)
 8007bee:	f000 b8a2 	b.w	8007d36 <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	20001af2 	.word	0x20001af2

08007bf8 <__sinit>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	f7ff fff0 	bl	8007be0 <__sinit_lock_acquire>
 8007c00:	69a3      	ldr	r3, [r4, #24]
 8007c02:	b11b      	cbz	r3, 8007c0c <__sinit+0x14>
 8007c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c08:	f7ff bff0 	b.w	8007bec <__sinit_lock_release>
 8007c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c10:	6523      	str	r3, [r4, #80]	; 0x50
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <__sinit+0x68>)
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <__sinit+0x6c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	bf04      	itt	eq
 8007c1e:	2301      	moveq	r3, #1
 8007c20:	61a3      	streq	r3, [r4, #24]
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f820 	bl	8007c68 <__sfp>
 8007c28:	6060      	str	r0, [r4, #4]
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f81c 	bl	8007c68 <__sfp>
 8007c30:	60a0      	str	r0, [r4, #8]
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f818 	bl	8007c68 <__sfp>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	60e0      	str	r0, [r4, #12]
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	6860      	ldr	r0, [r4, #4]
 8007c40:	f7ff ff82 	bl	8007b48 <std>
 8007c44:	68a0      	ldr	r0, [r4, #8]
 8007c46:	2201      	movs	r2, #1
 8007c48:	2109      	movs	r1, #9
 8007c4a:	f7ff ff7d 	bl	8007b48 <std>
 8007c4e:	68e0      	ldr	r0, [r4, #12]
 8007c50:	2202      	movs	r2, #2
 8007c52:	2112      	movs	r1, #18
 8007c54:	f7ff ff78 	bl	8007b48 <std>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	61a3      	str	r3, [r4, #24]
 8007c5c:	e7d2      	b.n	8007c04 <__sinit+0xc>
 8007c5e:	bf00      	nop
 8007c60:	08008a78 	.word	0x08008a78
 8007c64:	08007b91 	.word	0x08007b91

08007c68 <__sfp>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	f7ff ffac 	bl	8007bc8 <__sfp_lock_acquire>
 8007c70:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <__sfp+0x84>)
 8007c72:	681e      	ldr	r6, [r3, #0]
 8007c74:	69b3      	ldr	r3, [r6, #24]
 8007c76:	b913      	cbnz	r3, 8007c7e <__sfp+0x16>
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7ff ffbd 	bl	8007bf8 <__sinit>
 8007c7e:	3648      	adds	r6, #72	; 0x48
 8007c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	d503      	bpl.n	8007c90 <__sfp+0x28>
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	b30b      	cbz	r3, 8007cd0 <__sfp+0x68>
 8007c8c:	6836      	ldr	r6, [r6, #0]
 8007c8e:	e7f7      	b.n	8007c80 <__sfp+0x18>
 8007c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c94:	b9d5      	cbnz	r5, 8007ccc <__sfp+0x64>
 8007c96:	4b16      	ldr	r3, [pc, #88]	; (8007cf0 <__sfp+0x88>)
 8007c98:	60e3      	str	r3, [r4, #12]
 8007c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8007ca0:	f000 f847 	bl	8007d32 <__retarget_lock_init_recursive>
 8007ca4:	f7ff ff96 	bl	8007bd4 <__sfp_lock_release>
 8007ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cb0:	6025      	str	r5, [r4, #0]
 8007cb2:	61a5      	str	r5, [r4, #24]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	4629      	mov	r1, r5
 8007cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cbc:	f7ff fc22 	bl	8007504 <memset>
 8007cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc8:	4620      	mov	r0, r4
 8007cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ccc:	3468      	adds	r4, #104	; 0x68
 8007cce:	e7d9      	b.n	8007c84 <__sfp+0x1c>
 8007cd0:	2104      	movs	r1, #4
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ff62 	bl	8007b9c <__sfmoreglue>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	6030      	str	r0, [r6, #0]
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1d5      	bne.n	8007c8c <__sfp+0x24>
 8007ce0:	f7ff ff78 	bl	8007bd4 <__sfp_lock_release>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	e7ee      	b.n	8007cc8 <__sfp+0x60>
 8007cea:	bf00      	nop
 8007cec:	08008a78 	.word	0x08008a78
 8007cf0:	ffff0001 	.word	0xffff0001

08007cf4 <_fwalk_reent>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	4688      	mov	r8, r1
 8007cfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d00:	2700      	movs	r7, #0
 8007d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d06:	f1b9 0901 	subs.w	r9, r9, #1
 8007d0a:	d505      	bpl.n	8007d18 <_fwalk_reent+0x24>
 8007d0c:	6824      	ldr	r4, [r4, #0]
 8007d0e:	2c00      	cmp	r4, #0
 8007d10:	d1f7      	bne.n	8007d02 <_fwalk_reent+0xe>
 8007d12:	4638      	mov	r0, r7
 8007d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d18:	89ab      	ldrh	r3, [r5, #12]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d907      	bls.n	8007d2e <_fwalk_reent+0x3a>
 8007d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d22:	3301      	adds	r3, #1
 8007d24:	d003      	beq.n	8007d2e <_fwalk_reent+0x3a>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	47c0      	blx	r8
 8007d2c:	4307      	orrs	r7, r0
 8007d2e:	3568      	adds	r5, #104	; 0x68
 8007d30:	e7e9      	b.n	8007d06 <_fwalk_reent+0x12>

08007d32 <__retarget_lock_init_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__retarget_lock_acquire_recursive>:
 8007d34:	4770      	bx	lr

08007d36 <__retarget_lock_release_recursive>:
 8007d36:	4770      	bx	lr

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_lseek_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7f9 f81b 	bl	8000d82 <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20001afc 	.word	0x20001afc

08007d5c <__swhatbuf_r>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	460e      	mov	r6, r1
 8007d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d64:	2900      	cmp	r1, #0
 8007d66:	b096      	sub	sp, #88	; 0x58
 8007d68:	4614      	mov	r4, r2
 8007d6a:	461d      	mov	r5, r3
 8007d6c:	da08      	bge.n	8007d80 <__swhatbuf_r+0x24>
 8007d6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	602a      	str	r2, [r5, #0]
 8007d76:	061a      	lsls	r2, r3, #24
 8007d78:	d410      	bmi.n	8007d9c <__swhatbuf_r+0x40>
 8007d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d7e:	e00e      	b.n	8007d9e <__swhatbuf_r+0x42>
 8007d80:	466a      	mov	r2, sp
 8007d82:	f000 fd5d 	bl	8008840 <_fstat_r>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	dbf1      	blt.n	8007d6e <__swhatbuf_r+0x12>
 8007d8a:	9a01      	ldr	r2, [sp, #4]
 8007d8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d94:	425a      	negs	r2, r3
 8007d96:	415a      	adcs	r2, r3
 8007d98:	602a      	str	r2, [r5, #0]
 8007d9a:	e7ee      	b.n	8007d7a <__swhatbuf_r+0x1e>
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	2000      	movs	r0, #0
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	b016      	add	sp, #88	; 0x58
 8007da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007da8 <__smakebuf_r>:
 8007da8:	898b      	ldrh	r3, [r1, #12]
 8007daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dac:	079d      	lsls	r5, r3, #30
 8007dae:	4606      	mov	r6, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	d507      	bpl.n	8007dc4 <__smakebuf_r+0x1c>
 8007db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	6123      	str	r3, [r4, #16]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	6163      	str	r3, [r4, #20]
 8007dc0:	b002      	add	sp, #8
 8007dc2:	bd70      	pop	{r4, r5, r6, pc}
 8007dc4:	ab01      	add	r3, sp, #4
 8007dc6:	466a      	mov	r2, sp
 8007dc8:	f7ff ffc8 	bl	8007d5c <__swhatbuf_r>
 8007dcc:	9900      	ldr	r1, [sp, #0]
 8007dce:	4605      	mov	r5, r0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f895 	bl	8007f00 <_malloc_r>
 8007dd6:	b948      	cbnz	r0, 8007dec <__smakebuf_r+0x44>
 8007dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ddc:	059a      	lsls	r2, r3, #22
 8007dde:	d4ef      	bmi.n	8007dc0 <__smakebuf_r+0x18>
 8007de0:	f023 0303 	bic.w	r3, r3, #3
 8007de4:	f043 0302 	orr.w	r3, r3, #2
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	e7e3      	b.n	8007db4 <__smakebuf_r+0xc>
 8007dec:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <__smakebuf_r+0x7c>)
 8007dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	6020      	str	r0, [r4, #0]
 8007df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	6163      	str	r3, [r4, #20]
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	6120      	str	r0, [r4, #16]
 8007e02:	b15b      	cbz	r3, 8007e1c <__smakebuf_r+0x74>
 8007e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 fd2b 	bl	8008864 <_isatty_r>
 8007e0e:	b128      	cbz	r0, 8007e1c <__smakebuf_r+0x74>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	89a0      	ldrh	r0, [r4, #12]
 8007e1e:	4305      	orrs	r5, r0
 8007e20:	81a5      	strh	r5, [r4, #12]
 8007e22:	e7cd      	b.n	8007dc0 <__smakebuf_r+0x18>
 8007e24:	08007b91 	.word	0x08007b91

08007e28 <_free_r>:
 8007e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e2a:	2900      	cmp	r1, #0
 8007e2c:	d044      	beq.n	8007eb8 <_free_r+0x90>
 8007e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e32:	9001      	str	r0, [sp, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f1a1 0404 	sub.w	r4, r1, #4
 8007e3a:	bfb8      	it	lt
 8007e3c:	18e4      	addlt	r4, r4, r3
 8007e3e:	f000 fd21 	bl	8008884 <__malloc_lock>
 8007e42:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <_free_r+0x94>)
 8007e44:	9801      	ldr	r0, [sp, #4]
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	b933      	cbnz	r3, 8007e58 <_free_r+0x30>
 8007e4a:	6063      	str	r3, [r4, #4]
 8007e4c:	6014      	str	r4, [r2, #0]
 8007e4e:	b003      	add	sp, #12
 8007e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e54:	f000 bd1c 	b.w	8008890 <__malloc_unlock>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d908      	bls.n	8007e6e <_free_r+0x46>
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	1961      	adds	r1, r4, r5
 8007e60:	428b      	cmp	r3, r1
 8007e62:	bf01      	itttt	eq
 8007e64:	6819      	ldreq	r1, [r3, #0]
 8007e66:	685b      	ldreq	r3, [r3, #4]
 8007e68:	1949      	addeq	r1, r1, r5
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	e7ed      	b.n	8007e4a <_free_r+0x22>
 8007e6e:	461a      	mov	r2, r3
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b10b      	cbz	r3, 8007e78 <_free_r+0x50>
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	d9fa      	bls.n	8007e6e <_free_r+0x46>
 8007e78:	6811      	ldr	r1, [r2, #0]
 8007e7a:	1855      	adds	r5, r2, r1
 8007e7c:	42a5      	cmp	r5, r4
 8007e7e:	d10b      	bne.n	8007e98 <_free_r+0x70>
 8007e80:	6824      	ldr	r4, [r4, #0]
 8007e82:	4421      	add	r1, r4
 8007e84:	1854      	adds	r4, r2, r1
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	6011      	str	r1, [r2, #0]
 8007e8a:	d1e0      	bne.n	8007e4e <_free_r+0x26>
 8007e8c:	681c      	ldr	r4, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	6053      	str	r3, [r2, #4]
 8007e92:	4421      	add	r1, r4
 8007e94:	6011      	str	r1, [r2, #0]
 8007e96:	e7da      	b.n	8007e4e <_free_r+0x26>
 8007e98:	d902      	bls.n	8007ea0 <_free_r+0x78>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	6003      	str	r3, [r0, #0]
 8007e9e:	e7d6      	b.n	8007e4e <_free_r+0x26>
 8007ea0:	6825      	ldr	r5, [r4, #0]
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf04      	itt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	bf04      	itt	eq
 8007eb0:	1949      	addeq	r1, r1, r5
 8007eb2:	6021      	streq	r1, [r4, #0]
 8007eb4:	6054      	str	r4, [r2, #4]
 8007eb6:	e7ca      	b.n	8007e4e <_free_r+0x26>
 8007eb8:	b003      	add	sp, #12
 8007eba:	bd30      	pop	{r4, r5, pc}
 8007ebc:	20001af4 	.word	0x20001af4

08007ec0 <sbrk_aligned>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4e0e      	ldr	r6, [pc, #56]	; (8007efc <sbrk_aligned+0x3c>)
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6831      	ldr	r1, [r6, #0]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	b911      	cbnz	r1, 8007ed2 <sbrk_aligned+0x12>
 8007ecc:	f000 fbc2 	bl	8008654 <_sbrk_r>
 8007ed0:	6030      	str	r0, [r6, #0]
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 fbbd 	bl	8008654 <_sbrk_r>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d00a      	beq.n	8007ef4 <sbrk_aligned+0x34>
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d007      	beq.n	8007ef8 <sbrk_aligned+0x38>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fbb2 	bl	8008654 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d101      	bne.n	8007ef8 <sbrk_aligned+0x38>
 8007ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	20001af8 	.word	0x20001af8

08007f00 <_malloc_r>:
 8007f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	1ccd      	adds	r5, r1, #3
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	4607      	mov	r7, r0
 8007f16:	db01      	blt.n	8007f1c <_malloc_r+0x1c>
 8007f18:	42a9      	cmp	r1, r5
 8007f1a:	d905      	bls.n	8007f28 <_malloc_r+0x28>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	2600      	movs	r6, #0
 8007f22:	4630      	mov	r0, r6
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	4e2e      	ldr	r6, [pc, #184]	; (8007fe4 <_malloc_r+0xe4>)
 8007f2a:	f000 fcab 	bl	8008884 <__malloc_lock>
 8007f2e:	6833      	ldr	r3, [r6, #0]
 8007f30:	461c      	mov	r4, r3
 8007f32:	bb34      	cbnz	r4, 8007f82 <_malloc_r+0x82>
 8007f34:	4629      	mov	r1, r5
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ffc2 	bl	8007ec0 <sbrk_aligned>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	4604      	mov	r4, r0
 8007f40:	d14d      	bne.n	8007fde <_malloc_r+0xde>
 8007f42:	6834      	ldr	r4, [r6, #0]
 8007f44:	4626      	mov	r6, r4
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	d140      	bne.n	8007fcc <_malloc_r+0xcc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4638      	mov	r0, r7
 8007f50:	eb04 0803 	add.w	r8, r4, r3
 8007f54:	f000 fb7e 	bl	8008654 <_sbrk_r>
 8007f58:	4580      	cmp	r8, r0
 8007f5a:	d13a      	bne.n	8007fd2 <_malloc_r+0xd2>
 8007f5c:	6821      	ldr	r1, [r4, #0]
 8007f5e:	3503      	adds	r5, #3
 8007f60:	1a6d      	subs	r5, r5, r1
 8007f62:	f025 0503 	bic.w	r5, r5, #3
 8007f66:	3508      	adds	r5, #8
 8007f68:	2d0c      	cmp	r5, #12
 8007f6a:	bf38      	it	cc
 8007f6c:	250c      	movcc	r5, #12
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ffa5 	bl	8007ec0 <sbrk_aligned>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d02b      	beq.n	8007fd2 <_malloc_r+0xd2>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	442b      	add	r3, r5
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	e00e      	b.n	8007fa0 <_malloc_r+0xa0>
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	1b52      	subs	r2, r2, r5
 8007f86:	d41e      	bmi.n	8007fc6 <_malloc_r+0xc6>
 8007f88:	2a0b      	cmp	r2, #11
 8007f8a:	d916      	bls.n	8007fba <_malloc_r+0xba>
 8007f8c:	1961      	adds	r1, r4, r5
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	bf18      	it	ne
 8007f94:	6059      	strne	r1, [r3, #4]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	bf08      	it	eq
 8007f9a:	6031      	streq	r1, [r6, #0]
 8007f9c:	5162      	str	r2, [r4, r5]
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f104 060b 	add.w	r6, r4, #11
 8007fa6:	f000 fc73 	bl	8008890 <__malloc_unlock>
 8007faa:	f026 0607 	bic.w	r6, r6, #7
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	1af2      	subs	r2, r6, r3
 8007fb2:	d0b6      	beq.n	8007f22 <_malloc_r+0x22>
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	50a3      	str	r3, [r4, r2]
 8007fb8:	e7b3      	b.n	8007f22 <_malloc_r+0x22>
 8007fba:	6862      	ldr	r2, [r4, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	bf0c      	ite	eq
 8007fc0:	6032      	streq	r2, [r6, #0]
 8007fc2:	605a      	strne	r2, [r3, #4]
 8007fc4:	e7ec      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	6864      	ldr	r4, [r4, #4]
 8007fca:	e7b2      	b.n	8007f32 <_malloc_r+0x32>
 8007fcc:	4634      	mov	r4, r6
 8007fce:	6876      	ldr	r6, [r6, #4]
 8007fd0:	e7b9      	b.n	8007f46 <_malloc_r+0x46>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f000 fc5a 	bl	8008890 <__malloc_unlock>
 8007fdc:	e7a1      	b.n	8007f22 <_malloc_r+0x22>
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	e7de      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fe2:	bf00      	nop
 8007fe4:	20001af4 	.word	0x20001af4

08007fe8 <_sungetc_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	1c4b      	adds	r3, r1, #1
 8007fec:	4614      	mov	r4, r2
 8007fee:	d103      	bne.n	8007ff8 <_sungetc_r+0x10>
 8007ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	8993      	ldrh	r3, [r2, #12]
 8007ffa:	f023 0320 	bic.w	r3, r3, #32
 8007ffe:	8193      	strh	r3, [r2, #12]
 8008000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008002:	6852      	ldr	r2, [r2, #4]
 8008004:	b2cd      	uxtb	r5, r1
 8008006:	b18b      	cbz	r3, 800802c <_sungetc_r+0x44>
 8008008:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800800a:	4293      	cmp	r3, r2
 800800c:	dd08      	ble.n	8008020 <_sungetc_r+0x38>
 800800e:	6823      	ldr	r3, [r4, #0]
 8008010:	1e5a      	subs	r2, r3, #1
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	3301      	adds	r3, #1
 800801c:	6063      	str	r3, [r4, #4]
 800801e:	e7e9      	b.n	8007ff4 <_sungetc_r+0xc>
 8008020:	4621      	mov	r1, r4
 8008022:	f000 fbd3 	bl	80087cc <__submore>
 8008026:	2800      	cmp	r0, #0
 8008028:	d0f1      	beq.n	800800e <_sungetc_r+0x26>
 800802a:	e7e1      	b.n	8007ff0 <_sungetc_r+0x8>
 800802c:	6921      	ldr	r1, [r4, #16]
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	b151      	cbz	r1, 8008048 <_sungetc_r+0x60>
 8008032:	4299      	cmp	r1, r3
 8008034:	d208      	bcs.n	8008048 <_sungetc_r+0x60>
 8008036:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800803a:	42a9      	cmp	r1, r5
 800803c:	d104      	bne.n	8008048 <_sungetc_r+0x60>
 800803e:	3b01      	subs	r3, #1
 8008040:	3201      	adds	r2, #1
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	6062      	str	r2, [r4, #4]
 8008046:	e7d5      	b.n	8007ff4 <_sungetc_r+0xc>
 8008048:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800804c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008050:	6363      	str	r3, [r4, #52]	; 0x34
 8008052:	2303      	movs	r3, #3
 8008054:	63a3      	str	r3, [r4, #56]	; 0x38
 8008056:	4623      	mov	r3, r4
 8008058:	f803 5f46 	strb.w	r5, [r3, #70]!
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	2301      	movs	r3, #1
 8008060:	e7dc      	b.n	800801c <_sungetc_r+0x34>

08008062 <__ssrefill_r>:
 8008062:	b510      	push	{r4, lr}
 8008064:	460c      	mov	r4, r1
 8008066:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008068:	b169      	cbz	r1, 8008086 <__ssrefill_r+0x24>
 800806a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800806e:	4299      	cmp	r1, r3
 8008070:	d001      	beq.n	8008076 <__ssrefill_r+0x14>
 8008072:	f7ff fed9 	bl	8007e28 <_free_r>
 8008076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008078:	6063      	str	r3, [r4, #4]
 800807a:	2000      	movs	r0, #0
 800807c:	6360      	str	r0, [r4, #52]	; 0x34
 800807e:	b113      	cbz	r3, 8008086 <__ssrefill_r+0x24>
 8008080:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	bd10      	pop	{r4, pc}
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	2300      	movs	r3, #0
 800808c:	6063      	str	r3, [r4, #4]
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	81a3      	strh	r3, [r4, #12]
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	e7f3      	b.n	8008084 <__ssrefill_r+0x22>

0800809c <__ssvfiscanf_r>:
 800809c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a0:	460c      	mov	r4, r1
 80080a2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80080a6:	2100      	movs	r1, #0
 80080a8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80080ac:	49a6      	ldr	r1, [pc, #664]	; (8008348 <__ssvfiscanf_r+0x2ac>)
 80080ae:	91a0      	str	r1, [sp, #640]	; 0x280
 80080b0:	f10d 0804 	add.w	r8, sp, #4
 80080b4:	49a5      	ldr	r1, [pc, #660]	; (800834c <__ssvfiscanf_r+0x2b0>)
 80080b6:	4fa6      	ldr	r7, [pc, #664]	; (8008350 <__ssvfiscanf_r+0x2b4>)
 80080b8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008354 <__ssvfiscanf_r+0x2b8>
 80080bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80080c0:	4606      	mov	r6, r0
 80080c2:	91a1      	str	r1, [sp, #644]	; 0x284
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	7813      	ldrb	r3, [r2, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 815a 	beq.w	8008382 <__ssvfiscanf_r+0x2e6>
 80080ce:	5dd9      	ldrb	r1, [r3, r7]
 80080d0:	f011 0108 	ands.w	r1, r1, #8
 80080d4:	f102 0501 	add.w	r5, r2, #1
 80080d8:	d019      	beq.n	800810e <__ssvfiscanf_r+0x72>
 80080da:	6863      	ldr	r3, [r4, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd0f      	ble.n	8008100 <__ssvfiscanf_r+0x64>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	5cba      	ldrb	r2, [r7, r2]
 80080e6:	0712      	lsls	r2, r2, #28
 80080e8:	d401      	bmi.n	80080ee <__ssvfiscanf_r+0x52>
 80080ea:	462a      	mov	r2, r5
 80080ec:	e7eb      	b.n	80080c6 <__ssvfiscanf_r+0x2a>
 80080ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80080f0:	3201      	adds	r2, #1
 80080f2:	9245      	str	r2, [sp, #276]	; 0x114
 80080f4:	6862      	ldr	r2, [r4, #4]
 80080f6:	3301      	adds	r3, #1
 80080f8:	3a01      	subs	r2, #1
 80080fa:	6062      	str	r2, [r4, #4]
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	e7ec      	b.n	80080da <__ssvfiscanf_r+0x3e>
 8008100:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008102:	4621      	mov	r1, r4
 8008104:	4630      	mov	r0, r6
 8008106:	4798      	blx	r3
 8008108:	2800      	cmp	r0, #0
 800810a:	d0e9      	beq.n	80080e0 <__ssvfiscanf_r+0x44>
 800810c:	e7ed      	b.n	80080ea <__ssvfiscanf_r+0x4e>
 800810e:	2b25      	cmp	r3, #37	; 0x25
 8008110:	d012      	beq.n	8008138 <__ssvfiscanf_r+0x9c>
 8008112:	469a      	mov	sl, r3
 8008114:	6863      	ldr	r3, [r4, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f340 8091 	ble.w	800823e <__ssvfiscanf_r+0x1a2>
 800811c:	6822      	ldr	r2, [r4, #0]
 800811e:	7813      	ldrb	r3, [r2, #0]
 8008120:	4553      	cmp	r3, sl
 8008122:	f040 812e 	bne.w	8008382 <__ssvfiscanf_r+0x2e6>
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	3b01      	subs	r3, #1
 800812a:	6063      	str	r3, [r4, #4]
 800812c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800812e:	3201      	adds	r2, #1
 8008130:	3301      	adds	r3, #1
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	9345      	str	r3, [sp, #276]	; 0x114
 8008136:	e7d8      	b.n	80080ea <__ssvfiscanf_r+0x4e>
 8008138:	9141      	str	r1, [sp, #260]	; 0x104
 800813a:	9143      	str	r1, [sp, #268]	; 0x10c
 800813c:	7853      	ldrb	r3, [r2, #1]
 800813e:	2b2a      	cmp	r3, #42	; 0x2a
 8008140:	bf02      	ittt	eq
 8008142:	2310      	moveq	r3, #16
 8008144:	1c95      	addeq	r5, r2, #2
 8008146:	9341      	streq	r3, [sp, #260]	; 0x104
 8008148:	220a      	movs	r2, #10
 800814a:	46aa      	mov	sl, r5
 800814c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008150:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008154:	2b09      	cmp	r3, #9
 8008156:	d91d      	bls.n	8008194 <__ssvfiscanf_r+0xf8>
 8008158:	487e      	ldr	r0, [pc, #504]	; (8008354 <__ssvfiscanf_r+0x2b8>)
 800815a:	2203      	movs	r2, #3
 800815c:	f7f8 f850 	bl	8000200 <memchr>
 8008160:	b140      	cbz	r0, 8008174 <__ssvfiscanf_r+0xd8>
 8008162:	2301      	movs	r3, #1
 8008164:	eba0 0009 	sub.w	r0, r0, r9
 8008168:	fa03 f000 	lsl.w	r0, r3, r0
 800816c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800816e:	4318      	orrs	r0, r3
 8008170:	9041      	str	r0, [sp, #260]	; 0x104
 8008172:	4655      	mov	r5, sl
 8008174:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008178:	2b78      	cmp	r3, #120	; 0x78
 800817a:	d806      	bhi.n	800818a <__ssvfiscanf_r+0xee>
 800817c:	2b57      	cmp	r3, #87	; 0x57
 800817e:	d810      	bhi.n	80081a2 <__ssvfiscanf_r+0x106>
 8008180:	2b25      	cmp	r3, #37	; 0x25
 8008182:	d0c6      	beq.n	8008112 <__ssvfiscanf_r+0x76>
 8008184:	d856      	bhi.n	8008234 <__ssvfiscanf_r+0x198>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d064      	beq.n	8008254 <__ssvfiscanf_r+0x1b8>
 800818a:	2303      	movs	r3, #3
 800818c:	9347      	str	r3, [sp, #284]	; 0x11c
 800818e:	230a      	movs	r3, #10
 8008190:	9342      	str	r3, [sp, #264]	; 0x108
 8008192:	e071      	b.n	8008278 <__ssvfiscanf_r+0x1dc>
 8008194:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008196:	fb02 1103 	mla	r1, r2, r3, r1
 800819a:	3930      	subs	r1, #48	; 0x30
 800819c:	9143      	str	r1, [sp, #268]	; 0x10c
 800819e:	4655      	mov	r5, sl
 80081a0:	e7d3      	b.n	800814a <__ssvfiscanf_r+0xae>
 80081a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80081a6:	2a20      	cmp	r2, #32
 80081a8:	d8ef      	bhi.n	800818a <__ssvfiscanf_r+0xee>
 80081aa:	a101      	add	r1, pc, #4	; (adr r1, 80081b0 <__ssvfiscanf_r+0x114>)
 80081ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081b0:	08008263 	.word	0x08008263
 80081b4:	0800818b 	.word	0x0800818b
 80081b8:	0800818b 	.word	0x0800818b
 80081bc:	080082c1 	.word	0x080082c1
 80081c0:	0800818b 	.word	0x0800818b
 80081c4:	0800818b 	.word	0x0800818b
 80081c8:	0800818b 	.word	0x0800818b
 80081cc:	0800818b 	.word	0x0800818b
 80081d0:	0800818b 	.word	0x0800818b
 80081d4:	0800818b 	.word	0x0800818b
 80081d8:	0800818b 	.word	0x0800818b
 80081dc:	080082d7 	.word	0x080082d7
 80081e0:	080082ad 	.word	0x080082ad
 80081e4:	0800823b 	.word	0x0800823b
 80081e8:	0800823b 	.word	0x0800823b
 80081ec:	0800823b 	.word	0x0800823b
 80081f0:	0800818b 	.word	0x0800818b
 80081f4:	080082b1 	.word	0x080082b1
 80081f8:	0800818b 	.word	0x0800818b
 80081fc:	0800818b 	.word	0x0800818b
 8008200:	0800818b 	.word	0x0800818b
 8008204:	0800818b 	.word	0x0800818b
 8008208:	080082e7 	.word	0x080082e7
 800820c:	080082b9 	.word	0x080082b9
 8008210:	0800825b 	.word	0x0800825b
 8008214:	0800818b 	.word	0x0800818b
 8008218:	0800818b 	.word	0x0800818b
 800821c:	080082e3 	.word	0x080082e3
 8008220:	0800818b 	.word	0x0800818b
 8008224:	080082ad 	.word	0x080082ad
 8008228:	0800818b 	.word	0x0800818b
 800822c:	0800818b 	.word	0x0800818b
 8008230:	08008263 	.word	0x08008263
 8008234:	3b45      	subs	r3, #69	; 0x45
 8008236:	2b02      	cmp	r3, #2
 8008238:	d8a7      	bhi.n	800818a <__ssvfiscanf_r+0xee>
 800823a:	2305      	movs	r3, #5
 800823c:	e01b      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 800823e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008240:	4621      	mov	r1, r4
 8008242:	4630      	mov	r0, r6
 8008244:	4798      	blx	r3
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f af68 	beq.w	800811c <__ssvfiscanf_r+0x80>
 800824c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800824e:	2800      	cmp	r0, #0
 8008250:	f040 808d 	bne.w	800836e <__ssvfiscanf_r+0x2d2>
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	e08f      	b.n	800837a <__ssvfiscanf_r+0x2de>
 800825a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800825c:	f042 0220 	orr.w	r2, r2, #32
 8008260:	9241      	str	r2, [sp, #260]	; 0x104
 8008262:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008268:	9241      	str	r2, [sp, #260]	; 0x104
 800826a:	2210      	movs	r2, #16
 800826c:	2b6f      	cmp	r3, #111	; 0x6f
 800826e:	9242      	str	r2, [sp, #264]	; 0x108
 8008270:	bf34      	ite	cc
 8008272:	2303      	movcc	r3, #3
 8008274:	2304      	movcs	r3, #4
 8008276:	9347      	str	r3, [sp, #284]	; 0x11c
 8008278:	6863      	ldr	r3, [r4, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd42      	ble.n	8008304 <__ssvfiscanf_r+0x268>
 800827e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008280:	0659      	lsls	r1, r3, #25
 8008282:	d404      	bmi.n	800828e <__ssvfiscanf_r+0x1f2>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	5cba      	ldrb	r2, [r7, r2]
 800828a:	0712      	lsls	r2, r2, #28
 800828c:	d441      	bmi.n	8008312 <__ssvfiscanf_r+0x276>
 800828e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008290:	2b02      	cmp	r3, #2
 8008292:	dc50      	bgt.n	8008336 <__ssvfiscanf_r+0x29a>
 8008294:	466b      	mov	r3, sp
 8008296:	4622      	mov	r2, r4
 8008298:	a941      	add	r1, sp, #260	; 0x104
 800829a:	4630      	mov	r0, r6
 800829c:	f000 f876 	bl	800838c <_scanf_chars>
 80082a0:	2801      	cmp	r0, #1
 80082a2:	d06e      	beq.n	8008382 <__ssvfiscanf_r+0x2e6>
 80082a4:	2802      	cmp	r0, #2
 80082a6:	f47f af20 	bne.w	80080ea <__ssvfiscanf_r+0x4e>
 80082aa:	e7cf      	b.n	800824c <__ssvfiscanf_r+0x1b0>
 80082ac:	220a      	movs	r2, #10
 80082ae:	e7dd      	b.n	800826c <__ssvfiscanf_r+0x1d0>
 80082b0:	2300      	movs	r3, #0
 80082b2:	9342      	str	r3, [sp, #264]	; 0x108
 80082b4:	2303      	movs	r3, #3
 80082b6:	e7de      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 80082b8:	2308      	movs	r3, #8
 80082ba:	9342      	str	r3, [sp, #264]	; 0x108
 80082bc:	2304      	movs	r3, #4
 80082be:	e7da      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 80082c0:	4629      	mov	r1, r5
 80082c2:	4640      	mov	r0, r8
 80082c4:	f000 f9d6 	bl	8008674 <__sccl>
 80082c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80082ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ce:	9341      	str	r3, [sp, #260]	; 0x104
 80082d0:	4605      	mov	r5, r0
 80082d2:	2301      	movs	r3, #1
 80082d4:	e7cf      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 80082d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80082d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082dc:	9341      	str	r3, [sp, #260]	; 0x104
 80082de:	2300      	movs	r3, #0
 80082e0:	e7c9      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e7c7      	b.n	8008276 <__ssvfiscanf_r+0x1da>
 80082e6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80082e8:	06c3      	lsls	r3, r0, #27
 80082ea:	f53f aefe 	bmi.w	80080ea <__ssvfiscanf_r+0x4e>
 80082ee:	9b00      	ldr	r3, [sp, #0]
 80082f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80082f2:	1d19      	adds	r1, r3, #4
 80082f4:	9100      	str	r1, [sp, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f010 0f01 	tst.w	r0, #1
 80082fc:	bf14      	ite	ne
 80082fe:	801a      	strhne	r2, [r3, #0]
 8008300:	601a      	streq	r2, [r3, #0]
 8008302:	e6f2      	b.n	80080ea <__ssvfiscanf_r+0x4e>
 8008304:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008306:	4621      	mov	r1, r4
 8008308:	4630      	mov	r0, r6
 800830a:	4798      	blx	r3
 800830c:	2800      	cmp	r0, #0
 800830e:	d0b6      	beq.n	800827e <__ssvfiscanf_r+0x1e2>
 8008310:	e79c      	b.n	800824c <__ssvfiscanf_r+0x1b0>
 8008312:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008314:	3201      	adds	r2, #1
 8008316:	9245      	str	r2, [sp, #276]	; 0x114
 8008318:	6862      	ldr	r2, [r4, #4]
 800831a:	3a01      	subs	r2, #1
 800831c:	2a00      	cmp	r2, #0
 800831e:	6062      	str	r2, [r4, #4]
 8008320:	dd02      	ble.n	8008328 <__ssvfiscanf_r+0x28c>
 8008322:	3301      	adds	r3, #1
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	e7ad      	b.n	8008284 <__ssvfiscanf_r+0x1e8>
 8008328:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800832a:	4621      	mov	r1, r4
 800832c:	4630      	mov	r0, r6
 800832e:	4798      	blx	r3
 8008330:	2800      	cmp	r0, #0
 8008332:	d0a7      	beq.n	8008284 <__ssvfiscanf_r+0x1e8>
 8008334:	e78a      	b.n	800824c <__ssvfiscanf_r+0x1b0>
 8008336:	2b04      	cmp	r3, #4
 8008338:	dc0e      	bgt.n	8008358 <__ssvfiscanf_r+0x2bc>
 800833a:	466b      	mov	r3, sp
 800833c:	4622      	mov	r2, r4
 800833e:	a941      	add	r1, sp, #260	; 0x104
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f87d 	bl	8008440 <_scanf_i>
 8008346:	e7ab      	b.n	80082a0 <__ssvfiscanf_r+0x204>
 8008348:	08007fe9 	.word	0x08007fe9
 800834c:	08008063 	.word	0x08008063
 8008350:	08008a7d 	.word	0x08008a7d
 8008354:	08008be0 	.word	0x08008be0
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <__ssvfiscanf_r+0x2ec>)
 800835a:	2b00      	cmp	r3, #0
 800835c:	f43f aec5 	beq.w	80080ea <__ssvfiscanf_r+0x4e>
 8008360:	466b      	mov	r3, sp
 8008362:	4622      	mov	r2, r4
 8008364:	a941      	add	r1, sp, #260	; 0x104
 8008366:	4630      	mov	r0, r6
 8008368:	f3af 8000 	nop.w
 800836c:	e798      	b.n	80082a0 <__ssvfiscanf_r+0x204>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008374:	bf18      	it	ne
 8008376:	f04f 30ff 	movne.w	r0, #4294967295
 800837a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008384:	e7f9      	b.n	800837a <__ssvfiscanf_r+0x2de>
 8008386:	bf00      	nop
 8008388:	00000000 	.word	0x00000000

0800838c <_scanf_chars>:
 800838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008390:	4615      	mov	r5, r2
 8008392:	688a      	ldr	r2, [r1, #8]
 8008394:	4680      	mov	r8, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b932      	cbnz	r2, 80083a8 <_scanf_chars+0x1c>
 800839a:	698a      	ldr	r2, [r1, #24]
 800839c:	2a00      	cmp	r2, #0
 800839e:	bf0c      	ite	eq
 80083a0:	2201      	moveq	r2, #1
 80083a2:	f04f 32ff 	movne.w	r2, #4294967295
 80083a6:	608a      	str	r2, [r1, #8]
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800843c <_scanf_chars+0xb0>
 80083ae:	06d1      	lsls	r1, r2, #27
 80083b0:	bf5f      	itttt	pl
 80083b2:	681a      	ldrpl	r2, [r3, #0]
 80083b4:	1d11      	addpl	r1, r2, #4
 80083b6:	6019      	strpl	r1, [r3, #0]
 80083b8:	6816      	ldrpl	r6, [r2, #0]
 80083ba:	2700      	movs	r7, #0
 80083bc:	69a0      	ldr	r0, [r4, #24]
 80083be:	b188      	cbz	r0, 80083e4 <_scanf_chars+0x58>
 80083c0:	2801      	cmp	r0, #1
 80083c2:	d107      	bne.n	80083d4 <_scanf_chars+0x48>
 80083c4:	682a      	ldr	r2, [r5, #0]
 80083c6:	7811      	ldrb	r1, [r2, #0]
 80083c8:	6962      	ldr	r2, [r4, #20]
 80083ca:	5c52      	ldrb	r2, [r2, r1]
 80083cc:	b952      	cbnz	r2, 80083e4 <_scanf_chars+0x58>
 80083ce:	2f00      	cmp	r7, #0
 80083d0:	d031      	beq.n	8008436 <_scanf_chars+0xaa>
 80083d2:	e022      	b.n	800841a <_scanf_chars+0x8e>
 80083d4:	2802      	cmp	r0, #2
 80083d6:	d120      	bne.n	800841a <_scanf_chars+0x8e>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80083e0:	071b      	lsls	r3, r3, #28
 80083e2:	d41a      	bmi.n	800841a <_scanf_chars+0x8e>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	06da      	lsls	r2, r3, #27
 80083e8:	bf5e      	ittt	pl
 80083ea:	682b      	ldrpl	r3, [r5, #0]
 80083ec:	781b      	ldrbpl	r3, [r3, #0]
 80083ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 80083f2:	682a      	ldr	r2, [r5, #0]
 80083f4:	686b      	ldr	r3, [r5, #4]
 80083f6:	3201      	adds	r2, #1
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	68a2      	ldr	r2, [r4, #8]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	3a01      	subs	r2, #1
 8008400:	606b      	str	r3, [r5, #4]
 8008402:	3701      	adds	r7, #1
 8008404:	60a2      	str	r2, [r4, #8]
 8008406:	b142      	cbz	r2, 800841a <_scanf_chars+0x8e>
 8008408:	2b00      	cmp	r3, #0
 800840a:	dcd7      	bgt.n	80083bc <_scanf_chars+0x30>
 800840c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008410:	4629      	mov	r1, r5
 8008412:	4640      	mov	r0, r8
 8008414:	4798      	blx	r3
 8008416:	2800      	cmp	r0, #0
 8008418:	d0d0      	beq.n	80083bc <_scanf_chars+0x30>
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	f013 0310 	ands.w	r3, r3, #16
 8008420:	d105      	bne.n	800842e <_scanf_chars+0xa2>
 8008422:	68e2      	ldr	r2, [r4, #12]
 8008424:	3201      	adds	r2, #1
 8008426:	60e2      	str	r2, [r4, #12]
 8008428:	69a2      	ldr	r2, [r4, #24]
 800842a:	b102      	cbz	r2, 800842e <_scanf_chars+0xa2>
 800842c:	7033      	strb	r3, [r6, #0]
 800842e:	6923      	ldr	r3, [r4, #16]
 8008430:	443b      	add	r3, r7
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	2000      	movs	r0, #0
 8008436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843a:	bf00      	nop
 800843c:	08008a7d 	.word	0x08008a7d

08008440 <_scanf_i>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4698      	mov	r8, r3
 8008446:	4b76      	ldr	r3, [pc, #472]	; (8008620 <_scanf_i+0x1e0>)
 8008448:	460c      	mov	r4, r1
 800844a:	4682      	mov	sl, r0
 800844c:	4616      	mov	r6, r2
 800844e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008452:	b087      	sub	sp, #28
 8008454:	ab03      	add	r3, sp, #12
 8008456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800845a:	4b72      	ldr	r3, [pc, #456]	; (8008624 <_scanf_i+0x1e4>)
 800845c:	69a1      	ldr	r1, [r4, #24]
 800845e:	4a72      	ldr	r2, [pc, #456]	; (8008628 <_scanf_i+0x1e8>)
 8008460:	2903      	cmp	r1, #3
 8008462:	bf18      	it	ne
 8008464:	461a      	movne	r2, r3
 8008466:	68a3      	ldr	r3, [r4, #8]
 8008468:	9201      	str	r2, [sp, #4]
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008470:	bf88      	it	hi
 8008472:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008476:	4627      	mov	r7, r4
 8008478:	bf82      	ittt	hi
 800847a:	eb03 0905 	addhi.w	r9, r3, r5
 800847e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008482:	60a3      	strhi	r3, [r4, #8]
 8008484:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008488:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800848c:	bf98      	it	ls
 800848e:	f04f 0900 	movls.w	r9, #0
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	463d      	mov	r5, r7
 8008496:	f04f 0b00 	mov.w	fp, #0
 800849a:	6831      	ldr	r1, [r6, #0]
 800849c:	ab03      	add	r3, sp, #12
 800849e:	7809      	ldrb	r1, [r1, #0]
 80084a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f7f7 feab 	bl	8000200 <memchr>
 80084aa:	b328      	cbz	r0, 80084f8 <_scanf_i+0xb8>
 80084ac:	f1bb 0f01 	cmp.w	fp, #1
 80084b0:	d159      	bne.n	8008566 <_scanf_i+0x126>
 80084b2:	6862      	ldr	r2, [r4, #4]
 80084b4:	b92a      	cbnz	r2, 80084c2 <_scanf_i+0x82>
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	2308      	movs	r3, #8
 80084ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084be:	6063      	str	r3, [r4, #4]
 80084c0:	6022      	str	r2, [r4, #0]
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80084c8:	6022      	str	r2, [r4, #0]
 80084ca:	68a2      	ldr	r2, [r4, #8]
 80084cc:	1e51      	subs	r1, r2, #1
 80084ce:	60a1      	str	r1, [r4, #8]
 80084d0:	b192      	cbz	r2, 80084f8 <_scanf_i+0xb8>
 80084d2:	6832      	ldr	r2, [r6, #0]
 80084d4:	1c51      	adds	r1, r2, #1
 80084d6:	6031      	str	r1, [r6, #0]
 80084d8:	7812      	ldrb	r2, [r2, #0]
 80084da:	f805 2b01 	strb.w	r2, [r5], #1
 80084de:	6872      	ldr	r2, [r6, #4]
 80084e0:	3a01      	subs	r2, #1
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	6072      	str	r2, [r6, #4]
 80084e6:	dc07      	bgt.n	80084f8 <_scanf_i+0xb8>
 80084e8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80084ec:	4631      	mov	r1, r6
 80084ee:	4650      	mov	r0, sl
 80084f0:	4790      	blx	r2
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f040 8085 	bne.w	8008602 <_scanf_i+0x1c2>
 80084f8:	f10b 0b01 	add.w	fp, fp, #1
 80084fc:	f1bb 0f03 	cmp.w	fp, #3
 8008500:	d1cb      	bne.n	800849a <_scanf_i+0x5a>
 8008502:	6863      	ldr	r3, [r4, #4]
 8008504:	b90b      	cbnz	r3, 800850a <_scanf_i+0xca>
 8008506:	230a      	movs	r3, #10
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6863      	ldr	r3, [r4, #4]
 800850c:	4947      	ldr	r1, [pc, #284]	; (800862c <_scanf_i+0x1ec>)
 800850e:	6960      	ldr	r0, [r4, #20]
 8008510:	1ac9      	subs	r1, r1, r3
 8008512:	f000 f8af 	bl	8008674 <__sccl>
 8008516:	f04f 0b00 	mov.w	fp, #0
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	6822      	ldr	r2, [r4, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d03d      	beq.n	800859e <_scanf_i+0x15e>
 8008522:	6831      	ldr	r1, [r6, #0]
 8008524:	6960      	ldr	r0, [r4, #20]
 8008526:	f891 c000 	ldrb.w	ip, [r1]
 800852a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800852e:	2800      	cmp	r0, #0
 8008530:	d035      	beq.n	800859e <_scanf_i+0x15e>
 8008532:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008536:	d124      	bne.n	8008582 <_scanf_i+0x142>
 8008538:	0510      	lsls	r0, r2, #20
 800853a:	d522      	bpl.n	8008582 <_scanf_i+0x142>
 800853c:	f10b 0b01 	add.w	fp, fp, #1
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	d003      	beq.n	800854e <_scanf_i+0x10e>
 8008546:	3301      	adds	r3, #1
 8008548:	f109 39ff 	add.w	r9, r9, #4294967295
 800854c:	60a3      	str	r3, [r4, #8]
 800854e:	6873      	ldr	r3, [r6, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	6073      	str	r3, [r6, #4]
 8008556:	dd1b      	ble.n	8008590 <_scanf_i+0x150>
 8008558:	6833      	ldr	r3, [r6, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	6033      	str	r3, [r6, #0]
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	3b01      	subs	r3, #1
 8008562:	60a3      	str	r3, [r4, #8]
 8008564:	e7d9      	b.n	800851a <_scanf_i+0xda>
 8008566:	f1bb 0f02 	cmp.w	fp, #2
 800856a:	d1ae      	bne.n	80084ca <_scanf_i+0x8a>
 800856c:	6822      	ldr	r2, [r4, #0]
 800856e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008572:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008576:	d1bf      	bne.n	80084f8 <_scanf_i+0xb8>
 8008578:	2310      	movs	r3, #16
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008580:	e7a2      	b.n	80084c8 <_scanf_i+0x88>
 8008582:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008586:	6022      	str	r2, [r4, #0]
 8008588:	780b      	ldrb	r3, [r1, #0]
 800858a:	f805 3b01 	strb.w	r3, [r5], #1
 800858e:	e7de      	b.n	800854e <_scanf_i+0x10e>
 8008590:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008594:	4631      	mov	r1, r6
 8008596:	4650      	mov	r0, sl
 8008598:	4798      	blx	r3
 800859a:	2800      	cmp	r0, #0
 800859c:	d0df      	beq.n	800855e <_scanf_i+0x11e>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	05db      	lsls	r3, r3, #23
 80085a2:	d50d      	bpl.n	80085c0 <_scanf_i+0x180>
 80085a4:	42bd      	cmp	r5, r7
 80085a6:	d909      	bls.n	80085bc <_scanf_i+0x17c>
 80085a8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b0:	4632      	mov	r2, r6
 80085b2:	4650      	mov	r0, sl
 80085b4:	4798      	blx	r3
 80085b6:	f105 39ff 	add.w	r9, r5, #4294967295
 80085ba:	464d      	mov	r5, r9
 80085bc:	42bd      	cmp	r5, r7
 80085be:	d02d      	beq.n	800861c <_scanf_i+0x1dc>
 80085c0:	6822      	ldr	r2, [r4, #0]
 80085c2:	f012 0210 	ands.w	r2, r2, #16
 80085c6:	d113      	bne.n	80085f0 <_scanf_i+0x1b0>
 80085c8:	702a      	strb	r2, [r5, #0]
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	9e01      	ldr	r6, [sp, #4]
 80085ce:	4639      	mov	r1, r7
 80085d0:	4650      	mov	r0, sl
 80085d2:	47b0      	blx	r6
 80085d4:	6821      	ldr	r1, [r4, #0]
 80085d6:	f8d8 3000 	ldr.w	r3, [r8]
 80085da:	f011 0f20 	tst.w	r1, #32
 80085de:	d013      	beq.n	8008608 <_scanf_i+0x1c8>
 80085e0:	1d1a      	adds	r2, r3, #4
 80085e2:	f8c8 2000 	str.w	r2, [r8]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6018      	str	r0, [r3, #0]
 80085ea:	68e3      	ldr	r3, [r4, #12]
 80085ec:	3301      	adds	r3, #1
 80085ee:	60e3      	str	r3, [r4, #12]
 80085f0:	1bed      	subs	r5, r5, r7
 80085f2:	44ab      	add	fp, r5
 80085f4:	6925      	ldr	r5, [r4, #16]
 80085f6:	445d      	add	r5, fp
 80085f8:	6125      	str	r5, [r4, #16]
 80085fa:	2000      	movs	r0, #0
 80085fc:	b007      	add	sp, #28
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	f04f 0b00 	mov.w	fp, #0
 8008606:	e7ca      	b.n	800859e <_scanf_i+0x15e>
 8008608:	1d1a      	adds	r2, r3, #4
 800860a:	f8c8 2000 	str.w	r2, [r8]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f011 0f01 	tst.w	r1, #1
 8008614:	bf14      	ite	ne
 8008616:	8018      	strhne	r0, [r3, #0]
 8008618:	6018      	streq	r0, [r3, #0]
 800861a:	e7e6      	b.n	80085ea <_scanf_i+0x1aa>
 800861c:	2001      	movs	r0, #1
 800861e:	e7ed      	b.n	80085fc <_scanf_i+0x1bc>
 8008620:	080089a0 	.word	0x080089a0
 8008624:	080087c9 	.word	0x080087c9
 8008628:	080077e9 	.word	0x080077e9
 800862c:	08008bfd 	.word	0x08008bfd

08008630 <_read_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	; (8008650 <_read_r+0x20>)
 8008634:	4604      	mov	r4, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f8 fb5b 	bl	8000cfa <_read>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_read_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_read_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20001afc 	.word	0x20001afc

08008654 <_sbrk_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d06      	ldr	r5, [pc, #24]	; (8008670 <_sbrk_r+0x1c>)
 8008658:	2300      	movs	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f8 fb9c 	bl	8000d9c <_sbrk>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_sbrk_r+0x1a>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_sbrk_r+0x1a>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	20001afc 	.word	0x20001afc

08008674 <__sccl>:
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	780b      	ldrb	r3, [r1, #0]
 8008678:	4604      	mov	r4, r0
 800867a:	2b5e      	cmp	r3, #94	; 0x5e
 800867c:	bf0b      	itete	eq
 800867e:	784b      	ldrbeq	r3, [r1, #1]
 8008680:	1c48      	addne	r0, r1, #1
 8008682:	1c88      	addeq	r0, r1, #2
 8008684:	2200      	movne	r2, #0
 8008686:	bf08      	it	eq
 8008688:	2201      	moveq	r2, #1
 800868a:	1e61      	subs	r1, r4, #1
 800868c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008690:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008694:	42a9      	cmp	r1, r5
 8008696:	d1fb      	bne.n	8008690 <__sccl+0x1c>
 8008698:	b90b      	cbnz	r3, 800869e <__sccl+0x2a>
 800869a:	3801      	subs	r0, #1
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	f082 0201 	eor.w	r2, r2, #1
 80086a2:	54e2      	strb	r2, [r4, r3]
 80086a4:	4605      	mov	r5, r0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80086ac:	292d      	cmp	r1, #45	; 0x2d
 80086ae:	d006      	beq.n	80086be <__sccl+0x4a>
 80086b0:	295d      	cmp	r1, #93	; 0x5d
 80086b2:	d0f3      	beq.n	800869c <__sccl+0x28>
 80086b4:	b909      	cbnz	r1, 80086ba <__sccl+0x46>
 80086b6:	4628      	mov	r0, r5
 80086b8:	e7f0      	b.n	800869c <__sccl+0x28>
 80086ba:	460b      	mov	r3, r1
 80086bc:	e7f1      	b.n	80086a2 <__sccl+0x2e>
 80086be:	786e      	ldrb	r6, [r5, #1]
 80086c0:	2e5d      	cmp	r6, #93	; 0x5d
 80086c2:	d0fa      	beq.n	80086ba <__sccl+0x46>
 80086c4:	42b3      	cmp	r3, r6
 80086c6:	dcf8      	bgt.n	80086ba <__sccl+0x46>
 80086c8:	3502      	adds	r5, #2
 80086ca:	4619      	mov	r1, r3
 80086cc:	3101      	adds	r1, #1
 80086ce:	428e      	cmp	r6, r1
 80086d0:	5462      	strb	r2, [r4, r1]
 80086d2:	dcfb      	bgt.n	80086cc <__sccl+0x58>
 80086d4:	1af1      	subs	r1, r6, r3
 80086d6:	3901      	subs	r1, #1
 80086d8:	1c58      	adds	r0, r3, #1
 80086da:	42b3      	cmp	r3, r6
 80086dc:	bfa8      	it	ge
 80086de:	2100      	movge	r1, #0
 80086e0:	1843      	adds	r3, r0, r1
 80086e2:	e7e0      	b.n	80086a6 <__sccl+0x32>

080086e4 <_strtoul_l.constprop.0>:
 80086e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4f36      	ldr	r7, [pc, #216]	; (80087c4 <_strtoul_l.constprop.0+0xe0>)
 80086ea:	4686      	mov	lr, r0
 80086ec:	460d      	mov	r5, r1
 80086ee:	4628      	mov	r0, r5
 80086f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086f4:	5de6      	ldrb	r6, [r4, r7]
 80086f6:	f016 0608 	ands.w	r6, r6, #8
 80086fa:	d1f8      	bne.n	80086ee <_strtoul_l.constprop.0+0xa>
 80086fc:	2c2d      	cmp	r4, #45	; 0x2d
 80086fe:	d12f      	bne.n	8008760 <_strtoul_l.constprop.0+0x7c>
 8008700:	782c      	ldrb	r4, [r5, #0]
 8008702:	2601      	movs	r6, #1
 8008704:	1c85      	adds	r5, r0, #2
 8008706:	2b00      	cmp	r3, #0
 8008708:	d057      	beq.n	80087ba <_strtoul_l.constprop.0+0xd6>
 800870a:	2b10      	cmp	r3, #16
 800870c:	d109      	bne.n	8008722 <_strtoul_l.constprop.0+0x3e>
 800870e:	2c30      	cmp	r4, #48	; 0x30
 8008710:	d107      	bne.n	8008722 <_strtoul_l.constprop.0+0x3e>
 8008712:	7828      	ldrb	r0, [r5, #0]
 8008714:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008718:	2858      	cmp	r0, #88	; 0x58
 800871a:	d149      	bne.n	80087b0 <_strtoul_l.constprop.0+0xcc>
 800871c:	786c      	ldrb	r4, [r5, #1]
 800871e:	2310      	movs	r3, #16
 8008720:	3502      	adds	r5, #2
 8008722:	f04f 38ff 	mov.w	r8, #4294967295
 8008726:	2700      	movs	r7, #0
 8008728:	fbb8 f8f3 	udiv	r8, r8, r3
 800872c:	fb03 f908 	mul.w	r9, r3, r8
 8008730:	ea6f 0909 	mvn.w	r9, r9
 8008734:	4638      	mov	r0, r7
 8008736:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800873a:	f1bc 0f09 	cmp.w	ip, #9
 800873e:	d814      	bhi.n	800876a <_strtoul_l.constprop.0+0x86>
 8008740:	4664      	mov	r4, ip
 8008742:	42a3      	cmp	r3, r4
 8008744:	dd22      	ble.n	800878c <_strtoul_l.constprop.0+0xa8>
 8008746:	2f00      	cmp	r7, #0
 8008748:	db1d      	blt.n	8008786 <_strtoul_l.constprop.0+0xa2>
 800874a:	4580      	cmp	r8, r0
 800874c:	d31b      	bcc.n	8008786 <_strtoul_l.constprop.0+0xa2>
 800874e:	d101      	bne.n	8008754 <_strtoul_l.constprop.0+0x70>
 8008750:	45a1      	cmp	r9, r4
 8008752:	db18      	blt.n	8008786 <_strtoul_l.constprop.0+0xa2>
 8008754:	fb00 4003 	mla	r0, r0, r3, r4
 8008758:	2701      	movs	r7, #1
 800875a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800875e:	e7ea      	b.n	8008736 <_strtoul_l.constprop.0+0x52>
 8008760:	2c2b      	cmp	r4, #43	; 0x2b
 8008762:	bf04      	itt	eq
 8008764:	782c      	ldrbeq	r4, [r5, #0]
 8008766:	1c85      	addeq	r5, r0, #2
 8008768:	e7cd      	b.n	8008706 <_strtoul_l.constprop.0+0x22>
 800876a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800876e:	f1bc 0f19 	cmp.w	ip, #25
 8008772:	d801      	bhi.n	8008778 <_strtoul_l.constprop.0+0x94>
 8008774:	3c37      	subs	r4, #55	; 0x37
 8008776:	e7e4      	b.n	8008742 <_strtoul_l.constprop.0+0x5e>
 8008778:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800877c:	f1bc 0f19 	cmp.w	ip, #25
 8008780:	d804      	bhi.n	800878c <_strtoul_l.constprop.0+0xa8>
 8008782:	3c57      	subs	r4, #87	; 0x57
 8008784:	e7dd      	b.n	8008742 <_strtoul_l.constprop.0+0x5e>
 8008786:	f04f 37ff 	mov.w	r7, #4294967295
 800878a:	e7e6      	b.n	800875a <_strtoul_l.constprop.0+0x76>
 800878c:	2f00      	cmp	r7, #0
 800878e:	da07      	bge.n	80087a0 <_strtoul_l.constprop.0+0xbc>
 8008790:	2322      	movs	r3, #34	; 0x22
 8008792:	f8ce 3000 	str.w	r3, [lr]
 8008796:	f04f 30ff 	mov.w	r0, #4294967295
 800879a:	b932      	cbnz	r2, 80087aa <_strtoul_l.constprop.0+0xc6>
 800879c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087a0:	b106      	cbz	r6, 80087a4 <_strtoul_l.constprop.0+0xc0>
 80087a2:	4240      	negs	r0, r0
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	d0f9      	beq.n	800879c <_strtoul_l.constprop.0+0xb8>
 80087a8:	b107      	cbz	r7, 80087ac <_strtoul_l.constprop.0+0xc8>
 80087aa:	1e69      	subs	r1, r5, #1
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	e7f5      	b.n	800879c <_strtoul_l.constprop.0+0xb8>
 80087b0:	2430      	movs	r4, #48	; 0x30
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1b5      	bne.n	8008722 <_strtoul_l.constprop.0+0x3e>
 80087b6:	2308      	movs	r3, #8
 80087b8:	e7b3      	b.n	8008722 <_strtoul_l.constprop.0+0x3e>
 80087ba:	2c30      	cmp	r4, #48	; 0x30
 80087bc:	d0a9      	beq.n	8008712 <_strtoul_l.constprop.0+0x2e>
 80087be:	230a      	movs	r3, #10
 80087c0:	e7af      	b.n	8008722 <_strtoul_l.constprop.0+0x3e>
 80087c2:	bf00      	nop
 80087c4:	08008a7d 	.word	0x08008a7d

080087c8 <_strtoul_r>:
 80087c8:	f7ff bf8c 	b.w	80086e4 <_strtoul_l.constprop.0>

080087cc <__submore>:
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d8:	4299      	cmp	r1, r3
 80087da:	d11d      	bne.n	8008818 <__submore+0x4c>
 80087dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087e0:	f7ff fb8e 	bl	8007f00 <_malloc_r>
 80087e4:	b918      	cbnz	r0, 80087ee <__submore+0x22>
 80087e6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80087f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80087f8:	6360      	str	r0, [r4, #52]	; 0x34
 80087fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80087fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008802:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008806:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800880a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800880e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	2000      	movs	r0, #0
 8008816:	e7e8      	b.n	80087ea <__submore+0x1e>
 8008818:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800881a:	0077      	lsls	r7, r6, #1
 800881c:	463a      	mov	r2, r7
 800881e:	f000 f83d 	bl	800889c <_realloc_r>
 8008822:	4605      	mov	r5, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d0de      	beq.n	80087e6 <__submore+0x1a>
 8008828:	eb00 0806 	add.w	r8, r0, r6
 800882c:	4601      	mov	r1, r0
 800882e:	4632      	mov	r2, r6
 8008830:	4640      	mov	r0, r8
 8008832:	f7fe fe59 	bl	80074e8 <memcpy>
 8008836:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800883a:	f8c4 8000 	str.w	r8, [r4]
 800883e:	e7e9      	b.n	8008814 <__submore+0x48>

08008840 <_fstat_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	4d07      	ldr	r5, [pc, #28]	; (8008860 <_fstat_r+0x20>)
 8008844:	2300      	movs	r3, #0
 8008846:	4604      	mov	r4, r0
 8008848:	4608      	mov	r0, r1
 800884a:	4611      	mov	r1, r2
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	f7f8 fa7d 	bl	8000d4c <_fstat>
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	d102      	bne.n	800885c <_fstat_r+0x1c>
 8008856:	682b      	ldr	r3, [r5, #0]
 8008858:	b103      	cbz	r3, 800885c <_fstat_r+0x1c>
 800885a:	6023      	str	r3, [r4, #0]
 800885c:	bd38      	pop	{r3, r4, r5, pc}
 800885e:	bf00      	nop
 8008860:	20001afc 	.word	0x20001afc

08008864 <_isatty_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_isatty_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7f8 fa7c 	bl	8000d6c <_isatty>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_isatty_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_isatty_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	20001afc 	.word	0x20001afc

08008884 <__malloc_lock>:
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <__malloc_lock+0x8>)
 8008886:	f7ff ba55 	b.w	8007d34 <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	20001af0 	.word	0x20001af0

08008890 <__malloc_unlock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_unlock+0x8>)
 8008892:	f7ff ba50 	b.w	8007d36 <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	20001af0 	.word	0x20001af0

0800889c <_realloc_r>:
 800889c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a0:	4680      	mov	r8, r0
 80088a2:	4614      	mov	r4, r2
 80088a4:	460e      	mov	r6, r1
 80088a6:	b921      	cbnz	r1, 80088b2 <_realloc_r+0x16>
 80088a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ac:	4611      	mov	r1, r2
 80088ae:	f7ff bb27 	b.w	8007f00 <_malloc_r>
 80088b2:	b92a      	cbnz	r2, 80088c0 <_realloc_r+0x24>
 80088b4:	f7ff fab8 	bl	8007e28 <_free_r>
 80088b8:	4625      	mov	r5, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c0:	f000 f81b 	bl	80088fa <_malloc_usable_size_r>
 80088c4:	4284      	cmp	r4, r0
 80088c6:	4607      	mov	r7, r0
 80088c8:	d802      	bhi.n	80088d0 <_realloc_r+0x34>
 80088ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088ce:	d812      	bhi.n	80088f6 <_realloc_r+0x5a>
 80088d0:	4621      	mov	r1, r4
 80088d2:	4640      	mov	r0, r8
 80088d4:	f7ff fb14 	bl	8007f00 <_malloc_r>
 80088d8:	4605      	mov	r5, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0ed      	beq.n	80088ba <_realloc_r+0x1e>
 80088de:	42bc      	cmp	r4, r7
 80088e0:	4622      	mov	r2, r4
 80088e2:	4631      	mov	r1, r6
 80088e4:	bf28      	it	cs
 80088e6:	463a      	movcs	r2, r7
 80088e8:	f7fe fdfe 	bl	80074e8 <memcpy>
 80088ec:	4631      	mov	r1, r6
 80088ee:	4640      	mov	r0, r8
 80088f0:	f7ff fa9a 	bl	8007e28 <_free_r>
 80088f4:	e7e1      	b.n	80088ba <_realloc_r+0x1e>
 80088f6:	4635      	mov	r5, r6
 80088f8:	e7df      	b.n	80088ba <_realloc_r+0x1e>

080088fa <_malloc_usable_size_r>:
 80088fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088fe:	1f18      	subs	r0, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	bfbc      	itt	lt
 8008904:	580b      	ldrlt	r3, [r1, r0]
 8008906:	18c0      	addlt	r0, r0, r3
 8008908:	4770      	bx	lr
	...

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
