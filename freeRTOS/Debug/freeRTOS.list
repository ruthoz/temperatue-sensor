
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007de8  08007de8  00017de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008098  08008098  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080a0  080080a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080a0  080080a0  000180a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080080a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e20  20000078  08008120  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e98  08008120  00021e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aa3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f9  00000000  00000000  00037b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003c518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002920a  00000000  00000000  0003d690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015912  00000000  00000000  0006689a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5946  00000000  00000000  0007c1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171af2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  00171b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dd0 	.word	0x08007dd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007dd0 	.word	0x08007dd0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_write>:
static int cmdprint = 0;


////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <_write+0x28>)
 80005bc:	f002 fad6 	bl	8002b6c <HAL_UART_Transmit>
	return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000100 	.word	0x20000100

080005d0 <Communication_commTask>:
//////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
int Communication_commTask()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80005d6:	1db9      	adds	r1, r7, #6
 80005d8:	230a      	movs	r3, #10
 80005da:	2201      	movs	r2, #1
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <Communication_commTask+0xe8>)
 80005de:	f002 fb59 	bl	8002c94 <HAL_UART_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d020      	beq.n	800062e <Communication_commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <Communication_commTask+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d011      	beq.n	800061e <Communication_commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <Communication_commTask+0xe8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2208      	movs	r2, #8
 8000600:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000602:	e00c      	b.n	800061e <Communication_commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <Communication_commTask+0xec>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	492c      	ldr	r1, [pc, #176]	; (80006bc <Communication_commTask+0xec>)
 800060c:	600a      	str	r2, [r1, #0]
 800060e:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <Communication_commTask+0xf0>)
 8000610:	1899      	adds	r1, r3, r2
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	2201      	movs	r2, #1
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <Communication_commTask+0xe8>)
 800061a:	f002 faa7 	bl	8002b6c <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <Communication_commTask+0xec>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <Communication_commTask+0xf4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbec      	blt.n	8000604 <Communication_commTask+0x34>
		}

		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e03f      	b.n	80006ae <Communication_commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d023      	beq.n	800067c <Communication_commTask+0xac>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d020      	beq.n	800067c <Communication_commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <Communication_commTask+0xf4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b63      	cmp	r3, #99	; 0x63
 8000640:	dd05      	ble.n	800064e <Communication_commTask+0x7e>
		{
			cmdcount = 0;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <Communication_commTask+0xf4>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Communication_commTask+0xec>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <Communication_commTask+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	491b      	ldr	r1, [pc, #108]	; (80006c4 <Communication_commTask+0xf4>)
 8000656:	600a      	str	r2, [r1, #0]
 8000658:	79b9      	ldrb	r1, [r7, #6]
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <Communication_commTask+0xf0>)
 800065c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e025      	b.n	80006ae <Communication_commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <Communication_commTask+0xec>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	4914      	ldr	r1, [pc, #80]	; (80006bc <Communication_commTask+0xec>)
 800066a:	600a      	str	r2, [r1, #0]
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <Communication_commTask+0xf0>)
 800066e:	1899      	adds	r1, r3, r2
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	2201      	movs	r2, #1
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <Communication_commTask+0xe8>)
 8000678:	f002 fa78 	bl	8002b6c <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <Communication_commTask+0xec>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <Communication_commTask+0xf4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbec      	blt.n	8000662 <Communication_commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	2202      	movs	r2, #2
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <Communication_commTask+0xf8>)
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <Communication_commTask+0xe8>)
 8000692:	f002 fa6b 	bl	8002b6c <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Communication_commTask+0xf4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <Communication_commTask+0xf0>)
 800069c:	2100      	movs	r1, #0
 800069e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <Communication_commTask+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <Communication_commTask+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
	return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000100 	.word	0x20000100
 80006bc:	200000fc 	.word	0x200000fc
 80006c0:	20000094 	.word	0x20000094
 80006c4:	200000f8 	.word	0x200000f8
 80006c8:	08007de8 	.word	0x08007de8

080006cc <Communication_handleCommand>:


void Communication_handleCommand()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s", cmd, param );
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	f107 0218 	add.w	r2, r7, #24
 80006d8:	490e      	ldr	r1, [pc, #56]	; (8000714 <Communication_handleCommand+0x48>)
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <Communication_handleCommand+0x4c>)
 80006dc:	f006 f9fc 	bl	8006ad8 <siscanf>
 80006e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   if (params == 0){
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d010      	beq.n	800070a <Communication_handleCommand+0x3e>
	   return;
   }

   if (strcmp(cmd, "blink") == 0){
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	490b      	ldr	r1, [pc, #44]	; (800071c <Communication_handleCommand+0x50>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd6e 	bl	80001d0 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d103      	bne.n	8000702 <Communication_handleCommand+0x36>
	   printf("blink\r\n");
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <Communication_handleCommand+0x54>)
 80006fc:	f006 f9e4 	bl	8006ac8 <puts>
 8000700:	e004      	b.n	800070c <Communication_handleCommand+0x40>
   }
   else{
   	  printf("Invalid command\r\n");
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <Communication_handleCommand+0x58>)
 8000704:	f006 f9e0 	bl	8006ac8 <puts>
 8000708:	e000      	b.n	800070c <Communication_handleCommand+0x40>
	   return;
 800070a:	bf00      	nop
   }
}
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08007dec 	.word	0x08007dec
 8000718:	20000094 	.word	0x20000094
 800071c:	08007df4 	.word	0x08007df4
 8000720:	08007dfc 	.word	0x08007dfc
 8000724:	08007e04 	.word	0x08007e04

08000728 <Entry_uartTask>:

void Entry_uartTask(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_uartTask */
  /* Infinite loop */
  for(;;)
  {
	  if (Communication_commTask()){
 8000730:	f7ff ff4e 	bl	80005d0 <Communication_commTask>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0fa      	beq.n	8000730 <Entry_uartTask+0x8>
		  Communication_handleCommand();
 800073a:	f7ff ffc7 	bl	80006cc <Communication_handleCommand>
	  if (Communication_commTask()){
 800073e:	e7f7      	b.n	8000730 <Entry_uartTask+0x8>

08000740 <Entry_blinkTask>:
#include "Led.h"
#include "cmsis_os.h"
static int delay = 500;

void Entry_blinkTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_blinkTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000748:	2120      	movs	r1, #32
 800074a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074e:	f000 fe85 	bl	800145c <HAL_GPIO_TogglePin>
	  osDelay(delay);
 8000752:	4b03      	ldr	r3, [pc, #12]	; (8000760 <Entry_blinkTask+0x20>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fc94 	bl	8004084 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800075c:	e7f4      	b.n	8000748 <Entry_blinkTask+0x8>
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 faaa 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f834 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f8b4 	bl	80008dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000774:	f000 f882 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000778:	f003 fba8 	bl	8003ecc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <main+0x50>)
 800077e:	2100      	movs	r1, #0
 8000780:	480d      	ldr	r0, [pc, #52]	; (80007b8 <main+0x54>)
 8000782:	f003 fbed 	bl	8003f60 <osThreadNew>
 8000786:	4603      	mov	r3, r0
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <main+0x58>)
 800078a:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(Entry_blinkTask, NULL, &blinkTask_attributes);
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <main+0x5c>)
 800078e:	2100      	movs	r1, #0
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <main+0x60>)
 8000792:	f003 fbe5 	bl	8003f60 <osThreadNew>
 8000796:	4603      	mov	r3, r0
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <main+0x64>)
 800079a:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  uartTaskHandle = osThreadNew(Entry_uartTask, NULL, &uartTask_attributes);
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <main+0x68>)
 800079e:	2100      	movs	r1, #0
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x6c>)
 80007a2:	f003 fbdd 	bl	8003f60 <osThreadNew>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <main+0x70>)
 80007aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007ac:	f003 fbb2 	bl	8003f14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x4c>
 80007b2:	bf00      	nop
 80007b4:	08007e60 	.word	0x08007e60
 80007b8:	080009a9 	.word	0x080009a9
 80007bc:	20000184 	.word	0x20000184
 80007c0:	08007e84 	.word	0x08007e84
 80007c4:	08000741 	.word	0x08000741
 80007c8:	20000188 	.word	0x20000188
 80007cc:	08007ea8 	.word	0x08007ea8
 80007d0:	08000729 	.word	0x08000729
 80007d4:	2000018c 	.word	0x2000018c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	; 0x58
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2244      	movs	r2, #68	; 0x44
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 f8f8 	bl	80069dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fe:	f000 fe55 	bl	80014ac <HAL_PWREx_ControlVoltageScaling>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000808:	f000 f8d6 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f000 fe8c 	bl	8001558 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000846:	f000 f8b7 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084e:	2303      	movs	r3, #3
 8000850:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	2104      	movs	r1, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fa54 	bl	8001d10 <HAL_RCC_ClockConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086e:	f000 f8a3 	bl	80009b8 <Error_Handler>
  }
}
 8000872:	bf00      	nop
 8000874:	3758      	adds	r7, #88	; 0x58
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000882:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <MX_USART2_UART_Init+0x5c>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_USART2_UART_Init+0x58>)
 80008c0:	f002 f906 	bl	8002ad0 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f875 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000100 	.word	0x20000100
 80008d8:	40004400 	.word	0x40004400

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <MX_GPIO_Init+0xc4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a2a      	ldr	r2, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xc4>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xc4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a24      	ldr	r2, [pc, #144]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_GPIO_Init+0xc4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_GPIO_Init+0xc4>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f000 fd67 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000964:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	480b      	ldr	r0, [pc, #44]	; (80009a4 <MX_GPIO_Init+0xc8>)
 8000976:	f000 fbaf 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 fba0 	bl	80010d8 <HAL_GPIO_Init>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000800 	.word	0x48000800

080009a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f003 fb67 	bl	8004084 <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartDefaultTask+0x8>

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_MspInit+0x4c>)
 80009cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6613      	str	r3, [r2, #96]	; 0x60
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x4c>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 fab4 	bl	8000f6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b0ac      	sub	sp, #176	; 0xb0
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2288      	movs	r2, #136	; 0x88
 8000a32:	2100      	movs	r1, #0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f005 ffd1 	bl	80069dc <memset>
  if(huart->Instance==USART2)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <HAL_UART_MspInit+0xc0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d143      	bne.n	8000acc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fb81 	bl	8002158 <HAL_RCCEx_PeriphCLKConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a5c:	f7ff ffac 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0xc4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a90:	230c      	movs	r3, #12
 8000a92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab8:	f000 fb0e 	bl	80010d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2105      	movs	r1, #5
 8000ac0:	2026      	movs	r0, #38	; 0x26
 8000ac2:	f000 fa54 	bl	8000f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac6:	2026      	movs	r0, #38	; 0x26
 8000ac8:	f000 fa6d 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	37b0      	adds	r7, #176	; 0xb0
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40004400 	.word	0x40004400
 8000ad8:	40021000 	.word	0x40021000

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f934 	bl	8000d78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b10:	f004 fec6 	bl	80058a0 <xTaskGetSchedulerState>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d001      	beq.n	8000b1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b1a:	f005 fcad 	bl	8006478 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <USART2_IRQHandler+0x10>)
 8000b2a:	f002 f985 	bl	8002e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000100 	.word	0x20000100

08000b38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b4a:	f3af 8000 	nop.w
 8000b4e:	4601      	mov	r1, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <_read+0x12>
	}

return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f005 feae 	bl	800696c <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20018000 	.word	0x20018000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000190 	.word	0x20000190
 8000c44:	20001e98 	.word	0x20001e98

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f005 fe6d 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fd61 	bl	8000764 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cb0:	080080a8 	.word	0x080080a8
  ldr r2, =_sbss
 8000cb4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cb8:	20001e98 	.word	0x20001e98

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_Init+0x3c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_Init+0x3c>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f000 f93e 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cdc:	200f      	movs	r0, #15
 8000cde:	f000 f80f 	bl	8000d00 <HAL_InitTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	e001      	b.n	8000cf2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cee:	f7ff fe69 	bl	80009c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_InitTick+0x70>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f949 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f913 	bl	8000f6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0x74>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	20000004 	.word	0x20000004
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000194 	.word	0x20000194

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000194 	.word	0x20000194

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff29 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff3e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff31 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffa2 	bl	8000f14 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e022      	b.n	800104a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f003 021c 	and.w	r2, r3, #28
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d005      	beq.n	800107a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2204      	movs	r2, #4
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e029      	b.n	80010ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 020e 	bic.w	r2, r2, #14
 8001088:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0201 	bic.w	r2, r2, #1
 8001098:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f003 021c 	and.w	r2, r3, #28
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
    }
  }
  return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b087      	sub	sp, #28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e17f      	b.n	80013e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8171 	beq.w	80013e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	f003 0201 	and.w	r2, r3, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b03      	cmp	r3, #3
 8001184:	d118      	bne.n	80011b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800118c:	2201      	movs	r2, #1
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	f003 0201 	and.w	r2, r3, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d017      	beq.n	80011f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	2203      	movs	r2, #3
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d123      	bne.n	8001248 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0203 	and.w	r2, r3, #3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 80ac 	beq.w	80013e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	4b5f      	ldr	r3, [pc, #380]	; (8001408 <HAL_GPIO_Init+0x330>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a5e      	ldr	r2, [pc, #376]	; (8001408 <HAL_GPIO_Init+0x330>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <HAL_GPIO_Init+0x330>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012a2:	4a5a      	ldr	r2, [pc, #360]	; (800140c <HAL_GPIO_Init+0x334>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012cc:	d025      	beq.n	800131a <HAL_GPIO_Init+0x242>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	; (8001410 <HAL_GPIO_Init+0x338>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01f      	beq.n	8001316 <HAL_GPIO_Init+0x23e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_GPIO_Init+0x33c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x23a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	; (8001418 <HAL_GPIO_Init+0x340>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x236>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	; (800141c <HAL_GPIO_Init+0x344>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x232>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <HAL_GPIO_Init+0x348>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <HAL_GPIO_Init+0x34c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x22a>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001302:	2307      	movs	r3, #7
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x244>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x244>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x244>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x244>
 800131a:	2300      	movs	r3, #0
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132c:	4937      	ldr	r1, [pc, #220]	; (800140c <HAL_GPIO_Init+0x334>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x350>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x350>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x350>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x350>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x350>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x350>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x350>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x350>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f47f ae78 	bne.w	80010e8 <HAL_GPIO_Init+0x10>
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	48000c00 	.word	0x48000c00
 800141c:	48001000 	.word	0x48001000
 8001420:	48001400 	.word	0x48001400
 8001424:	48001800 	.word	0x48001800
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e002      	b.n	8001450 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4013      	ands	r3, r2
 8001474:	041a      	lsls	r2, r3, #16
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43d9      	mvns	r1, r3
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ba:	d130      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c8:	d038      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014d2:	4a1e      	ldr	r2, [pc, #120]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2232      	movs	r2, #50	; 0x32
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0c9b      	lsrs	r3, r3, #18
 80014ec:	3301      	adds	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f0:	e002      	b.n	80014f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001504:	d102      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f2      	bne.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d110      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e00f      	b.n	800153e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d007      	beq.n	800153c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000
 8001550:	20000004 	.word	0x20000004
 8001554:	431bde83 	.word	0x431bde83

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e3ca      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800156a:	4b97      	ldr	r3, [pc, #604]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001574:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80e4 	beq.w	8001754 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x4a>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b0c      	cmp	r3, #12
 8001596:	f040 808b 	bne.w	80016b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 8087 	bne.w	80016b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015a2:	4b89      	ldr	r3, [pc, #548]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x62>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e3a2      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1a      	ldr	r2, [r3, #32]
 80015be:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_RCC_OscConfig+0x7c>
 80015ca:	4b7f      	ldr	r3, [pc, #508]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015d2:	e005      	b.n	80015e0 <HAL_RCC_OscConfig+0x88>
 80015d4:	4b7c      	ldr	r3, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d223      	bcs.n	800162c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fd55 	bl	8002098 <RCC_SetFlashLatencyFromMSIRange>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e383      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a72      	ldr	r2, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b70      	ldr	r3, [pc, #448]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	496d      	ldr	r1, [pc, #436]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001612:	4313      	orrs	r3, r2
 8001614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001616:	4b6c      	ldr	r3, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	4968      	ldr	r1, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
 800162a:	e025      	b.n	8001678 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	4b66      	ldr	r3, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a65      	ldr	r2, [pc, #404]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4960      	ldr	r1, [pc, #384]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	495b      	ldr	r1, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d109      	bne.n	8001678 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fd15 	bl	8002098 <RCC_SetFlashLatencyFromMSIRange>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e343      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001678:	f000 fc4a 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b52      	ldr	r3, [pc, #328]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	4950      	ldr	r1, [pc, #320]	; (80017cc <HAL_RCC_OscConfig+0x274>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_RCC_OscConfig+0x278>)
 8001696:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001698:	4b4e      	ldr	r3, [pc, #312]	; (80017d4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb2f 	bl	8000d00 <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d052      	beq.n	8001752 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	e327      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d032      	beq.n	800171e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016b8:	4b43      	ldr	r3, [pc, #268]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a42      	ldr	r2, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb6c 	bl	8000da0 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016cc:	f7ff fb68 	bl	8000da0 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e310      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a36      	ldr	r2, [pc, #216]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4931      	ldr	r1, [pc, #196]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	492c      	ldr	r1, [pc, #176]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e01a      	b.n	8001754 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172a:	f7ff fb39 	bl	8000da0 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001732:	f7ff fb35 	bl	8000da0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e2dd      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x1da>
 8001750:	e000      	b.n	8001754 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001752:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d074      	beq.n	800184a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b08      	cmp	r3, #8
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x21a>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	d10e      	bne.n	800178a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d10b      	bne.n	800178a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d064      	beq.n	8001848 <HAL_RCC_OscConfig+0x2f0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d160      	bne.n	8001848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e2ba      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x24a>
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 800179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	e026      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017aa:	d115      	bne.n	80017d8 <HAL_RCC_OscConfig+0x280>
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a02      	ldr	r2, [pc, #8]	; (80017c8 <HAL_RCC_OscConfig+0x270>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x298>
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08007ecc 	.word	0x08007ecc
 80017d0:	20000004 	.word	0x20000004
 80017d4:	20000008 	.word	0x20000008
 80017d8:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a9f      	ldr	r2, [pc, #636]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a9c      	ldr	r2, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80017ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fad2 	bl	8000da0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff face 	bl	8000da0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e276      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x2a8>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fabe 	bl	8000da0 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff faba 	bl	8000da0 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e262      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x2d0>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d060      	beq.n	8001918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x310>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d119      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x328>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e23f      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4973      	ldr	r1, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	e040      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d023      	beq.n	80018e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fa79 	bl	8000da0 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fa75 	bl	8000da0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e21d      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c4:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	495f      	ldr	r1, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a5c      	ldr	r2, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa55 	bl	8000da0 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa51 	bl	8000da0 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1f9      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	d03c      	beq.n	800199e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d01c      	beq.n	8001966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001932:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fa30 	bl	8000da0 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fa2c 	bl	8000da0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e1d4      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ef      	beq.n	8001944 <HAL_RCC_OscConfig+0x3ec>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196c:	4a3b      	ldr	r2, [pc, #236]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 800196e:	f023 0301 	bic.w	r3, r3, #1
 8001972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fa13 	bl	8000da0 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fa0f 	bl	8000da0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e1b7      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ef      	bne.n	800197e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80a6 	beq.w	8001af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6593      	str	r3, [r2, #88]	; 0x58
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d118      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 80019ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f0:	f7ff f9d6 	bl	8000da0 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f8:	f7ff f9d2 	bl	8000da0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e17a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_RCC_OscConfig+0x508>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d8>
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2e:	e029      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d115      	bne.n	8001a64 <HAL_RCC_OscConfig+0x50c>
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	4a03      	ldr	r2, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x504>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x52c>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
 8001a64:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	4a9b      	ldr	r2, [pc, #620]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	4a97      	ldr	r2, [pc, #604]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d016      	beq.n	8001aba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f988 	bl	8000da0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff f984 	bl	8000da0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e12a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aaa:	4b8b      	ldr	r3, [pc, #556]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ed      	beq.n	8001a94 <HAL_RCC_OscConfig+0x53c>
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff f971 	bl	8000da0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f96d 	bl	8000da0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e113      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ed      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d105      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80fe 	beq.w	8001cfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f040 80d0 	bne.w	8001cac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b0c:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d130      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d127      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b4c:	2a07      	cmp	r2, #7
 8001b4e:	bf14      	ite	ne
 8001b50:	2201      	movne	r2, #1
 8001b52:	2200      	moveq	r2, #0
 8001b54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d113      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	3b01      	subs	r3, #1
 8001b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d06e      	beq.n	8001c60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d069      	beq.n	8001c5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0ad      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bb0:	f7ff f8f6 	bl	8000da0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f8f2 	bl	8000da0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e09a      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bca:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001bd8:	68da      	ldr	r2, [r3, #12]
 8001bda:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x784>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001be6:	3a01      	subs	r2, #1
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bf0:	0212      	lsls	r2, r2, #8
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bf8:	0852      	lsrs	r2, r2, #1
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	0552      	lsls	r2, r2, #21
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c04:	0852      	lsrs	r2, r2, #1
 8001c06:	3a01      	subs	r2, #1
 8001c08:	0652      	lsls	r2, r2, #25
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c10:	0912      	lsrs	r2, r2, #4
 8001c12:	0452      	lsls	r2, r2, #17
 8001c14:	430a      	orrs	r2, r1
 8001c16:	4930      	ldr	r1, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c34:	f7ff f8b4 	bl	8000da0 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff f8b0 	bl	8000da0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e058      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c5a:	e050      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e04f      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d148      	bne.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a16      	ldr	r2, [pc, #88]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7ff f88c 	bl	8000da0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f888 	bl	8000da0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e030      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x734>
 8001caa:	e028      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d023      	beq.n	8001cfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_RCC_OscConfig+0x780>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f86f 	bl	8000da0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e00c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7ff f86b 	bl	8000da0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d905      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e013      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ec      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	4905      	ldr	r1, [pc, #20]	; (8001d08 <HAL_RCC_OscConfig+0x7b0>)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_RCC_OscConfig+0x7b4>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
 8001cf8:	e001      	b.n	8001cfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	feeefffc 	.word	0xfeeefffc

08001d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0e7      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b75      	ldr	r3, [pc, #468]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 0207 	bic.w	r2, r3, #7
 8001d3a:	4970      	ldr	r1, [pc, #448]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b6e      	ldr	r3, [pc, #440]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0cf      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d010      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d908      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4960      	ldr	r1, [pc, #384]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d04c      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d121      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0a6      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e09a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc6:	4b4e      	ldr	r3, [pc, #312]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e08e      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e086      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4943      	ldr	r1, [pc, #268]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df8:	f7fe ffd2 	bl	8000da0 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7fe ffce 	bl	8000da0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e06e      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d010      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d208      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	492b      	ldr	r1, [pc, #172]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d210      	bcs.n	8001e86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 0207 	bic.w	r2, r3, #7
 8001e6c:	4923      	ldr	r1, [pc, #140]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e036      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	4918      	ldr	r1, [pc, #96]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eb0:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4910      	ldr	r1, [pc, #64]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ec4:	f000 f824 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCC_ClockConfig+0x1f0>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1f4>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1fc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ff09 	bl	8000d00 <HAL_InitTick>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40022000 	.word	0x40022000
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08007ecc 	.word	0x08007ecc
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1e:	4b3e      	ldr	r3, [pc, #248]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f28:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x34>
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d121      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d11e      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e005      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d102      	bne.n	8001f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	e004      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d134      	bne.n	8002008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d003      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0xac>
 8001fb4:	e005      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fb8:	617b      	str	r3, [r7, #20]
      break;
 8001fba:	e005      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fbe:	617b      	str	r3, [r7, #20]
      break;
 8001fc0:	e002      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	617b      	str	r3, [r7, #20]
      break;
 8001fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	fb03 f202 	mul.w	r2, r3, r2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	0e5b      	lsrs	r3, r3, #25
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002008:	69bb      	ldr	r3, [r7, #24]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	08007ee4 	.word	0x08007ee4
 8002020:	00f42400 	.word	0x00f42400
 8002024:	007a1200 	.word	0x007a1200

08002028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_RCC_GetHCLKFreq+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000004 	.word	0x20000004

08002040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002044:	f7ff fff0 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4904      	ldr	r1, [pc, #16]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	f003 031f 	and.w	r3, r3, #31
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	08007edc 	.word	0x08007edc

0800206c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002070:	f7ff ffda 	bl	8002028 <HAL_RCC_GetHCLKFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	0adb      	lsrs	r3, r3, #11
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	4904      	ldr	r1, [pc, #16]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	08007edc 	.word	0x08007edc

08002098 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020a4:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b0:	f7ff f9ee 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 80020b4:	6178      	str	r0, [r7, #20]
 80020b6:	e014      	b.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff f9de 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 80020d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e8:	d10b      	bne.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d919      	bls.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2ba0      	cmp	r3, #160	; 0xa0
 80020f4:	d902      	bls.n	80020fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f6:	2302      	movs	r3, #2
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	e013      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020fc:	2301      	movs	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e010      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b80      	cmp	r3, #128	; 0x80
 8002106:	d902      	bls.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002108:	2303      	movs	r3, #3
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e00a      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d102      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	e004      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b70      	cmp	r3, #112	; 0x70
 800211e:	d101      	bne.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002120:	2301      	movs	r3, #1
 8002122:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 0207 	bic.w	r2, r3, #7
 800212c:	4909      	ldr	r1, [pc, #36]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	429a      	cmp	r2, r3
 8002140:	d001      	beq.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002160:	2300      	movs	r3, #0
 8002162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002164:	2300      	movs	r3, #0
 8002166:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d041      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002178:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800217c:	d02a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800217e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002182:	d824      	bhi.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002188:	d008      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800218a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800218e:	d81e      	bhi.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002198:	d010      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800219a:	e018      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800219c:	4b86      	ldr	r3, [pc, #536]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a85      	ldr	r2, [pc, #532]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021a8:	e015      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fabb 	bl	800272c <RCCEx_PLLSAI1_Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ba:	e00c      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3320      	adds	r3, #32
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fba6 	bl	8002914 <RCCEx_PLLSAI2_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021cc:	e003      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	74fb      	strb	r3, [r7, #19]
      break;
 80021d2:	e000      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021dc:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	4973      	ldr	r1, [pc, #460]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021f2:	e001      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d041      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800220c:	d02a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800220e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002212:	d824      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002218:	d008      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800221a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800221e:	d81e      	bhi.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d010      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800222a:	e018      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800222c:	4b62      	ldr	r3, [pc, #392]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a61      	ldr	r2, [pc, #388]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002238:	e015      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fa73 	bl	800272c <RCCEx_PLLSAI1_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224a:	e00c      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3320      	adds	r3, #32
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fb5e 	bl	8002914 <RCCEx_PLLSAI2_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800225c:	e003      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	74fb      	strb	r3, [r7, #19]
      break;
 8002262:	e000      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10b      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800227a:	494f      	ldr	r1, [pc, #316]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002282:	e001      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a0 	beq.w	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229a:	4b47      	ldr	r3, [pc, #284]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a3a      	ldr	r2, [pc, #232]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fd62 	bl	8000da0 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022de:	e009      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e0:	f7fe fd5e 	bl	8000da0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d902      	bls.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	74fb      	strb	r3, [r7, #19]
        break;
 80022f2:	e005      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d15c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002310:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01f      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d019      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002324:	4b24      	ldr	r3, [pc, #144]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002330:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7fe fd1d 	bl	8000da0 <HAL_GetTick>
 8002366:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	e00b      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fd19 	bl	8000da0 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d902      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	74fb      	strb	r3, [r7, #19]
            break;
 8002380:	e006      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0ec      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a6:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023ae:	e009      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c4:	7c7b      	ldrb	r3, [r7, #17]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b9e      	ldr	r3, [pc, #632]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a9d      	ldr	r2, [pc, #628]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023e2:	4b98      	ldr	r3, [pc, #608]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 0203 	bic.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f0:	4994      	ldr	r1, [pc, #592]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002404:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 020c 	bic.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	498c      	ldr	r1, [pc, #560]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002426:	4b87      	ldr	r3, [pc, #540]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	4983      	ldr	r1, [pc, #524]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002448:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	497b      	ldr	r1, [pc, #492]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002478:	4972      	ldr	r1, [pc, #456]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800248c:	4b6d      	ldr	r3, [pc, #436]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	496a      	ldr	r1, [pc, #424]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ae:	4b65      	ldr	r3, [pc, #404]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	4961      	ldr	r1, [pc, #388]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024d0:	4b5c      	ldr	r3, [pc, #368]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	4959      	ldr	r1, [pc, #356]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	4950      	ldr	r1, [pc, #320]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002514:	4b4b      	ldr	r3, [pc, #300]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	4948      	ldr	r1, [pc, #288]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002536:	4b43      	ldr	r3, [pc, #268]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	493f      	ldr	r1, [pc, #252]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d028      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002566:	4937      	ldr	r1, [pc, #220]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002576:	d106      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002582:	60d3      	str	r3, [r2, #12]
 8002584:	e011      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800258a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258e:	d10c      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	2101      	movs	r1, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8c8 	bl	800272c <RCCEx_PLLSAI1_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	491f      	ldr	r1, [pc, #124]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d4:	d106      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e0:	60d3      	str	r3, [r2, #12]
 80025e2:	e011      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ec:	d10c      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 f899 	bl	800272c <RCCEx_PLLSAI1_Config>
 80025fa:	4603      	mov	r3, r0
 80025fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02b      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002632:	d109      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4a02      	ldr	r2, [pc, #8]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263e:	60d3      	str	r3, [r2, #12]
 8002640:	e014      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f867 	bl	800272c <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02f      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002686:	4928      	ldr	r1, [pc, #160]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002696:	d10d      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f844 	bl	800272c <RCCEx_PLLSAI1_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d014      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	74bb      	strb	r3, [r7, #18]
 80026b2:	e011      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3320      	adds	r3, #32
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f925 	bl	8002914 <RCCEx_PLLSAI2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026e4:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026f2:	490d      	ldr	r1, [pc, #52]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002716:	4904      	ldr	r1, [pc, #16]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800271e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000

0800272c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800273a:	4b75      	ldr	r3, [pc, #468]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002746:	4b72      	ldr	r3, [pc, #456]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0203 	and.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d10d      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
       ||
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800275e:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
       ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d047      	beq.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e044      	b.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d018      	beq.n	80027b2 <RCCEx_PLLSAI1_Config+0x86>
 8002780:	2b03      	cmp	r3, #3
 8002782:	d825      	bhi.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002784:	2b01      	cmp	r3, #1
 8002786:	d002      	beq.n	800278e <RCCEx_PLLSAI1_Config+0x62>
 8002788:	2b02      	cmp	r3, #2
 800278a:	d009      	beq.n	80027a0 <RCCEx_PLLSAI1_Config+0x74>
 800278c:	e020      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800278e:	4b60      	ldr	r3, [pc, #384]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e01a      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d116      	bne.n	80027da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b0:	e013      	b.n	80027da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027ce:	e006      	b.n	80027de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e004      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027d6:	bf00      	nop
 80027d8:	e002      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027de:	bf00      	nop
    }

    if(status == HAL_OK)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6819      	ldr	r1, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	430b      	orrs	r3, r1
 80027fc:	4944      	ldr	r1, [pc, #272]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d17d      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a40      	ldr	r2, [pc, #256]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002814:	f7fe fac4 	bl	8000da0 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800281a:	e009      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800281c:	f7fe fac0 	bl	8000da0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d902      	bls.n	8002830 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	73fb      	strb	r3, [r7, #15]
        break;
 800282e:	e005      	b.n	800283c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002830:	4b37      	ldr	r3, [pc, #220]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ef      	bne.n	800281c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d160      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d111      	bne.n	800286c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	0211      	lsls	r1, r2, #8
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68d2      	ldr	r2, [r2, #12]
 800285e:	0912      	lsrs	r2, r2, #4
 8002860:	0452      	lsls	r2, r2, #17
 8002862:	430a      	orrs	r2, r1
 8002864:	492a      	ldr	r1, [pc, #168]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	610b      	str	r3, [r1, #16]
 800286a:	e027      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d112      	bne.n	8002898 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800287a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6892      	ldr	r2, [r2, #8]
 8002882:	0211      	lsls	r1, r2, #8
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6912      	ldr	r2, [r2, #16]
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	3a01      	subs	r2, #1
 800288c:	0552      	lsls	r2, r2, #21
 800288e:	430a      	orrs	r2, r1
 8002890:	491f      	ldr	r1, [pc, #124]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
 8002896:	e011      	b.n	80028bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6892      	ldr	r2, [r2, #8]
 80028a8:	0211      	lsls	r1, r2, #8
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6952      	ldr	r2, [r2, #20]
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0652      	lsls	r2, r2, #25
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4916      	ldr	r1, [pc, #88]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a13      	ldr	r2, [pc, #76]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fa6a 	bl	8000da0 <HAL_GetTick>
 80028cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028ce:	e009      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d0:	f7fe fa66 	bl	8000da0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	73fb      	strb	r3, [r7, #15]
          break;
 80028e2:	e005      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4904      	ldr	r1, [pc, #16]	; (8002910 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40021000 	.word	0x40021000

08002914 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002922:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d10d      	bne.n	800295a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
       ||
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002946:	4b61      	ldr	r3, [pc, #388]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
       ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d047      	beq.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e044      	b.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d018      	beq.n	800299a <RCCEx_PLLSAI2_Config+0x86>
 8002968:	2b03      	cmp	r3, #3
 800296a:	d825      	bhi.n	80029b8 <RCCEx_PLLSAI2_Config+0xa4>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d002      	beq.n	8002976 <RCCEx_PLLSAI2_Config+0x62>
 8002970:	2b02      	cmp	r3, #2
 8002972:	d009      	beq.n	8002988 <RCCEx_PLLSAI2_Config+0x74>
 8002974:	e020      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002976:	4b55      	ldr	r3, [pc, #340]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d11d      	bne.n	80029be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002986:	e01a      	b.n	80029be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d116      	bne.n	80029c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002998:	e013      	b.n	80029c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800299a:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029b6:	e006      	b.n	80029c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e004      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029be:	bf00      	nop
 80029c0:	e002      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c2:	bf00      	nop
 80029c4:	e000      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ce:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	430b      	orrs	r3, r1
 80029e4:	4939      	ldr	r1, [pc, #228]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d167      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a35      	ldr	r2, [pc, #212]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fe f9d0 	bl	8000da0 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a02:	e009      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a04:	f7fe f9cc 	bl	8000da0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	73fb      	strb	r3, [r7, #15]
        break;
 8002a16:	e005      	b.n	8002a24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a18:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1ef      	bne.n	8002a04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14a      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d111      	bne.n	8002a54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	0211      	lsls	r1, r2, #8
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	0912      	lsrs	r2, r2, #4
 8002a48:	0452      	lsls	r2, r2, #17
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	491f      	ldr	r1, [pc, #124]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	614b      	str	r3, [r1, #20]
 8002a52:	e011      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	0211      	lsls	r1, r2, #8
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6912      	ldr	r2, [r2, #16]
 8002a6a:	0852      	lsrs	r2, r2, #1
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	0652      	lsls	r2, r2, #25
 8002a70:	430a      	orrs	r2, r1
 8002a72:	4916      	ldr	r1, [pc, #88]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a13      	ldr	r2, [pc, #76]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe f98c 	bl	8000da0 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a8a:	e009      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a8c:	f7fe f988 	bl	8000da0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a9e:	e005      	b.n	8002aac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ef      	beq.n	8002a8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab4:	695a      	ldr	r2, [r3, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e040      	b.n	8002b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fd ff8e 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fc94 	bl	800343c <UART_SetConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 ff40 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 ffc7 	bl	8003af0 <UART_CheckIdleState>
 8002b62:	4603      	mov	r3, r0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	f040 8082 	bne.w	8002c8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_UART_Transmit+0x26>
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07a      	b.n	8002c8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_UART_Transmit+0x38>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e073      	b.n	8002c8c <HAL_UART_Transmit+0x120>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bba:	f7fe f8f1 	bl	8000da0 <HAL_GetTick>
 8002bbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d108      	bne.n	8002bec <HAL_UART_Transmit+0x80>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d104      	bne.n	8002bec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	e003      	b.n	8002bf4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002bfc:	e02d      	b.n	8002c5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 ffba 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e039      	b.n	8002c8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e008      	b.n	8002c48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1cb      	bne.n	8002bfe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 ff86 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e005      	b.n	8002c8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	e000      	b.n	8002c8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
  }
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3720      	adds	r7, #32
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	f040 80bf 	bne.w	8002e2c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_UART_Receive+0x26>
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0b7      	b.n	8002e2e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_UART_Receive+0x38>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0b0      	b.n	8002e2e <HAL_UART_Receive+0x19a>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce8:	f7fe f85a 	bl	8000da0 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	d10e      	bne.n	8002d26 <HAL_UART_Receive+0x92>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d105      	bne.n	8002d1c <HAL_UART_Receive+0x88>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d1a:	e02d      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	22ff      	movs	r2, #255	; 0xff
 8002d20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d24:	e028      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_UART_Receive+0xb6>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d104      	bne.n	8002d40 <HAL_UART_Receive+0xac>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d3e:	e01b      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	227f      	movs	r2, #127	; 0x7f
 8002d44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d48:	e016      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d52:	d10d      	bne.n	8002d70 <HAL_UART_Receive+0xdc>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <HAL_UART_Receive+0xd2>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	227f      	movs	r2, #127	; 0x7f
 8002d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d64:	e008      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	223f      	movs	r2, #63	; 0x3f
 8002d6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d6e:	e003      	b.n	8002d78 <HAL_UART_Receive+0xe4>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d7e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Receive+0x108>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dac:	e033      	b.n	8002e16 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2120      	movs	r1, #32
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fee2 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e032      	b.n	8002e2e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	8a7b      	ldrh	r3, [r7, #18]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	3302      	adds	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	e00d      	b.n	8002e04 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8a7b      	ldrh	r3, [r7, #18]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4013      	ands	r3, r2
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3301      	adds	r3, #1
 8002e02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1c5      	bne.n	8002dae <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0ba      	sub	sp, #232	; 0xe8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e66:	4013      	ands	r3, r2
 8002e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00f      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 82a6 	beq.w	80033e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
      }
      return;
 8002e9e:	e2a0      	b.n	80033e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 8117 	beq.w	80030d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002eb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eba:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_UART_IRQHandler+0x298>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 810a 	beq.w	80030d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d011      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xbc>
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d011      	beq.n	8002f24 <HAL_UART_IRQHandler+0xec>
 8002f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2202      	movs	r2, #2
 8002f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f1a:	f043 0204 	orr.w	r2, r3, #4
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d011      	beq.n	8002f54 <HAL_UART_IRQHandler+0x11c>
 8002f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f86:	f043 0208 	orr.w	r2, r3, #8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18a>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00c      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 820c 	beq.w	80033e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d005      	beq.n	800301a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800300e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04f      	beq.n	80030ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fe75 	bl	8003d0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302a:	2b40      	cmp	r3, #64	; 0x40
 800302c:	d141      	bne.n	80030b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3308      	adds	r3, #8
 8003034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800304c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800305a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1d9      	bne.n	800302e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <HAL_UART_IRQHandler+0x29c>)
 8003088:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd ffe1 	bl	8001056 <HAL_DMA_Abort_IT>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80030a4:	4610      	mov	r0, r2
 80030a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	e00f      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9b0 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	e00b      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9ac 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e007      	b.n	80030ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f9a8 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80030c8:	e18d      	b.n	80033e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ca:	bf00      	nop
    return;
 80030cc:	e18b      	b.n	80033e6 <HAL_UART_IRQHandler+0x5ae>
 80030ce:	bf00      	nop
 80030d0:	04000120 	.word	0x04000120
 80030d4:	08003dd1 	.word	0x08003dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8146 	bne.w	800336e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 813f 	beq.w	800336e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8138 	beq.w	800336e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2210      	movs	r2, #16
 8003104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b40      	cmp	r3, #64	; 0x40
 8003112:	f040 80b4 	bne.w	800327e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003122:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 815f 	beq.w	80033ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003136:	429a      	cmp	r2, r3
 8003138:	f080 8157 	bcs.w	80033ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8085 	bne.w	8003262 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800316c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003186:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800318e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800319a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1da      	bne.n	8003158 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031b4:	f023 0301 	bic.w	r3, r3, #1
 80031b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3308      	adds	r3, #8
 80031c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e1      	bne.n	80031a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3308      	adds	r3, #8
 80031e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3308      	adds	r3, #8
 80031fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e3      	bne.n	80031de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003232:	f023 0310 	bic.w	r3, r3, #16
 8003236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003244:	65bb      	str	r3, [r7, #88]	; 0x58
 8003246:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800324a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e4      	bne.n	8003222 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd febc 	bl	8000fda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800326e:	b29b      	uxth	r3, r3
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	b29b      	uxth	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8d4 	bl	8003424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800327c:	e0b5      	b.n	80033ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800328a:	b29b      	uxth	r3, r3
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80a7 	beq.w	80033ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80032a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a2 	beq.w	80033ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
 80032ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e4      	bne.n	80032aa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3308      	adds	r3, #8
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	623b      	str	r3, [r7, #32]
   return(result);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3308      	adds	r3, #8
 8003300:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003304:	633a      	str	r2, [r7, #48]	; 0x30
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800330a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	60fb      	str	r3, [r7, #12]
   return(result);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	69b9      	ldr	r1, [r7, #24]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	617b      	str	r3, [r7, #20]
   return(result);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e4      	bne.n	800332a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f85c 	bl	8003424 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800336c:	e03f      	b.n	80033ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00e      	beq.n	8003398 <HAL_UART_IRQHandler+0x560>
 800337a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800338e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fd5d 	bl	8003e50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003396:	e02d      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01c      	beq.n	80033f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
    }
    return;
 80033c0:	e017      	b.n	80033f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fd0e 	bl	8003dfc <UART_EndTransmit_IT>
    return;
 80033e0:	e008      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033e2:	bf00      	nop
 80033e4:	e006      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033e6:	bf00      	nop
 80033e8:	e004      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033ea:	bf00      	nop
 80033ec:	e002      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80033f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80033f4:	37e8      	adds	r7, #232	; 0xe8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop

080033fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800343c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003440:	b08a      	sub	sp, #40	; 0x28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	4313      	orrs	r3, r2
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4ba4      	ldr	r3, [pc, #656]	; (80036fc <UART_SetConfig+0x2c0>)
 800346c:	4013      	ands	r3, r2
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003474:	430b      	orrs	r3, r1
 8003476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a99      	ldr	r2, [pc, #612]	; (8003700 <UART_SetConfig+0x2c4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d004      	beq.n	80034a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	4313      	orrs	r3, r2
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a90      	ldr	r2, [pc, #576]	; (8003704 <UART_SetConfig+0x2c8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d126      	bne.n	8003514 <UART_SetConfig+0xd8>
 80034c6:	4b90      	ldr	r3, [pc, #576]	; (8003708 <UART_SetConfig+0x2cc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d81b      	bhi.n	800350c <UART_SetConfig+0xd0>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0xa0>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	080034f5 	.word	0x080034f5
 80034e8:	08003505 	.word	0x08003505
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f2:	e116      	b.n	8003722 <UART_SetConfig+0x2e6>
 80034f4:	2302      	movs	r3, #2
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fa:	e112      	b.n	8003722 <UART_SetConfig+0x2e6>
 80034fc:	2304      	movs	r3, #4
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	e10e      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003504:	2308      	movs	r3, #8
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e10a      	b.n	8003722 <UART_SetConfig+0x2e6>
 800350c:	2310      	movs	r3, #16
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e106      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a7c      	ldr	r2, [pc, #496]	; (800370c <UART_SetConfig+0x2d0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d138      	bne.n	8003590 <UART_SetConfig+0x154>
 800351e:	4b7a      	ldr	r3, [pc, #488]	; (8003708 <UART_SetConfig+0x2cc>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d82d      	bhi.n	8003588 <UART_SetConfig+0x14c>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <UART_SetConfig+0xf8>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003569 	.word	0x08003569
 8003538:	08003589 	.word	0x08003589
 800353c:	08003589 	.word	0x08003589
 8003540:	08003589 	.word	0x08003589
 8003544:	08003579 	.word	0x08003579
 8003548:	08003589 	.word	0x08003589
 800354c:	08003589 	.word	0x08003589
 8003550:	08003589 	.word	0x08003589
 8003554:	08003571 	.word	0x08003571
 8003558:	08003589 	.word	0x08003589
 800355c:	08003589 	.word	0x08003589
 8003560:	08003589 	.word	0x08003589
 8003564:	08003581 	.word	0x08003581
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e0d8      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e0d4      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e0d0      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e0cc      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e0c8      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <UART_SetConfig+0x2d4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d125      	bne.n	80035e6 <UART_SetConfig+0x1aa>
 800359a:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <UART_SetConfig+0x2cc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d016      	beq.n	80035d6 <UART_SetConfig+0x19a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d818      	bhi.n	80035de <UART_SetConfig+0x1a2>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d00a      	beq.n	80035c6 <UART_SetConfig+0x18a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d814      	bhi.n	80035de <UART_SetConfig+0x1a2>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <UART_SetConfig+0x182>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d008      	beq.n	80035ce <UART_SetConfig+0x192>
 80035bc:	e00f      	b.n	80035de <UART_SetConfig+0x1a2>
 80035be:	2300      	movs	r3, #0
 80035c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c4:	e0ad      	b.n	8003722 <UART_SetConfig+0x2e6>
 80035c6:	2302      	movs	r3, #2
 80035c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035cc:	e0a9      	b.n	8003722 <UART_SetConfig+0x2e6>
 80035ce:	2304      	movs	r3, #4
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d4:	e0a5      	b.n	8003722 <UART_SetConfig+0x2e6>
 80035d6:	2308      	movs	r3, #8
 80035d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035dc:	e0a1      	b.n	8003722 <UART_SetConfig+0x2e6>
 80035de:	2310      	movs	r3, #16
 80035e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e4:	e09d      	b.n	8003722 <UART_SetConfig+0x2e6>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a4a      	ldr	r2, [pc, #296]	; (8003714 <UART_SetConfig+0x2d8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d125      	bne.n	800363c <UART_SetConfig+0x200>
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035fa:	2bc0      	cmp	r3, #192	; 0xc0
 80035fc:	d016      	beq.n	800362c <UART_SetConfig+0x1f0>
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d818      	bhi.n	8003634 <UART_SetConfig+0x1f8>
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d00a      	beq.n	800361c <UART_SetConfig+0x1e0>
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d814      	bhi.n	8003634 <UART_SetConfig+0x1f8>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <UART_SetConfig+0x1d8>
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d008      	beq.n	8003624 <UART_SetConfig+0x1e8>
 8003612:	e00f      	b.n	8003634 <UART_SetConfig+0x1f8>
 8003614:	2300      	movs	r3, #0
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e082      	b.n	8003722 <UART_SetConfig+0x2e6>
 800361c:	2302      	movs	r3, #2
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e07e      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003624:	2304      	movs	r3, #4
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e07a      	b.n	8003722 <UART_SetConfig+0x2e6>
 800362c:	2308      	movs	r3, #8
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e076      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003634:	2310      	movs	r3, #16
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e072      	b.n	8003722 <UART_SetConfig+0x2e6>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a35      	ldr	r2, [pc, #212]	; (8003718 <UART_SetConfig+0x2dc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d12a      	bne.n	800369c <UART_SetConfig+0x260>
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <UART_SetConfig+0x2cc>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003654:	d01a      	beq.n	800368c <UART_SetConfig+0x250>
 8003656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365a:	d81b      	bhi.n	8003694 <UART_SetConfig+0x258>
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d00c      	beq.n	800367c <UART_SetConfig+0x240>
 8003662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003666:	d815      	bhi.n	8003694 <UART_SetConfig+0x258>
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <UART_SetConfig+0x238>
 800366c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003670:	d008      	beq.n	8003684 <UART_SetConfig+0x248>
 8003672:	e00f      	b.n	8003694 <UART_SetConfig+0x258>
 8003674:	2300      	movs	r3, #0
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367a:	e052      	b.n	8003722 <UART_SetConfig+0x2e6>
 800367c:	2302      	movs	r3, #2
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003682:	e04e      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003684:	2304      	movs	r3, #4
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368a:	e04a      	b.n	8003722 <UART_SetConfig+0x2e6>
 800368c:	2308      	movs	r3, #8
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003692:	e046      	b.n	8003722 <UART_SetConfig+0x2e6>
 8003694:	2310      	movs	r3, #16
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369a:	e042      	b.n	8003722 <UART_SetConfig+0x2e6>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <UART_SetConfig+0x2c4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d13a      	bne.n	800371c <UART_SetConfig+0x2e0>
 80036a6:	4b18      	ldr	r3, [pc, #96]	; (8003708 <UART_SetConfig+0x2cc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b4:	d01a      	beq.n	80036ec <UART_SetConfig+0x2b0>
 80036b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ba:	d81b      	bhi.n	80036f4 <UART_SetConfig+0x2b8>
 80036bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c0:	d00c      	beq.n	80036dc <UART_SetConfig+0x2a0>
 80036c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c6:	d815      	bhi.n	80036f4 <UART_SetConfig+0x2b8>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <UART_SetConfig+0x298>
 80036cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d0:	d008      	beq.n	80036e4 <UART_SetConfig+0x2a8>
 80036d2:	e00f      	b.n	80036f4 <UART_SetConfig+0x2b8>
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e022      	b.n	8003722 <UART_SetConfig+0x2e6>
 80036dc:	2302      	movs	r3, #2
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e01e      	b.n	8003722 <UART_SetConfig+0x2e6>
 80036e4:	2304      	movs	r3, #4
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e01a      	b.n	8003722 <UART_SetConfig+0x2e6>
 80036ec:	2308      	movs	r3, #8
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e016      	b.n	8003722 <UART_SetConfig+0x2e6>
 80036f4:	2310      	movs	r3, #16
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e012      	b.n	8003722 <UART_SetConfig+0x2e6>
 80036fc:	efff69f3 	.word	0xefff69f3
 8003700:	40008000 	.word	0x40008000
 8003704:	40013800 	.word	0x40013800
 8003708:	40021000 	.word	0x40021000
 800370c:	40004400 	.word	0x40004400
 8003710:	40004800 	.word	0x40004800
 8003714:	40004c00 	.word	0x40004c00
 8003718:	40005000 	.word	0x40005000
 800371c:	2310      	movs	r3, #16
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a9f      	ldr	r2, [pc, #636]	; (80039a4 <UART_SetConfig+0x568>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d17a      	bne.n	8003822 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800372c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003730:	2b08      	cmp	r3, #8
 8003732:	d824      	bhi.n	800377e <UART_SetConfig+0x342>
 8003734:	a201      	add	r2, pc, #4	; (adr r2, 800373c <UART_SetConfig+0x300>)
 8003736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373a:	bf00      	nop
 800373c:	08003761 	.word	0x08003761
 8003740:	0800377f 	.word	0x0800377f
 8003744:	08003769 	.word	0x08003769
 8003748:	0800377f 	.word	0x0800377f
 800374c:	0800376f 	.word	0x0800376f
 8003750:	0800377f 	.word	0x0800377f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800377f 	.word	0x0800377f
 800375c:	08003777 	.word	0x08003777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7fe fc6e 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8003764:	61f8      	str	r0, [r7, #28]
        break;
 8003766:	e010      	b.n	800378a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003768:	4b8f      	ldr	r3, [pc, #572]	; (80039a8 <UART_SetConfig+0x56c>)
 800376a:	61fb      	str	r3, [r7, #28]
        break;
 800376c:	e00d      	b.n	800378a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376e:	f7fe fbcf 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8003772:	61f8      	str	r0, [r7, #28]
        break;
 8003774:	e009      	b.n	800378a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377a:	61fb      	str	r3, [r7, #28]
        break;
 800377c:	e005      	b.n	800378a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80fb 	beq.w	8003988 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d305      	bcc.n	80037ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d903      	bls.n	80037b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037b4:	e0e8      	b.n	8003988 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2200      	movs	r2, #0
 80037ba:	461c      	mov	r4, r3
 80037bc:	4615      	mov	r5, r2
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	022b      	lsls	r3, r5, #8
 80037c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037cc:	0222      	lsls	r2, r4, #8
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	6849      	ldr	r1, [r1, #4]
 80037d2:	0849      	lsrs	r1, r1, #1
 80037d4:	2000      	movs	r0, #0
 80037d6:	4688      	mov	r8, r1
 80037d8:	4681      	mov	r9, r0
 80037da:	eb12 0a08 	adds.w	sl, r2, r8
 80037de:	eb43 0b09 	adc.w	fp, r3, r9
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f0:	4650      	mov	r0, sl
 80037f2:	4659      	mov	r1, fp
 80037f4:	f7fc fd54 	bl	80002a0 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d308      	bcc.n	800381a <UART_SetConfig+0x3de>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380e:	d204      	bcs.n	800381a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	60da      	str	r2, [r3, #12]
 8003818:	e0b6      	b.n	8003988 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003820:	e0b2      	b.n	8003988 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d15e      	bne.n	80038ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800382c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003830:	2b08      	cmp	r3, #8
 8003832:	d828      	bhi.n	8003886 <UART_SetConfig+0x44a>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x400>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003861 	.word	0x08003861
 8003840:	08003869 	.word	0x08003869
 8003844:	08003871 	.word	0x08003871
 8003848:	08003887 	.word	0x08003887
 800384c:	08003877 	.word	0x08003877
 8003850:	08003887 	.word	0x08003887
 8003854:	08003887 	.word	0x08003887
 8003858:	08003887 	.word	0x08003887
 800385c:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fbee 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8003864:	61f8      	str	r0, [r7, #28]
        break;
 8003866:	e014      	b.n	8003892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003868:	f7fe fc00 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 800386c:	61f8      	str	r0, [r7, #28]
        break;
 800386e:	e010      	b.n	8003892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b4d      	ldr	r3, [pc, #308]	; (80039a8 <UART_SetConfig+0x56c>)
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e00d      	b.n	8003892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7fe fb4b 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 800387a:	61f8      	str	r0, [r7, #28]
        break;
 800387c:	e009      	b.n	8003892 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e005      	b.n	8003892 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d077      	beq.n	8003988 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005a      	lsls	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b0f      	cmp	r3, #15
 80038b2:	d916      	bls.n	80038e2 <UART_SetConfig+0x4a6>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ba:	d212      	bcs.n	80038e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f023 030f 	bic.w	r3, r3, #15
 80038c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	8afa      	ldrh	r2, [r7, #22]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e052      	b.n	8003988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e8:	e04e      	b.n	8003988 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d827      	bhi.n	8003942 <UART_SetConfig+0x506>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x4bc>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003925 	.word	0x08003925
 8003900:	0800392d 	.word	0x0800392d
 8003904:	08003943 	.word	0x08003943
 8003908:	08003933 	.word	0x08003933
 800390c:	08003943 	.word	0x08003943
 8003910:	08003943 	.word	0x08003943
 8003914:	08003943 	.word	0x08003943
 8003918:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391c:	f7fe fb90 	bl	8002040 <HAL_RCC_GetPCLK1Freq>
 8003920:	61f8      	str	r0, [r7, #28]
        break;
 8003922:	e014      	b.n	800394e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003924:	f7fe fba2 	bl	800206c <HAL_RCC_GetPCLK2Freq>
 8003928:	61f8      	str	r0, [r7, #28]
        break;
 800392a:	e010      	b.n	800394e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <UART_SetConfig+0x56c>)
 800392e:	61fb      	str	r3, [r7, #28]
        break;
 8003930:	e00d      	b.n	800394e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe faed 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8003936:	61f8      	str	r0, [r7, #28]
        break;
 8003938:	e009      	b.n	800394e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	61fb      	str	r3, [r7, #28]
        break;
 8003940:	e005      	b.n	800394e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800394c:	bf00      	nop
    }

    if (pclk != 0U)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	085a      	lsrs	r2, r3, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	441a      	add	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	fbb2 f3f3 	udiv	r3, r2, r3
 8003966:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b0f      	cmp	r3, #15
 800396c:	d909      	bls.n	8003982 <UART_SetConfig+0x546>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003974:	d205      	bcs.n	8003982 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e002      	b.n	8003988 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	40008000 	.word	0x40008000
 80039a8:	00f42400 	.word	0x00f42400

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aaa:	d10a      	bne.n	8003ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b00:	f7fd f94e 	bl	8000da0 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10e      	bne.n	8003b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f82d 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e023      	b.n	8003b7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d10e      	bne.n	8003b5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f817 	bl	8003b82 <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00d      	b.n	8003b7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b09c      	sub	sp, #112	; 0x70
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b92:	e0a5      	b.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	f000 80a1 	beq.w	8003ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fd f8ff 	bl	8000da0 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d13e      	bne.n	8003c32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e6      	bne.n	8003bb4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c06:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e067      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d04f      	beq.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4e:	d147      	bne.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e6      	bne.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cac:	623a      	str	r2, [r7, #32]
 8003cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	69f9      	ldr	r1, [r7, #28]
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e010      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f43f af4a 	beq.w	8003b94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3770      	adds	r7, #112	; 0x70
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b095      	sub	sp, #84	; 0x54
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d30:	643b      	str	r3, [r7, #64]	; 0x40
 8003d32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e6      	bne.n	8003d12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3308      	adds	r3, #8
 8003d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e5      	bne.n	8003d44 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d118      	bne.n	8003db2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f023 0310 	bic.w	r3, r3, #16
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	61bb      	str	r3, [r7, #24]
 8003da0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	613b      	str	r3, [r7, #16]
   return(result);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e6      	bne.n	8003d80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003dc4:	bf00      	nop
 8003dc6:	3754      	adds	r7, #84	; 0x54
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fb0e 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e18:	61fb      	str	r3, [r7, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6979      	ldr	r1, [r7, #20]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e6      	bne.n	8003e04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff fada 	bl	80033fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e48:	bf00      	nop
 8003e4a:	3720      	adds	r7, #32
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <__NVIC_SetPriority>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	490c      	ldr	r1, [pc, #48]	; (8003eb0 <__NVIC_SetPriority+0x4c>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	440b      	add	r3, r1
 8003e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e8c:	e00a      	b.n	8003ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4908      	ldr	r1, [pc, #32]	; (8003eb4 <__NVIC_SetPriority+0x50>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	761a      	strb	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	f06f 0004 	mvn.w	r0, #4
 8003ec2:	f7ff ffcf 	bl	8003e64 <__NVIC_SetPriority>
#endif
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed2:	f3ef 8305 	mrs	r3, IPSR
 8003ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8003ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ede:	f06f 0305 	mvn.w	r3, #5
 8003ee2:	607b      	str	r3, [r7, #4]
 8003ee4:	e00c      	b.n	8003f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <osKernelInitialize+0x44>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <osKernelInitialize+0x44>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]
 8003ef8:	e002      	b.n	8003f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003efa:	f04f 33ff 	mov.w	r3, #4294967295
 8003efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000198 	.word	0x20000198

08003f14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f1a:	f3ef 8305 	mrs	r3, IPSR
 8003f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f26:	f06f 0305 	mvn.w	r3, #5
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	e010      	b.n	8003f50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <osKernelStart+0x48>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d109      	bne.n	8003f4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f36:	f7ff ffbf 	bl	8003eb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <osKernelStart+0x48>)
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f40:	f001 f866 	bl	8005010 <vTaskStartScheduler>
      stat = osOK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e002      	b.n	8003f50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f50:	687b      	ldr	r3, [r7, #4]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000198 	.word	0x20000198

08003f60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08e      	sub	sp, #56	; 0x38
 8003f64:	af04      	add	r7, sp, #16
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f70:	f3ef 8305 	mrs	r3, IPSR
 8003f74:	617b      	str	r3, [r7, #20]
  return(result);
 8003f76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d17e      	bne.n	800407a <osThreadNew+0x11a>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d07b      	beq.n	800407a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f86:	2318      	movs	r3, #24
 8003f88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d045      	beq.n	8004026 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <osThreadNew+0x48>
        name = attr->name;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <osThreadNew+0x6e>
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b38      	cmp	r3, #56	; 0x38
 8003fc0:	d805      	bhi.n	8003fce <osThreadNew+0x6e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <osThreadNew+0x72>
        return (NULL);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	e054      	b.n	800407c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	089b      	lsrs	r3, r3, #2
 8003fe0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00e      	beq.n	8004008 <osThreadNew+0xa8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b5b      	cmp	r3, #91	; 0x5b
 8003ff0:	d90a      	bls.n	8004008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d006      	beq.n	8004008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <osThreadNew+0xa8>
        mem = 1;
 8004002:	2301      	movs	r3, #1
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e010      	b.n	800402a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10c      	bne.n	800402a <osThreadNew+0xca>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d108      	bne.n	800402a <osThreadNew+0xca>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <osThreadNew+0xca>
          mem = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e001      	b.n	800402a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d110      	bne.n	8004052 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004038:	9202      	str	r2, [sp, #8]
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	6a3a      	ldr	r2, [r7, #32]
 8004044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fe0c 	bl	8004c64 <xTaskCreateStatic>
 800404c:	4603      	mov	r3, r0
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	e013      	b.n	800407a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d110      	bne.n	800407a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	b29a      	uxth	r2, r3
 800405c:	f107 0310 	add.w	r3, r7, #16
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fe57 	bl	8004d1e <xTaskCreate>
 8004070:	4603      	mov	r3, r0
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <osThreadNew+0x11a>
            hTask = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800407a:	693b      	ldr	r3, [r7, #16]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800408c:	f3ef 8305 	mrs	r3, IPSR
 8004090:	60bb      	str	r3, [r7, #8]
  return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <osDelay+0x1c>
    stat = osErrorISR;
 8004098:	f06f 0305 	mvn.w	r3, #5
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e007      	b.n	80040b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 ff7c 	bl	8004fa8 <vTaskDelay>
    }
  }

  return (stat);
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80040cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <vApplicationGetIdleTaskMemory+0x30>)
 80040d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	; 0x80
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000019c 	.word	0x2000019c
 80040ec:	200001f8 	.word	0x200001f8

080040f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <vApplicationGetTimerTaskMemory+0x2c>)
 8004100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4a06      	ldr	r2, [pc, #24]	; (8004120 <vApplicationGetTimerTaskMemory+0x30>)
 8004106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800410e:	601a      	str	r2, [r3, #0]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	200003f8 	.word	0x200003f8
 8004120:	20000454 	.word	0x20000454

08004124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f103 0208 	add.w	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f103 0208 	add.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d103      	bne.n	80041e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e00c      	b.n	8004200 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3308      	adds	r3, #8
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <vListInsert+0x2e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d2f6      	bcs.n	80041ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d103      	bne.n	800426c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042b6:	f002 f84d 	bl	8006354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	3b01      	subs	r3, #1
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	441a      	add	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3310      	adds	r3, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f903 	bl	8005524 <xTaskRemoveFromEventList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xQueueGenericReset+0xcc>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	e009      	b.n	800434a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3310      	adds	r3, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fef2 	bl	8004124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff feed 	bl	8004124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f002 f833 	bl	80063b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800434e:	2301      	movs	r3, #1
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <xQueueGenericCreateStatic+0x52>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <xQueueGenericCreateStatic+0x56>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericCreateStatic+0x58>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	623b      	str	r3, [r7, #32]
}
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <xQueueGenericCreateStatic+0x7e>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <xQueueGenericCreateStatic+0x82>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <xQueueGenericCreateStatic+0x84>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	61fb      	str	r3, [r7, #28]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043fa:	2350      	movs	r3, #80	; 0x50
 80043fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d00a      	beq.n	800441a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61bb      	str	r3, [r7, #24]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800441a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f805 	bl	800444c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3730      	adds	r7, #48	; 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	e002      	b.n	800446e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800447a:	2101      	movs	r1, #1
 800447c:	69b8      	ldr	r0, [r7, #24]
 800447e:	f7ff ff05 	bl	800428c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08e      	sub	sp, #56	; 0x38
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <xQueueGenericSend+0x32>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d103      	bne.n	80044d4 <xQueueGenericSend+0x40>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <xQueueGenericSend+0x44>
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <xQueueGenericSend+0x46>
 80044d8:	2300      	movs	r3, #0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <xQueueGenericSend+0x60>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d103      	bne.n	8004502 <xQueueGenericSend+0x6e>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <xQueueGenericSend+0x72>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <xQueueGenericSend+0x74>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xQueueGenericSend+0x8e>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	623b      	str	r3, [r7, #32]
}
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004522:	f001 f9bd 	bl	80058a0 <xTaskGetSchedulerState>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <xQueueGenericSend+0x9e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <xQueueGenericSend+0xa2>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueGenericSend+0xa4>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <xQueueGenericSend+0xbe>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	61fb      	str	r3, [r7, #28]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004552:	f001 feff 	bl	8006354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <xQueueGenericSend+0xd4>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d129      	bne.n	80045bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800456e:	f000 fa0b 	bl	8004988 <prvCopyDataToQueue>
 8004572:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	4618      	mov	r0, r3
 8004582:	f000 ffcf 	bl	8005524 <xTaskRemoveFromEventList>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b3f      	ldr	r3, [pc, #252]	; (800468c <xQueueGenericSend+0x1f8>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	e00a      	b.n	80045b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045a4:	4b39      	ldr	r3, [pc, #228]	; (800468c <xQueueGenericSend+0x1f8>)
 80045a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045b4:	f001 fefe 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e063      	b.n	8004684 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045c2:	f001 fef7 	bl	80063b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e05c      	b.n	8004684 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 f809 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045da:	2301      	movs	r3, #1
 80045dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045de:	f001 fee9 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045e2:	f000 fd7b 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045e6:	f001 feb5 	bl	8006354 <vPortEnterCritical>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d103      	bne.n	8004600 <xQueueGenericSend+0x16c>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004606:	b25b      	sxtb	r3, r3
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d103      	bne.n	8004616 <xQueueGenericSend+0x182>
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004616:	f001 fecd 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800461a:	1d3a      	adds	r2, r7, #4
 800461c:	f107 0314 	add.w	r3, r7, #20
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fff8 	bl	8005618 <xTaskCheckForTimeOut>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d124      	bne.n	8004678 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800462e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004630:	f000 faa2 	bl	8004b78 <prvIsQueueFull>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	3310      	adds	r3, #16
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ff1e 	bl	8005484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800464a:	f000 fa2d 	bl	8004aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800464e:	f000 fd53 	bl	80050f8 <xTaskResumeAll>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f af7c 	bne.w	8004552 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800465a:	4b0c      	ldr	r3, [pc, #48]	; (800468c <xQueueGenericSend+0x1f8>)
 800465c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	e772      	b.n	8004552 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800466c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800466e:	f000 fa1b 	bl	8004aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004672:	f000 fd41 	bl	80050f8 <xTaskResumeAll>
 8004676:	e76c      	b.n	8004552 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467a:	f000 fa15 	bl	8004aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467e:	f000 fd3b 	bl	80050f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004682:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004684:	4618      	mov	r0, r3
 8004686:	3738      	adds	r7, #56	; 0x38
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b090      	sub	sp, #64	; 0x40
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046ba:	bf00      	nop
 80046bc:	e7fe      	b.n	80046bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <xQueueGenericSendFromISR+0x3c>
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <xQueueGenericSendFromISR+0x40>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <xQueueGenericSendFromISR+0x42>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d103      	bne.n	80046fa <xQueueGenericSendFromISR+0x6a>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <xQueueGenericSendFromISR+0x6e>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <xQueueGenericSendFromISR+0x70>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10a      	bne.n	800471a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	623b      	str	r3, [r7, #32]
}
 8004716:	bf00      	nop
 8004718:	e7fe      	b.n	8004718 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800471a:	f001 fefd 	bl	8006518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800471e:	f3ef 8211 	mrs	r2, BASEPRI
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	61fa      	str	r2, [r7, #28]
 8004734:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004736:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800473e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <xQueueGenericSendFromISR+0xbc>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d12f      	bne.n	80047ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004762:	f000 f911 	bl	8004988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004766:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d112      	bne.n	8004796 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fed1 	bl	8005524 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e007      	b.n	80047a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004796:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800479a:	3301      	adds	r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	b25a      	sxtb	r2, r3
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047a6:	2301      	movs	r3, #1
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80047aa:	e001      	b.n	80047b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3740      	adds	r7, #64	; 0x40
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08c      	sub	sp, #48	; 0x30
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <xQueueReceive+0x30>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	623b      	str	r3, [r7, #32]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <xQueueReceive+0x3e>
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <xQueueReceive+0x42>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <xQueueReceive+0x44>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <xQueueReceive+0x5e>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61fb      	str	r3, [r7, #28]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004826:	f001 f83b 	bl	80058a0 <xTaskGetSchedulerState>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <xQueueReceive+0x6e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <xQueueReceive+0x72>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueReceive+0x74>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xQueueReceive+0x8e>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	61bb      	str	r3, [r7, #24]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004856:	f001 fd7d 	bl	8006354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d01f      	beq.n	80048a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800486a:	f000 f8f7 	bl	8004a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004874:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00f      	beq.n	800489e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	3310      	adds	r3, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fe4e 	bl	8005524 <xTaskRemoveFromEventList>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <xQueueReceive+0x1bc>)
 8004890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800489e:	f001 fd89 	bl	80063b4 <vPortExitCritical>
				return pdPASS;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e069      	b.n	800497a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ac:	f001 fd82 	bl	80063b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e062      	b.n	800497a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ba:	f107 0310 	add.w	r3, r7, #16
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fe94 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048c8:	f001 fd74 	bl	80063b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048cc:	f000 fc06 	bl	80050dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048d0:	f001 fd40 	bl	8006354 <vPortEnterCritical>
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d103      	bne.n	80048ea <xQueueReceive+0x122>
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d103      	bne.n	8004900 <xQueueReceive+0x138>
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004900:	f001 fd58 	bl	80063b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004904:	1d3a      	adds	r2, r7, #4
 8004906:	f107 0310 	add.w	r3, r7, #16
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fe83 	bl	8005618 <xTaskCheckForTimeOut>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d123      	bne.n	8004960 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491a:	f000 f917 	bl	8004b4c <prvIsQueueEmpty>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d017      	beq.n	8004954 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	3324      	adds	r3, #36	; 0x24
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fda9 	bl	8005484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004934:	f000 f8b8 	bl	8004aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004938:	f000 fbde 	bl	80050f8 <xTaskResumeAll>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d189      	bne.n	8004856 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <xQueueReceive+0x1bc>)
 8004944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	e780      	b.n	8004856 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004956:	f000 f8a7 	bl	8004aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800495a:	f000 fbcd 	bl	80050f8 <xTaskResumeAll>
 800495e:	e77a      	b.n	8004856 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004962:	f000 f8a1 	bl	8004aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004966:	f000 fbc7 	bl	80050f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800496a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496c:	f000 f8ee 	bl	8004b4c <prvIsQueueEmpty>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	f43f af6f 	beq.w	8004856 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004978:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800497a:	4618      	mov	r0, r3
 800497c:	3730      	adds	r7, #48	; 0x30
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d14d      	bne.n	8004a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 ff92 	bl	80058dc <xTaskPriorityDisinherit>
 80049b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	e043      	b.n	8004a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d119      	bne.n	80049fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6858      	ldr	r0, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	461a      	mov	r2, r3
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	f001 fff4 	bl	80069c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d32b      	bcc.n	8004a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	e026      	b.n	8004a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68d8      	ldr	r0, [r3, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	461a      	mov	r2, r3
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	f001 ffda 	bl	80069c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	425b      	negs	r3, r3
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d207      	bcs.n	8004a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	425b      	negs	r3, r3
 8004a32:	441a      	add	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d105      	bne.n	8004a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a52:	697b      	ldr	r3, [r7, #20]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	441a      	add	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d303      	bcc.n	8004a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68d9      	ldr	r1, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6838      	ldr	r0, [r7, #0]
 8004a9c:	f001 ff90 	bl	80069c0 <memcpy>
	}
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ab0:	f001 fc50 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004abc:	e011      	b.n	8004ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d012      	beq.n	8004aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3324      	adds	r3, #36	; 0x24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fd2a 	bl	8005524 <xTaskRemoveFromEventList>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ad6:	f000 fe01 	bl	80056dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dce9      	bgt.n	8004abe <prvUnlockQueue+0x16>
 8004aea:	e000      	b.n	8004aee <prvUnlockQueue+0x46>
					break;
 8004aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004af6:	f001 fc5d 	bl	80063b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004afa:	f001 fc2b 	bl	8006354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b06:	e011      	b.n	8004b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d012      	beq.n	8004b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3310      	adds	r3, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fd05 	bl	8005524 <xTaskRemoveFromEventList>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b20:	f000 fddc 	bl	80056dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b24:	7bbb      	ldrb	r3, [r7, #14]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dce9      	bgt.n	8004b08 <prvUnlockQueue+0x60>
 8004b34:	e000      	b.n	8004b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	22ff      	movs	r2, #255	; 0xff
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b40:	f001 fc38 	bl	80063b4 <vPortExitCritical>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b54:	f001 fbfe 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e001      	b.n	8004b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b6a:	f001 fc23 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b80:	f001 fbe8 	bl	8006354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d102      	bne.n	8004b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e001      	b.n	8004b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b9a:	f001 fc0b 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e014      	b.n	8004be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bb8:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <vQueueAddToRegistry+0x50>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bc4:	490c      	ldr	r1, [pc, #48]	; (8004bf8 <vQueueAddToRegistry+0x50>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bce:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <vQueueAddToRegistry+0x50>)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bda:	e006      	b.n	8004bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b07      	cmp	r3, #7
 8004be6:	d9e7      	bls.n	8004bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000854 	.word	0x20000854

08004bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c0c:	f001 fba2 	bl	8006354 <vPortEnterCritical>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c16:	b25b      	sxtb	r3, r3
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d103      	bne.n	8004c26 <vQueueWaitForMessageRestricted+0x2a>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2c:	b25b      	sxtb	r3, r3
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d103      	bne.n	8004c3c <vQueueWaitForMessageRestricted+0x40>
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c3c:	f001 fbba 	bl	80063b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d106      	bne.n	8004c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3324      	adds	r3, #36	; 0x24
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fc3b 	bl	80054cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	f7ff ff26 	bl	8004aa8 <prvUnlockQueue>
	}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af04      	add	r7, sp, #16
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	623b      	str	r3, [r7, #32]
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <xTaskCreateStatic+0x46>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	61fb      	str	r3, [r7, #28]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004caa:	235c      	movs	r3, #92	; 0x5c
 8004cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b5c      	cmp	r3, #92	; 0x5c
 8004cb2:	d00a      	beq.n	8004cca <xTaskCreateStatic+0x66>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	61bb      	str	r3, [r7, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d01e      	beq.n	8004d10 <xTaskCreateStatic+0xac>
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01b      	beq.n	8004d10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cea:	2300      	movs	r3, #0
 8004cec:	9303      	str	r3, [sp, #12]
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	9302      	str	r3, [sp, #8]
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f850 	bl	8004da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d0a:	f000 f8dd 	bl	8004ec8 <prvAddNewTaskToReadyList>
 8004d0e:	e001      	b.n	8004d14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d14:	697b      	ldr	r3, [r7, #20]
	}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b08c      	sub	sp, #48	; 0x30
 8004d22:	af04      	add	r7, sp, #16
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fc30 	bl	8006598 <pvPortMalloc>
 8004d38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d40:	205c      	movs	r0, #92	; 0x5c
 8004d42:	f001 fc29 	bl	8006598 <pvPortMalloc>
 8004d46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
 8004d54:	e005      	b.n	8004d62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	f001 fcea 	bl	8006730 <vPortFree>
 8004d5c:	e001      	b.n	8004d62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d017      	beq.n	8004d98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	2300      	movs	r3, #0
 8004d74:	9303      	str	r3, [sp, #12]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	9302      	str	r3, [sp, #8]
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f80e 	bl	8004da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8c:	69f8      	ldr	r0, [r7, #28]
 8004d8e:	f000 f89b 	bl	8004ec8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e002      	b.n	8004d9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	21a5      	movs	r1, #165	; 0xa5
 8004dc2:	f001 fe0b 	bl	80069dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	617b      	str	r3, [r7, #20]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d01f      	beq.n	8004e46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e06:	2300      	movs	r3, #0
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	e012      	b.n	8004e32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	7819      	ldrb	r1, [r3, #0]
 8004e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	3334      	adds	r3, #52	; 0x34
 8004e1c:	460a      	mov	r2, r1
 8004e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d006      	beq.n	8004e3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d9e9      	bls.n	8004e0c <prvInitialiseNewTask+0x64>
 8004e38:	e000      	b.n	8004e3c <prvInitialiseNewTask+0x94>
			{
				break;
 8004e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e44:	e003      	b.n	8004e4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	2b37      	cmp	r3, #55	; 0x37
 8004e52:	d901      	bls.n	8004e58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e54:	2337      	movs	r3, #55	; 0x37
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2200      	movs	r2, #0
 8004e68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff f978 	bl	8004164 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	3318      	adds	r3, #24
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f973 	bl	8004164 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	2200      	movs	r2, #0
 8004e98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	68f9      	ldr	r1, [r7, #12]
 8004ea6:	69b8      	ldr	r0, [r7, #24]
 8004ea8:	f001 f928 	bl	80060fc <pxPortInitialiseStack>
 8004eac:	4602      	mov	r2, r0
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ebe:	bf00      	nop
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ed0:	f001 fa40 	bl	8006354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <prvAddNewTaskToReadyList+0xc4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <prvAddNewTaskToReadyList+0xc4>)
 8004edc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <prvAddNewTaskToReadyList+0xc8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ee6:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <prvAddNewTaskToReadyList+0xc8>)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004eec:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <prvAddNewTaskToReadyList+0xc4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d110      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ef4:	f000 fc16 	bl	8005724 <prvInitialiseTaskLists>
 8004ef8:	e00d      	b.n	8004f16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004efa:	4b26      	ldr	r3, [pc, #152]	; (8004f94 <prvAddNewTaskToReadyList+0xcc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <prvAddNewTaskToReadyList+0xc8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d802      	bhi.n	8004f16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f10:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <prvAddNewTaskToReadyList+0xc8>)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <prvAddNewTaskToReadyList+0xd0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <prvAddNewTaskToReadyList+0xd0>)
 8004f1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <prvAddNewTaskToReadyList+0xd0>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <prvAddNewTaskToReadyList+0xd4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d903      	bls.n	8004f3c <prvAddNewTaskToReadyList+0x74>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <prvAddNewTaskToReadyList+0xd4>)
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <prvAddNewTaskToReadyList+0xd8>)
 8004f4a:	441a      	add	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7ff f913 	bl	800417e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f58:	f001 fa2c 	bl	80063b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <prvAddNewTaskToReadyList+0xcc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <prvAddNewTaskToReadyList+0xc8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d207      	bcs.n	8004f82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <prvAddNewTaskToReadyList+0xdc>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	20000d68 	.word	0x20000d68
 8004f90:	20000894 	.word	0x20000894
 8004f94:	20000d74 	.word	0x20000d74
 8004f98:	20000d84 	.word	0x20000d84
 8004f9c:	20000d70 	.word	0x20000d70
 8004fa0:	20000898 	.word	0x20000898
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d017      	beq.n	8004fea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <vTaskDelay+0x60>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <vTaskDelay+0x30>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	60bb      	str	r3, [r7, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	e7fe      	b.n	8004fd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fd8:	f000 f880 	bl	80050dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fcea 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fe4:	f000 f888 	bl	80050f8 <xTaskResumeAll>
 8004fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d107      	bne.n	8005000 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <vTaskDelay+0x64>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000d90 	.word	0x20000d90
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800501e:	463a      	mov	r2, r7
 8005020:	1d39      	adds	r1, r7, #4
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff f848 	bl	80040bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	9202      	str	r2, [sp, #8]
 8005034:	9301      	str	r3, [sp, #4]
 8005036:	2300      	movs	r3, #0
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2300      	movs	r3, #0
 800503c:	460a      	mov	r2, r1
 800503e:	4921      	ldr	r1, [pc, #132]	; (80050c4 <vTaskStartScheduler+0xb4>)
 8005040:	4821      	ldr	r0, [pc, #132]	; (80050c8 <vTaskStartScheduler+0xb8>)
 8005042:	f7ff fe0f 	bl	8004c64 <xTaskCreateStatic>
 8005046:	4603      	mov	r3, r0
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <vTaskStartScheduler+0xbc>)
 800504a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <vTaskStartScheduler+0xbc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e001      	b.n	800505e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d102      	bne.n	800506a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005064:	f000 fcfc 	bl	8005a60 <xTimerCreateTimerTask>
 8005068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d116      	bne.n	800509e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	613b      	str	r3, [r7, #16]
}
 8005082:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <vTaskStartScheduler+0xc0>)
 8005086:	f04f 32ff 	mov.w	r2, #4294967295
 800508a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <vTaskStartScheduler+0xc4>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <vTaskStartScheduler+0xc8>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005098:	f001 f8ba 	bl	8006210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800509c:	e00e      	b.n	80050bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a4:	d10a      	bne.n	80050bc <vTaskStartScheduler+0xac>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <vTaskStartScheduler+0xaa>
}
 80050bc:	bf00      	nop
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08007e3c 	.word	0x08007e3c
 80050c8:	080056f5 	.word	0x080056f5
 80050cc:	20000d8c 	.word	0x20000d8c
 80050d0:	20000d88 	.word	0x20000d88
 80050d4:	20000d74 	.word	0x20000d74
 80050d8:	20000d6c 	.word	0x20000d6c

080050dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <vTaskSuspendAll+0x18>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <vTaskSuspendAll+0x18>)
 80050e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	20000d90 	.word	0x20000d90

080050f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005106:	4b42      	ldr	r3, [pc, #264]	; (8005210 <xTaskResumeAll+0x118>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <xTaskResumeAll+0x2c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	603b      	str	r3, [r7, #0]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005124:	f001 f916 	bl	8006354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005128:	4b39      	ldr	r3, [pc, #228]	; (8005210 <xTaskResumeAll+0x118>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	4a38      	ldr	r2, [pc, #224]	; (8005210 <xTaskResumeAll+0x118>)
 8005130:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b37      	ldr	r3, [pc, #220]	; (8005210 <xTaskResumeAll+0x118>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d162      	bne.n	8005200 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800513a:	4b36      	ldr	r3, [pc, #216]	; (8005214 <xTaskResumeAll+0x11c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d05e      	beq.n	8005200 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005142:	e02f      	b.n	80051a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005144:	4b34      	ldr	r3, [pc, #208]	; (8005218 <xTaskResumeAll+0x120>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3318      	adds	r3, #24
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff f871 	bl	8004238 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3304      	adds	r3, #4
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff f86c 	bl	8004238 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <xTaskResumeAll+0x124>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d903      	bls.n	8005174 <xTaskResumeAll+0x7c>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <xTaskResumeAll+0x124>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <xTaskResumeAll+0x128>)
 8005182:	441a      	add	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7fe fff7 	bl	800417e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <xTaskResumeAll+0x12c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	429a      	cmp	r2, r3
 800519c:	d302      	bcc.n	80051a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800519e:	4b22      	ldr	r3, [pc, #136]	; (8005228 <xTaskResumeAll+0x130>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051a4:	4b1c      	ldr	r3, [pc, #112]	; (8005218 <xTaskResumeAll+0x120>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1cb      	bne.n	8005144 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051b2:	f000 fb55 	bl	8005860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <xTaskResumeAll+0x134>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d010      	beq.n	80051e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051c2:	f000 f847 	bl	8005254 <xTaskIncrementTick>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80051cc:	4b16      	ldr	r3, [pc, #88]	; (8005228 <xTaskResumeAll+0x130>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f1      	bne.n	80051c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80051de:	4b13      	ldr	r3, [pc, #76]	; (800522c <xTaskResumeAll+0x134>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051e4:	4b10      	ldr	r3, [pc, #64]	; (8005228 <xTaskResumeAll+0x130>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051f0:	4b0f      	ldr	r3, [pc, #60]	; (8005230 <xTaskResumeAll+0x138>)
 80051f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005200:	f001 f8d8 	bl	80063b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005204:	68bb      	ldr	r3, [r7, #8]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20000d90 	.word	0x20000d90
 8005214:	20000d68 	.word	0x20000d68
 8005218:	20000d28 	.word	0x20000d28
 800521c:	20000d70 	.word	0x20000d70
 8005220:	20000898 	.word	0x20000898
 8005224:	20000894 	.word	0x20000894
 8005228:	20000d7c 	.word	0x20000d7c
 800522c:	20000d78 	.word	0x20000d78
 8005230:	e000ed04 	.word	0xe000ed04

08005234 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <xTaskGetTickCount+0x1c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005240:	687b      	ldr	r3, [r7, #4]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	20000d6c 	.word	0x20000d6c

08005254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525e:	4b4f      	ldr	r3, [pc, #316]	; (800539c <xTaskIncrementTick+0x148>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 808f 	bne.w	8005386 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005268:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <xTaskIncrementTick+0x14c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <xTaskIncrementTick+0x14c>)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d120      	bne.n	80052be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800527c:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <xTaskIncrementTick+0x150>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <xTaskIncrementTick+0x48>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	603b      	str	r3, [r7, #0]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <xTaskIncrementTick+0x46>
 800529c:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <xTaskIncrementTick+0x150>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b41      	ldr	r3, [pc, #260]	; (80053a8 <xTaskIncrementTick+0x154>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a3f      	ldr	r2, [pc, #252]	; (80053a4 <xTaskIncrementTick+0x150>)
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	4a3f      	ldr	r2, [pc, #252]	; (80053a8 <xTaskIncrementTick+0x154>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	4b3e      	ldr	r3, [pc, #248]	; (80053ac <xTaskIncrementTick+0x158>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	4a3d      	ldr	r2, [pc, #244]	; (80053ac <xTaskIncrementTick+0x158>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	f000 fad1 	bl	8005860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052be:	4b3c      	ldr	r3, [pc, #240]	; (80053b0 <xTaskIncrementTick+0x15c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d349      	bcc.n	800535c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <xTaskIncrementTick+0x150>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	4b37      	ldr	r3, [pc, #220]	; (80053b0 <xTaskIncrementTick+0x15c>)
 80052d4:	f04f 32ff 	mov.w	r2, #4294967295
 80052d8:	601a      	str	r2, [r3, #0]
					break;
 80052da:	e03f      	b.n	800535c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xTaskIncrementTick+0x150>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d203      	bcs.n	80052fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052f4:	4a2e      	ldr	r2, [pc, #184]	; (80053b0 <xTaskIncrementTick+0x15c>)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052fa:	e02f      	b.n	800535c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe ff99 	bl	8004238 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	3318      	adds	r3, #24
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe ff90 	bl	8004238 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <xTaskIncrementTick+0x160>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d903      	bls.n	800532c <xTaskIncrementTick+0xd8>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <xTaskIncrementTick+0x160>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <xTaskIncrementTick+0x164>)
 800533a:	441a      	add	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe ff1b 	bl	800417e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <xTaskIncrementTick+0x168>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	429a      	cmp	r2, r3
 8005354:	d3b8      	bcc.n	80052c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535a:	e7b5      	b.n	80052c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800535c:	4b17      	ldr	r3, [pc, #92]	; (80053bc <xTaskIncrementTick+0x168>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	4915      	ldr	r1, [pc, #84]	; (80053b8 <xTaskIncrementTick+0x164>)
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d901      	bls.n	8005378 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005374:	2301      	movs	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <xTaskIncrementTick+0x16c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e004      	b.n	8005390 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <xTaskIncrementTick+0x170>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <xTaskIncrementTick+0x170>)
 800538e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005390:	697b      	ldr	r3, [r7, #20]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000d90 	.word	0x20000d90
 80053a0:	20000d6c 	.word	0x20000d6c
 80053a4:	20000d20 	.word	0x20000d20
 80053a8:	20000d24 	.word	0x20000d24
 80053ac:	20000d80 	.word	0x20000d80
 80053b0:	20000d88 	.word	0x20000d88
 80053b4:	20000d70 	.word	0x20000d70
 80053b8:	20000898 	.word	0x20000898
 80053bc:	20000894 	.word	0x20000894
 80053c0:	20000d7c 	.word	0x20000d7c
 80053c4:	20000d78 	.word	0x20000d78

080053c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <vTaskSwitchContext+0xa8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <vTaskSwitchContext+0xac>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053dc:	e041      	b.n	8005462 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <vTaskSwitchContext+0xac>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053e4:	4b24      	ldr	r3, [pc, #144]	; (8005478 <vTaskSwitchContext+0xb0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e010      	b.n	800540e <vTaskSwitchContext+0x46>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vTaskSwitchContext+0x40>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	607b      	str	r3, [r7, #4]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vTaskSwitchContext+0x3e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b01      	subs	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	491b      	ldr	r1, [pc, #108]	; (800547c <vTaskSwitchContext+0xb4>)
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0e4      	beq.n	80053ec <vTaskSwitchContext+0x24>
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4a13      	ldr	r2, [pc, #76]	; (800547c <vTaskSwitchContext+0xb4>)
 800542e:	4413      	add	r3, r2
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3308      	adds	r3, #8
 8005444:	429a      	cmp	r2, r3
 8005446:	d104      	bne.n	8005452 <vTaskSwitchContext+0x8a>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <vTaskSwitchContext+0xb8>)
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	4a06      	ldr	r2, [pc, #24]	; (8005478 <vTaskSwitchContext+0xb0>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6013      	str	r3, [r2, #0]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20000d90 	.word	0x20000d90
 8005474:	20000d7c 	.word	0x20000d7c
 8005478:	20000d70 	.word	0x20000d70
 800547c:	20000898 	.word	0x20000898
 8005480:	20000894 	.word	0x20000894

08005484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	60fb      	str	r3, [r7, #12]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <vTaskPlaceOnEventList+0x44>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3318      	adds	r3, #24
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fe fe87 	bl	80041c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054b8:	2101      	movs	r1, #1
 80054ba:	6838      	ldr	r0, [r7, #0]
 80054bc:	f000 fa7c 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
}
 80054c0:	bf00      	nop
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000894 	.word	0x20000894

080054cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10a      	bne.n	80054f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	e7fe      	b.n	80054f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <vTaskPlaceOnEventListRestricted+0x54>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3318      	adds	r3, #24
 80054fa:	4619      	mov	r1, r3
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7fe fe3e 	bl	800417e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005508:	f04f 33ff 	mov.w	r3, #4294967295
 800550c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	68b8      	ldr	r0, [r7, #8]
 8005512:	f000 fa51 	bl	80059b8 <prvAddCurrentTaskToDelayedList>
	}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20000894 	.word	0x20000894

08005524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3318      	adds	r3, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fe6f 	bl	8004238 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <xTaskRemoveFromEventList+0xb0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11d      	bne.n	800559e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3304      	adds	r3, #4
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fe66 	bl	8004238 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <xTaskRemoveFromEventList+0xb4>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d903      	bls.n	8005580 <xTaskRemoveFromEventList+0x5c>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	4a16      	ldr	r2, [pc, #88]	; (80055d8 <xTaskRemoveFromEventList+0xb4>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a13      	ldr	r2, [pc, #76]	; (80055dc <xTaskRemoveFromEventList+0xb8>)
 800558e:	441a      	add	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7fe fdf1 	bl	800417e <vListInsertEnd>
 800559c:	e005      	b.n	80055aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4619      	mov	r1, r3
 80055a4:	480e      	ldr	r0, [pc, #56]	; (80055e0 <xTaskRemoveFromEventList+0xbc>)
 80055a6:	f7fe fdea 	bl	800417e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <xTaskRemoveFromEventList+0xc0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d905      	bls.n	80055c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <xTaskRemoveFromEventList+0xc4>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e001      	b.n	80055c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055c8:	697b      	ldr	r3, [r7, #20]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000d90 	.word	0x20000d90
 80055d8:	20000d70 	.word	0x20000d70
 80055dc:	20000898 	.word	0x20000898
 80055e0:	20000d28 	.word	0x20000d28
 80055e4:	20000894 	.word	0x20000894
 80055e8:	20000d7c 	.word	0x20000d7c

080055ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <vTaskInternalSetTimeOutState+0x24>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <vTaskInternalSetTimeOutState+0x28>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000d80 	.word	0x20000d80
 8005614:	20000d6c 	.word	0x20000d6c

08005618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10a      	bne.n	800563e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	613b      	str	r3, [r7, #16]
}
 800563a:	bf00      	nop
 800563c:	e7fe      	b.n	800563c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800565a:	f000 fe7b 	bl	8006354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800565e:	4b1d      	ldr	r3, [pc, #116]	; (80056d4 <xTaskCheckForTimeOut+0xbc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005676:	d102      	bne.n	800567e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	e023      	b.n	80056c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <xTaskCheckForTimeOut+0xc0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d007      	beq.n	800569a <xTaskCheckForTimeOut+0x82>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	429a      	cmp	r2, r3
 8005692:	d302      	bcc.n	800569a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	e015      	b.n	80056c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d20b      	bcs.n	80056bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff9b 	bl	80055ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	e004      	b.n	80056c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056c6:	f000 fe75 	bl	80063b4 <vPortExitCritical>

	return xReturn;
 80056ca:	69fb      	ldr	r3, [r7, #28]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000d6c 	.word	0x20000d6c
 80056d8:	20000d80 	.word	0x20000d80

080056dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e0:	4b03      	ldr	r3, [pc, #12]	; (80056f0 <vTaskMissedYield+0x14>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	20000d7c 	.word	0x20000d7c

080056f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056fc:	f000 f852 	bl	80057a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <prvIdleTask+0x28>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d9f9      	bls.n	80056fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <prvIdleTask+0x2c>)
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005718:	e7f0      	b.n	80056fc <prvIdleTask+0x8>
 800571a:	bf00      	nop
 800571c:	20000898 	.word	0x20000898
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	e00c      	b.n	800574a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4a12      	ldr	r2, [pc, #72]	; (8005784 <prvInitialiseTaskLists+0x60>)
 800573c:	4413      	add	r3, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fcf0 	bl	8004124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3301      	adds	r3, #1
 8005748:	607b      	str	r3, [r7, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b37      	cmp	r3, #55	; 0x37
 800574e:	d9ef      	bls.n	8005730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005750:	480d      	ldr	r0, [pc, #52]	; (8005788 <prvInitialiseTaskLists+0x64>)
 8005752:	f7fe fce7 	bl	8004124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005756:	480d      	ldr	r0, [pc, #52]	; (800578c <prvInitialiseTaskLists+0x68>)
 8005758:	f7fe fce4 	bl	8004124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800575c:	480c      	ldr	r0, [pc, #48]	; (8005790 <prvInitialiseTaskLists+0x6c>)
 800575e:	f7fe fce1 	bl	8004124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005762:	480c      	ldr	r0, [pc, #48]	; (8005794 <prvInitialiseTaskLists+0x70>)
 8005764:	f7fe fcde 	bl	8004124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005768:	480b      	ldr	r0, [pc, #44]	; (8005798 <prvInitialiseTaskLists+0x74>)
 800576a:	f7fe fcdb 	bl	8004124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800576e:	4b0b      	ldr	r3, [pc, #44]	; (800579c <prvInitialiseTaskLists+0x78>)
 8005770:	4a05      	ldr	r2, [pc, #20]	; (8005788 <prvInitialiseTaskLists+0x64>)
 8005772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <prvInitialiseTaskLists+0x7c>)
 8005776:	4a05      	ldr	r2, [pc, #20]	; (800578c <prvInitialiseTaskLists+0x68>)
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000898 	.word	0x20000898
 8005788:	20000cf8 	.word	0x20000cf8
 800578c:	20000d0c 	.word	0x20000d0c
 8005790:	20000d28 	.word	0x20000d28
 8005794:	20000d3c 	.word	0x20000d3c
 8005798:	20000d54 	.word	0x20000d54
 800579c:	20000d20 	.word	0x20000d20
 80057a0:	20000d24 	.word	0x20000d24

080057a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057aa:	e019      	b.n	80057e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057ac:	f000 fdd2 	bl	8006354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b0:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <prvCheckTasksWaitingTermination+0x50>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fd3b 	bl	8004238 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057c2:	4b0d      	ldr	r3, [pc, #52]	; (80057f8 <prvCheckTasksWaitingTermination+0x54>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <prvCheckTasksWaitingTermination+0x54>)
 80057ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <prvCheckTasksWaitingTermination+0x58>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	4a0a      	ldr	r2, [pc, #40]	; (80057fc <prvCheckTasksWaitingTermination+0x58>)
 80057d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057d6:	f000 fded 	bl	80063b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f810 	bl	8005800 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <prvCheckTasksWaitingTermination+0x58>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e1      	bne.n	80057ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000d3c 	.word	0x20000d3c
 80057f8:	20000d68 	.word	0x20000d68
 80057fc:	20000d50 	.word	0x20000d50

08005800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800580e:	2b00      	cmp	r3, #0
 8005810:	d108      	bne.n	8005824 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	4618      	mov	r0, r3
 8005818:	f000 ff8a 	bl	8006730 <vPortFree>
				vPortFree( pxTCB );
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 ff87 	bl	8006730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005822:	e018      	b.n	8005856 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800582a:	2b01      	cmp	r3, #1
 800582c:	d103      	bne.n	8005836 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 ff7e 	bl	8006730 <vPortFree>
	}
 8005834:	e00f      	b.n	8005856 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800583c:	2b02      	cmp	r3, #2
 800583e:	d00a      	beq.n	8005856 <prvDeleteTCB+0x56>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <prvDeleteTCB+0x54>
	}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <prvResetNextTaskUnblockTime+0x38>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005870:	4b0a      	ldr	r3, [pc, #40]	; (800589c <prvResetNextTaskUnblockTime+0x3c>)
 8005872:	f04f 32ff 	mov.w	r2, #4294967295
 8005876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005878:	e008      	b.n	800588c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b07      	ldr	r3, [pc, #28]	; (8005898 <prvResetNextTaskUnblockTime+0x38>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a04      	ldr	r2, [pc, #16]	; (800589c <prvResetNextTaskUnblockTime+0x3c>)
 800588a:	6013      	str	r3, [r2, #0]
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000d20 	.word	0x20000d20
 800589c:	20000d88 	.word	0x20000d88

080058a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058a6:	4b0b      	ldr	r3, [pc, #44]	; (80058d4 <xTaskGetSchedulerState+0x34>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ae:	2301      	movs	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	e008      	b.n	80058c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <xTaskGetSchedulerState+0x38>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058bc:	2302      	movs	r3, #2
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	e001      	b.n	80058c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058c6:	687b      	ldr	r3, [r7, #4]
	}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	20000d74 	.word	0x20000d74
 80058d8:	20000d90 	.word	0x20000d90

080058dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058e8:	2300      	movs	r3, #0
 80058ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d056      	beq.n	80059a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <xTaskPriorityDisinherit+0xd0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d00a      	beq.n	8005912 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10a      	bne.n	8005930 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	60bb      	str	r3, [r7, #8]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	429a      	cmp	r2, r3
 8005944:	d02c      	beq.n	80059a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d128      	bne.n	80059a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3304      	adds	r3, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fc70 	bl	8004238 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xTaskPriorityDisinherit+0xd4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d903      	bls.n	8005980 <xTaskPriorityDisinherit+0xa4>
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <xTaskPriorityDisinherit+0xd4>)
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4613      	mov	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4a09      	ldr	r2, [pc, #36]	; (80059b4 <xTaskPriorityDisinherit+0xd8>)
 800598e:	441a      	add	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	3304      	adds	r3, #4
 8005994:	4619      	mov	r1, r3
 8005996:	4610      	mov	r0, r2
 8005998:	f7fe fbf1 	bl	800417e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059a0:	697b      	ldr	r3, [r7, #20]
	}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000894 	.word	0x20000894
 80059b0:	20000d70 	.word	0x20000d70
 80059b4:	20000898 	.word	0x20000898

080059b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059c2:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <prvAddCurrentTaskToDelayedList+0x90>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe fc32 	bl	8004238 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d10a      	bne.n	80059f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e2:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4819      	ldr	r0, [pc, #100]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x98>)
 80059ec:	f7fe fbc7 	bl	800417e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059f0:	e026      	b.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4413      	add	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d209      	bcs.n	8005a1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b0f      	ldr	r3, [pc, #60]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f7fe fbd5 	bl	80041c6 <vListInsert>
}
 8005a1c:	e010      	b.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe fbcb 	bl	80041c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a30:	4b0a      	ldr	r3, [pc, #40]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d202      	bcs.n	8005a40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a3a:	4a08      	ldr	r2, [pc, #32]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000d6c 	.word	0x20000d6c
 8005a4c:	20000894 	.word	0x20000894
 8005a50:	20000d54 	.word	0x20000d54
 8005a54:	20000d24 	.word	0x20000d24
 8005a58:	20000d20 	.word	0x20000d20
 8005a5c:	20000d88 	.word	0x20000d88

08005a60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	; 0x28
 8005a64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a6a:	f000 fb07 	bl	800607c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a6e:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <xTimerCreateTimerTask+0x80>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d021      	beq.n	8005aba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	f107 0108 	add.w	r1, r7, #8
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe fb31 	bl	80040f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	9202      	str	r2, [sp, #8]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	2302      	movs	r3, #2
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	460a      	mov	r2, r1
 8005aa0:	4910      	ldr	r1, [pc, #64]	; (8005ae4 <xTimerCreateTimerTask+0x84>)
 8005aa2:	4811      	ldr	r0, [pc, #68]	; (8005ae8 <xTimerCreateTimerTask+0x88>)
 8005aa4:	f7ff f8de 	bl	8004c64 <xTaskCreateStatic>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <xTimerCreateTimerTask+0x8c>)
 8005aac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <xTimerCreateTimerTask+0x8c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10a      	bne.n	8005ad6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
 8005ad4:	e7fe      	b.n	8005ad4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ad6:	697b      	ldr	r3, [r7, #20]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	20000dc4 	.word	0x20000dc4
 8005ae4:	08007e44 	.word	0x08007e44
 8005ae8:	08005c25 	.word	0x08005c25
 8005aec:	20000dc8 	.word	0x20000dc8

08005af0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	623b      	str	r3, [r7, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b1e:	4b1a      	ldr	r3, [pc, #104]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d02a      	beq.n	8005b7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	dc18      	bgt.n	8005b6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b38:	f7ff feb2 	bl	80058a0 <xTaskGetSchedulerState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d109      	bne.n	8005b56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f107 0110 	add.w	r1, r7, #16
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4e:	f7fe fca1 	bl	8004494 <xQueueGenericSend>
 8005b52:	6278      	str	r0, [r7, #36]	; 0x24
 8005b54:	e012      	b.n	8005b7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f107 0110 	add.w	r1, r7, #16
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2200      	movs	r2, #0
 8005b62:	f7fe fc97 	bl	8004494 <xQueueGenericSend>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24
 8005b68:	e008      	b.n	8005b7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <xTimerGenericCommand+0x98>)
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	f107 0110 	add.w	r1, r7, #16
 8005b72:	2300      	movs	r3, #0
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f7fe fd8b 	bl	8004690 <xQueueGenericSendFromISR>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3728      	adds	r7, #40	; 0x28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000dc4 	.word	0x20000dc4

08005b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <prvProcessExpiredTimer+0x94>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fb47 	bl	8004238 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d022      	beq.n	8005bfe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	18d1      	adds	r1, r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f000 f8d1 	bl	8005d6c <prvInsertTimerInActiveList>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01f      	beq.n	8005c10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff88 	bl	8005af0 <xTimerGenericCommand>
 8005be0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d113      	bne.n	8005c10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	6978      	ldr	r0, [r7, #20]
 8005c16:	4798      	blx	r3
}
 8005c18:	bf00      	nop
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000dbc 	.word	0x20000dbc

08005c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f857 	bl	8005ce4 <prvGetNextExpireTime>
 8005c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f803 	bl	8005c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c42:	f000 f8d5 	bl	8005df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c46:	e7f1      	b.n	8005c2c <prvTimerTask+0x8>

08005c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c52:	f7ff fa43 	bl	80050dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f866 	bl	8005d2c <prvSampleTimeNow>
 8005c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d130      	bne.n	8005cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d806      	bhi.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c76:	f7ff fa3f 	bl	80050f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff85 	bl	8005b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c82:	e024      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <prvProcessTimerOrBlockTask+0x90>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <prvProcessTimerOrBlockTask+0x50>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <prvProcessTimerOrBlockTask+0x52>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <prvProcessTimerOrBlockTask+0x94>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f7fe ffa7 	bl	8004bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f7ff fa23 	bl	80050f8 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <prvProcessTimerOrBlockTask+0x98>)
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	f3bf 8f6f 	isb	sy
}
 8005cc8:	e001      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cca:	f7ff fa15 	bl	80050f8 <xTaskResumeAll>
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000dc0 	.word	0x20000dc0
 8005cdc:	20000dc4 	.word	0x20000dc4
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <prvGetNextExpireTime+0x16>
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	e000      	b.n	8005cfc <prvGetNextExpireTime+0x18>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e001      	b.n	8005d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000dbc 	.word	0x20000dbc

08005d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d34:	f7ff fa7e 	bl	8005234 <xTaskGetTickCount>
 8005d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d205      	bcs.n	8005d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d44:	f000 f936 	bl	8005fb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000dcc 	.word	0x20000dcc

08005d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d812      	bhi.n	8005db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e01b      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <prvInsertTimerInActiveList+0x7c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fe fa08 	bl	80041c6 <vListInsert>
 8005db6:	e012      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d206      	bcs.n	8005dce <prvInsertTimerInActiveList+0x62>
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e007      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvInsertTimerInActiveList+0x80>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fe f9f4 	bl	80041c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dde:	697b      	ldr	r3, [r7, #20]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000dc0 	.word	0x20000dc0
 8005dec:	20000dbc 	.word	0x20000dbc

08005df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08e      	sub	sp, #56	; 0x38
 8005df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005df6:	e0ca      	b.n	8005f8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da18      	bge.n	8005e30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	3304      	adds	r3, #4
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	61fb      	str	r3, [r7, #28]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e26:	6850      	ldr	r0, [r2, #4]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	6892      	ldr	r2, [r2, #8]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f2c0 80aa 	blt.w	8005f8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	3304      	adds	r3, #4
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe f9f5 	bl	8004238 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e4e:	463b      	mov	r3, r7
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7ff ff6b 	bl	8005d2c <prvSampleTimeNow>
 8005e56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b09      	cmp	r3, #9
 8005e5c:	f200 8097 	bhi.w	8005f8e <prvProcessReceivedCommands+0x19e>
 8005e60:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <prvProcessReceivedCommands+0x78>)
 8005e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e66:	bf00      	nop
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e91 	.word	0x08005e91
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005f05 	.word	0x08005f05
 8005e78:	08005f19 	.word	0x08005f19
 8005e7c:	08005f63 	.word	0x08005f63
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005e91 	.word	0x08005e91
 8005e88:	08005f05 	.word	0x08005f05
 8005e8c:	08005f19 	.word	0x08005f19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	18d1      	adds	r1, r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb0:	f7ff ff5c 	bl	8005d6c <prvInsertTimerInActiveList>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d069      	beq.n	8005f8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d05e      	beq.n	8005f8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	2300      	movs	r3, #0
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	2300      	movs	r3, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f7ff fe05 	bl	8005af0 <xTimerGenericCommand>
 8005ee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d14f      	bne.n	8005f8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	61bb      	str	r3, [r7, #24]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f16:	e03a      	b.n	8005f8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f1e:	f043 0301 	orr.w	r3, r3, #1
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	617b      	str	r3, [r7, #20]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	18d1      	adds	r1, r2, r3
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f5c:	f7ff ff06 	bl	8005d6c <prvInsertTimerInActiveList>
					break;
 8005f60:	e015      	b.n	8005f8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f72:	f000 fbdd 	bl	8006730 <vPortFree>
 8005f76:	e00a      	b.n	8005f8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f8a:	e000      	b.n	8005f8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f8e:	4b08      	ldr	r3, [pc, #32]	; (8005fb0 <prvProcessReceivedCommands+0x1c0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	1d39      	adds	r1, r7, #4
 8005f94:	2200      	movs	r2, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fe fc16 	bl	80047c8 <xQueueReceive>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f47f af2a 	bne.w	8005df8 <prvProcessReceivedCommands+0x8>
	}
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	3730      	adds	r7, #48	; 0x30
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20000dc4 	.word	0x20000dc4

08005fb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fba:	e048      	b.n	800604e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fbc:	4b2d      	ldr	r3, [pc, #180]	; (8006074 <prvSwitchTimerLists+0xc0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <prvSwitchTimerLists+0xc0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe f92f 	bl	8004238 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d02e      	beq.n	800604e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d90e      	bls.n	8006020 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800600e:	4b19      	ldr	r3, [pc, #100]	; (8006074 <prvSwitchTimerLists+0xc0>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	4610      	mov	r0, r2
 800601a:	f7fe f8d4 	bl	80041c6 <vListInsert>
 800601e:	e016      	b.n	800604e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	2300      	movs	r3, #0
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	2100      	movs	r1, #0
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fd60 	bl	8005af0 <xTimerGenericCommand>
 8006030:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	603b      	str	r3, [r7, #0]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <prvSwitchTimerLists+0xc0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1b1      	bne.n	8005fbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <prvSwitchTimerLists+0xc0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <prvSwitchTimerLists+0xc4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a04      	ldr	r2, [pc, #16]	; (8006074 <prvSwitchTimerLists+0xc0>)
 8006064:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <prvSwitchTimerLists+0xc4>)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000dbc 	.word	0x20000dbc
 8006078:	20000dc0 	.word	0x20000dc0

0800607c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006082:	f000 f967 	bl	8006354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <prvCheckForValidListAndQueue+0x60>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d120      	bne.n	80060d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800608e:	4814      	ldr	r0, [pc, #80]	; (80060e0 <prvCheckForValidListAndQueue+0x64>)
 8006090:	f7fe f848 	bl	8004124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006094:	4813      	ldr	r0, [pc, #76]	; (80060e4 <prvCheckForValidListAndQueue+0x68>)
 8006096:	f7fe f845 	bl	8004124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800609a:	4b13      	ldr	r3, [pc, #76]	; (80060e8 <prvCheckForValidListAndQueue+0x6c>)
 800609c:	4a10      	ldr	r2, [pc, #64]	; (80060e0 <prvCheckForValidListAndQueue+0x64>)
 800609e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <prvCheckForValidListAndQueue+0x70>)
 80060a2:	4a10      	ldr	r2, [pc, #64]	; (80060e4 <prvCheckForValidListAndQueue+0x68>)
 80060a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060a6:	2300      	movs	r3, #0
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	4b11      	ldr	r3, [pc, #68]	; (80060f0 <prvCheckForValidListAndQueue+0x74>)
 80060ac:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <prvCheckForValidListAndQueue+0x78>)
 80060ae:	2110      	movs	r1, #16
 80060b0:	200a      	movs	r0, #10
 80060b2:	f7fe f953 	bl	800435c <xQueueGenericCreateStatic>
 80060b6:	4603      	mov	r3, r0
 80060b8:	4a08      	ldr	r2, [pc, #32]	; (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <prvCheckForValidListAndQueue+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	490b      	ldr	r1, [pc, #44]	; (80060f8 <prvCheckForValidListAndQueue+0x7c>)
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fd6c 	bl	8004ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f000 f970 	bl	80063b4 <vPortExitCritical>
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20000dc4 	.word	0x20000dc4
 80060e0:	20000d94 	.word	0x20000d94
 80060e4:	20000da8 	.word	0x20000da8
 80060e8:	20000dbc 	.word	0x20000dbc
 80060ec:	20000dc0 	.word	0x20000dc0
 80060f0:	20000e70 	.word	0x20000e70
 80060f4:	20000dd0 	.word	0x20000dd0
 80060f8:	08007e4c 	.word	0x08007e4c

080060fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b04      	subs	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b04      	subs	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b04      	subs	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800612c:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <pxPortInitialiseStack+0x64>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3b14      	subs	r3, #20
 8006136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b04      	subs	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f06f 0202 	mvn.w	r2, #2
 800614a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3b20      	subs	r3, #32
 8006150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	08006165 	.word	0x08006165

08006164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <prvTaskExitError+0x54>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d00a      	beq.n	800618e <prvTaskExitError+0x2a>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	60fb      	str	r3, [r7, #12]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <prvTaskExitError+0x28>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60bb      	str	r3, [r7, #8]
}
 80061a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a2:	bf00      	nop
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0fc      	beq.n	80061a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	20000010 	.word	0x20000010
 80061bc:	00000000 	.word	0x00000000

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	4770      	bx	lr
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst2>:
 80061e0:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e8:	4808      	ldr	r0, [pc, #32]	; (800620c <prvPortStartFirstTask+0x24>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8814 	msr	CONTROL, r0
 80061fa:	b662      	cpsie	i
 80061fc:	b661      	cpsie	f
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	df00      	svc	0
 8006208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800620a:	bf00      	nop
 800620c:	e000ed08 	.word	0xe000ed08

08006210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006216:	4b46      	ldr	r3, [pc, #280]	; (8006330 <xPortStartScheduler+0x120>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a46      	ldr	r2, [pc, #280]	; (8006334 <xPortStartScheduler+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d10a      	bne.n	8006236 <xPortStartScheduler+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	613b      	str	r3, [r7, #16]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006236:	4b3e      	ldr	r3, [pc, #248]	; (8006330 <xPortStartScheduler+0x120>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <xPortStartScheduler+0x128>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10a      	bne.n	8006256 <xPortStartScheduler+0x46>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <xPortStartScheduler+0x12c>)
 8006258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	b2db      	uxtb	r3, r3
 8006274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006278:	b2da      	uxtb	r2, r3
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <xPortStartScheduler+0x130>)
 800627c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800627e:	4b31      	ldr	r3, [pc, #196]	; (8006344 <xPortStartScheduler+0x134>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006284:	e009      	b.n	800629a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <xPortStartScheduler+0x134>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3b01      	subs	r3, #1
 800628c:	4a2d      	ldr	r2, [pc, #180]	; (8006344 <xPortStartScheduler+0x134>)
 800628e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	b2db      	uxtb	r3, r3
 8006298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a2:	2b80      	cmp	r3, #128	; 0x80
 80062a4:	d0ef      	beq.n	8006286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062a6:	4b27      	ldr	r3, [pc, #156]	; (8006344 <xPortStartScheduler+0x134>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1c3 0307 	rsb	r3, r3, #7
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d00a      	beq.n	80062c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80062b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b6:	f383 8811 	msr	BASEPRI, r3
 80062ba:	f3bf 8f6f 	isb	sy
 80062be:	f3bf 8f4f 	dsb	sy
 80062c2:	60bb      	str	r3, [r7, #8]
}
 80062c4:	bf00      	nop
 80062c6:	e7fe      	b.n	80062c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062c8:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <xPortStartScheduler+0x134>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	4a1d      	ldr	r2, [pc, #116]	; (8006344 <xPortStartScheduler+0x134>)
 80062d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <xPortStartScheduler+0x134>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <xPortStartScheduler+0x134>)
 80062dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062e6:	4b18      	ldr	r3, [pc, #96]	; (8006348 <xPortStartScheduler+0x138>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a17      	ldr	r2, [pc, #92]	; (8006348 <xPortStartScheduler+0x138>)
 80062ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80062f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062f2:	4b15      	ldr	r3, [pc, #84]	; (8006348 <xPortStartScheduler+0x138>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a14      	ldr	r2, [pc, #80]	; (8006348 <xPortStartScheduler+0x138>)
 80062f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062fe:	f000 f8dd 	bl	80064bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006302:	4b12      	ldr	r3, [pc, #72]	; (800634c <xPortStartScheduler+0x13c>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006308:	f000 f8fc 	bl	8006504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800630c:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xPortStartScheduler+0x140>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0f      	ldr	r2, [pc, #60]	; (8006350 <xPortStartScheduler+0x140>)
 8006312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006318:	f7ff ff66 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800631c:	f7ff f854 	bl	80053c8 <vTaskSwitchContext>
	prvTaskExitError();
 8006320:	f7ff ff20 	bl	8006164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed00 	.word	0xe000ed00
 8006334:	410fc271 	.word	0x410fc271
 8006338:	410fc270 	.word	0x410fc270
 800633c:	e000e400 	.word	0xe000e400
 8006340:	20000ec0 	.word	0x20000ec0
 8006344:	20000ec4 	.word	0x20000ec4
 8006348:	e000ed20 	.word	0xe000ed20
 800634c:	20000010 	.word	0x20000010
 8006350:	e000ef34 	.word	0xe000ef34

08006354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800636e:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <vPortEnterCritical+0x58>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <vPortEnterCritical+0x58>)
 8006376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006378:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <vPortEnterCritical+0x58>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10f      	bne.n	80063a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <vPortEnterCritical+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	603b      	str	r3, [r7, #0]
}
 800639c:	bf00      	nop
 800639e:	e7fe      	b.n	800639e <vPortEnterCritical+0x4a>
	}
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	20000010 	.word	0x20000010
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063ba:	4b12      	ldr	r3, [pc, #72]	; (8006404 <vPortExitCritical+0x50>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vPortExitCritical+0x24>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	607b      	str	r3, [r7, #4]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063d8:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <vPortExitCritical+0x50>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	4a09      	ldr	r2, [pc, #36]	; (8006404 <vPortExitCritical+0x50>)
 80063e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063e2:	4b08      	ldr	r3, [pc, #32]	; (8006404 <vPortExitCritical+0x50>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d105      	bne.n	80063f6 <vPortExitCritical+0x42>
 80063ea:	2300      	movs	r3, #0
 80063ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	f383 8811 	msr	BASEPRI, r3
}
 80063f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000010 	.word	0x20000010
	...

08006410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	f380 8811 	msr	BASEPRI, r0
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f7fe ffc2 	bl	80053c8 <vTaskSwitchContext>
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f380 8811 	msr	BASEPRI, r0
 800644c:	bc09      	pop	{r0, r3}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	f01e 0f10 	tst.w	lr, #16
 800645a:	bf08      	it	eq
 800645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006460:	f380 8809 	msr	PSP, r0
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst>:
 8006470:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006474:	bf00      	nop
 8006476:	bf00      	nop

08006478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006492:	f7fe fedf 	bl	8005254 <xTaskIncrementTick>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d003      	beq.n	80064a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800649c:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <xPortSysTickHandler+0x40>)
 800649e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f383 8811 	msr	BASEPRI, r3
}
 80064ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <vPortSetupTimerInterrupt+0x38>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <vPortSetupTimerInterrupt+0x3c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <vPortSetupTimerInterrupt+0x40>)
 80064d2:	fba2 2303 	umull	r2, r3, r2, r3
 80064d6:	099b      	lsrs	r3, r3, #6
 80064d8:	4a09      	ldr	r2, [pc, #36]	; (8006500 <vPortSetupTimerInterrupt+0x44>)
 80064da:	3b01      	subs	r3, #1
 80064dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <vPortSetupTimerInterrupt+0x34>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e010 	.word	0xe000e010
 80064f4:	e000e018 	.word	0xe000e018
 80064f8:	20000004 	.word	0x20000004
 80064fc:	10624dd3 	.word	0x10624dd3
 8006500:	e000e014 	.word	0xe000e014

08006504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006514 <vPortEnableVFP+0x10>
 8006508:	6801      	ldr	r1, [r0, #0]
 800650a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800650e:	6001      	str	r1, [r0, #0]
 8006510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006512:	bf00      	nop
 8006514:	e000ed88 	.word	0xe000ed88

08006518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800651e:	f3ef 8305 	mrs	r3, IPSR
 8006522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b0f      	cmp	r3, #15
 8006528:	d914      	bls.n	8006554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <vPortValidateInterruptPriority+0x70>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <vPortValidateInterruptPriority+0x74>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	7afa      	ldrb	r2, [r7, #11]
 800653a:	429a      	cmp	r2, r3
 800653c:	d20a      	bcs.n	8006554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	607b      	str	r3, [r7, #4]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006554:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <vPortValidateInterruptPriority+0x78>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <vPortValidateInterruptPriority+0x7c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d90a      	bls.n	800657a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	603b      	str	r3, [r7, #0]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <vPortValidateInterruptPriority+0x60>
	}
 800657a:	bf00      	nop
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	e000e3f0 	.word	0xe000e3f0
 800658c:	20000ec0 	.word	0x20000ec0
 8006590:	e000ed0c 	.word	0xe000ed0c
 8006594:	20000ec4 	.word	0x20000ec4

08006598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08a      	sub	sp, #40	; 0x28
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80065a4:	f7fe fd9a 	bl	80050dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80065a8:	4b5b      	ldr	r3, [pc, #364]	; (8006718 <pvPortMalloc+0x180>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80065b0:	f000 f920 	bl	80067f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065b4:	4b59      	ldr	r3, [pc, #356]	; (800671c <pvPortMalloc+0x184>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 8093 	bne.w	80066e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01d      	beq.n	8006604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80065c8:	2208      	movs	r2, #8
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d014      	beq.n	8006604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f023 0307 	bic.w	r3, r3, #7
 80065e0:	3308      	adds	r3, #8
 80065e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f003 0307 	and.w	r3, r3, #7
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <pvPortMalloc+0x6c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d06e      	beq.n	80066e8 <pvPortMalloc+0x150>
 800660a:	4b45      	ldr	r3, [pc, #276]	; (8006720 <pvPortMalloc+0x188>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d869      	bhi.n	80066e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006614:	4b43      	ldr	r3, [pc, #268]	; (8006724 <pvPortMalloc+0x18c>)
 8006616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006618:	4b42      	ldr	r3, [pc, #264]	; (8006724 <pvPortMalloc+0x18c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800661e:	e004      	b.n	800662a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d903      	bls.n	800663c <pvPortMalloc+0xa4>
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f1      	bne.n	8006620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800663c:	4b36      	ldr	r3, [pc, #216]	; (8006718 <pvPortMalloc+0x180>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006642:	429a      	cmp	r2, r3
 8006644:	d050      	beq.n	80066e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2208      	movs	r2, #8
 800664c:	4413      	add	r3, r2
 800664e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	6a3b      	ldr	r3, [r7, #32]
 8006656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	2308      	movs	r3, #8
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	429a      	cmp	r2, r3
 8006666:	d91f      	bls.n	80066a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <pvPortMalloc+0xf8>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	613b      	str	r3, [r7, #16]
}
 800668c:	bf00      	nop
 800668e:	e7fe      	b.n	800668e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad2      	subs	r2, r2, r3
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80066a2:	69b8      	ldr	r0, [r7, #24]
 80066a4:	f000 f908 	bl	80068b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80066a8:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <pvPortMalloc+0x188>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <pvPortMalloc+0x188>)
 80066b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80066b6:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <pvPortMalloc+0x188>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <pvPortMalloc+0x190>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d203      	bcs.n	80066ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <pvPortMalloc+0x188>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a18      	ldr	r2, [pc, #96]	; (8006728 <pvPortMalloc+0x190>)
 80066c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <pvPortMalloc+0x184>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <pvPortMalloc+0x194>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a11      	ldr	r2, [pc, #68]	; (800672c <pvPortMalloc+0x194>)
 80066e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066e8:	f7fe fd06 	bl	80050f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0307 	and.w	r3, r3, #7
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <pvPortMalloc+0x174>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	60fb      	str	r3, [r7, #12]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <pvPortMalloc+0x172>
	return pvReturn;
 800670c:	69fb      	ldr	r3, [r7, #28]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3728      	adds	r7, #40	; 0x28
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20001e70 	.word	0x20001e70
 800671c:	20001e84 	.word	0x20001e84
 8006720:	20001e74 	.word	0x20001e74
 8006724:	20001e68 	.word	0x20001e68
 8006728:	20001e78 	.word	0x20001e78
 800672c:	20001e7c 	.word	0x20001e7c

08006730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d04d      	beq.n	80067de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006742:	2308      	movs	r3, #8
 8006744:	425b      	negs	r3, r3
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4413      	add	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <vPortFree+0xb8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4013      	ands	r3, r2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <vPortFree+0x44>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <vPortFree+0x62>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	60bb      	str	r3, [r7, #8]
}
 800678e:	bf00      	nop
 8006790:	e7fe      	b.n	8006790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <vPortFree+0xb8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01e      	beq.n	80067de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11a      	bne.n	80067de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <vPortFree+0xb8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	401a      	ands	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80067b8:	f7fe fc90 	bl	80050dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <vPortFree+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4413      	add	r3, r2
 80067c6:	4a09      	ldr	r2, [pc, #36]	; (80067ec <vPortFree+0xbc>)
 80067c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80067ca:	6938      	ldr	r0, [r7, #16]
 80067cc:	f000 f874 	bl	80068b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <vPortFree+0xc0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3301      	adds	r3, #1
 80067d6:	4a06      	ldr	r2, [pc, #24]	; (80067f0 <vPortFree+0xc0>)
 80067d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80067da:	f7fe fc8d 	bl	80050f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80067de:	bf00      	nop
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20001e84 	.word	0x20001e84
 80067ec:	20001e74 	.word	0x20001e74
 80067f0:	20001e80 	.word	0x20001e80

080067f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067fa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80067fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006800:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <prvHeapInit+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0307 	bic.w	r3, r3, #7
 800681a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	4a1f      	ldr	r2, [pc, #124]	; (80068a0 <prvHeapInit+0xac>)
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <prvHeapInit+0xb0>)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <prvHeapInit+0xb0>)
 8006834:	2200      	movs	r2, #0
 8006836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006840:	2208      	movs	r2, #8
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0307 	bic.w	r3, r3, #7
 800684e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <prvHeapInit+0xb4>)
 8006854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006856:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <prvHeapInit+0xb4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2200      	movs	r2, #0
 800685c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <prvHeapInit+0xb4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvHeapInit+0xb4>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a0a      	ldr	r2, [pc, #40]	; (80068ac <prvHeapInit+0xb8>)
 8006882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <prvHeapInit+0xbc>)
 800688a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800688c:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <prvHeapInit+0xc0>)
 800688e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006892:	601a      	str	r2, [r3, #0]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000ec8 	.word	0x20000ec8
 80068a4:	20001e68 	.word	0x20001e68
 80068a8:	20001e70 	.word	0x20001e70
 80068ac:	20001e78 	.word	0x20001e78
 80068b0:	20001e74 	.word	0x20001e74
 80068b4:	20001e84 	.word	0x20001e84

080068b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <prvInsertBlockIntoFreeList+0xac>)
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e002      	b.n	80068cc <prvInsertBlockIntoFreeList+0x14>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d8f7      	bhi.n	80068c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d108      	bne.n	80068fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	441a      	add	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d118      	bne.n	8006940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d00d      	beq.n	8006936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	441a      	add	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	e008      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <prvInsertBlockIntoFreeList+0xb0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e003      	b.n	8006948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d002      	beq.n	8006956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20001e68 	.word	0x20001e68
 8006968:	20001e70 	.word	0x20001e70

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	; (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000014 	.word	0x20000014

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4d0d      	ldr	r5, [pc, #52]	; (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	; (80069b4 <__libc_init_array+0x3c>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2600      	movs	r6, #0
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4d0b      	ldr	r5, [pc, #44]	; (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	; (80069bc <__libc_init_array+0x44>)
 800698c:	f001 fa20 	bl	8007dd0 <_init>
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2600      	movs	r6, #0
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	080080a0 	.word	0x080080a0
 80069b4:	080080a0 	.word	0x080080a0
 80069b8:	080080a0 	.word	0x080080a0
 80069bc:	080080a4 	.word	0x080080a4

080069c0 <memcpy>:
 80069c0:	440a      	add	r2, r1
 80069c2:	4291      	cmp	r1, r2
 80069c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069c8:	d100      	bne.n	80069cc <memcpy+0xc>
 80069ca:	4770      	bx	lr
 80069cc:	b510      	push	{r4, lr}
 80069ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d6:	4291      	cmp	r1, r2
 80069d8:	d1f9      	bne.n	80069ce <memcpy+0xe>
 80069da:	bd10      	pop	{r4, pc}

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <_puts_r>:
 80069ec:	b570      	push	{r4, r5, r6, lr}
 80069ee:	460e      	mov	r6, r1
 80069f0:	4605      	mov	r5, r0
 80069f2:	b118      	cbz	r0, 80069fc <_puts_r+0x10>
 80069f4:	6983      	ldr	r3, [r0, #24]
 80069f6:	b90b      	cbnz	r3, 80069fc <_puts_r+0x10>
 80069f8:	f000 fadc 	bl	8006fb4 <__sinit>
 80069fc:	69ab      	ldr	r3, [r5, #24]
 80069fe:	68ac      	ldr	r4, [r5, #8]
 8006a00:	b913      	cbnz	r3, 8006a08 <_puts_r+0x1c>
 8006a02:	4628      	mov	r0, r5
 8006a04:	f000 fad6 	bl	8006fb4 <__sinit>
 8006a08:	4b2c      	ldr	r3, [pc, #176]	; (8006abc <_puts_r+0xd0>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d120      	bne.n	8006a50 <_puts_r+0x64>
 8006a0e:	686c      	ldr	r4, [r5, #4]
 8006a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a12:	07db      	lsls	r3, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_puts_r+0x36>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	0598      	lsls	r0, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_puts_r+0x36>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f000 fb67 	bl	80070f0 <__retarget_lock_acquire_recursive>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	0719      	lsls	r1, r3, #28
 8006a26:	d51d      	bpl.n	8006a64 <_puts_r+0x78>
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	b1db      	cbz	r3, 8006a64 <_puts_r+0x78>
 8006a2c:	3e01      	subs	r6, #1
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a34:	3b01      	subs	r3, #1
 8006a36:	60a3      	str	r3, [r4, #8]
 8006a38:	bb39      	cbnz	r1, 8006a8a <_puts_r+0x9e>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	da38      	bge.n	8006ab0 <_puts_r+0xc4>
 8006a3e:	4622      	mov	r2, r4
 8006a40:	210a      	movs	r1, #10
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f8ba 	bl	8006bbc <__swbuf_r>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d011      	beq.n	8006a70 <_puts_r+0x84>
 8006a4c:	250a      	movs	r5, #10
 8006a4e:	e011      	b.n	8006a74 <_puts_r+0x88>
 8006a50:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <_puts_r+0xd4>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <_puts_r+0x6e>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7da      	b.n	8006a10 <_puts_r+0x24>
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ac4 <_puts_r+0xd8>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68ec      	ldreq	r4, [r5, #12]
 8006a62:	e7d5      	b.n	8006a10 <_puts_r+0x24>
 8006a64:	4621      	mov	r1, r4
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 f90c 	bl	8006c84 <__swsetup_r>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d0dd      	beq.n	8006a2c <_puts_r+0x40>
 8006a70:	f04f 35ff 	mov.w	r5, #4294967295
 8006a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d405      	bmi.n	8006a86 <_puts_r+0x9a>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	d402      	bmi.n	8006a86 <_puts_r+0x9a>
 8006a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a82:	f000 fb36 	bl	80070f2 <__retarget_lock_release_recursive>
 8006a86:	4628      	mov	r0, r5
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da04      	bge.n	8006a98 <_puts_r+0xac>
 8006a8e:	69a2      	ldr	r2, [r4, #24]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	dc06      	bgt.n	8006aa2 <_puts_r+0xb6>
 8006a94:	290a      	cmp	r1, #10
 8006a96:	d004      	beq.n	8006aa2 <_puts_r+0xb6>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	6022      	str	r2, [r4, #0]
 8006a9e:	7019      	strb	r1, [r3, #0]
 8006aa0:	e7c5      	b.n	8006a2e <_puts_r+0x42>
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f889 	bl	8006bbc <__swbuf_r>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d1bf      	bne.n	8006a2e <_puts_r+0x42>
 8006aae:	e7df      	b.n	8006a70 <_puts_r+0x84>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	250a      	movs	r5, #10
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	6022      	str	r2, [r4, #0]
 8006ab8:	701d      	strb	r5, [r3, #0]
 8006aba:	e7db      	b.n	8006a74 <_puts_r+0x88>
 8006abc:	08007f38 	.word	0x08007f38
 8006ac0:	08007f58 	.word	0x08007f58
 8006ac4:	08007f18 	.word	0x08007f18

08006ac8 <puts>:
 8006ac8:	4b02      	ldr	r3, [pc, #8]	; (8006ad4 <puts+0xc>)
 8006aca:	4601      	mov	r1, r0
 8006acc:	6818      	ldr	r0, [r3, #0]
 8006ace:	f7ff bf8d 	b.w	80069ec <_puts_r>
 8006ad2:	bf00      	nop
 8006ad4:	20000014 	.word	0x20000014

08006ad8 <siscanf>:
 8006ad8:	b40e      	push	{r1, r2, r3}
 8006ada:	b510      	push	{r4, lr}
 8006adc:	b09f      	sub	sp, #124	; 0x7c
 8006ade:	ac21      	add	r4, sp, #132	; 0x84
 8006ae0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006ae4:	f854 2b04 	ldr.w	r2, [r4], #4
 8006ae8:	9201      	str	r2, [sp, #4]
 8006aea:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006aee:	9004      	str	r0, [sp, #16]
 8006af0:	9008      	str	r0, [sp, #32]
 8006af2:	f7f9 fb77 	bl	80001e4 <strlen>
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <siscanf+0x50>)
 8006af8:	9005      	str	r0, [sp, #20]
 8006afa:	9009      	str	r0, [sp, #36]	; 0x24
 8006afc:	930d      	str	r3, [sp, #52]	; 0x34
 8006afe:	480b      	ldr	r0, [pc, #44]	; (8006b2c <siscanf+0x54>)
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	6800      	ldr	r0, [r0, #0]
 8006b04:	9403      	str	r4, [sp, #12]
 8006b06:	2300      	movs	r3, #0
 8006b08:	9311      	str	r3, [sp, #68]	; 0x44
 8006b0a:	9316      	str	r3, [sp, #88]	; 0x58
 8006b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b10:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006b14:	a904      	add	r1, sp, #16
 8006b16:	4623      	mov	r3, r4
 8006b18:	f000 fc9e 	bl	8007458 <__ssvfiscanf_r>
 8006b1c:	b01f      	add	sp, #124	; 0x7c
 8006b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b22:	b003      	add	sp, #12
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	08006b53 	.word	0x08006b53
 8006b2c:	20000014 	.word	0x20000014

08006b30 <__sread>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	460c      	mov	r4, r1
 8006b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b38:	f000 ff58 	bl	80079ec <_read_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	bfab      	itete	ge
 8006b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b42:	89a3      	ldrhlt	r3, [r4, #12]
 8006b44:	181b      	addge	r3, r3, r0
 8006b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b4a:	bfac      	ite	ge
 8006b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b4e:	81a3      	strhlt	r3, [r4, #12]
 8006b50:	bd10      	pop	{r4, pc}

08006b52 <__seofread>:
 8006b52:	2000      	movs	r0, #0
 8006b54:	4770      	bx	lr

08006b56 <__swrite>:
 8006b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b5a:	461f      	mov	r7, r3
 8006b5c:	898b      	ldrh	r3, [r1, #12]
 8006b5e:	05db      	lsls	r3, r3, #23
 8006b60:	4605      	mov	r5, r0
 8006b62:	460c      	mov	r4, r1
 8006b64:	4616      	mov	r6, r2
 8006b66:	d505      	bpl.n	8006b74 <__swrite+0x1e>
 8006b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f000 fac0 	bl	80070f4 <_lseek_r>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	4632      	mov	r2, r6
 8006b82:	463b      	mov	r3, r7
 8006b84:	4628      	mov	r0, r5
 8006b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8a:	f000 b869 	b.w	8006c60 <_write_r>

08006b8e <__sseek>:
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	460c      	mov	r4, r1
 8006b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b96:	f000 faad 	bl	80070f4 <_lseek_r>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	bf15      	itete	ne
 8006ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006baa:	81a3      	strheq	r3, [r4, #12]
 8006bac:	bf18      	it	ne
 8006bae:	81a3      	strhne	r3, [r4, #12]
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <__sclose>:
 8006bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb6:	f000 b8d3 	b.w	8006d60 <_close_r>
	...

08006bbc <__swbuf_r>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	460e      	mov	r6, r1
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	b118      	cbz	r0, 8006bce <__swbuf_r+0x12>
 8006bc6:	6983      	ldr	r3, [r0, #24]
 8006bc8:	b90b      	cbnz	r3, 8006bce <__swbuf_r+0x12>
 8006bca:	f000 f9f3 	bl	8006fb4 <__sinit>
 8006bce:	4b21      	ldr	r3, [pc, #132]	; (8006c54 <__swbuf_r+0x98>)
 8006bd0:	429c      	cmp	r4, r3
 8006bd2:	d12b      	bne.n	8006c2c <__swbuf_r+0x70>
 8006bd4:	686c      	ldr	r4, [r5, #4]
 8006bd6:	69a3      	ldr	r3, [r4, #24]
 8006bd8:	60a3      	str	r3, [r4, #8]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	071a      	lsls	r2, r3, #28
 8006bde:	d52f      	bpl.n	8006c40 <__swbuf_r+0x84>
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	b36b      	cbz	r3, 8006c40 <__swbuf_r+0x84>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	1ac0      	subs	r0, r0, r3
 8006bea:	6963      	ldr	r3, [r4, #20]
 8006bec:	b2f6      	uxtb	r6, r6
 8006bee:	4283      	cmp	r3, r0
 8006bf0:	4637      	mov	r7, r6
 8006bf2:	dc04      	bgt.n	8006bfe <__swbuf_r+0x42>
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f948 	bl	8006e8c <_fflush_r>
 8006bfc:	bb30      	cbnz	r0, 8006c4c <__swbuf_r+0x90>
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	60a3      	str	r3, [r4, #8]
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	6022      	str	r2, [r4, #0]
 8006c0a:	701e      	strb	r6, [r3, #0]
 8006c0c:	6963      	ldr	r3, [r4, #20]
 8006c0e:	3001      	adds	r0, #1
 8006c10:	4283      	cmp	r3, r0
 8006c12:	d004      	beq.n	8006c1e <__swbuf_r+0x62>
 8006c14:	89a3      	ldrh	r3, [r4, #12]
 8006c16:	07db      	lsls	r3, r3, #31
 8006c18:	d506      	bpl.n	8006c28 <__swbuf_r+0x6c>
 8006c1a:	2e0a      	cmp	r6, #10
 8006c1c:	d104      	bne.n	8006c28 <__swbuf_r+0x6c>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f933 	bl	8006e8c <_fflush_r>
 8006c26:	b988      	cbnz	r0, 8006c4c <__swbuf_r+0x90>
 8006c28:	4638      	mov	r0, r7
 8006c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <__swbuf_r+0x9c>)
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d101      	bne.n	8006c36 <__swbuf_r+0x7a>
 8006c32:	68ac      	ldr	r4, [r5, #8]
 8006c34:	e7cf      	b.n	8006bd6 <__swbuf_r+0x1a>
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <__swbuf_r+0xa0>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	bf08      	it	eq
 8006c3c:	68ec      	ldreq	r4, [r5, #12]
 8006c3e:	e7ca      	b.n	8006bd6 <__swbuf_r+0x1a>
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	f000 f81e 	bl	8006c84 <__swsetup_r>
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d0cb      	beq.n	8006be4 <__swbuf_r+0x28>
 8006c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c50:	e7ea      	b.n	8006c28 <__swbuf_r+0x6c>
 8006c52:	bf00      	nop
 8006c54:	08007f38 	.word	0x08007f38
 8006c58:	08007f58 	.word	0x08007f58
 8006c5c:	08007f18 	.word	0x08007f18

08006c60 <_write_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d07      	ldr	r5, [pc, #28]	; (8006c80 <_write_r+0x20>)
 8006c64:	4604      	mov	r4, r0
 8006c66:	4608      	mov	r0, r1
 8006c68:	4611      	mov	r1, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	602a      	str	r2, [r5, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f7f9 fc98 	bl	80005a4 <_write>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d102      	bne.n	8006c7e <_write_r+0x1e>
 8006c78:	682b      	ldr	r3, [r5, #0]
 8006c7a:	b103      	cbz	r3, 8006c7e <_write_r+0x1e>
 8006c7c:	6023      	str	r3, [r4, #0]
 8006c7e:	bd38      	pop	{r3, r4, r5, pc}
 8006c80:	20001e94 	.word	0x20001e94

08006c84 <__swsetup_r>:
 8006c84:	4b32      	ldr	r3, [pc, #200]	; (8006d50 <__swsetup_r+0xcc>)
 8006c86:	b570      	push	{r4, r5, r6, lr}
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	b125      	cbz	r5, 8006c9a <__swsetup_r+0x16>
 8006c90:	69ab      	ldr	r3, [r5, #24]
 8006c92:	b913      	cbnz	r3, 8006c9a <__swsetup_r+0x16>
 8006c94:	4628      	mov	r0, r5
 8006c96:	f000 f98d 	bl	8006fb4 <__sinit>
 8006c9a:	4b2e      	ldr	r3, [pc, #184]	; (8006d54 <__swsetup_r+0xd0>)
 8006c9c:	429c      	cmp	r4, r3
 8006c9e:	d10f      	bne.n	8006cc0 <__swsetup_r+0x3c>
 8006ca0:	686c      	ldr	r4, [r5, #4]
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ca8:	0719      	lsls	r1, r3, #28
 8006caa:	d42c      	bmi.n	8006d06 <__swsetup_r+0x82>
 8006cac:	06dd      	lsls	r5, r3, #27
 8006cae:	d411      	bmi.n	8006cd4 <__swsetup_r+0x50>
 8006cb0:	2309      	movs	r3, #9
 8006cb2:	6033      	str	r3, [r6, #0]
 8006cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cb8:	81a3      	strh	r3, [r4, #12]
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbe:	e03e      	b.n	8006d3e <__swsetup_r+0xba>
 8006cc0:	4b25      	ldr	r3, [pc, #148]	; (8006d58 <__swsetup_r+0xd4>)
 8006cc2:	429c      	cmp	r4, r3
 8006cc4:	d101      	bne.n	8006cca <__swsetup_r+0x46>
 8006cc6:	68ac      	ldr	r4, [r5, #8]
 8006cc8:	e7eb      	b.n	8006ca2 <__swsetup_r+0x1e>
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <__swsetup_r+0xd8>)
 8006ccc:	429c      	cmp	r4, r3
 8006cce:	bf08      	it	eq
 8006cd0:	68ec      	ldreq	r4, [r5, #12]
 8006cd2:	e7e6      	b.n	8006ca2 <__swsetup_r+0x1e>
 8006cd4:	0758      	lsls	r0, r3, #29
 8006cd6:	d512      	bpl.n	8006cfe <__swsetup_r+0x7a>
 8006cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cda:	b141      	cbz	r1, 8006cee <__swsetup_r+0x6a>
 8006cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce0:	4299      	cmp	r1, r3
 8006ce2:	d002      	beq.n	8006cea <__swsetup_r+0x66>
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f000 fa7d 	bl	80071e4 <_free_r>
 8006cea:	2300      	movs	r3, #0
 8006cec:	6363      	str	r3, [r4, #52]	; 0x34
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	6063      	str	r3, [r4, #4]
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f043 0308 	orr.w	r3, r3, #8
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	b94b      	cbnz	r3, 8006d1e <__swsetup_r+0x9a>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d14:	d003      	beq.n	8006d1e <__swsetup_r+0x9a>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f000 fa23 	bl	8007164 <__smakebuf_r>
 8006d1e:	89a0      	ldrh	r0, [r4, #12]
 8006d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d24:	f010 0301 	ands.w	r3, r0, #1
 8006d28:	d00a      	beq.n	8006d40 <__swsetup_r+0xbc>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60a3      	str	r3, [r4, #8]
 8006d2e:	6963      	ldr	r3, [r4, #20]
 8006d30:	425b      	negs	r3, r3
 8006d32:	61a3      	str	r3, [r4, #24]
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	b943      	cbnz	r3, 8006d4a <__swsetup_r+0xc6>
 8006d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d3c:	d1ba      	bne.n	8006cb4 <__swsetup_r+0x30>
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	0781      	lsls	r1, r0, #30
 8006d42:	bf58      	it	pl
 8006d44:	6963      	ldrpl	r3, [r4, #20]
 8006d46:	60a3      	str	r3, [r4, #8]
 8006d48:	e7f4      	b.n	8006d34 <__swsetup_r+0xb0>
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	e7f7      	b.n	8006d3e <__swsetup_r+0xba>
 8006d4e:	bf00      	nop
 8006d50:	20000014 	.word	0x20000014
 8006d54:	08007f38 	.word	0x08007f38
 8006d58:	08007f58 	.word	0x08007f58
 8006d5c:	08007f18 	.word	0x08007f18

08006d60 <_close_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d06      	ldr	r5, [pc, #24]	; (8006d7c <_close_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7f9 ff01 	bl	8000b72 <_close>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_close_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_close_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20001e94 	.word	0x20001e94

08006d80 <__sflush_r>:
 8006d80:	898a      	ldrh	r2, [r1, #12]
 8006d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	4605      	mov	r5, r0
 8006d88:	0710      	lsls	r0, r2, #28
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	d458      	bmi.n	8006e40 <__sflush_r+0xc0>
 8006d8e:	684b      	ldr	r3, [r1, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc05      	bgt.n	8006da0 <__sflush_r+0x20>
 8006d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dc02      	bgt.n	8006da0 <__sflush_r+0x20>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	d0f9      	beq.n	8006d9a <__sflush_r+0x1a>
 8006da6:	2300      	movs	r3, #0
 8006da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dac:	682f      	ldr	r7, [r5, #0]
 8006dae:	602b      	str	r3, [r5, #0]
 8006db0:	d032      	beq.n	8006e18 <__sflush_r+0x98>
 8006db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	075a      	lsls	r2, r3, #29
 8006db8:	d505      	bpl.n	8006dc6 <__sflush_r+0x46>
 8006dba:	6863      	ldr	r3, [r4, #4]
 8006dbc:	1ac0      	subs	r0, r0, r3
 8006dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dc0:	b10b      	cbz	r3, 8006dc6 <__sflush_r+0x46>
 8006dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc4:	1ac0      	subs	r0, r0, r3
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4602      	mov	r2, r0
 8006dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dcc:	6a21      	ldr	r1, [r4, #32]
 8006dce:	4628      	mov	r0, r5
 8006dd0:	47b0      	blx	r6
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	d106      	bne.n	8006de6 <__sflush_r+0x66>
 8006dd8:	6829      	ldr	r1, [r5, #0]
 8006dda:	291d      	cmp	r1, #29
 8006ddc:	d82c      	bhi.n	8006e38 <__sflush_r+0xb8>
 8006dde:	4a2a      	ldr	r2, [pc, #168]	; (8006e88 <__sflush_r+0x108>)
 8006de0:	40ca      	lsrs	r2, r1
 8006de2:	07d6      	lsls	r6, r2, #31
 8006de4:	d528      	bpl.n	8006e38 <__sflush_r+0xb8>
 8006de6:	2200      	movs	r2, #0
 8006de8:	6062      	str	r2, [r4, #4]
 8006dea:	04d9      	lsls	r1, r3, #19
 8006dec:	6922      	ldr	r2, [r4, #16]
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	d504      	bpl.n	8006dfc <__sflush_r+0x7c>
 8006df2:	1c42      	adds	r2, r0, #1
 8006df4:	d101      	bne.n	8006dfa <__sflush_r+0x7a>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b903      	cbnz	r3, 8006dfc <__sflush_r+0x7c>
 8006dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8006dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfe:	602f      	str	r7, [r5, #0]
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d0ca      	beq.n	8006d9a <__sflush_r+0x1a>
 8006e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e08:	4299      	cmp	r1, r3
 8006e0a:	d002      	beq.n	8006e12 <__sflush_r+0x92>
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f000 f9e9 	bl	80071e4 <_free_r>
 8006e12:	2000      	movs	r0, #0
 8006e14:	6360      	str	r0, [r4, #52]	; 0x34
 8006e16:	e7c1      	b.n	8006d9c <__sflush_r+0x1c>
 8006e18:	6a21      	ldr	r1, [r4, #32]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b0      	blx	r6
 8006e20:	1c41      	adds	r1, r0, #1
 8006e22:	d1c7      	bne.n	8006db4 <__sflush_r+0x34>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0c4      	beq.n	8006db4 <__sflush_r+0x34>
 8006e2a:	2b1d      	cmp	r3, #29
 8006e2c:	d001      	beq.n	8006e32 <__sflush_r+0xb2>
 8006e2e:	2b16      	cmp	r3, #22
 8006e30:	d101      	bne.n	8006e36 <__sflush_r+0xb6>
 8006e32:	602f      	str	r7, [r5, #0]
 8006e34:	e7b1      	b.n	8006d9a <__sflush_r+0x1a>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	e7ad      	b.n	8006d9c <__sflush_r+0x1c>
 8006e40:	690f      	ldr	r7, [r1, #16]
 8006e42:	2f00      	cmp	r7, #0
 8006e44:	d0a9      	beq.n	8006d9a <__sflush_r+0x1a>
 8006e46:	0793      	lsls	r3, r2, #30
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	bf08      	it	eq
 8006e4c:	694b      	ldreq	r3, [r1, #20]
 8006e4e:	600f      	str	r7, [r1, #0]
 8006e50:	bf18      	it	ne
 8006e52:	2300      	movne	r3, #0
 8006e54:	eba6 0807 	sub.w	r8, r6, r7
 8006e58:	608b      	str	r3, [r1, #8]
 8006e5a:	f1b8 0f00 	cmp.w	r8, #0
 8006e5e:	dd9c      	ble.n	8006d9a <__sflush_r+0x1a>
 8006e60:	6a21      	ldr	r1, [r4, #32]
 8006e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e64:	4643      	mov	r3, r8
 8006e66:	463a      	mov	r2, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b0      	blx	r6
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	dc06      	bgt.n	8006e7e <__sflush_r+0xfe>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e78e      	b.n	8006d9c <__sflush_r+0x1c>
 8006e7e:	4407      	add	r7, r0
 8006e80:	eba8 0800 	sub.w	r8, r8, r0
 8006e84:	e7e9      	b.n	8006e5a <__sflush_r+0xda>
 8006e86:	bf00      	nop
 8006e88:	20400001 	.word	0x20400001

08006e8c <_fflush_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	690b      	ldr	r3, [r1, #16]
 8006e90:	4605      	mov	r5, r0
 8006e92:	460c      	mov	r4, r1
 8006e94:	b913      	cbnz	r3, 8006e9c <_fflush_r+0x10>
 8006e96:	2500      	movs	r5, #0
 8006e98:	4628      	mov	r0, r5
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	b118      	cbz	r0, 8006ea6 <_fflush_r+0x1a>
 8006e9e:	6983      	ldr	r3, [r0, #24]
 8006ea0:	b90b      	cbnz	r3, 8006ea6 <_fflush_r+0x1a>
 8006ea2:	f000 f887 	bl	8006fb4 <__sinit>
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <_fflush_r+0x6c>)
 8006ea8:	429c      	cmp	r4, r3
 8006eaa:	d11b      	bne.n	8006ee4 <_fflush_r+0x58>
 8006eac:	686c      	ldr	r4, [r5, #4]
 8006eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0ef      	beq.n	8006e96 <_fflush_r+0xa>
 8006eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eb8:	07d0      	lsls	r0, r2, #31
 8006eba:	d404      	bmi.n	8006ec6 <_fflush_r+0x3a>
 8006ebc:	0599      	lsls	r1, r3, #22
 8006ebe:	d402      	bmi.n	8006ec6 <_fflush_r+0x3a>
 8006ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ec2:	f000 f915 	bl	80070f0 <__retarget_lock_acquire_recursive>
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	4621      	mov	r1, r4
 8006eca:	f7ff ff59 	bl	8006d80 <__sflush_r>
 8006ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ed0:	07da      	lsls	r2, r3, #31
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	d4e0      	bmi.n	8006e98 <_fflush_r+0xc>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	059b      	lsls	r3, r3, #22
 8006eda:	d4dd      	bmi.n	8006e98 <_fflush_r+0xc>
 8006edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ede:	f000 f908 	bl	80070f2 <__retarget_lock_release_recursive>
 8006ee2:	e7d9      	b.n	8006e98 <_fflush_r+0xc>
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <_fflush_r+0x70>)
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	d101      	bne.n	8006eee <_fflush_r+0x62>
 8006eea:	68ac      	ldr	r4, [r5, #8]
 8006eec:	e7df      	b.n	8006eae <_fflush_r+0x22>
 8006eee:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <_fflush_r+0x74>)
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf08      	it	eq
 8006ef4:	68ec      	ldreq	r4, [r5, #12]
 8006ef6:	e7da      	b.n	8006eae <_fflush_r+0x22>
 8006ef8:	08007f38 	.word	0x08007f38
 8006efc:	08007f58 	.word	0x08007f58
 8006f00:	08007f18 	.word	0x08007f18

08006f04 <std>:
 8006f04:	2300      	movs	r3, #0
 8006f06:	b510      	push	{r4, lr}
 8006f08:	4604      	mov	r4, r0
 8006f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f12:	6083      	str	r3, [r0, #8]
 8006f14:	8181      	strh	r1, [r0, #12]
 8006f16:	6643      	str	r3, [r0, #100]	; 0x64
 8006f18:	81c2      	strh	r2, [r0, #14]
 8006f1a:	6183      	str	r3, [r0, #24]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	2208      	movs	r2, #8
 8006f20:	305c      	adds	r0, #92	; 0x5c
 8006f22:	f7ff fd5b 	bl	80069dc <memset>
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <std+0x38>)
 8006f28:	6263      	str	r3, [r4, #36]	; 0x24
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <std+0x3c>)
 8006f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <std+0x40>)
 8006f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f32:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <std+0x44>)
 8006f34:	6224      	str	r4, [r4, #32]
 8006f36:	6323      	str	r3, [r4, #48]	; 0x30
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08006b31 	.word	0x08006b31
 8006f40:	08006b57 	.word	0x08006b57
 8006f44:	08006b8f 	.word	0x08006b8f
 8006f48:	08006bb3 	.word	0x08006bb3

08006f4c <_cleanup_r>:
 8006f4c:	4901      	ldr	r1, [pc, #4]	; (8006f54 <_cleanup_r+0x8>)
 8006f4e:	f000 b8af 	b.w	80070b0 <_fwalk_reent>
 8006f52:	bf00      	nop
 8006f54:	08006e8d 	.word	0x08006e8d

08006f58 <__sfmoreglue>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	2268      	movs	r2, #104	; 0x68
 8006f5c:	1e4d      	subs	r5, r1, #1
 8006f5e:	4355      	muls	r5, r2
 8006f60:	460e      	mov	r6, r1
 8006f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f66:	f000 f9a9 	bl	80072bc <_malloc_r>
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	b140      	cbz	r0, 8006f80 <__sfmoreglue+0x28>
 8006f6e:	2100      	movs	r1, #0
 8006f70:	e9c0 1600 	strd	r1, r6, [r0]
 8006f74:	300c      	adds	r0, #12
 8006f76:	60a0      	str	r0, [r4, #8]
 8006f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f7c:	f7ff fd2e 	bl	80069dc <memset>
 8006f80:	4620      	mov	r0, r4
 8006f82:	bd70      	pop	{r4, r5, r6, pc}

08006f84 <__sfp_lock_acquire>:
 8006f84:	4801      	ldr	r0, [pc, #4]	; (8006f8c <__sfp_lock_acquire+0x8>)
 8006f86:	f000 b8b3 	b.w	80070f0 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	20001e89 	.word	0x20001e89

08006f90 <__sfp_lock_release>:
 8006f90:	4801      	ldr	r0, [pc, #4]	; (8006f98 <__sfp_lock_release+0x8>)
 8006f92:	f000 b8ae 	b.w	80070f2 <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	20001e89 	.word	0x20001e89

08006f9c <__sinit_lock_acquire>:
 8006f9c:	4801      	ldr	r0, [pc, #4]	; (8006fa4 <__sinit_lock_acquire+0x8>)
 8006f9e:	f000 b8a7 	b.w	80070f0 <__retarget_lock_acquire_recursive>
 8006fa2:	bf00      	nop
 8006fa4:	20001e8a 	.word	0x20001e8a

08006fa8 <__sinit_lock_release>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__sinit_lock_release+0x8>)
 8006faa:	f000 b8a2 	b.w	80070f2 <__retarget_lock_release_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20001e8a 	.word	0x20001e8a

08006fb4 <__sinit>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	f7ff fff0 	bl	8006f9c <__sinit_lock_acquire>
 8006fbc:	69a3      	ldr	r3, [r4, #24]
 8006fbe:	b11b      	cbz	r3, 8006fc8 <__sinit+0x14>
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc4:	f7ff bff0 	b.w	8006fa8 <__sinit_lock_release>
 8006fc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fcc:	6523      	str	r3, [r4, #80]	; 0x50
 8006fce:	4b13      	ldr	r3, [pc, #76]	; (800701c <__sinit+0x68>)
 8006fd0:	4a13      	ldr	r2, [pc, #76]	; (8007020 <__sinit+0x6c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fd6:	42a3      	cmp	r3, r4
 8006fd8:	bf04      	itt	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	61a3      	streq	r3, [r4, #24]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 f820 	bl	8007024 <__sfp>
 8006fe4:	6060      	str	r0, [r4, #4]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f000 f81c 	bl	8007024 <__sfp>
 8006fec:	60a0      	str	r0, [r4, #8]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f000 f818 	bl	8007024 <__sfp>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60e0      	str	r0, [r4, #12]
 8006ff8:	2104      	movs	r1, #4
 8006ffa:	6860      	ldr	r0, [r4, #4]
 8006ffc:	f7ff ff82 	bl	8006f04 <std>
 8007000:	68a0      	ldr	r0, [r4, #8]
 8007002:	2201      	movs	r2, #1
 8007004:	2109      	movs	r1, #9
 8007006:	f7ff ff7d 	bl	8006f04 <std>
 800700a:	68e0      	ldr	r0, [r4, #12]
 800700c:	2202      	movs	r2, #2
 800700e:	2112      	movs	r1, #18
 8007010:	f7ff ff78 	bl	8006f04 <std>
 8007014:	2301      	movs	r3, #1
 8007016:	61a3      	str	r3, [r4, #24]
 8007018:	e7d2      	b.n	8006fc0 <__sinit+0xc>
 800701a:	bf00      	nop
 800701c:	08007f14 	.word	0x08007f14
 8007020:	08006f4d 	.word	0x08006f4d

08007024 <__sfp>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	4607      	mov	r7, r0
 8007028:	f7ff ffac 	bl	8006f84 <__sfp_lock_acquire>
 800702c:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <__sfp+0x84>)
 800702e:	681e      	ldr	r6, [r3, #0]
 8007030:	69b3      	ldr	r3, [r6, #24]
 8007032:	b913      	cbnz	r3, 800703a <__sfp+0x16>
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff ffbd 	bl	8006fb4 <__sinit>
 800703a:	3648      	adds	r6, #72	; 0x48
 800703c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007040:	3b01      	subs	r3, #1
 8007042:	d503      	bpl.n	800704c <__sfp+0x28>
 8007044:	6833      	ldr	r3, [r6, #0]
 8007046:	b30b      	cbz	r3, 800708c <__sfp+0x68>
 8007048:	6836      	ldr	r6, [r6, #0]
 800704a:	e7f7      	b.n	800703c <__sfp+0x18>
 800704c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007050:	b9d5      	cbnz	r5, 8007088 <__sfp+0x64>
 8007052:	4b16      	ldr	r3, [pc, #88]	; (80070ac <__sfp+0x88>)
 8007054:	60e3      	str	r3, [r4, #12]
 8007056:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800705a:	6665      	str	r5, [r4, #100]	; 0x64
 800705c:	f000 f847 	bl	80070ee <__retarget_lock_init_recursive>
 8007060:	f7ff ff96 	bl	8006f90 <__sfp_lock_release>
 8007064:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007068:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800706c:	6025      	str	r5, [r4, #0]
 800706e:	61a5      	str	r5, [r4, #24]
 8007070:	2208      	movs	r2, #8
 8007072:	4629      	mov	r1, r5
 8007074:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007078:	f7ff fcb0 	bl	80069dc <memset>
 800707c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007080:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007084:	4620      	mov	r0, r4
 8007086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007088:	3468      	adds	r4, #104	; 0x68
 800708a:	e7d9      	b.n	8007040 <__sfp+0x1c>
 800708c:	2104      	movs	r1, #4
 800708e:	4638      	mov	r0, r7
 8007090:	f7ff ff62 	bl	8006f58 <__sfmoreglue>
 8007094:	4604      	mov	r4, r0
 8007096:	6030      	str	r0, [r6, #0]
 8007098:	2800      	cmp	r0, #0
 800709a:	d1d5      	bne.n	8007048 <__sfp+0x24>
 800709c:	f7ff ff78 	bl	8006f90 <__sfp_lock_release>
 80070a0:	230c      	movs	r3, #12
 80070a2:	603b      	str	r3, [r7, #0]
 80070a4:	e7ee      	b.n	8007084 <__sfp+0x60>
 80070a6:	bf00      	nop
 80070a8:	08007f14 	.word	0x08007f14
 80070ac:	ffff0001 	.word	0xffff0001

080070b0 <_fwalk_reent>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	4606      	mov	r6, r0
 80070b6:	4688      	mov	r8, r1
 80070b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070bc:	2700      	movs	r7, #0
 80070be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070c2:	f1b9 0901 	subs.w	r9, r9, #1
 80070c6:	d505      	bpl.n	80070d4 <_fwalk_reent+0x24>
 80070c8:	6824      	ldr	r4, [r4, #0]
 80070ca:	2c00      	cmp	r4, #0
 80070cc:	d1f7      	bne.n	80070be <_fwalk_reent+0xe>
 80070ce:	4638      	mov	r0, r7
 80070d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d4:	89ab      	ldrh	r3, [r5, #12]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d907      	bls.n	80070ea <_fwalk_reent+0x3a>
 80070da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070de:	3301      	adds	r3, #1
 80070e0:	d003      	beq.n	80070ea <_fwalk_reent+0x3a>
 80070e2:	4629      	mov	r1, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	47c0      	blx	r8
 80070e8:	4307      	orrs	r7, r0
 80070ea:	3568      	adds	r5, #104	; 0x68
 80070ec:	e7e9      	b.n	80070c2 <_fwalk_reent+0x12>

080070ee <__retarget_lock_init_recursive>:
 80070ee:	4770      	bx	lr

080070f0 <__retarget_lock_acquire_recursive>:
 80070f0:	4770      	bx	lr

080070f2 <__retarget_lock_release_recursive>:
 80070f2:	4770      	bx	lr

080070f4 <_lseek_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	; (8007114 <_lseek_r+0x20>)
 80070f8:	4604      	mov	r4, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7f9 fd5c 	bl	8000bc0 <_lseek>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_lseek_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_lseek_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20001e94 	.word	0x20001e94

08007118 <__swhatbuf_r>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	460e      	mov	r6, r1
 800711c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007120:	2900      	cmp	r1, #0
 8007122:	b096      	sub	sp, #88	; 0x58
 8007124:	4614      	mov	r4, r2
 8007126:	461d      	mov	r5, r3
 8007128:	da08      	bge.n	800713c <__swhatbuf_r+0x24>
 800712a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	061a      	lsls	r2, r3, #24
 8007134:	d410      	bmi.n	8007158 <__swhatbuf_r+0x40>
 8007136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800713a:	e00e      	b.n	800715a <__swhatbuf_r+0x42>
 800713c:	466a      	mov	r2, sp
 800713e:	f000 fde1 	bl	8007d04 <_fstat_r>
 8007142:	2800      	cmp	r0, #0
 8007144:	dbf1      	blt.n	800712a <__swhatbuf_r+0x12>
 8007146:	9a01      	ldr	r2, [sp, #4]
 8007148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800714c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007150:	425a      	negs	r2, r3
 8007152:	415a      	adcs	r2, r3
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	e7ee      	b.n	8007136 <__swhatbuf_r+0x1e>
 8007158:	2340      	movs	r3, #64	; 0x40
 800715a:	2000      	movs	r0, #0
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	b016      	add	sp, #88	; 0x58
 8007160:	bd70      	pop	{r4, r5, r6, pc}
	...

08007164 <__smakebuf_r>:
 8007164:	898b      	ldrh	r3, [r1, #12]
 8007166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007168:	079d      	lsls	r5, r3, #30
 800716a:	4606      	mov	r6, r0
 800716c:	460c      	mov	r4, r1
 800716e:	d507      	bpl.n	8007180 <__smakebuf_r+0x1c>
 8007170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	6123      	str	r3, [r4, #16]
 8007178:	2301      	movs	r3, #1
 800717a:	6163      	str	r3, [r4, #20]
 800717c:	b002      	add	sp, #8
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	ab01      	add	r3, sp, #4
 8007182:	466a      	mov	r2, sp
 8007184:	f7ff ffc8 	bl	8007118 <__swhatbuf_r>
 8007188:	9900      	ldr	r1, [sp, #0]
 800718a:	4605      	mov	r5, r0
 800718c:	4630      	mov	r0, r6
 800718e:	f000 f895 	bl	80072bc <_malloc_r>
 8007192:	b948      	cbnz	r0, 80071a8 <__smakebuf_r+0x44>
 8007194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007198:	059a      	lsls	r2, r3, #22
 800719a:	d4ef      	bmi.n	800717c <__smakebuf_r+0x18>
 800719c:	f023 0303 	bic.w	r3, r3, #3
 80071a0:	f043 0302 	orr.w	r3, r3, #2
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	e7e3      	b.n	8007170 <__smakebuf_r+0xc>
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <__smakebuf_r+0x7c>)
 80071aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	6020      	str	r0, [r4, #0]
 80071b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b4:	81a3      	strh	r3, [r4, #12]
 80071b6:	9b00      	ldr	r3, [sp, #0]
 80071b8:	6163      	str	r3, [r4, #20]
 80071ba:	9b01      	ldr	r3, [sp, #4]
 80071bc:	6120      	str	r0, [r4, #16]
 80071be:	b15b      	cbz	r3, 80071d8 <__smakebuf_r+0x74>
 80071c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c4:	4630      	mov	r0, r6
 80071c6:	f000 fdaf 	bl	8007d28 <_isatty_r>
 80071ca:	b128      	cbz	r0, 80071d8 <__smakebuf_r+0x74>
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	f023 0303 	bic.w	r3, r3, #3
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	81a3      	strh	r3, [r4, #12]
 80071d8:	89a0      	ldrh	r0, [r4, #12]
 80071da:	4305      	orrs	r5, r0
 80071dc:	81a5      	strh	r5, [r4, #12]
 80071de:	e7cd      	b.n	800717c <__smakebuf_r+0x18>
 80071e0:	08006f4d 	.word	0x08006f4d

080071e4 <_free_r>:
 80071e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e6:	2900      	cmp	r1, #0
 80071e8:	d044      	beq.n	8007274 <_free_r+0x90>
 80071ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ee:	9001      	str	r0, [sp, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f1a1 0404 	sub.w	r4, r1, #4
 80071f6:	bfb8      	it	lt
 80071f8:	18e4      	addlt	r4, r4, r3
 80071fa:	f000 fda5 	bl	8007d48 <__malloc_lock>
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <_free_r+0x94>)
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	b933      	cbnz	r3, 8007214 <_free_r+0x30>
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	6014      	str	r4, [r2, #0]
 800720a:	b003      	add	sp, #12
 800720c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007210:	f000 bda0 	b.w	8007d54 <__malloc_unlock>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d908      	bls.n	800722a <_free_r+0x46>
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	1961      	adds	r1, r4, r5
 800721c:	428b      	cmp	r3, r1
 800721e:	bf01      	itttt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	1949      	addeq	r1, r1, r5
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	e7ed      	b.n	8007206 <_free_r+0x22>
 800722a:	461a      	mov	r2, r3
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b10b      	cbz	r3, 8007234 <_free_r+0x50>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d9fa      	bls.n	800722a <_free_r+0x46>
 8007234:	6811      	ldr	r1, [r2, #0]
 8007236:	1855      	adds	r5, r2, r1
 8007238:	42a5      	cmp	r5, r4
 800723a:	d10b      	bne.n	8007254 <_free_r+0x70>
 800723c:	6824      	ldr	r4, [r4, #0]
 800723e:	4421      	add	r1, r4
 8007240:	1854      	adds	r4, r2, r1
 8007242:	42a3      	cmp	r3, r4
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	d1e0      	bne.n	800720a <_free_r+0x26>
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	6053      	str	r3, [r2, #4]
 800724e:	4421      	add	r1, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	e7da      	b.n	800720a <_free_r+0x26>
 8007254:	d902      	bls.n	800725c <_free_r+0x78>
 8007256:	230c      	movs	r3, #12
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	e7d6      	b.n	800720a <_free_r+0x26>
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	1961      	adds	r1, r4, r5
 8007260:	428b      	cmp	r3, r1
 8007262:	bf04      	itt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	bf04      	itt	eq
 800726c:	1949      	addeq	r1, r1, r5
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	6054      	str	r4, [r2, #4]
 8007272:	e7ca      	b.n	800720a <_free_r+0x26>
 8007274:	b003      	add	sp, #12
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	20001e8c 	.word	0x20001e8c

0800727c <sbrk_aligned>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4e0e      	ldr	r6, [pc, #56]	; (80072b8 <sbrk_aligned+0x3c>)
 8007280:	460c      	mov	r4, r1
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	4605      	mov	r5, r0
 8007286:	b911      	cbnz	r1, 800728e <sbrk_aligned+0x12>
 8007288:	f000 fbc2 	bl	8007a10 <_sbrk_r>
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 fbbd 	bl	8007a10 <_sbrk_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d00a      	beq.n	80072b0 <sbrk_aligned+0x34>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d007      	beq.n	80072b4 <sbrk_aligned+0x38>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fbb2 	bl	8007a10 <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d101      	bne.n	80072b4 <sbrk_aligned+0x38>
 80072b0:	f04f 34ff 	mov.w	r4, #4294967295
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	20001e90 	.word	0x20001e90

080072bc <_malloc_r>:
 80072bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	1ccd      	adds	r5, r1, #3
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	db01      	blt.n	80072d8 <_malloc_r+0x1c>
 80072d4:	42a9      	cmp	r1, r5
 80072d6:	d905      	bls.n	80072e4 <_malloc_r+0x28>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	2600      	movs	r6, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	4e2e      	ldr	r6, [pc, #184]	; (80073a0 <_malloc_r+0xe4>)
 80072e6:	f000 fd2f 	bl	8007d48 <__malloc_lock>
 80072ea:	6833      	ldr	r3, [r6, #0]
 80072ec:	461c      	mov	r4, r3
 80072ee:	bb34      	cbnz	r4, 800733e <_malloc_r+0x82>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ffc2 	bl	800727c <sbrk_aligned>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	4604      	mov	r4, r0
 80072fc:	d14d      	bne.n	800739a <_malloc_r+0xde>
 80072fe:	6834      	ldr	r4, [r6, #0]
 8007300:	4626      	mov	r6, r4
 8007302:	2e00      	cmp	r6, #0
 8007304:	d140      	bne.n	8007388 <_malloc_r+0xcc>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	4631      	mov	r1, r6
 800730a:	4638      	mov	r0, r7
 800730c:	eb04 0803 	add.w	r8, r4, r3
 8007310:	f000 fb7e 	bl	8007a10 <_sbrk_r>
 8007314:	4580      	cmp	r8, r0
 8007316:	d13a      	bne.n	800738e <_malloc_r+0xd2>
 8007318:	6821      	ldr	r1, [r4, #0]
 800731a:	3503      	adds	r5, #3
 800731c:	1a6d      	subs	r5, r5, r1
 800731e:	f025 0503 	bic.w	r5, r5, #3
 8007322:	3508      	adds	r5, #8
 8007324:	2d0c      	cmp	r5, #12
 8007326:	bf38      	it	cc
 8007328:	250c      	movcc	r5, #12
 800732a:	4629      	mov	r1, r5
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff ffa5 	bl	800727c <sbrk_aligned>
 8007332:	3001      	adds	r0, #1
 8007334:	d02b      	beq.n	800738e <_malloc_r+0xd2>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	442b      	add	r3, r5
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	e00e      	b.n	800735c <_malloc_r+0xa0>
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	1b52      	subs	r2, r2, r5
 8007342:	d41e      	bmi.n	8007382 <_malloc_r+0xc6>
 8007344:	2a0b      	cmp	r2, #11
 8007346:	d916      	bls.n	8007376 <_malloc_r+0xba>
 8007348:	1961      	adds	r1, r4, r5
 800734a:	42a3      	cmp	r3, r4
 800734c:	6025      	str	r5, [r4, #0]
 800734e:	bf18      	it	ne
 8007350:	6059      	strne	r1, [r3, #4]
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	bf08      	it	eq
 8007356:	6031      	streq	r1, [r6, #0]
 8007358:	5162      	str	r2, [r4, r5]
 800735a:	604b      	str	r3, [r1, #4]
 800735c:	4638      	mov	r0, r7
 800735e:	f104 060b 	add.w	r6, r4, #11
 8007362:	f000 fcf7 	bl	8007d54 <__malloc_unlock>
 8007366:	f026 0607 	bic.w	r6, r6, #7
 800736a:	1d23      	adds	r3, r4, #4
 800736c:	1af2      	subs	r2, r6, r3
 800736e:	d0b6      	beq.n	80072de <_malloc_r+0x22>
 8007370:	1b9b      	subs	r3, r3, r6
 8007372:	50a3      	str	r3, [r4, r2]
 8007374:	e7b3      	b.n	80072de <_malloc_r+0x22>
 8007376:	6862      	ldr	r2, [r4, #4]
 8007378:	42a3      	cmp	r3, r4
 800737a:	bf0c      	ite	eq
 800737c:	6032      	streq	r2, [r6, #0]
 800737e:	605a      	strne	r2, [r3, #4]
 8007380:	e7ec      	b.n	800735c <_malloc_r+0xa0>
 8007382:	4623      	mov	r3, r4
 8007384:	6864      	ldr	r4, [r4, #4]
 8007386:	e7b2      	b.n	80072ee <_malloc_r+0x32>
 8007388:	4634      	mov	r4, r6
 800738a:	6876      	ldr	r6, [r6, #4]
 800738c:	e7b9      	b.n	8007302 <_malloc_r+0x46>
 800738e:	230c      	movs	r3, #12
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4638      	mov	r0, r7
 8007394:	f000 fcde 	bl	8007d54 <__malloc_unlock>
 8007398:	e7a1      	b.n	80072de <_malloc_r+0x22>
 800739a:	6025      	str	r5, [r4, #0]
 800739c:	e7de      	b.n	800735c <_malloc_r+0xa0>
 800739e:	bf00      	nop
 80073a0:	20001e8c 	.word	0x20001e8c

080073a4 <_sungetc_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	1c4b      	adds	r3, r1, #1
 80073a8:	4614      	mov	r4, r2
 80073aa:	d103      	bne.n	80073b4 <_sungetc_r+0x10>
 80073ac:	f04f 35ff 	mov.w	r5, #4294967295
 80073b0:	4628      	mov	r0, r5
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	8993      	ldrh	r3, [r2, #12]
 80073b6:	f023 0320 	bic.w	r3, r3, #32
 80073ba:	8193      	strh	r3, [r2, #12]
 80073bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	b2cd      	uxtb	r5, r1
 80073c2:	b18b      	cbz	r3, 80073e8 <_sungetc_r+0x44>
 80073c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80073c6:	4293      	cmp	r3, r2
 80073c8:	dd08      	ble.n	80073dc <_sungetc_r+0x38>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	1e5a      	subs	r2, r3, #1
 80073ce:	6022      	str	r2, [r4, #0]
 80073d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	e7e9      	b.n	80073b0 <_sungetc_r+0xc>
 80073dc:	4621      	mov	r1, r4
 80073de:	f000 fc57 	bl	8007c90 <__submore>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0f1      	beq.n	80073ca <_sungetc_r+0x26>
 80073e6:	e7e1      	b.n	80073ac <_sungetc_r+0x8>
 80073e8:	6921      	ldr	r1, [r4, #16]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	b151      	cbz	r1, 8007404 <_sungetc_r+0x60>
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d208      	bcs.n	8007404 <_sungetc_r+0x60>
 80073f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80073f6:	42a9      	cmp	r1, r5
 80073f8:	d104      	bne.n	8007404 <_sungetc_r+0x60>
 80073fa:	3b01      	subs	r3, #1
 80073fc:	3201      	adds	r2, #1
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	6062      	str	r2, [r4, #4]
 8007402:	e7d5      	b.n	80073b0 <_sungetc_r+0xc>
 8007404:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800740c:	6363      	str	r3, [r4, #52]	; 0x34
 800740e:	2303      	movs	r3, #3
 8007410:	63a3      	str	r3, [r4, #56]	; 0x38
 8007412:	4623      	mov	r3, r4
 8007414:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	2301      	movs	r3, #1
 800741c:	e7dc      	b.n	80073d8 <_sungetc_r+0x34>

0800741e <__ssrefill_r>:
 800741e:	b510      	push	{r4, lr}
 8007420:	460c      	mov	r4, r1
 8007422:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007424:	b169      	cbz	r1, 8007442 <__ssrefill_r+0x24>
 8007426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800742a:	4299      	cmp	r1, r3
 800742c:	d001      	beq.n	8007432 <__ssrefill_r+0x14>
 800742e:	f7ff fed9 	bl	80071e4 <_free_r>
 8007432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007434:	6063      	str	r3, [r4, #4]
 8007436:	2000      	movs	r0, #0
 8007438:	6360      	str	r0, [r4, #52]	; 0x34
 800743a:	b113      	cbz	r3, 8007442 <__ssrefill_r+0x24>
 800743c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	bd10      	pop	{r4, pc}
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	2300      	movs	r3, #0
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f043 0320 	orr.w	r3, r3, #32
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	f04f 30ff 	mov.w	r0, #4294967295
 8007456:	e7f3      	b.n	8007440 <__ssrefill_r+0x22>

08007458 <__ssvfiscanf_r>:
 8007458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800745c:	460c      	mov	r4, r1
 800745e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007462:	2100      	movs	r1, #0
 8007464:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007468:	49a6      	ldr	r1, [pc, #664]	; (8007704 <__ssvfiscanf_r+0x2ac>)
 800746a:	91a0      	str	r1, [sp, #640]	; 0x280
 800746c:	f10d 0804 	add.w	r8, sp, #4
 8007470:	49a5      	ldr	r1, [pc, #660]	; (8007708 <__ssvfiscanf_r+0x2b0>)
 8007472:	4fa6      	ldr	r7, [pc, #664]	; (800770c <__ssvfiscanf_r+0x2b4>)
 8007474:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8007710 <__ssvfiscanf_r+0x2b8>
 8007478:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800747c:	4606      	mov	r6, r0
 800747e:	91a1      	str	r1, [sp, #644]	; 0x284
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	7813      	ldrb	r3, [r2, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 815a 	beq.w	800773e <__ssvfiscanf_r+0x2e6>
 800748a:	5dd9      	ldrb	r1, [r3, r7]
 800748c:	f011 0108 	ands.w	r1, r1, #8
 8007490:	f102 0501 	add.w	r5, r2, #1
 8007494:	d019      	beq.n	80074ca <__ssvfiscanf_r+0x72>
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	dd0f      	ble.n	80074bc <__ssvfiscanf_r+0x64>
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	5cba      	ldrb	r2, [r7, r2]
 80074a2:	0712      	lsls	r2, r2, #28
 80074a4:	d401      	bmi.n	80074aa <__ssvfiscanf_r+0x52>
 80074a6:	462a      	mov	r2, r5
 80074a8:	e7eb      	b.n	8007482 <__ssvfiscanf_r+0x2a>
 80074aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80074ac:	3201      	adds	r2, #1
 80074ae:	9245      	str	r2, [sp, #276]	; 0x114
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	3301      	adds	r3, #1
 80074b4:	3a01      	subs	r2, #1
 80074b6:	6062      	str	r2, [r4, #4]
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	e7ec      	b.n	8007496 <__ssvfiscanf_r+0x3e>
 80074bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80074be:	4621      	mov	r1, r4
 80074c0:	4630      	mov	r0, r6
 80074c2:	4798      	blx	r3
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d0e9      	beq.n	800749c <__ssvfiscanf_r+0x44>
 80074c8:	e7ed      	b.n	80074a6 <__ssvfiscanf_r+0x4e>
 80074ca:	2b25      	cmp	r3, #37	; 0x25
 80074cc:	d012      	beq.n	80074f4 <__ssvfiscanf_r+0x9c>
 80074ce:	469a      	mov	sl, r3
 80074d0:	6863      	ldr	r3, [r4, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f340 8091 	ble.w	80075fa <__ssvfiscanf_r+0x1a2>
 80074d8:	6822      	ldr	r2, [r4, #0]
 80074da:	7813      	ldrb	r3, [r2, #0]
 80074dc:	4553      	cmp	r3, sl
 80074de:	f040 812e 	bne.w	800773e <__ssvfiscanf_r+0x2e6>
 80074e2:	6863      	ldr	r3, [r4, #4]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	6063      	str	r3, [r4, #4]
 80074e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80074ea:	3201      	adds	r2, #1
 80074ec:	3301      	adds	r3, #1
 80074ee:	6022      	str	r2, [r4, #0]
 80074f0:	9345      	str	r3, [sp, #276]	; 0x114
 80074f2:	e7d8      	b.n	80074a6 <__ssvfiscanf_r+0x4e>
 80074f4:	9141      	str	r1, [sp, #260]	; 0x104
 80074f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80074f8:	7853      	ldrb	r3, [r2, #1]
 80074fa:	2b2a      	cmp	r3, #42	; 0x2a
 80074fc:	bf02      	ittt	eq
 80074fe:	2310      	moveq	r3, #16
 8007500:	1c95      	addeq	r5, r2, #2
 8007502:	9341      	streq	r3, [sp, #260]	; 0x104
 8007504:	220a      	movs	r2, #10
 8007506:	46aa      	mov	sl, r5
 8007508:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800750c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007510:	2b09      	cmp	r3, #9
 8007512:	d91d      	bls.n	8007550 <__ssvfiscanf_r+0xf8>
 8007514:	487e      	ldr	r0, [pc, #504]	; (8007710 <__ssvfiscanf_r+0x2b8>)
 8007516:	2203      	movs	r2, #3
 8007518:	f7f8 fe72 	bl	8000200 <memchr>
 800751c:	b140      	cbz	r0, 8007530 <__ssvfiscanf_r+0xd8>
 800751e:	2301      	movs	r3, #1
 8007520:	eba0 0009 	sub.w	r0, r0, r9
 8007524:	fa03 f000 	lsl.w	r0, r3, r0
 8007528:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800752a:	4318      	orrs	r0, r3
 800752c:	9041      	str	r0, [sp, #260]	; 0x104
 800752e:	4655      	mov	r5, sl
 8007530:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007534:	2b78      	cmp	r3, #120	; 0x78
 8007536:	d806      	bhi.n	8007546 <__ssvfiscanf_r+0xee>
 8007538:	2b57      	cmp	r3, #87	; 0x57
 800753a:	d810      	bhi.n	800755e <__ssvfiscanf_r+0x106>
 800753c:	2b25      	cmp	r3, #37	; 0x25
 800753e:	d0c6      	beq.n	80074ce <__ssvfiscanf_r+0x76>
 8007540:	d856      	bhi.n	80075f0 <__ssvfiscanf_r+0x198>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d064      	beq.n	8007610 <__ssvfiscanf_r+0x1b8>
 8007546:	2303      	movs	r3, #3
 8007548:	9347      	str	r3, [sp, #284]	; 0x11c
 800754a:	230a      	movs	r3, #10
 800754c:	9342      	str	r3, [sp, #264]	; 0x108
 800754e:	e071      	b.n	8007634 <__ssvfiscanf_r+0x1dc>
 8007550:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007552:	fb02 1103 	mla	r1, r2, r3, r1
 8007556:	3930      	subs	r1, #48	; 0x30
 8007558:	9143      	str	r1, [sp, #268]	; 0x10c
 800755a:	4655      	mov	r5, sl
 800755c:	e7d3      	b.n	8007506 <__ssvfiscanf_r+0xae>
 800755e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007562:	2a20      	cmp	r2, #32
 8007564:	d8ef      	bhi.n	8007546 <__ssvfiscanf_r+0xee>
 8007566:	a101      	add	r1, pc, #4	; (adr r1, 800756c <__ssvfiscanf_r+0x114>)
 8007568:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800756c:	0800761f 	.word	0x0800761f
 8007570:	08007547 	.word	0x08007547
 8007574:	08007547 	.word	0x08007547
 8007578:	0800767d 	.word	0x0800767d
 800757c:	08007547 	.word	0x08007547
 8007580:	08007547 	.word	0x08007547
 8007584:	08007547 	.word	0x08007547
 8007588:	08007547 	.word	0x08007547
 800758c:	08007547 	.word	0x08007547
 8007590:	08007547 	.word	0x08007547
 8007594:	08007547 	.word	0x08007547
 8007598:	08007693 	.word	0x08007693
 800759c:	08007669 	.word	0x08007669
 80075a0:	080075f7 	.word	0x080075f7
 80075a4:	080075f7 	.word	0x080075f7
 80075a8:	080075f7 	.word	0x080075f7
 80075ac:	08007547 	.word	0x08007547
 80075b0:	0800766d 	.word	0x0800766d
 80075b4:	08007547 	.word	0x08007547
 80075b8:	08007547 	.word	0x08007547
 80075bc:	08007547 	.word	0x08007547
 80075c0:	08007547 	.word	0x08007547
 80075c4:	080076a3 	.word	0x080076a3
 80075c8:	08007675 	.word	0x08007675
 80075cc:	08007617 	.word	0x08007617
 80075d0:	08007547 	.word	0x08007547
 80075d4:	08007547 	.word	0x08007547
 80075d8:	0800769f 	.word	0x0800769f
 80075dc:	08007547 	.word	0x08007547
 80075e0:	08007669 	.word	0x08007669
 80075e4:	08007547 	.word	0x08007547
 80075e8:	08007547 	.word	0x08007547
 80075ec:	0800761f 	.word	0x0800761f
 80075f0:	3b45      	subs	r3, #69	; 0x45
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d8a7      	bhi.n	8007546 <__ssvfiscanf_r+0xee>
 80075f6:	2305      	movs	r3, #5
 80075f8:	e01b      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 80075fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80075fc:	4621      	mov	r1, r4
 80075fe:	4630      	mov	r0, r6
 8007600:	4798      	blx	r3
 8007602:	2800      	cmp	r0, #0
 8007604:	f43f af68 	beq.w	80074d8 <__ssvfiscanf_r+0x80>
 8007608:	9844      	ldr	r0, [sp, #272]	; 0x110
 800760a:	2800      	cmp	r0, #0
 800760c:	f040 808d 	bne.w	800772a <__ssvfiscanf_r+0x2d2>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	e08f      	b.n	8007736 <__ssvfiscanf_r+0x2de>
 8007616:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007618:	f042 0220 	orr.w	r2, r2, #32
 800761c:	9241      	str	r2, [sp, #260]	; 0x104
 800761e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007624:	9241      	str	r2, [sp, #260]	; 0x104
 8007626:	2210      	movs	r2, #16
 8007628:	2b6f      	cmp	r3, #111	; 0x6f
 800762a:	9242      	str	r2, [sp, #264]	; 0x108
 800762c:	bf34      	ite	cc
 800762e:	2303      	movcc	r3, #3
 8007630:	2304      	movcs	r3, #4
 8007632:	9347      	str	r3, [sp, #284]	; 0x11c
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	dd42      	ble.n	80076c0 <__ssvfiscanf_r+0x268>
 800763a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800763c:	0659      	lsls	r1, r3, #25
 800763e:	d404      	bmi.n	800764a <__ssvfiscanf_r+0x1f2>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	781a      	ldrb	r2, [r3, #0]
 8007644:	5cba      	ldrb	r2, [r7, r2]
 8007646:	0712      	lsls	r2, r2, #28
 8007648:	d441      	bmi.n	80076ce <__ssvfiscanf_r+0x276>
 800764a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800764c:	2b02      	cmp	r3, #2
 800764e:	dc50      	bgt.n	80076f2 <__ssvfiscanf_r+0x29a>
 8007650:	466b      	mov	r3, sp
 8007652:	4622      	mov	r2, r4
 8007654:	a941      	add	r1, sp, #260	; 0x104
 8007656:	4630      	mov	r0, r6
 8007658:	f000 f876 	bl	8007748 <_scanf_chars>
 800765c:	2801      	cmp	r0, #1
 800765e:	d06e      	beq.n	800773e <__ssvfiscanf_r+0x2e6>
 8007660:	2802      	cmp	r0, #2
 8007662:	f47f af20 	bne.w	80074a6 <__ssvfiscanf_r+0x4e>
 8007666:	e7cf      	b.n	8007608 <__ssvfiscanf_r+0x1b0>
 8007668:	220a      	movs	r2, #10
 800766a:	e7dd      	b.n	8007628 <__ssvfiscanf_r+0x1d0>
 800766c:	2300      	movs	r3, #0
 800766e:	9342      	str	r3, [sp, #264]	; 0x108
 8007670:	2303      	movs	r3, #3
 8007672:	e7de      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 8007674:	2308      	movs	r3, #8
 8007676:	9342      	str	r3, [sp, #264]	; 0x108
 8007678:	2304      	movs	r3, #4
 800767a:	e7da      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 800767c:	4629      	mov	r1, r5
 800767e:	4640      	mov	r0, r8
 8007680:	f000 f9d6 	bl	8007a30 <__sccl>
 8007684:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768a:	9341      	str	r3, [sp, #260]	; 0x104
 800768c:	4605      	mov	r5, r0
 800768e:	2301      	movs	r3, #1
 8007690:	e7cf      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 8007692:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	9341      	str	r3, [sp, #260]	; 0x104
 800769a:	2300      	movs	r3, #0
 800769c:	e7c9      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 800769e:	2302      	movs	r3, #2
 80076a0:	e7c7      	b.n	8007632 <__ssvfiscanf_r+0x1da>
 80076a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80076a4:	06c3      	lsls	r3, r0, #27
 80076a6:	f53f aefe 	bmi.w	80074a6 <__ssvfiscanf_r+0x4e>
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076ae:	1d19      	adds	r1, r3, #4
 80076b0:	9100      	str	r1, [sp, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f010 0f01 	tst.w	r0, #1
 80076b8:	bf14      	ite	ne
 80076ba:	801a      	strhne	r2, [r3, #0]
 80076bc:	601a      	streq	r2, [r3, #0]
 80076be:	e6f2      	b.n	80074a6 <__ssvfiscanf_r+0x4e>
 80076c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076c2:	4621      	mov	r1, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	4798      	blx	r3
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0b6      	beq.n	800763a <__ssvfiscanf_r+0x1e2>
 80076cc:	e79c      	b.n	8007608 <__ssvfiscanf_r+0x1b0>
 80076ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80076d0:	3201      	adds	r2, #1
 80076d2:	9245      	str	r2, [sp, #276]	; 0x114
 80076d4:	6862      	ldr	r2, [r4, #4]
 80076d6:	3a01      	subs	r2, #1
 80076d8:	2a00      	cmp	r2, #0
 80076da:	6062      	str	r2, [r4, #4]
 80076dc:	dd02      	ble.n	80076e4 <__ssvfiscanf_r+0x28c>
 80076de:	3301      	adds	r3, #1
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	e7ad      	b.n	8007640 <__ssvfiscanf_r+0x1e8>
 80076e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80076e6:	4621      	mov	r1, r4
 80076e8:	4630      	mov	r0, r6
 80076ea:	4798      	blx	r3
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d0a7      	beq.n	8007640 <__ssvfiscanf_r+0x1e8>
 80076f0:	e78a      	b.n	8007608 <__ssvfiscanf_r+0x1b0>
 80076f2:	2b04      	cmp	r3, #4
 80076f4:	dc0e      	bgt.n	8007714 <__ssvfiscanf_r+0x2bc>
 80076f6:	466b      	mov	r3, sp
 80076f8:	4622      	mov	r2, r4
 80076fa:	a941      	add	r1, sp, #260	; 0x104
 80076fc:	4630      	mov	r0, r6
 80076fe:	f000 f87d 	bl	80077fc <_scanf_i>
 8007702:	e7ab      	b.n	800765c <__ssvfiscanf_r+0x204>
 8007704:	080073a5 	.word	0x080073a5
 8007708:	0800741f 	.word	0x0800741f
 800770c:	08007f98 	.word	0x08007f98
 8007710:	08007f78 	.word	0x08007f78
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <__ssvfiscanf_r+0x2ec>)
 8007716:	2b00      	cmp	r3, #0
 8007718:	f43f aec5 	beq.w	80074a6 <__ssvfiscanf_r+0x4e>
 800771c:	466b      	mov	r3, sp
 800771e:	4622      	mov	r2, r4
 8007720:	a941      	add	r1, sp, #260	; 0x104
 8007722:	4630      	mov	r0, r6
 8007724:	f3af 8000 	nop.w
 8007728:	e798      	b.n	800765c <__ssvfiscanf_r+0x204>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007730:	bf18      	it	ne
 8007732:	f04f 30ff 	movne.w	r0, #4294967295
 8007736:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007740:	e7f9      	b.n	8007736 <__ssvfiscanf_r+0x2de>
 8007742:	bf00      	nop
 8007744:	00000000 	.word	0x00000000

08007748 <_scanf_chars>:
 8007748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800774c:	4615      	mov	r5, r2
 800774e:	688a      	ldr	r2, [r1, #8]
 8007750:	4680      	mov	r8, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b932      	cbnz	r2, 8007764 <_scanf_chars+0x1c>
 8007756:	698a      	ldr	r2, [r1, #24]
 8007758:	2a00      	cmp	r2, #0
 800775a:	bf0c      	ite	eq
 800775c:	2201      	moveq	r2, #1
 800775e:	f04f 32ff 	movne.w	r2, #4294967295
 8007762:	608a      	str	r2, [r1, #8]
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80077f8 <_scanf_chars+0xb0>
 800776a:	06d1      	lsls	r1, r2, #27
 800776c:	bf5f      	itttt	pl
 800776e:	681a      	ldrpl	r2, [r3, #0]
 8007770:	1d11      	addpl	r1, r2, #4
 8007772:	6019      	strpl	r1, [r3, #0]
 8007774:	6816      	ldrpl	r6, [r2, #0]
 8007776:	2700      	movs	r7, #0
 8007778:	69a0      	ldr	r0, [r4, #24]
 800777a:	b188      	cbz	r0, 80077a0 <_scanf_chars+0x58>
 800777c:	2801      	cmp	r0, #1
 800777e:	d107      	bne.n	8007790 <_scanf_chars+0x48>
 8007780:	682a      	ldr	r2, [r5, #0]
 8007782:	7811      	ldrb	r1, [r2, #0]
 8007784:	6962      	ldr	r2, [r4, #20]
 8007786:	5c52      	ldrb	r2, [r2, r1]
 8007788:	b952      	cbnz	r2, 80077a0 <_scanf_chars+0x58>
 800778a:	2f00      	cmp	r7, #0
 800778c:	d031      	beq.n	80077f2 <_scanf_chars+0xaa>
 800778e:	e022      	b.n	80077d6 <_scanf_chars+0x8e>
 8007790:	2802      	cmp	r0, #2
 8007792:	d120      	bne.n	80077d6 <_scanf_chars+0x8e>
 8007794:	682b      	ldr	r3, [r5, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f813 3009 	ldrb.w	r3, [r3, r9]
 800779c:	071b      	lsls	r3, r3, #28
 800779e:	d41a      	bmi.n	80077d6 <_scanf_chars+0x8e>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	06da      	lsls	r2, r3, #27
 80077a4:	bf5e      	ittt	pl
 80077a6:	682b      	ldrpl	r3, [r5, #0]
 80077a8:	781b      	ldrbpl	r3, [r3, #0]
 80077aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80077ae:	682a      	ldr	r2, [r5, #0]
 80077b0:	686b      	ldr	r3, [r5, #4]
 80077b2:	3201      	adds	r2, #1
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	68a2      	ldr	r2, [r4, #8]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	3a01      	subs	r2, #1
 80077bc:	606b      	str	r3, [r5, #4]
 80077be:	3701      	adds	r7, #1
 80077c0:	60a2      	str	r2, [r4, #8]
 80077c2:	b142      	cbz	r2, 80077d6 <_scanf_chars+0x8e>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dcd7      	bgt.n	8007778 <_scanf_chars+0x30>
 80077c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077cc:	4629      	mov	r1, r5
 80077ce:	4640      	mov	r0, r8
 80077d0:	4798      	blx	r3
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d0d0      	beq.n	8007778 <_scanf_chars+0x30>
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f013 0310 	ands.w	r3, r3, #16
 80077dc:	d105      	bne.n	80077ea <_scanf_chars+0xa2>
 80077de:	68e2      	ldr	r2, [r4, #12]
 80077e0:	3201      	adds	r2, #1
 80077e2:	60e2      	str	r2, [r4, #12]
 80077e4:	69a2      	ldr	r2, [r4, #24]
 80077e6:	b102      	cbz	r2, 80077ea <_scanf_chars+0xa2>
 80077e8:	7033      	strb	r3, [r6, #0]
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	443b      	add	r3, r7
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f6:	bf00      	nop
 80077f8:	08007f98 	.word	0x08007f98

080077fc <_scanf_i>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	4698      	mov	r8, r3
 8007802:	4b76      	ldr	r3, [pc, #472]	; (80079dc <_scanf_i+0x1e0>)
 8007804:	460c      	mov	r4, r1
 8007806:	4682      	mov	sl, r0
 8007808:	4616      	mov	r6, r2
 800780a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800780e:	b087      	sub	sp, #28
 8007810:	ab03      	add	r3, sp, #12
 8007812:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007816:	4b72      	ldr	r3, [pc, #456]	; (80079e0 <_scanf_i+0x1e4>)
 8007818:	69a1      	ldr	r1, [r4, #24]
 800781a:	4a72      	ldr	r2, [pc, #456]	; (80079e4 <_scanf_i+0x1e8>)
 800781c:	2903      	cmp	r1, #3
 800781e:	bf18      	it	ne
 8007820:	461a      	movne	r2, r3
 8007822:	68a3      	ldr	r3, [r4, #8]
 8007824:	9201      	str	r2, [sp, #4]
 8007826:	1e5a      	subs	r2, r3, #1
 8007828:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800782c:	bf88      	it	hi
 800782e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007832:	4627      	mov	r7, r4
 8007834:	bf82      	ittt	hi
 8007836:	eb03 0905 	addhi.w	r9, r3, r5
 800783a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800783e:	60a3      	strhi	r3, [r4, #8]
 8007840:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007844:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007848:	bf98      	it	ls
 800784a:	f04f 0900 	movls.w	r9, #0
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	463d      	mov	r5, r7
 8007852:	f04f 0b00 	mov.w	fp, #0
 8007856:	6831      	ldr	r1, [r6, #0]
 8007858:	ab03      	add	r3, sp, #12
 800785a:	7809      	ldrb	r1, [r1, #0]
 800785c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007860:	2202      	movs	r2, #2
 8007862:	f7f8 fccd 	bl	8000200 <memchr>
 8007866:	b328      	cbz	r0, 80078b4 <_scanf_i+0xb8>
 8007868:	f1bb 0f01 	cmp.w	fp, #1
 800786c:	d159      	bne.n	8007922 <_scanf_i+0x126>
 800786e:	6862      	ldr	r2, [r4, #4]
 8007870:	b92a      	cbnz	r2, 800787e <_scanf_i+0x82>
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	2308      	movs	r3, #8
 8007876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800787a:	6063      	str	r3, [r4, #4]
 800787c:	6022      	str	r2, [r4, #0]
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007884:	6022      	str	r2, [r4, #0]
 8007886:	68a2      	ldr	r2, [r4, #8]
 8007888:	1e51      	subs	r1, r2, #1
 800788a:	60a1      	str	r1, [r4, #8]
 800788c:	b192      	cbz	r2, 80078b4 <_scanf_i+0xb8>
 800788e:	6832      	ldr	r2, [r6, #0]
 8007890:	1c51      	adds	r1, r2, #1
 8007892:	6031      	str	r1, [r6, #0]
 8007894:	7812      	ldrb	r2, [r2, #0]
 8007896:	f805 2b01 	strb.w	r2, [r5], #1
 800789a:	6872      	ldr	r2, [r6, #4]
 800789c:	3a01      	subs	r2, #1
 800789e:	2a00      	cmp	r2, #0
 80078a0:	6072      	str	r2, [r6, #4]
 80078a2:	dc07      	bgt.n	80078b4 <_scanf_i+0xb8>
 80078a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80078a8:	4631      	mov	r1, r6
 80078aa:	4650      	mov	r0, sl
 80078ac:	4790      	blx	r2
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f040 8085 	bne.w	80079be <_scanf_i+0x1c2>
 80078b4:	f10b 0b01 	add.w	fp, fp, #1
 80078b8:	f1bb 0f03 	cmp.w	fp, #3
 80078bc:	d1cb      	bne.n	8007856 <_scanf_i+0x5a>
 80078be:	6863      	ldr	r3, [r4, #4]
 80078c0:	b90b      	cbnz	r3, 80078c6 <_scanf_i+0xca>
 80078c2:	230a      	movs	r3, #10
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	6863      	ldr	r3, [r4, #4]
 80078c8:	4947      	ldr	r1, [pc, #284]	; (80079e8 <_scanf_i+0x1ec>)
 80078ca:	6960      	ldr	r0, [r4, #20]
 80078cc:	1ac9      	subs	r1, r1, r3
 80078ce:	f000 f8af 	bl	8007a30 <__sccl>
 80078d2:	f04f 0b00 	mov.w	fp, #0
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d03d      	beq.n	800795a <_scanf_i+0x15e>
 80078de:	6831      	ldr	r1, [r6, #0]
 80078e0:	6960      	ldr	r0, [r4, #20]
 80078e2:	f891 c000 	ldrb.w	ip, [r1]
 80078e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d035      	beq.n	800795a <_scanf_i+0x15e>
 80078ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80078f2:	d124      	bne.n	800793e <_scanf_i+0x142>
 80078f4:	0510      	lsls	r0, r2, #20
 80078f6:	d522      	bpl.n	800793e <_scanf_i+0x142>
 80078f8:	f10b 0b01 	add.w	fp, fp, #1
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	d003      	beq.n	800790a <_scanf_i+0x10e>
 8007902:	3301      	adds	r3, #1
 8007904:	f109 39ff 	add.w	r9, r9, #4294967295
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	6873      	ldr	r3, [r6, #4]
 800790c:	3b01      	subs	r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	6073      	str	r3, [r6, #4]
 8007912:	dd1b      	ble.n	800794c <_scanf_i+0x150>
 8007914:	6833      	ldr	r3, [r6, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	6033      	str	r3, [r6, #0]
 800791a:	68a3      	ldr	r3, [r4, #8]
 800791c:	3b01      	subs	r3, #1
 800791e:	60a3      	str	r3, [r4, #8]
 8007920:	e7d9      	b.n	80078d6 <_scanf_i+0xda>
 8007922:	f1bb 0f02 	cmp.w	fp, #2
 8007926:	d1ae      	bne.n	8007886 <_scanf_i+0x8a>
 8007928:	6822      	ldr	r2, [r4, #0]
 800792a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800792e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007932:	d1bf      	bne.n	80078b4 <_scanf_i+0xb8>
 8007934:	2310      	movs	r3, #16
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800793c:	e7a2      	b.n	8007884 <_scanf_i+0x88>
 800793e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007942:	6022      	str	r2, [r4, #0]
 8007944:	780b      	ldrb	r3, [r1, #0]
 8007946:	f805 3b01 	strb.w	r3, [r5], #1
 800794a:	e7de      	b.n	800790a <_scanf_i+0x10e>
 800794c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007950:	4631      	mov	r1, r6
 8007952:	4650      	mov	r0, sl
 8007954:	4798      	blx	r3
 8007956:	2800      	cmp	r0, #0
 8007958:	d0df      	beq.n	800791a <_scanf_i+0x11e>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	05db      	lsls	r3, r3, #23
 800795e:	d50d      	bpl.n	800797c <_scanf_i+0x180>
 8007960:	42bd      	cmp	r5, r7
 8007962:	d909      	bls.n	8007978 <_scanf_i+0x17c>
 8007964:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007968:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800796c:	4632      	mov	r2, r6
 800796e:	4650      	mov	r0, sl
 8007970:	4798      	blx	r3
 8007972:	f105 39ff 	add.w	r9, r5, #4294967295
 8007976:	464d      	mov	r5, r9
 8007978:	42bd      	cmp	r5, r7
 800797a:	d02d      	beq.n	80079d8 <_scanf_i+0x1dc>
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	f012 0210 	ands.w	r2, r2, #16
 8007982:	d113      	bne.n	80079ac <_scanf_i+0x1b0>
 8007984:	702a      	strb	r2, [r5, #0]
 8007986:	6863      	ldr	r3, [r4, #4]
 8007988:	9e01      	ldr	r6, [sp, #4]
 800798a:	4639      	mov	r1, r7
 800798c:	4650      	mov	r0, sl
 800798e:	47b0      	blx	r6
 8007990:	6821      	ldr	r1, [r4, #0]
 8007992:	f8d8 3000 	ldr.w	r3, [r8]
 8007996:	f011 0f20 	tst.w	r1, #32
 800799a:	d013      	beq.n	80079c4 <_scanf_i+0x1c8>
 800799c:	1d1a      	adds	r2, r3, #4
 800799e:	f8c8 2000 	str.w	r2, [r8]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6018      	str	r0, [r3, #0]
 80079a6:	68e3      	ldr	r3, [r4, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60e3      	str	r3, [r4, #12]
 80079ac:	1bed      	subs	r5, r5, r7
 80079ae:	44ab      	add	fp, r5
 80079b0:	6925      	ldr	r5, [r4, #16]
 80079b2:	445d      	add	r5, fp
 80079b4:	6125      	str	r5, [r4, #16]
 80079b6:	2000      	movs	r0, #0
 80079b8:	b007      	add	sp, #28
 80079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	f04f 0b00 	mov.w	fp, #0
 80079c2:	e7ca      	b.n	800795a <_scanf_i+0x15e>
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	f8c8 2000 	str.w	r2, [r8]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f011 0f01 	tst.w	r1, #1
 80079d0:	bf14      	ite	ne
 80079d2:	8018      	strhne	r0, [r3, #0]
 80079d4:	6018      	streq	r0, [r3, #0]
 80079d6:	e7e6      	b.n	80079a6 <_scanf_i+0x1aa>
 80079d8:	2001      	movs	r0, #1
 80079da:	e7ed      	b.n	80079b8 <_scanf_i+0x1bc>
 80079dc:	08007e54 	.word	0x08007e54
 80079e0:	08007c8d 	.word	0x08007c8d
 80079e4:	08007ba5 	.word	0x08007ba5
 80079e8:	08007f95 	.word	0x08007f95

080079ec <_read_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d07      	ldr	r5, [pc, #28]	; (8007a0c <_read_r+0x20>)
 80079f0:	4604      	mov	r4, r0
 80079f2:	4608      	mov	r0, r1
 80079f4:	4611      	mov	r1, r2
 80079f6:	2200      	movs	r2, #0
 80079f8:	602a      	str	r2, [r5, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f7f9 f89c 	bl	8000b38 <_read>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	d102      	bne.n	8007a0a <_read_r+0x1e>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	b103      	cbz	r3, 8007a0a <_read_r+0x1e>
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20001e94 	.word	0x20001e94

08007a10 <_sbrk_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d06      	ldr	r5, [pc, #24]	; (8007a2c <_sbrk_r+0x1c>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	602b      	str	r3, [r5, #0]
 8007a1c:	f7f9 f8de 	bl	8000bdc <_sbrk>
 8007a20:	1c43      	adds	r3, r0, #1
 8007a22:	d102      	bne.n	8007a2a <_sbrk_r+0x1a>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	b103      	cbz	r3, 8007a2a <_sbrk_r+0x1a>
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	20001e94 	.word	0x20001e94

08007a30 <__sccl>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	780b      	ldrb	r3, [r1, #0]
 8007a34:	4604      	mov	r4, r0
 8007a36:	2b5e      	cmp	r3, #94	; 0x5e
 8007a38:	bf0b      	itete	eq
 8007a3a:	784b      	ldrbeq	r3, [r1, #1]
 8007a3c:	1c48      	addne	r0, r1, #1
 8007a3e:	1c88      	addeq	r0, r1, #2
 8007a40:	2200      	movne	r2, #0
 8007a42:	bf08      	it	eq
 8007a44:	2201      	moveq	r2, #1
 8007a46:	1e61      	subs	r1, r4, #1
 8007a48:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007a4c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007a50:	42a9      	cmp	r1, r5
 8007a52:	d1fb      	bne.n	8007a4c <__sccl+0x1c>
 8007a54:	b90b      	cbnz	r3, 8007a5a <__sccl+0x2a>
 8007a56:	3801      	subs	r0, #1
 8007a58:	bd70      	pop	{r4, r5, r6, pc}
 8007a5a:	f082 0201 	eor.w	r2, r2, #1
 8007a5e:	54e2      	strb	r2, [r4, r3]
 8007a60:	4605      	mov	r5, r0
 8007a62:	4628      	mov	r0, r5
 8007a64:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007a68:	292d      	cmp	r1, #45	; 0x2d
 8007a6a:	d006      	beq.n	8007a7a <__sccl+0x4a>
 8007a6c:	295d      	cmp	r1, #93	; 0x5d
 8007a6e:	d0f3      	beq.n	8007a58 <__sccl+0x28>
 8007a70:	b909      	cbnz	r1, 8007a76 <__sccl+0x46>
 8007a72:	4628      	mov	r0, r5
 8007a74:	e7f0      	b.n	8007a58 <__sccl+0x28>
 8007a76:	460b      	mov	r3, r1
 8007a78:	e7f1      	b.n	8007a5e <__sccl+0x2e>
 8007a7a:	786e      	ldrb	r6, [r5, #1]
 8007a7c:	2e5d      	cmp	r6, #93	; 0x5d
 8007a7e:	d0fa      	beq.n	8007a76 <__sccl+0x46>
 8007a80:	42b3      	cmp	r3, r6
 8007a82:	dcf8      	bgt.n	8007a76 <__sccl+0x46>
 8007a84:	3502      	adds	r5, #2
 8007a86:	4619      	mov	r1, r3
 8007a88:	3101      	adds	r1, #1
 8007a8a:	428e      	cmp	r6, r1
 8007a8c:	5462      	strb	r2, [r4, r1]
 8007a8e:	dcfb      	bgt.n	8007a88 <__sccl+0x58>
 8007a90:	1af1      	subs	r1, r6, r3
 8007a92:	3901      	subs	r1, #1
 8007a94:	1c58      	adds	r0, r3, #1
 8007a96:	42b3      	cmp	r3, r6
 8007a98:	bfa8      	it	ge
 8007a9a:	2100      	movge	r1, #0
 8007a9c:	1843      	adds	r3, r0, r1
 8007a9e:	e7e0      	b.n	8007a62 <__sccl+0x32>

08007aa0 <_strtol_l.constprop.0>:
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa6:	d001      	beq.n	8007aac <_strtol_l.constprop.0+0xc>
 8007aa8:	2b24      	cmp	r3, #36	; 0x24
 8007aaa:	d906      	bls.n	8007aba <_strtol_l.constprop.0+0x1a>
 8007aac:	f7fe ff5e 	bl	800696c <__errno>
 8007ab0:	2316      	movs	r3, #22
 8007ab2:	6003      	str	r3, [r0, #0]
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007ba0 <_strtol_l.constprop.0+0x100>
 8007abe:	460d      	mov	r5, r1
 8007ac0:	462e      	mov	r6, r5
 8007ac2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ac6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aca:	f017 0708 	ands.w	r7, r7, #8
 8007ace:	d1f7      	bne.n	8007ac0 <_strtol_l.constprop.0+0x20>
 8007ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ad2:	d132      	bne.n	8007b3a <_strtol_l.constprop.0+0x9a>
 8007ad4:	782c      	ldrb	r4, [r5, #0]
 8007ad6:	2701      	movs	r7, #1
 8007ad8:	1cb5      	adds	r5, r6, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d05b      	beq.n	8007b96 <_strtol_l.constprop.0+0xf6>
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d109      	bne.n	8007af6 <_strtol_l.constprop.0+0x56>
 8007ae2:	2c30      	cmp	r4, #48	; 0x30
 8007ae4:	d107      	bne.n	8007af6 <_strtol_l.constprop.0+0x56>
 8007ae6:	782c      	ldrb	r4, [r5, #0]
 8007ae8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007aec:	2c58      	cmp	r4, #88	; 0x58
 8007aee:	d14d      	bne.n	8007b8c <_strtol_l.constprop.0+0xec>
 8007af0:	786c      	ldrb	r4, [r5, #1]
 8007af2:	2310      	movs	r3, #16
 8007af4:	3502      	adds	r5, #2
 8007af6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007afa:	f108 38ff 	add.w	r8, r8, #4294967295
 8007afe:	f04f 0c00 	mov.w	ip, #0
 8007b02:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b06:	4666      	mov	r6, ip
 8007b08:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b10:	f1be 0f09 	cmp.w	lr, #9
 8007b14:	d816      	bhi.n	8007b44 <_strtol_l.constprop.0+0xa4>
 8007b16:	4674      	mov	r4, lr
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	dd24      	ble.n	8007b66 <_strtol_l.constprop.0+0xc6>
 8007b1c:	f1bc 0f00 	cmp.w	ip, #0
 8007b20:	db1e      	blt.n	8007b60 <_strtol_l.constprop.0+0xc0>
 8007b22:	45b1      	cmp	r9, r6
 8007b24:	d31c      	bcc.n	8007b60 <_strtol_l.constprop.0+0xc0>
 8007b26:	d101      	bne.n	8007b2c <_strtol_l.constprop.0+0x8c>
 8007b28:	45a2      	cmp	sl, r4
 8007b2a:	db19      	blt.n	8007b60 <_strtol_l.constprop.0+0xc0>
 8007b2c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b30:	f04f 0c01 	mov.w	ip, #1
 8007b34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b38:	e7e8      	b.n	8007b0c <_strtol_l.constprop.0+0x6c>
 8007b3a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b3c:	bf04      	itt	eq
 8007b3e:	782c      	ldrbeq	r4, [r5, #0]
 8007b40:	1cb5      	addeq	r5, r6, #2
 8007b42:	e7ca      	b.n	8007ada <_strtol_l.constprop.0+0x3a>
 8007b44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b48:	f1be 0f19 	cmp.w	lr, #25
 8007b4c:	d801      	bhi.n	8007b52 <_strtol_l.constprop.0+0xb2>
 8007b4e:	3c37      	subs	r4, #55	; 0x37
 8007b50:	e7e2      	b.n	8007b18 <_strtol_l.constprop.0+0x78>
 8007b52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b56:	f1be 0f19 	cmp.w	lr, #25
 8007b5a:	d804      	bhi.n	8007b66 <_strtol_l.constprop.0+0xc6>
 8007b5c:	3c57      	subs	r4, #87	; 0x57
 8007b5e:	e7db      	b.n	8007b18 <_strtol_l.constprop.0+0x78>
 8007b60:	f04f 3cff 	mov.w	ip, #4294967295
 8007b64:	e7e6      	b.n	8007b34 <_strtol_l.constprop.0+0x94>
 8007b66:	f1bc 0f00 	cmp.w	ip, #0
 8007b6a:	da05      	bge.n	8007b78 <_strtol_l.constprop.0+0xd8>
 8007b6c:	2322      	movs	r3, #34	; 0x22
 8007b6e:	6003      	str	r3, [r0, #0]
 8007b70:	4646      	mov	r6, r8
 8007b72:	b942      	cbnz	r2, 8007b86 <_strtol_l.constprop.0+0xe6>
 8007b74:	4630      	mov	r0, r6
 8007b76:	e79e      	b.n	8007ab6 <_strtol_l.constprop.0+0x16>
 8007b78:	b107      	cbz	r7, 8007b7c <_strtol_l.constprop.0+0xdc>
 8007b7a:	4276      	negs	r6, r6
 8007b7c:	2a00      	cmp	r2, #0
 8007b7e:	d0f9      	beq.n	8007b74 <_strtol_l.constprop.0+0xd4>
 8007b80:	f1bc 0f00 	cmp.w	ip, #0
 8007b84:	d000      	beq.n	8007b88 <_strtol_l.constprop.0+0xe8>
 8007b86:	1e69      	subs	r1, r5, #1
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	e7f3      	b.n	8007b74 <_strtol_l.constprop.0+0xd4>
 8007b8c:	2430      	movs	r4, #48	; 0x30
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1b1      	bne.n	8007af6 <_strtol_l.constprop.0+0x56>
 8007b92:	2308      	movs	r3, #8
 8007b94:	e7af      	b.n	8007af6 <_strtol_l.constprop.0+0x56>
 8007b96:	2c30      	cmp	r4, #48	; 0x30
 8007b98:	d0a5      	beq.n	8007ae6 <_strtol_l.constprop.0+0x46>
 8007b9a:	230a      	movs	r3, #10
 8007b9c:	e7ab      	b.n	8007af6 <_strtol_l.constprop.0+0x56>
 8007b9e:	bf00      	nop
 8007ba0:	08007f98 	.word	0x08007f98

08007ba4 <_strtol_r>:
 8007ba4:	f7ff bf7c 	b.w	8007aa0 <_strtol_l.constprop.0>

08007ba8 <_strtoul_l.constprop.0>:
 8007ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4f36      	ldr	r7, [pc, #216]	; (8007c88 <_strtoul_l.constprop.0+0xe0>)
 8007bae:	4686      	mov	lr, r0
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bb8:	5de6      	ldrb	r6, [r4, r7]
 8007bba:	f016 0608 	ands.w	r6, r6, #8
 8007bbe:	d1f8      	bne.n	8007bb2 <_strtoul_l.constprop.0+0xa>
 8007bc0:	2c2d      	cmp	r4, #45	; 0x2d
 8007bc2:	d12f      	bne.n	8007c24 <_strtoul_l.constprop.0+0x7c>
 8007bc4:	782c      	ldrb	r4, [r5, #0]
 8007bc6:	2601      	movs	r6, #1
 8007bc8:	1c85      	adds	r5, r0, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d057      	beq.n	8007c7e <_strtoul_l.constprop.0+0xd6>
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d109      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007bd2:	2c30      	cmp	r4, #48	; 0x30
 8007bd4:	d107      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007bd6:	7828      	ldrb	r0, [r5, #0]
 8007bd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bdc:	2858      	cmp	r0, #88	; 0x58
 8007bde:	d149      	bne.n	8007c74 <_strtoul_l.constprop.0+0xcc>
 8007be0:	786c      	ldrb	r4, [r5, #1]
 8007be2:	2310      	movs	r3, #16
 8007be4:	3502      	adds	r5, #2
 8007be6:	f04f 38ff 	mov.w	r8, #4294967295
 8007bea:	2700      	movs	r7, #0
 8007bec:	fbb8 f8f3 	udiv	r8, r8, r3
 8007bf0:	fb03 f908 	mul.w	r9, r3, r8
 8007bf4:	ea6f 0909 	mvn.w	r9, r9
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007bfe:	f1bc 0f09 	cmp.w	ip, #9
 8007c02:	d814      	bhi.n	8007c2e <_strtoul_l.constprop.0+0x86>
 8007c04:	4664      	mov	r4, ip
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	dd22      	ble.n	8007c50 <_strtoul_l.constprop.0+0xa8>
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	db1d      	blt.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c0e:	4580      	cmp	r8, r0
 8007c10:	d31b      	bcc.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c12:	d101      	bne.n	8007c18 <_strtoul_l.constprop.0+0x70>
 8007c14:	45a1      	cmp	r9, r4
 8007c16:	db18      	blt.n	8007c4a <_strtoul_l.constprop.0+0xa2>
 8007c18:	fb00 4003 	mla	r0, r0, r3, r4
 8007c1c:	2701      	movs	r7, #1
 8007c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c22:	e7ea      	b.n	8007bfa <_strtoul_l.constprop.0+0x52>
 8007c24:	2c2b      	cmp	r4, #43	; 0x2b
 8007c26:	bf04      	itt	eq
 8007c28:	782c      	ldrbeq	r4, [r5, #0]
 8007c2a:	1c85      	addeq	r5, r0, #2
 8007c2c:	e7cd      	b.n	8007bca <_strtoul_l.constprop.0+0x22>
 8007c2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c32:	f1bc 0f19 	cmp.w	ip, #25
 8007c36:	d801      	bhi.n	8007c3c <_strtoul_l.constprop.0+0x94>
 8007c38:	3c37      	subs	r4, #55	; 0x37
 8007c3a:	e7e4      	b.n	8007c06 <_strtoul_l.constprop.0+0x5e>
 8007c3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c40:	f1bc 0f19 	cmp.w	ip, #25
 8007c44:	d804      	bhi.n	8007c50 <_strtoul_l.constprop.0+0xa8>
 8007c46:	3c57      	subs	r4, #87	; 0x57
 8007c48:	e7dd      	b.n	8007c06 <_strtoul_l.constprop.0+0x5e>
 8007c4a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c4e:	e7e6      	b.n	8007c1e <_strtoul_l.constprop.0+0x76>
 8007c50:	2f00      	cmp	r7, #0
 8007c52:	da07      	bge.n	8007c64 <_strtoul_l.constprop.0+0xbc>
 8007c54:	2322      	movs	r3, #34	; 0x22
 8007c56:	f8ce 3000 	str.w	r3, [lr]
 8007c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5e:	b932      	cbnz	r2, 8007c6e <_strtoul_l.constprop.0+0xc6>
 8007c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c64:	b106      	cbz	r6, 8007c68 <_strtoul_l.constprop.0+0xc0>
 8007c66:	4240      	negs	r0, r0
 8007c68:	2a00      	cmp	r2, #0
 8007c6a:	d0f9      	beq.n	8007c60 <_strtoul_l.constprop.0+0xb8>
 8007c6c:	b107      	cbz	r7, 8007c70 <_strtoul_l.constprop.0+0xc8>
 8007c6e:	1e69      	subs	r1, r5, #1
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	e7f5      	b.n	8007c60 <_strtoul_l.constprop.0+0xb8>
 8007c74:	2430      	movs	r4, #48	; 0x30
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1b5      	bne.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	e7b3      	b.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c7e:	2c30      	cmp	r4, #48	; 0x30
 8007c80:	d0a9      	beq.n	8007bd6 <_strtoul_l.constprop.0+0x2e>
 8007c82:	230a      	movs	r3, #10
 8007c84:	e7af      	b.n	8007be6 <_strtoul_l.constprop.0+0x3e>
 8007c86:	bf00      	nop
 8007c88:	08007f98 	.word	0x08007f98

08007c8c <_strtoul_r>:
 8007c8c:	f7ff bf8c 	b.w	8007ba8 <_strtoul_l.constprop.0>

08007c90 <__submore>:
 8007c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c94:	460c      	mov	r4, r1
 8007c96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	d11d      	bne.n	8007cdc <__submore+0x4c>
 8007ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ca4:	f7ff fb0a 	bl	80072bc <_malloc_r>
 8007ca8:	b918      	cbnz	r0, 8007cb2 <__submore+0x22>
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb6:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cb8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8007cbe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007cc2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007cc6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007cca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007cce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007cd2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007cd6:	6020      	str	r0, [r4, #0]
 8007cd8:	2000      	movs	r0, #0
 8007cda:	e7e8      	b.n	8007cae <__submore+0x1e>
 8007cdc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007cde:	0077      	lsls	r7, r6, #1
 8007ce0:	463a      	mov	r2, r7
 8007ce2:	f000 f83d 	bl	8007d60 <_realloc_r>
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d0de      	beq.n	8007caa <__submore+0x1a>
 8007cec:	eb00 0806 	add.w	r8, r0, r6
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4632      	mov	r2, r6
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	f7fe fe63 	bl	80069c0 <memcpy>
 8007cfa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007cfe:	f8c4 8000 	str.w	r8, [r4]
 8007d02:	e7e9      	b.n	8007cd8 <__submore+0x48>

08007d04 <_fstat_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4d07      	ldr	r5, [pc, #28]	; (8007d24 <_fstat_r+0x20>)
 8007d08:	2300      	movs	r3, #0
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	f7f8 ff3a 	bl	8000b8a <_fstat>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d102      	bne.n	8007d20 <_fstat_r+0x1c>
 8007d1a:	682b      	ldr	r3, [r5, #0]
 8007d1c:	b103      	cbz	r3, 8007d20 <_fstat_r+0x1c>
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	bd38      	pop	{r3, r4, r5, pc}
 8007d22:	bf00      	nop
 8007d24:	20001e94 	.word	0x20001e94

08007d28 <_isatty_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4d06      	ldr	r5, [pc, #24]	; (8007d44 <_isatty_r+0x1c>)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	4604      	mov	r4, r0
 8007d30:	4608      	mov	r0, r1
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7f8 ff39 	bl	8000baa <_isatty>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_isatty_r+0x1a>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_isatty_r+0x1a>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20001e94 	.word	0x20001e94

08007d48 <__malloc_lock>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__malloc_lock+0x8>)
 8007d4a:	f7ff b9d1 	b.w	80070f0 <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	20001e88 	.word	0x20001e88

08007d54 <__malloc_unlock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__malloc_unlock+0x8>)
 8007d56:	f7ff b9cc 	b.w	80070f2 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	20001e88 	.word	0x20001e88

08007d60 <_realloc_r>:
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	4680      	mov	r8, r0
 8007d66:	4614      	mov	r4, r2
 8007d68:	460e      	mov	r6, r1
 8007d6a:	b921      	cbnz	r1, 8007d76 <_realloc_r+0x16>
 8007d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d70:	4611      	mov	r1, r2
 8007d72:	f7ff baa3 	b.w	80072bc <_malloc_r>
 8007d76:	b92a      	cbnz	r2, 8007d84 <_realloc_r+0x24>
 8007d78:	f7ff fa34 	bl	80071e4 <_free_r>
 8007d7c:	4625      	mov	r5, r4
 8007d7e:	4628      	mov	r0, r5
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	f000 f81b 	bl	8007dbe <_malloc_usable_size_r>
 8007d88:	4284      	cmp	r4, r0
 8007d8a:	4607      	mov	r7, r0
 8007d8c:	d802      	bhi.n	8007d94 <_realloc_r+0x34>
 8007d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d92:	d812      	bhi.n	8007dba <_realloc_r+0x5a>
 8007d94:	4621      	mov	r1, r4
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fa90 	bl	80072bc <_malloc_r>
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d0ed      	beq.n	8007d7e <_realloc_r+0x1e>
 8007da2:	42bc      	cmp	r4, r7
 8007da4:	4622      	mov	r2, r4
 8007da6:	4631      	mov	r1, r6
 8007da8:	bf28      	it	cs
 8007daa:	463a      	movcs	r2, r7
 8007dac:	f7fe fe08 	bl	80069c0 <memcpy>
 8007db0:	4631      	mov	r1, r6
 8007db2:	4640      	mov	r0, r8
 8007db4:	f7ff fa16 	bl	80071e4 <_free_r>
 8007db8:	e7e1      	b.n	8007d7e <_realloc_r+0x1e>
 8007dba:	4635      	mov	r5, r6
 8007dbc:	e7df      	b.n	8007d7e <_realloc_r+0x1e>

08007dbe <_malloc_usable_size_r>:
 8007dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc2:	1f18      	subs	r0, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfbc      	itt	lt
 8007dc8:	580b      	ldrlt	r3, [r1, r0]
 8007dca:	18c0      	addlt	r0, r0, r3
 8007dcc:	4770      	bx	lr
	...

08007dd0 <_init>:
 8007dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dd2:	bf00      	nop
 8007dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd6:	bc08      	pop	{r3}
 8007dd8:	469e      	mov	lr, r3
 8007dda:	4770      	bx	lr

08007ddc <_fini>:
 8007ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dde:	bf00      	nop
 8007de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de2:	bc08      	pop	{r3}
 8007de4:	469e      	mov	lr, r3
 8007de6:	4770      	bx	lr
