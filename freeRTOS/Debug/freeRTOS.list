
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae8  08009ae8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af0  08009af0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af0  08009af0  00019af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002708  20000074  08009b6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000277c  08009b6c  0002277c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215b4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e7  00000000  00000000  00041658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  00045b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a18  00000000  00000000  00047710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af3f  00000000  00000000  00049128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020aa8  00000000  00000000  00074067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001017bc  00000000  00000000  00094b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001962cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000804c  00000000  00000000  0019631c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009708 	.word	0x08009708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009708 	.word	0x08009708

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <_write>:
static int cmdprint = 0;


////////////////////////////////////////////////////////////////////////
int _write(int fd, char* ptr, int len)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295
 80005b8:	68b9      	ldr	r1, [r7, #8]
 80005ba:	4804      	ldr	r0, [pc, #16]	; (80005cc <_write+0x28>)
 80005bc:	f003 fc50 	bl	8003e60 <HAL_UART_Transmit>
	return len;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200001bc 	.word	0x200001bc

080005d0 <Communication_commTask>:
//////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
int Communication_commTask()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80005d6:	1db9      	adds	r1, r7, #6
 80005d8:	230a      	movs	r3, #10
 80005da:	2201      	movs	r2, #1
 80005dc:	4836      	ldr	r0, [pc, #216]	; (80006b8 <Communication_commTask+0xe8>)
 80005de:	f003 fcd3 	bl	8003f88 <HAL_UART_Receive>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d020      	beq.n	800062e <Communication_commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80005ec:	4b32      	ldr	r3, [pc, #200]	; (80006b8 <Communication_commTask+0xe8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d011      	beq.n	800061e <Communication_commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005fa:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <Communication_commTask+0xe8>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2208      	movs	r2, #8
 8000600:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8000602:	e00c      	b.n	800061e <Communication_commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <Communication_commTask+0xec>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	492c      	ldr	r1, [pc, #176]	; (80006bc <Communication_commTask+0xec>)
 800060c:	600a      	str	r2, [r1, #0]
 800060e:	4a2c      	ldr	r2, [pc, #176]	; (80006c0 <Communication_commTask+0xf0>)
 8000610:	1899      	adds	r1, r3, r2
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	2201      	movs	r2, #1
 8000618:	4827      	ldr	r0, [pc, #156]	; (80006b8 <Communication_commTask+0xe8>)
 800061a:	f003 fc21 	bl	8003e60 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <Communication_commTask+0xec>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <Communication_commTask+0xf4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbec      	blt.n	8000604 <Communication_commTask+0x34>
		}

		return 0;
 800062a:	2300      	movs	r3, #0
 800062c:	e03f      	b.n	80006ae <Communication_commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b0d      	cmp	r3, #13
 8000632:	d023      	beq.n	800067c <Communication_commTask+0xac>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	2b0a      	cmp	r3, #10
 8000638:	d020      	beq.n	800067c <Communication_commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 800063a:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <Communication_commTask+0xf4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b63      	cmp	r3, #99	; 0x63
 8000640:	dd05      	ble.n	800064e <Communication_commTask+0x7e>
		{
			cmdcount = 0;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <Communication_commTask+0xf4>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <Communication_commTask+0xec>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <Communication_commTask+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	491b      	ldr	r1, [pc, #108]	; (80006c4 <Communication_commTask+0xf4>)
 8000656:	600a      	str	r2, [r1, #0]
 8000658:	79b9      	ldrb	r1, [r7, #6]
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <Communication_commTask+0xf0>)
 800065c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e025      	b.n	80006ae <Communication_commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <Communication_commTask+0xec>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	4914      	ldr	r1, [pc, #80]	; (80006bc <Communication_commTask+0xec>)
 800066a:	600a      	str	r2, [r1, #0]
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <Communication_commTask+0xf0>)
 800066e:	1899      	adds	r1, r3, r2
 8000670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000674:	2201      	movs	r2, #1
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <Communication_commTask+0xe8>)
 8000678:	f003 fbf2 	bl	8003e60 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <Communication_commTask+0xec>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <Communication_commTask+0xf4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbec      	blt.n	8000662 <Communication_commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068c:	2202      	movs	r2, #2
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <Communication_commTask+0xf8>)
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <Communication_commTask+0xe8>)
 8000692:	f003 fbe5 	bl	8003e60 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Communication_commTask+0xf4>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <Communication_commTask+0xf0>)
 800069c:	2100      	movs	r1, #0
 800069e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <Communication_commTask+0xf4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <Communication_commTask+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
	return 1;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200001bc 	.word	0x200001bc
 80006bc:	200000f8 	.word	0x200000f8
 80006c0:	20000090 	.word	0x20000090
 80006c4:	200000f4 	.word	0x200000f4
 80006c8:	08009720 	.word	0x08009720

080006cc <Communication_handleCommand>:


void Communication_handleCommand()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	; 0x30
 80006d0:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

   int params = sscanf((const char*)cmdbuffer, "%s %s", cmd, param );
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	f107 0218 	add.w	r2, r7, #24
 80006d8:	4916      	ldr	r1, [pc, #88]	; (8000734 <Communication_handleCommand+0x68>)
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <Communication_handleCommand+0x6c>)
 80006dc:	f007 fba0 	bl	8007e20 <siscanf>
 80006e0:	62f8      	str	r0, [r7, #44]	; 0x2c
   if (params == 0){
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d020      	beq.n	800072a <Communication_handleCommand+0x5e>
	   return;
   }

   if (strcmp(cmd, "redBlink") == 0){
 80006e8:	f107 0318 	add.w	r3, r7, #24
 80006ec:	4913      	ldr	r1, [pc, #76]	; (800073c <Communication_handleCommand+0x70>)
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff fd6e 	bl	80001d0 <strcmp>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <Communication_handleCommand+0x38>
	   setBlinkLed(&ledR,param);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <Communication_handleCommand+0x74>)
 8000700:	f000 f876 	bl	80007f0 <setBlinkLed>
   }
   if (strcmp(cmd, "blueBlink") == 0){
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	490e      	ldr	r1, [pc, #56]	; (8000744 <Communication_handleCommand+0x78>)
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd60 	bl	80001d0 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <Communication_handleCommand+0x56>
	   setBlinkLed(&ledB , param);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <Communication_handleCommand+0x7c>)
 800071c:	f000 f868 	bl	80007f0 <setBlinkLed>
 8000720:	e004      	b.n	800072c <Communication_handleCommand+0x60>
   }
   else{
   	  printf("Invalid command\r\n");
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <Communication_handleCommand+0x80>)
 8000724:	f007 fb74 	bl	8007e10 <puts>
 8000728:	e000      	b.n	800072c <Communication_handleCommand+0x60>
	   return;
 800072a:	bf00      	nop
   }
}
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08009724 	.word	0x08009724
 8000738:	20000090 	.word	0x20000090
 800073c:	0800972c 	.word	0x0800972c
 8000740:	20000104 	.word	0x20000104
 8000744:	08009738 	.word	0x08009738
 8000748:	2000011c 	.word	0x2000011c
 800074c:	08009744 	.word	0x08009744

08000750 <Entry_uartTask>:

void Entry_uartTask(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_uartTask */
  /* Infinite loop */
  for(;;)
  {
	  if (Communication_commTask()){
 8000758:	f7ff ff3a 	bl	80005d0 <Communication_commTask>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0fa      	beq.n	8000758 <Entry_uartTask+0x8>
		  Communication_handleCommand();
 8000762:	f7ff ffb3 	bl	80006cc <Communication_handleCommand>
	  if (Communication_commTask()){
 8000766:	e7f7      	b.n	8000758 <Entry_uartTask+0x8>

08000768 <Led_init>:

//static int delay = 500;


void Led_init(Led* led , GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	80fb      	strh	r3, [r7, #6]
	led->state = STATE_OFF;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
	led->counter = 0 ;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
	led->GPIOx = GPIOx;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	609a      	str	r2, [r3, #8]
	led->GPIO_Pin = GPIO_Pin;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	88fa      	ldrh	r2, [r7, #6]
 800078c:	819a      	strh	r2, [r3, #12]
	led->delay = 0;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <Entry_blinkTask>:


void Entry_blinkTask(void *obj)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_blinkTask */
  /* Infinite loop */
  for(;;)
  {
	  Led *led = (Led*)obj;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	899b      	ldrh	r3, [r3, #12]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4610      	mov	r0, r2
 80007b8:	f001 f832 	bl	8001820 <HAL_GPIO_TogglePin>
	  osDelay(led->delay);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f004 fde9 	bl	8005398 <osDelay>
  {
 80007c6:	e7ef      	b.n	80007a8 <Entry_blinkTask+0x8>

080007c8 <Entry_blinkRedTask>:
  }
  /* USER CODE END Entry_blinkTask */
}

void Entry_blinkRedTask(void *obj)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_blinkRedTask */
  /* Infinite loop */
  for(;;)
  {
	  Led *led = (Led*)obj;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	4619      	mov	r1, r3
 80007de:	4610      	mov	r0, r2
 80007e0:	f001 f81e 	bl	8001820 <HAL_GPIO_TogglePin>
	  osDelay(led->delay);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fdd5 	bl	8005398 <osDelay>
  {
 80007ee:	e7ef      	b.n	80007d0 <Entry_blinkRedTask+0x8>

080007f0 <setBlinkLed>:
  }
  /* USER CODE END Entry_blinkRedTask */
}

void setBlinkLed(void* obj, char* param)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	Led *led = (Led*)obj;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60fb      	str	r3, [r7, #12]
	led->delay= atoi (param);
 80007fe:	6838      	ldr	r0, [r7, #0]
 8000800:	f007 fa3c 	bl	8007c7c <atoi>
 8000804:	4602      	mov	r2, r0
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	615a      	str	r2, [r3, #20]
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <Entry_rtcTask>:

extern I2C_HandleTypeDef hi2c1;
uint8_t readBuff[7];

void Entry_rtcTask(void *obj)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af04      	add	r7, sp, #16
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_rtcTask */
	CALENDAR *mytime = (CALENDAR*)obj;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_I2C_Mem_Read(&hi2c1, 208, 0, 1, readBuff, 7, 0xff);
 8000820:	23ff      	movs	r3, #255	; 0xff
 8000822:	9302      	str	r3, [sp, #8]
 8000824:	2307      	movs	r3, #7
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <Entry_rtcTask+0xd4>)
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2301      	movs	r3, #1
 800082e:	2200      	movs	r2, #0
 8000830:	21d0      	movs	r1, #208	; 0xd0
 8000832:	482e      	ldr	r0, [pc, #184]	; (80008ec <Entry_rtcTask+0xd8>)
 8000834:	f001 f89e 	bl	8001974 <HAL_I2C_Mem_Read>
	  mytime->seconds = (readBuff[0] & 15);
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <Entry_rtcTask+0xd4>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	f003 020f 	and.w	r2, r3, #15
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	601a      	str	r2, [r3, #0]
	  mytime->seconds10 = (readBuff[0] >> 4);
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <Entry_rtcTask+0xd4>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	605a      	str	r2, [r3, #4]
	  mytime->minutes = (readBuff[1] & 15);
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <Entry_rtcTask+0xd4>)
 8000854:	785b      	ldrb	r3, [r3, #1]
 8000856:	f003 020f 	and.w	r2, r3, #15
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	609a      	str	r2, [r3, #8]
	  mytime->minutes10 = (readBuff[1] >>4);
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <Entry_rtcTask+0xd4>)
 8000860:	785b      	ldrb	r3, [r3, #1]
 8000862:	091b      	lsrs	r3, r3, #4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	60da      	str	r2, [r3, #12]
	  mytime->hours = (readBuff[2] & 15);
 800086c:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <Entry_rtcTask+0xd4>)
 800086e:	789b      	ldrb	r3, [r3, #2]
 8000870:	f003 020f 	and.w	r2, r3, #15
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	611a      	str	r2, [r3, #16]
	  mytime->hours10 = (readBuff[2] >> 4);
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <Entry_rtcTask+0xd4>)
 800087a:	789b      	ldrb	r3, [r3, #2]
 800087c:	091b      	lsrs	r3, r3, #4
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	615a      	str	r2, [r3, #20]
	  mytime->days = readBuff[3];
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <Entry_rtcTask+0xd4>)
 8000888:	78db      	ldrb	r3, [r3, #3]
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	619a      	str	r2, [r3, #24]
	  mytime->date = (readBuff[4] & 15);
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <Entry_rtcTask+0xd4>)
 8000892:	791b      	ldrb	r3, [r3, #4]
 8000894:	f003 020f 	and.w	r2, r3, #15
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	61da      	str	r2, [r3, #28]
	  mytime->date10 = (readBuff[4] >> 4);
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <Entry_rtcTask+0xd4>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	621a      	str	r2, [r3, #32]
	  mytime->month = (readBuff[5] & 15);
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <Entry_rtcTask+0xd4>)
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	f003 020f 	and.w	r2, r3, #15
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
	  mytime->month10 = (readBuff[5] >> 4);
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <Entry_rtcTask+0xd4>)
 80008b8:	795b      	ldrb	r3, [r3, #5]
 80008ba:	091b      	lsrs	r3, r3, #4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
	  mytime->year = (readBuff[6] & 15);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <Entry_rtcTask+0xd4>)
 80008c6:	799b      	ldrb	r3, [r3, #6]
 80008c8:	f003 020f 	and.w	r2, r3, #15
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
	  mytime->year10 = (readBuff[6] >> 4);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <Entry_rtcTask+0xd4>)
 80008d2:	799b      	ldrb	r3, [r3, #6]
 80008d4:	091b      	lsrs	r3, r3, #4
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	461a      	mov	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
	  osDelay(1);
 80008de:	2001      	movs	r0, #1
 80008e0:	f004 fd5a 	bl	8005398 <osDelay>
	  HAL_I2C_Mem_Read(&hi2c1, 208, 0, 1, readBuff, 7, 0xff);
 80008e4:	e79c      	b.n	8000820 <Entry_rtcTask+0xc>
 80008e6:	bf00      	nop
 80008e8:	200000fc 	.word	0x200000fc
 80008ec:	20000168 	.word	0x20000168

080008f0 <Entry_printTask>:
  }
  /* USER CODE END Entry_rtcTask */
}

void Entry_printTask(void *obj)
{
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f2:	b095      	sub	sp, #84	; 0x54
 80008f4:	af0a      	add	r7, sp, #40	; 0x28
 80008f6:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN Entry_printTask */
	CALENDAR *mytime = (CALENDAR*)obj;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	 printf("year month date day hour min sec \n\r");
 80008fc:	481d      	ldr	r0, [pc, #116]	; (8000974 <Entry_printTask+0x84>)
 80008fe:	f007 fa01 	bl	8007d04 <iprintf>
	 printf("20%d%d:%d%d:%d%d:%d:%d%d:%d%d:%d%d \n\r"
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090c:	617a      	str	r2, [r7, #20]
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000912:	6138      	str	r0, [r7, #16]
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800091a:	6a12      	ldr	r2, [r2, #32]
 800091c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800091e:	69c9      	ldr	r1, [r1, #28]
 8000920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000922:	6980      	ldr	r0, [r0, #24]
 8000924:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000926:	6964      	ldr	r4, [r4, #20]
 8000928:	60fc      	str	r4, [r7, #12]
 800092a:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800092c:	692d      	ldr	r5, [r5, #16]
 800092e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000930:	68f6      	ldr	r6, [r6, #12]
 8000932:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000934:	68a4      	ldr	r4, [r4, #8]
 8000936:	60bc      	str	r4, [r7, #8]
 8000938:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800093a:	6864      	ldr	r4, [r4, #4]
 800093c:	607c      	str	r4, [r7, #4]
 800093e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000940:	6824      	ldr	r4, [r4, #0]
 8000942:	9409      	str	r4, [sp, #36]	; 0x24
 8000944:	687c      	ldr	r4, [r7, #4]
 8000946:	9408      	str	r4, [sp, #32]
 8000948:	68bc      	ldr	r4, [r7, #8]
 800094a:	9407      	str	r4, [sp, #28]
 800094c:	9606      	str	r6, [sp, #24]
 800094e:	9505      	str	r5, [sp, #20]
 8000950:	68fc      	ldr	r4, [r7, #12]
 8000952:	9404      	str	r4, [sp, #16]
 8000954:	9003      	str	r0, [sp, #12]
 8000956:	9102      	str	r1, [sp, #8]
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	69b9      	ldr	r1, [r7, #24]
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <Entry_printTask+0x88>)
 8000964:	f007 f9ce 	bl	8007d04 <iprintf>
			 , mytime->date10, mytime->date, mytime->days
			 , mytime->hours10, mytime->hours
			 , mytime->minutes10, mytime->minutes
			 , mytime->seconds10, mytime->seconds);

    osDelay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f004 fd14 	bl	8005398 <osDelay>
	 printf("year month date day hour min sec \n\r");
 8000970:	e7c4      	b.n	80008fc <Entry_printTask+0xc>
 8000972:	bf00      	nop
 8000974:	08009758 	.word	0x08009758
 8000978:	0800977c 	.word	0x0800977c

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Led_init(&ledB , LD2_GPIO_Port , LD2_Pin );
 8000980:	2220      	movs	r2, #32
 8000982:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000986:	4824      	ldr	r0, [pc, #144]	; (8000a18 <main+0x9c>)
 8000988:	f7ff feee 	bl	8000768 <Led_init>
	Led_init(&ledR , LD1_GPIO_Port , LD1_Pin );
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000992:	4822      	ldr	r0, [pc, #136]	; (8000a1c <main+0xa0>)
 8000994:	f7ff fee8 	bl	8000768 <Led_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 fbde 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f866 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 f926 	bl	8000bf0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 f8f4 	bl	8000b90 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009a8:	f000 f8b2 	bl	8000b10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009ac:	f004 fc18 	bl	80051e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <main+0xa4>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	481b      	ldr	r0, [pc, #108]	; (8000a24 <main+0xa8>)
 80009b6:	f004 fc5d 	bl	8005274 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a1a      	ldr	r2, [pc, #104]	; (8000a28 <main+0xac>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(Entry_blinkTask, (void*) &ledB, &blinkTask_attributes);
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <main+0xb0>)
 80009c2:	4915      	ldr	r1, [pc, #84]	; (8000a18 <main+0x9c>)
 80009c4:	481a      	ldr	r0, [pc, #104]	; (8000a30 <main+0xb4>)
 80009c6:	f004 fc55 	bl	8005274 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <main+0xb8>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of uartTask */
  uartTaskHandle = osThreadNew(Entry_uartTask, NULL, &uartTask_attributes);
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <main+0xbc>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	4819      	ldr	r0, [pc, #100]	; (8000a3c <main+0xc0>)
 80009d6:	f004 fc4d 	bl	8005274 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <main+0xc4>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of blinkRedTask */
  blinkRedTaskHandle = osThreadNew(Entry_blinkRedTask, (void*) &ledR, &blinkRedTask_attributes);
 80009e0:	4a18      	ldr	r2, [pc, #96]	; (8000a44 <main+0xc8>)
 80009e2:	490e      	ldr	r1, [pc, #56]	; (8000a1c <main+0xa0>)
 80009e4:	4818      	ldr	r0, [pc, #96]	; (8000a48 <main+0xcc>)
 80009e6:	f004 fc45 	bl	8005274 <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <main+0xd0>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* creation of rtcTask */
  rtcTaskHandle = osThreadNew(Entry_rtcTask, (void*) &mytime, &rtcTask_attributes);
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <main+0xd4>)
 80009f2:	4918      	ldr	r1, [pc, #96]	; (8000a54 <main+0xd8>)
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <main+0xdc>)
 80009f6:	f004 fc3d 	bl	8005274 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <main+0xe0>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(Entry_printTask, (void*) &mytime, &printTask_attributes);
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <main+0xe4>)
 8000a02:	4914      	ldr	r1, [pc, #80]	; (8000a54 <main+0xd8>)
 8000a04:	4817      	ldr	r0, [pc, #92]	; (8000a64 <main+0xe8>)
 8000a06:	f004 fc35 	bl	8005274 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <main+0xec>)
 8000a0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a10:	f004 fc0a 	bl	8005228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <main+0x98>
 8000a16:	bf00      	nop
 8000a18:	2000011c 	.word	0x2000011c
 8000a1c:	20000104 	.word	0x20000104
 8000a20:	08009810 	.word	0x08009810
 8000a24:	08000cbd 	.word	0x08000cbd
 8000a28:	20000240 	.word	0x20000240
 8000a2c:	08009834 	.word	0x08009834
 8000a30:	080007a1 	.word	0x080007a1
 8000a34:	20000244 	.word	0x20000244
 8000a38:	08009858 	.word	0x08009858
 8000a3c:	08000751 	.word	0x08000751
 8000a40:	20000248 	.word	0x20000248
 8000a44:	0800987c 	.word	0x0800987c
 8000a48:	080007c9 	.word	0x080007c9
 8000a4c:	2000024c 	.word	0x2000024c
 8000a50:	080098a0 	.word	0x080098a0
 8000a54:	20000134 	.word	0x20000134
 8000a58:	08000815 	.word	0x08000815
 8000a5c:	20000250 	.word	0x20000250
 8000a60:	080098c4 	.word	0x080098c4
 8000a64:	080008f1 	.word	0x080008f1
 8000a68:	20000254 	.word	0x20000254

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b096      	sub	sp, #88	; 0x58
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2244      	movs	r2, #68	; 0x44
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 f93a 	bl	8007cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a92:	f001 fb81 	bl	8002198 <HAL_PWREx_ControlVoltageScaling>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a9c:	f000 f928 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aba:	230a      	movs	r3, #10
 8000abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fbb8 	bl	8002244 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ada:	f000 f909 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2104      	movs	r1, #4
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 ff80 	bl	80029fc <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b02:	f000 f8f5 	bl	8000cf0 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3758      	adds	r7, #88	; 0x58
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <MX_I2C1_Init+0x78>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <MX_I2C1_Init+0x7c>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b4c:	f000 fe82 	bl	8001854 <HAL_I2C_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b56:	f000 f8cb 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b5e:	f001 fa75 	bl	800204c <HAL_I2CEx_ConfigAnalogFilter>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b68:	f000 f8c2 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_I2C1_Init+0x74>)
 8000b70:	f001 fab7 	bl	80020e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 f8b9 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000168 	.word	0x20000168
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	10909cec 	.word	0x10909cec

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b96:	4a15      	ldr	r2, [pc, #84]	; (8000bec <MX_USART2_UART_Init+0x5c>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x58>)
 8000bd4:	f003 f8f6 	bl	8003dc4 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bde:	f000 f887 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200001bc 	.word	0x200001bc
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xc4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2160      	movs	r1, #96	; 0x60
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f000 fdbf 	bl	80017f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <MX_GPIO_Init+0xc8>)
 8000c8a:	f000 fc07 	bl	800149c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD1_Pin;
 8000c8e:	2360      	movs	r3, #96	; 0x60
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fbf8 	bl	800149c <HAL_GPIO_Init>

}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	48000800 	.word	0x48000800

08000cbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f004 fb67 	bl	8005398 <osDelay>
 8000cca:	e7fb      	b.n	8000cc4 <StartDefaultTask+0x8>

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f000 fa5b 	bl	8001198 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40014400 	.word	0x40014400

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <Error_Handler+0x8>
	...

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d32:	2200      	movs	r2, #0
 8000d34:	210f      	movs	r1, #15
 8000d36:	f06f 0001 	mvn.w	r0, #1
 8000d3a:	f000 fb05 	bl	8001348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0ac      	sub	sp, #176	; 0xb0
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2288      	movs	r2, #136	; 0x88
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f006 ffc1 	bl	8007cf4 <memset>
  if(hi2c->Instance==I2C1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_I2C_MspInit+0xb0>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d13b      	bne.n	8000df4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 f88d 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d94:	f7ff ffac 	bl	8000cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000db0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db8:	2312      	movs	r3, #18
 8000dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <HAL_I2C_MspInit+0xb8>)
 8000dd8:	f000 fb60 	bl	800149c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	6593      	str	r3, [r2, #88]	; 0x58
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_I2C_MspInit+0xb4>)
 8000dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	37b0      	adds	r7, #176	; 0xb0
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400

08000e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ac      	sub	sp, #176	; 0xb0
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2288      	movs	r2, #136	; 0x88
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f006 ff63 	bl	8007cf4 <memset>
  if(huart->Instance==USART2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <HAL_UART_MspInit+0xc0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d143      	bne.n	8000ec0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f82f 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e50:	f7ff ff4e 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0xc4>)
 8000e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e84:	230c      	movs	r3, #12
 8000e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eac:	f000 faf6 	bl	800149c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2105      	movs	r1, #5
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f000 fa47 	bl	8001348 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eba:	2026      	movs	r0, #38	; 0x26
 8000ebc:	f000 fa60 	bl	8001380 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	37b0      	adds	r7, #176	; 0xb0
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2019      	movs	r0, #25
 8000ee6:	f000 fa2f 	bl	8001348 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eea:	2019      	movs	r0, #25
 8000eec:	f000 fa48 	bl	8001380 <HAL_NVIC_EnableIRQ>

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_InitTick+0x9c>)
 8000ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef4:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_InitTick+0x9c>)
 8000ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efa:	6613      	str	r3, [r2, #96]	; 0x60
 8000efc:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_InitTick+0x9c>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f08:	f107 0210 	add.w	r2, r7, #16
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 ff36 	bl	8002d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f18:	f001 ff1e 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8000f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <HAL_InitTick+0xa0>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f38:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000f3a:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f4e:	f002 fc67 	bl	8003820 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f5a:	f002 fcc3 	bl	80038e4 <HAL_TIM_Base_Start_IT>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	431bde83 	.word	0x431bde83
 8000f74:	20000258 	.word	0x20000258
 8000f78:	40014400 	.word	0x40014400

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <NMI_Handler+0x4>

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fae:	f002 fd09 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000258 	.word	0x20000258

08000fbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <USART2_IRQHandler+0x10>)
 8000fc2:	f003 f8b3 	bl	800412c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001bc 	.word	0x200001bc

08000fd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fe2:	f3af 8000 	nop.w
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <_read+0x12>
	}

return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:
	}
	return len;
}

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001032:	605a      	str	r2, [r3, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f006 fdee 	bl	8007c84 <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20018000 	.word	0x20018000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	200002a4 	.word	0x200002a4
 80010dc:	20002780 	.word	0x20002780

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff ffea 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	; (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f006 fdad 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff fc21 	bl	800097c <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001148:	08009af8 	.word	0x08009af8
  ldr r2, =_sbss
 800114c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001150:	2000277c 	.word	0x2000277c

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>
	...

08001158 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_Init+0x3c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a0b      	ldr	r2, [pc, #44]	; (8001194 <HAL_Init+0x3c>)
 8001168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f8df 	bl	8001332 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001174:	200f      	movs	r0, #15
 8001176:	f7ff feab 	bl	8000ed0 <HAL_InitTick>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	e001      	b.n	800118a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001186:	f7ff fdb9 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800118a:	79fb      	ldrb	r3, [r7, #7]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	200002a8 	.word	0x200002a8

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	200002a8 	.word	0x200002a8

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff4c 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
 8001354:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800135a:	f7ff ff61 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800135e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	6978      	ldr	r0, [r7, #20]
 8001366:	f7ff ffb1 	bl	80012cc <NVIC_EncodePriority>
 800136a:	4602      	mov	r2, r0
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff80 	bl	8001278 <__NVIC_SetPriority>
}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff54 	bl	800123c <__NVIC_EnableIRQ>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d008      	beq.n	80013c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2204      	movs	r2, #4
 80013b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e022      	b.n	800140c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 020e 	bic.w	r2, r2, #14
 80013d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0201 	bic.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f003 021c 	and.w	r2, r3, #28
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d005      	beq.n	800143c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2204      	movs	r2, #4
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e029      	b.n	8001490 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 020e 	bic.w	r2, r2, #14
 800144a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	f003 021c 	and.w	r2, r3, #28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
    }
  }
  return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e17f      	b.n	80017ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2101      	movs	r1, #1
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	4013      	ands	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8171 	beq.w	80017a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d005      	beq.n	80014dc <HAL_GPIO_Init+0x40>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b03      	cmp	r3, #3
 8001548:	d118      	bne.n	800157c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001550:	2201      	movs	r2, #1
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f003 0201 	and.w	r2, r3, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b03      	cmp	r3, #3
 8001586:	d017      	beq.n	80015b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d123      	bne.n	800160c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691a      	ldr	r2, [r3, #16]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3208      	adds	r2, #8
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0203 	and.w	r2, r3, #3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80ac 	beq.w	80017a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_GPIO_Init+0x330>)
 8001650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_GPIO_Init+0x330>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6613      	str	r3, [r2, #96]	; 0x60
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_GPIO_Init+0x330>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001666:	4a5a      	ldr	r2, [pc, #360]	; (80017d0 <HAL_GPIO_Init+0x334>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001690:	d025      	beq.n	80016de <HAL_GPIO_Init+0x242>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <HAL_GPIO_Init+0x338>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_Init+0x23e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4e      	ldr	r2, [pc, #312]	; (80017d8 <HAL_GPIO_Init+0x33c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x23a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4d      	ldr	r2, [pc, #308]	; (80017dc <HAL_GPIO_Init+0x340>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x236>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_GPIO_Init+0x344>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x232>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4b      	ldr	r2, [pc, #300]	; (80017e4 <HAL_GPIO_Init+0x348>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x22e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <HAL_GPIO_Init+0x34c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x22a>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x244>
 80016de:	2300      	movs	r3, #0
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016f0:	4937      	ldr	r1, [pc, #220]	; (80017d0 <HAL_GPIO_Init+0x334>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001722:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_GPIO_Init+0x350>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_GPIO_Init+0x350>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_GPIO_Init+0x350>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_GPIO_Init+0x350>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f47f ae78 	bne.w	80014ac <HAL_GPIO_Init+0x10>
  }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	48000400 	.word	0x48000400
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000c00 	.word	0x48000c00
 80017e0:	48001000 	.word	0x48001000
 80017e4:	48001400 	.word	0x48001400
 80017e8:	48001800 	.word	0x48001800
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
 80017fc:	4613      	mov	r3, r2
 80017fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001800:	787b      	ldrb	r3, [r7, #1]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800180c:	e002      	b.n	8001814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180e:	887a      	ldrh	r2, [r7, #2]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	041a      	lsls	r2, r3, #16
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43d9      	mvns	r1, r3
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	400b      	ands	r3, r1
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e081      	b.n	800196a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff fa66 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2224      	movs	r2, #36	; 0x24
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0201 	bic.w	r2, r2, #1
 8001896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d107      	bne.n	80018ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e006      	b.n	80018dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d104      	bne.n	80018ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001900:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001910:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69d9      	ldr	r1, [r3, #28]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1a      	ldr	r2, [r3, #32]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2220      	movs	r2, #32
 8001956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	4603      	mov	r3, r0
 8001984:	817b      	strh	r3, [r7, #10]
 8001986:	460b      	mov	r3, r1
 8001988:	813b      	strh	r3, [r7, #8]
 800198a:	4613      	mov	r3, r2
 800198c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	f040 80fd 	bne.w	8001b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_I2C_Mem_Read+0x34>
 80019a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0f1      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_I2C_Mem_Read+0x4e>
 80019be:	2302      	movs	r3, #2
 80019c0:	e0ea      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ca:	f7ff fbf9 	bl	80011c0 <HAL_GetTick>
 80019ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2319      	movs	r3, #25
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019dc:	68f8      	ldr	r0, [r7, #12]
 80019de:	f000 f95b 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d5      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2222      	movs	r2, #34	; 0x22
 80019f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a14:	88f8      	ldrh	r0, [r7, #6]
 8001a16:	893a      	ldrh	r2, [r7, #8]
 8001a18:	8979      	ldrh	r1, [r7, #10]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4603      	mov	r3, r0
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f8bf 	bl	8001ba8 <I2C_RequestMemoryRead>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0ad      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d90e      	bls.n	8001a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	22ff      	movs	r2, #255	; 0xff
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_I2C_Mem_Read+0x22c>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fac3 	bl	8001fe8 <I2C_TransferConfig>
 8001a62:	e00f      	b.n	8001a84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	8979      	ldrh	r1, [r7, #10]
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_I2C_Mem_Read+0x22c>)
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 fab2 	bl	8001fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f902 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07c      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d034      	beq.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d130      	bne.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f8d3 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e04d      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d90e      	bls.n	8001b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	22ff      	movs	r2, #255	; 0xff
 8001b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	8979      	ldrh	r1, [r7, #10]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 fa63 	bl	8001fe8 <I2C_TransferConfig>
 8001b22:	e00f      	b.n	8001b44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	8979      	ldrh	r1, [r7, #10]
 8001b36:	2300      	movs	r3, #0
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa52 	bl	8001fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d19a      	bne.n	8001a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f920 	bl	8001d98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e01a      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2220      	movs	r2, #32
 8001b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_I2C_Mem_Read+0x230>)
 8001b76:	400b      	ands	r3, r1
 8001b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e000      	b.n	8001b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	80002400 	.word	0x80002400
 8001ba4:	fe00e800 	.word	0xfe00e800

08001ba8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	817b      	strh	r3, [r7, #10]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	813b      	strh	r3, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	8979      	ldrh	r1, [r7, #10]
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <I2C_RequestMemoryRead+0xa4>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fa0a 	bl	8001fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd4:	69fa      	ldr	r2, [r7, #28]
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f89d 	bl	8001d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e02c      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d105      	bne.n	8001bfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bee:	893b      	ldrh	r3, [r7, #8]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf8:	e015      	b.n	8001c26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001bfa:	893b      	ldrh	r3, [r7, #8]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f883 	bl	8001d18 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e012      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c1c:	893b      	ldrh	r3, [r7, #8]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2140      	movs	r1, #64	; 0x40
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f831 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	80002000 	.word	0x80002000

08001c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d103      	bne.n	8001c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d007      	beq.n	8001c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	619a      	str	r2, [r3, #24]
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca8:	e022      	b.n	8001cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d01e      	beq.n	8001cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff fa85 	bl	80011c0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d113      	bne.n	8001cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e00f      	b.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d0cd      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d24:	e02c      	b.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f870 	bl	8001e10 <I2C_IsErrorOccurred>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e02a      	b.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d01e      	beq.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7ff fa3d 	bl	80011c0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d113      	bne.n	8001d80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f043 0220 	orr.w	r2, r3, #32
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e007      	b.n	8001d90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d1cb      	bne.n	8001d26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001da4:	e028      	b.n	8001df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f830 	bl	8001e10 <I2C_IsErrorOccurred>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e026      	b.n	8001e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dba:	f7ff fa01 	bl	80011c0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d302      	bcc.n	8001dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d113      	bne.n	8001df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e007      	b.n	8001e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d1cf      	bne.n	8001da6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d075      	beq.n	8001f28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e44:	e056      	b.n	8001ef4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e4c:	d052      	beq.n	8001ef4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e4e:	f7ff f9b7 	bl	80011c0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <I2C_IsErrorOccurred+0x54>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d147      	bne.n	8001ef4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e86:	d12e      	bne.n	8001ee6 <I2C_IsErrorOccurred+0xd6>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e8e:	d02a      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001e90:	7cfb      	ldrb	r3, [r7, #19]
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d027      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ea6:	f7ff f98b 	bl	80011c0 <HAL_GetTick>
 8001eaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eac:	e01b      	b.n	8001ee6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001eae:	f7ff f987 	bl	80011c0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b19      	cmp	r3, #25
 8001eba:	d914      	bls.n	8001ee6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d1dc      	bne.n	8001eae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d003      	beq.n	8001f0a <I2C_IsErrorOccurred+0xfa>
 8001f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d09d      	beq.n	8001e46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2220      	movs	r2, #32
 8001f18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00b      	beq.n	8001f74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f043 0308 	orr.w	r3, r3, #8
 8001f62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01c      	beq.n	8001fd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff fe56 	bl	8001c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <I2C_IsErrorOccurred+0x1d4>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	fe00e800 	.word	0xfe00e800

08001fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	817b      	strh	r3, [r7, #10]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ffa:	897b      	ldrh	r3, [r7, #10]
 8001ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	041b      	lsls	r3, r3, #16
 8002004:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002008:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	4313      	orrs	r3, r2
 8002012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002016:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <I2C_TransferConfig+0x60>)
 8002028:	430b      	orrs	r3, r1
 800202a:	43db      	mvns	r3, r3
 800202c:	ea02 0103 	and.w	r1, r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800203a:	bf00      	nop
 800203c:	371c      	adds	r7, #28
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	03ff63ff 	.word	0x03ff63ff

0800204c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d138      	bne.n	80020d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800206c:	2302      	movs	r3, #2
 800206e:	e032      	b.n	80020d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800209e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6819      	ldr	r1, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e000      	b.n	80020d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020d4:	2302      	movs	r3, #2
  }
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d139      	bne.n	800216c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002102:	2302      	movs	r3, #2
 8002104:	e033      	b.n	800216e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2224      	movs	r2, #36	; 0x24
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
	...

0800217c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_PWREx_GetVoltageRange+0x18>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40007000 	.word	0x40007000

08002198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a6:	d130      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d038      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021be:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2232      	movs	r2, #50	; 0x32
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021dc:	e002      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f0:	d102      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f2      	bne.n	80021de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021f8:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002204:	d110      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e00f      	b.n	800222a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002216:	d007      	beq.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002220:	4a05      	ldr	r2, [pc, #20]	; (8002238 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002226:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40007000 	.word	0x40007000
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e3ca      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002260:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80e4 	beq.w	8002440 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_RCC_OscConfig+0x4a>
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	f040 808b 	bne.w	800239c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b01      	cmp	r3, #1
 800228a:	f040 8087 	bne.w	800239c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800228e:	4b89      	ldr	r3, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_RCC_OscConfig+0x62>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e3a2      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <HAL_RCC_OscConfig+0x7c>
 80022b6:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022be:	e005      	b.n	80022cc <HAL_RCC_OscConfig+0x88>
 80022c0:	4b7c      	ldr	r3, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d223      	bcs.n	8002318 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fd87 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e383      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022ea:	f043 0308 	orr.w	r3, r3, #8
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	496d      	ldr	r1, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002302:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	021b      	lsls	r3, r3, #8
 8002310:	4968      	ldr	r1, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002312:	4313      	orrs	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
 8002316:	e025      	b.n	8002364 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4960      	ldr	r1, [pc, #384]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	495b      	ldr	r1, [pc, #364]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002346:	4313      	orrs	r3, r2
 8002348:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fd47 	bl	8002de8 <RCC_SetFlashLatencyFromMSIRange>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e343      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002364:	f000 fc4a 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4950      	ldr	r1, [pc, #320]	; (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_RCC_OscConfig+0x278>)
 8002382:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x27c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fda1 	bl	8000ed0 <HAL_InitTick>
 800238e:	4603      	mov	r3, r0
 8002390:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d052      	beq.n	800243e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	e327      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d032      	beq.n	800240a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a4:	4b43      	ldr	r3, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff06 	bl	80011c0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b8:	f7fe ff02 	bl	80011c0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e310      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023d6:	4b37      	ldr	r3, [pc, #220]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a36      	ldr	r2, [pc, #216]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4931      	ldr	r1, [pc, #196]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	492c      	ldr	r1, [pc, #176]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
 8002408:	e01a      	b.n	8002440 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002416:	f7fe fed3 	bl	80011c0 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800241e:	f7fe fecf 	bl	80011c0 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e2dd      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x1da>
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800243e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d074      	beq.n	8002536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x21a>
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d10e      	bne.n	8002476 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d10b      	bne.n	8002476 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d064      	beq.n	8002534 <HAL_RCC_OscConfig+0x2f0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d160      	bne.n	8002534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e2ba      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247e:	d106      	bne.n	800248e <HAL_RCC_OscConfig+0x24a>
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 8002486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	e026      	b.n	80024dc <HAL_RCC_OscConfig+0x298>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002496:	d115      	bne.n	80024c4 <HAL_RCC_OscConfig+0x280>
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 800249e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a02      	ldr	r2, [pc, #8]	; (80024b4 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e014      	b.n	80024dc <HAL_RCC_OscConfig+0x298>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080098e8 	.word	0x080098e8
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004
 80024c4:	4ba0      	ldr	r3, [pc, #640]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a9f      	ldr	r2, [pc, #636]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	4b9d      	ldr	r3, [pc, #628]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a9c      	ldr	r2, [pc, #624]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fe6c 	bl	80011c0 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fe68 	bl	80011c0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e276      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	4b92      	ldr	r3, [pc, #584]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x2a8>
 800250a:	e014      	b.n	8002536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe fe58 	bl	80011c0 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fe54 	bl	80011c0 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e262      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002526:	4b88      	ldr	r3, [pc, #544]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x2d0>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d060      	beq.n	8002604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d005      	beq.n	8002554 <HAL_RCC_OscConfig+0x310>
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d119      	bne.n	8002582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d116      	bne.n	8002582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002554:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_OscConfig+0x328>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e23f      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	061b      	lsls	r3, r3, #24
 800257a:	4973      	ldr	r1, [pc, #460]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002580:	e040      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258a:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fe13 	bl	80011c0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe fe0f 	bl	80011c0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e21d      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	4b65      	ldr	r3, [pc, #404]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b62      	ldr	r3, [pc, #392]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	495f      	ldr	r1, [pc, #380]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	e018      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5c      	ldr	r2, [pc, #368]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fdef 	bl	80011c0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fdeb 	bl	80011c0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1f9      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f0      	bne.n	80025e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d03c      	beq.n	800268a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01c      	beq.n	8002652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800261a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800261e:	4a4a      	ldr	r2, [pc, #296]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fdca 	bl	80011c0 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe fdc6 	bl	80011c0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1d4      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ef      	beq.n	8002630 <HAL_RCC_OscConfig+0x3ec>
 8002650:	e01b      	b.n	800268a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002652:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fe fdad 	bl	80011c0 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe fda9 	bl	80011c0 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e1b7      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800267e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ef      	bne.n	800266a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80a6 	beq.w	80027e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10d      	bne.n	80026c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ac:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	; 0x58
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c0:	2301      	movs	r3, #1
 80026c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_OscConfig+0x508>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d118      	bne.n	8002702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d0:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCC_OscConfig+0x508>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1d      	ldr	r2, [pc, #116]	; (800274c <HAL_RCC_OscConfig+0x508>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fd70 	bl	80011c0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fd6c 	bl	80011c0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e17a      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_RCC_OscConfig+0x508>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x4d8>
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800270c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271a:	e029      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d115      	bne.n	8002750 <HAL_RCC_OscConfig+0x50c>
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	4a03      	ldr	r2, [pc, #12]	; (8002748 <HAL_RCC_OscConfig+0x504>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002744:	e014      	b.n	8002770 <HAL_RCC_OscConfig+0x52c>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	40007000 	.word	0x40007000
 8002750:	4b9c      	ldr	r3, [pc, #624]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	4a9b      	ldr	r2, [pc, #620]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002760:	4b98      	ldr	r3, [pc, #608]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002766:	4a97      	ldr	r2, [pc, #604]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fd22 	bl	80011c0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fd1e 	bl	80011c0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e12a      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002796:	4b8b      	ldr	r3, [pc, #556]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ed      	beq.n	8002780 <HAL_RCC_OscConfig+0x53c>
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fd0b 	bl	80011c0 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fd07 	bl	80011c0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e113      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c4:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ed      	bne.n	80027ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d2:	7ffb      	ldrb	r3, [r7, #31]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	4a79      	ldr	r2, [pc, #484]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80fe 	beq.w	80029ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	f040 80d0 	bne.w	8002998 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027f8:	4b72      	ldr	r3, [pc, #456]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0203 	and.w	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	429a      	cmp	r2, r3
 800280a:	d130      	bne.n	800286e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	3b01      	subs	r3, #1
 8002818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d127      	bne.n	800286e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11f      	bne.n	800286e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002838:	2a07      	cmp	r2, #7
 800283a:	bf14      	ite	ne
 800283c:	2201      	movne	r2, #1
 800283e:	2200      	moveq	r2, #0
 8002840:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	4293      	cmp	r3, r2
 8002844:	d113      	bne.n	800286e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d109      	bne.n	800286e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d06e      	beq.n	800294c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d069      	beq.n	8002948 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002874:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0ad      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002890:	4b4c      	ldr	r3, [pc, #304]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800289c:	f7fe fc90 	bl	80011c0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7fe fc8c 	bl	80011c0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e09a      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b6:	4b43      	ldr	r3, [pc, #268]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x784>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028d2:	3a01      	subs	r2, #1
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	4311      	orrs	r1, r2
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028dc:	0212      	lsls	r2, r2, #8
 80028de:	4311      	orrs	r1, r2
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028e4:	0852      	lsrs	r2, r2, #1
 80028e6:	3a01      	subs	r2, #1
 80028e8:	0552      	lsls	r2, r2, #21
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0652      	lsls	r2, r2, #25
 80028f6:	4311      	orrs	r1, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028fc:	0912      	lsrs	r2, r2, #4
 80028fe:	0452      	lsls	r2, r2, #17
 8002900:	430a      	orrs	r2, r1
 8002902:	4930      	ldr	r1, [pc, #192]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002904:	4313      	orrs	r3, r2
 8002906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002914:	4b2b      	ldr	r3, [pc, #172]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a2a      	ldr	r2, [pc, #168]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002920:	f7fe fc4e 	bl	80011c0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fc4a 	bl	80011c0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e058      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293a:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002946:	e050      	b.n	80029ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04f      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d148      	bne.n	80029ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800295e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002970:	f7fe fc26 	bl	80011c0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fc22 	bl	80011c0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e030      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x734>
 8002996:	e028      	b.n	80029ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d023      	beq.n	80029e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_RCC_OscConfig+0x780>)
 80029a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fc09 	bl	80011c0 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e00c      	b.n	80029cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fc05 	bl	80011c0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d905      	bls.n	80029cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_OscConfig+0x7b0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ec      	bne.n	80029b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_OscConfig+0x7b0>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4905      	ldr	r1, [pc, #20]	; (80029f4 <HAL_RCC_OscConfig+0x7b0>)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x7b4>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e001      	b.n	80029ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	feeefffc 	.word	0xfeeefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0e7      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a10:	4b75      	ldr	r3, [pc, #468]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d910      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1e:	4b72      	ldr	r3, [pc, #456]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 0207 	bic.w	r2, r3, #7
 8002a26:	4970      	ldr	r1, [pc, #448]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b6e      	ldr	r3, [pc, #440]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0cf      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b66      	ldr	r3, [pc, #408]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d908      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4960      	ldr	r1, [pc, #384]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d04c      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0a6      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	4b54      	ldr	r3, [pc, #336]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d115      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e09a      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab2:	4b4e      	ldr	r3, [pc, #312]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e08e      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e086      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4943      	ldr	r1, [pc, #268]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fb6c 	bl	80011c0 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fb68 	bl	80011c0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e06e      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d208      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	492b      	ldr	r1, [pc, #172]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b42:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d210      	bcs.n	8002b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0207 	bic.w	r2, r3, #7
 8002b58:	4923      	ldr	r1, [pc, #140]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e036      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	4918      	ldr	r1, [pc, #96]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b9c:	4b13      	ldr	r3, [pc, #76]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4910      	ldr	r1, [pc, #64]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb0:	f000 f824 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	490b      	ldr	r1, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8002bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f97b 	bl	8000ed0 <HAL_InitTick>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bde:	7afb      	ldrb	r3, [r7, #11]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080098e8 	.word	0x080098e8
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d11e      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c3c:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e005      	b.n	8002c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c58:	4a2b      	ldr	r2, [pc, #172]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c74:	4b25      	ldr	r3, [pc, #148]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	e004      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c80:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d134      	bne.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ca0:	e005      	b.n	8002cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca4:	617b      	str	r3, [r7, #20]
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002caa:	617b      	str	r3, [r7, #20]
      break;
 8002cac:	e002      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	617b      	str	r3, [r7, #20]
      break;
 8002cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	0a1b      	lsrs	r3, r3, #8
 8002cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	fb03 f202 	mul.w	r2, r3, r2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	0e5b      	lsrs	r3, r3, #25
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3724      	adds	r7, #36	; 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08009900 	.word	0x08009900
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

08002d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000

08002d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d30:	f7ff fff0 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4904      	ldr	r1, [pc, #16]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d42:	5ccb      	ldrb	r3, [r1, r3]
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	080098f8 	.word	0x080098f8

08002d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d5c:	f7ff ffda 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0adb      	lsrs	r3, r3, #11
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4904      	ldr	r1, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	080098f8 	.word	0x080098f8

08002d84 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	220f      	movs	r2, #15
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0203 	and.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002db8:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002dc6:	4b07      	ldr	r3, [pc, #28]	; (8002de4 <HAL_RCC_GetClockConfig+0x60>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40022000 	.word	0x40022000

08002de8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e00:	f7ff f9bc 	bl	800217c <HAL_PWREx_GetVoltageRange>
 8002e04:	6178      	str	r0, [r7, #20]
 8002e06:	e014      	b.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
 8002e14:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e20:	f7ff f9ac 	bl	800217c <HAL_PWREx_GetVoltageRange>
 8002e24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e26:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ea0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e38:	d10b      	bne.n	8002e52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d919      	bls.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2ba0      	cmp	r3, #160	; 0xa0
 8002e44:	d902      	bls.n	8002e4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e013      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	e010      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d902      	bls.n	8002e5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e58:	2303      	movs	r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e00a      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b80      	cmp	r3, #128	; 0x80
 8002e62:	d102      	bne.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e64:	2302      	movs	r3, #2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	e004      	b.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d101      	bne.n	8002e74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e70:	2301      	movs	r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e74:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 0207 	bic.w	r2, r3, #7
 8002e7c:	4909      	ldr	r1, [pc, #36]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e84:	4b07      	ldr	r3, [pc, #28]	; (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d001      	beq.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40022000 	.word	0x40022000

08002ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d041      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ecc:	d02a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ece:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ed2:	d824      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ede:	d81e      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eea:	e018      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eec:	4b86      	ldr	r3, [pc, #536]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4a85      	ldr	r2, [pc, #532]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef8:	e015      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fabb 	bl	800347c <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0a:	e00c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3320      	adds	r3, #32
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fba6 	bl	8003664 <RCCEx_PLLSAI2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f1c:	e003      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	74fb      	strb	r3, [r7, #19]
      break;
 8002f22:	e000      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f2c:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f3a:	4973      	ldr	r1, [pc, #460]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f42:	e001      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d041      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f5c:	d02a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f62:	d824      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f68:	d008      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6e:	d81e      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d010      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f7a:	e018      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f7c:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a61      	ldr	r2, [pc, #388]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f88:	e015      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fa73 	bl	800347c <RCCEx_PLLSAI1_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9a:	e00c      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3320      	adds	r3, #32
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fb5e 	bl	8003664 <RCCEx_PLLSAI2_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fac:	e003      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fca:	494f      	ldr	r1, [pc, #316]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fd2:	e001      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a0 	beq.w	8003126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00d      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003000:	4b41      	ldr	r3, [pc, #260]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a40      	ldr	r2, [pc, #256]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003018:	2301      	movs	r3, #1
 800301a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b3b      	ldr	r3, [pc, #236]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3a      	ldr	r2, [pc, #232]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003028:	f7fe f8ca 	bl	80011c0 <HAL_GetTick>
 800302c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800302e:	e009      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003030:	f7fe f8c6 	bl	80011c0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d902      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	74fb      	strb	r3, [r7, #19]
        break;
 8003042:	e005      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003044:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ef      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003050:	7cfb      	ldrb	r3, [r7, #19]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d15c      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003060:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01f      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d019      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a1c      	ldr	r2, [pc, #112]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7fe f885 	bl	80011c0 <HAL_GetTick>
 80030b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b8:	e00b      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ba:	f7fe f881 	bl	80011c0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d902      	bls.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	74fb      	strb	r3, [r7, #19]
            break;
 80030d0:	e006      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0ec      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030fe:	e009      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
 8003104:	e006      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003114:	7c7b      	ldrb	r3, [r7, #17]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d105      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311a:	4b9e      	ldr	r3, [pc, #632]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	4a9d      	ldr	r2, [pc, #628]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003124:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003132:	4b98      	ldr	r3, [pc, #608]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	f023 0203 	bic.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	4994      	ldr	r1, [pc, #592]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003154:	4b8f      	ldr	r3, [pc, #572]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f023 020c 	bic.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	498c      	ldr	r1, [pc, #560]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003176:	4b87      	ldr	r3, [pc, #540]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4983      	ldr	r1, [pc, #524]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003198:	4b7e      	ldr	r3, [pc, #504]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	497b      	ldr	r1, [pc, #492]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ba:	4b76      	ldr	r3, [pc, #472]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	4972      	ldr	r1, [pc, #456]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031dc:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ea:	496a      	ldr	r1, [pc, #424]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00a      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320c:	4961      	ldr	r1, [pc, #388]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003220:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322e:	4959      	ldr	r1, [pc, #356]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003242:	4b54      	ldr	r3, [pc, #336]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	4950      	ldr	r1, [pc, #320]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003264:	4b4b      	ldr	r3, [pc, #300]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	4948      	ldr	r1, [pc, #288]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	493f      	ldr	r1, [pc, #252]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d028      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a8:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b6:	4937      	ldr	r1, [pc, #220]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c6:	d106      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032d2:	60d3      	str	r3, [r2, #12]
 80032d4:	e011      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032de:	d10c      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	2101      	movs	r1, #1
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f8c8 	bl	800347c <RCCEx_PLLSAI1_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d028      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	491f      	ldr	r1, [pc, #124]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003324:	d106      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	4a1a      	ldr	r2, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003330:	60d3      	str	r3, [r2, #12]
 8003332:	e011      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f899 	bl	800347c <RCCEx_PLLSAI1_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d02b      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003382:	d109      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4a02      	ldr	r2, [pc, #8]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800338e:	60d3      	str	r3, [r2, #12]
 8003390:	e014      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f867 	bl	800347c <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02f      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d6:	4928      	ldr	r1, [pc, #160]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033e6:	d10d      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	2102      	movs	r1, #2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f844 	bl	800347c <RCCEx_PLLSAI1_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033fe:	7cfb      	ldrb	r3, [r7, #19]
 8003400:	74bb      	strb	r3, [r7, #18]
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3320      	adds	r3, #32
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f925 	bl	8003664 <RCCEx_PLLSAI2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003442:	490d      	ldr	r1, [pc, #52]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003466:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800346e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000

0800347c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800348a:	4b75      	ldr	r3, [pc, #468]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d018      	beq.n	80034c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003496:	4b72      	ldr	r3, [pc, #456]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0203 	and.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d10d      	bne.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
       ||
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
       ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d047      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
 80034c6:	e044      	b.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d018      	beq.n	8003502 <RCCEx_PLLSAI1_Config+0x86>
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d825      	bhi.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d002      	beq.n	80034de <RCCEx_PLLSAI1_Config+0x62>
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d009      	beq.n	80034f0 <RCCEx_PLLSAI1_Config+0x74>
 80034dc:	e020      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034de:	4b60      	ldr	r3, [pc, #384]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ee:	e01a      	b.n	8003526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034f0:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003500:	e013      	b.n	800352a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003502:	4b57      	ldr	r3, [pc, #348]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800350e:	4b54      	ldr	r3, [pc, #336]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800351e:	e006      	b.n	800352e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e004      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003526:	bf00      	nop
 8003528:	e002      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10d      	bne.n	8003552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	430b      	orrs	r3, r1
 800354c:	4944      	ldr	r1, [pc, #272]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d17d      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a40      	ldr	r2, [pc, #256]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003564:	f7fd fe2c 	bl	80011c0 <HAL_GetTick>
 8003568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356a:	e009      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800356c:	f7fd fe28 	bl	80011c0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d902      	bls.n	8003580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	73fb      	strb	r3, [r7, #15]
        break;
 800357e:	e005      	b.n	800358c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ef      	bne.n	800356c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d160      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003598:	4b31      	ldr	r3, [pc, #196]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6892      	ldr	r2, [r2, #8]
 80035a8:	0211      	lsls	r1, r2, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	0912      	lsrs	r2, r2, #4
 80035b0:	0452      	lsls	r2, r2, #17
 80035b2:	430a      	orrs	r2, r1
 80035b4:	492a      	ldr	r1, [pc, #168]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
 80035ba:	e027      	b.n	800360c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d112      	bne.n	80035e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c2:	4b27      	ldr	r3, [pc, #156]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6892      	ldr	r2, [r2, #8]
 80035d2:	0211      	lsls	r1, r2, #8
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6912      	ldr	r2, [r2, #16]
 80035d8:	0852      	lsrs	r2, r2, #1
 80035da:	3a01      	subs	r2, #1
 80035dc:	0552      	lsls	r2, r2, #21
 80035de:	430a      	orrs	r2, r1
 80035e0:	491f      	ldr	r1, [pc, #124]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
 80035e6:	e011      	b.n	800360c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	0211      	lsls	r1, r2, #8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6952      	ldr	r2, [r2, #20]
 80035fe:	0852      	lsrs	r2, r2, #1
 8003600:	3a01      	subs	r2, #1
 8003602:	0652      	lsls	r2, r2, #25
 8003604:	430a      	orrs	r2, r1
 8003606:	4916      	ldr	r1, [pc, #88]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	4313      	orrs	r3, r2
 800360a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800360c:	4b14      	ldr	r3, [pc, #80]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd fdd2 	bl	80011c0 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800361e:	e009      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003620:	f7fd fdce 	bl	80011c0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d902      	bls.n	8003634 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	73fb      	strb	r3, [r7, #15]
          break;
 8003632:	e005      	b.n	8003640 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	4904      	ldr	r1, [pc, #16]	; (8003660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000

08003664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003672:	4b6a      	ldr	r3, [pc, #424]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d018      	beq.n	80036b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800367e:	4b67      	ldr	r3, [pc, #412]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0203 	and.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d10d      	bne.n	80036aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
       ||
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	091b      	lsrs	r3, r3, #4
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
       ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d047      	beq.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
 80036ae:	e044      	b.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d018      	beq.n	80036ea <RCCEx_PLLSAI2_Config+0x86>
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d825      	bhi.n	8003708 <RCCEx_PLLSAI2_Config+0xa4>
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d002      	beq.n	80036c6 <RCCEx_PLLSAI2_Config+0x62>
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d009      	beq.n	80036d8 <RCCEx_PLLSAI2_Config+0x74>
 80036c4:	e020      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036c6:	4b55      	ldr	r3, [pc, #340]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d6:	e01a      	b.n	800370e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d116      	bne.n	8003712 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e8:	e013      	b.n	8003712 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ea:	4b4c      	ldr	r3, [pc, #304]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003706:	e006      	b.n	8003716 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      break;
 800370c:	e004      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003716:	bf00      	nop
    }

    if(status == HAL_OK)
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	3b01      	subs	r3, #1
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	430b      	orrs	r3, r1
 8003734:	4939      	ldr	r1, [pc, #228]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d167      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003740:	4b36      	ldr	r3, [pc, #216]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd fd38 	bl	80011c0 <HAL_GetTick>
 8003750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003752:	e009      	b.n	8003768 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003754:	f7fd fd34 	bl	80011c0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d902      	bls.n	8003768 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	73fb      	strb	r3, [r7, #15]
        break;
 8003766:	e005      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003768:	4b2c      	ldr	r3, [pc, #176]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ef      	bne.n	8003754 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d14a      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d111      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003780:	4b26      	ldr	r3, [pc, #152]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6892      	ldr	r2, [r2, #8]
 8003790:	0211      	lsls	r1, r2, #8
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0912      	lsrs	r2, r2, #4
 8003798:	0452      	lsls	r2, r2, #17
 800379a:	430a      	orrs	r2, r1
 800379c:	491f      	ldr	r1, [pc, #124]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	614b      	str	r3, [r1, #20]
 80037a2:	e011      	b.n	80037c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6892      	ldr	r2, [r2, #8]
 80037b4:	0211      	lsls	r1, r2, #8
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6912      	ldr	r2, [r2, #16]
 80037ba:	0852      	lsrs	r2, r2, #1
 80037bc:	3a01      	subs	r2, #1
 80037be:	0652      	lsls	r2, r2, #25
 80037c0:	430a      	orrs	r2, r1
 80037c2:	4916      	ldr	r1, [pc, #88]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fd fcf4 	bl	80011c0 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037da:	e009      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037dc:	f7fd fcf0 	bl	80011c0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d902      	bls.n	80037f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	73fb      	strb	r3, [r7, #15]
          break;
 80037ee:	e005      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <RCCEx_PLLSAI2_Config+0x1b8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e049      	b.n	80038c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f841 	bl	80038ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3304      	adds	r3, #4
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 f9f8 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04f      	b.n	800399c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01d      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d018      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <HAL_TIM_Base_Start_IT+0xc8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d013      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00e      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d004      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x76>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d115      	bne.n	8003986 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d015      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003972:	d011      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003984:	e008      	b.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	e000      	b.n	800399a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	00010007 	.word	0x00010007

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0202 	mvn.w	r2, #2
 80039f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f905 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8f7 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f908 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0204 	mvn.w	r2, #4
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8db 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8cd 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8de 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d122      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0208 	mvn.w	r2, #8
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8b1 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f8a3 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f8b4 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2208      	movs	r2, #8
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f887 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f879 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f88a 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0201 	mvn.w	r2, #1
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd f8c2 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f914 	bl	8003d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d10e      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d107      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f907 	bl	8003db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d107      	bne.n	8003bce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f838 	bl	8003c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d10e      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d107      	bne.n	8003bfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f06f 0220 	mvn.w	r2, #32
 8003bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8c7 	bl	8003d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d00f      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3c      	ldr	r2, [pc, #240]	; (8003d70 <TIM_Base_SetConfig+0x11c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <TIM_Base_SetConfig+0x120>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a3a      	ldr	r2, [pc, #232]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2c      	ldr	r2, [pc, #176]	; (8003d6c <TIM_Base_SetConfig+0x118>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	; (8003d70 <TIM_Base_SetConfig+0x11c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2a      	ldr	r2, [pc, #168]	; (8003d74 <TIM_Base_SetConfig+0x120>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a28      	ldr	r2, [pc, #160]	; (8003d7c <TIM_Base_SetConfig+0x128>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a27      	ldr	r2, [pc, #156]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0x9a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a26      	ldr	r2, [pc, #152]	; (8003d84 <TIM_Base_SetConfig+0x130>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <TIM_Base_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00f      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00b      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <TIM_Base_SetConfig+0x128>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a0f      	ldr	r2, [pc, #60]	; (8003d84 <TIM_Base_SetConfig+0x130>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]
}
 8003d5a:	bf00      	nop
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40013400 	.word	0x40013400
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e040      	b.n	8003e58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f80e 	bl	8000e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2224      	movs	r2, #36	; 0x24
 8003df0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fc94 	bl	8004730 <UART_SetConfig>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e022      	b.n	8003e58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 ff40 	bl	8004ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 ffc7 	bl	8004de4 <UART_CheckIdleState>
 8003e56:	4603      	mov	r3, r0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	f040 8082 	bne.w	8003f7e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_UART_Transmit+0x26>
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07a      	b.n	8003f80 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_UART_Transmit+0x38>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e073      	b.n	8003f80 <HAL_UART_Transmit+0x120>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2221      	movs	r2, #33	; 0x21
 8003eac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eae:	f7fd f987 	bl	80011c0 <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	88fa      	ldrh	r2, [r7, #6]
 8003eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d108      	bne.n	8003ee0 <HAL_UART_Transmit+0x80>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e003      	b.n	8003ee8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ef0:	e02d      	b.n	8003f4e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2180      	movs	r1, #128	; 0x80
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 ffba 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e039      	b.n	8003f80 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10b      	bne.n	8003f2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	881a      	ldrh	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1e:	b292      	uxth	r2, r2
 8003f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	3302      	adds	r3, #2
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	e008      	b.n	8003f3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	781a      	ldrb	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b292      	uxth	r2, r2
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1cb      	bne.n	8003ef2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 ff86 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e005      	b.n	8003f80 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	f040 80bf 	bne.w	8004120 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_UART_Receive+0x26>
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0b7      	b.n	8004122 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_UART_Receive+0x38>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e0b0      	b.n	8004122 <HAL_UART_Receive+0x19a>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2222      	movs	r2, #34	; 0x22
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fdc:	f7fd f8f0 	bl	80011c0 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffa:	d10e      	bne.n	800401a <HAL_UART_Receive+0x92>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <HAL_UART_Receive+0x88>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f240 12ff 	movw	r2, #511	; 0x1ff
 800400a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400e:	e02d      	b.n	800406c <HAL_UART_Receive+0xe4>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004018:	e028      	b.n	800406c <HAL_UART_Receive+0xe4>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10d      	bne.n	800403e <HAL_UART_Receive+0xb6>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <HAL_UART_Receive+0xac>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004032:	e01b      	b.n	800406c <HAL_UART_Receive+0xe4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	227f      	movs	r2, #127	; 0x7f
 8004038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800403c:	e016      	b.n	800406c <HAL_UART_Receive+0xe4>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004046:	d10d      	bne.n	8004064 <HAL_UART_Receive+0xdc>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_UART_Receive+0xd2>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	227f      	movs	r2, #127	; 0x7f
 8004054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004058:	e008      	b.n	800406c <HAL_UART_Receive+0xe4>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	223f      	movs	r2, #63	; 0x3f
 800405e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004062:	e003      	b.n	800406c <HAL_UART_Receive+0xe4>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004072:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d108      	bne.n	8004090 <HAL_UART_Receive+0x108>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	e003      	b.n	8004098 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80040a0:	e033      	b.n	800410a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2120      	movs	r1, #32
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fee2 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e032      	b.n	8004122 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	8a7b      	ldrh	r3, [r7, #18]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	3302      	adds	r3, #2
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e00d      	b.n	80040f8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	8a7b      	ldrh	r3, [r7, #18]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4013      	ands	r3, r2
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3301      	adds	r3, #1
 80040f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1c5      	bne.n	80040a2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3720      	adds	r7, #32
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b0ba      	sub	sp, #232	; 0xe8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004152:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004156:	f640 030f 	movw	r3, #2063	; 0x80f
 800415a:	4013      	ands	r3, r2
 800415c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d115      	bne.n	8004194 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00f      	beq.n	8004194 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 82a6 	beq.w	80046d6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
      }
      return;
 8004192:	e2a0      	b.n	80046d6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8117 	beq.w	80043cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800419e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_UART_IRQHandler+0x298>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 810a 	beq.w	80043cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d011      	beq.n	80041e8 <HAL_UART_IRQHandler+0xbc>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00b      	beq.n	80041e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041de:	f043 0201 	orr.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <HAL_UART_IRQHandler+0xec>
 80041f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2202      	movs	r2, #2
 8004206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	d011      	beq.n	8004248 <HAL_UART_IRQHandler+0x11c>
 8004224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00b      	beq.n	8004248 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2204      	movs	r2, #4
 8004236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d017      	beq.n	8004284 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004264:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2208      	movs	r2, #8
 8004272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427a:	f043 0208 	orr.w	r2, r3, #8
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800428c:	2b00      	cmp	r3, #0
 800428e:	d012      	beq.n	80042b6 <HAL_UART_IRQHandler+0x18a>
 8004290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ac:	f043 0220 	orr.w	r2, r3, #32
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 820c 	beq.w	80046da <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d005      	beq.n	800430e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004306:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800430a:	2b00      	cmp	r3, #0
 800430c:	d04f      	beq.n	80043ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fe75 	bl	8004ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d141      	bne.n	80043a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004338:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800433c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800434e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800435a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800435e:	e841 2300 	strex	r3, r2, [r1]
 8004362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1d9      	bne.n	8004322 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	2b00      	cmp	r3, #0
 8004374:	d013      	beq.n	800439e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_UART_IRQHandler+0x29c>)
 800437c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd f848 	bl	8001418 <HAL_DMA_Abort_IT>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d017      	beq.n	80043be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004398:	4610      	mov	r0, r2
 800439a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	e00f      	b.n	80043be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9b0 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	e00b      	b.n	80043be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9ac 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	e007      	b.n	80043be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9a8 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043bc:	e18d      	b.n	80046da <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043be:	bf00      	nop
    return;
 80043c0:	e18b      	b.n	80046da <HAL_UART_IRQHandler+0x5ae>
 80043c2:	bf00      	nop
 80043c4:	04000120 	.word	0x04000120
 80043c8:	080050c5 	.word	0x080050c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 8146 	bne.w	8004662 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 813f 	beq.w	8004662 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8138 	beq.w	8004662 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2210      	movs	r2, #16
 80043f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	f040 80b4 	bne.w	8004572 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004416:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 815f 	beq.w	80046de <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004426:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442a:	429a      	cmp	r2, r3
 800442c:	f080 8157 	bcs.w	80046de <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	f040 8085 	bne.w	8004556 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800447a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800448e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1da      	bne.n	800444c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3308      	adds	r3, #8
 800449c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e1      	bne.n	8004496 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004538:	65bb      	str	r3, [r7, #88]	; 0x58
 800453a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800453e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e4      	bne.n	8004516 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4618      	mov	r0, r3
 8004552:	f7fc ff23 	bl	800139c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004562:	b29b      	uxth	r3, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8d4 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004570:	e0b5      	b.n	80046de <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800457e:	b29b      	uxth	r3, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a7 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a2 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e4      	bne.n	800459e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	623b      	str	r3, [r7, #32]
   return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f8:	633a      	str	r2, [r7, #48]	; 0x30
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e3      	bne.n	80045d4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60fb      	str	r3, [r7, #12]
   return(result);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	69b9      	ldr	r1, [r7, #24]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	617b      	str	r3, [r7, #20]
   return(result);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e4      	bne.n	800461e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f85c 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004660:	e03f      	b.n	80046e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <HAL_UART_IRQHandler+0x560>
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fd5d 	bl	8005144 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800468a:	e02d      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01c      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
    }
    return;
 80046b4:	e017      	b.n	80046e6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fd0e 	bl	80050f0 <UART_EndTransmit_IT>
    return;
 80046d4:	e008      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046d6:	bf00      	nop
 80046d8:	e006      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80046da:	bf00      	nop
 80046dc:	e004      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80046e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80046e8:	37e8      	adds	r7, #232	; 0xe8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop

080046f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004734:	b08a      	sub	sp, #40	; 0x28
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4313      	orrs	r3, r2
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4ba4      	ldr	r3, [pc, #656]	; (80049f0 <UART_SetConfig+0x2c0>)
 8004760:	4013      	ands	r3, r2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004768:	430b      	orrs	r3, r1
 800476a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a99      	ldr	r2, [pc, #612]	; (80049f4 <UART_SetConfig+0x2c4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004798:	4313      	orrs	r3, r2
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a90      	ldr	r2, [pc, #576]	; (80049f8 <UART_SetConfig+0x2c8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d126      	bne.n	8004808 <UART_SetConfig+0xd8>
 80047ba:	4b90      	ldr	r3, [pc, #576]	; (80049fc <UART_SetConfig+0x2cc>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d81b      	bhi.n	8004800 <UART_SetConfig+0xd0>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0xa0>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047f1 	.word	0x080047f1
 80047d8:	080047e9 	.word	0x080047e9
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e116      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80047e8:	2302      	movs	r3, #2
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ee:	e112      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80047f0:	2304      	movs	r3, #4
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e10e      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80047f8:	2308      	movs	r3, #8
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e10a      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004800:	2310      	movs	r3, #16
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e106      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a7c      	ldr	r2, [pc, #496]	; (8004a00 <UART_SetConfig+0x2d0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d138      	bne.n	8004884 <UART_SetConfig+0x154>
 8004812:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <UART_SetConfig+0x2cc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	f003 030c 	and.w	r3, r3, #12
 800481c:	2b0c      	cmp	r3, #12
 800481e:	d82d      	bhi.n	800487c <UART_SetConfig+0x14c>
 8004820:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0xf8>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800485d 	.word	0x0800485d
 800482c:	0800487d 	.word	0x0800487d
 8004830:	0800487d 	.word	0x0800487d
 8004834:	0800487d 	.word	0x0800487d
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800487d 	.word	0x0800487d
 8004840:	0800487d 	.word	0x0800487d
 8004844:	0800487d 	.word	0x0800487d
 8004848:	08004865 	.word	0x08004865
 800484c:	0800487d 	.word	0x0800487d
 8004850:	0800487d 	.word	0x0800487d
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004875 	.word	0x08004875
 800485c:	2300      	movs	r3, #0
 800485e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004862:	e0d8      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004864:	2302      	movs	r3, #2
 8004866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486a:	e0d4      	b.n	8004a16 <UART_SetConfig+0x2e6>
 800486c:	2304      	movs	r3, #4
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e0d0      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004874:	2308      	movs	r3, #8
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e0cc      	b.n	8004a16 <UART_SetConfig+0x2e6>
 800487c:	2310      	movs	r3, #16
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e0c8      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a5e      	ldr	r2, [pc, #376]	; (8004a04 <UART_SetConfig+0x2d4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d125      	bne.n	80048da <UART_SetConfig+0x1aa>
 800488e:	4b5b      	ldr	r3, [pc, #364]	; (80049fc <UART_SetConfig+0x2cc>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004898:	2b30      	cmp	r3, #48	; 0x30
 800489a:	d016      	beq.n	80048ca <UART_SetConfig+0x19a>
 800489c:	2b30      	cmp	r3, #48	; 0x30
 800489e:	d818      	bhi.n	80048d2 <UART_SetConfig+0x1a2>
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d00a      	beq.n	80048ba <UART_SetConfig+0x18a>
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d814      	bhi.n	80048d2 <UART_SetConfig+0x1a2>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <UART_SetConfig+0x182>
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d008      	beq.n	80048c2 <UART_SetConfig+0x192>
 80048b0:	e00f      	b.n	80048d2 <UART_SetConfig+0x1a2>
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048b8:	e0ad      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80048ba:	2302      	movs	r3, #2
 80048bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c0:	e0a9      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80048c2:	2304      	movs	r3, #4
 80048c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c8:	e0a5      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80048ca:	2308      	movs	r3, #8
 80048cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d0:	e0a1      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80048d2:	2310      	movs	r3, #16
 80048d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d8:	e09d      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <UART_SetConfig+0x2d8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d125      	bne.n	8004930 <UART_SetConfig+0x200>
 80048e4:	4b45      	ldr	r3, [pc, #276]	; (80049fc <UART_SetConfig+0x2cc>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ee:	2bc0      	cmp	r3, #192	; 0xc0
 80048f0:	d016      	beq.n	8004920 <UART_SetConfig+0x1f0>
 80048f2:	2bc0      	cmp	r3, #192	; 0xc0
 80048f4:	d818      	bhi.n	8004928 <UART_SetConfig+0x1f8>
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d00a      	beq.n	8004910 <UART_SetConfig+0x1e0>
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d814      	bhi.n	8004928 <UART_SetConfig+0x1f8>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <UART_SetConfig+0x1d8>
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d008      	beq.n	8004918 <UART_SetConfig+0x1e8>
 8004906:	e00f      	b.n	8004928 <UART_SetConfig+0x1f8>
 8004908:	2300      	movs	r3, #0
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e082      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004910:	2302      	movs	r3, #2
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e07e      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e07a      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e076      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e072      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a35      	ldr	r2, [pc, #212]	; (8004a0c <UART_SetConfig+0x2dc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d12a      	bne.n	8004990 <UART_SetConfig+0x260>
 800493a:	4b30      	ldr	r3, [pc, #192]	; (80049fc <UART_SetConfig+0x2cc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004948:	d01a      	beq.n	8004980 <UART_SetConfig+0x250>
 800494a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800494e:	d81b      	bhi.n	8004988 <UART_SetConfig+0x258>
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d00c      	beq.n	8004970 <UART_SetConfig+0x240>
 8004956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800495a:	d815      	bhi.n	8004988 <UART_SetConfig+0x258>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <UART_SetConfig+0x238>
 8004960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004964:	d008      	beq.n	8004978 <UART_SetConfig+0x248>
 8004966:	e00f      	b.n	8004988 <UART_SetConfig+0x258>
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e052      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e04e      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e04a      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e046      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e042      	b.n	8004a16 <UART_SetConfig+0x2e6>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <UART_SetConfig+0x2c4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d13a      	bne.n	8004a10 <UART_SetConfig+0x2e0>
 800499a:	4b18      	ldr	r3, [pc, #96]	; (80049fc <UART_SetConfig+0x2cc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049a8:	d01a      	beq.n	80049e0 <UART_SetConfig+0x2b0>
 80049aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ae:	d81b      	bhi.n	80049e8 <UART_SetConfig+0x2b8>
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	d00c      	beq.n	80049d0 <UART_SetConfig+0x2a0>
 80049b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ba:	d815      	bhi.n	80049e8 <UART_SetConfig+0x2b8>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <UART_SetConfig+0x298>
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d008      	beq.n	80049d8 <UART_SetConfig+0x2a8>
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x2b8>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e022      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e01e      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e01a      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e6:	e016      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e012      	b.n	8004a16 <UART_SetConfig+0x2e6>
 80049f0:	efff69f3 	.word	0xefff69f3
 80049f4:	40008000 	.word	0x40008000
 80049f8:	40013800 	.word	0x40013800
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40004400 	.word	0x40004400
 8004a04:	40004800 	.word	0x40004800
 8004a08:	40004c00 	.word	0x40004c00
 8004a0c:	40005000 	.word	0x40005000
 8004a10:	2310      	movs	r3, #16
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a9f      	ldr	r2, [pc, #636]	; (8004c98 <UART_SetConfig+0x568>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d17a      	bne.n	8004b16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d824      	bhi.n	8004a72 <UART_SetConfig+0x342>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <UART_SetConfig+0x300>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a5d 	.word	0x08004a5d
 8004a3c:	08004a73 	.word	0x08004a73
 8004a40:	08004a63 	.word	0x08004a63
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	08004a73 	.word	0x08004a73
 8004a4c:	08004a73 	.word	0x08004a73
 8004a50:	08004a6b 	.word	0x08004a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7fe f96a 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8004a58:	61f8      	str	r0, [r7, #28]
        break;
 8004a5a:	e010      	b.n	8004a7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a5c:	4b8f      	ldr	r3, [pc, #572]	; (8004c9c <UART_SetConfig+0x56c>)
 8004a5e:	61fb      	str	r3, [r7, #28]
        break;
 8004a60:	e00d      	b.n	8004a7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a62:	f7fe f8cb 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004a66:	61f8      	str	r0, [r7, #28]
        break;
 8004a68:	e009      	b.n	8004a7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a6e:	61fb      	str	r3, [r7, #28]
        break;
 8004a70:	e005      	b.n	8004a7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80fb 	beq.w	8004c7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	4413      	add	r3, r2
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d305      	bcc.n	8004aa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d903      	bls.n	8004aaa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004aa8:	e0e8      	b.n	8004c7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2200      	movs	r2, #0
 8004aae:	461c      	mov	r4, r3
 8004ab0:	4615      	mov	r5, r2
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	022b      	lsls	r3, r5, #8
 8004abc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ac0:	0222      	lsls	r2, r4, #8
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	6849      	ldr	r1, [r1, #4]
 8004ac6:	0849      	lsrs	r1, r1, #1
 8004ac8:	2000      	movs	r0, #0
 8004aca:	4688      	mov	r8, r1
 8004acc:	4681      	mov	r9, r0
 8004ace:	eb12 0a08 	adds.w	sl, r2, r8
 8004ad2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	4659      	mov	r1, fp
 8004ae8:	f7fb fbda 	bl	80002a0 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afa:	d308      	bcc.n	8004b0e <UART_SetConfig+0x3de>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b02:	d204      	bcs.n	8004b0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	e0b6      	b.n	8004c7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b14:	e0b2      	b.n	8004c7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1e:	d15e      	bne.n	8004bde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d828      	bhi.n	8004b7a <UART_SetConfig+0x44a>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0x400>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b5d 	.word	0x08004b5d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b6b 	.word	0x08004b6b
 8004b44:	08004b7b 	.word	0x08004b7b
 8004b48:	08004b7b 	.word	0x08004b7b
 8004b4c:	08004b7b 	.word	0x08004b7b
 8004b50:	08004b73 	.word	0x08004b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe f8ea 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8004b58:	61f8      	str	r0, [r7, #28]
        break;
 8004b5a:	e014      	b.n	8004b86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe f8fc 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8004b60:	61f8      	str	r0, [r7, #28]
        break;
 8004b62:	e010      	b.n	8004b86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <UART_SetConfig+0x56c>)
 8004b66:	61fb      	str	r3, [r7, #28]
        break;
 8004b68:	e00d      	b.n	8004b86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7fe f847 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004b6e:	61f8      	str	r0, [r7, #28]
        break;
 8004b70:	e009      	b.n	8004b86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b76:	61fb      	str	r3, [r7, #28]
        break;
 8004b78:	e005      	b.n	8004b86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d077      	beq.n	8004c7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	005a      	lsls	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	441a      	add	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d916      	bls.n	8004bd6 <UART_SetConfig+0x4a6>
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bae:	d212      	bcs.n	8004bd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f023 030f 	bic.w	r3, r3, #15
 8004bb8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	8afa      	ldrh	r2, [r7, #22]
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e052      	b.n	8004c7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bdc:	e04e      	b.n	8004c7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d827      	bhi.n	8004c36 <UART_SetConfig+0x506>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0x4bc>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7fe f88c 	bl	8002d2c <HAL_RCC_GetPCLK1Freq>
 8004c14:	61f8      	str	r0, [r7, #28]
        break;
 8004c16:	e014      	b.n	8004c42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fe f89e 	bl	8002d58 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	61f8      	str	r0, [r7, #28]
        break;
 8004c1e:	e010      	b.n	8004c42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <UART_SetConfig+0x56c>)
 8004c22:	61fb      	str	r3, [r7, #28]
        break;
 8004c24:	e00d      	b.n	8004c42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7fd ffe9 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004c2a:	61f8      	str	r0, [r7, #28]
        break;
 8004c2c:	e009      	b.n	8004c42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	61fb      	str	r3, [r7, #28]
        break;
 8004c34:	e005      	b.n	8004c42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c40:	bf00      	nop
    }

    if (pclk != 0U)
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d019      	beq.n	8004c7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	085a      	lsrs	r2, r3, #1
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	441a      	add	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d909      	bls.n	8004c76 <UART_SetConfig+0x546>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d205      	bcs.n	8004c76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	e002      	b.n	8004c7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3728      	adds	r7, #40	; 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c96:	bf00      	nop
 8004c98:	40008000 	.word	0x40008000
 8004c9c:	00f42400 	.word	0x00f42400

08004ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9e:	d10a      	bne.n	8004db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df4:	f7fc f9e4 	bl	80011c0 <HAL_GetTick>
 8004df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d10e      	bne.n	8004e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f82d 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e023      	b.n	8004e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d10e      	bne.n	8004e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f817 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e00d      	b.n	8004e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b09c      	sub	sp, #112	; 0x70
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	e0a5      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	f000 80a1 	beq.w	8004fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fc f995 	bl	80011c0 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d13e      	bne.n	8004f26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e067      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d04f      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f42:	d147      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fa0:	623a      	str	r2, [r7, #32]
 8004fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	69f9      	ldr	r1, [r7, #28]
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e5      	bne.n	8004f80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f43f af4a 	beq.w	8004e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3770      	adds	r7, #112	; 0x70
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	; 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
 8005026:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800502a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	2b01      	cmp	r3, #1
 8005072:	d118      	bne.n	80050a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60bb      	str	r3, [r7, #8]
   return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80050b8:	bf00      	nop
 80050ba:	3754      	adds	r7, #84	; 0x54
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fb0e 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	60bb      	str	r3, [r7, #8]
   return(result);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6979      	ldr	r1, [r7, #20]
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	613b      	str	r3, [r7, #16]
   return(result);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fada 	bl	80046f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513c:	bf00      	nop
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <__NVIC_SetPriority>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005168:	2b00      	cmp	r3, #0
 800516a:	db0a      	blt.n	8005182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	490c      	ldr	r1, [pc, #48]	; (80051a4 <__NVIC_SetPriority+0x4c>)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	0112      	lsls	r2, r2, #4
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	440b      	add	r3, r1
 800517c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005180:	e00a      	b.n	8005198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	4908      	ldr	r1, [pc, #32]	; (80051a8 <__NVIC_SetPriority+0x50>)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	3b04      	subs	r3, #4
 8005190:	0112      	lsls	r2, r2, #4
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	440b      	add	r3, r1
 8005196:	761a      	strb	r2, [r3, #24]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	e000e100 	.word	0xe000e100
 80051a8:	e000ed00 	.word	0xe000ed00

080051ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <SysTick_Handler+0x1c>)
 80051b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051b4:	f001 fcfe 	bl	8006bb4 <xTaskGetSchedulerState>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d001      	beq.n	80051c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051be:	f002 fae3 	bl	8007788 <xPortSysTickHandler>
  }
}
 80051c2:	bf00      	nop
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	e000e010 	.word	0xe000e010

080051cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051d0:	2100      	movs	r1, #0
 80051d2:	f06f 0004 	mvn.w	r0, #4
 80051d6:	f7ff ffbf 	bl	8005158 <__NVIC_SetPriority>
#endif
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051e6:	f3ef 8305 	mrs	r3, IPSR
 80051ea:	603b      	str	r3, [r7, #0]
  return(result);
 80051ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051f2:	f06f 0305 	mvn.w	r3, #5
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	e00c      	b.n	8005214 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <osKernelInitialize+0x44>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005202:	4b08      	ldr	r3, [pc, #32]	; (8005224 <osKernelInitialize+0x44>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005208:	2300      	movs	r3, #0
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e002      	b.n	8005214 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	200002ac 	.word	0x200002ac

08005228 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800522e:	f3ef 8305 	mrs	r3, IPSR
 8005232:	603b      	str	r3, [r7, #0]
  return(result);
 8005234:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <osKernelStart+0x1a>
    stat = osErrorISR;
 800523a:	f06f 0305 	mvn.w	r3, #5
 800523e:	607b      	str	r3, [r7, #4]
 8005240:	e010      	b.n	8005264 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <osKernelStart+0x48>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d109      	bne.n	800525e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800524a:	f7ff ffbf 	bl	80051cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <osKernelStart+0x48>)
 8005250:	2202      	movs	r2, #2
 8005252:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005254:	f001 f866 	bl	8006324 <vTaskStartScheduler>
      stat = osOK;
 8005258:	2300      	movs	r3, #0
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	e002      	b.n	8005264 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005264:	687b      	ldr	r3, [r7, #4]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200002ac 	.word	0x200002ac

08005274 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	; 0x38
 8005278:	af04      	add	r7, sp, #16
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005284:	f3ef 8305 	mrs	r3, IPSR
 8005288:	617b      	str	r3, [r7, #20]
  return(result);
 800528a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800528c:	2b00      	cmp	r3, #0
 800528e:	d17e      	bne.n	800538e <osThreadNew+0x11a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07b      	beq.n	800538e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800529a:	2318      	movs	r3, #24
 800529c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295
 80052a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d045      	beq.n	800533a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <osThreadNew+0x48>
        name = attr->name;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <osThreadNew+0x6e>
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b38      	cmp	r3, #56	; 0x38
 80052d4:	d805      	bhi.n	80052e2 <osThreadNew+0x6e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <osThreadNew+0x72>
        return (NULL);
 80052e2:	2300      	movs	r3, #0
 80052e4:	e054      	b.n	8005390 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	089b      	lsrs	r3, r3, #2
 80052f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00e      	beq.n	800531c <osThreadNew+0xa8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2b5b      	cmp	r3, #91	; 0x5b
 8005304:	d90a      	bls.n	800531c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800530a:	2b00      	cmp	r3, #0
 800530c:	d006      	beq.n	800531c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <osThreadNew+0xa8>
        mem = 1;
 8005316:	2301      	movs	r3, #1
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	e010      	b.n	800533e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10c      	bne.n	800533e <osThreadNew+0xca>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <osThreadNew+0xca>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <osThreadNew+0xca>
          mem = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	e001      	b.n	800533e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d110      	bne.n	8005366 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800534c:	9202      	str	r2, [sp, #8]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fe0c 	bl	8005f78 <xTaskCreateStatic>
 8005360:	4603      	mov	r3, r0
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	e013      	b.n	800538e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	b29a      	uxth	r2, r3
 8005370:	f107 0310 	add.w	r3, r7, #16
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fe57 	bl	8006032 <xTaskCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <osThreadNew+0x11a>
            hTask = NULL;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800538e:	693b      	ldr	r3, [r7, #16]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3728      	adds	r7, #40	; 0x28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053a0:	f3ef 8305 	mrs	r3, IPSR
 80053a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80053a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <osDelay+0x1c>
    stat = osErrorISR;
 80053ac:	f06f 0305 	mvn.w	r3, #5
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e007      	b.n	80053c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 ff7c 	bl	80062bc <vTaskDelay>
    }
  }

  return (stat);
 80053c4:	68fb      	ldr	r3, [r7, #12]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4a07      	ldr	r2, [pc, #28]	; (80053fc <vApplicationGetIdleTaskMemory+0x2c>)
 80053e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4a06      	ldr	r2, [pc, #24]	; (8005400 <vApplicationGetIdleTaskMemory+0x30>)
 80053e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	601a      	str	r2, [r3, #0]
}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	200002b0 	.word	0x200002b0
 8005400:	2000030c 	.word	0x2000030c

08005404 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4a07      	ldr	r2, [pc, #28]	; (8005430 <vApplicationGetTimerTaskMemory+0x2c>)
 8005414:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a06      	ldr	r2, [pc, #24]	; (8005434 <vApplicationGetTimerTaskMemory+0x30>)
 800541a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005422:	601a      	str	r2, [r3, #0]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	2000050c 	.word	0x2000050c
 8005434:	20000568 	.word	0x20000568

08005438 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f103 0208 	add.w	r2, r3, #8
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f04f 32ff 	mov.w	r2, #4294967295
 8005450:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f103 0208 	add.w	r2, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f103 0208 	add.w	r2, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d103      	bne.n	80054fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e00c      	b.n	8005514 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3308      	adds	r3, #8
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e002      	b.n	8005508 <vListInsert+0x2e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	d2f6      	bcs.n	8005502 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	601a      	str	r2, [r3, #0]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6892      	ldr	r2, [r2, #8]
 8005562:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d103      	bne.n	8005580 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	1e5a      	subs	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055ca:	f002 f84b 	bl	8007664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	68f9      	ldr	r1, [r7, #12]
 80055d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055da:	fb01 f303 	mul.w	r3, r1, r3
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	3b01      	subs	r3, #1
 80055fc:	68f9      	ldr	r1, [r7, #12]
 80055fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	441a      	add	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d114      	bne.n	800564a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01a      	beq.n	800565e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3310      	adds	r3, #16
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f903 	bl	8006838 <xTaskRemoveFromEventList>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d012      	beq.n	800565e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005638:	4b0c      	ldr	r3, [pc, #48]	; (800566c <xQueueGenericReset+0xcc>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	e009      	b.n	800565e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3310      	adds	r3, #16
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fef2 	bl	8005438 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff feed 	bl	8005438 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800565e:	f002 f831 	bl	80076c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005662:	2301      	movs	r3, #1
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08e      	sub	sp, #56	; 0x38
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d002      	beq.n	80056c2 <xQueueGenericCreateStatic+0x52>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <xQueueGenericCreateStatic+0x56>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <xQueueGenericCreateStatic+0x58>
 80056c6:	2300      	movs	r3, #0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	623b      	str	r3, [r7, #32]
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <xQueueGenericCreateStatic+0x7e>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericCreateStatic+0x82>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericCreateStatic+0x84>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800570e:	2350      	movs	r3, #80	; 0x50
 8005710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2b50      	cmp	r3, #80	; 0x50
 8005716:	d00a      	beq.n	800572e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61bb      	str	r3, [r7, #24]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800572e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005742:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	4613      	mov	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68b9      	ldr	r1, [r7, #8]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f805 	bl	8005760 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3730      	adds	r7, #48	; 0x30
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e002      	b.n	8005782 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800578e:	2101      	movs	r1, #1
 8005790:	69b8      	ldr	r0, [r7, #24]
 8005792:	f7ff ff05 	bl	80055a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08e      	sub	sp, #56	; 0x38
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057b6:	2300      	movs	r3, #0
 80057b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericSend+0x32>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <xQueueGenericSend+0x40>
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <xQueueGenericSend+0x44>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <xQueueGenericSend+0x46>
 80057ec:	2300      	movs	r3, #0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <xQueueGenericSend+0x60>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d103      	bne.n	8005816 <xQueueGenericSend+0x6e>
 800580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <xQueueGenericSend+0x72>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueGenericSend+0x74>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xQueueGenericSend+0x8e>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005836:	f001 f9bd 	bl	8006bb4 <xTaskGetSchedulerState>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <xQueueGenericSend+0x9e>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <xQueueGenericSend+0xa2>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <xQueueGenericSend+0xa4>
 800584a:	2300      	movs	r3, #0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <xQueueGenericSend+0xbe>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	61fb      	str	r3, [r7, #28]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005866:	f001 fefd 	bl	8007664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	429a      	cmp	r2, r3
 8005874:	d302      	bcc.n	800587c <xQueueGenericSend+0xd4>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d129      	bne.n	80058d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005882:	f000 fa0b 	bl	8005c9c <prvCopyDataToQueue>
 8005886:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d010      	beq.n	80058b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	4618      	mov	r0, r3
 8005896:	f000 ffcf 	bl	8006838 <xTaskRemoveFromEventList>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <xQueueGenericSend+0x1f8>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	e00a      	b.n	80058c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <xQueueGenericSend+0x1f8>)
 80058ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058c8:	f001 fefc 	bl	80076c4 <vPortExitCritical>
				return pdPASS;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e063      	b.n	8005998 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058d6:	f001 fef5 	bl	80076c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	e05c      	b.n	8005998 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f809 	bl	8006900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058f2:	f001 fee7 	bl	80076c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058f6:	f000 fd7b 	bl	80063f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058fa:	f001 feb3 	bl	8007664 <vPortEnterCritical>
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005904:	b25b      	sxtb	r3, r3
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d103      	bne.n	8005914 <xQueueGenericSend+0x16c>
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800591a:	b25b      	sxtb	r3, r3
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d103      	bne.n	800592a <xQueueGenericSend+0x182>
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800592a:	f001 fecb 	bl	80076c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800592e:	1d3a      	adds	r2, r7, #4
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fff8 	bl	800692c <xTaskCheckForTimeOut>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d124      	bne.n	800598c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005944:	f000 faa2 	bl	8005e8c <prvIsQueueFull>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d018      	beq.n	8005980 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	3310      	adds	r3, #16
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ff1e 	bl	8006798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800595c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800595e:	f000 fa2d 	bl	8005dbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005962:	f000 fd53 	bl	800640c <xTaskResumeAll>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f af7c 	bne.w	8005866 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800596e:	4b0c      	ldr	r3, [pc, #48]	; (80059a0 <xQueueGenericSend+0x1f8>)
 8005970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	e772      	b.n	8005866 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005982:	f000 fa1b 	bl	8005dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005986:	f000 fd41 	bl	800640c <xTaskResumeAll>
 800598a:	e76c      	b.n	8005866 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800598c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800598e:	f000 fa15 	bl	8005dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005992:	f000 fd3b 	bl	800640c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005996:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005998:	4618      	mov	r0, r3
 800599a:	3738      	adds	r7, #56	; 0x38
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	e000ed04 	.word	0xe000ed04

080059a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b090      	sub	sp, #64	; 0x40
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <xQueueGenericSendFromISR+0x3c>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <xQueueGenericSendFromISR+0x40>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <xQueueGenericSendFromISR+0x42>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSendFromISR+0x6a>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <xQueueGenericSendFromISR+0x6e>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueGenericSendFromISR+0x70>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	623b      	str	r3, [r7, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a2e:	f001 fefb 	bl	8007828 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a32:	f3ef 8211 	mrs	r2, BASEPRI
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	61fa      	str	r2, [r7, #28]
 8005a48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <xQueueGenericSendFromISR+0xbc>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d12f      	bne.n	8005ac0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a76:	f000 f911 	bl	8005c9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d112      	bne.n	8005aaa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d016      	beq.n	8005aba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fed1 	bl	8006838 <xTaskRemoveFromEventList>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e007      	b.n	8005aba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	b25a      	sxtb	r2, r3
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005abe:	e001      	b.n	8005ac4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ace:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3740      	adds	r7, #64	; 0x40
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <xQueueReceive+0x30>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	623b      	str	r3, [r7, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <xQueueReceive+0x3e>
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueReceive+0x42>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueReceive+0x44>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueReceive+0x5e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61fb      	str	r3, [r7, #28]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3a:	f001 f83b 	bl	8006bb4 <xTaskGetSchedulerState>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xQueueReceive+0x6e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <xQueueReceive+0x72>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueReceive+0x74>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueReceive+0x8e>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61bb      	str	r3, [r7, #24]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6a:	f001 fd7b 	bl	8007664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01f      	beq.n	8005bba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7e:	f000 f8f7 	bl	8005d70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	1e5a      	subs	r2, r3, #1
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00f      	beq.n	8005bb2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fe4e 	bl	8006838 <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <xQueueReceive+0x1bc>)
 8005ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bb2:	f001 fd87 	bl	80076c4 <vPortExitCritical>
				return pdPASS;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e069      	b.n	8005c8e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc0:	f001 fd80 	bl	80076c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e062      	b.n	8005c8e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bce:	f107 0310 	add.w	r3, r7, #16
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fe94 	bl	8006900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bdc:	f001 fd72 	bl	80076c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be0:	f000 fc06 	bl	80063f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005be4:	f001 fd3e 	bl	8007664 <vPortEnterCritical>
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bee:	b25b      	sxtb	r3, r3
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d103      	bne.n	8005bfe <xQueueReceive+0x122>
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d103      	bne.n	8005c14 <xQueueReceive+0x138>
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c14:	f001 fd56 	bl	80076c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c18:	1d3a      	adds	r2, r7, #4
 8005c1a:	f107 0310 	add.w	r3, r7, #16
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fe83 	bl	800692c <xTaskCheckForTimeOut>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d123      	bne.n	8005c74 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c2e:	f000 f917 	bl	8005e60 <prvIsQueueEmpty>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d017      	beq.n	8005c68 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	3324      	adds	r3, #36	; 0x24
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fda9 	bl	8006798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c48:	f000 f8b8 	bl	8005dbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c4c:	f000 fbde 	bl	800640c <xTaskResumeAll>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d189      	bne.n	8005b6a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <xQueueReceive+0x1bc>)
 8005c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	e780      	b.n	8005b6a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6a:	f000 f8a7 	bl	8005dbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c6e:	f000 fbcd 	bl	800640c <xTaskResumeAll>
 8005c72:	e77a      	b.n	8005b6a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c76:	f000 f8a1 	bl	8005dbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c7a:	f000 fbc7 	bl	800640c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c80:	f000 f8ee 	bl	8005e60 <prvIsQueueEmpty>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f43f af6f 	beq.w	8005b6a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3730      	adds	r7, #48	; 0x30
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d14d      	bne.n	8005d5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 ff92 	bl	8006bf0 <xTaskPriorityDisinherit>
 8005ccc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	e043      	b.n	8005d5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d119      	bne.n	8005d10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6858      	ldr	r0, [r3, #4]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	f001 fff6 	bl	8007cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d32b      	bcc.n	8005d5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
 8005d0e:	e026      	b.n	8005d5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68d8      	ldr	r0, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	f001 ffdc 	bl	8007cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	425b      	negs	r3, r3
 8005d2a:	441a      	add	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d207      	bcs.n	8005d4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	425b      	negs	r3, r3
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d105      	bne.n	8005d5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d66:	697b      	ldr	r3, [r7, #20]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d018      	beq.n	8005db4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	441a      	add	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d303      	bcc.n	8005da4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68d9      	ldr	r1, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	461a      	mov	r2, r3
 8005dae:	6838      	ldr	r0, [r7, #0]
 8005db0:	f001 ff92 	bl	8007cd8 <memcpy>
	}
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005dc4:	f001 fc4e 	bl	8007664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dd0:	e011      	b.n	8005df6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d012      	beq.n	8005e00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3324      	adds	r3, #36	; 0x24
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fd2a 	bl	8006838 <xTaskRemoveFromEventList>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005dea:	f000 fe01 	bl	80069f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	dce9      	bgt.n	8005dd2 <prvUnlockQueue+0x16>
 8005dfe:	e000      	b.n	8005e02 <prvUnlockQueue+0x46>
					break;
 8005e00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005e0a:	f001 fc5b 	bl	80076c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e0e:	f001 fc29 	bl	8007664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e1a:	e011      	b.n	8005e40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3310      	adds	r3, #16
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fd05 	bl	8006838 <xTaskRemoveFromEventList>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e34:	f000 fddc 	bl	80069f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dce9      	bgt.n	8005e1c <prvUnlockQueue+0x60>
 8005e48:	e000      	b.n	8005e4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	22ff      	movs	r2, #255	; 0xff
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005e54:	f001 fc36 	bl	80076c4 <vPortExitCritical>
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e68:	f001 fbfc 	bl	8007664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d102      	bne.n	8005e7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	e001      	b.n	8005e7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e7e:	f001 fc21 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 8005e82:	68fb      	ldr	r3, [r7, #12]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e94:	f001 fbe6 	bl	8007664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d102      	bne.n	8005eaa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e001      	b.n	8005eae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005eae:	f001 fc09 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e014      	b.n	8005ef6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ecc:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <vQueueAddToRegistry+0x50>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10b      	bne.n	8005ef0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ed8:	490c      	ldr	r1, [pc, #48]	; (8005f0c <vQueueAddToRegistry+0x50>)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <vQueueAddToRegistry+0x50>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4413      	add	r3, r2
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005eee:	e006      	b.n	8005efe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b07      	cmp	r3, #7
 8005efa:	d9e7      	bls.n	8005ecc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000968 	.word	0x20000968

08005f10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f20:	f001 fba0 	bl	8007664 <vPortEnterCritical>
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d103      	bne.n	8005f3a <vQueueWaitForMessageRestricted+0x2a>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d103      	bne.n	8005f50 <vQueueWaitForMessageRestricted+0x40>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f50:	f001 fbb8 	bl	80076c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d106      	bne.n	8005f6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	3324      	adds	r3, #36	; 0x24
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fc3b 	bl	80067e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f6a:	6978      	ldr	r0, [r7, #20]
 8005f6c:	f7ff ff26 	bl	8005dbc <prvUnlockQueue>
	}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af04      	add	r7, sp, #16
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10a      	bne.n	8005fa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	623b      	str	r3, [r7, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xTaskCreateStatic+0x46>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61fb      	str	r3, [r7, #28]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fbe:	235c      	movs	r3, #92	; 0x5c
 8005fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fc6:	d00a      	beq.n	8005fde <xTaskCreateStatic+0x66>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	61bb      	str	r3, [r7, #24]
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01e      	beq.n	8006024 <xTaskCreateStatic+0xac>
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01b      	beq.n	8006024 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ffe:	2300      	movs	r3, #0
 8006000:	9303      	str	r3, [sp, #12]
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	f107 0314 	add.w	r3, r7, #20
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f850 	bl	80060bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800601c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800601e:	f000 f8dd 	bl	80061dc <prvAddNewTaskToReadyList>
 8006022:	e001      	b.n	8006028 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006028:	697b      	ldr	r3, [r7, #20]
	}
 800602a:	4618      	mov	r0, r3
 800602c:	3728      	adds	r7, #40	; 0x28
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006032:	b580      	push	{r7, lr}
 8006034:	b08c      	sub	sp, #48	; 0x30
 8006036:	af04      	add	r7, sp, #16
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fc2e 	bl	80078a8 <pvPortMalloc>
 800604c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006054:	205c      	movs	r0, #92	; 0x5c
 8006056:	f001 fc27 	bl	80078a8 <pvPortMalloc>
 800605a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
 8006068:	e005      	b.n	8006076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800606a:	6978      	ldr	r0, [r7, #20]
 800606c:	f001 fce8 	bl	8007a40 <vPortFree>
 8006070:	e001      	b.n	8006076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006084:	88fa      	ldrh	r2, [r7, #6]
 8006086:	2300      	movs	r3, #0
 8006088:	9303      	str	r3, [sp, #12]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	9302      	str	r3, [sp, #8]
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f80e 	bl	80060bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060a0:	69f8      	ldr	r0, [r7, #28]
 80060a2:	f000 f89b 	bl	80061dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	e002      	b.n	80060b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060ac:	f04f 33ff 	mov.w	r3, #4294967295
 80060b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060b2:	69bb      	ldr	r3, [r7, #24]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b088      	sub	sp, #32
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	461a      	mov	r2, r3
 80060d4:	21a5      	movs	r1, #165	; 0xa5
 80060d6:	f001 fe0d 	bl	8007cf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060e4:	3b01      	subs	r3, #1
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f023 0307 	bic.w	r3, r3, #7
 80060f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <prvInitialiseNewTask+0x58>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	617b      	str	r3, [r7, #20]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01f      	beq.n	800615a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800611a:	2300      	movs	r3, #0
 800611c:	61fb      	str	r3, [r7, #28]
 800611e:	e012      	b.n	8006146 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	7819      	ldrb	r1, [r3, #0]
 8006128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	3334      	adds	r3, #52	; 0x34
 8006130:	460a      	mov	r2, r1
 8006132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	2b0f      	cmp	r3, #15
 800614a:	d9e9      	bls.n	8006120 <prvInitialiseNewTask+0x64>
 800614c:	e000      	b.n	8006150 <prvInitialiseNewTask+0x94>
			{
				break;
 800614e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006158:	e003      	b.n	8006162 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	2b37      	cmp	r3, #55	; 0x37
 8006166:	d901      	bls.n	800616c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006168:	2337      	movs	r3, #55	; 0x37
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	2200      	movs	r2, #0
 800617c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff f978 	bl	8005478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	3318      	adds	r3, #24
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f973 	bl	8005478 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	2200      	movs	r2, #0
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	69b8      	ldr	r0, [r7, #24]
 80061bc:	f001 f928 	bl	8007410 <pxPortInitialiseStack>
 80061c0:	4602      	mov	r2, r0
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061d2:	bf00      	nop
 80061d4:	3720      	adds	r7, #32
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061e4:	f001 fa3e 	bl	8007664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061e8:	4b2d      	ldr	r3, [pc, #180]	; (80062a0 <prvAddNewTaskToReadyList+0xc4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <prvAddNewTaskToReadyList+0xc4>)
 80061f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061f2:	4b2c      	ldr	r3, [pc, #176]	; (80062a4 <prvAddNewTaskToReadyList+0xc8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <prvAddNewTaskToReadyList+0xc8>)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006200:	4b27      	ldr	r3, [pc, #156]	; (80062a0 <prvAddNewTaskToReadyList+0xc4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d110      	bne.n	800622a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006208:	f000 fc16 	bl	8006a38 <prvInitialiseTaskLists>
 800620c:	e00d      	b.n	800622a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800620e:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <prvAddNewTaskToReadyList+0xcc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006216:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <prvAddNewTaskToReadyList+0xc8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	429a      	cmp	r2, r3
 8006222:	d802      	bhi.n	800622a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006224:	4a1f      	ldr	r2, [pc, #124]	; (80062a4 <prvAddNewTaskToReadyList+0xc8>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <prvAddNewTaskToReadyList+0xd0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <prvAddNewTaskToReadyList+0xd0>)
 8006232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <prvAddNewTaskToReadyList+0xd0>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <prvAddNewTaskToReadyList+0xd4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d903      	bls.n	8006250 <prvAddNewTaskToReadyList+0x74>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <prvAddNewTaskToReadyList+0xd4>)
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <prvAddNewTaskToReadyList+0xd8>)
 800625e:	441a      	add	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7ff f913 	bl	8005492 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800626c:	f001 fa2a 	bl	80076c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006270:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <prvAddNewTaskToReadyList+0xcc>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00e      	beq.n	8006296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <prvAddNewTaskToReadyList+0xc8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006282:	429a      	cmp	r2, r3
 8006284:	d207      	bcs.n	8006296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvAddNewTaskToReadyList+0xdc>)
 8006288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006296:	bf00      	nop
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000e7c 	.word	0x20000e7c
 80062a4:	200009a8 	.word	0x200009a8
 80062a8:	20000e88 	.word	0x20000e88
 80062ac:	20000e98 	.word	0x20000e98
 80062b0:	20000e84 	.word	0x20000e84
 80062b4:	200009ac 	.word	0x200009ac
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d017      	beq.n	80062fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <vTaskDelay+0x60>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00a      	beq.n	80062ec <vTaskDelay+0x30>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60bb      	str	r3, [r7, #8]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80062ec:	f000 f880 	bl	80063f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062f0:	2100      	movs	r1, #0
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fcea 	bl	8006ccc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062f8:	f000 f888 	bl	800640c <xTaskResumeAll>
 80062fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <vTaskDelay+0x64>)
 8006306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006314:	bf00      	nop
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	20000ea4 	.word	0x20000ea4
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006332:	463a      	mov	r2, r7
 8006334:	1d39      	adds	r1, r7, #4
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff f848 	bl	80053d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	9202      	str	r2, [sp, #8]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	460a      	mov	r2, r1
 8006352:	4921      	ldr	r1, [pc, #132]	; (80063d8 <vTaskStartScheduler+0xb4>)
 8006354:	4821      	ldr	r0, [pc, #132]	; (80063dc <vTaskStartScheduler+0xb8>)
 8006356:	f7ff fe0f 	bl	8005f78 <xTaskCreateStatic>
 800635a:	4603      	mov	r3, r0
 800635c:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <vTaskStartScheduler+0xbc>)
 800635e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006360:	4b1f      	ldr	r3, [pc, #124]	; (80063e0 <vTaskStartScheduler+0xbc>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e001      	b.n	8006372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d102      	bne.n	800637e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006378:	f000 fcfc 	bl	8006d74 <xTimerCreateTimerTask>
 800637c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d116      	bne.n	80063b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	613b      	str	r3, [r7, #16]
}
 8006396:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <vTaskStartScheduler+0xc0>)
 800639a:	f04f 32ff 	mov.w	r2, #4294967295
 800639e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <vTaskStartScheduler+0xc4>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <vTaskStartScheduler+0xc8>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063ac:	f001 f8b8 	bl	8007520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063b0:	e00e      	b.n	80063d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d10a      	bne.n	80063d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60fb      	str	r3, [r7, #12]
}
 80063cc:	bf00      	nop
 80063ce:	e7fe      	b.n	80063ce <vTaskStartScheduler+0xaa>
}
 80063d0:	bf00      	nop
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	080097ec 	.word	0x080097ec
 80063dc:	08006a09 	.word	0x08006a09
 80063e0:	20000ea0 	.word	0x20000ea0
 80063e4:	20000e9c 	.word	0x20000e9c
 80063e8:	20000e88 	.word	0x20000e88
 80063ec:	20000e80 	.word	0x20000e80

080063f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <vTaskSuspendAll+0x18>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	4a03      	ldr	r2, [pc, #12]	; (8006408 <vTaskSuspendAll+0x18>)
 80063fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	20000ea4 	.word	0x20000ea4

0800640c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800641a:	4b42      	ldr	r3, [pc, #264]	; (8006524 <xTaskResumeAll+0x118>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <xTaskResumeAll+0x2c>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	603b      	str	r3, [r7, #0]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006438:	f001 f914 	bl	8007664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800643c:	4b39      	ldr	r3, [pc, #228]	; (8006524 <xTaskResumeAll+0x118>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3b01      	subs	r3, #1
 8006442:	4a38      	ldr	r2, [pc, #224]	; (8006524 <xTaskResumeAll+0x118>)
 8006444:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006446:	4b37      	ldr	r3, [pc, #220]	; (8006524 <xTaskResumeAll+0x118>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d162      	bne.n	8006514 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800644e:	4b36      	ldr	r3, [pc, #216]	; (8006528 <xTaskResumeAll+0x11c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d05e      	beq.n	8006514 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006456:	e02f      	b.n	80064b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006458:	4b34      	ldr	r3, [pc, #208]	; (800652c <xTaskResumeAll+0x120>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff f871 	bl	800554c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff f86c 	bl	800554c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <xTaskResumeAll+0x124>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskResumeAll+0x7c>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <xTaskResumeAll+0x124>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <xTaskResumeAll+0x128>)
 8006496:	441a      	add	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fff7 	bl	8005492 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4b23      	ldr	r3, [pc, #140]	; (8006538 <xTaskResumeAll+0x12c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <xTaskResumeAll+0x130>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064b8:	4b1c      	ldr	r3, [pc, #112]	; (800652c <xTaskResumeAll+0x120>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1cb      	bne.n	8006458 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064c6:	f000 fb55 	bl	8006b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064ca:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <xTaskResumeAll+0x134>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d010      	beq.n	80064f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064d6:	f000 f847 	bl	8006568 <xTaskIncrementTick>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064e0:	4b16      	ldr	r3, [pc, #88]	; (800653c <xTaskResumeAll+0x130>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f1      	bne.n	80064d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <xTaskResumeAll+0x134>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064f8:	4b10      	ldr	r3, [pc, #64]	; (800653c <xTaskResumeAll+0x130>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <xTaskResumeAll+0x138>)
 8006506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006514:	f001 f8d6 	bl	80076c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006518:	68bb      	ldr	r3, [r7, #8]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000ea4 	.word	0x20000ea4
 8006528:	20000e7c 	.word	0x20000e7c
 800652c:	20000e3c 	.word	0x20000e3c
 8006530:	20000e84 	.word	0x20000e84
 8006534:	200009ac 	.word	0x200009ac
 8006538:	200009a8 	.word	0x200009a8
 800653c:	20000e90 	.word	0x20000e90
 8006540:	20000e8c 	.word	0x20000e8c
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <xTaskGetTickCount+0x1c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006554:	687b      	ldr	r3, [r7, #4]
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000e80 	.word	0x20000e80

08006568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006572:	4b4f      	ldr	r3, [pc, #316]	; (80066b0 <xTaskIncrementTick+0x148>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 808f 	bne.w	800669a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800657c:	4b4d      	ldr	r3, [pc, #308]	; (80066b4 <xTaskIncrementTick+0x14c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006584:	4a4b      	ldr	r2, [pc, #300]	; (80066b4 <xTaskIncrementTick+0x14c>)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d120      	bne.n	80065d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006590:	4b49      	ldr	r3, [pc, #292]	; (80066b8 <xTaskIncrementTick+0x150>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	603b      	str	r3, [r7, #0]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xTaskIncrementTick+0x46>
 80065b0:	4b41      	ldr	r3, [pc, #260]	; (80066b8 <xTaskIncrementTick+0x150>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	4b41      	ldr	r3, [pc, #260]	; (80066bc <xTaskIncrementTick+0x154>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3f      	ldr	r2, [pc, #252]	; (80066b8 <xTaskIncrementTick+0x150>)
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	4a3f      	ldr	r2, [pc, #252]	; (80066bc <xTaskIncrementTick+0x154>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	4b3e      	ldr	r3, [pc, #248]	; (80066c0 <xTaskIncrementTick+0x158>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a3d      	ldr	r2, [pc, #244]	; (80066c0 <xTaskIncrementTick+0x158>)
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	f000 fad1 	bl	8006b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065d2:	4b3c      	ldr	r3, [pc, #240]	; (80066c4 <xTaskIncrementTick+0x15c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d349      	bcc.n	8006670 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <xTaskIncrementTick+0x150>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e6:	4b37      	ldr	r3, [pc, #220]	; (80066c4 <xTaskIncrementTick+0x15c>)
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ec:	601a      	str	r2, [r3, #0]
					break;
 80065ee:	e03f      	b.n	8006670 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f0:	4b31      	ldr	r3, [pc, #196]	; (80066b8 <xTaskIncrementTick+0x150>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d203      	bcs.n	8006610 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006608:	4a2e      	ldr	r2, [pc, #184]	; (80066c4 <xTaskIncrementTick+0x15c>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800660e:	e02f      	b.n	8006670 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe ff99 	bl	800554c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	3318      	adds	r3, #24
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe ff90 	bl	800554c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <xTaskIncrementTick+0x160>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <xTaskIncrementTick+0xd8>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a22      	ldr	r2, [pc, #136]	; (80066c8 <xTaskIncrementTick+0x160>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <xTaskIncrementTick+0x164>)
 800664e:	441a      	add	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fe ff1b 	bl	8005492 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <xTaskIncrementTick+0x168>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	429a      	cmp	r2, r3
 8006668:	d3b8      	bcc.n	80065dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800666a:	2301      	movs	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666e:	e7b5      	b.n	80065dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006670:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <xTaskIncrementTick+0x168>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	4915      	ldr	r1, [pc, #84]	; (80066cc <xTaskIncrementTick+0x164>)
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d901      	bls.n	800668c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800668c:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <xTaskIncrementTick+0x16c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	e004      	b.n	80066a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800669a:	4b0f      	ldr	r3, [pc, #60]	; (80066d8 <xTaskIncrementTick+0x170>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <xTaskIncrementTick+0x170>)
 80066a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80066a4:	697b      	ldr	r3, [r7, #20]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000ea4 	.word	0x20000ea4
 80066b4:	20000e80 	.word	0x20000e80
 80066b8:	20000e34 	.word	0x20000e34
 80066bc:	20000e38 	.word	0x20000e38
 80066c0:	20000e94 	.word	0x20000e94
 80066c4:	20000e9c 	.word	0x20000e9c
 80066c8:	20000e84 	.word	0x20000e84
 80066cc:	200009ac 	.word	0x200009ac
 80066d0:	200009a8 	.word	0x200009a8
 80066d4:	20000e90 	.word	0x20000e90
 80066d8:	20000e8c 	.word	0x20000e8c

080066dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066e2:	4b28      	ldr	r3, [pc, #160]	; (8006784 <vTaskSwitchContext+0xa8>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <vTaskSwitchContext+0xac>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066f0:	e041      	b.n	8006776 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80066f2:	4b25      	ldr	r3, [pc, #148]	; (8006788 <vTaskSwitchContext+0xac>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <vTaskSwitchContext+0xb0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e010      	b.n	8006722 <vTaskSwitchContext+0x46>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <vTaskSwitchContext+0x40>
	__asm volatile
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	607b      	str	r3, [r7, #4]
}
 8006718:	bf00      	nop
 800671a:	e7fe      	b.n	800671a <vTaskSwitchContext+0x3e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	491b      	ldr	r1, [pc, #108]	; (8006790 <vTaskSwitchContext+0xb4>)
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0e4      	beq.n	8006700 <vTaskSwitchContext+0x24>
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <vTaskSwitchContext+0xb4>)
 8006742:	4413      	add	r3, r2
 8006744:	60bb      	str	r3, [r7, #8]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	3308      	adds	r3, #8
 8006758:	429a      	cmp	r2, r3
 800675a:	d104      	bne.n	8006766 <vTaskSwitchContext+0x8a>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4a09      	ldr	r2, [pc, #36]	; (8006794 <vTaskSwitchContext+0xb8>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	4a06      	ldr	r2, [pc, #24]	; (800678c <vTaskSwitchContext+0xb0>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6013      	str	r3, [r2, #0]
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000ea4 	.word	0x20000ea4
 8006788:	20000e90 	.word	0x20000e90
 800678c:	20000e84 	.word	0x20000e84
 8006790:	200009ac 	.word	0x200009ac
 8006794:	200009a8 	.word	0x200009a8

08006798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60fb      	str	r3, [r7, #12]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067be:	4b07      	ldr	r3, [pc, #28]	; (80067dc <vTaskPlaceOnEventList+0x44>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3318      	adds	r3, #24
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7fe fe87 	bl	80054da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067cc:	2101      	movs	r1, #1
 80067ce:	6838      	ldr	r0, [r7, #0]
 80067d0:	f000 fa7c 	bl	8006ccc <prvAddCurrentTaskToDelayedList>
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200009a8 	.word	0x200009a8

080067e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	617b      	str	r3, [r7, #20]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <vTaskPlaceOnEventListRestricted+0x54>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3318      	adds	r3, #24
 800680e:	4619      	mov	r1, r3
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7fe fe3e 	bl	8005492 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	68b8      	ldr	r0, [r7, #8]
 8006826:	f000 fa51 	bl	8006ccc <prvAddCurrentTaskToDelayedList>
	}
 800682a:	bf00      	nop
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200009a8 	.word	0x200009a8

08006838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	3318      	adds	r3, #24
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fe6f 	bl	800554c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800686e:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <xTaskRemoveFromEventList+0xb0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11d      	bne.n	80068b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3304      	adds	r3, #4
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe fe66 	bl	800554c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	4b19      	ldr	r3, [pc, #100]	; (80068ec <xTaskRemoveFromEventList+0xb4>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d903      	bls.n	8006894 <xTaskRemoveFromEventList+0x5c>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	4a16      	ldr	r2, [pc, #88]	; (80068ec <xTaskRemoveFromEventList+0xb4>)
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <xTaskRemoveFromEventList+0xb8>)
 80068a2:	441a      	add	r2, r3
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f7fe fdf1 	bl	8005492 <vListInsertEnd>
 80068b0:	e005      	b.n	80068be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3318      	adds	r3, #24
 80068b6:	4619      	mov	r1, r3
 80068b8:	480e      	ldr	r0, [pc, #56]	; (80068f4 <xTaskRemoveFromEventList+0xbc>)
 80068ba:	f7fe fdea 	bl	8005492 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <xTaskRemoveFromEventList+0xc0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d905      	bls.n	80068d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068d0:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <xTaskRemoveFromEventList+0xc4>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e001      	b.n	80068dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068dc:	697b      	ldr	r3, [r7, #20]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000ea4 	.word	0x20000ea4
 80068ec:	20000e84 	.word	0x20000e84
 80068f0:	200009ac 	.word	0x200009ac
 80068f4:	20000e3c 	.word	0x20000e3c
 80068f8:	200009a8 	.word	0x200009a8
 80068fc:	20000e90 	.word	0x20000e90

08006900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <vTaskInternalSetTimeOutState+0x24>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <vTaskInternalSetTimeOutState+0x28>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	605a      	str	r2, [r3, #4]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	20000e94 	.word	0x20000e94
 8006928:	20000e80 	.word	0x20000e80

0800692c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	613b      	str	r3, [r7, #16]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	60fb      	str	r3, [r7, #12]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800696e:	f000 fe79 	bl	8007664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <xTaskCheckForTimeOut+0xbc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d102      	bne.n	8006992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800698c:	2300      	movs	r3, #0
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e023      	b.n	80069da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b15      	ldr	r3, [pc, #84]	; (80069ec <xTaskCheckForTimeOut+0xc0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d007      	beq.n	80069ae <xTaskCheckForTimeOut+0x82>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e015      	b.n	80069da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d20b      	bcs.n	80069d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff ff9b 	bl	8006900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	61fb      	str	r3, [r7, #28]
 80069ce:	e004      	b.n	80069da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069da:	f000 fe73 	bl	80076c4 <vPortExitCritical>

	return xReturn;
 80069de:	69fb      	ldr	r3, [r7, #28]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	20000e80 	.word	0x20000e80
 80069ec:	20000e94 	.word	0x20000e94

080069f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069f4:	4b03      	ldr	r3, [pc, #12]	; (8006a04 <vTaskMissedYield+0x14>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000e90 	.word	0x20000e90

08006a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a10:	f000 f852 	bl	8006ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <prvIdleTask+0x28>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d9f9      	bls.n	8006a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a1c:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <prvIdleTask+0x2c>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a2c:	e7f0      	b.n	8006a10 <prvIdleTask+0x8>
 8006a2e:	bf00      	nop
 8006a30:	200009ac 	.word	0x200009ac
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	e00c      	b.n	8006a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a12      	ldr	r2, [pc, #72]	; (8006a98 <prvInitialiseTaskLists+0x60>)
 8006a50:	4413      	add	r3, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fcf0 	bl	8005438 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b37      	cmp	r3, #55	; 0x37
 8006a62:	d9ef      	bls.n	8006a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a64:	480d      	ldr	r0, [pc, #52]	; (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a66:	f7fe fce7 	bl	8005438 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a6a:	480d      	ldr	r0, [pc, #52]	; (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a6c:	f7fe fce4 	bl	8005438 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a70:	480c      	ldr	r0, [pc, #48]	; (8006aa4 <prvInitialiseTaskLists+0x6c>)
 8006a72:	f7fe fce1 	bl	8005438 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a76:	480c      	ldr	r0, [pc, #48]	; (8006aa8 <prvInitialiseTaskLists+0x70>)
 8006a78:	f7fe fcde 	bl	8005438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a7c:	480b      	ldr	r0, [pc, #44]	; (8006aac <prvInitialiseTaskLists+0x74>)
 8006a7e:	f7fe fcdb 	bl	8005438 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <prvInitialiseTaskLists+0x78>)
 8006a84:	4a05      	ldr	r2, [pc, #20]	; (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	; (8006ab4 <prvInitialiseTaskLists+0x7c>)
 8006a8a:	4a05      	ldr	r2, [pc, #20]	; (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200009ac 	.word	0x200009ac
 8006a9c:	20000e0c 	.word	0x20000e0c
 8006aa0:	20000e20 	.word	0x20000e20
 8006aa4:	20000e3c 	.word	0x20000e3c
 8006aa8:	20000e50 	.word	0x20000e50
 8006aac:	20000e68 	.word	0x20000e68
 8006ab0:	20000e34 	.word	0x20000e34
 8006ab4:	20000e38 	.word	0x20000e38

08006ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006abe:	e019      	b.n	8006af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ac0:	f000 fdd0 	bl	8007664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	4b10      	ldr	r3, [pc, #64]	; (8006b08 <prvCheckTasksWaitingTermination+0x50>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe fd3b 	bl	800554c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006aea:	f000 fdeb 	bl	80076c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f810 	bl	8006b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e1      	bne.n	8006ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000e50 	.word	0x20000e50
 8006b0c:	20000e7c 	.word	0x20000e7c
 8006b10:	20000e64 	.word	0x20000e64

08006b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f000 ff88 	bl	8007a40 <vPortFree>
				vPortFree( pxTCB );
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 ff85 	bl	8007a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b36:	e018      	b.n	8006b6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d103      	bne.n	8006b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 ff7c 	bl	8007a40 <vPortFree>
	}
 8006b48:	e00f      	b.n	8006b6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d00a      	beq.n	8006b6a <prvDeleteTCB+0x56>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60fb      	str	r3, [r7, #12]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <prvDeleteTCB+0x54>
	}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <prvResetNextTaskUnblockTime+0x38>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d104      	bne.n	8006b8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b86:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b8c:	e008      	b.n	8006ba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <prvResetNextTaskUnblockTime+0x38>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006b9e:	6013      	str	r3, [r2, #0]
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000e34 	.word	0x20000e34
 8006bb0:	20000e9c 	.word	0x20000e9c

08006bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <xTaskGetSchedulerState+0x34>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d102      	bne.n	8006bc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	607b      	str	r3, [r7, #4]
 8006bc6:	e008      	b.n	8006bda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <xTaskGetSchedulerState+0x38>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d102      	bne.n	8006bd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	e001      	b.n	8006bda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bda:	687b      	ldr	r3, [r7, #4]
	}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000e88 	.word	0x20000e88
 8006bec:	20000ea4 	.word	0x20000ea4

08006bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d056      	beq.n	8006cb4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <xTaskPriorityDisinherit+0xd0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d00a      	beq.n	8006c26 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	60bb      	str	r3, [r7, #8]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d02c      	beq.n	8006cb4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d128      	bne.n	8006cb4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe fc70 	bl	800554c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <xTaskPriorityDisinherit+0xd4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d903      	bls.n	8006c94 <xTaskPriorityDisinherit+0xa4>
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	4a0c      	ldr	r2, [pc, #48]	; (8006cc4 <xTaskPriorityDisinherit+0xd4>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <xTaskPriorityDisinherit+0xd8>)
 8006ca2:	441a      	add	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	4619      	mov	r1, r3
 8006caa:	4610      	mov	r0, r2
 8006cac:	f7fe fbf1 	bl	8005492 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006cb4:	697b      	ldr	r3, [r7, #20]
	}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200009a8 	.word	0x200009a8
 8006cc4:	20000e84 	.word	0x20000e84
 8006cc8:	200009ac 	.word	0x200009ac

08006ccc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cd6:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cdc:	4b20      	ldr	r3, [pc, #128]	; (8006d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fc32 	bl	800554c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d10a      	bne.n	8006d06 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4819      	ldr	r0, [pc, #100]	; (8006d64 <prvAddCurrentTaskToDelayedList+0x98>)
 8006d00:	f7fe fbc7 	bl	8005492 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d04:	e026      	b.n	8006d54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d0e:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d209      	bcs.n	8006d32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7fe fbd5 	bl	80054da <vListInsert>
}
 8006d30:	e010      	b.n	8006d54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7fe fbcb 	bl	80054da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d202      	bcs.n	8006d54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d4e:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6013      	str	r3, [r2, #0]
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	20000e80 	.word	0x20000e80
 8006d60:	200009a8 	.word	0x200009a8
 8006d64:	20000e68 	.word	0x20000e68
 8006d68:	20000e38 	.word	0x20000e38
 8006d6c:	20000e34 	.word	0x20000e34
 8006d70:	20000e9c 	.word	0x20000e9c

08006d74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d7e:	f000 fb07 	bl	8007390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <xTimerCreateTimerTask+0x80>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d021      	beq.n	8006dce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	f107 0108 	add.w	r1, r7, #8
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe fb31 	bl	8005404 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	9202      	str	r2, [sp, #8]
 8006daa:	9301      	str	r3, [sp, #4]
 8006dac:	2302      	movs	r3, #2
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	460a      	mov	r2, r1
 8006db4:	4910      	ldr	r1, [pc, #64]	; (8006df8 <xTimerCreateTimerTask+0x84>)
 8006db6:	4811      	ldr	r0, [pc, #68]	; (8006dfc <xTimerCreateTimerTask+0x88>)
 8006db8:	f7ff f8de 	bl	8005f78 <xTaskCreateStatic>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4a10      	ldr	r2, [pc, #64]	; (8006e00 <xTimerCreateTimerTask+0x8c>)
 8006dc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <xTimerCreateTimerTask+0x8c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	613b      	str	r3, [r7, #16]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	20000ed8 	.word	0x20000ed8
 8006df8:	080097f4 	.word	0x080097f4
 8006dfc:	08006f39 	.word	0x08006f39
 8006e00:	20000edc 	.word	0x20000edc

08006e04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08a      	sub	sp, #40	; 0x28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	623b      	str	r3, [r7, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e32:	4b1a      	ldr	r3, [pc, #104]	; (8006e9c <xTimerGenericCommand+0x98>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d02a      	beq.n	8006e90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	dc18      	bgt.n	8006e7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e4c:	f7ff feb2 	bl	8006bb4 <xTaskGetSchedulerState>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d109      	bne.n	8006e6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <xTimerGenericCommand+0x98>)
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	f107 0110 	add.w	r1, r7, #16
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e62:	f7fe fca1 	bl	80057a8 <xQueueGenericSend>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24
 8006e68:	e012      	b.n	8006e90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <xTimerGenericCommand+0x98>)
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	f107 0110 	add.w	r1, r7, #16
 8006e72:	2300      	movs	r3, #0
 8006e74:	2200      	movs	r2, #0
 8006e76:	f7fe fc97 	bl	80057a8 <xQueueGenericSend>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e7c:	e008      	b.n	8006e90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <xTimerGenericCommand+0x98>)
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f107 0110 	add.w	r1, r7, #16
 8006e86:	2300      	movs	r3, #0
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	f7fe fd8b 	bl	80059a4 <xQueueGenericSendFromISR>
 8006e8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3728      	adds	r7, #40	; 0x28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000ed8 	.word	0x20000ed8

08006ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af02      	add	r7, sp, #8
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eaa:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <prvProcessExpiredTimer+0x94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fb47 	bl	800554c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d022      	beq.n	8006f12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	18d1      	adds	r1, r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	6978      	ldr	r0, [r7, #20]
 8006eda:	f000 f8d1 	bl	8007080 <prvInsertTimerInActiveList>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d01f      	beq.n	8006f24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	2100      	movs	r1, #0
 8006eee:	6978      	ldr	r0, [r7, #20]
 8006ef0:	f7ff ff88 	bl	8006e04 <xTimerGenericCommand>
 8006ef4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d113      	bne.n	8006f24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	6978      	ldr	r0, [r7, #20]
 8006f2a:	4798      	blx	r3
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000ed0 	.word	0x20000ed0

08006f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 f857 	bl	8006ff8 <prvGetNextExpireTime>
 8006f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f803 	bl	8006f5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f56:	f000 f8d5 	bl	8007104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f5a:	e7f1      	b.n	8006f40 <prvTimerTask+0x8>

08006f5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f66:	f7ff fa43 	bl	80063f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 f866 	bl	8007040 <prvSampleTimeNow>
 8006f74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d130      	bne.n	8006fde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <prvProcessTimerOrBlockTask+0x3c>
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d806      	bhi.n	8006f98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f8a:	f7ff fa3f 	bl	800640c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f8e:	68f9      	ldr	r1, [r7, #12]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ff85 	bl	8006ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f96:	e024      	b.n	8006fe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <prvProcessTimerOrBlockTask+0x90>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <prvProcessTimerOrBlockTask+0x50>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <prvProcessTimerOrBlockTask+0x52>
 8006fac:	2300      	movs	r3, #0
 8006fae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <prvProcessTimerOrBlockTask+0x94>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	f7fe ffa7 	bl	8005f10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fc2:	f7ff fa23 	bl	800640c <xTaskResumeAll>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <prvProcessTimerOrBlockTask+0x98>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
}
 8006fdc:	e001      	b.n	8006fe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fde:	f7ff fa15 	bl	800640c <xTaskResumeAll>
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000ed4 	.word	0x20000ed4
 8006ff0:	20000ed8 	.word	0x20000ed8
 8006ff4:	e000ed04 	.word	0xe000ed04

08006ff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <prvGetNextExpireTime+0x44>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <prvGetNextExpireTime+0x16>
 800700a:	2201      	movs	r2, #1
 800700c:	e000      	b.n	8007010 <prvGetNextExpireTime+0x18>
 800700e:	2200      	movs	r2, #0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <prvGetNextExpireTime+0x44>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	e001      	b.n	800702c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800702c:	68fb      	ldr	r3, [r7, #12]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000ed0 	.word	0x20000ed0

08007040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007048:	f7ff fa7e 	bl	8006548 <xTaskGetTickCount>
 800704c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <prvSampleTimeNow+0x3c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	429a      	cmp	r2, r3
 8007056:	d205      	bcs.n	8007064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007058:	f000 f936 	bl	80072c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e002      	b.n	800706a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800706a:	4a04      	ldr	r2, [pc, #16]	; (800707c <prvSampleTimeNow+0x3c>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007070:	68fb      	ldr	r3, [r7, #12]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000ee0 	.word	0x20000ee0

08007080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d812      	bhi.n	80070cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d302      	bcc.n	80070ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e01b      	b.n	80070f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070ba:	4b10      	ldr	r3, [pc, #64]	; (80070fc <prvInsertTimerInActiveList+0x7c>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f7fe fa08 	bl	80054da <vListInsert>
 80070ca:	e012      	b.n	80070f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d206      	bcs.n	80070e2 <prvInsertTimerInActiveList+0x62>
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d302      	bcc.n	80070e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070dc:	2301      	movs	r3, #1
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	e007      	b.n	80070f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070e2:	4b07      	ldr	r3, [pc, #28]	; (8007100 <prvInsertTimerInActiveList+0x80>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7fe f9f4 	bl	80054da <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070f2:	697b      	ldr	r3, [r7, #20]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20000ed4 	.word	0x20000ed4
 8007100:	20000ed0 	.word	0x20000ed0

08007104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08e      	sub	sp, #56	; 0x38
 8007108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800710a:	e0ca      	b.n	80072a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da18      	bge.n	8007144 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007112:	1d3b      	adds	r3, r7, #4
 8007114:	3304      	adds	r3, #4
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	61fb      	str	r3, [r7, #28]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713a:	6850      	ldr	r0, [r2, #4]
 800713c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713e:	6892      	ldr	r2, [r2, #8]
 8007140:	4611      	mov	r1, r2
 8007142:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f2c0 80aa 	blt.w	80072a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d004      	beq.n	8007162 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	3304      	adds	r3, #4
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe f9f5 	bl	800554c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007162:	463b      	mov	r3, r7
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff ff6b 	bl	8007040 <prvSampleTimeNow>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b09      	cmp	r3, #9
 8007170:	f200 8097 	bhi.w	80072a2 <prvProcessReceivedCommands+0x19e>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <prvProcessReceivedCommands+0x78>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071a5 	.word	0x080071a5
 8007188:	08007219 	.word	0x08007219
 800718c:	0800722d 	.word	0x0800722d
 8007190:	08007277 	.word	0x08007277
 8007194:	080071a5 	.word	0x080071a5
 8007198:	080071a5 	.word	0x080071a5
 800719c:	08007219 	.word	0x08007219
 80071a0:	0800722d 	.word	0x0800722d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071aa:	f043 0301 	orr.w	r3, r3, #1
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	18d1      	adds	r1, r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c4:	f7ff ff5c 	bl	8007080 <prvInsertTimerInActiveList>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d069      	beq.n	80072a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d05e      	beq.n	80072a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	441a      	add	r2, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	2300      	movs	r3, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f6:	f7ff fe05 	bl	8006e04 <xTimerGenericCommand>
 80071fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d14f      	bne.n	80072a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	61bb      	str	r3, [r7, #24]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800721e:	f023 0301 	bic.w	r3, r3, #1
 8007222:	b2da      	uxtb	r2, r3
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800722a:	e03a      	b.n	80072a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	617b      	str	r3, [r7, #20]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	699a      	ldr	r2, [r3, #24]
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	18d1      	adds	r1, r2, r3
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007270:	f7ff ff06 	bl	8007080 <prvInsertTimerInActiveList>
					break;
 8007274:	e015      	b.n	80072a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007286:	f000 fbdb 	bl	8007a40 <vPortFree>
 800728a:	e00a      	b.n	80072a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	b2da      	uxtb	r2, r3
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800729e:	e000      	b.n	80072a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80072a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <prvProcessReceivedCommands+0x1c0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1d39      	adds	r1, r7, #4
 80072a8:	2200      	movs	r2, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe fc16 	bl	8005adc <xQueueReceive>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f47f af2a 	bne.w	800710c <prvProcessReceivedCommands+0x8>
	}
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3730      	adds	r7, #48	; 0x30
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000ed8 	.word	0x20000ed8

080072c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072ce:	e048      	b.n	8007362 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072d0:	4b2d      	ldr	r3, [pc, #180]	; (8007388 <prvSwitchTimerLists+0xc0>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072da:	4b2b      	ldr	r3, [pc, #172]	; (8007388 <prvSwitchTimerLists+0xc0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	3304      	adds	r3, #4
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe f92f 	bl	800554c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02e      	beq.n	8007362 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4413      	add	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	429a      	cmp	r2, r3
 8007314:	d90e      	bls.n	8007334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007322:	4b19      	ldr	r3, [pc, #100]	; (8007388 <prvSwitchTimerLists+0xc0>)
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f7fe f8d4 	bl	80054da <vListInsert>
 8007332:	e016      	b.n	8007362 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007334:	2300      	movs	r3, #0
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2300      	movs	r3, #0
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	2100      	movs	r1, #0
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fd60 	bl	8006e04 <xTimerGenericCommand>
 8007344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	603b      	str	r3, [r7, #0]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <prvSwitchTimerLists+0xc0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1b1      	bne.n	80072d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800736c:	4b06      	ldr	r3, [pc, #24]	; (8007388 <prvSwitchTimerLists+0xc0>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007372:	4b06      	ldr	r3, [pc, #24]	; (800738c <prvSwitchTimerLists+0xc4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a04      	ldr	r2, [pc, #16]	; (8007388 <prvSwitchTimerLists+0xc0>)
 8007378:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800737a:	4a04      	ldr	r2, [pc, #16]	; (800738c <prvSwitchTimerLists+0xc4>)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000ed0 	.word	0x20000ed0
 800738c:	20000ed4 	.word	0x20000ed4

08007390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007396:	f000 f965 	bl	8007664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800739a:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <prvCheckForValidListAndQueue+0x60>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d120      	bne.n	80073e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073a2:	4814      	ldr	r0, [pc, #80]	; (80073f4 <prvCheckForValidListAndQueue+0x64>)
 80073a4:	f7fe f848 	bl	8005438 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073a8:	4813      	ldr	r0, [pc, #76]	; (80073f8 <prvCheckForValidListAndQueue+0x68>)
 80073aa:	f7fe f845 	bl	8005438 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073ae:	4b13      	ldr	r3, [pc, #76]	; (80073fc <prvCheckForValidListAndQueue+0x6c>)
 80073b0:	4a10      	ldr	r2, [pc, #64]	; (80073f4 <prvCheckForValidListAndQueue+0x64>)
 80073b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073b4:	4b12      	ldr	r3, [pc, #72]	; (8007400 <prvCheckForValidListAndQueue+0x70>)
 80073b6:	4a10      	ldr	r2, [pc, #64]	; (80073f8 <prvCheckForValidListAndQueue+0x68>)
 80073b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4b11      	ldr	r3, [pc, #68]	; (8007404 <prvCheckForValidListAndQueue+0x74>)
 80073c0:	4a11      	ldr	r2, [pc, #68]	; (8007408 <prvCheckForValidListAndQueue+0x78>)
 80073c2:	2110      	movs	r1, #16
 80073c4:	200a      	movs	r0, #10
 80073c6:	f7fe f953 	bl	8005670 <xQueueGenericCreateStatic>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <prvCheckForValidListAndQueue+0x60>)
 80073ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <prvCheckForValidListAndQueue+0x60>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d005      	beq.n	80073e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <prvCheckForValidListAndQueue+0x60>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	490b      	ldr	r1, [pc, #44]	; (800740c <prvCheckForValidListAndQueue+0x7c>)
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fd6c 	bl	8005ebc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073e4:	f000 f96e 	bl	80076c4 <vPortExitCritical>
}
 80073e8:	bf00      	nop
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20000ed8 	.word	0x20000ed8
 80073f4:	20000ea8 	.word	0x20000ea8
 80073f8:	20000ebc 	.word	0x20000ebc
 80073fc:	20000ed0 	.word	0x20000ed0
 8007400:	20000ed4 	.word	0x20000ed4
 8007404:	20000f84 	.word	0x20000f84
 8007408:	20000ee4 	.word	0x20000ee4
 800740c:	080097fc 	.word	0x080097fc

08007410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3b04      	subs	r3, #4
 8007420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b04      	subs	r3, #4
 800742e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f023 0201 	bic.w	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3b04      	subs	r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <pxPortInitialiseStack+0x64>)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3b14      	subs	r3, #20
 800744a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3b04      	subs	r3, #4
 8007456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f06f 0202 	mvn.w	r2, #2
 800745e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3b20      	subs	r3, #32
 8007464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007466:	68fb      	ldr	r3, [r7, #12]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr
 8007474:	08007479 	.word	0x08007479

08007478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007482:	4b12      	ldr	r3, [pc, #72]	; (80074cc <prvTaskExitError+0x54>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748a:	d00a      	beq.n	80074a2 <prvTaskExitError+0x2a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	60fb      	str	r3, [r7, #12]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <prvTaskExitError+0x28>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60bb      	str	r3, [r7, #8]
}
 80074b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074b6:	bf00      	nop
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0fc      	beq.n	80074b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074be:	bf00      	nop
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	2000000c 	.word	0x2000000c

080074d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <pxCurrentTCBConst2>)
 80074d2:	6819      	ldr	r1, [r3, #0]
 80074d4:	6808      	ldr	r0, [r1, #0]
 80074d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074da:	f380 8809 	msr	PSP, r0
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8811 	msr	BASEPRI, r0
 80074ea:	4770      	bx	lr
 80074ec:	f3af 8000 	nop.w

080074f0 <pxCurrentTCBConst2>:
 80074f0:	200009a8 	.word	0x200009a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop

080074f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074f8:	4808      	ldr	r0, [pc, #32]	; (800751c <prvPortStartFirstTask+0x24>)
 80074fa:	6800      	ldr	r0, [r0, #0]
 80074fc:	6800      	ldr	r0, [r0, #0]
 80074fe:	f380 8808 	msr	MSP, r0
 8007502:	f04f 0000 	mov.w	r0, #0
 8007506:	f380 8814 	msr	CONTROL, r0
 800750a:	b662      	cpsie	i
 800750c:	b661      	cpsie	f
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	df00      	svc	0
 8007518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800751a:	bf00      	nop
 800751c:	e000ed08 	.word	0xe000ed08

08007520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007526:	4b46      	ldr	r3, [pc, #280]	; (8007640 <xPortStartScheduler+0x120>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a46      	ldr	r2, [pc, #280]	; (8007644 <xPortStartScheduler+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d10a      	bne.n	8007546 <xPortStartScheduler+0x26>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	613b      	str	r3, [r7, #16]
}
 8007542:	bf00      	nop
 8007544:	e7fe      	b.n	8007544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007546:	4b3e      	ldr	r3, [pc, #248]	; (8007640 <xPortStartScheduler+0x120>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a3f      	ldr	r2, [pc, #252]	; (8007648 <xPortStartScheduler+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10a      	bne.n	8007566 <xPortStartScheduler+0x46>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <xPortStartScheduler+0x12c>)
 8007568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	22ff      	movs	r2, #255	; 0xff
 8007576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b31      	ldr	r3, [pc, #196]	; (8007650 <xPortStartScheduler+0x130>)
 800758c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800758e:	4b31      	ldr	r3, [pc, #196]	; (8007654 <xPortStartScheduler+0x134>)
 8007590:	2207      	movs	r2, #7
 8007592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007594:	e009      	b.n	80075aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <xPortStartScheduler+0x134>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3b01      	subs	r3, #1
 800759c:	4a2d      	ldr	r2, [pc, #180]	; (8007654 <xPortStartScheduler+0x134>)
 800759e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d0ef      	beq.n	8007596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <xPortStartScheduler+0x134>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1c3 0307 	rsb	r3, r3, #7
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d00a      	beq.n	80075d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60bb      	str	r3, [r7, #8]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075d8:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <xPortStartScheduler+0x134>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <xPortStartScheduler+0x134>)
 80075e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <xPortStartScheduler+0x134>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ea:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <xPortStartScheduler+0x134>)
 80075ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075f6:	4b18      	ldr	r3, [pc, #96]	; (8007658 <xPortStartScheduler+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <xPortStartScheduler+0x138>)
 80075fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <xPortStartScheduler+0x138>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <xPortStartScheduler+0x138>)
 8007608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800760e:	f000 f8dd 	bl	80077cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <xPortStartScheduler+0x13c>)
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007618:	f000 f8fc 	bl	8007814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <xPortStartScheduler+0x140>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a0f      	ldr	r2, [pc, #60]	; (8007660 <xPortStartScheduler+0x140>)
 8007622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007628:	f7ff ff66 	bl	80074f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800762c:	f7ff f856 	bl	80066dc <vTaskSwitchContext>
	prvTaskExitError();
 8007630:	f7ff ff22 	bl	8007478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	e000ed00 	.word	0xe000ed00
 8007644:	410fc271 	.word	0x410fc271
 8007648:	410fc270 	.word	0x410fc270
 800764c:	e000e400 	.word	0xe000e400
 8007650:	20000fd4 	.word	0x20000fd4
 8007654:	20000fd8 	.word	0x20000fd8
 8007658:	e000ed20 	.word	0xe000ed20
 800765c:	2000000c 	.word	0x2000000c
 8007660:	e000ef34 	.word	0xe000ef34

08007664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	607b      	str	r3, [r7, #4]
}
 800767c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800767e:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <vPortEnterCritical+0x58>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3301      	adds	r3, #1
 8007684:	4a0d      	ldr	r2, [pc, #52]	; (80076bc <vPortEnterCritical+0x58>)
 8007686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <vPortEnterCritical+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10f      	bne.n	80076b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <vPortEnterCritical+0x5c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	603b      	str	r3, [r7, #0]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <vPortEnterCritical+0x4a>
	}
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000000c 	.word	0x2000000c
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <vPortExitCritical+0x50>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <vPortExitCritical+0x24>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	607b      	str	r3, [r7, #4]
}
 80076e4:	bf00      	nop
 80076e6:	e7fe      	b.n	80076e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <vPortExitCritical+0x50>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	4a09      	ldr	r2, [pc, #36]	; (8007714 <vPortExitCritical+0x50>)
 80076f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <vPortExitCritical+0x50>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d105      	bne.n	8007706 <vPortExitCritical+0x42>
 80076fa:	2300      	movs	r3, #0
 80076fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	f383 8811 	msr	BASEPRI, r3
}
 8007704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	2000000c 	.word	0x2000000c
	...

08007720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007720:	f3ef 8009 	mrs	r0, PSP
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4b15      	ldr	r3, [pc, #84]	; (8007780 <pxCurrentTCBConst>)
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	f01e 0f10 	tst.w	lr, #16
 8007730:	bf08      	it	eq
 8007732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	6010      	str	r0, [r2, #0]
 800773c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007744:	f380 8811 	msr	BASEPRI, r0
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f7fe ffc4 	bl	80066dc <vTaskSwitchContext>
 8007754:	f04f 0000 	mov.w	r0, #0
 8007758:	f380 8811 	msr	BASEPRI, r0
 800775c:	bc09      	pop	{r0, r3}
 800775e:	6819      	ldr	r1, [r3, #0]
 8007760:	6808      	ldr	r0, [r1, #0]
 8007762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007766:	f01e 0f10 	tst.w	lr, #16
 800776a:	bf08      	it	eq
 800776c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007770:	f380 8809 	msr	PSP, r0
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst>:
 8007780:	200009a8 	.word	0x200009a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	607b      	str	r3, [r7, #4]
}
 80077a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80077a2:	f7fe fee1 	bl	8006568 <xTaskIncrementTick>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d003      	beq.n	80077b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <xPortSysTickHandler+0x40>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	f383 8811 	msr	BASEPRI, r3
}
 80077be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077c0:	bf00      	nop
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000ed04 	.word	0xe000ed04

080077cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077d0:	4b0b      	ldr	r3, [pc, #44]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <vPortSetupTimerInterrupt+0x38>)
 80077d8:	2200      	movs	r2, #0
 80077da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <vPortSetupTimerInterrupt+0x3c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0a      	ldr	r2, [pc, #40]	; (800780c <vPortSetupTimerInterrupt+0x40>)
 80077e2:	fba2 2303 	umull	r2, r3, r2, r3
 80077e6:	099b      	lsrs	r3, r3, #6
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <vPortSetupTimerInterrupt+0x44>)
 80077ea:	3b01      	subs	r3, #1
 80077ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <vPortSetupTimerInterrupt+0x34>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	e000e010 	.word	0xe000e010
 8007804:	e000e018 	.word	0xe000e018
 8007808:	20000000 	.word	0x20000000
 800780c:	10624dd3 	.word	0x10624dd3
 8007810:	e000e014 	.word	0xe000e014

08007814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007824 <vPortEnableVFP+0x10>
 8007818:	6801      	ldr	r1, [r0, #0]
 800781a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800781e:	6001      	str	r1, [r0, #0]
 8007820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007822:	bf00      	nop
 8007824:	e000ed88 	.word	0xe000ed88

08007828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800782e:	f3ef 8305 	mrs	r3, IPSR
 8007832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d914      	bls.n	8007864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <vPortValidateInterruptPriority+0x70>)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007844:	4b15      	ldr	r3, [pc, #84]	; (800789c <vPortValidateInterruptPriority+0x74>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	7afa      	ldrb	r2, [r7, #11]
 800784a:	429a      	cmp	r2, r3
 800784c:	d20a      	bcs.n	8007864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <vPortValidateInterruptPriority+0x78>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800786c:	4b0d      	ldr	r3, [pc, #52]	; (80078a4 <vPortValidateInterruptPriority+0x7c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d90a      	bls.n	800788a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	603b      	str	r3, [r7, #0]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <vPortValidateInterruptPriority+0x60>
	}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	e000e3f0 	.word	0xe000e3f0
 800789c:	20000fd4 	.word	0x20000fd4
 80078a0:	e000ed0c 	.word	0xe000ed0c
 80078a4:	20000fd8 	.word	0x20000fd8

080078a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078b4:	f7fe fd9c 	bl	80063f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078b8:	4b5b      	ldr	r3, [pc, #364]	; (8007a28 <pvPortMalloc+0x180>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c0:	f000 f920 	bl	8007b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078c4:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <pvPortMalloc+0x184>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8093 	bne.w	80079f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01d      	beq.n	8007914 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078d8:	2208      	movs	r2, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d014      	beq.n	8007914 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00a      	beq.n	8007914 <pvPortMalloc+0x6c>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	617b      	str	r3, [r7, #20]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d06e      	beq.n	80079f8 <pvPortMalloc+0x150>
 800791a:	4b45      	ldr	r3, [pc, #276]	; (8007a30 <pvPortMalloc+0x188>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d869      	bhi.n	80079f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007924:	4b43      	ldr	r3, [pc, #268]	; (8007a34 <pvPortMalloc+0x18c>)
 8007926:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007928:	4b42      	ldr	r3, [pc, #264]	; (8007a34 <pvPortMalloc+0x18c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800792e:	e004      	b.n	800793a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <pvPortMalloc+0xa4>
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f1      	bne.n	8007930 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <pvPortMalloc+0x180>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007952:	429a      	cmp	r2, r3
 8007954:	d050      	beq.n	80079f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2208      	movs	r2, #8
 800795c:	4413      	add	r3, r2
 800795e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	2308      	movs	r3, #8
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	429a      	cmp	r2, r3
 8007976:	d91f      	bls.n	80079b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <pvPortMalloc+0xf8>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	613b      	str	r3, [r7, #16]
}
 800799c:	bf00      	nop
 800799e:	e7fe      	b.n	800799e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079b2:	69b8      	ldr	r0, [r7, #24]
 80079b4:	f000 f908 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <pvPortMalloc+0x188>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1b      	ldr	r2, [pc, #108]	; (8007a30 <pvPortMalloc+0x188>)
 80079c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <pvPortMalloc+0x188>)
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <pvPortMalloc+0x190>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d203      	bcs.n	80079da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079d2:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <pvPortMalloc+0x188>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <pvPortMalloc+0x190>)
 80079d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <pvPortMalloc+0x184>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079ee:	4b13      	ldr	r3, [pc, #76]	; (8007a3c <pvPortMalloc+0x194>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <pvPortMalloc+0x194>)
 80079f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079f8:	f7fe fd08 	bl	800640c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f003 0307 	and.w	r3, r3, #7
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <pvPortMalloc+0x174>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60fb      	str	r3, [r7, #12]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <pvPortMalloc+0x172>
	return pvReturn;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20002754 	.word	0x20002754
 8007a2c:	20002768 	.word	0x20002768
 8007a30:	20002758 	.word	0x20002758
 8007a34:	2000274c 	.word	0x2000274c
 8007a38:	2000275c 	.word	0x2000275c
 8007a3c:	20002760 	.word	0x20002760

08007a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04d      	beq.n	8007aee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a52:	2308      	movs	r3, #8
 8007a54:	425b      	negs	r3, r3
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4413      	add	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	4b24      	ldr	r3, [pc, #144]	; (8007af8 <vPortFree+0xb8>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <vPortFree+0x44>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60fb      	str	r3, [r7, #12]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <vPortFree+0x62>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	60bb      	str	r3, [r7, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <vPortFree+0xb8>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01e      	beq.n	8007aee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d11a      	bne.n	8007aee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <vPortFree+0xb8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ac8:	f7fe fc92 	bl	80063f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <vPortFree+0xbc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4a09      	ldr	r2, [pc, #36]	; (8007afc <vPortFree+0xbc>)
 8007ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ada:	6938      	ldr	r0, [r7, #16]
 8007adc:	f000 f874 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <vPortFree+0xc0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <vPortFree+0xc0>)
 8007ae8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aea:	f7fe fc8f 	bl	800640c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aee:	bf00      	nop
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20002768 	.word	0x20002768
 8007afc:	20002758 	.word	0x20002758
 8007b00:	20002764 	.word	0x20002764

08007b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b10:	4b27      	ldr	r3, [pc, #156]	; (8007bb0 <prvHeapInit+0xac>)
 8007b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <prvHeapInit+0xac>)
 8007b34:	4413      	add	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <prvHeapInit+0xb0>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	; (8007bb4 <prvHeapInit+0xb0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b50:	2208      	movs	r2, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	; (8007bb8 <prvHeapInit+0xb4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	; (8007bbc <prvHeapInit+0xb8>)
 8007b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a09      	ldr	r2, [pc, #36]	; (8007bc0 <prvHeapInit+0xbc>)
 8007b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b9c:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <prvHeapInit+0xc0>)
 8007b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20000fdc 	.word	0x20000fdc
 8007bb4:	2000274c 	.word	0x2000274c
 8007bb8:	20002754 	.word	0x20002754
 8007bbc:	2000275c 	.word	0x2000275c
 8007bc0:	20002758 	.word	0x20002758
 8007bc4:	20002768 	.word	0x20002768

08007bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd0:	4b28      	ldr	r3, [pc, #160]	; (8007c74 <prvInsertBlockIntoFreeList+0xac>)
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e002      	b.n	8007bdc <prvInsertBlockIntoFreeList+0x14>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d8f7      	bhi.n	8007bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d108      	bne.n	8007c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d118      	bne.n	8007c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d00d      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e008      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c46:	4b0c      	ldr	r3, [pc, #48]	; (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d002      	beq.n	8007c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	2000274c 	.word	0x2000274c
 8007c78:	20002754 	.word	0x20002754

08007c7c <atoi>:
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f000 b9c4 	b.w	800800c <strtol>

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	; (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000010 	.word	0x20000010

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	; (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	; (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	; (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	; (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f001 fd30 	bl	8009708 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08009af0 	.word	0x08009af0
 8007ccc:	08009af0 	.word	0x08009af0
 8007cd0:	08009af0 	.word	0x08009af0
 8007cd4:	08009af4 	.word	0x08009af4

08007cd8 <memcpy>:
 8007cd8:	440a      	add	r2, r1
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce0:	d100      	bne.n	8007ce4 <memcpy+0xc>
 8007ce2:	4770      	bx	lr
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	d1f9      	bne.n	8007ce6 <memcpy+0xe>
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <memset>:
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <memset+0xa>
 8007cfc:	4770      	bx	lr
 8007cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007d02:	e7f9      	b.n	8007cf8 <memset+0x4>

08007d04 <iprintf>:
 8007d04:	b40f      	push	{r0, r1, r2, r3}
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <iprintf+0x2c>)
 8007d08:	b513      	push	{r0, r1, r4, lr}
 8007d0a:	681c      	ldr	r4, [r3, #0]
 8007d0c:	b124      	cbz	r4, 8007d18 <iprintf+0x14>
 8007d0e:	69a3      	ldr	r3, [r4, #24]
 8007d10:	b913      	cbnz	r3, 8007d18 <iprintf+0x14>
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 fb80 	bl	8008418 <__sinit>
 8007d18:	ab05      	add	r3, sp, #20
 8007d1a:	9a04      	ldr	r2, [sp, #16]
 8007d1c:	68a1      	ldr	r1, [r4, #8]
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 ff6d 	bl	8008c00 <_vfiprintf_r>
 8007d26:	b002      	add	sp, #8
 8007d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2c:	b004      	add	sp, #16
 8007d2e:	4770      	bx	lr
 8007d30:	20000010 	.word	0x20000010

08007d34 <_puts_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b118      	cbz	r0, 8007d44 <_puts_r+0x10>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_puts_r+0x10>
 8007d40:	f000 fb6a 	bl	8008418 <__sinit>
 8007d44:	69ab      	ldr	r3, [r5, #24]
 8007d46:	68ac      	ldr	r4, [r5, #8]
 8007d48:	b913      	cbnz	r3, 8007d50 <_puts_r+0x1c>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 fb64 	bl	8008418 <__sinit>
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <_puts_r+0xd0>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d120      	bne.n	8007d98 <_puts_r+0x64>
 8007d56:	686c      	ldr	r4, [r5, #4]
 8007d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_puts_r+0x36>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	0598      	lsls	r0, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_puts_r+0x36>
 8007d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d66:	f000 fbf5 	bl	8008554 <__retarget_lock_acquire_recursive>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	0719      	lsls	r1, r3, #28
 8007d6e:	d51d      	bpl.n	8007dac <_puts_r+0x78>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	b1db      	cbz	r3, 8007dac <_puts_r+0x78>
 8007d74:	3e01      	subs	r6, #1
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	bb39      	cbnz	r1, 8007dd2 <_puts_r+0x9e>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da38      	bge.n	8007df8 <_puts_r+0xc4>
 8007d86:	4622      	mov	r2, r4
 8007d88:	210a      	movs	r1, #10
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f948 	bl	8008020 <__swbuf_r>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d011      	beq.n	8007db8 <_puts_r+0x84>
 8007d94:	250a      	movs	r5, #10
 8007d96:	e011      	b.n	8007dbc <_puts_r+0x88>
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <_puts_r+0xd4>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <_puts_r+0x6e>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7da      	b.n	8007d58 <_puts_r+0x24>
 8007da2:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <_puts_r+0xd8>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7d5      	b.n	8007d58 <_puts_r+0x24>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 f99a 	bl	80080e8 <__swsetup_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0dd      	beq.n	8007d74 <_puts_r+0x40>
 8007db8:	f04f 35ff 	mov.w	r5, #4294967295
 8007dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dbe:	07da      	lsls	r2, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <_puts_r+0x9a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_puts_r+0x9a>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 fbc4 	bl	8008556 <__retarget_lock_release_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da04      	bge.n	8007de0 <_puts_r+0xac>
 8007dd6:	69a2      	ldr	r2, [r4, #24]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	dc06      	bgt.n	8007dea <_puts_r+0xb6>
 8007ddc:	290a      	cmp	r1, #10
 8007dde:	d004      	beq.n	8007dea <_puts_r+0xb6>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	7019      	strb	r1, [r3, #0]
 8007de8:	e7c5      	b.n	8007d76 <_puts_r+0x42>
 8007dea:	4622      	mov	r2, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f917 	bl	8008020 <__swbuf_r>
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1bf      	bne.n	8007d76 <_puts_r+0x42>
 8007df6:	e7df      	b.n	8007db8 <_puts_r+0x84>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	250a      	movs	r5, #10
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	701d      	strb	r5, [r3, #0]
 8007e02:	e7db      	b.n	8007dbc <_puts_r+0x88>
 8007e04:	08009a58 	.word	0x08009a58
 8007e08:	08009a78 	.word	0x08009a78
 8007e0c:	08009a38 	.word	0x08009a38

08007e10 <puts>:
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <puts+0xc>)
 8007e12:	4601      	mov	r1, r0
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	f7ff bf8d 	b.w	8007d34 <_puts_r>
 8007e1a:	bf00      	nop
 8007e1c:	20000010 	.word	0x20000010

08007e20 <siscanf>:
 8007e20:	b40e      	push	{r1, r2, r3}
 8007e22:	b510      	push	{r4, lr}
 8007e24:	b09f      	sub	sp, #124	; 0x7c
 8007e26:	ac21      	add	r4, sp, #132	; 0x84
 8007e28:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007e2c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007e30:	9201      	str	r2, [sp, #4]
 8007e32:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007e36:	9004      	str	r0, [sp, #16]
 8007e38:	9008      	str	r0, [sp, #32]
 8007e3a:	f7f8 f9d3 	bl	80001e4 <strlen>
 8007e3e:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <siscanf+0x50>)
 8007e40:	9005      	str	r0, [sp, #20]
 8007e42:	9009      	str	r0, [sp, #36]	; 0x24
 8007e44:	930d      	str	r3, [sp, #52]	; 0x34
 8007e46:	480b      	ldr	r0, [pc, #44]	; (8007e74 <siscanf+0x54>)
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9403      	str	r4, [sp, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9311      	str	r3, [sp, #68]	; 0x44
 8007e52:	9316      	str	r3, [sp, #88]	; 0x58
 8007e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e58:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007e5c:	a904      	add	r1, sp, #16
 8007e5e:	4623      	mov	r3, r4
 8007e60:	f000 fd2c 	bl	80088bc <__ssvfiscanf_r>
 8007e64:	b01f      	add	sp, #124	; 0x7c
 8007e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6a:	b003      	add	sp, #12
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	08007e9b 	.word	0x08007e9b
 8007e74:	20000010 	.word	0x20000010

08007e78 <__sread>:
 8007e78:	b510      	push	{r4, lr}
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	f001 fad4 	bl	800942c <_read_r>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	bfab      	itete	ge
 8007e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e8c:	181b      	addge	r3, r3, r0
 8007e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e92:	bfac      	ite	ge
 8007e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e96:	81a3      	strhlt	r3, [r4, #12]
 8007e98:	bd10      	pop	{r4, pc}

08007e9a <__seofread>:
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	4770      	bx	lr

08007e9e <__swrite>:
 8007e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea2:	461f      	mov	r7, r3
 8007ea4:	898b      	ldrh	r3, [r1, #12]
 8007ea6:	05db      	lsls	r3, r3, #23
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	460c      	mov	r4, r1
 8007eac:	4616      	mov	r6, r2
 8007eae:	d505      	bpl.n	8007ebc <__swrite+0x1e>
 8007eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f000 fb4e 	bl	8008558 <_lseek_r>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	4632      	mov	r2, r6
 8007eca:	463b      	mov	r3, r7
 8007ecc:	4628      	mov	r0, r5
 8007ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed2:	f000 b8f7 	b.w	80080c4 <_write_r>

08007ed6 <__sseek>:
 8007ed6:	b510      	push	{r4, lr}
 8007ed8:	460c      	mov	r4, r1
 8007eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ede:	f000 fb3b 	bl	8008558 <_lseek_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	bf15      	itete	ne
 8007ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ef2:	81a3      	strheq	r3, [r4, #12]
 8007ef4:	bf18      	it	ne
 8007ef6:	81a3      	strhne	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__sclose>:
 8007efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efe:	f000 b961 	b.w	80081c4 <_close_r>
	...

08007f04 <_strtol_l.constprop.0>:
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0a:	d001      	beq.n	8007f10 <_strtol_l.constprop.0+0xc>
 8007f0c:	2b24      	cmp	r3, #36	; 0x24
 8007f0e:	d906      	bls.n	8007f1e <_strtol_l.constprop.0+0x1a>
 8007f10:	f7ff feb8 	bl	8007c84 <__errno>
 8007f14:	2316      	movs	r3, #22
 8007f16:	6003      	str	r3, [r0, #0]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008004 <_strtol_l.constprop.0+0x100>
 8007f22:	460d      	mov	r5, r1
 8007f24:	462e      	mov	r6, r5
 8007f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f2a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007f2e:	f017 0708 	ands.w	r7, r7, #8
 8007f32:	d1f7      	bne.n	8007f24 <_strtol_l.constprop.0+0x20>
 8007f34:	2c2d      	cmp	r4, #45	; 0x2d
 8007f36:	d132      	bne.n	8007f9e <_strtol_l.constprop.0+0x9a>
 8007f38:	782c      	ldrb	r4, [r5, #0]
 8007f3a:	2701      	movs	r7, #1
 8007f3c:	1cb5      	adds	r5, r6, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d05b      	beq.n	8007ffa <_strtol_l.constprop.0+0xf6>
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d109      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007f46:	2c30      	cmp	r4, #48	; 0x30
 8007f48:	d107      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007f4a:	782c      	ldrb	r4, [r5, #0]
 8007f4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f50:	2c58      	cmp	r4, #88	; 0x58
 8007f52:	d14d      	bne.n	8007ff0 <_strtol_l.constprop.0+0xec>
 8007f54:	786c      	ldrb	r4, [r5, #1]
 8007f56:	2310      	movs	r3, #16
 8007f58:	3502      	adds	r5, #2
 8007f5a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f62:	f04f 0c00 	mov.w	ip, #0
 8007f66:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f6a:	4666      	mov	r6, ip
 8007f6c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f70:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007f74:	f1be 0f09 	cmp.w	lr, #9
 8007f78:	d816      	bhi.n	8007fa8 <_strtol_l.constprop.0+0xa4>
 8007f7a:	4674      	mov	r4, lr
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	dd24      	ble.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007f80:	f1bc 0f00 	cmp.w	ip, #0
 8007f84:	db1e      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f86:	45b1      	cmp	r9, r6
 8007f88:	d31c      	bcc.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f8a:	d101      	bne.n	8007f90 <_strtol_l.constprop.0+0x8c>
 8007f8c:	45a2      	cmp	sl, r4
 8007f8e:	db19      	blt.n	8007fc4 <_strtol_l.constprop.0+0xc0>
 8007f90:	fb06 4603 	mla	r6, r6, r3, r4
 8007f94:	f04f 0c01 	mov.w	ip, #1
 8007f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f9c:	e7e8      	b.n	8007f70 <_strtol_l.constprop.0+0x6c>
 8007f9e:	2c2b      	cmp	r4, #43	; 0x2b
 8007fa0:	bf04      	itt	eq
 8007fa2:	782c      	ldrbeq	r4, [r5, #0]
 8007fa4:	1cb5      	addeq	r5, r6, #2
 8007fa6:	e7ca      	b.n	8007f3e <_strtol_l.constprop.0+0x3a>
 8007fa8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007fac:	f1be 0f19 	cmp.w	lr, #25
 8007fb0:	d801      	bhi.n	8007fb6 <_strtol_l.constprop.0+0xb2>
 8007fb2:	3c37      	subs	r4, #55	; 0x37
 8007fb4:	e7e2      	b.n	8007f7c <_strtol_l.constprop.0+0x78>
 8007fb6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007fba:	f1be 0f19 	cmp.w	lr, #25
 8007fbe:	d804      	bhi.n	8007fca <_strtol_l.constprop.0+0xc6>
 8007fc0:	3c57      	subs	r4, #87	; 0x57
 8007fc2:	e7db      	b.n	8007f7c <_strtol_l.constprop.0+0x78>
 8007fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8007fc8:	e7e6      	b.n	8007f98 <_strtol_l.constprop.0+0x94>
 8007fca:	f1bc 0f00 	cmp.w	ip, #0
 8007fce:	da05      	bge.n	8007fdc <_strtol_l.constprop.0+0xd8>
 8007fd0:	2322      	movs	r3, #34	; 0x22
 8007fd2:	6003      	str	r3, [r0, #0]
 8007fd4:	4646      	mov	r6, r8
 8007fd6:	b942      	cbnz	r2, 8007fea <_strtol_l.constprop.0+0xe6>
 8007fd8:	4630      	mov	r0, r6
 8007fda:	e79e      	b.n	8007f1a <_strtol_l.constprop.0+0x16>
 8007fdc:	b107      	cbz	r7, 8007fe0 <_strtol_l.constprop.0+0xdc>
 8007fde:	4276      	negs	r6, r6
 8007fe0:	2a00      	cmp	r2, #0
 8007fe2:	d0f9      	beq.n	8007fd8 <_strtol_l.constprop.0+0xd4>
 8007fe4:	f1bc 0f00 	cmp.w	ip, #0
 8007fe8:	d000      	beq.n	8007fec <_strtol_l.constprop.0+0xe8>
 8007fea:	1e69      	subs	r1, r5, #1
 8007fec:	6011      	str	r1, [r2, #0]
 8007fee:	e7f3      	b.n	8007fd8 <_strtol_l.constprop.0+0xd4>
 8007ff0:	2430      	movs	r4, #48	; 0x30
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1b1      	bne.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	e7af      	b.n	8007f5a <_strtol_l.constprop.0+0x56>
 8007ffa:	2c30      	cmp	r4, #48	; 0x30
 8007ffc:	d0a5      	beq.n	8007f4a <_strtol_l.constprop.0+0x46>
 8007ffe:	230a      	movs	r3, #10
 8008000:	e7ab      	b.n	8007f5a <_strtol_l.constprop.0+0x56>
 8008002:	bf00      	nop
 8008004:	08009935 	.word	0x08009935

08008008 <_strtol_r>:
 8008008:	f7ff bf7c 	b.w	8007f04 <_strtol_l.constprop.0>

0800800c <strtol>:
 800800c:	4613      	mov	r3, r2
 800800e:	460a      	mov	r2, r1
 8008010:	4601      	mov	r1, r0
 8008012:	4802      	ldr	r0, [pc, #8]	; (800801c <strtol+0x10>)
 8008014:	6800      	ldr	r0, [r0, #0]
 8008016:	f7ff bf75 	b.w	8007f04 <_strtol_l.constprop.0>
 800801a:	bf00      	nop
 800801c:	20000010 	.word	0x20000010

08008020 <__swbuf_r>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	460e      	mov	r6, r1
 8008024:	4614      	mov	r4, r2
 8008026:	4605      	mov	r5, r0
 8008028:	b118      	cbz	r0, 8008032 <__swbuf_r+0x12>
 800802a:	6983      	ldr	r3, [r0, #24]
 800802c:	b90b      	cbnz	r3, 8008032 <__swbuf_r+0x12>
 800802e:	f000 f9f3 	bl	8008418 <__sinit>
 8008032:	4b21      	ldr	r3, [pc, #132]	; (80080b8 <__swbuf_r+0x98>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d12b      	bne.n	8008090 <__swbuf_r+0x70>
 8008038:	686c      	ldr	r4, [r5, #4]
 800803a:	69a3      	ldr	r3, [r4, #24]
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	071a      	lsls	r2, r3, #28
 8008042:	d52f      	bpl.n	80080a4 <__swbuf_r+0x84>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b36b      	cbz	r3, 80080a4 <__swbuf_r+0x84>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	1ac0      	subs	r0, r0, r3
 800804e:	6963      	ldr	r3, [r4, #20]
 8008050:	b2f6      	uxtb	r6, r6
 8008052:	4283      	cmp	r3, r0
 8008054:	4637      	mov	r7, r6
 8008056:	dc04      	bgt.n	8008062 <__swbuf_r+0x42>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f948 	bl	80082f0 <_fflush_r>
 8008060:	bb30      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	3b01      	subs	r3, #1
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	701e      	strb	r6, [r3, #0]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	3001      	adds	r0, #1
 8008074:	4283      	cmp	r3, r0
 8008076:	d004      	beq.n	8008082 <__swbuf_r+0x62>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	07db      	lsls	r3, r3, #31
 800807c:	d506      	bpl.n	800808c <__swbuf_r+0x6c>
 800807e:	2e0a      	cmp	r6, #10
 8008080:	d104      	bne.n	800808c <__swbuf_r+0x6c>
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	f000 f933 	bl	80082f0 <_fflush_r>
 800808a:	b988      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 800808c:	4638      	mov	r0, r7
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <__swbuf_r+0x9c>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <__swbuf_r+0x7a>
 8008096:	68ac      	ldr	r4, [r5, #8]
 8008098:	e7cf      	b.n	800803a <__swbuf_r+0x1a>
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__swbuf_r+0xa0>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68ec      	ldreq	r4, [r5, #12]
 80080a2:	e7ca      	b.n	800803a <__swbuf_r+0x1a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 f81e 	bl	80080e8 <__swsetup_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0cb      	beq.n	8008048 <__swbuf_r+0x28>
 80080b0:	f04f 37ff 	mov.w	r7, #4294967295
 80080b4:	e7ea      	b.n	800808c <__swbuf_r+0x6c>
 80080b6:	bf00      	nop
 80080b8:	08009a58 	.word	0x08009a58
 80080bc:	08009a78 	.word	0x08009a78
 80080c0:	08009a38 	.word	0x08009a38

080080c4 <_write_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d07      	ldr	r5, [pc, #28]	; (80080e4 <_write_r+0x20>)
 80080c8:	4604      	mov	r4, r0
 80080ca:	4608      	mov	r0, r1
 80080cc:	4611      	mov	r1, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	602a      	str	r2, [r5, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f7f8 fa66 	bl	80005a4 <_write>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_write_r+0x1e>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_write_r+0x1e>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20002778 	.word	0x20002778

080080e8 <__swsetup_r>:
 80080e8:	4b32      	ldr	r3, [pc, #200]	; (80081b4 <__swsetup_r+0xcc>)
 80080ea:	b570      	push	{r4, r5, r6, lr}
 80080ec:	681d      	ldr	r5, [r3, #0]
 80080ee:	4606      	mov	r6, r0
 80080f0:	460c      	mov	r4, r1
 80080f2:	b125      	cbz	r5, 80080fe <__swsetup_r+0x16>
 80080f4:	69ab      	ldr	r3, [r5, #24]
 80080f6:	b913      	cbnz	r3, 80080fe <__swsetup_r+0x16>
 80080f8:	4628      	mov	r0, r5
 80080fa:	f000 f98d 	bl	8008418 <__sinit>
 80080fe:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <__swsetup_r+0xd0>)
 8008100:	429c      	cmp	r4, r3
 8008102:	d10f      	bne.n	8008124 <__swsetup_r+0x3c>
 8008104:	686c      	ldr	r4, [r5, #4]
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800810c:	0719      	lsls	r1, r3, #28
 800810e:	d42c      	bmi.n	800816a <__swsetup_r+0x82>
 8008110:	06dd      	lsls	r5, r3, #27
 8008112:	d411      	bmi.n	8008138 <__swsetup_r+0x50>
 8008114:	2309      	movs	r3, #9
 8008116:	6033      	str	r3, [r6, #0]
 8008118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295
 8008122:	e03e      	b.n	80081a2 <__swsetup_r+0xba>
 8008124:	4b25      	ldr	r3, [pc, #148]	; (80081bc <__swsetup_r+0xd4>)
 8008126:	429c      	cmp	r4, r3
 8008128:	d101      	bne.n	800812e <__swsetup_r+0x46>
 800812a:	68ac      	ldr	r4, [r5, #8]
 800812c:	e7eb      	b.n	8008106 <__swsetup_r+0x1e>
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <__swsetup_r+0xd8>)
 8008130:	429c      	cmp	r4, r3
 8008132:	bf08      	it	eq
 8008134:	68ec      	ldreq	r4, [r5, #12]
 8008136:	e7e6      	b.n	8008106 <__swsetup_r+0x1e>
 8008138:	0758      	lsls	r0, r3, #29
 800813a:	d512      	bpl.n	8008162 <__swsetup_r+0x7a>
 800813c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800813e:	b141      	cbz	r1, 8008152 <__swsetup_r+0x6a>
 8008140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008144:	4299      	cmp	r1, r3
 8008146:	d002      	beq.n	800814e <__swsetup_r+0x66>
 8008148:	4630      	mov	r0, r6
 800814a:	f000 fa7d 	bl	8008648 <_free_r>
 800814e:	2300      	movs	r3, #0
 8008150:	6363      	str	r3, [r4, #52]	; 0x34
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008158:	81a3      	strh	r3, [r4, #12]
 800815a:	2300      	movs	r3, #0
 800815c:	6063      	str	r3, [r4, #4]
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f043 0308 	orr.w	r3, r3, #8
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	6923      	ldr	r3, [r4, #16]
 800816c:	b94b      	cbnz	r3, 8008182 <__swsetup_r+0x9a>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008178:	d003      	beq.n	8008182 <__swsetup_r+0x9a>
 800817a:	4621      	mov	r1, r4
 800817c:	4630      	mov	r0, r6
 800817e:	f000 fa23 	bl	80085c8 <__smakebuf_r>
 8008182:	89a0      	ldrh	r0, [r4, #12]
 8008184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008188:	f010 0301 	ands.w	r3, r0, #1
 800818c:	d00a      	beq.n	80081a4 <__swsetup_r+0xbc>
 800818e:	2300      	movs	r3, #0
 8008190:	60a3      	str	r3, [r4, #8]
 8008192:	6963      	ldr	r3, [r4, #20]
 8008194:	425b      	negs	r3, r3
 8008196:	61a3      	str	r3, [r4, #24]
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	b943      	cbnz	r3, 80081ae <__swsetup_r+0xc6>
 800819c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081a0:	d1ba      	bne.n	8008118 <__swsetup_r+0x30>
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	0781      	lsls	r1, r0, #30
 80081a6:	bf58      	it	pl
 80081a8:	6963      	ldrpl	r3, [r4, #20]
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	e7f4      	b.n	8008198 <__swsetup_r+0xb0>
 80081ae:	2000      	movs	r0, #0
 80081b0:	e7f7      	b.n	80081a2 <__swsetup_r+0xba>
 80081b2:	bf00      	nop
 80081b4:	20000010 	.word	0x20000010
 80081b8:	08009a58 	.word	0x08009a58
 80081bc:	08009a78 	.word	0x08009a78
 80081c0:	08009a38 	.word	0x08009a38

080081c4 <_close_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4d06      	ldr	r5, [pc, #24]	; (80081e0 <_close_r+0x1c>)
 80081c8:	2300      	movs	r3, #0
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f8 ff1b 	bl	800100a <_close>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_close_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_close_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20002778 	.word	0x20002778

080081e4 <__sflush_r>:
 80081e4:	898a      	ldrh	r2, [r1, #12]
 80081e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081ea:	4605      	mov	r5, r0
 80081ec:	0710      	lsls	r0, r2, #28
 80081ee:	460c      	mov	r4, r1
 80081f0:	d458      	bmi.n	80082a4 <__sflush_r+0xc0>
 80081f2:	684b      	ldr	r3, [r1, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dc05      	bgt.n	8008204 <__sflush_r+0x20>
 80081f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dc02      	bgt.n	8008204 <__sflush_r+0x20>
 80081fe:	2000      	movs	r0, #0
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008206:	2e00      	cmp	r6, #0
 8008208:	d0f9      	beq.n	80081fe <__sflush_r+0x1a>
 800820a:	2300      	movs	r3, #0
 800820c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008210:	682f      	ldr	r7, [r5, #0]
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	d032      	beq.n	800827c <__sflush_r+0x98>
 8008216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	075a      	lsls	r2, r3, #29
 800821c:	d505      	bpl.n	800822a <__sflush_r+0x46>
 800821e:	6863      	ldr	r3, [r4, #4]
 8008220:	1ac0      	subs	r0, r0, r3
 8008222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008224:	b10b      	cbz	r3, 800822a <__sflush_r+0x46>
 8008226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008228:	1ac0      	subs	r0, r0, r3
 800822a:	2300      	movs	r3, #0
 800822c:	4602      	mov	r2, r0
 800822e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008230:	6a21      	ldr	r1, [r4, #32]
 8008232:	4628      	mov	r0, r5
 8008234:	47b0      	blx	r6
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	d106      	bne.n	800824a <__sflush_r+0x66>
 800823c:	6829      	ldr	r1, [r5, #0]
 800823e:	291d      	cmp	r1, #29
 8008240:	d82c      	bhi.n	800829c <__sflush_r+0xb8>
 8008242:	4a2a      	ldr	r2, [pc, #168]	; (80082ec <__sflush_r+0x108>)
 8008244:	40ca      	lsrs	r2, r1
 8008246:	07d6      	lsls	r6, r2, #31
 8008248:	d528      	bpl.n	800829c <__sflush_r+0xb8>
 800824a:	2200      	movs	r2, #0
 800824c:	6062      	str	r2, [r4, #4]
 800824e:	04d9      	lsls	r1, r3, #19
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	d504      	bpl.n	8008260 <__sflush_r+0x7c>
 8008256:	1c42      	adds	r2, r0, #1
 8008258:	d101      	bne.n	800825e <__sflush_r+0x7a>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	b903      	cbnz	r3, 8008260 <__sflush_r+0x7c>
 800825e:	6560      	str	r0, [r4, #84]	; 0x54
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	602f      	str	r7, [r5, #0]
 8008264:	2900      	cmp	r1, #0
 8008266:	d0ca      	beq.n	80081fe <__sflush_r+0x1a>
 8008268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800826c:	4299      	cmp	r1, r3
 800826e:	d002      	beq.n	8008276 <__sflush_r+0x92>
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f9e9 	bl	8008648 <_free_r>
 8008276:	2000      	movs	r0, #0
 8008278:	6360      	str	r0, [r4, #52]	; 0x34
 800827a:	e7c1      	b.n	8008200 <__sflush_r+0x1c>
 800827c:	6a21      	ldr	r1, [r4, #32]
 800827e:	2301      	movs	r3, #1
 8008280:	4628      	mov	r0, r5
 8008282:	47b0      	blx	r6
 8008284:	1c41      	adds	r1, r0, #1
 8008286:	d1c7      	bne.n	8008218 <__sflush_r+0x34>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0c4      	beq.n	8008218 <__sflush_r+0x34>
 800828e:	2b1d      	cmp	r3, #29
 8008290:	d001      	beq.n	8008296 <__sflush_r+0xb2>
 8008292:	2b16      	cmp	r3, #22
 8008294:	d101      	bne.n	800829a <__sflush_r+0xb6>
 8008296:	602f      	str	r7, [r5, #0]
 8008298:	e7b1      	b.n	80081fe <__sflush_r+0x1a>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	e7ad      	b.n	8008200 <__sflush_r+0x1c>
 80082a4:	690f      	ldr	r7, [r1, #16]
 80082a6:	2f00      	cmp	r7, #0
 80082a8:	d0a9      	beq.n	80081fe <__sflush_r+0x1a>
 80082aa:	0793      	lsls	r3, r2, #30
 80082ac:	680e      	ldr	r6, [r1, #0]
 80082ae:	bf08      	it	eq
 80082b0:	694b      	ldreq	r3, [r1, #20]
 80082b2:	600f      	str	r7, [r1, #0]
 80082b4:	bf18      	it	ne
 80082b6:	2300      	movne	r3, #0
 80082b8:	eba6 0807 	sub.w	r8, r6, r7
 80082bc:	608b      	str	r3, [r1, #8]
 80082be:	f1b8 0f00 	cmp.w	r8, #0
 80082c2:	dd9c      	ble.n	80081fe <__sflush_r+0x1a>
 80082c4:	6a21      	ldr	r1, [r4, #32]
 80082c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082c8:	4643      	mov	r3, r8
 80082ca:	463a      	mov	r2, r7
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b0      	blx	r6
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dc06      	bgt.n	80082e2 <__sflush_r+0xfe>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e78e      	b.n	8008200 <__sflush_r+0x1c>
 80082e2:	4407      	add	r7, r0
 80082e4:	eba8 0800 	sub.w	r8, r8, r0
 80082e8:	e7e9      	b.n	80082be <__sflush_r+0xda>
 80082ea:	bf00      	nop
 80082ec:	20400001 	.word	0x20400001

080082f0 <_fflush_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	4605      	mov	r5, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	b913      	cbnz	r3, 8008300 <_fflush_r+0x10>
 80082fa:	2500      	movs	r5, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	b118      	cbz	r0, 800830a <_fflush_r+0x1a>
 8008302:	6983      	ldr	r3, [r0, #24]
 8008304:	b90b      	cbnz	r3, 800830a <_fflush_r+0x1a>
 8008306:	f000 f887 	bl	8008418 <__sinit>
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <_fflush_r+0x6c>)
 800830c:	429c      	cmp	r4, r3
 800830e:	d11b      	bne.n	8008348 <_fflush_r+0x58>
 8008310:	686c      	ldr	r4, [r5, #4]
 8008312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0ef      	beq.n	80082fa <_fflush_r+0xa>
 800831a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800831c:	07d0      	lsls	r0, r2, #31
 800831e:	d404      	bmi.n	800832a <_fflush_r+0x3a>
 8008320:	0599      	lsls	r1, r3, #22
 8008322:	d402      	bmi.n	800832a <_fflush_r+0x3a>
 8008324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008326:	f000 f915 	bl	8008554 <__retarget_lock_acquire_recursive>
 800832a:	4628      	mov	r0, r5
 800832c:	4621      	mov	r1, r4
 800832e:	f7ff ff59 	bl	80081e4 <__sflush_r>
 8008332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008334:	07da      	lsls	r2, r3, #31
 8008336:	4605      	mov	r5, r0
 8008338:	d4e0      	bmi.n	80082fc <_fflush_r+0xc>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	059b      	lsls	r3, r3, #22
 800833e:	d4dd      	bmi.n	80082fc <_fflush_r+0xc>
 8008340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008342:	f000 f908 	bl	8008556 <__retarget_lock_release_recursive>
 8008346:	e7d9      	b.n	80082fc <_fflush_r+0xc>
 8008348:	4b05      	ldr	r3, [pc, #20]	; (8008360 <_fflush_r+0x70>)
 800834a:	429c      	cmp	r4, r3
 800834c:	d101      	bne.n	8008352 <_fflush_r+0x62>
 800834e:	68ac      	ldr	r4, [r5, #8]
 8008350:	e7df      	b.n	8008312 <_fflush_r+0x22>
 8008352:	4b04      	ldr	r3, [pc, #16]	; (8008364 <_fflush_r+0x74>)
 8008354:	429c      	cmp	r4, r3
 8008356:	bf08      	it	eq
 8008358:	68ec      	ldreq	r4, [r5, #12]
 800835a:	e7da      	b.n	8008312 <_fflush_r+0x22>
 800835c:	08009a58 	.word	0x08009a58
 8008360:	08009a78 	.word	0x08009a78
 8008364:	08009a38 	.word	0x08009a38

08008368 <std>:
 8008368:	2300      	movs	r3, #0
 800836a:	b510      	push	{r4, lr}
 800836c:	4604      	mov	r4, r0
 800836e:	e9c0 3300 	strd	r3, r3, [r0]
 8008372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008376:	6083      	str	r3, [r0, #8]
 8008378:	8181      	strh	r1, [r0, #12]
 800837a:	6643      	str	r3, [r0, #100]	; 0x64
 800837c:	81c2      	strh	r2, [r0, #14]
 800837e:	6183      	str	r3, [r0, #24]
 8008380:	4619      	mov	r1, r3
 8008382:	2208      	movs	r2, #8
 8008384:	305c      	adds	r0, #92	; 0x5c
 8008386:	f7ff fcb5 	bl	8007cf4 <memset>
 800838a:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <std+0x38>)
 800838c:	6263      	str	r3, [r4, #36]	; 0x24
 800838e:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <std+0x3c>)
 8008390:	62a3      	str	r3, [r4, #40]	; 0x28
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <std+0x40>)
 8008394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008396:	4b05      	ldr	r3, [pc, #20]	; (80083ac <std+0x44>)
 8008398:	6224      	str	r4, [r4, #32]
 800839a:	6323      	str	r3, [r4, #48]	; 0x30
 800839c:	bd10      	pop	{r4, pc}
 800839e:	bf00      	nop
 80083a0:	08007e79 	.word	0x08007e79
 80083a4:	08007e9f 	.word	0x08007e9f
 80083a8:	08007ed7 	.word	0x08007ed7
 80083ac:	08007efb 	.word	0x08007efb

080083b0 <_cleanup_r>:
 80083b0:	4901      	ldr	r1, [pc, #4]	; (80083b8 <_cleanup_r+0x8>)
 80083b2:	f000 b8af 	b.w	8008514 <_fwalk_reent>
 80083b6:	bf00      	nop
 80083b8:	080082f1 	.word	0x080082f1

080083bc <__sfmoreglue>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	2268      	movs	r2, #104	; 0x68
 80083c0:	1e4d      	subs	r5, r1, #1
 80083c2:	4355      	muls	r5, r2
 80083c4:	460e      	mov	r6, r1
 80083c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083ca:	f000 f9a9 	bl	8008720 <_malloc_r>
 80083ce:	4604      	mov	r4, r0
 80083d0:	b140      	cbz	r0, 80083e4 <__sfmoreglue+0x28>
 80083d2:	2100      	movs	r1, #0
 80083d4:	e9c0 1600 	strd	r1, r6, [r0]
 80083d8:	300c      	adds	r0, #12
 80083da:	60a0      	str	r0, [r4, #8]
 80083dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083e0:	f7ff fc88 	bl	8007cf4 <memset>
 80083e4:	4620      	mov	r0, r4
 80083e6:	bd70      	pop	{r4, r5, r6, pc}

080083e8 <__sfp_lock_acquire>:
 80083e8:	4801      	ldr	r0, [pc, #4]	; (80083f0 <__sfp_lock_acquire+0x8>)
 80083ea:	f000 b8b3 	b.w	8008554 <__retarget_lock_acquire_recursive>
 80083ee:	bf00      	nop
 80083f0:	2000276d 	.word	0x2000276d

080083f4 <__sfp_lock_release>:
 80083f4:	4801      	ldr	r0, [pc, #4]	; (80083fc <__sfp_lock_release+0x8>)
 80083f6:	f000 b8ae 	b.w	8008556 <__retarget_lock_release_recursive>
 80083fa:	bf00      	nop
 80083fc:	2000276d 	.word	0x2000276d

08008400 <__sinit_lock_acquire>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__sinit_lock_acquire+0x8>)
 8008402:	f000 b8a7 	b.w	8008554 <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	2000276e 	.word	0x2000276e

0800840c <__sinit_lock_release>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__sinit_lock_release+0x8>)
 800840e:	f000 b8a2 	b.w	8008556 <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	2000276e 	.word	0x2000276e

08008418 <__sinit>:
 8008418:	b510      	push	{r4, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	f7ff fff0 	bl	8008400 <__sinit_lock_acquire>
 8008420:	69a3      	ldr	r3, [r4, #24]
 8008422:	b11b      	cbz	r3, 800842c <__sinit+0x14>
 8008424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008428:	f7ff bff0 	b.w	800840c <__sinit_lock_release>
 800842c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008430:	6523      	str	r3, [r4, #80]	; 0x50
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <__sinit+0x68>)
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <__sinit+0x6c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	62a2      	str	r2, [r4, #40]	; 0x28
 800843a:	42a3      	cmp	r3, r4
 800843c:	bf04      	itt	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	61a3      	streq	r3, [r4, #24]
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f820 	bl	8008488 <__sfp>
 8008448:	6060      	str	r0, [r4, #4]
 800844a:	4620      	mov	r0, r4
 800844c:	f000 f81c 	bl	8008488 <__sfp>
 8008450:	60a0      	str	r0, [r4, #8]
 8008452:	4620      	mov	r0, r4
 8008454:	f000 f818 	bl	8008488 <__sfp>
 8008458:	2200      	movs	r2, #0
 800845a:	60e0      	str	r0, [r4, #12]
 800845c:	2104      	movs	r1, #4
 800845e:	6860      	ldr	r0, [r4, #4]
 8008460:	f7ff ff82 	bl	8008368 <std>
 8008464:	68a0      	ldr	r0, [r4, #8]
 8008466:	2201      	movs	r2, #1
 8008468:	2109      	movs	r1, #9
 800846a:	f7ff ff7d 	bl	8008368 <std>
 800846e:	68e0      	ldr	r0, [r4, #12]
 8008470:	2202      	movs	r2, #2
 8008472:	2112      	movs	r1, #18
 8008474:	f7ff ff78 	bl	8008368 <std>
 8008478:	2301      	movs	r3, #1
 800847a:	61a3      	str	r3, [r4, #24]
 800847c:	e7d2      	b.n	8008424 <__sinit+0xc>
 800847e:	bf00      	nop
 8008480:	08009930 	.word	0x08009930
 8008484:	080083b1 	.word	0x080083b1

08008488 <__sfp>:
 8008488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848a:	4607      	mov	r7, r0
 800848c:	f7ff ffac 	bl	80083e8 <__sfp_lock_acquire>
 8008490:	4b1e      	ldr	r3, [pc, #120]	; (800850c <__sfp+0x84>)
 8008492:	681e      	ldr	r6, [r3, #0]
 8008494:	69b3      	ldr	r3, [r6, #24]
 8008496:	b913      	cbnz	r3, 800849e <__sfp+0x16>
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff ffbd 	bl	8008418 <__sinit>
 800849e:	3648      	adds	r6, #72	; 0x48
 80084a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	d503      	bpl.n	80084b0 <__sfp+0x28>
 80084a8:	6833      	ldr	r3, [r6, #0]
 80084aa:	b30b      	cbz	r3, 80084f0 <__sfp+0x68>
 80084ac:	6836      	ldr	r6, [r6, #0]
 80084ae:	e7f7      	b.n	80084a0 <__sfp+0x18>
 80084b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084b4:	b9d5      	cbnz	r5, 80084ec <__sfp+0x64>
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <__sfp+0x88>)
 80084b8:	60e3      	str	r3, [r4, #12]
 80084ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084be:	6665      	str	r5, [r4, #100]	; 0x64
 80084c0:	f000 f847 	bl	8008552 <__retarget_lock_init_recursive>
 80084c4:	f7ff ff96 	bl	80083f4 <__sfp_lock_release>
 80084c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084d0:	6025      	str	r5, [r4, #0]
 80084d2:	61a5      	str	r5, [r4, #24]
 80084d4:	2208      	movs	r2, #8
 80084d6:	4629      	mov	r1, r5
 80084d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084dc:	f7ff fc0a 	bl	8007cf4 <memset>
 80084e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084e8:	4620      	mov	r0, r4
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	3468      	adds	r4, #104	; 0x68
 80084ee:	e7d9      	b.n	80084a4 <__sfp+0x1c>
 80084f0:	2104      	movs	r1, #4
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7ff ff62 	bl	80083bc <__sfmoreglue>
 80084f8:	4604      	mov	r4, r0
 80084fa:	6030      	str	r0, [r6, #0]
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1d5      	bne.n	80084ac <__sfp+0x24>
 8008500:	f7ff ff78 	bl	80083f4 <__sfp_lock_release>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	e7ee      	b.n	80084e8 <__sfp+0x60>
 800850a:	bf00      	nop
 800850c:	08009930 	.word	0x08009930
 8008510:	ffff0001 	.word	0xffff0001

08008514 <_fwalk_reent>:
 8008514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008518:	4606      	mov	r6, r0
 800851a:	4688      	mov	r8, r1
 800851c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008520:	2700      	movs	r7, #0
 8008522:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008526:	f1b9 0901 	subs.w	r9, r9, #1
 800852a:	d505      	bpl.n	8008538 <_fwalk_reent+0x24>
 800852c:	6824      	ldr	r4, [r4, #0]
 800852e:	2c00      	cmp	r4, #0
 8008530:	d1f7      	bne.n	8008522 <_fwalk_reent+0xe>
 8008532:	4638      	mov	r0, r7
 8008534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008538:	89ab      	ldrh	r3, [r5, #12]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d907      	bls.n	800854e <_fwalk_reent+0x3a>
 800853e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008542:	3301      	adds	r3, #1
 8008544:	d003      	beq.n	800854e <_fwalk_reent+0x3a>
 8008546:	4629      	mov	r1, r5
 8008548:	4630      	mov	r0, r6
 800854a:	47c0      	blx	r8
 800854c:	4307      	orrs	r7, r0
 800854e:	3568      	adds	r5, #104	; 0x68
 8008550:	e7e9      	b.n	8008526 <_fwalk_reent+0x12>

08008552 <__retarget_lock_init_recursive>:
 8008552:	4770      	bx	lr

08008554 <__retarget_lock_acquire_recursive>:
 8008554:	4770      	bx	lr

08008556 <__retarget_lock_release_recursive>:
 8008556:	4770      	bx	lr

08008558 <_lseek_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4d07      	ldr	r5, [pc, #28]	; (8008578 <_lseek_r+0x20>)
 800855c:	4604      	mov	r4, r0
 800855e:	4608      	mov	r0, r1
 8008560:	4611      	mov	r1, r2
 8008562:	2200      	movs	r2, #0
 8008564:	602a      	str	r2, [r5, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7f8 fd76 	bl	8001058 <_lseek>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_lseek_r+0x1e>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_lseek_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20002778 	.word	0x20002778

0800857c <__swhatbuf_r>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	460e      	mov	r6, r1
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	2900      	cmp	r1, #0
 8008586:	b096      	sub	sp, #88	; 0x58
 8008588:	4614      	mov	r4, r2
 800858a:	461d      	mov	r5, r3
 800858c:	da08      	bge.n	80085a0 <__swhatbuf_r+0x24>
 800858e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	061a      	lsls	r2, r3, #24
 8008598:	d410      	bmi.n	80085bc <__swhatbuf_r+0x40>
 800859a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859e:	e00e      	b.n	80085be <__swhatbuf_r+0x42>
 80085a0:	466a      	mov	r2, sp
 80085a2:	f001 f84b 	bl	800963c <_fstat_r>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dbf1      	blt.n	800858e <__swhatbuf_r+0x12>
 80085aa:	9a01      	ldr	r2, [sp, #4]
 80085ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085b4:	425a      	negs	r2, r3
 80085b6:	415a      	adcs	r2, r3
 80085b8:	602a      	str	r2, [r5, #0]
 80085ba:	e7ee      	b.n	800859a <__swhatbuf_r+0x1e>
 80085bc:	2340      	movs	r3, #64	; 0x40
 80085be:	2000      	movs	r0, #0
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	b016      	add	sp, #88	; 0x58
 80085c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080085c8 <__smakebuf_r>:
 80085c8:	898b      	ldrh	r3, [r1, #12]
 80085ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085cc:	079d      	lsls	r5, r3, #30
 80085ce:	4606      	mov	r6, r0
 80085d0:	460c      	mov	r4, r1
 80085d2:	d507      	bpl.n	80085e4 <__smakebuf_r+0x1c>
 80085d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	2301      	movs	r3, #1
 80085de:	6163      	str	r3, [r4, #20]
 80085e0:	b002      	add	sp, #8
 80085e2:	bd70      	pop	{r4, r5, r6, pc}
 80085e4:	ab01      	add	r3, sp, #4
 80085e6:	466a      	mov	r2, sp
 80085e8:	f7ff ffc8 	bl	800857c <__swhatbuf_r>
 80085ec:	9900      	ldr	r1, [sp, #0]
 80085ee:	4605      	mov	r5, r0
 80085f0:	4630      	mov	r0, r6
 80085f2:	f000 f895 	bl	8008720 <_malloc_r>
 80085f6:	b948      	cbnz	r0, 800860c <__smakebuf_r+0x44>
 80085f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fc:	059a      	lsls	r2, r3, #22
 80085fe:	d4ef      	bmi.n	80085e0 <__smakebuf_r+0x18>
 8008600:	f023 0303 	bic.w	r3, r3, #3
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	e7e3      	b.n	80085d4 <__smakebuf_r+0xc>
 800860c:	4b0d      	ldr	r3, [pc, #52]	; (8008644 <__smakebuf_r+0x7c>)
 800860e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	81a3      	strh	r3, [r4, #12]
 800861a:	9b00      	ldr	r3, [sp, #0]
 800861c:	6163      	str	r3, [r4, #20]
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	6120      	str	r0, [r4, #16]
 8008622:	b15b      	cbz	r3, 800863c <__smakebuf_r+0x74>
 8008624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008628:	4630      	mov	r0, r6
 800862a:	f001 f819 	bl	8009660 <_isatty_r>
 800862e:	b128      	cbz	r0, 800863c <__smakebuf_r+0x74>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f023 0303 	bic.w	r3, r3, #3
 8008636:	f043 0301 	orr.w	r3, r3, #1
 800863a:	81a3      	strh	r3, [r4, #12]
 800863c:	89a0      	ldrh	r0, [r4, #12]
 800863e:	4305      	orrs	r5, r0
 8008640:	81a5      	strh	r5, [r4, #12]
 8008642:	e7cd      	b.n	80085e0 <__smakebuf_r+0x18>
 8008644:	080083b1 	.word	0x080083b1

08008648 <_free_r>:
 8008648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800864a:	2900      	cmp	r1, #0
 800864c:	d044      	beq.n	80086d8 <_free_r+0x90>
 800864e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008652:	9001      	str	r0, [sp, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f1a1 0404 	sub.w	r4, r1, #4
 800865a:	bfb8      	it	lt
 800865c:	18e4      	addlt	r4, r4, r3
 800865e:	f001 f80f 	bl	8009680 <__malloc_lock>
 8008662:	4a1e      	ldr	r2, [pc, #120]	; (80086dc <_free_r+0x94>)
 8008664:	9801      	ldr	r0, [sp, #4]
 8008666:	6813      	ldr	r3, [r2, #0]
 8008668:	b933      	cbnz	r3, 8008678 <_free_r+0x30>
 800866a:	6063      	str	r3, [r4, #4]
 800866c:	6014      	str	r4, [r2, #0]
 800866e:	b003      	add	sp, #12
 8008670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008674:	f001 b80a 	b.w	800968c <__malloc_unlock>
 8008678:	42a3      	cmp	r3, r4
 800867a:	d908      	bls.n	800868e <_free_r+0x46>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	1961      	adds	r1, r4, r5
 8008680:	428b      	cmp	r3, r1
 8008682:	bf01      	itttt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	1949      	addeq	r1, r1, r5
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	e7ed      	b.n	800866a <_free_r+0x22>
 800868e:	461a      	mov	r2, r3
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b10b      	cbz	r3, 8008698 <_free_r+0x50>
 8008694:	42a3      	cmp	r3, r4
 8008696:	d9fa      	bls.n	800868e <_free_r+0x46>
 8008698:	6811      	ldr	r1, [r2, #0]
 800869a:	1855      	adds	r5, r2, r1
 800869c:	42a5      	cmp	r5, r4
 800869e:	d10b      	bne.n	80086b8 <_free_r+0x70>
 80086a0:	6824      	ldr	r4, [r4, #0]
 80086a2:	4421      	add	r1, r4
 80086a4:	1854      	adds	r4, r2, r1
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	d1e0      	bne.n	800866e <_free_r+0x26>
 80086ac:	681c      	ldr	r4, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	6053      	str	r3, [r2, #4]
 80086b2:	4421      	add	r1, r4
 80086b4:	6011      	str	r1, [r2, #0]
 80086b6:	e7da      	b.n	800866e <_free_r+0x26>
 80086b8:	d902      	bls.n	80086c0 <_free_r+0x78>
 80086ba:	230c      	movs	r3, #12
 80086bc:	6003      	str	r3, [r0, #0]
 80086be:	e7d6      	b.n	800866e <_free_r+0x26>
 80086c0:	6825      	ldr	r5, [r4, #0]
 80086c2:	1961      	adds	r1, r4, r5
 80086c4:	428b      	cmp	r3, r1
 80086c6:	bf04      	itt	eq
 80086c8:	6819      	ldreq	r1, [r3, #0]
 80086ca:	685b      	ldreq	r3, [r3, #4]
 80086cc:	6063      	str	r3, [r4, #4]
 80086ce:	bf04      	itt	eq
 80086d0:	1949      	addeq	r1, r1, r5
 80086d2:	6021      	streq	r1, [r4, #0]
 80086d4:	6054      	str	r4, [r2, #4]
 80086d6:	e7ca      	b.n	800866e <_free_r+0x26>
 80086d8:	b003      	add	sp, #12
 80086da:	bd30      	pop	{r4, r5, pc}
 80086dc:	20002770 	.word	0x20002770

080086e0 <sbrk_aligned>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	4e0e      	ldr	r6, [pc, #56]	; (800871c <sbrk_aligned+0x3c>)
 80086e4:	460c      	mov	r4, r1
 80086e6:	6831      	ldr	r1, [r6, #0]
 80086e8:	4605      	mov	r5, r0
 80086ea:	b911      	cbnz	r1, 80086f2 <sbrk_aligned+0x12>
 80086ec:	f000 feb0 	bl	8009450 <_sbrk_r>
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4621      	mov	r1, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	f000 feab 	bl	8009450 <_sbrk_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	d00a      	beq.n	8008714 <sbrk_aligned+0x34>
 80086fe:	1cc4      	adds	r4, r0, #3
 8008700:	f024 0403 	bic.w	r4, r4, #3
 8008704:	42a0      	cmp	r0, r4
 8008706:	d007      	beq.n	8008718 <sbrk_aligned+0x38>
 8008708:	1a21      	subs	r1, r4, r0
 800870a:	4628      	mov	r0, r5
 800870c:	f000 fea0 	bl	8009450 <_sbrk_r>
 8008710:	3001      	adds	r0, #1
 8008712:	d101      	bne.n	8008718 <sbrk_aligned+0x38>
 8008714:	f04f 34ff 	mov.w	r4, #4294967295
 8008718:	4620      	mov	r0, r4
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	20002774 	.word	0x20002774

08008720 <_malloc_r>:
 8008720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008724:	1ccd      	adds	r5, r1, #3
 8008726:	f025 0503 	bic.w	r5, r5, #3
 800872a:	3508      	adds	r5, #8
 800872c:	2d0c      	cmp	r5, #12
 800872e:	bf38      	it	cc
 8008730:	250c      	movcc	r5, #12
 8008732:	2d00      	cmp	r5, #0
 8008734:	4607      	mov	r7, r0
 8008736:	db01      	blt.n	800873c <_malloc_r+0x1c>
 8008738:	42a9      	cmp	r1, r5
 800873a:	d905      	bls.n	8008748 <_malloc_r+0x28>
 800873c:	230c      	movs	r3, #12
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	2600      	movs	r6, #0
 8008742:	4630      	mov	r0, r6
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	4e2e      	ldr	r6, [pc, #184]	; (8008804 <_malloc_r+0xe4>)
 800874a:	f000 ff99 	bl	8009680 <__malloc_lock>
 800874e:	6833      	ldr	r3, [r6, #0]
 8008750:	461c      	mov	r4, r3
 8008752:	bb34      	cbnz	r4, 80087a2 <_malloc_r+0x82>
 8008754:	4629      	mov	r1, r5
 8008756:	4638      	mov	r0, r7
 8008758:	f7ff ffc2 	bl	80086e0 <sbrk_aligned>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	4604      	mov	r4, r0
 8008760:	d14d      	bne.n	80087fe <_malloc_r+0xde>
 8008762:	6834      	ldr	r4, [r6, #0]
 8008764:	4626      	mov	r6, r4
 8008766:	2e00      	cmp	r6, #0
 8008768:	d140      	bne.n	80087ec <_malloc_r+0xcc>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	4631      	mov	r1, r6
 800876e:	4638      	mov	r0, r7
 8008770:	eb04 0803 	add.w	r8, r4, r3
 8008774:	f000 fe6c 	bl	8009450 <_sbrk_r>
 8008778:	4580      	cmp	r8, r0
 800877a:	d13a      	bne.n	80087f2 <_malloc_r+0xd2>
 800877c:	6821      	ldr	r1, [r4, #0]
 800877e:	3503      	adds	r5, #3
 8008780:	1a6d      	subs	r5, r5, r1
 8008782:	f025 0503 	bic.w	r5, r5, #3
 8008786:	3508      	adds	r5, #8
 8008788:	2d0c      	cmp	r5, #12
 800878a:	bf38      	it	cc
 800878c:	250c      	movcc	r5, #12
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ffa5 	bl	80086e0 <sbrk_aligned>
 8008796:	3001      	adds	r0, #1
 8008798:	d02b      	beq.n	80087f2 <_malloc_r+0xd2>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	442b      	add	r3, r5
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	e00e      	b.n	80087c0 <_malloc_r+0xa0>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	1b52      	subs	r2, r2, r5
 80087a6:	d41e      	bmi.n	80087e6 <_malloc_r+0xc6>
 80087a8:	2a0b      	cmp	r2, #11
 80087aa:	d916      	bls.n	80087da <_malloc_r+0xba>
 80087ac:	1961      	adds	r1, r4, r5
 80087ae:	42a3      	cmp	r3, r4
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	bf18      	it	ne
 80087b4:	6059      	strne	r1, [r3, #4]
 80087b6:	6863      	ldr	r3, [r4, #4]
 80087b8:	bf08      	it	eq
 80087ba:	6031      	streq	r1, [r6, #0]
 80087bc:	5162      	str	r2, [r4, r5]
 80087be:	604b      	str	r3, [r1, #4]
 80087c0:	4638      	mov	r0, r7
 80087c2:	f104 060b 	add.w	r6, r4, #11
 80087c6:	f000 ff61 	bl	800968c <__malloc_unlock>
 80087ca:	f026 0607 	bic.w	r6, r6, #7
 80087ce:	1d23      	adds	r3, r4, #4
 80087d0:	1af2      	subs	r2, r6, r3
 80087d2:	d0b6      	beq.n	8008742 <_malloc_r+0x22>
 80087d4:	1b9b      	subs	r3, r3, r6
 80087d6:	50a3      	str	r3, [r4, r2]
 80087d8:	e7b3      	b.n	8008742 <_malloc_r+0x22>
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	42a3      	cmp	r3, r4
 80087de:	bf0c      	ite	eq
 80087e0:	6032      	streq	r2, [r6, #0]
 80087e2:	605a      	strne	r2, [r3, #4]
 80087e4:	e7ec      	b.n	80087c0 <_malloc_r+0xa0>
 80087e6:	4623      	mov	r3, r4
 80087e8:	6864      	ldr	r4, [r4, #4]
 80087ea:	e7b2      	b.n	8008752 <_malloc_r+0x32>
 80087ec:	4634      	mov	r4, r6
 80087ee:	6876      	ldr	r6, [r6, #4]
 80087f0:	e7b9      	b.n	8008766 <_malloc_r+0x46>
 80087f2:	230c      	movs	r3, #12
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	4638      	mov	r0, r7
 80087f8:	f000 ff48 	bl	800968c <__malloc_unlock>
 80087fc:	e7a1      	b.n	8008742 <_malloc_r+0x22>
 80087fe:	6025      	str	r5, [r4, #0]
 8008800:	e7de      	b.n	80087c0 <_malloc_r+0xa0>
 8008802:	bf00      	nop
 8008804:	20002770 	.word	0x20002770

08008808 <_sungetc_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	1c4b      	adds	r3, r1, #1
 800880c:	4614      	mov	r4, r2
 800880e:	d103      	bne.n	8008818 <_sungetc_r+0x10>
 8008810:	f04f 35ff 	mov.w	r5, #4294967295
 8008814:	4628      	mov	r0, r5
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	8993      	ldrh	r3, [r2, #12]
 800881a:	f023 0320 	bic.w	r3, r3, #32
 800881e:	8193      	strh	r3, [r2, #12]
 8008820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008822:	6852      	ldr	r2, [r2, #4]
 8008824:	b2cd      	uxtb	r5, r1
 8008826:	b18b      	cbz	r3, 800884c <_sungetc_r+0x44>
 8008828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800882a:	4293      	cmp	r3, r2
 800882c:	dd08      	ble.n	8008840 <_sungetc_r+0x38>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	1e5a      	subs	r2, r3, #1
 8008832:	6022      	str	r2, [r4, #0]
 8008834:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	3301      	adds	r3, #1
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	e7e9      	b.n	8008814 <_sungetc_r+0xc>
 8008840:	4621      	mov	r1, r4
 8008842:	f000 fec1 	bl	80095c8 <__submore>
 8008846:	2800      	cmp	r0, #0
 8008848:	d0f1      	beq.n	800882e <_sungetc_r+0x26>
 800884a:	e7e1      	b.n	8008810 <_sungetc_r+0x8>
 800884c:	6921      	ldr	r1, [r4, #16]
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	b151      	cbz	r1, 8008868 <_sungetc_r+0x60>
 8008852:	4299      	cmp	r1, r3
 8008854:	d208      	bcs.n	8008868 <_sungetc_r+0x60>
 8008856:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800885a:	42a9      	cmp	r1, r5
 800885c:	d104      	bne.n	8008868 <_sungetc_r+0x60>
 800885e:	3b01      	subs	r3, #1
 8008860:	3201      	adds	r2, #1
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	e7d5      	b.n	8008814 <_sungetc_r+0xc>
 8008868:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800886c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008870:	6363      	str	r3, [r4, #52]	; 0x34
 8008872:	2303      	movs	r3, #3
 8008874:	63a3      	str	r3, [r4, #56]	; 0x38
 8008876:	4623      	mov	r3, r4
 8008878:	f803 5f46 	strb.w	r5, [r3, #70]!
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	2301      	movs	r3, #1
 8008880:	e7dc      	b.n	800883c <_sungetc_r+0x34>

08008882 <__ssrefill_r>:
 8008882:	b510      	push	{r4, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008888:	b169      	cbz	r1, 80088a6 <__ssrefill_r+0x24>
 800888a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888e:	4299      	cmp	r1, r3
 8008890:	d001      	beq.n	8008896 <__ssrefill_r+0x14>
 8008892:	f7ff fed9 	bl	8008648 <_free_r>
 8008896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	2000      	movs	r0, #0
 800889c:	6360      	str	r0, [r4, #52]	; 0x34
 800889e:	b113      	cbz	r3, 80088a6 <__ssrefill_r+0x24>
 80088a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088a2:	6023      	str	r3, [r4, #0]
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	2300      	movs	r3, #0
 80088ac:	6063      	str	r3, [r4, #4]
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f043 0320 	orr.w	r3, r3, #32
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ba:	e7f3      	b.n	80088a4 <__ssrefill_r+0x22>

080088bc <__ssvfiscanf_r>:
 80088bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80088c6:	2100      	movs	r1, #0
 80088c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80088cc:	49a6      	ldr	r1, [pc, #664]	; (8008b68 <__ssvfiscanf_r+0x2ac>)
 80088ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80088d0:	f10d 0804 	add.w	r8, sp, #4
 80088d4:	49a5      	ldr	r1, [pc, #660]	; (8008b6c <__ssvfiscanf_r+0x2b0>)
 80088d6:	4fa6      	ldr	r7, [pc, #664]	; (8008b70 <__ssvfiscanf_r+0x2b4>)
 80088d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008b74 <__ssvfiscanf_r+0x2b8>
 80088dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80088e0:	4606      	mov	r6, r0
 80088e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	7813      	ldrb	r3, [r2, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 815a 	beq.w	8008ba2 <__ssvfiscanf_r+0x2e6>
 80088ee:	5dd9      	ldrb	r1, [r3, r7]
 80088f0:	f011 0108 	ands.w	r1, r1, #8
 80088f4:	f102 0501 	add.w	r5, r2, #1
 80088f8:	d019      	beq.n	800892e <__ssvfiscanf_r+0x72>
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd0f      	ble.n	8008920 <__ssvfiscanf_r+0x64>
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	5cba      	ldrb	r2, [r7, r2]
 8008906:	0712      	lsls	r2, r2, #28
 8008908:	d401      	bmi.n	800890e <__ssvfiscanf_r+0x52>
 800890a:	462a      	mov	r2, r5
 800890c:	e7eb      	b.n	80088e6 <__ssvfiscanf_r+0x2a>
 800890e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008910:	3201      	adds	r2, #1
 8008912:	9245      	str	r2, [sp, #276]	; 0x114
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	3301      	adds	r3, #1
 8008918:	3a01      	subs	r2, #1
 800891a:	6062      	str	r2, [r4, #4]
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	e7ec      	b.n	80088fa <__ssvfiscanf_r+0x3e>
 8008920:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008922:	4621      	mov	r1, r4
 8008924:	4630      	mov	r0, r6
 8008926:	4798      	blx	r3
 8008928:	2800      	cmp	r0, #0
 800892a:	d0e9      	beq.n	8008900 <__ssvfiscanf_r+0x44>
 800892c:	e7ed      	b.n	800890a <__ssvfiscanf_r+0x4e>
 800892e:	2b25      	cmp	r3, #37	; 0x25
 8008930:	d012      	beq.n	8008958 <__ssvfiscanf_r+0x9c>
 8008932:	469a      	mov	sl, r3
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	f340 8091 	ble.w	8008a5e <__ssvfiscanf_r+0x1a2>
 800893c:	6822      	ldr	r2, [r4, #0]
 800893e:	7813      	ldrb	r3, [r2, #0]
 8008940:	4553      	cmp	r3, sl
 8008942:	f040 812e 	bne.w	8008ba2 <__ssvfiscanf_r+0x2e6>
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	3b01      	subs	r3, #1
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800894e:	3201      	adds	r2, #1
 8008950:	3301      	adds	r3, #1
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	9345      	str	r3, [sp, #276]	; 0x114
 8008956:	e7d8      	b.n	800890a <__ssvfiscanf_r+0x4e>
 8008958:	9141      	str	r1, [sp, #260]	; 0x104
 800895a:	9143      	str	r1, [sp, #268]	; 0x10c
 800895c:	7853      	ldrb	r3, [r2, #1]
 800895e:	2b2a      	cmp	r3, #42	; 0x2a
 8008960:	bf02      	ittt	eq
 8008962:	2310      	moveq	r3, #16
 8008964:	1c95      	addeq	r5, r2, #2
 8008966:	9341      	streq	r3, [sp, #260]	; 0x104
 8008968:	220a      	movs	r2, #10
 800896a:	46aa      	mov	sl, r5
 800896c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008970:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008974:	2b09      	cmp	r3, #9
 8008976:	d91d      	bls.n	80089b4 <__ssvfiscanf_r+0xf8>
 8008978:	487e      	ldr	r0, [pc, #504]	; (8008b74 <__ssvfiscanf_r+0x2b8>)
 800897a:	2203      	movs	r2, #3
 800897c:	f7f7 fc40 	bl	8000200 <memchr>
 8008980:	b140      	cbz	r0, 8008994 <__ssvfiscanf_r+0xd8>
 8008982:	2301      	movs	r3, #1
 8008984:	eba0 0009 	sub.w	r0, r0, r9
 8008988:	fa03 f000 	lsl.w	r0, r3, r0
 800898c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800898e:	4318      	orrs	r0, r3
 8008990:	9041      	str	r0, [sp, #260]	; 0x104
 8008992:	4655      	mov	r5, sl
 8008994:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008998:	2b78      	cmp	r3, #120	; 0x78
 800899a:	d806      	bhi.n	80089aa <__ssvfiscanf_r+0xee>
 800899c:	2b57      	cmp	r3, #87	; 0x57
 800899e:	d810      	bhi.n	80089c2 <__ssvfiscanf_r+0x106>
 80089a0:	2b25      	cmp	r3, #37	; 0x25
 80089a2:	d0c6      	beq.n	8008932 <__ssvfiscanf_r+0x76>
 80089a4:	d856      	bhi.n	8008a54 <__ssvfiscanf_r+0x198>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d064      	beq.n	8008a74 <__ssvfiscanf_r+0x1b8>
 80089aa:	2303      	movs	r3, #3
 80089ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80089ae:	230a      	movs	r3, #10
 80089b0:	9342      	str	r3, [sp, #264]	; 0x108
 80089b2:	e071      	b.n	8008a98 <__ssvfiscanf_r+0x1dc>
 80089b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80089b6:	fb02 1103 	mla	r1, r2, r3, r1
 80089ba:	3930      	subs	r1, #48	; 0x30
 80089bc:	9143      	str	r1, [sp, #268]	; 0x10c
 80089be:	4655      	mov	r5, sl
 80089c0:	e7d3      	b.n	800896a <__ssvfiscanf_r+0xae>
 80089c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80089c6:	2a20      	cmp	r2, #32
 80089c8:	d8ef      	bhi.n	80089aa <__ssvfiscanf_r+0xee>
 80089ca:	a101      	add	r1, pc, #4	; (adr r1, 80089d0 <__ssvfiscanf_r+0x114>)
 80089cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089d0:	08008a83 	.word	0x08008a83
 80089d4:	080089ab 	.word	0x080089ab
 80089d8:	080089ab 	.word	0x080089ab
 80089dc:	08008ae1 	.word	0x08008ae1
 80089e0:	080089ab 	.word	0x080089ab
 80089e4:	080089ab 	.word	0x080089ab
 80089e8:	080089ab 	.word	0x080089ab
 80089ec:	080089ab 	.word	0x080089ab
 80089f0:	080089ab 	.word	0x080089ab
 80089f4:	080089ab 	.word	0x080089ab
 80089f8:	080089ab 	.word	0x080089ab
 80089fc:	08008af7 	.word	0x08008af7
 8008a00:	08008acd 	.word	0x08008acd
 8008a04:	08008a5b 	.word	0x08008a5b
 8008a08:	08008a5b 	.word	0x08008a5b
 8008a0c:	08008a5b 	.word	0x08008a5b
 8008a10:	080089ab 	.word	0x080089ab
 8008a14:	08008ad1 	.word	0x08008ad1
 8008a18:	080089ab 	.word	0x080089ab
 8008a1c:	080089ab 	.word	0x080089ab
 8008a20:	080089ab 	.word	0x080089ab
 8008a24:	080089ab 	.word	0x080089ab
 8008a28:	08008b07 	.word	0x08008b07
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008a7b 	.word	0x08008a7b
 8008a34:	080089ab 	.word	0x080089ab
 8008a38:	080089ab 	.word	0x080089ab
 8008a3c:	08008b03 	.word	0x08008b03
 8008a40:	080089ab 	.word	0x080089ab
 8008a44:	08008acd 	.word	0x08008acd
 8008a48:	080089ab 	.word	0x080089ab
 8008a4c:	080089ab 	.word	0x080089ab
 8008a50:	08008a83 	.word	0x08008a83
 8008a54:	3b45      	subs	r3, #69	; 0x45
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d8a7      	bhi.n	80089aa <__ssvfiscanf_r+0xee>
 8008a5a:	2305      	movs	r3, #5
 8008a5c:	e01b      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008a5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a60:	4621      	mov	r1, r4
 8008a62:	4630      	mov	r0, r6
 8008a64:	4798      	blx	r3
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f43f af68 	beq.w	800893c <__ssvfiscanf_r+0x80>
 8008a6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f040 808d 	bne.w	8008b8e <__ssvfiscanf_r+0x2d2>
 8008a74:	f04f 30ff 	mov.w	r0, #4294967295
 8008a78:	e08f      	b.n	8008b9a <__ssvfiscanf_r+0x2de>
 8008a7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a7c:	f042 0220 	orr.w	r2, r2, #32
 8008a80:	9241      	str	r2, [sp, #260]	; 0x104
 8008a82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a88:	9241      	str	r2, [sp, #260]	; 0x104
 8008a8a:	2210      	movs	r2, #16
 8008a8c:	2b6f      	cmp	r3, #111	; 0x6f
 8008a8e:	9242      	str	r2, [sp, #264]	; 0x108
 8008a90:	bf34      	ite	cc
 8008a92:	2303      	movcc	r3, #3
 8008a94:	2304      	movcs	r3, #4
 8008a96:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd42      	ble.n	8008b24 <__ssvfiscanf_r+0x268>
 8008a9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008aa0:	0659      	lsls	r1, r3, #25
 8008aa2:	d404      	bmi.n	8008aae <__ssvfiscanf_r+0x1f2>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	5cba      	ldrb	r2, [r7, r2]
 8008aaa:	0712      	lsls	r2, r2, #28
 8008aac:	d441      	bmi.n	8008b32 <__ssvfiscanf_r+0x276>
 8008aae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	dc50      	bgt.n	8008b56 <__ssvfiscanf_r+0x29a>
 8008ab4:	466b      	mov	r3, sp
 8008ab6:	4622      	mov	r2, r4
 8008ab8:	a941      	add	r1, sp, #260	; 0x104
 8008aba:	4630      	mov	r0, r6
 8008abc:	f000 fb64 	bl	8009188 <_scanf_chars>
 8008ac0:	2801      	cmp	r0, #1
 8008ac2:	d06e      	beq.n	8008ba2 <__ssvfiscanf_r+0x2e6>
 8008ac4:	2802      	cmp	r0, #2
 8008ac6:	f47f af20 	bne.w	800890a <__ssvfiscanf_r+0x4e>
 8008aca:	e7cf      	b.n	8008a6c <__ssvfiscanf_r+0x1b0>
 8008acc:	220a      	movs	r2, #10
 8008ace:	e7dd      	b.n	8008a8c <__ssvfiscanf_r+0x1d0>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e7de      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008ad8:	2308      	movs	r3, #8
 8008ada:	9342      	str	r3, [sp, #264]	; 0x108
 8008adc:	2304      	movs	r3, #4
 8008ade:	e7da      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f000 fcc4 	bl	8009470 <__sccl>
 8008ae8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aee:	9341      	str	r3, [sp, #260]	; 0x104
 8008af0:	4605      	mov	r5, r0
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7cf      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008af6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008afc:	9341      	str	r3, [sp, #260]	; 0x104
 8008afe:	2300      	movs	r3, #0
 8008b00:	e7c9      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e7c7      	b.n	8008a96 <__ssvfiscanf_r+0x1da>
 8008b06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008b08:	06c3      	lsls	r3, r0, #27
 8008b0a:	f53f aefe 	bmi.w	800890a <__ssvfiscanf_r+0x4e>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b12:	1d19      	adds	r1, r3, #4
 8008b14:	9100      	str	r1, [sp, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f010 0f01 	tst.w	r0, #1
 8008b1c:	bf14      	ite	ne
 8008b1e:	801a      	strhne	r2, [r3, #0]
 8008b20:	601a      	streq	r2, [r3, #0]
 8008b22:	e6f2      	b.n	800890a <__ssvfiscanf_r+0x4e>
 8008b24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b26:	4621      	mov	r1, r4
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4798      	blx	r3
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d0b6      	beq.n	8008a9e <__ssvfiscanf_r+0x1e2>
 8008b30:	e79c      	b.n	8008a6c <__ssvfiscanf_r+0x1b0>
 8008b32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008b34:	3201      	adds	r2, #1
 8008b36:	9245      	str	r2, [sp, #276]	; 0x114
 8008b38:	6862      	ldr	r2, [r4, #4]
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	6062      	str	r2, [r4, #4]
 8008b40:	dd02      	ble.n	8008b48 <__ssvfiscanf_r+0x28c>
 8008b42:	3301      	adds	r3, #1
 8008b44:	6023      	str	r3, [r4, #0]
 8008b46:	e7ad      	b.n	8008aa4 <__ssvfiscanf_r+0x1e8>
 8008b48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4798      	blx	r3
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0a7      	beq.n	8008aa4 <__ssvfiscanf_r+0x1e8>
 8008b54:	e78a      	b.n	8008a6c <__ssvfiscanf_r+0x1b0>
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	dc0e      	bgt.n	8008b78 <__ssvfiscanf_r+0x2bc>
 8008b5a:	466b      	mov	r3, sp
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	a941      	add	r1, sp, #260	; 0x104
 8008b60:	4630      	mov	r0, r6
 8008b62:	f000 fb6b 	bl	800923c <_scanf_i>
 8008b66:	e7ab      	b.n	8008ac0 <__ssvfiscanf_r+0x204>
 8008b68:	08008809 	.word	0x08008809
 8008b6c:	08008883 	.word	0x08008883
 8008b70:	08009935 	.word	0x08009935
 8008b74:	08009a98 	.word	0x08009a98
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <__ssvfiscanf_r+0x2ec>)
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f43f aec5 	beq.w	800890a <__ssvfiscanf_r+0x4e>
 8008b80:	466b      	mov	r3, sp
 8008b82:	4622      	mov	r2, r4
 8008b84:	a941      	add	r1, sp, #260	; 0x104
 8008b86:	4630      	mov	r0, r6
 8008b88:	f3af 8000 	nop.w
 8008b8c:	e798      	b.n	8008ac0 <__ssvfiscanf_r+0x204>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008b94:	bf18      	it	ne
 8008b96:	f04f 30ff 	movne.w	r0, #4294967295
 8008b9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ba4:	e7f9      	b.n	8008b9a <__ssvfiscanf_r+0x2de>
 8008ba6:	bf00      	nop
 8008ba8:	00000000 	.word	0x00000000

08008bac <__sfputc_r>:
 8008bac:	6893      	ldr	r3, [r2, #8]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	b410      	push	{r4}
 8008bb4:	6093      	str	r3, [r2, #8]
 8008bb6:	da08      	bge.n	8008bca <__sfputc_r+0x1e>
 8008bb8:	6994      	ldr	r4, [r2, #24]
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	db01      	blt.n	8008bc2 <__sfputc_r+0x16>
 8008bbe:	290a      	cmp	r1, #10
 8008bc0:	d103      	bne.n	8008bca <__sfputc_r+0x1e>
 8008bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc6:	f7ff ba2b 	b.w	8008020 <__swbuf_r>
 8008bca:	6813      	ldr	r3, [r2, #0]
 8008bcc:	1c58      	adds	r0, r3, #1
 8008bce:	6010      	str	r0, [r2, #0]
 8008bd0:	7019      	strb	r1, [r3, #0]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <__sfputs_r>:
 8008bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bdc:	4606      	mov	r6, r0
 8008bde:	460f      	mov	r7, r1
 8008be0:	4614      	mov	r4, r2
 8008be2:	18d5      	adds	r5, r2, r3
 8008be4:	42ac      	cmp	r4, r5
 8008be6:	d101      	bne.n	8008bec <__sfputs_r+0x12>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e007      	b.n	8008bfc <__sfputs_r+0x22>
 8008bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf0:	463a      	mov	r2, r7
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	f7ff ffda 	bl	8008bac <__sfputc_r>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d1f3      	bne.n	8008be4 <__sfputs_r+0xa>
 8008bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c00 <_vfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	460d      	mov	r5, r1
 8008c06:	b09d      	sub	sp, #116	; 0x74
 8008c08:	4614      	mov	r4, r2
 8008c0a:	4698      	mov	r8, r3
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	b118      	cbz	r0, 8008c18 <_vfiprintf_r+0x18>
 8008c10:	6983      	ldr	r3, [r0, #24]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_vfiprintf_r+0x18>
 8008c14:	f7ff fc00 	bl	8008418 <__sinit>
 8008c18:	4b89      	ldr	r3, [pc, #548]	; (8008e40 <_vfiprintf_r+0x240>)
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	d11b      	bne.n	8008c56 <_vfiprintf_r+0x56>
 8008c1e:	6875      	ldr	r5, [r6, #4]
 8008c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c22:	07d9      	lsls	r1, r3, #31
 8008c24:	d405      	bmi.n	8008c32 <_vfiprintf_r+0x32>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	059a      	lsls	r2, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_vfiprintf_r+0x32>
 8008c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c2e:	f7ff fc91 	bl	8008554 <__retarget_lock_acquire_recursive>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	071b      	lsls	r3, r3, #28
 8008c36:	d501      	bpl.n	8008c3c <_vfiprintf_r+0x3c>
 8008c38:	692b      	ldr	r3, [r5, #16]
 8008c3a:	b9eb      	cbnz	r3, 8008c78 <_vfiprintf_r+0x78>
 8008c3c:	4629      	mov	r1, r5
 8008c3e:	4630      	mov	r0, r6
 8008c40:	f7ff fa52 	bl	80080e8 <__swsetup_r>
 8008c44:	b1c0      	cbz	r0, 8008c78 <_vfiprintf_r+0x78>
 8008c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c48:	07dc      	lsls	r4, r3, #31
 8008c4a:	d50e      	bpl.n	8008c6a <_vfiprintf_r+0x6a>
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c50:	b01d      	add	sp, #116	; 0x74
 8008c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c56:	4b7b      	ldr	r3, [pc, #492]	; (8008e44 <_vfiprintf_r+0x244>)
 8008c58:	429d      	cmp	r5, r3
 8008c5a:	d101      	bne.n	8008c60 <_vfiprintf_r+0x60>
 8008c5c:	68b5      	ldr	r5, [r6, #8]
 8008c5e:	e7df      	b.n	8008c20 <_vfiprintf_r+0x20>
 8008c60:	4b79      	ldr	r3, [pc, #484]	; (8008e48 <_vfiprintf_r+0x248>)
 8008c62:	429d      	cmp	r5, r3
 8008c64:	bf08      	it	eq
 8008c66:	68f5      	ldreq	r5, [r6, #12]
 8008c68:	e7da      	b.n	8008c20 <_vfiprintf_r+0x20>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	0598      	lsls	r0, r3, #22
 8008c6e:	d4ed      	bmi.n	8008c4c <_vfiprintf_r+0x4c>
 8008c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c72:	f7ff fc70 	bl	8008556 <__retarget_lock_release_recursive>
 8008c76:	e7e9      	b.n	8008c4c <_vfiprintf_r+0x4c>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c86:	2330      	movs	r3, #48	; 0x30
 8008c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008e4c <_vfiprintf_r+0x24c>
 8008c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c90:	f04f 0901 	mov.w	r9, #1
 8008c94:	4623      	mov	r3, r4
 8008c96:	469a      	mov	sl, r3
 8008c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9c:	b10a      	cbz	r2, 8008ca2 <_vfiprintf_r+0xa2>
 8008c9e:	2a25      	cmp	r2, #37	; 0x25
 8008ca0:	d1f9      	bne.n	8008c96 <_vfiprintf_r+0x96>
 8008ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca6:	d00b      	beq.n	8008cc0 <_vfiprintf_r+0xc0>
 8008ca8:	465b      	mov	r3, fp
 8008caa:	4622      	mov	r2, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7ff ff93 	bl	8008bda <__sfputs_r>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	f000 80aa 	beq.w	8008e0e <_vfiprintf_r+0x20e>
 8008cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbc:	445a      	add	r2, fp
 8008cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8008cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f000 80a2 	beq.w	8008e0e <_vfiprintf_r+0x20e>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd4:	f10a 0a01 	add.w	sl, sl, #1
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	9307      	str	r3, [sp, #28]
 8008cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce2:	4654      	mov	r4, sl
 8008ce4:	2205      	movs	r2, #5
 8008ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cea:	4858      	ldr	r0, [pc, #352]	; (8008e4c <_vfiprintf_r+0x24c>)
 8008cec:	f7f7 fa88 	bl	8000200 <memchr>
 8008cf0:	9a04      	ldr	r2, [sp, #16]
 8008cf2:	b9d8      	cbnz	r0, 8008d2c <_vfiprintf_r+0x12c>
 8008cf4:	06d1      	lsls	r1, r2, #27
 8008cf6:	bf44      	itt	mi
 8008cf8:	2320      	movmi	r3, #32
 8008cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfe:	0713      	lsls	r3, r2, #28
 8008d00:	bf44      	itt	mi
 8008d02:	232b      	movmi	r3, #43	; 0x2b
 8008d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d08:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0e:	d015      	beq.n	8008d3c <_vfiprintf_r+0x13c>
 8008d10:	9a07      	ldr	r2, [sp, #28]
 8008d12:	4654      	mov	r4, sl
 8008d14:	2000      	movs	r0, #0
 8008d16:	f04f 0c0a 	mov.w	ip, #10
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d20:	3b30      	subs	r3, #48	; 0x30
 8008d22:	2b09      	cmp	r3, #9
 8008d24:	d94e      	bls.n	8008dc4 <_vfiprintf_r+0x1c4>
 8008d26:	b1b0      	cbz	r0, 8008d56 <_vfiprintf_r+0x156>
 8008d28:	9207      	str	r2, [sp, #28]
 8008d2a:	e014      	b.n	8008d56 <_vfiprintf_r+0x156>
 8008d2c:	eba0 0308 	sub.w	r3, r0, r8
 8008d30:	fa09 f303 	lsl.w	r3, r9, r3
 8008d34:	4313      	orrs	r3, r2
 8008d36:	9304      	str	r3, [sp, #16]
 8008d38:	46a2      	mov	sl, r4
 8008d3a:	e7d2      	b.n	8008ce2 <_vfiprintf_r+0xe2>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1d19      	adds	r1, r3, #4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9103      	str	r1, [sp, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfbb      	ittet	lt
 8008d48:	425b      	neglt	r3, r3
 8008d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d4e:	9307      	strge	r3, [sp, #28]
 8008d50:	9307      	strlt	r3, [sp, #28]
 8008d52:	bfb8      	it	lt
 8008d54:	9204      	strlt	r2, [sp, #16]
 8008d56:	7823      	ldrb	r3, [r4, #0]
 8008d58:	2b2e      	cmp	r3, #46	; 0x2e
 8008d5a:	d10c      	bne.n	8008d76 <_vfiprintf_r+0x176>
 8008d5c:	7863      	ldrb	r3, [r4, #1]
 8008d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d60:	d135      	bne.n	8008dce <_vfiprintf_r+0x1ce>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	1d1a      	adds	r2, r3, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	9203      	str	r2, [sp, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfb8      	it	lt
 8008d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d72:	3402      	adds	r4, #2
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e5c <_vfiprintf_r+0x25c>
 8008d7a:	7821      	ldrb	r1, [r4, #0]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	4650      	mov	r0, sl
 8008d80:	f7f7 fa3e 	bl	8000200 <memchr>
 8008d84:	b140      	cbz	r0, 8008d98 <_vfiprintf_r+0x198>
 8008d86:	2340      	movs	r3, #64	; 0x40
 8008d88:	eba0 000a 	sub.w	r0, r0, sl
 8008d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	4303      	orrs	r3, r0
 8008d94:	3401      	adds	r4, #1
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9c:	482c      	ldr	r0, [pc, #176]	; (8008e50 <_vfiprintf_r+0x250>)
 8008d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da2:	2206      	movs	r2, #6
 8008da4:	f7f7 fa2c 	bl	8000200 <memchr>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d03f      	beq.n	8008e2c <_vfiprintf_r+0x22c>
 8008dac:	4b29      	ldr	r3, [pc, #164]	; (8008e54 <_vfiprintf_r+0x254>)
 8008dae:	bb1b      	cbnz	r3, 8008df8 <_vfiprintf_r+0x1f8>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	3307      	adds	r3, #7
 8008db4:	f023 0307 	bic.w	r3, r3, #7
 8008db8:	3308      	adds	r3, #8
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbe:	443b      	add	r3, r7
 8008dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc2:	e767      	b.n	8008c94 <_vfiprintf_r+0x94>
 8008dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc8:	460c      	mov	r4, r1
 8008dca:	2001      	movs	r0, #1
 8008dcc:	e7a5      	b.n	8008d1a <_vfiprintf_r+0x11a>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	3401      	adds	r4, #1
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f04f 0c0a 	mov.w	ip, #10
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008de0:	3a30      	subs	r2, #48	; 0x30
 8008de2:	2a09      	cmp	r2, #9
 8008de4:	d903      	bls.n	8008dee <_vfiprintf_r+0x1ee>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0c5      	beq.n	8008d76 <_vfiprintf_r+0x176>
 8008dea:	9105      	str	r1, [sp, #20]
 8008dec:	e7c3      	b.n	8008d76 <_vfiprintf_r+0x176>
 8008dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df2:	4604      	mov	r4, r0
 8008df4:	2301      	movs	r3, #1
 8008df6:	e7f0      	b.n	8008dda <_vfiprintf_r+0x1da>
 8008df8:	ab03      	add	r3, sp, #12
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	4b16      	ldr	r3, [pc, #88]	; (8008e58 <_vfiprintf_r+0x258>)
 8008e00:	a904      	add	r1, sp, #16
 8008e02:	4630      	mov	r0, r6
 8008e04:	f3af 8000 	nop.w
 8008e08:	4607      	mov	r7, r0
 8008e0a:	1c78      	adds	r0, r7, #1
 8008e0c:	d1d6      	bne.n	8008dbc <_vfiprintf_r+0x1bc>
 8008e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e10:	07d9      	lsls	r1, r3, #31
 8008e12:	d405      	bmi.n	8008e20 <_vfiprintf_r+0x220>
 8008e14:	89ab      	ldrh	r3, [r5, #12]
 8008e16:	059a      	lsls	r2, r3, #22
 8008e18:	d402      	bmi.n	8008e20 <_vfiprintf_r+0x220>
 8008e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1c:	f7ff fb9b 	bl	8008556 <__retarget_lock_release_recursive>
 8008e20:	89ab      	ldrh	r3, [r5, #12]
 8008e22:	065b      	lsls	r3, r3, #25
 8008e24:	f53f af12 	bmi.w	8008c4c <_vfiprintf_r+0x4c>
 8008e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e2a:	e711      	b.n	8008c50 <_vfiprintf_r+0x50>
 8008e2c:	ab03      	add	r3, sp, #12
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <_vfiprintf_r+0x258>)
 8008e34:	a904      	add	r1, sp, #16
 8008e36:	4630      	mov	r0, r6
 8008e38:	f000 f880 	bl	8008f3c <_printf_i>
 8008e3c:	e7e4      	b.n	8008e08 <_vfiprintf_r+0x208>
 8008e3e:	bf00      	nop
 8008e40:	08009a58 	.word	0x08009a58
 8008e44:	08009a78 	.word	0x08009a78
 8008e48:	08009a38 	.word	0x08009a38
 8008e4c:	08009a9c 	.word	0x08009a9c
 8008e50:	08009aa2 	.word	0x08009aa2
 8008e54:	00000000 	.word	0x00000000
 8008e58:	08008bdb 	.word	0x08008bdb
 8008e5c:	08009a98 	.word	0x08009a98

08008e60 <_printf_common>:
 8008e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e64:	4616      	mov	r6, r2
 8008e66:	4699      	mov	r9, r3
 8008e68:	688a      	ldr	r2, [r1, #8]
 8008e6a:	690b      	ldr	r3, [r1, #16]
 8008e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bfb8      	it	lt
 8008e74:	4613      	movlt	r3, r2
 8008e76:	6033      	str	r3, [r6, #0]
 8008e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	b10a      	cbz	r2, 8008e86 <_printf_common+0x26>
 8008e82:	3301      	adds	r3, #1
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	0699      	lsls	r1, r3, #26
 8008e8a:	bf42      	ittt	mi
 8008e8c:	6833      	ldrmi	r3, [r6, #0]
 8008e8e:	3302      	addmi	r3, #2
 8008e90:	6033      	strmi	r3, [r6, #0]
 8008e92:	6825      	ldr	r5, [r4, #0]
 8008e94:	f015 0506 	ands.w	r5, r5, #6
 8008e98:	d106      	bne.n	8008ea8 <_printf_common+0x48>
 8008e9a:	f104 0a19 	add.w	sl, r4, #25
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	6832      	ldr	r2, [r6, #0]
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dc26      	bgt.n	8008ef6 <_printf_common+0x96>
 8008ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008eac:	1e13      	subs	r3, r2, #0
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	bf18      	it	ne
 8008eb2:	2301      	movne	r3, #1
 8008eb4:	0692      	lsls	r2, r2, #26
 8008eb6:	d42b      	bmi.n	8008f10 <_printf_common+0xb0>
 8008eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	47c0      	blx	r8
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d01e      	beq.n	8008f04 <_printf_common+0xa4>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	68e5      	ldr	r5, [r4, #12]
 8008eca:	6832      	ldr	r2, [r6, #0]
 8008ecc:	f003 0306 	and.w	r3, r3, #6
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	bf08      	it	eq
 8008ed4:	1aad      	subeq	r5, r5, r2
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	6922      	ldr	r2, [r4, #16]
 8008eda:	bf0c      	ite	eq
 8008edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee0:	2500      	movne	r5, #0
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	bfc4      	itt	gt
 8008ee6:	1a9b      	subgt	r3, r3, r2
 8008ee8:	18ed      	addgt	r5, r5, r3
 8008eea:	2600      	movs	r6, #0
 8008eec:	341a      	adds	r4, #26
 8008eee:	42b5      	cmp	r5, r6
 8008ef0:	d11a      	bne.n	8008f28 <_printf_common+0xc8>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e008      	b.n	8008f08 <_printf_common+0xa8>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4652      	mov	r2, sl
 8008efa:	4649      	mov	r1, r9
 8008efc:	4638      	mov	r0, r7
 8008efe:	47c0      	blx	r8
 8008f00:	3001      	adds	r0, #1
 8008f02:	d103      	bne.n	8008f0c <_printf_common+0xac>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	e7c6      	b.n	8008e9e <_printf_common+0x3e>
 8008f10:	18e1      	adds	r1, r4, r3
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	2030      	movs	r0, #48	; 0x30
 8008f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f1a:	4422      	add	r2, r4
 8008f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f24:	3302      	adds	r3, #2
 8008f26:	e7c7      	b.n	8008eb8 <_printf_common+0x58>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	4638      	mov	r0, r7
 8008f30:	47c0      	blx	r8
 8008f32:	3001      	adds	r0, #1
 8008f34:	d0e6      	beq.n	8008f04 <_printf_common+0xa4>
 8008f36:	3601      	adds	r6, #1
 8008f38:	e7d9      	b.n	8008eee <_printf_common+0x8e>
	...

08008f3c <_printf_i>:
 8008f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	7e0f      	ldrb	r7, [r1, #24]
 8008f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f44:	2f78      	cmp	r7, #120	; 0x78
 8008f46:	4691      	mov	r9, r2
 8008f48:	4680      	mov	r8, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	469a      	mov	sl, r3
 8008f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f52:	d807      	bhi.n	8008f64 <_printf_i+0x28>
 8008f54:	2f62      	cmp	r7, #98	; 0x62
 8008f56:	d80a      	bhi.n	8008f6e <_printf_i+0x32>
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	f000 80d8 	beq.w	800910e <_printf_i+0x1d2>
 8008f5e:	2f58      	cmp	r7, #88	; 0x58
 8008f60:	f000 80a3 	beq.w	80090aa <_printf_i+0x16e>
 8008f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f6c:	e03a      	b.n	8008fe4 <_printf_i+0xa8>
 8008f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f72:	2b15      	cmp	r3, #21
 8008f74:	d8f6      	bhi.n	8008f64 <_printf_i+0x28>
 8008f76:	a101      	add	r1, pc, #4	; (adr r1, 8008f7c <_printf_i+0x40>)
 8008f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f7c:	08008fd5 	.word	0x08008fd5
 8008f80:	08008fe9 	.word	0x08008fe9
 8008f84:	08008f65 	.word	0x08008f65
 8008f88:	08008f65 	.word	0x08008f65
 8008f8c:	08008f65 	.word	0x08008f65
 8008f90:	08008f65 	.word	0x08008f65
 8008f94:	08008fe9 	.word	0x08008fe9
 8008f98:	08008f65 	.word	0x08008f65
 8008f9c:	08008f65 	.word	0x08008f65
 8008fa0:	08008f65 	.word	0x08008f65
 8008fa4:	08008f65 	.word	0x08008f65
 8008fa8:	080090f5 	.word	0x080090f5
 8008fac:	08009019 	.word	0x08009019
 8008fb0:	080090d7 	.word	0x080090d7
 8008fb4:	08008f65 	.word	0x08008f65
 8008fb8:	08008f65 	.word	0x08008f65
 8008fbc:	08009117 	.word	0x08009117
 8008fc0:	08008f65 	.word	0x08008f65
 8008fc4:	08009019 	.word	0x08009019
 8008fc8:	08008f65 	.word	0x08008f65
 8008fcc:	08008f65 	.word	0x08008f65
 8008fd0:	080090df 	.word	0x080090df
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	602a      	str	r2, [r5, #0]
 8008fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e0a3      	b.n	8009130 <_printf_i+0x1f4>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	6829      	ldr	r1, [r5, #0]
 8008fec:	0606      	lsls	r6, r0, #24
 8008fee:	f101 0304 	add.w	r3, r1, #4
 8008ff2:	d50a      	bpl.n	800900a <_printf_i+0xce>
 8008ff4:	680e      	ldr	r6, [r1, #0]
 8008ff6:	602b      	str	r3, [r5, #0]
 8008ff8:	2e00      	cmp	r6, #0
 8008ffa:	da03      	bge.n	8009004 <_printf_i+0xc8>
 8008ffc:	232d      	movs	r3, #45	; 0x2d
 8008ffe:	4276      	negs	r6, r6
 8009000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009004:	485e      	ldr	r0, [pc, #376]	; (8009180 <_printf_i+0x244>)
 8009006:	230a      	movs	r3, #10
 8009008:	e019      	b.n	800903e <_printf_i+0x102>
 800900a:	680e      	ldr	r6, [r1, #0]
 800900c:	602b      	str	r3, [r5, #0]
 800900e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009012:	bf18      	it	ne
 8009014:	b236      	sxthne	r6, r6
 8009016:	e7ef      	b.n	8008ff8 <_printf_i+0xbc>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	6820      	ldr	r0, [r4, #0]
 800901c:	1d19      	adds	r1, r3, #4
 800901e:	6029      	str	r1, [r5, #0]
 8009020:	0601      	lsls	r1, r0, #24
 8009022:	d501      	bpl.n	8009028 <_printf_i+0xec>
 8009024:	681e      	ldr	r6, [r3, #0]
 8009026:	e002      	b.n	800902e <_printf_i+0xf2>
 8009028:	0646      	lsls	r6, r0, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0xe8>
 800902c:	881e      	ldrh	r6, [r3, #0]
 800902e:	4854      	ldr	r0, [pc, #336]	; (8009180 <_printf_i+0x244>)
 8009030:	2f6f      	cmp	r7, #111	; 0x6f
 8009032:	bf0c      	ite	eq
 8009034:	2308      	moveq	r3, #8
 8009036:	230a      	movne	r3, #10
 8009038:	2100      	movs	r1, #0
 800903a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800903e:	6865      	ldr	r5, [r4, #4]
 8009040:	60a5      	str	r5, [r4, #8]
 8009042:	2d00      	cmp	r5, #0
 8009044:	bfa2      	ittt	ge
 8009046:	6821      	ldrge	r1, [r4, #0]
 8009048:	f021 0104 	bicge.w	r1, r1, #4
 800904c:	6021      	strge	r1, [r4, #0]
 800904e:	b90e      	cbnz	r6, 8009054 <_printf_i+0x118>
 8009050:	2d00      	cmp	r5, #0
 8009052:	d04d      	beq.n	80090f0 <_printf_i+0x1b4>
 8009054:	4615      	mov	r5, r2
 8009056:	fbb6 f1f3 	udiv	r1, r6, r3
 800905a:	fb03 6711 	mls	r7, r3, r1, r6
 800905e:	5dc7      	ldrb	r7, [r0, r7]
 8009060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009064:	4637      	mov	r7, r6
 8009066:	42bb      	cmp	r3, r7
 8009068:	460e      	mov	r6, r1
 800906a:	d9f4      	bls.n	8009056 <_printf_i+0x11a>
 800906c:	2b08      	cmp	r3, #8
 800906e:	d10b      	bne.n	8009088 <_printf_i+0x14c>
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	07de      	lsls	r6, r3, #31
 8009074:	d508      	bpl.n	8009088 <_printf_i+0x14c>
 8009076:	6923      	ldr	r3, [r4, #16]
 8009078:	6861      	ldr	r1, [r4, #4]
 800907a:	4299      	cmp	r1, r3
 800907c:	bfde      	ittt	le
 800907e:	2330      	movle	r3, #48	; 0x30
 8009080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009088:	1b52      	subs	r2, r2, r5
 800908a:	6122      	str	r2, [r4, #16]
 800908c:	f8cd a000 	str.w	sl, [sp]
 8009090:	464b      	mov	r3, r9
 8009092:	aa03      	add	r2, sp, #12
 8009094:	4621      	mov	r1, r4
 8009096:	4640      	mov	r0, r8
 8009098:	f7ff fee2 	bl	8008e60 <_printf_common>
 800909c:	3001      	adds	r0, #1
 800909e:	d14c      	bne.n	800913a <_printf_i+0x1fe>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	b004      	add	sp, #16
 80090a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090aa:	4835      	ldr	r0, [pc, #212]	; (8009180 <_printf_i+0x244>)
 80090ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090b0:	6829      	ldr	r1, [r5, #0]
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80090b8:	6029      	str	r1, [r5, #0]
 80090ba:	061d      	lsls	r5, r3, #24
 80090bc:	d514      	bpl.n	80090e8 <_printf_i+0x1ac>
 80090be:	07df      	lsls	r7, r3, #31
 80090c0:	bf44      	itt	mi
 80090c2:	f043 0320 	orrmi.w	r3, r3, #32
 80090c6:	6023      	strmi	r3, [r4, #0]
 80090c8:	b91e      	cbnz	r6, 80090d2 <_printf_i+0x196>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	f023 0320 	bic.w	r3, r3, #32
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	2310      	movs	r3, #16
 80090d4:	e7b0      	b.n	8009038 <_printf_i+0xfc>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	f043 0320 	orr.w	r3, r3, #32
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	2378      	movs	r3, #120	; 0x78
 80090e0:	4828      	ldr	r0, [pc, #160]	; (8009184 <_printf_i+0x248>)
 80090e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e6:	e7e3      	b.n	80090b0 <_printf_i+0x174>
 80090e8:	0659      	lsls	r1, r3, #25
 80090ea:	bf48      	it	mi
 80090ec:	b2b6      	uxthmi	r6, r6
 80090ee:	e7e6      	b.n	80090be <_printf_i+0x182>
 80090f0:	4615      	mov	r5, r2
 80090f2:	e7bb      	b.n	800906c <_printf_i+0x130>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	6826      	ldr	r6, [r4, #0]
 80090f8:	6961      	ldr	r1, [r4, #20]
 80090fa:	1d18      	adds	r0, r3, #4
 80090fc:	6028      	str	r0, [r5, #0]
 80090fe:	0635      	lsls	r5, r6, #24
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	d501      	bpl.n	8009108 <_printf_i+0x1cc>
 8009104:	6019      	str	r1, [r3, #0]
 8009106:	e002      	b.n	800910e <_printf_i+0x1d2>
 8009108:	0670      	lsls	r0, r6, #25
 800910a:	d5fb      	bpl.n	8009104 <_printf_i+0x1c8>
 800910c:	8019      	strh	r1, [r3, #0]
 800910e:	2300      	movs	r3, #0
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	4615      	mov	r5, r2
 8009114:	e7ba      	b.n	800908c <_printf_i+0x150>
 8009116:	682b      	ldr	r3, [r5, #0]
 8009118:	1d1a      	adds	r2, r3, #4
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	681d      	ldr	r5, [r3, #0]
 800911e:	6862      	ldr	r2, [r4, #4]
 8009120:	2100      	movs	r1, #0
 8009122:	4628      	mov	r0, r5
 8009124:	f7f7 f86c 	bl	8000200 <memchr>
 8009128:	b108      	cbz	r0, 800912e <_printf_i+0x1f2>
 800912a:	1b40      	subs	r0, r0, r5
 800912c:	6060      	str	r0, [r4, #4]
 800912e:	6863      	ldr	r3, [r4, #4]
 8009130:	6123      	str	r3, [r4, #16]
 8009132:	2300      	movs	r3, #0
 8009134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009138:	e7a8      	b.n	800908c <_printf_i+0x150>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	462a      	mov	r2, r5
 800913e:	4649      	mov	r1, r9
 8009140:	4640      	mov	r0, r8
 8009142:	47d0      	blx	sl
 8009144:	3001      	adds	r0, #1
 8009146:	d0ab      	beq.n	80090a0 <_printf_i+0x164>
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	079b      	lsls	r3, r3, #30
 800914c:	d413      	bmi.n	8009176 <_printf_i+0x23a>
 800914e:	68e0      	ldr	r0, [r4, #12]
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	4298      	cmp	r0, r3
 8009154:	bfb8      	it	lt
 8009156:	4618      	movlt	r0, r3
 8009158:	e7a4      	b.n	80090a4 <_printf_i+0x168>
 800915a:	2301      	movs	r3, #1
 800915c:	4632      	mov	r2, r6
 800915e:	4649      	mov	r1, r9
 8009160:	4640      	mov	r0, r8
 8009162:	47d0      	blx	sl
 8009164:	3001      	adds	r0, #1
 8009166:	d09b      	beq.n	80090a0 <_printf_i+0x164>
 8009168:	3501      	adds	r5, #1
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	9903      	ldr	r1, [sp, #12]
 800916e:	1a5b      	subs	r3, r3, r1
 8009170:	42ab      	cmp	r3, r5
 8009172:	dcf2      	bgt.n	800915a <_printf_i+0x21e>
 8009174:	e7eb      	b.n	800914e <_printf_i+0x212>
 8009176:	2500      	movs	r5, #0
 8009178:	f104 0619 	add.w	r6, r4, #25
 800917c:	e7f5      	b.n	800916a <_printf_i+0x22e>
 800917e:	bf00      	nop
 8009180:	08009aa9 	.word	0x08009aa9
 8009184:	08009aba 	.word	0x08009aba

08009188 <_scanf_chars>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	4615      	mov	r5, r2
 800918e:	688a      	ldr	r2, [r1, #8]
 8009190:	4680      	mov	r8, r0
 8009192:	460c      	mov	r4, r1
 8009194:	b932      	cbnz	r2, 80091a4 <_scanf_chars+0x1c>
 8009196:	698a      	ldr	r2, [r1, #24]
 8009198:	2a00      	cmp	r2, #0
 800919a:	bf0c      	ite	eq
 800919c:	2201      	moveq	r2, #1
 800919e:	f04f 32ff 	movne.w	r2, #4294967295
 80091a2:	608a      	str	r2, [r1, #8]
 80091a4:	6822      	ldr	r2, [r4, #0]
 80091a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009238 <_scanf_chars+0xb0>
 80091aa:	06d1      	lsls	r1, r2, #27
 80091ac:	bf5f      	itttt	pl
 80091ae:	681a      	ldrpl	r2, [r3, #0]
 80091b0:	1d11      	addpl	r1, r2, #4
 80091b2:	6019      	strpl	r1, [r3, #0]
 80091b4:	6816      	ldrpl	r6, [r2, #0]
 80091b6:	2700      	movs	r7, #0
 80091b8:	69a0      	ldr	r0, [r4, #24]
 80091ba:	b188      	cbz	r0, 80091e0 <_scanf_chars+0x58>
 80091bc:	2801      	cmp	r0, #1
 80091be:	d107      	bne.n	80091d0 <_scanf_chars+0x48>
 80091c0:	682a      	ldr	r2, [r5, #0]
 80091c2:	7811      	ldrb	r1, [r2, #0]
 80091c4:	6962      	ldr	r2, [r4, #20]
 80091c6:	5c52      	ldrb	r2, [r2, r1]
 80091c8:	b952      	cbnz	r2, 80091e0 <_scanf_chars+0x58>
 80091ca:	2f00      	cmp	r7, #0
 80091cc:	d031      	beq.n	8009232 <_scanf_chars+0xaa>
 80091ce:	e022      	b.n	8009216 <_scanf_chars+0x8e>
 80091d0:	2802      	cmp	r0, #2
 80091d2:	d120      	bne.n	8009216 <_scanf_chars+0x8e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80091dc:	071b      	lsls	r3, r3, #28
 80091de:	d41a      	bmi.n	8009216 <_scanf_chars+0x8e>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	06da      	lsls	r2, r3, #27
 80091e4:	bf5e      	ittt	pl
 80091e6:	682b      	ldrpl	r3, [r5, #0]
 80091e8:	781b      	ldrbpl	r3, [r3, #0]
 80091ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 80091ee:	682a      	ldr	r2, [r5, #0]
 80091f0:	686b      	ldr	r3, [r5, #4]
 80091f2:	3201      	adds	r2, #1
 80091f4:	602a      	str	r2, [r5, #0]
 80091f6:	68a2      	ldr	r2, [r4, #8]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	3a01      	subs	r2, #1
 80091fc:	606b      	str	r3, [r5, #4]
 80091fe:	3701      	adds	r7, #1
 8009200:	60a2      	str	r2, [r4, #8]
 8009202:	b142      	cbz	r2, 8009216 <_scanf_chars+0x8e>
 8009204:	2b00      	cmp	r3, #0
 8009206:	dcd7      	bgt.n	80091b8 <_scanf_chars+0x30>
 8009208:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800920c:	4629      	mov	r1, r5
 800920e:	4640      	mov	r0, r8
 8009210:	4798      	blx	r3
 8009212:	2800      	cmp	r0, #0
 8009214:	d0d0      	beq.n	80091b8 <_scanf_chars+0x30>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	f013 0310 	ands.w	r3, r3, #16
 800921c:	d105      	bne.n	800922a <_scanf_chars+0xa2>
 800921e:	68e2      	ldr	r2, [r4, #12]
 8009220:	3201      	adds	r2, #1
 8009222:	60e2      	str	r2, [r4, #12]
 8009224:	69a2      	ldr	r2, [r4, #24]
 8009226:	b102      	cbz	r2, 800922a <_scanf_chars+0xa2>
 8009228:	7033      	strb	r3, [r6, #0]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	443b      	add	r3, r7
 800922e:	6123      	str	r3, [r4, #16]
 8009230:	2000      	movs	r0, #0
 8009232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009236:	bf00      	nop
 8009238:	08009935 	.word	0x08009935

0800923c <_scanf_i>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	4698      	mov	r8, r3
 8009242:	4b76      	ldr	r3, [pc, #472]	; (800941c <_scanf_i+0x1e0>)
 8009244:	460c      	mov	r4, r1
 8009246:	4682      	mov	sl, r0
 8009248:	4616      	mov	r6, r2
 800924a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800924e:	b087      	sub	sp, #28
 8009250:	ab03      	add	r3, sp, #12
 8009252:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009256:	4b72      	ldr	r3, [pc, #456]	; (8009420 <_scanf_i+0x1e4>)
 8009258:	69a1      	ldr	r1, [r4, #24]
 800925a:	4a72      	ldr	r2, [pc, #456]	; (8009424 <_scanf_i+0x1e8>)
 800925c:	2903      	cmp	r1, #3
 800925e:	bf18      	it	ne
 8009260:	461a      	movne	r2, r3
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	9201      	str	r2, [sp, #4]
 8009266:	1e5a      	subs	r2, r3, #1
 8009268:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800926c:	bf88      	it	hi
 800926e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009272:	4627      	mov	r7, r4
 8009274:	bf82      	ittt	hi
 8009276:	eb03 0905 	addhi.w	r9, r3, r5
 800927a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800927e:	60a3      	strhi	r3, [r4, #8]
 8009280:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009284:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009288:	bf98      	it	ls
 800928a:	f04f 0900 	movls.w	r9, #0
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	463d      	mov	r5, r7
 8009292:	f04f 0b00 	mov.w	fp, #0
 8009296:	6831      	ldr	r1, [r6, #0]
 8009298:	ab03      	add	r3, sp, #12
 800929a:	7809      	ldrb	r1, [r1, #0]
 800929c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f7f6 ffad 	bl	8000200 <memchr>
 80092a6:	b328      	cbz	r0, 80092f4 <_scanf_i+0xb8>
 80092a8:	f1bb 0f01 	cmp.w	fp, #1
 80092ac:	d159      	bne.n	8009362 <_scanf_i+0x126>
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	b92a      	cbnz	r2, 80092be <_scanf_i+0x82>
 80092b2:	6822      	ldr	r2, [r4, #0]
 80092b4:	2308      	movs	r3, #8
 80092b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ba:	6063      	str	r3, [r4, #4]
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	6822      	ldr	r2, [r4, #0]
 80092c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	68a2      	ldr	r2, [r4, #8]
 80092c8:	1e51      	subs	r1, r2, #1
 80092ca:	60a1      	str	r1, [r4, #8]
 80092cc:	b192      	cbz	r2, 80092f4 <_scanf_i+0xb8>
 80092ce:	6832      	ldr	r2, [r6, #0]
 80092d0:	1c51      	adds	r1, r2, #1
 80092d2:	6031      	str	r1, [r6, #0]
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	f805 2b01 	strb.w	r2, [r5], #1
 80092da:	6872      	ldr	r2, [r6, #4]
 80092dc:	3a01      	subs	r2, #1
 80092de:	2a00      	cmp	r2, #0
 80092e0:	6072      	str	r2, [r6, #4]
 80092e2:	dc07      	bgt.n	80092f4 <_scanf_i+0xb8>
 80092e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80092e8:	4631      	mov	r1, r6
 80092ea:	4650      	mov	r0, sl
 80092ec:	4790      	blx	r2
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f040 8085 	bne.w	80093fe <_scanf_i+0x1c2>
 80092f4:	f10b 0b01 	add.w	fp, fp, #1
 80092f8:	f1bb 0f03 	cmp.w	fp, #3
 80092fc:	d1cb      	bne.n	8009296 <_scanf_i+0x5a>
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	b90b      	cbnz	r3, 8009306 <_scanf_i+0xca>
 8009302:	230a      	movs	r3, #10
 8009304:	6063      	str	r3, [r4, #4]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	4947      	ldr	r1, [pc, #284]	; (8009428 <_scanf_i+0x1ec>)
 800930a:	6960      	ldr	r0, [r4, #20]
 800930c:	1ac9      	subs	r1, r1, r3
 800930e:	f000 f8af 	bl	8009470 <__sccl>
 8009312:	f04f 0b00 	mov.w	fp, #0
 8009316:	68a3      	ldr	r3, [r4, #8]
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d03d      	beq.n	800939a <_scanf_i+0x15e>
 800931e:	6831      	ldr	r1, [r6, #0]
 8009320:	6960      	ldr	r0, [r4, #20]
 8009322:	f891 c000 	ldrb.w	ip, [r1]
 8009326:	f810 000c 	ldrb.w	r0, [r0, ip]
 800932a:	2800      	cmp	r0, #0
 800932c:	d035      	beq.n	800939a <_scanf_i+0x15e>
 800932e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009332:	d124      	bne.n	800937e <_scanf_i+0x142>
 8009334:	0510      	lsls	r0, r2, #20
 8009336:	d522      	bpl.n	800937e <_scanf_i+0x142>
 8009338:	f10b 0b01 	add.w	fp, fp, #1
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	d003      	beq.n	800934a <_scanf_i+0x10e>
 8009342:	3301      	adds	r3, #1
 8009344:	f109 39ff 	add.w	r9, r9, #4294967295
 8009348:	60a3      	str	r3, [r4, #8]
 800934a:	6873      	ldr	r3, [r6, #4]
 800934c:	3b01      	subs	r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	6073      	str	r3, [r6, #4]
 8009352:	dd1b      	ble.n	800938c <_scanf_i+0x150>
 8009354:	6833      	ldr	r3, [r6, #0]
 8009356:	3301      	adds	r3, #1
 8009358:	6033      	str	r3, [r6, #0]
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	3b01      	subs	r3, #1
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	e7d9      	b.n	8009316 <_scanf_i+0xda>
 8009362:	f1bb 0f02 	cmp.w	fp, #2
 8009366:	d1ae      	bne.n	80092c6 <_scanf_i+0x8a>
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800936e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009372:	d1bf      	bne.n	80092f4 <_scanf_i+0xb8>
 8009374:	2310      	movs	r3, #16
 8009376:	6063      	str	r3, [r4, #4]
 8009378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800937c:	e7a2      	b.n	80092c4 <_scanf_i+0x88>
 800937e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009382:	6022      	str	r2, [r4, #0]
 8009384:	780b      	ldrb	r3, [r1, #0]
 8009386:	f805 3b01 	strb.w	r3, [r5], #1
 800938a:	e7de      	b.n	800934a <_scanf_i+0x10e>
 800938c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009390:	4631      	mov	r1, r6
 8009392:	4650      	mov	r0, sl
 8009394:	4798      	blx	r3
 8009396:	2800      	cmp	r0, #0
 8009398:	d0df      	beq.n	800935a <_scanf_i+0x11e>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	05db      	lsls	r3, r3, #23
 800939e:	d50d      	bpl.n	80093bc <_scanf_i+0x180>
 80093a0:	42bd      	cmp	r5, r7
 80093a2:	d909      	bls.n	80093b8 <_scanf_i+0x17c>
 80093a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80093a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093ac:	4632      	mov	r2, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4798      	blx	r3
 80093b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80093b6:	464d      	mov	r5, r9
 80093b8:	42bd      	cmp	r5, r7
 80093ba:	d02d      	beq.n	8009418 <_scanf_i+0x1dc>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	f012 0210 	ands.w	r2, r2, #16
 80093c2:	d113      	bne.n	80093ec <_scanf_i+0x1b0>
 80093c4:	702a      	strb	r2, [r5, #0]
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	9e01      	ldr	r6, [sp, #4]
 80093ca:	4639      	mov	r1, r7
 80093cc:	4650      	mov	r0, sl
 80093ce:	47b0      	blx	r6
 80093d0:	6821      	ldr	r1, [r4, #0]
 80093d2:	f8d8 3000 	ldr.w	r3, [r8]
 80093d6:	f011 0f20 	tst.w	r1, #32
 80093da:	d013      	beq.n	8009404 <_scanf_i+0x1c8>
 80093dc:	1d1a      	adds	r2, r3, #4
 80093de:	f8c8 2000 	str.w	r2, [r8]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6018      	str	r0, [r3, #0]
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60e3      	str	r3, [r4, #12]
 80093ec:	1bed      	subs	r5, r5, r7
 80093ee:	44ab      	add	fp, r5
 80093f0:	6925      	ldr	r5, [r4, #16]
 80093f2:	445d      	add	r5, fp
 80093f4:	6125      	str	r5, [r4, #16]
 80093f6:	2000      	movs	r0, #0
 80093f8:	b007      	add	sp, #28
 80093fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fe:	f04f 0b00 	mov.w	fp, #0
 8009402:	e7ca      	b.n	800939a <_scanf_i+0x15e>
 8009404:	1d1a      	adds	r2, r3, #4
 8009406:	f8c8 2000 	str.w	r2, [r8]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f011 0f01 	tst.w	r1, #1
 8009410:	bf14      	ite	ne
 8009412:	8018      	strhne	r0, [r3, #0]
 8009414:	6018      	streq	r0, [r3, #0]
 8009416:	e7e6      	b.n	80093e6 <_scanf_i+0x1aa>
 8009418:	2001      	movs	r0, #1
 800941a:	e7ed      	b.n	80093f8 <_scanf_i+0x1bc>
 800941c:	08009804 	.word	0x08009804
 8009420:	080095c5 	.word	0x080095c5
 8009424:	08008009 	.word	0x08008009
 8009428:	08009ae4 	.word	0x08009ae4

0800942c <_read_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	; (800944c <_read_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f7 fdc8 	bl	8000fd0 <_read>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_read_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_read_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20002778 	.word	0x20002778

08009450 <_sbrk_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d06      	ldr	r5, [pc, #24]	; (800946c <_sbrk_r+0x1c>)
 8009454:	2300      	movs	r3, #0
 8009456:	4604      	mov	r4, r0
 8009458:	4608      	mov	r0, r1
 800945a:	602b      	str	r3, [r5, #0]
 800945c:	f7f7 fe0a 	bl	8001074 <_sbrk>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_sbrk_r+0x1a>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_sbrk_r+0x1a>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20002778 	.word	0x20002778

08009470 <__sccl>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	780b      	ldrb	r3, [r1, #0]
 8009474:	4604      	mov	r4, r0
 8009476:	2b5e      	cmp	r3, #94	; 0x5e
 8009478:	bf0b      	itete	eq
 800947a:	784b      	ldrbeq	r3, [r1, #1]
 800947c:	1c48      	addne	r0, r1, #1
 800947e:	1c88      	addeq	r0, r1, #2
 8009480:	2200      	movne	r2, #0
 8009482:	bf08      	it	eq
 8009484:	2201      	moveq	r2, #1
 8009486:	1e61      	subs	r1, r4, #1
 8009488:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800948c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009490:	42a9      	cmp	r1, r5
 8009492:	d1fb      	bne.n	800948c <__sccl+0x1c>
 8009494:	b90b      	cbnz	r3, 800949a <__sccl+0x2a>
 8009496:	3801      	subs	r0, #1
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	f082 0201 	eor.w	r2, r2, #1
 800949e:	54e2      	strb	r2, [r4, r3]
 80094a0:	4605      	mov	r5, r0
 80094a2:	4628      	mov	r0, r5
 80094a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80094a8:	292d      	cmp	r1, #45	; 0x2d
 80094aa:	d006      	beq.n	80094ba <__sccl+0x4a>
 80094ac:	295d      	cmp	r1, #93	; 0x5d
 80094ae:	d0f3      	beq.n	8009498 <__sccl+0x28>
 80094b0:	b909      	cbnz	r1, 80094b6 <__sccl+0x46>
 80094b2:	4628      	mov	r0, r5
 80094b4:	e7f0      	b.n	8009498 <__sccl+0x28>
 80094b6:	460b      	mov	r3, r1
 80094b8:	e7f1      	b.n	800949e <__sccl+0x2e>
 80094ba:	786e      	ldrb	r6, [r5, #1]
 80094bc:	2e5d      	cmp	r6, #93	; 0x5d
 80094be:	d0fa      	beq.n	80094b6 <__sccl+0x46>
 80094c0:	42b3      	cmp	r3, r6
 80094c2:	dcf8      	bgt.n	80094b6 <__sccl+0x46>
 80094c4:	3502      	adds	r5, #2
 80094c6:	4619      	mov	r1, r3
 80094c8:	3101      	adds	r1, #1
 80094ca:	428e      	cmp	r6, r1
 80094cc:	5462      	strb	r2, [r4, r1]
 80094ce:	dcfb      	bgt.n	80094c8 <__sccl+0x58>
 80094d0:	1af1      	subs	r1, r6, r3
 80094d2:	3901      	subs	r1, #1
 80094d4:	1c58      	adds	r0, r3, #1
 80094d6:	42b3      	cmp	r3, r6
 80094d8:	bfa8      	it	ge
 80094da:	2100      	movge	r1, #0
 80094dc:	1843      	adds	r3, r0, r1
 80094de:	e7e0      	b.n	80094a2 <__sccl+0x32>

080094e0 <_strtoul_l.constprop.0>:
 80094e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094e4:	4f36      	ldr	r7, [pc, #216]	; (80095c0 <_strtoul_l.constprop.0+0xe0>)
 80094e6:	4686      	mov	lr, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	4628      	mov	r0, r5
 80094ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094f0:	5de6      	ldrb	r6, [r4, r7]
 80094f2:	f016 0608 	ands.w	r6, r6, #8
 80094f6:	d1f8      	bne.n	80094ea <_strtoul_l.constprop.0+0xa>
 80094f8:	2c2d      	cmp	r4, #45	; 0x2d
 80094fa:	d12f      	bne.n	800955c <_strtoul_l.constprop.0+0x7c>
 80094fc:	782c      	ldrb	r4, [r5, #0]
 80094fe:	2601      	movs	r6, #1
 8009500:	1c85      	adds	r5, r0, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d057      	beq.n	80095b6 <_strtoul_l.constprop.0+0xd6>
 8009506:	2b10      	cmp	r3, #16
 8009508:	d109      	bne.n	800951e <_strtoul_l.constprop.0+0x3e>
 800950a:	2c30      	cmp	r4, #48	; 0x30
 800950c:	d107      	bne.n	800951e <_strtoul_l.constprop.0+0x3e>
 800950e:	7828      	ldrb	r0, [r5, #0]
 8009510:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009514:	2858      	cmp	r0, #88	; 0x58
 8009516:	d149      	bne.n	80095ac <_strtoul_l.constprop.0+0xcc>
 8009518:	786c      	ldrb	r4, [r5, #1]
 800951a:	2310      	movs	r3, #16
 800951c:	3502      	adds	r5, #2
 800951e:	f04f 38ff 	mov.w	r8, #4294967295
 8009522:	2700      	movs	r7, #0
 8009524:	fbb8 f8f3 	udiv	r8, r8, r3
 8009528:	fb03 f908 	mul.w	r9, r3, r8
 800952c:	ea6f 0909 	mvn.w	r9, r9
 8009530:	4638      	mov	r0, r7
 8009532:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009536:	f1bc 0f09 	cmp.w	ip, #9
 800953a:	d814      	bhi.n	8009566 <_strtoul_l.constprop.0+0x86>
 800953c:	4664      	mov	r4, ip
 800953e:	42a3      	cmp	r3, r4
 8009540:	dd22      	ble.n	8009588 <_strtoul_l.constprop.0+0xa8>
 8009542:	2f00      	cmp	r7, #0
 8009544:	db1d      	blt.n	8009582 <_strtoul_l.constprop.0+0xa2>
 8009546:	4580      	cmp	r8, r0
 8009548:	d31b      	bcc.n	8009582 <_strtoul_l.constprop.0+0xa2>
 800954a:	d101      	bne.n	8009550 <_strtoul_l.constprop.0+0x70>
 800954c:	45a1      	cmp	r9, r4
 800954e:	db18      	blt.n	8009582 <_strtoul_l.constprop.0+0xa2>
 8009550:	fb00 4003 	mla	r0, r0, r3, r4
 8009554:	2701      	movs	r7, #1
 8009556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800955a:	e7ea      	b.n	8009532 <_strtoul_l.constprop.0+0x52>
 800955c:	2c2b      	cmp	r4, #43	; 0x2b
 800955e:	bf04      	itt	eq
 8009560:	782c      	ldrbeq	r4, [r5, #0]
 8009562:	1c85      	addeq	r5, r0, #2
 8009564:	e7cd      	b.n	8009502 <_strtoul_l.constprop.0+0x22>
 8009566:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800956a:	f1bc 0f19 	cmp.w	ip, #25
 800956e:	d801      	bhi.n	8009574 <_strtoul_l.constprop.0+0x94>
 8009570:	3c37      	subs	r4, #55	; 0x37
 8009572:	e7e4      	b.n	800953e <_strtoul_l.constprop.0+0x5e>
 8009574:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009578:	f1bc 0f19 	cmp.w	ip, #25
 800957c:	d804      	bhi.n	8009588 <_strtoul_l.constprop.0+0xa8>
 800957e:	3c57      	subs	r4, #87	; 0x57
 8009580:	e7dd      	b.n	800953e <_strtoul_l.constprop.0+0x5e>
 8009582:	f04f 37ff 	mov.w	r7, #4294967295
 8009586:	e7e6      	b.n	8009556 <_strtoul_l.constprop.0+0x76>
 8009588:	2f00      	cmp	r7, #0
 800958a:	da07      	bge.n	800959c <_strtoul_l.constprop.0+0xbc>
 800958c:	2322      	movs	r3, #34	; 0x22
 800958e:	f8ce 3000 	str.w	r3, [lr]
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	b932      	cbnz	r2, 80095a6 <_strtoul_l.constprop.0+0xc6>
 8009598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800959c:	b106      	cbz	r6, 80095a0 <_strtoul_l.constprop.0+0xc0>
 800959e:	4240      	negs	r0, r0
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d0f9      	beq.n	8009598 <_strtoul_l.constprop.0+0xb8>
 80095a4:	b107      	cbz	r7, 80095a8 <_strtoul_l.constprop.0+0xc8>
 80095a6:	1e69      	subs	r1, r5, #1
 80095a8:	6011      	str	r1, [r2, #0]
 80095aa:	e7f5      	b.n	8009598 <_strtoul_l.constprop.0+0xb8>
 80095ac:	2430      	movs	r4, #48	; 0x30
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1b5      	bne.n	800951e <_strtoul_l.constprop.0+0x3e>
 80095b2:	2308      	movs	r3, #8
 80095b4:	e7b3      	b.n	800951e <_strtoul_l.constprop.0+0x3e>
 80095b6:	2c30      	cmp	r4, #48	; 0x30
 80095b8:	d0a9      	beq.n	800950e <_strtoul_l.constprop.0+0x2e>
 80095ba:	230a      	movs	r3, #10
 80095bc:	e7af      	b.n	800951e <_strtoul_l.constprop.0+0x3e>
 80095be:	bf00      	nop
 80095c0:	08009935 	.word	0x08009935

080095c4 <_strtoul_r>:
 80095c4:	f7ff bf8c 	b.w	80094e0 <_strtoul_l.constprop.0>

080095c8 <__submore>:
 80095c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80095d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095d4:	4299      	cmp	r1, r3
 80095d6:	d11d      	bne.n	8009614 <__submore+0x4c>
 80095d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095dc:	f7ff f8a0 	bl	8008720 <_malloc_r>
 80095e0:	b918      	cbnz	r0, 80095ea <__submore+0x22>
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80095f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80095f4:	6360      	str	r0, [r4, #52]	; 0x34
 80095f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80095fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80095fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009602:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009606:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800960a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800960e:	6020      	str	r0, [r4, #0]
 8009610:	2000      	movs	r0, #0
 8009612:	e7e8      	b.n	80095e6 <__submore+0x1e>
 8009614:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009616:	0077      	lsls	r7, r6, #1
 8009618:	463a      	mov	r2, r7
 800961a:	f000 f83d 	bl	8009698 <_realloc_r>
 800961e:	4605      	mov	r5, r0
 8009620:	2800      	cmp	r0, #0
 8009622:	d0de      	beq.n	80095e2 <__submore+0x1a>
 8009624:	eb00 0806 	add.w	r8, r0, r6
 8009628:	4601      	mov	r1, r0
 800962a:	4632      	mov	r2, r6
 800962c:	4640      	mov	r0, r8
 800962e:	f7fe fb53 	bl	8007cd8 <memcpy>
 8009632:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009636:	f8c4 8000 	str.w	r8, [r4]
 800963a:	e7e9      	b.n	8009610 <__submore+0x48>

0800963c <_fstat_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4d07      	ldr	r5, [pc, #28]	; (800965c <_fstat_r+0x20>)
 8009640:	2300      	movs	r3, #0
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	4611      	mov	r1, r2
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	f7f7 fcea 	bl	8001022 <_fstat>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d102      	bne.n	8009658 <_fstat_r+0x1c>
 8009652:	682b      	ldr	r3, [r5, #0]
 8009654:	b103      	cbz	r3, 8009658 <_fstat_r+0x1c>
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	bd38      	pop	{r3, r4, r5, pc}
 800965a:	bf00      	nop
 800965c:	20002778 	.word	0x20002778

08009660 <_isatty_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d06      	ldr	r5, [pc, #24]	; (800967c <_isatty_r+0x1c>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	f7f7 fce9 	bl	8001042 <_isatty>
 8009670:	1c43      	adds	r3, r0, #1
 8009672:	d102      	bne.n	800967a <_isatty_r+0x1a>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	b103      	cbz	r3, 800967a <_isatty_r+0x1a>
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	bd38      	pop	{r3, r4, r5, pc}
 800967c:	20002778 	.word	0x20002778

08009680 <__malloc_lock>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__malloc_lock+0x8>)
 8009682:	f7fe bf67 	b.w	8008554 <__retarget_lock_acquire_recursive>
 8009686:	bf00      	nop
 8009688:	2000276c 	.word	0x2000276c

0800968c <__malloc_unlock>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__malloc_unlock+0x8>)
 800968e:	f7fe bf62 	b.w	8008556 <__retarget_lock_release_recursive>
 8009692:	bf00      	nop
 8009694:	2000276c 	.word	0x2000276c

08009698 <_realloc_r>:
 8009698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969c:	4680      	mov	r8, r0
 800969e:	4614      	mov	r4, r2
 80096a0:	460e      	mov	r6, r1
 80096a2:	b921      	cbnz	r1, 80096ae <_realloc_r+0x16>
 80096a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	4611      	mov	r1, r2
 80096aa:	f7ff b839 	b.w	8008720 <_malloc_r>
 80096ae:	b92a      	cbnz	r2, 80096bc <_realloc_r+0x24>
 80096b0:	f7fe ffca 	bl	8008648 <_free_r>
 80096b4:	4625      	mov	r5, r4
 80096b6:	4628      	mov	r0, r5
 80096b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096bc:	f000 f81b 	bl	80096f6 <_malloc_usable_size_r>
 80096c0:	4284      	cmp	r4, r0
 80096c2:	4607      	mov	r7, r0
 80096c4:	d802      	bhi.n	80096cc <_realloc_r+0x34>
 80096c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ca:	d812      	bhi.n	80096f2 <_realloc_r+0x5a>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4640      	mov	r0, r8
 80096d0:	f7ff f826 	bl	8008720 <_malloc_r>
 80096d4:	4605      	mov	r5, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d0ed      	beq.n	80096b6 <_realloc_r+0x1e>
 80096da:	42bc      	cmp	r4, r7
 80096dc:	4622      	mov	r2, r4
 80096de:	4631      	mov	r1, r6
 80096e0:	bf28      	it	cs
 80096e2:	463a      	movcs	r2, r7
 80096e4:	f7fe faf8 	bl	8007cd8 <memcpy>
 80096e8:	4631      	mov	r1, r6
 80096ea:	4640      	mov	r0, r8
 80096ec:	f7fe ffac 	bl	8008648 <_free_r>
 80096f0:	e7e1      	b.n	80096b6 <_realloc_r+0x1e>
 80096f2:	4635      	mov	r5, r6
 80096f4:	e7df      	b.n	80096b6 <_realloc_r+0x1e>

080096f6 <_malloc_usable_size_r>:
 80096f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fa:	1f18      	subs	r0, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfbc      	itt	lt
 8009700:	580b      	ldrlt	r3, [r1, r0]
 8009702:	18c0      	addlt	r0, r0, r3
 8009704:	4770      	bx	lr
	...

08009708 <_init>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	bf00      	nop
 800970c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970e:	bc08      	pop	{r3}
 8009710:	469e      	mov	lr, r3
 8009712:	4770      	bx	lr

08009714 <_fini>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	bf00      	nop
 8009718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800971a:	bc08      	pop	{r3}
 800971c:	469e      	mov	lr, r3
 800971e:	4770      	bx	lr
