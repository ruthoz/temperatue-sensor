
DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c0  080072c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c8  080072c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080072d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000070  08007340  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08007340  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014583  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e9  00000000  00000000  00034623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00036c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028185  00000000  00000000  00039038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b42  00000000  00000000  000611bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c26  00000000  00000000  00076cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000570c  00000000  00000000  0016d978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800707c 	.word	0x0800707c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800707c 	.word	0x0800707c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int fd, char* ptr, int len)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f005 f836 	bl	80055fc <HAL_UART_Transmit>
	return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000174 	.word	0x20000174

080005a0 <MyDMAInterruptHandler>:

void MyDMAInterruptHandler()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim16);
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <MyDMAInterruptHandler+0x14>)
 80005a6:	f004 fdab 	bl	8005100 <HAL_TIM_Base_Stop>
	flag=1;
 80005aa:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <MyDMAInterruptHandler+0x18>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000128 	.word	0x20000128
 80005b8:	20000240 	.word	0x20000240

080005bc <MyDMAchanel7InterruptHandler>:

void MyDMAchanel7InterruptHandler()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim16);
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <MyDMAchanel7InterruptHandler+0x14>)
 80005c2:	f004 fd9d 	bl	8005100 <HAL_TIM_Base_Stop>
	flag=1;
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <MyDMAchanel7InterruptHandler+0x18>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000128 	.word	0x20000128
 80005d4:	20000240 	.word	0x20000240

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fcb3 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f8cb 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa01 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 f9af 	bl	800094c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f97d 	bl	80008ec <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80005f2:	f000 f955 	bl	80008a0 <MX_TIM16_Init>
  MX_I2C1_Init();
 80005f6:	f000 f913 	bl	8000820 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  printf("\r\n");
 80005fa:	4853      	ldr	r0, [pc, #332]	; (8000748 <main+0x170>)
 80005fc:	f005 fdc0 	bl	8006180 <puts>
  printf("--------------access timer--------------------\r\n");
 8000600:	4852      	ldr	r0, [pc, #328]	; (800074c <main+0x174>)
 8000602:	f005 fdbd 	bl	8006180 <puts>
  printf("\r\n");
 8000606:	4850      	ldr	r0, [pc, #320]	; (8000748 <main+0x170>)
 8000608:	f005 fdba 	bl	8006180 <puts>
  int time;

  ////////////////flash to ram/////////////////////////////
  __HAL_TIM_SET_COUNTER(&htim16 , 0);
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <main+0x178>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim16);
 8000614:	484e      	ldr	r0, [pc, #312]	; (8000750 <main+0x178>)
 8000616:	f004 fd0b 	bl	8005030 <HAL_TIM_Base_Start>
  memcpy(ramData, flashData ,sizeof(flashData));
 800061a:	4a4e      	ldr	r2, [pc, #312]	; (8000754 <main+0x17c>)
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <main+0x180>)
 800061e:	4610      	mov	r0, r2
 8000620:	4619      	mov	r1, r3
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	461a      	mov	r2, r3
 8000626:	f005 fd0f 	bl	8006048 <memcpy>
  HAL_TIM_Base_Stop(&htim16);
 800062a:	4849      	ldr	r0, [pc, #292]	; (8000750 <main+0x178>)
 800062c:	f004 fd68 	bl	8005100 <HAL_TIM_Base_Stop>
  time=__HAL_TIM_GET_COUNTER(&htim16);
 8000630:	4b47      	ldr	r3, [pc, #284]	; (8000750 <main+0x178>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000636:	60bb      	str	r3, [r7, #8]
  printf("flash to ram =%d \r\n", time);
 8000638:	68b9      	ldr	r1, [r7, #8]
 800063a:	4848      	ldr	r0, [pc, #288]	; (800075c <main+0x184>)
 800063c:	f005 fd1a 	bl	8006074 <iprintf>
  printf("----------------------------------------------\r\n");
 8000640:	4847      	ldr	r0, [pc, #284]	; (8000760 <main+0x188>)
 8000642:	f005 fd9d 	bl	8006180 <puts>


  ////////////////DMA/////////////////////////////
  int counter = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  memset(ramData,0,sizeof(ramData));
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	2100      	movs	r1, #0
 800064e:	4841      	ldr	r0, [pc, #260]	; (8000754 <main+0x17c>)
 8000650:	f005 fd08 	bl	8006064 <memset>
  __HAL_TIM_SET_COUNTER(&htim16 , 0);
 8000654:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <main+0x178>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim16);
 800065c:	483c      	ldr	r0, [pc, #240]	; (8000750 <main+0x178>)
 800065e:	f004 fce7 	bl	8005030 <HAL_TIM_Base_Start>
  HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,(uint32_t)flashData,(uint32_t)ramData,sizeof(flashData)/4);
 8000662:	493d      	ldr	r1, [pc, #244]	; (8000758 <main+0x180>)
 8000664:	4a3b      	ldr	r2, [pc, #236]	; (8000754 <main+0x17c>)
 8000666:	2319      	movs	r3, #25
 8000668:	483e      	ldr	r0, [pc, #248]	; (8000764 <main+0x18c>)
 800066a:	f000 feb3 	bl	80013d4 <HAL_DMA_Start_IT>
  while(flag == 0){
 800066e:	e002      	b.n	8000676 <main+0x9e>
	  counter++;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3301      	adds	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
  while(flag == 0){
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <main+0x190>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f8      	beq.n	8000670 <main+0x98>
  }
  time=__HAL_TIM_GET_COUNTER(&htim16);
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <main+0x178>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000684:	60bb      	str	r3, [r7, #8]
  printf("DMA flash to ram time=%d  counter= %d \r\n" ,time, counter);
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	68b9      	ldr	r1, [r7, #8]
 800068a:	4838      	ldr	r0, [pc, #224]	; (800076c <main+0x194>)
 800068c:	f005 fcf2 	bl	8006074 <iprintf>
  printf("----------------------------------------------\r\n");
 8000690:	4833      	ldr	r0, [pc, #204]	; (8000760 <main+0x188>)
 8000692:	f005 fd75 	bl	8006180 <puts>


  ////////////////R2C to ram/////////////////////////
   memset(ramData,0,sizeof(ramData));
 8000696:	2264      	movs	r2, #100	; 0x64
 8000698:	2100      	movs	r1, #0
 800069a:	482e      	ldr	r0, [pc, #184]	; (8000754 <main+0x17c>)
 800069c:	f005 fce2 	bl	8006064 <memset>
   __HAL_TIM_SET_COUNTER(&htim16 , 0);
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <main+0x178>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
   HAL_TIM_Base_Start(&htim16);
 80006a8:	4829      	ldr	r0, [pc, #164]	; (8000750 <main+0x178>)
 80006aa:	f004 fcc1 	bl	8005030 <HAL_TIM_Base_Start>
   int status = HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0, 1, ramData, 64, 0xff);
 80006ae:	23ff      	movs	r3, #255	; 0xff
 80006b0:	9302      	str	r3, [sp, #8]
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	4b27      	ldr	r3, [pc, #156]	; (8000754 <main+0x17c>)
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2301      	movs	r3, #1
 80006bc:	2200      	movs	r2, #0
 80006be:	21d0      	movs	r1, #208	; 0xd0
 80006c0:	482b      	ldr	r0, [pc, #172]	; (8000770 <main+0x198>)
 80006c2:	f001 fa67 	bl	8001b94 <HAL_I2C_Mem_Read>
 80006c6:	4603      	mov	r3, r0
 80006c8:	607b      	str	r3, [r7, #4]
   HAL_TIM_Base_Stop(&htim16);
 80006ca:	4821      	ldr	r0, [pc, #132]	; (8000750 <main+0x178>)
 80006cc:	f004 fd18 	bl	8005100 <HAL_TIM_Base_Stop>
   time=__HAL_TIM_GET_COUNTER(&htim16);
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <main+0x178>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	60bb      	str	r3, [r7, #8]
   printf("i2c to ram =%d status=%d\r\n", time, status);
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	68b9      	ldr	r1, [r7, #8]
 80006dc:	4825      	ldr	r0, [pc, #148]	; (8000774 <main+0x19c>)
 80006de:	f005 fcc9 	bl	8006074 <iprintf>
   printf("----------------------------------------------\r\n");
 80006e2:	481f      	ldr	r0, [pc, #124]	; (8000760 <main+0x188>)
 80006e4:	f005 fd4c 	bl	8006180 <puts>


  //////////////////DMA////////////////////////////
  counter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  flag = 0;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <main+0x190>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  memset(ramData,0,sizeof(ramData));
 80006f2:	2264      	movs	r2, #100	; 0x64
 80006f4:	2100      	movs	r1, #0
 80006f6:	4817      	ldr	r0, [pc, #92]	; (8000754 <main+0x17c>)
 80006f8:	f005 fcb4 	bl	8006064 <memset>
  __HAL_TIM_SET_COUNTER(&htim16 , 0);
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <main+0x178>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim16);
 8000704:	4812      	ldr	r0, [pc, #72]	; (8000750 <main+0x178>)
 8000706:	f004 fc93 	bl	8005030 <HAL_TIM_Base_Start>
  HAL_I2C_Mem_Read_DMA(&hi2c1, 0xD0, 0, 1, ramData, 64);
 800070a:	2340      	movs	r3, #64	; 0x40
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <main+0x17c>)
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	2200      	movs	r2, #0
 8000716:	21d0      	movs	r1, #208	; 0xd0
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x198>)
 800071a:	f001 fb55 	bl	8001dc8 <HAL_I2C_Mem_Read_DMA>

  while(flag == 0){
 800071e:	e002      	b.n	8000726 <main+0x14e>
	  counter++;
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
  while(flag == 0){
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <main+0x190>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f8      	beq.n	8000720 <main+0x148>
  }
  time=__HAL_TIM_GET_COUNTER(&htim16);
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <main+0x178>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000734:	60bb      	str	r3, [r7, #8]
  printf("DMA i2c to ram time=%d counter= %d \r\n" ,time, counter);
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	68b9      	ldr	r1, [r7, #8]
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <main+0x1a0>)
 800073c:	f005 fc9a 	bl	8006074 <iprintf>
  printf("----------------------------------------------\r\n");
 8000740:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0x188>)
 8000742:	f005 fd1d 	bl	8006180 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x16e>
 8000748:	08007094 	.word	0x08007094
 800074c:	08007098 	.word	0x08007098
 8000750:	20000128 	.word	0x20000128
 8000754:	20000244 	.word	0x20000244
 8000758:	0800717c 	.word	0x0800717c
 800075c:	080070c8 	.word	0x080070c8
 8000760:	080070dc 	.word	0x080070dc
 8000764:	200001f8 	.word	0x200001f8
 8000768:	20000240 	.word	0x20000240
 800076c:	0800710c 	.word	0x0800710c
 8000770:	2000008c 	.word	0x2000008c
 8000774:	08007138 	.word	0x08007138
 8000778:	08007154 	.word	0x08007154

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b096      	sub	sp, #88	; 0x58
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2244      	movs	r2, #68	; 0x44
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fc6a 	bl	8006064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	463b      	mov	r3, r7
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800079e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a2:	f003 f8db 	bl	800395c <HAL_PWREx_ControlVoltageScaling>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ac:	f000 f984 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ba:	2310      	movs	r3, #16
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007ca:	230a      	movs	r3, #10
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 f912 	bl	8003a08 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007ea:	f000 f965 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2303      	movs	r3, #3
 80007f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	2104      	movs	r1, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f003 fcda 	bl	80041c0 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000812:	f000 f951 	bl	8000ab8 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3758      	adds	r7, #88	; 0x58
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_I2C1_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_I2C1_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_I2C1_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <MX_I2C1_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_I2C1_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <MX_I2C1_Init+0x74>)
 800085c:	f001 f90a 	bl	8001a74 <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 f927 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_I2C1_Init+0x74>)
 800086e:	f002 ffcf 	bl	8003810 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 f91e 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_I2C1_Init+0x74>)
 8000880:	f003 f811 	bl	80038a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f915 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000008c 	.word	0x2000008c
 8000898:	40005400 	.word	0x40005400
 800089c:	10909cec 	.word	0x10909cec

080008a0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <MX_TIM16_Init+0x48>)
 80008a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008ac:	224f      	movs	r2, #79	; 0x4f
 80008ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_TIM16_Init+0x44>)
 80008d2:	f004 fb55 	bl	8004f80 <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80008dc:	f000 f8ec 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000128 	.word	0x20000128
 80008e8:	40014400 	.word	0x40014400

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f2:	4a15      	ldr	r2, [pc, #84]	; (8000948 <MX_USART2_UART_Init+0x5c>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART2_UART_Init+0x58>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x58>)
 8000930:	f004 fe16 	bl	8005560 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093a:	f000 f8bd 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000174 	.word	0x20000174
 8000948:	40004400 	.word	0x40004400

0800094c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_DMA_Init+0x94>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <MX_DMA_Init+0x94>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6493      	str	r3, [r2, #72]	; 0x48
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_DMA_Init+0x94>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_DMA_Init+0x98>)
 800096c:	4a1e      	ldr	r2, [pc, #120]	; (80009e8 <MX_DMA_Init+0x9c>)
 800096e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_DMA_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_DMA_Init+0x98>)
 8000978:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_DMA_Init+0x98>)
 8000980:	2240      	movs	r2, #64	; 0x40
 8000982:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_DMA_Init+0x98>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_DMA_Init+0x98>)
 800098c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000990:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_DMA_Init+0x98>)
 8000994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000998:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_DMA_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_DMA_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 80009a6:	480f      	ldr	r0, [pc, #60]	; (80009e4 <MX_DMA_Init+0x98>)
 80009a8:	f000 fc5c 	bl	8001264 <HAL_DMA_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_DMA_Init+0x6a>
  {
    Error_Handler( );
 80009b2:	f000 f881 	bl	8000ab8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	200b      	movs	r0, #11
 80009bc:	f000 fc1b 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c0:	200b      	movs	r0, #11
 80009c2:	f000 fc34 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2011      	movs	r0, #17
 80009cc:	f000 fc13 	bl	80011f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009d0:	2011      	movs	r0, #17
 80009d2:	f000 fc2c 	bl	800122e <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	200001f8 	.word	0x200001f8
 80009e8:	40020008 	.word	0x40020008

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a2a      	ldr	r2, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b28      	ldr	r3, [pc, #160]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a18      	ldr	r2, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 ffeb 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <MX_GPIO_Init+0xc8>)
 8000a86:	f000 fe33 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8a:	2320      	movs	r3, #32
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 fe24 	bl	80016f0 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000800 	.word	0x48000800

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6593      	str	r3, [r2, #88]	; 0x58
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0ac      	sub	sp, #176	; 0xb0
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2288      	movs	r2, #136	; 0x88
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 fa99 	bl	8006064 <memset>
  if(hi2c->Instance==I2C1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <HAL_I2C_MspInit+0x104>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d164      	bne.n	8000c06 <HAL_I2C_MspInit+0xfa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fd5d 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b54:	f7ff ffb0 	bl	8000ab8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	4a2d      	ldr	r2, [pc, #180]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b78:	2312      	movs	r3, #18
 8000b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <HAL_I2C_MspInit+0x10c>)
 8000b98:	f000 fdaa 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba8:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <HAL_I2C_MspInit+0x108>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bb6:	4a1a      	ldr	r2, [pc, #104]	; (8000c20 <HAL_I2C_MspInit+0x114>)
 8000bb8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bea:	480c      	ldr	r0, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bec:	f000 fb3a 	bl	8001264 <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8000bf6:	f7ff ff5f 	bl	8000ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000bfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_I2C_MspInit+0x110>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	37b0      	adds	r7, #176	; 0xb0
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40005400 	.word	0x40005400
 8000c14:	40021000 	.word	0x40021000
 8000c18:	48000400 	.word	0x48000400
 8000c1c:	200000e0 	.word	0x200000e0
 8000c20:	40020080 	.word	0x40020080

08000c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_TIM_Base_MspInit+0x44>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d113      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6613      	str	r3, [r2, #96]	; 0x60
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2019      	movs	r0, #25
 8000c54:	f000 facf 	bl	80011f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f000 fae8 	bl	800122e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40014400 	.word	0x40014400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ac      	sub	sp, #176	; 0xb0
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2288      	movs	r2, #136	; 0x88
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 f9e7 	bl	8006064 <memset>
  if(huart->Instance==USART2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <HAL_UART_MspInit+0xb0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d13b      	bne.n	8000d18 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fcab 	bl	8004608 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb8:	f7ff fefe 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0xb4>)
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cec:	230c      	movs	r3, #12
 8000cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d04:	2307      	movs	r3, #7
 8000d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f000 fcec 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	37b0      	adds	r7, #176	; 0xb0
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40021000 	.word	0x40021000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f944 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <DMA1_Channel1_IRQHandler+0x14>)
 8000d82:	f000 fbc8 	bl	8001516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  MyDMAInterruptHandler();
 8000d86:	f7ff fc0b 	bl	80005a0 <MyDMAInterruptHandler>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200001f8 	.word	0x200001f8

08000d94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <DMA1_Channel7_IRQHandler+0x14>)
 8000d9a:	f000 fbbc 	bl	8001516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  MyDMAchanel7InterruptHandler();
 8000d9e:	f7ff fc0d 	bl	80005bc <MyDMAchanel7InterruptHandler>
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000e0 	.word	0x200000e0

08000dac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000db2:	f004 f9cc 	bl	800514e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000128 	.word	0x20000128

08000dc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e00a      	b.n	8000de8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dd2:	f3af 8000 	nop.w
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	60ba      	str	r2, [r7, #8]
 8000dde:	b2ca      	uxtb	r2, r1
 8000de0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf0      	blt.n	8000dd2 <_read+0x12>
	}

return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e22:	605a      	str	r2, [r3, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_isatty>:

int _isatty(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f005 f8ae 	bl	8005ff4 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20018000 	.word	0x20018000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	200002a8 	.word	0x200002a8
 8000ecc:	200002c0 	.word	0x200002c0

08000ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef8:	f7ff ffea 	bl	8000ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efe:	490d      	ldr	r1, [pc, #52]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f04:	e002      	b.n	8000f0c <LoopCopyDataInit>

08000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0a:	3304      	adds	r3, #4

08000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f10:	d3f9      	bcc.n	8000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f14:	4c0a      	ldr	r4, [pc, #40]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f18:	e001      	b.n	8000f1e <LoopFillZerobss>

08000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f1c:	3204      	adds	r2, #4

08000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f20:	d3fb      	bcc.n	8000f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f22:	f005 f86d 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff fb57 	bl	80005d8 <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f38:	080072d0 	.word	0x080072d0
  ldr r2, =_sbss
 8000f3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f40:	200002c0 	.word	0x200002c0

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_Init+0x3c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_Init+0x3c>)
 8000f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5e:	2003      	movs	r0, #3
 8000f60:	f000 f93e 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f80f 	bl	8000f88 <HAL_InitTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	e001      	b.n	8000f7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f76:	f7ff fda5 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40022000 	.word	0x40022000

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d023      	beq.n	8000fe4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_InitTick+0x70>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f949 	bl	800124a <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10f      	bne.n	8000fde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 f913 	bl	80011f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x74>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e007      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e004      	b.n	8000fe8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e001      	b.n	8000fe8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	200002ac 	.word	0x200002ac

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200002ac 	.word	0x200002ac

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff29 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff3e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff31 	bl	80010a4 <__NVIC_EnableIRQ>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffa2 	bl	800119c <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e098      	b.n	80013a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b4d      	ldr	r3, [pc, #308]	; (80013b4 <HAL_DMA_Init+0x150>)
 800127e:	429a      	cmp	r2, r3
 8001280:	d80f      	bhi.n	80012a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_DMA_Init+0x154>)
 800128a:	4413      	add	r3, r2
 800128c:	4a4b      	ldr	r2, [pc, #300]	; (80013bc <HAL_DMA_Init+0x158>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_DMA_Init+0x15c>)
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
 80012a0:	e00e      	b.n	80012c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <HAL_DMA_Init+0x160>)
 80012aa:	4413      	add	r3, r2
 80012ac:	4a43      	ldr	r2, [pc, #268]	; (80013bc <HAL_DMA_Init+0x158>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a42      	ldr	r2, [pc, #264]	; (80013c8 <HAL_DMA_Init+0x164>)
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800131a:	d039      	beq.n	8001390 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a27      	ldr	r2, [pc, #156]	; (80013c0 <HAL_DMA_Init+0x15c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d11a      	bne.n	800135c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_DMA_Init+0x168>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 031c 	and.w	r3, r3, #28
 8001332:	210f      	movs	r1, #15
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4924      	ldr	r1, [pc, #144]	; (80013cc <HAL_DMA_Init+0x168>)
 800133c:	4013      	ands	r3, r2
 800133e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <HAL_DMA_Init+0x168>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6859      	ldr	r1, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f003 031c 	and.w	r3, r3, #28
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	491d      	ldr	r1, [pc, #116]	; (80013cc <HAL_DMA_Init+0x168>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
 800135a:	e019      	b.n	8001390 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_DMA_Init+0x16c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f003 031c 	and.w	r3, r3, #28
 8001368:	210f      	movs	r1, #15
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <HAL_DMA_Init+0x16c>)
 8001372:	4013      	ands	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_DMA_Init+0x16c>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f003 031c 	and.w	r3, r3, #28
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4911      	ldr	r1, [pc, #68]	; (80013d0 <HAL_DMA_Init+0x16c>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40020407 	.word	0x40020407
 80013b8:	bffdfff8 	.word	0xbffdfff8
 80013bc:	cccccccd 	.word	0xcccccccd
 80013c0:	40020000 	.word	0x40020000
 80013c4:	bffdfbf8 	.word	0xbffdfbf8
 80013c8:	40020400 	.word	0x40020400
 80013cc:	400200a8 	.word	0x400200a8
 80013d0:	400204a8 	.word	0x400204a8

080013d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_DMA_Start_IT+0x20>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e04b      	b.n	800148c <HAL_DMA_Start_IT+0xb8>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d13a      	bne.n	800147e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f92f 	bl	8001690 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 020e 	orr.w	r2, r2, #14
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e00f      	b.n	800146c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0204 	bic.w	r2, r2, #4
 800145a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 020a 	orr.w	r2, r2, #10
 800146a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e005      	b.n	800148a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001486:	2302      	movs	r3, #2
 8001488:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800148a:	7dfb      	ldrb	r3, [r7, #23]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d005      	beq.n	80014b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2204      	movs	r2, #4
 80014b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e029      	b.n	800150c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020e 	bic.w	r2, r2, #14
 80014c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f003 021c 	and.w	r2, r3, #28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	4798      	blx	r3
    }
  }
  return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b084      	sub	sp, #16
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f003 031c 	and.w	r3, r3, #28
 8001536:	2204      	movs	r2, #4
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d026      	beq.n	8001590 <HAL_DMA_IRQHandler+0x7a>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d021      	beq.n	8001590 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0204 	bic.w	r2, r2, #4
 8001568:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f003 021c 	and.w	r2, r3, #28
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2104      	movs	r1, #4
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	2b00      	cmp	r3, #0
 8001584:	d071      	beq.n	800166a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800158e:	e06c      	b.n	800166a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 031c 	and.w	r3, r3, #28
 8001598:	2202      	movs	r2, #2
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d02e      	beq.n	8001602 <HAL_DMA_IRQHandler+0xec>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d029      	beq.n	8001602 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 020a 	bic.w	r2, r2, #10
 80015ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f003 021c 	and.w	r2, r3, #28
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	2102      	movs	r1, #2
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d038      	beq.n	800166a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001600:	e033      	b.n	800166a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f003 031c 	and.w	r3, r3, #28
 800160a:	2208      	movs	r2, #8
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d02a      	beq.n	800166c <HAL_DMA_IRQHandler+0x156>
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d025      	beq.n	800166c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 020e 	bic.w	r2, r2, #14
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 021c 	and.w	r2, r3, #28
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2101      	movs	r1, #1
 800163e:	fa01 f202 	lsl.w	r2, r1, r2
 8001642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800166a:	bf00      	nop
 800166c:	bf00      	nop
}
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001682:	b2db      	uxtb	r3, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f003 021c 	and.w	r2, r3, #28
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b10      	cmp	r3, #16
 80016c0:	d108      	bne.n	80016d4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016d2:	e007      	b.n	80016e4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	60da      	str	r2, [r3, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e17f      	b.n	8001a00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8171 	beq.w	80019fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d005      	beq.n	8001730 <HAL_GPIO_Init+0x40>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d130      	bne.n	8001792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 0201 	and.w	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d118      	bne.n	80017d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80ac 	beq.w	80019fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6613      	str	r3, [r2, #96]	; 0x60
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_GPIO_Init+0x334>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x242>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x338>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x23e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x33c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x23a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x340>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x236>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x344>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x232>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x348>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x22e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x34c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x22a>
 8001916:	2306      	movs	r3, #6
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800191a:	2307      	movs	r3, #7
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001932:	2300      	movs	r3, #0
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001944:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x334>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_GPIO_Init+0x350>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <HAL_GPIO_Init+0x350>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_GPIO_Init+0x350>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae78 	bne.w	8001700 <HAL_GPIO_Init+0x10>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	48001800 	.word	0x48001800
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e081      	b.n	8001b8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff f836 	bl	8000b0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ac4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	e006      	b.n	8001afc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001afa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d104      	bne.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69d9      	ldr	r1, [r3, #28]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2220      	movs	r2, #32
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	817b      	strh	r3, [r7, #10]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	813b      	strh	r3, [r7, #8]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	f040 80fd 	bne.w	8001db6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_I2C_Mem_Read+0x34>
 8001bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0f1      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Mem_Read+0x4e>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e0ea      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bea:	f7ff fa1d 	bl	8001028 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2319      	movs	r3, #25
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f001 fb64 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d5      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2222      	movs	r2, #34	; 0x22
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c34:	88f8      	ldrh	r0, [r7, #6]
 8001c36:	893a      	ldrh	r2, [r7, #8]
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4603      	mov	r3, r0
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 fe07 	bl	8002858 <I2C_RequestMemoryRead>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0ad      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d90e      	bls.n	8001c84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	22ff      	movs	r2, #255	; 0xff
 8001c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	8979      	ldrh	r1, [r7, #10]
 8001c74:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <HAL_I2C_Mem_Read+0x22c>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f001 fccd 	bl	800361c <I2C_TransferConfig>
 8001c82:	e00f      	b.n	8001ca4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	8979      	ldrh	r1, [r7, #10]
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_I2C_Mem_Read+0x22c>)
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f001 fcbc 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	2104      	movs	r1, #4
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f001 fb0b 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07c      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d034      	beq.n	8001d64 <HAL_I2C_Mem_Read+0x1d0>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d130      	bne.n	8001d64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f001 fadc 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e04d      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d90e      	bls.n	8001d44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	22ff      	movs	r2, #255	; 0xff
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	8979      	ldrh	r1, [r7, #10]
 8001d34:	2300      	movs	r3, #0
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f001 fc6d 	bl	800361c <I2C_TransferConfig>
 8001d42:	e00f      	b.n	8001d64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	8979      	ldrh	r1, [r7, #10]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f001 fc5c 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d19a      	bne.n	8001ca4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f001 fb29 	bl	80033ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e01a      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2220      	movs	r2, #32
 8001d88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_I2C_Mem_Read+0x230>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	80002400 	.word	0x80002400
 8001dc4:	fe00e800 	.word	0xfe00e800

08001dc8 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b20      	cmp	r3, #32
 8001dec:	f040 80c2 	bne.w	8001f74 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_I2C_Mem_Read_DMA+0x34>
 8001df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b6      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e16:	d101      	bne.n	8001e1c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e0ac      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_I2C_Mem_Read_DMA+0x62>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e0a5      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2222      	movs	r2, #34	; 0x22
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2240      	movs	r2, #64	; 0x40
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a3a      	ldr	r2, [r7, #32]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a4a      	ldr	r2, [pc, #296]	; (8001f80 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2bff      	cmp	r3, #255	; 0xff
 8001e6e:	d903      	bls.n	8001e78 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	22ff      	movs	r2, #255	; 0xff
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e76:	e004      	b.n	8001e82 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d109      	bne.n	8001e9c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e88:	893b      	ldrh	r3, [r7, #8]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	651a      	str	r2, [r3, #80]	; 0x50
 8001e9a:	e00b      	b.n	8001eb4 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001eaa:	893b      	ldrh	r3, [r7, #8]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3324      	adds	r3, #36	; 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8001eee:	f7ff fa71 	bl	80013d4 <HAL_DMA_Start_IT>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001ef6:	7dfb      	ldrb	r3, [r7, #23]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d127      	bne.n	8001f4c <HAL_I2C_Mem_Read_DMA+0x184>
 8001efc:	e013      	b.n	8001f26 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e027      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	8979      	ldrh	r1, [r7, #10]
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f001 fb72 	bl	800361c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f40:	2101      	movs	r1, #1
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f001 fb9c 	bl	8003680 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e014      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	ffff0000 	.word	0xffff0000
 8001f84:	08002451 	.word	0x08002451
 8001f88:	080031cb 	.word	0x080031cb
 8001f8c:	08003261 	.word	0x08003261
 8001f90:	80002000 	.word	0x80002000

08001f94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <I2C_Slave_ISR_IT+0x24>
 8002084:	2302      	movs	r3, #2
 8002086:	e0ec      	b.n	8002262 <I2C_Slave_ISR_IT+0x1fe>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d009      	beq.n	80020b0 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fe12 	bl	8002cd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d04d      	beq.n	8002158 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d047      	beq.n	8002158 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d128      	bne.n	8002124 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b28      	cmp	r3, #40	; 0x28
 80020dc:	d108      	bne.n	80020f0 <I2C_Slave_ISR_IT+0x8c>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020e4:	d104      	bne.n	80020f0 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f000 fefd 	bl	8002ee8 <I2C_ITListenCplt>
 80020ee:	e032      	b.n	8002156 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b29      	cmp	r3, #41	; 0x29
 80020fa:	d10e      	bne.n	800211a <I2C_Slave_ISR_IT+0xb6>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002102:	d00a      	beq.n	800211a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2210      	movs	r2, #16
 800210a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f001 f838 	bl	8003182 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fcb5 	bl	8002a82 <I2C_ITSlaveSeqCplt>
 8002118:	e01d      	b.n	8002156 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2210      	movs	r2, #16
 8002120:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002122:	e096      	b.n	8002252 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	f043 0204 	orr.w	r2, r3, #4
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <I2C_Slave_ISR_IT+0xe4>
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002144:	f040 8085 	bne.w	8002252 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214c:	4619      	mov	r1, r3
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 ff20 	bl	8002f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002154:	e07d      	b.n	8002252 <I2C_Slave_ISR_IT+0x1ee>
 8002156:	e07c      	b.n	8002252 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d030      	beq.n	80021c6 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800216c:	2b00      	cmp	r3, #0
 800216e:	d02a      	beq.n	80021c6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d018      	beq.n	80021ac <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d14f      	bne.n	8002256 <I2C_Slave_ISR_IT+0x1f2>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021bc:	d04b      	beq.n	8002256 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fc5f 	bl	8002a82 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80021c4:	e047      	b.n	8002256 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80021de:	6939      	ldr	r1, [r7, #16]
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fb8d 	bl	8002900 <I2C_ITAddrCplt>
 80021e6:	e037      	b.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d031      	beq.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02b      	beq.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d018      	beq.n	800223c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
 800223a:	e00d      	b.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002242:	d002      	beq.n	800224a <I2C_Slave_ISR_IT+0x1e6>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fc19 	bl	8002a82 <I2C_ITSlaveSeqCplt>
 8002250:	e002      	b.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002252:	bf00      	nop
 8002254:	e000      	b.n	8002258 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002256:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b088      	sub	sp, #32
 800226e:	af02      	add	r7, sp, #8
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <I2C_Master_ISR_DMA+0x1a>
 8002280:	2302      	movs	r3, #2
 8002282:	e0e1      	b.n	8002448 <I2C_Master_ISR_DMA+0x1de>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d017      	beq.n	80022c8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d011      	beq.n	80022c8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2210      	movs	r2, #16
 80022aa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80022b8:	2120      	movs	r1, #32
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f001 f9e0 	bl	8003680 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 ff5e 	bl	8003182 <I2C_Flush_TXDR>
 80022c6:	e0ba      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	09db      	lsrs	r3, r3, #7
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d072      	beq.n	80023ba <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	099b      	lsrs	r3, r3, #6
 80022d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d06c      	beq.n	80023ba <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d04e      	beq.n	8002398 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	b29b      	uxth	r3, r3
 8002302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002306:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d906      	bls.n	8002320 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	22ff      	movs	r2, #255	; 0xff
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e010      	b.n	8002342 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002332:	d003      	beq.n	800233c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e002      	b.n	8002342 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800233c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002340:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	b2da      	uxtb	r2, r3
 8002348:	8a79      	ldrh	r1, [r7, #18]
 800234a:	2300      	movs	r3, #0
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f001 f963 	bl	800361c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b22      	cmp	r3, #34	; 0x22
 8002372:	d108      	bne.n	8002386 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002384:	e05b      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002394:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002396:	e052      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023a6:	d003      	beq.n	80023b0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fb2d 	bl	8002a08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80023ae:	e046      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fdee 	bl	8002f94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80023b8:	e041      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	099b      	lsrs	r3, r3, #6
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d029      	beq.n	800241a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d023      	beq.n	800241a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d119      	bne.n	8002410 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ea:	d027      	beq.n	800243c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002404:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002406:	e019      	b.n	800243c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fafd 	bl	8002a08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800240e:	e015      	b.n	800243c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fdbe 	bl	8002f94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002418:	e010      	b.n	800243c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00b      	beq.n	800243e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fb83 	bl	8002b40 <I2C_ITMasterCplt>
 800243a:	e000      	b.n	800243e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800243c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800245c:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <I2C_Mem_ISR_DMA+0x240>)
 800245e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <I2C_Mem_ISR_DMA+0x1e>
 800246a:	2302      	movs	r3, #2
 800246c:	e10c      	b.n	8002688 <I2C_Mem_ISR_DMA+0x238>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d017      	beq.n	80024b2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800248a:	2b00      	cmp	r3, #0
 800248c:	d011      	beq.n	80024b2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2210      	movs	r2, #16
 8002494:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f043 0204 	orr.w	r2, r3, #4
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80024a2:	2120      	movs	r1, #32
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f001 f8eb 	bl	8003680 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fe69 	bl	8003182 <I2C_Flush_TXDR>
 80024b0:	e0e5      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00f      	beq.n	80024de <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f04f 32ff 	mov.w	r2, #4294967295
 80024da:	651a      	str	r2, [r3, #80]	; 0x50
 80024dc:	e0cf      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	09db      	lsrs	r3, r3, #7
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d05c      	beq.n	80025a4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d056      	beq.n	80025a4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80024f6:	2110      	movs	r1, #16
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f001 f8c1 	bl	8003680 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d048      	beq.n	800259a <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250c:	b29b      	uxth	r3, r3
 800250e:	2bff      	cmp	r3, #255	; 0xff
 8002510:	d910      	bls.n	8002534 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	22ff      	movs	r2, #255	; 0xff
 8002516:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	b299      	uxth	r1, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	b2da      	uxtb	r2, r3
 8002524:	2300      	movs	r3, #0
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f001 f875 	bl	800361c <I2C_TransferConfig>
 8002532:	e011      	b.n	8002558 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	b299      	uxth	r1, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	b2da      	uxtb	r2, r3
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f001 f862 	bl	800361c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b22      	cmp	r3, #34	; 0x22
 8002574:	d108      	bne.n	8002588 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002584:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002586:	e07a      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002596:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002598:	e071      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fcf9 	bl	8002f94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80025a2:	e06c      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d056      	beq.n	800265e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d050      	beq.n	800265e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b22      	cmp	r3, #34	; 0x22
 80025c6:	d101      	bne.n	80025cc <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <I2C_Mem_ISR_DMA+0x244>)
 80025ca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2bff      	cmp	r3, #255	; 0xff
 80025d4:	d910      	bls.n	80025f8 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	22ff      	movs	r2, #255	; 0xff
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e0:	b299      	uxth	r1, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f001 f813 	bl	800361c <I2C_TransferConfig>
 80025f6:	e011      	b.n	800261c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	b299      	uxth	r1, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f001 f800 	bl	800361c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b22      	cmp	r3, #34	; 0x22
 8002638:	d108      	bne.n	800264c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002648:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800264a:	e018      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800265a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800265c:	e00f      	b.n	800267e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fa61 	bl	8002b40 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	80002000 	.word	0x80002000
 8002694:	80002400 	.word	0x80002400

08002698 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <I2C_Slave_ISR_DMA+0x24>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0c9      	b.n	8002850 <I2C_Slave_ISR_DMA+0x1b8>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d009      	beq.n	80026e4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 faf8 	bl	8002cd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 809a 	beq.w	8002826 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8093 	beq.w	8002826 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0b9b      	lsrs	r3, r3, #14
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0bdb      	lsrs	r3, r3, #15
 8002710:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002714:	2b00      	cmp	r3, #0
 8002716:	d07f      	beq.n	8002818 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00d      	beq.n	800273c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0bdb      	lsrs	r3, r3, #15
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002738:	2301      	movs	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0b9b      	lsrs	r3, r3, #14
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800275c:	2301      	movs	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d128      	bne.n	80027b8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b28      	cmp	r3, #40	; 0x28
 8002770:	d108      	bne.n	8002784 <I2C_Slave_ISR_DMA+0xec>
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002778:	d104      	bne.n	8002784 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fbb3 	bl	8002ee8 <I2C_ITListenCplt>
 8002782:	e048      	b.n	8002816 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b29      	cmp	r3, #41	; 0x29
 800278e:	d10e      	bne.n	80027ae <I2C_Slave_ISR_DMA+0x116>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002796:	d00a      	beq.n	80027ae <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2210      	movs	r2, #16
 800279e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fcee 	bl	8003182 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f96b 	bl	8002a82 <I2C_ITSlaveSeqCplt>
 80027ac:	e033      	b.n	8002816 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2210      	movs	r2, #16
 80027b4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80027b6:	e034      	b.n	8002822 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <I2C_Slave_ISR_DMA+0x14a>
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d11f      	bne.n	8002822 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b21      	cmp	r3, #33	; 0x21
 80027e6:	d002      	beq.n	80027ee <I2C_Slave_ISR_DMA+0x156>
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b29      	cmp	r3, #41	; 0x29
 80027ec:	d103      	bne.n	80027f6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2221      	movs	r2, #33	; 0x21
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
 80027f4:	e008      	b.n	8002808 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b22      	cmp	r3, #34	; 0x22
 80027fa:	d002      	beq.n	8002802 <I2C_Slave_ISR_DMA+0x16a>
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002800:	d102      	bne.n	8002808 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2222      	movs	r2, #34	; 0x22
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	4619      	mov	r1, r3
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fbc0 	bl	8002f94 <I2C_ITError>
      if (treatdmanack == 1U)
 8002814:	e005      	b.n	8002822 <I2C_Slave_ISR_DMA+0x18a>
 8002816:	e004      	b.n	8002822 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2210      	movs	r2, #16
 800281e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002820:	e011      	b.n	8002846 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002822:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002824:	e00f      	b.n	8002846 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f85d 	bl	8002900 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <I2C_RequestMemoryRead+0xa4>)
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fecc 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fd5e 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e02c      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289e:	893b      	ldrh	r3, [r7, #8]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
 80028a8:	e015      	b.n	80028d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028aa:	893b      	ldrh	r3, [r7, #8]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fd44 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e012      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028cc:	893b      	ldrh	r3, [r7, #8]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2200      	movs	r2, #0
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fcf2 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	80002000 	.word	0x80002000

08002900 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002916:	2b28      	cmp	r3, #40	; 0x28
 8002918:	d16a      	bne.n	80029f0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b29b      	uxth	r3, r3
 8002934:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002938:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002946:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	b29b      	uxth	r3, r3
 8002950:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002954:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d138      	bne.n	80029d0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	09db      	lsrs	r3, r3, #7
 8002962:	b29a      	uxth	r2, r3
 8002964:	89bb      	ldrh	r3, [r7, #12]
 8002966:	4053      	eors	r3, r2
 8002968:	b29b      	uxth	r3, r3
 800296a:	f003 0306 	and.w	r3, r3, #6
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11c      	bne.n	80029ac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002984:	2b02      	cmp	r3, #2
 8002986:	d13b      	bne.n	8002a00 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2208      	movs	r2, #8
 8002994:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800299e:	89ba      	ldrh	r2, [r7, #12]
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	4619      	mov	r1, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fb1d 	bl	8001fe4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029aa:	e029      	b.n	8002a00 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fecd 	bl	8003754 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029c2:	89ba      	ldrh	r2, [r7, #12]
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fb0b 	bl	8001fe4 <HAL_I2C_AddrCallback>
}
 80029ce:	e017      	b.n	8002a00 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 febd 	bl	8003754 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029e2:	89ba      	ldrh	r2, [r7, #12]
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7ff fafb 	bl	8001fe4 <HAL_I2C_AddrCallback>
}
 80029ee:	e007      	b.n	8002a00 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2208      	movs	r2, #8
 80029f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b21      	cmp	r3, #33	; 0x21
 8002a22:	d115      	bne.n	8002a50 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2211      	movs	r2, #17
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fe8a 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff faa3 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a4e:	e014      	b.n	8002a7a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2212      	movs	r2, #18
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a64:	2102      	movs	r1, #2
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fe74 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff fa97 	bl	8001fa8 <HAL_I2C_MasterRxCpltCallback>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0b9b      	lsrs	r3, r3, #14
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	e00d      	b.n	8002ad4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	0bdb      	lsrs	r3, r3, #15
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b29      	cmp	r3, #41	; 0x29
 8002ade:	d112      	bne.n	8002b06 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2228      	movs	r2, #40	; 0x28
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2221      	movs	r2, #33	; 0x21
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002aee:	2101      	movs	r1, #1
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fe2f 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fa5c 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b04:	e017      	b.n	8002b36 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b10:	d111      	bne.n	8002b36 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2228      	movs	r2, #40	; 0x28
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2222      	movs	r2, #34	; 0x22
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b20:	2102      	movs	r1, #2
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fe16 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fa4d 	bl	8001fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2220      	movs	r2, #32
 8002b54:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b21      	cmp	r3, #33	; 0x21
 8002b60:	d107      	bne.n	8002b72 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b62:	2101      	movs	r1, #1
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fdf5 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2211      	movs	r2, #17
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b70:	e00c      	b.n	8002b8c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b22      	cmp	r3, #34	; 0x22
 8002b7c:	d106      	bne.n	8002b8c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b7e:	2102      	movs	r1, #2
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fde7 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2212      	movs	r2, #18
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <I2C_ITMasterCplt+0x18c>)
 8002b98:	400b      	ands	r3, r1
 8002b9a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <I2C_ITMasterCplt+0x190>)
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d009      	beq.n	8002bc8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b60      	cmp	r3, #96	; 0x60
 8002bd2:	d10b      	bne.n	8002bec <I2C_ITMasterCplt+0xac>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002bea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fac8 	bl	8003182 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d002      	beq.n	8002c0a <I2C_ITMasterCplt+0xca>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f9bf 	bl	8002f94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c16:	e054      	b.n	8002cc2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b21      	cmp	r3, #33	; 0x21
 8002c22:	d124      	bne.n	8002c6e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d10b      	bne.n	8002c56 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff f9e0 	bl	8002014 <HAL_I2C_MemTxCpltCallback>
}
 8002c54:	e035      	b.n	8002cc2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff f994 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
}
 8002c6c:	e029      	b.n	8002cc2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b22      	cmp	r3, #34	; 0x22
 8002c78:	d123      	bne.n	8002cc2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d10b      	bne.n	8002cac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff f9bf 	bl	8002028 <HAL_I2C_MemRxCpltCallback>
}
 8002caa:	e00a      	b.n	8002cc2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff f973 	bl	8001fa8 <HAL_I2C_MasterRxCpltCallback>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	fe00e800 	.word	0xfe00e800
 8002cd0:	ffff0000 	.word	0xffff0000

08002cd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b21      	cmp	r3, #33	; 0x21
 8002cfe:	d002      	beq.n	8002d06 <I2C_ITSlaveCplt+0x32>
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b29      	cmp	r3, #41	; 0x29
 8002d04:	d108      	bne.n	8002d18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d06:	f248 0101 	movw	r1, #32769	; 0x8001
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fd22 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2221      	movs	r2, #33	; 0x21
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	e00d      	b.n	8002d34 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b22      	cmp	r3, #34	; 0x22
 8002d1c:	d002      	beq.n	8002d24 <I2C_ITSlaveCplt+0x50>
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b2a      	cmp	r3, #42	; 0x2a
 8002d22:	d107      	bne.n	8002d34 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002d24:	f248 0102 	movw	r1, #32770	; 0x8002
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fd13 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2222      	movs	r2, #34	; 0x22
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <I2C_ITSlaveCplt+0x20c>)
 8002d50:	400b      	ands	r3, r1
 8002d52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fa14 	bl	8003182 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	0b9b      	lsrs	r3, r3, #14
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d013      	beq.n	8002d8e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d020      	beq.n	8002dc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d8c:	e018      	b.n	8002dc0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	0bdb      	lsrs	r3, r3, #15
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00c      	beq.n	8002e0e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f043 0204 	orr.w	r2, r3, #4
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f8a7 	bl	8002f94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b28      	cmp	r3, #40	; 0x28
 8002e50:	d141      	bne.n	8002ed6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e52:	6979      	ldr	r1, [r7, #20]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f847 	bl	8002ee8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e5a:	e03c      	b.n	8002ed6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e64:	d014      	beq.n	8002e90 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fe0b 	bl	8002a82 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <I2C_ITSlaveCplt+0x210>)
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff f8b9 	bl	8002000 <HAL_I2C_ListenCpltCallback>
}
 8002e8e:	e022      	b.n	8002ed6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b22      	cmp	r3, #34	; 0x22
 8002e9a:	d10e      	bne.n	8002eba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff f88c 	bl	8001fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002eb8:	e00d      	b.n	8002ed6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff f873 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	fe00e800 	.word	0xfe00e800
 8002ee4:	ffff0000 	.word	0xffff0000

08002ee8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <I2C_ITListenCplt+0xa8>)
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d022      	beq.n	8002f66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d012      	beq.n	8002f66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f66:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fbf2 	bl	8003754 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2210      	movs	r2, #16
 8002f76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff f83d 	bl	8002000 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	ffff0000 	.word	0xffff0000

08002f94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <I2C_ITError+0x194>)
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b28      	cmp	r3, #40	; 0x28
 8002fca:	d005      	beq.n	8002fd8 <I2C_ITError+0x44>
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b29      	cmp	r3, #41	; 0x29
 8002fd0:	d002      	beq.n	8002fd8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fd6:	d10b      	bne.n	8002ff0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fd8:	2103      	movs	r1, #3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fbba 	bl	8003754 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2228      	movs	r2, #40	; 0x28
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a50      	ldr	r2, [pc, #320]	; (800312c <I2C_ITError+0x198>)
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34
 8002fee:	e011      	b.n	8003014 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ff0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fbad 	bl	8003754 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b60      	cmp	r3, #96	; 0x60
 8003004:	d003      	beq.n	800300e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	2b00      	cmp	r3, #0
 8003020:	d039      	beq.n	8003096 <I2C_ITError+0x102>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b11      	cmp	r3, #17
 8003026:	d002      	beq.n	800302e <I2C_ITError+0x9a>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b21      	cmp	r3, #33	; 0x21
 800302c:	d133      	bne.n	8003096 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303c:	d107      	bne.n	800304e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800304c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fb0e 	bl	8001674 <HAL_DMA_GetState>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d017      	beq.n	800308e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	4a33      	ldr	r2, [pc, #204]	; (8003130 <I2C_ITError+0x19c>)
 8003064:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fa0e 	bl	8001494 <HAL_DMA_Abort_IT>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d04d      	beq.n	800311a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800308c:	e045      	b.n	800311a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f850 	bl	8003134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003094:	e041      	b.n	800311a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d039      	beq.n	8003112 <I2C_ITError+0x17e>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b12      	cmp	r3, #18
 80030a2:	d002      	beq.n	80030aa <I2C_ITError+0x116>
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b22      	cmp	r3, #34	; 0x22
 80030a8:	d133      	bne.n	8003112 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	d107      	bne.n	80030ca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fad0 	bl	8001674 <HAL_DMA_GetState>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d017      	beq.n	800310a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <I2C_ITError+0x19c>)
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f9d0 	bl	8001494 <HAL_DMA_Abort_IT>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d011      	beq.n	800311e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003104:	4610      	mov	r0, r2
 8003106:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003108:	e009      	b.n	800311e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f812 	bl	8003134 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003110:	e005      	b.n	800311e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f80e 	bl	8003134 <I2C_TreatErrorCallback>
  }
}
 8003118:	e002      	b.n	8003120 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800311e:	bf00      	nop
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	ffff0000 	.word	0xffff0000
 800312c:	08002065 	.word	0x08002065
 8003130:	0800328f 	.word	0x0800328f

08003134 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d10e      	bne.n	8003166 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe ff76 	bl	8002050 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003164:	e009      	b.n	800317a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7fe ff61 	bl	800203c <HAL_I2C_ErrorCallback>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d103      	bne.n	80031a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d007      	beq.n	80031be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	619a      	str	r2, [r3, #24]
  }
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031f2:	2120      	movs	r1, #32
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fa43 	bl	8003680 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80031fa:	e02d      	b.n	8003258 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003204:	441a      	add	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2bff      	cmp	r3, #255	; 0xff
 8003212:	d903      	bls.n	800321c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	22ff      	movs	r2, #255	; 0xff
 8003218:	851a      	strh	r2, [r3, #40]	; 0x28
 800321a:	e004      	b.n	8003226 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3324      	adds	r3, #36	; 0x24
 8003230:	4619      	mov	r1, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800323c:	f7fe f8ca 	bl	80013d4 <HAL_DMA_Start_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003246:	2110      	movs	r1, #16
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff fea3 	bl	8002f94 <I2C_ITError>
}
 800324e:	e003      	b.n	8003258 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fa14 	bl	8003680 <I2C_Enable_IRQ>
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800327c:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800327e:	2110      	movs	r1, #16
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fe87 	bl	8002f94 <I2C_ITError>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff ff39 	bl	8003134 <I2C_TreatErrorCallback>
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032da:	e022      	b.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d01e      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fd fea0 	bl	8001028 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d113      	bne.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d0cd      	beq.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003356:	e02c      	b.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f871 	bl	8003444 <I2C_IsErrorOccurred>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02a      	b.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d01e      	beq.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fd fe58 	bl	8001028 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e007      	b.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d1cb      	bne.n	8003358 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d6:	e028      	b.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f831 	bl	8003444 <I2C_IsErrorOccurred>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e026      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fd fe1c 	bl	8001028 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d113      	bne.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d1cf      	bne.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d075      	beq.n	800355c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003478:	e056      	b.n	8003528 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d052      	beq.n	8003528 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fd fdd1 	bl	8001028 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_IsErrorOccurred+0x54>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d147      	bne.n	8003528 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ba:	d12e      	bne.n	800351a <I2C_IsErrorOccurred+0xd6>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c2:	d02a      	beq.n	800351a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80034c4:	7cfb      	ldrb	r3, [r7, #19]
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d027      	beq.n	800351a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034da:	f7fd fda5 	bl	8001028 <HAL_GetTick>
 80034de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	e01b      	b.n	800351a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034e2:	f7fd fda1 	bl	8001028 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b19      	cmp	r3, #25
 80034ee:	d914      	bls.n	800351a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b20      	cmp	r3, #32
 8003526:	d1dc      	bne.n	80034e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b20      	cmp	r3, #32
 8003534:	d003      	beq.n	800353e <I2C_IsErrorOccurred+0xfa>
 8003536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800353a:	2b00      	cmp	r3, #0
 800353c:	d09d      	beq.n	800347a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800353e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00b      	beq.n	80035a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f043 0308 	orr.w	r3, r3, #8
 8003596:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01c      	beq.n	800360c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fdd5 	bl	8003182 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <I2C_IsErrorOccurred+0x1d4>)
 80035e4:	400b      	ands	r3, r1
 80035e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800360c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003634:	7a7b      	ldrb	r3, [r7, #9]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	4313      	orrs	r3, r2
 8003646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800364a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <I2C_TransferConfig+0x60>)
 800365c:	430b      	orrs	r3, r1
 800365e:	43db      	mvns	r3, r3
 8003660:	ea02 0103 	and.w	r1, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	03ff63ff 	.word	0x03ff63ff

08003680 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	4a2d      	ldr	r2, [pc, #180]	; (800374c <I2C_Enable_IRQ+0xcc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800369e:	4a2c      	ldr	r2, [pc, #176]	; (8003750 <I2C_Enable_IRQ+0xd0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d11d      	bne.n	80036e0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da03      	bge.n	80036b4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036b2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	d103      	bne.n	80036c2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80036c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d103      	bne.n	80036d0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d12c      	bne.n	8003730 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80036de:	e027      	b.n	8003730 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da03      	bge.n	80036f0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80036ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003700:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003712:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	2b10      	cmp	r3, #16
 8003718:	d103      	bne.n	8003722 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003720:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	2b20      	cmp	r3, #32
 8003726:	d103      	bne.n	8003730 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f043 0320 	orr.w	r3, r3, #32
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	0800226b 	.word	0x0800226b
 8003750:	08002699 	.word	0x08002699

08003754 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003764:	887b      	ldrh	r3, [r7, #2]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00f      	beq.n	800378e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003774:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003782:	2b28      	cmp	r3, #40	; 0x28
 8003784:	d003      	beq.n	800378e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800378c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00f      	beq.n	80037b8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800379e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037ac:	2b28      	cmp	r3, #40	; 0x28
 80037ae:	d003      	beq.n	80037b8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da03      	bge.n	80037c8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d103      	bne.n	80037d6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037d6:	887b      	ldrh	r3, [r7, #2]
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d103      	bne.n	80037e4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f043 0320 	orr.w	r3, r3, #32
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	2b40      	cmp	r3, #64	; 0x40
 80037e8:	d103      	bne.n	80037f2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6819      	ldr	r1, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43da      	mvns	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	400a      	ands	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d138      	bne.n	8003898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003830:	2302      	movs	r3, #2
 8003832:	e032      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2224      	movs	r2, #36	; 0x24
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b085      	sub	sp, #20
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d139      	bne.n	8003930 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e033      	b.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2224      	movs	r2, #36	; 0x24
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0201 	bic.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <HAL_PWREx_GetVoltageRange+0x18>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800394c:	4618      	mov	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396a:	d130      	bne.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003978:	d038      	beq.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003988:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2232      	movs	r2, #50	; 0x32
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9b      	lsrs	r3, r3, #18
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a0:	e002      	b.n	80039a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b4:	d102      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f2      	bne.n	80039a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c8:	d110      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e00f      	b.n	80039ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039da:	d007      	beq.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40007000 	.word	0x40007000
 8003a00:	20000000 	.word	0x20000000
 8003a04:	431bde83 	.word	0x431bde83

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3ca      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	4b97      	ldr	r3, [pc, #604]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a24:	4b94      	ldr	r3, [pc, #592]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80e4 	beq.w	8003c04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d007      	beq.n	8003a52 <HAL_RCC_OscConfig+0x4a>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	f040 808b 	bne.w	8003b60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 8087 	bne.w	8003b60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a52:	4b89      	ldr	r3, [pc, #548]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e3a2      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	4b82      	ldr	r3, [pc, #520]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_RCC_OscConfig+0x7c>
 8003a7a:	4b7f      	ldr	r3, [pc, #508]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_OscConfig+0x88>
 8003a84:	4b7c      	ldr	r3, [pc, #496]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d223      	bcs.n	8003adc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fd55 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e383      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa8:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a72      	ldr	r2, [pc, #456]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003aae:	f043 0308 	orr.w	r3, r3, #8
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b70      	ldr	r3, [pc, #448]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	496d      	ldr	r1, [pc, #436]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ac6:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	4968      	ldr	r1, [pc, #416]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	604b      	str	r3, [r1, #4]
 8003ada:	e025      	b.n	8003b28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003adc:	4b66      	ldr	r3, [pc, #408]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a65      	ldr	r2, [pc, #404]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	f043 0308 	orr.w	r3, r3, #8
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4960      	ldr	r1, [pc, #384]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003afa:	4b5f      	ldr	r3, [pc, #380]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	495b      	ldr	r1, [pc, #364]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd15 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e343      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b28:	f000 fc4a 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4950      	ldr	r1, [pc, #320]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <HAL_RCC_OscConfig+0x278>)
 8003b46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b48:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fa1b 	bl	8000f88 <HAL_InitTick>
 8003b52:	4603      	mov	r3, r0
 8003b54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d052      	beq.n	8003c02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	e327      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d032      	beq.n	8003bce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a42      	ldr	r2, [pc, #264]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b74:	f7fd fa58 	bl	8001028 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7c:	f7fd fa54 	bl	8001028 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e310      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a36      	ldr	r2, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	f043 0308 	orr.w	r3, r3, #8
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b34      	ldr	r3, [pc, #208]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	4931      	ldr	r1, [pc, #196]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	492c      	ldr	r1, [pc, #176]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e01a      	b.n	8003c04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fa25 	bl	8001028 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003be2:	f7fd fa21 	bl	8001028 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e2dd      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x1da>
 8003c00:	e000      	b.n	8003c04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d074      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x21a>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d10e      	bne.n	8003c3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d064      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d160      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e2ba      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x24a>
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	e026      	b.n	8003ca0 <HAL_RCC_OscConfig+0x298>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c5a:	d115      	bne.n	8003c88 <HAL_RCC_OscConfig+0x280>
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a02      	ldr	r2, [pc, #8]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x298>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080071e0 	.word	0x080071e0
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004
 8003c88:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a9f      	ldr	r2, [pc, #636]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b9d      	ldr	r3, [pc, #628]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a9c      	ldr	r2, [pc, #624]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f9be 	bl	8001028 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fd f9ba 	bl	8001028 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e276      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cc2:	4b92      	ldr	r3, [pc, #584]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2a8>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f9aa 	bl	8001028 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fd f9a6 	bl	8001028 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e262      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cea:	4b88      	ldr	r3, [pc, #544]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2d0>
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d060      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_OscConfig+0x310>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b0c      	cmp	r3, #12
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d116      	bne.n	8003d46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d18:	4b7c      	ldr	r3, [pc, #496]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_OscConfig+0x328>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e23f      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	4973      	ldr	r1, [pc, #460]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d44:	e040      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d023      	beq.n	8003d96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d4e:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fd f965 	bl	8001028 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d62:	f7fd f961 	bl	8001028 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e21d      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d74:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d80:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	061b      	lsls	r3, r3, #24
 8003d8e:	495f      	ldr	r1, [pc, #380]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	e018      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d96:	4b5d      	ldr	r3, [pc, #372]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5c      	ldr	r2, [pc, #368]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd f941 	bl	8001028 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fd f93d 	bl	8001028 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1f9      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f0      	bne.n	8003daa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d03c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01c      	beq.n	8003e16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	4a4a      	ldr	r2, [pc, #296]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fd f91c 	bl	8001028 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fd f918 	bl	8001028 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1d4      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ef      	beq.n	8003df4 <HAL_RCC_OscConfig+0x3ec>
 8003e14:	e01b      	b.n	8003e4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	4a3b      	ldr	r2, [pc, #236]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd f8ff 	bl	8001028 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2e:	f7fd f8fb 	bl	8001028 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e1b7      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e40:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1ef      	bne.n	8003e2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a6 	beq.w	8003fa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e60:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10d      	bne.n	8003e88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	; 0x58
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e88:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <HAL_RCC_OscConfig+0x508>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e94:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_OscConfig+0x508>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <HAL_RCC_OscConfig+0x508>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea0:	f7fd f8c2 	bl	8001028 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fd f8be 	bl	8001028 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e17a      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCC_OscConfig+0x508>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x4d8>
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ede:	e029      	b.n	8003f34 <HAL_RCC_OscConfig+0x52c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_OscConfig+0x50c>
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef8:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	4a03      	ldr	r2, [pc, #12]	; (8003f0c <HAL_RCC_OscConfig+0x504>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f08:	e014      	b.n	8003f34 <HAL_RCC_OscConfig+0x52c>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40007000 	.word	0x40007000
 8003f14:	4b9c      	ldr	r3, [pc, #624]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	4a9b      	ldr	r2, [pc, #620]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f24:	4b98      	ldr	r3, [pc, #608]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	4a97      	ldr	r2, [pc, #604]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f2c:	f023 0304 	bic.w	r3, r3, #4
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d016      	beq.n	8003f6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd f874 	bl	8001028 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7fd f870 	bl	8001028 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e12a      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5a:	4b8b      	ldr	r3, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ed      	beq.n	8003f44 <HAL_RCC_OscConfig+0x53c>
 8003f68:	e015      	b.n	8003f96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7fd f85d 	bl	8001028 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fd f859 	bl	8001028 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e113      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f88:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ed      	bne.n	8003f72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9c:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	4a79      	ldr	r2, [pc, #484]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80fe 	beq.w	80041ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	f040 80d0 	bne.w	800415c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fbc:	4b72      	ldr	r3, [pc, #456]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0203 	and.w	r2, r3, #3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d130      	bne.n	8004032 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d127      	bne.n	8004032 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d11f      	bne.n	8004032 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ffc:	2a07      	cmp	r2, #7
 8003ffe:	bf14      	ite	ne
 8004000:	2201      	movne	r2, #1
 8004002:	2200      	moveq	r2, #0
 8004004:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004006:	4293      	cmp	r3, r2
 8004008:	d113      	bne.n	8004032 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	085b      	lsrs	r3, r3, #1
 8004016:	3b01      	subs	r3, #1
 8004018:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d109      	bne.n	8004032 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	085b      	lsrs	r3, r3, #1
 800402a:	3b01      	subs	r3, #1
 800402c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d06e      	beq.n	8004110 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d069      	beq.n	800410c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004044:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0ad      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004054:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a4b      	ldr	r2, [pc, #300]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800405a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800405e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004060:	f7fc ffe2 	bl	8001028 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fc ffde 	bl	8001028 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e09a      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004086:	4b40      	ldr	r3, [pc, #256]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	4b40      	ldr	r3, [pc, #256]	; (800418c <HAL_RCC_OscConfig+0x784>)
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004096:	3a01      	subs	r2, #1
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040a0:	0212      	lsls	r2, r2, #8
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0552      	lsls	r2, r2, #21
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040b4:	0852      	lsrs	r2, r2, #1
 80040b6:	3a01      	subs	r2, #1
 80040b8:	0652      	lsls	r2, r2, #25
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040c0:	0912      	lsrs	r2, r2, #4
 80040c2:	0452      	lsls	r2, r2, #17
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4930      	ldr	r1, [pc, #192]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040cc:	4b2e      	ldr	r3, [pc, #184]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2d      	ldr	r2, [pc, #180]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e4:	f7fc ffa0 	bl	8001028 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fc ff9c 	bl	8001028 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e058      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410a:	e050      	b.n	80041ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e04f      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d148      	bne.n	80041ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004134:	f7fc ff78 	bl	8001028 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800413c:	f7fc ff74 	bl	8001028 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e030      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0x734>
 800415a:	e028      	b.n	80041ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d023      	beq.n	80041aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <HAL_RCC_OscConfig+0x780>)
 8004168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fc ff5b 	bl	8001028 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004174:	e00c      	b.n	8004190 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fc ff57 	bl	8001028 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d905      	bls.n	8004190 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e013      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
 8004188:	40021000 	.word	0x40021000
 800418c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_OscConfig+0x7b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ec      	bne.n	8004176 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_OscConfig+0x7b0>)
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	4905      	ldr	r1, [pc, #20]	; (80041b8 <HAL_RCC_OscConfig+0x7b0>)
 80041a2:	4b06      	ldr	r3, [pc, #24]	; (80041bc <HAL_RCC_OscConfig+0x7b4>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
 80041a8:	e001      	b.n	80041ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40021000 	.word	0x40021000
 80041bc:	feeefffc 	.word	0xfeeefffc

080041c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0e7      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b75      	ldr	r3, [pc, #468]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d910      	bls.n	8004204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b72      	ldr	r3, [pc, #456]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 0207 	bic.w	r2, r3, #7
 80041ea:	4970      	ldr	r1, [pc, #448]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0cf      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b66      	ldr	r3, [pc, #408]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421c:	429a      	cmp	r2, r3
 800421e:	d908      	bls.n	8004232 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4960      	ldr	r1, [pc, #384]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04c      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	4b5a      	ldr	r3, [pc, #360]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d121      	bne.n	8004296 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0a6      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425e:	4b54      	ldr	r3, [pc, #336]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e09a      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004276:	4b4e      	ldr	r3, [pc, #312]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e08e      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e086      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b46      	ldr	r3, [pc, #280]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4943      	ldr	r1, [pc, #268]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a8:	f7fc febe 	bl	8001028 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fc feba 	bl	8001028 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e06e      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b3a      	ldr	r3, [pc, #232]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d208      	bcs.n	8004306 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b2e      	ldr	r3, [pc, #184]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	492b      	ldr	r1, [pc, #172]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d210      	bcs.n	8004336 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 0207 	bic.w	r2, r3, #7
 800431c:	4923      	ldr	r1, [pc, #140]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_RCC_ClockConfig+0x1ec>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d001      	beq.n	8004336 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e036      	b.n	80043a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004342:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4918      	ldr	r1, [pc, #96]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d009      	beq.n	8004374 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004360:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4910      	ldr	r1, [pc, #64]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004374:	f000 f824 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <HAL_RCC_ClockConfig+0x1f0>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	490b      	ldr	r1, [pc, #44]	; (80043b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004392:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004394:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1fc>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc fdf5 	bl	8000f88 <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80043a2:	7afb      	ldrb	r3, [r7, #11]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	080071e0 	.word	0x080071e0
 80043b8:	20000000 	.word	0x20000000
 80043bc:	20000004 	.word	0x20000004

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x34>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d121      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d11e      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004400:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004424:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d102      	bne.n	800443e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e004      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d101      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004446:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d134      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444e:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0xa6>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d003      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0xac>
 8004464:	e005      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	e005      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800446e:	617b      	str	r3, [r7, #20]
      break;
 8004470:	e002      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	617b      	str	r3, [r7, #20]
      break;
 8004476:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0e5b      	lsrs	r3, r3, #25
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044b8:	69bb      	ldr	r3, [r7, #24]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080071f8 	.word	0x080071f8
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000000 	.word	0x20000000

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	080071f0 	.word	0x080071f0

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004520:	f7ff ffda 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0adb      	lsrs	r3, r3, #11
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	080071f0 	.word	0x080071f0

08004548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004554:	4b2a      	ldr	r3, [pc, #168]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f9ee 	bl	8003940 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
 8004566:	e014      	b.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	4a24      	ldr	r2, [pc, #144]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	; 0x58
 8004574:	4b22      	ldr	r3, [pc, #136]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004580:	f7ff f9de 	bl	8003940 <HAL_PWREx_GetVoltageRange>
 8004584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004586:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	4a1d      	ldr	r2, [pc, #116]	; (8004600 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d10b      	bne.n	80045b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d919      	bls.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2ba0      	cmp	r3, #160	; 0xa0
 80045a4:	d902      	bls.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a6:	2302      	movs	r3, #2
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e013      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ac:	2301      	movs	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e010      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d902      	bls.n	80045be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045b8:	2303      	movs	r3, #3
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e00a      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d102      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c4:	2302      	movs	r3, #2
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e004      	b.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b70      	cmp	r3, #112	; 0x70
 80045ce:	d101      	bne.n	80045d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f023 0207 	bic.w	r2, r3, #7
 80045dc:	4909      	ldr	r1, [pc, #36]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d001      	beq.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40021000 	.word	0x40021000
 8004604:	40022000 	.word	0x40022000

08004608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004610:	2300      	movs	r3, #0
 8004612:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004614:	2300      	movs	r3, #0
 8004616:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004620:	2b00      	cmp	r3, #0
 8004622:	d041      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800462c:	d02a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004632:	d824      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004638:	d008      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800463a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800463e:	d81e      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004648:	d010      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800464a:	e018      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800464c:	4b86      	ldr	r3, [pc, #536]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a85      	ldr	r2, [pc, #532]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004658:	e015      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fabb 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466a:	e00c      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3320      	adds	r3, #32
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fba6 	bl	8004dc4 <RCCEx_PLLSAI2_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	74fb      	strb	r3, [r7, #19]
      break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004686:	7cfb      	ldrb	r3, [r7, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10b      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800468c:	4b76      	ldr	r3, [pc, #472]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469a:	4973      	ldr	r1, [pc, #460]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046a2:	e001      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d041      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046bc:	d02a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046c2:	d824      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ce:	d81e      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046da:	e018      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046dc:	4b62      	ldr	r3, [pc, #392]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a61      	ldr	r2, [pc, #388]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fa73 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046fa:	e00c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3320      	adds	r3, #32
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb5e 	bl	8004dc4 <RCCEx_PLLSAI2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	74fb      	strb	r3, [r7, #19]
      break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800471c:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004722:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800472a:	494f      	ldr	r1, [pc, #316]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a0 	beq.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004746:	2300      	movs	r3, #0
 8004748:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800474a:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	4a40      	ldr	r2, [pc, #256]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	; 0x58
 800476c:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3a      	ldr	r2, [pc, #232]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004788:	f7fc fc4e 	bl	8001028 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800478e:	e009      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fc fc4a 	bl	8001028 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	74fb      	strb	r3, [r7, #19]
        break;
 80047a2:	e005      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ef      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d15c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01f      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d019      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fc fc09 	bl	8001028 <HAL_GetTick>
 8004816:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004818:	e00b      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fc fc05 	bl	8001028 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d902      	bls.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	74fb      	strb	r3, [r7, #19]
            break;
 8004830:	e006      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ec      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004856:	4904      	ldr	r1, [pc, #16]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800485e:	e009      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004860:	7cfb      	ldrb	r3, [r7, #19]
 8004862:	74bb      	strb	r3, [r7, #18]
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004874:	7c7b      	ldrb	r3, [r7, #17]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d105      	bne.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487a:	4b9e      	ldr	r3, [pc, #632]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	4a9d      	ldr	r2, [pc, #628]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004892:	4b98      	ldr	r3, [pc, #608]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4994      	ldr	r1, [pc, #592]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b4:	4b8f      	ldr	r3, [pc, #572]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 020c 	bic.w	r2, r3, #12
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	498c      	ldr	r1, [pc, #560]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d6:	4b87      	ldr	r3, [pc, #540]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	4983      	ldr	r1, [pc, #524]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f8:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	497b      	ldr	r1, [pc, #492]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004928:	4972      	ldr	r1, [pc, #456]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800493c:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	496a      	ldr	r1, [pc, #424]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	4961      	ldr	r1, [pc, #388]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004980:	4b5c      	ldr	r3, [pc, #368]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004986:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	4959      	ldr	r1, [pc, #356]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a2:	4b54      	ldr	r3, [pc, #336]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	4950      	ldr	r1, [pc, #320]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c4:	4b4b      	ldr	r3, [pc, #300]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	4948      	ldr	r1, [pc, #288]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f4:	493f      	ldr	r1, [pc, #252]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d028      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a08:	4b3a      	ldr	r3, [pc, #232]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	4937      	ldr	r1, [pc, #220]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a26:	d106      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a28:	4b32      	ldr	r3, [pc, #200]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a31      	ldr	r2, [pc, #196]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a32:	60d3      	str	r3, [r2, #12]
 8004a34:	e011      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3304      	adds	r3, #4
 8004a44:	2101      	movs	r1, #1
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f8c8 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a50:	7cfb      	ldrb	r3, [r7, #19]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d028      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a66:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	491f      	ldr	r1, [pc, #124]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a84:	d106      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a86:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	4a1a      	ldr	r2, [pc, #104]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a90:	60d3      	str	r3, [r2, #12]
 8004a92:	e011      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f899 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4a02      	ldr	r2, [pc, #8]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aee:	60d3      	str	r3, [r2, #12]
 8004af0:	e014      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f867 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b36:	4928      	ldr	r1, [pc, #160]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b46:	d10d      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	2102      	movs	r1, #2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f844 	bl	8004bdc <RCCEx_PLLSAI1_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	74bb      	strb	r3, [r7, #18]
 8004b62:	e011      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3320      	adds	r3, #32
 8004b72:	2102      	movs	r1, #2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f925 	bl	8004dc4 <RCCEx_PLLSAI2_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc6:	4904      	ldr	r1, [pc, #16]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bce:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000

08004bdc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bea:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d018      	beq.n	8004c28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bf6:	4b72      	ldr	r3, [pc, #456]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f003 0203 	and.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d10d      	bne.n	8004c22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
       ||
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d047      	beq.n	8004cb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	73fb      	strb	r3, [r7, #15]
 8004c26:	e044      	b.n	8004cb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d018      	beq.n	8004c62 <RCCEx_PLLSAI1_Config+0x86>
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d825      	bhi.n	8004c80 <RCCEx_PLLSAI1_Config+0xa4>
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d002      	beq.n	8004c3e <RCCEx_PLLSAI1_Config+0x62>
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d009      	beq.n	8004c50 <RCCEx_PLLSAI1_Config+0x74>
 8004c3c:	e020      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3e:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d11d      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4e:	e01a      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c50:	4b5b      	ldr	r3, [pc, #364]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e013      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c62:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6e:	4b54      	ldr	r3, [pc, #336]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7e:	e006      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      break;
 8004c84:	e004      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e002      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
 8004c8c:	e000      	b.n	8004c90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c96:	4b4a      	ldr	r3, [pc, #296]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	430b      	orrs	r3, r1
 8004cac:	4944      	ldr	r1, [pc, #272]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d17d      	bne.n	8004db4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc4:	f7fc f9b0 	bl	8001028 <HAL_GetTick>
 8004cc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cca:	e009      	b.n	8004ce0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ccc:	f7fc f9ac 	bl	8001028 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cde:	e005      	b.n	8004cec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce0:	4b37      	ldr	r3, [pc, #220]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1ef      	bne.n	8004ccc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d160      	bne.n	8004db4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d111      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf8:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6892      	ldr	r2, [r2, #8]
 8004d08:	0211      	lsls	r1, r2, #8
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	68d2      	ldr	r2, [r2, #12]
 8004d0e:	0912      	lsrs	r2, r2, #4
 8004d10:	0452      	lsls	r2, r2, #17
 8004d12:	430a      	orrs	r2, r1
 8004d14:	492a      	ldr	r1, [pc, #168]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e027      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d112      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d22:	4b27      	ldr	r3, [pc, #156]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	0211      	lsls	r1, r2, #8
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6912      	ldr	r2, [r2, #16]
 8004d38:	0852      	lsrs	r2, r2, #1
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	0552      	lsls	r2, r2, #21
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	610b      	str	r3, [r1, #16]
 8004d46:	e011      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6892      	ldr	r2, [r2, #8]
 8004d58:	0211      	lsls	r1, r2, #8
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6952      	ldr	r2, [r2, #20]
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0652      	lsls	r2, r2, #25
 8004d64:	430a      	orrs	r2, r1
 8004d66:	4916      	ldr	r1, [pc, #88]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d6c:	4b14      	ldr	r3, [pc, #80]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a13      	ldr	r2, [pc, #76]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fc f956 	bl	8001028 <HAL_GetTick>
 8004d7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d7e:	e009      	b.n	8004d94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d80:	f7fc f952 	bl	8001028 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d902      	bls.n	8004d94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	73fb      	strb	r3, [r7, #15]
          break;
 8004d92:	e005      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d94:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ef      	beq.n	8004d80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dd2:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dde:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0203 	and.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d10d      	bne.n	8004e0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
       ||
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004df6:	4b61      	ldr	r3, [pc, #388]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
       ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d047      	beq.n	8004e9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	73fb      	strb	r3, [r7, #15]
 8004e0e:	e044      	b.n	8004e9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d018      	beq.n	8004e4a <RCCEx_PLLSAI2_Config+0x86>
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d825      	bhi.n	8004e68 <RCCEx_PLLSAI2_Config+0xa4>
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d002      	beq.n	8004e26 <RCCEx_PLLSAI2_Config+0x62>
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d009      	beq.n	8004e38 <RCCEx_PLLSAI2_Config+0x74>
 8004e24:	e020      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e26:	4b55      	ldr	r3, [pc, #340]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11d      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e36:	e01a      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d116      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e48:	e013      	b.n	8004e72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e4a:	4b4c      	ldr	r3, [pc, #304]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e66:	e006      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6c:	e004      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e002      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e72:	bf00      	nop
 8004e74:	e000      	b.n	8004e78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e76:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7e:	4b3f      	ldr	r3, [pc, #252]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	430b      	orrs	r3, r1
 8004e94:	4939      	ldr	r1, [pc, #228]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d167      	bne.n	8004f70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ea0:	4b36      	ldr	r3, [pc, #216]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a35      	ldr	r2, [pc, #212]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fc f8bc 	bl	8001028 <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb4:	f7fc f8b8 	bl	8001028 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec6:	e005      	b.n	8004ed4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec8:	4b2c      	ldr	r3, [pc, #176]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ef      	bne.n	8004eb4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d14a      	bne.n	8004f70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d111      	bne.n	8004f04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee0:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6892      	ldr	r2, [r2, #8]
 8004ef0:	0211      	lsls	r1, r2, #8
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68d2      	ldr	r2, [r2, #12]
 8004ef6:	0912      	lsrs	r2, r2, #4
 8004ef8:	0452      	lsls	r2, r2, #17
 8004efa:	430a      	orrs	r2, r1
 8004efc:	491f      	ldr	r1, [pc, #124]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	614b      	str	r3, [r1, #20]
 8004f02:	e011      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f04:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6892      	ldr	r2, [r2, #8]
 8004f14:	0211      	lsls	r1, r2, #8
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6912      	ldr	r2, [r2, #16]
 8004f1a:	0852      	lsrs	r2, r2, #1
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	0652      	lsls	r2, r2, #25
 8004f20:	430a      	orrs	r2, r1
 8004f22:	4916      	ldr	r1, [pc, #88]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fc f878 	bl	8001028 <HAL_GetTick>
 8004f38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f3a:	e009      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f3c:	f7fc f874 	bl	8001028 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d902      	bls.n	8004f50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f4e:	e005      	b.n	8004f5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	4904      	ldr	r1, [pc, #16]	; (8004f7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000

08004f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e049      	b.n	8005026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fb fe3c 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fa16 	bl	80053f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b01      	cmp	r3, #1
 8005042:	d001      	beq.n	8005048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e047      	b.n	80050d8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <HAL_TIM_Base_Start+0xb4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d01d      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005062:	d018      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1f      	ldr	r2, [pc, #124]	; (80050e8 <HAL_TIM_Base_Start+0xb8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <HAL_TIM_Base_Start+0xbc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00e      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <HAL_TIM_Base_Start+0xc0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1b      	ldr	r2, [pc, #108]	; (80050f4 <HAL_TIM_Base_Start+0xc4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d004      	beq.n	8005096 <HAL_TIM_Base_Start+0x66>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_TIM_Base_Start+0xc8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d115      	bne.n	80050c2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_TIM_Base_Start+0xcc>)
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d015      	beq.n	80050d4 <HAL_TIM_Base_Start+0xa4>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ae:	d011      	beq.n	80050d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	e008      	b.n	80050d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	e000      	b.n	80050d6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40000400 	.word	0x40000400
 80050ec:	40000800 	.word	0x40000800
 80050f0:	40000c00 	.word	0x40000c00
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	00010007 	.word	0x00010007

08005100 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6a1a      	ldr	r2, [r3, #32]
 800510e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005112:	4013      	ands	r3, r2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10f      	bne.n	8005138 <HAL_TIM_Base_Stop+0x38>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	f240 4344 	movw	r3, #1092	; 0x444
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d107      	bne.n	8005138 <HAL_TIM_Base_Stop+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0201 	bic.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d122      	bne.n	80051aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d11b      	bne.n	80051aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0202 	mvn.w	r2, #2
 800517a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f90f 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 8005196:	e005      	b.n	80051a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f901 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f912 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d122      	bne.n	80051fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d11b      	bne.n	80051fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f06f 0204 	mvn.w	r2, #4
 80051ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8e5 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 80051ea:	e005      	b.n	80051f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8d7 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8e8 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b08      	cmp	r3, #8
 800520a:	d122      	bne.n	8005252 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b08      	cmp	r3, #8
 8005218:	d11b      	bne.n	8005252 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f06f 0208 	mvn.w	r2, #8
 8005222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f8bb 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 800523e:	e005      	b.n	800524c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8ad 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8be 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b10      	cmp	r3, #16
 800525e:	d122      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d11b      	bne.n	80052a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f06f 0210 	mvn.w	r2, #16
 8005276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2208      	movs	r2, #8
 800527c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f891 	bl	80053b4 <HAL_TIM_IC_CaptureCallback>
 8005292:	e005      	b.n	80052a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f883 	bl	80053a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f894 	bl	80053c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10e      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0201 	mvn.w	r2, #1
 80052ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f85d 	bl	800538c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	d10e      	bne.n	80052fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ea:	2b80      	cmp	r3, #128	; 0x80
 80052ec:	d107      	bne.n	80052fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f91d 	bl	8005538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b80      	cmp	r3, #128	; 0x80
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f910 	bl	800554c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f842 	bl	80053dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b20      	cmp	r3, #32
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b20      	cmp	r3, #32
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8d0 	bl	8005524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a40      	ldr	r2, [pc, #256]	; (8005504 <TIM_Base_SetConfig+0x114>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d013      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540e:	d00f      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3d      	ldr	r2, [pc, #244]	; (8005508 <TIM_Base_SetConfig+0x118>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00b      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3c      	ldr	r2, [pc, #240]	; (800550c <TIM_Base_SetConfig+0x11c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d007      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a3b      	ldr	r2, [pc, #236]	; (8005510 <TIM_Base_SetConfig+0x120>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d003      	beq.n	8005430 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a3a      	ldr	r2, [pc, #232]	; (8005514 <TIM_Base_SetConfig+0x124>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d108      	bne.n	8005442 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2f      	ldr	r2, [pc, #188]	; (8005504 <TIM_Base_SetConfig+0x114>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d01f      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d01b      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <TIM_Base_SetConfig+0x118>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d017      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2b      	ldr	r2, [pc, #172]	; (800550c <TIM_Base_SetConfig+0x11c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d013      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2a      	ldr	r2, [pc, #168]	; (8005510 <TIM_Base_SetConfig+0x120>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00f      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a29      	ldr	r2, [pc, #164]	; (8005514 <TIM_Base_SetConfig+0x124>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00b      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_Base_SetConfig+0x128>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d007      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <TIM_Base_SetConfig+0x12c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_Base_SetConfig+0x9a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <TIM_Base_SetConfig+0x130>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d108      	bne.n	800549c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <TIM_Base_SetConfig+0x114>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00f      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a12      	ldr	r2, [pc, #72]	; (8005514 <TIM_Base_SetConfig+0x124>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a11      	ldr	r2, [pc, #68]	; (8005518 <TIM_Base_SetConfig+0x128>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0xf8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <TIM_Base_SetConfig+0x130>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d103      	bne.n	80054f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	615a      	str	r2, [r3, #20]
}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40013400 	.word	0x40013400
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800

08005524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e040      	b.n	80055f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fb74 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0201 	bic.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8c0 	bl	8005724 <UART_SetConfig>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e022      	b.n	80055f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb6c 	bl	8005c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fbf3 	bl	8005dd8 <UART_CheckIdleState>
 80055f2:	4603      	mov	r3, r0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 8082 	bne.w	800571a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_UART_Transmit+0x26>
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e07a      	b.n	800571c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Transmit+0x38>
 8005630:	2302      	movs	r3, #2
 8005632:	e073      	b.n	800571c <HAL_UART_Transmit+0x120>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2221      	movs	r2, #33	; 0x21
 8005648:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564a:	f7fb fced 	bl	8001028 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	88fa      	ldrh	r2, [r7, #6]
 800565c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005668:	d108      	bne.n	800567c <HAL_UART_Transmit+0x80>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e003      	b.n	8005684 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800568c:	e02d      	b.n	80056ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	; 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fbe6 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e039      	b.n	800571c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ba:	b292      	uxth	r2, r2
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	3302      	adds	r3, #2
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e008      	b.n	80056d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	b292      	uxth	r2, r2
 80056d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3301      	adds	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1cb      	bne.n	800568e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fbb2 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e005      	b.n	800571c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b08a      	sub	sp, #40	; 0x28
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	4313      	orrs	r3, r2
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4ba4      	ldr	r3, [pc, #656]	; (80059e4 <UART_SetConfig+0x2c0>)
 8005754:	4013      	ands	r3, r2
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575c:	430b      	orrs	r3, r1
 800575e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a99      	ldr	r2, [pc, #612]	; (80059e8 <UART_SetConfig+0x2c4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	4313      	orrs	r3, r2
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a90      	ldr	r2, [pc, #576]	; (80059ec <UART_SetConfig+0x2c8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d126      	bne.n	80057fc <UART_SetConfig+0xd8>
 80057ae:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <UART_SetConfig+0x2cc>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d81b      	bhi.n	80057f4 <UART_SetConfig+0xd0>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0xa0>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e116      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e112      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e10e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e10a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e106      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7c      	ldr	r2, [pc, #496]	; (80059f4 <UART_SetConfig+0x2d0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d138      	bne.n	8005878 <UART_SetConfig+0x154>
 8005806:	4b7a      	ldr	r3, [pc, #488]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d82d      	bhi.n	8005870 <UART_SetConfig+0x14c>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0xf8>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005851 	.word	0x08005851
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005861 	.word	0x08005861
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005859 	.word	0x08005859
 8005840:	08005871 	.word	0x08005871
 8005844:	08005871 	.word	0x08005871
 8005848:	08005871 	.word	0x08005871
 800584c:	08005869 	.word	0x08005869
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e0d8      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e0d4      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e0d0      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e0cc      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e0c8      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <UART_SetConfig+0x2d4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d125      	bne.n	80058ce <UART_SetConfig+0x1aa>
 8005882:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d016      	beq.n	80058be <UART_SetConfig+0x19a>
 8005890:	2b30      	cmp	r3, #48	; 0x30
 8005892:	d818      	bhi.n	80058c6 <UART_SetConfig+0x1a2>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d00a      	beq.n	80058ae <UART_SetConfig+0x18a>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d814      	bhi.n	80058c6 <UART_SetConfig+0x1a2>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <UART_SetConfig+0x182>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d008      	beq.n	80058b6 <UART_SetConfig+0x192>
 80058a4:	e00f      	b.n	80058c6 <UART_SetConfig+0x1a2>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ac:	e0ad      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058ae:	2302      	movs	r3, #2
 80058b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b4:	e0a9      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058b6:	2304      	movs	r3, #4
 80058b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058bc:	e0a5      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058be:	2308      	movs	r3, #8
 80058c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c4:	e0a1      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058c6:	2310      	movs	r3, #16
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058cc:	e09d      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a4a      	ldr	r2, [pc, #296]	; (80059fc <UART_SetConfig+0x2d8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d125      	bne.n	8005924 <UART_SetConfig+0x200>
 80058d8:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058e2:	2bc0      	cmp	r3, #192	; 0xc0
 80058e4:	d016      	beq.n	8005914 <UART_SetConfig+0x1f0>
 80058e6:	2bc0      	cmp	r3, #192	; 0xc0
 80058e8:	d818      	bhi.n	800591c <UART_SetConfig+0x1f8>
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d00a      	beq.n	8005904 <UART_SetConfig+0x1e0>
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d814      	bhi.n	800591c <UART_SetConfig+0x1f8>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <UART_SetConfig+0x1d8>
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d008      	beq.n	800590c <UART_SetConfig+0x1e8>
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x1f8>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e082      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e07e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e07a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e076      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e072      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <UART_SetConfig+0x2dc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d12a      	bne.n	8005984 <UART_SetConfig+0x260>
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d01a      	beq.n	8005974 <UART_SetConfig+0x250>
 800593e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005942:	d81b      	bhi.n	800597c <UART_SetConfig+0x258>
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d00c      	beq.n	8005964 <UART_SetConfig+0x240>
 800594a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594e:	d815      	bhi.n	800597c <UART_SetConfig+0x258>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <UART_SetConfig+0x238>
 8005954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005958:	d008      	beq.n	800596c <UART_SetConfig+0x248>
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x258>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e052      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e04e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e04a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e046      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e042      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <UART_SetConfig+0x2c4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d13a      	bne.n	8005a04 <UART_SetConfig+0x2e0>
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0x2b0>
 800599e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a2:	d81b      	bhi.n	80059dc <UART_SetConfig+0x2b8>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d00c      	beq.n	80059c4 <UART_SetConfig+0x2a0>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d815      	bhi.n	80059dc <UART_SetConfig+0x2b8>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x298>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x2a8>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x2b8>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c2:	e022      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ca:	e01e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d2:	e01a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059da:	e016      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059e4:	efff69f3 	.word	0xefff69f3
 80059e8:	40008000 	.word	0x40008000
 80059ec:	40013800 	.word	0x40013800
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40004400 	.word	0x40004400
 80059f8:	40004800 	.word	0x40004800
 80059fc:	40004c00 	.word	0x40004c00
 8005a00:	40005000 	.word	0x40005000
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a9f      	ldr	r2, [pc, #636]	; (8005c8c <UART_SetConfig+0x568>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d17a      	bne.n	8005b0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d824      	bhi.n	8005a66 <UART_SetConfig+0x342>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x300>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a57 	.word	0x08005a57
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a67 	.word	0x08005a67
 8005a44:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fe fd52 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	61f8      	str	r0, [r7, #28]
        break;
 8005a4e:	e010      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b8f      	ldr	r3, [pc, #572]	; (8005c90 <UART_SetConfig+0x56c>)
 8005a52:	61fb      	str	r3, [r7, #28]
        break;
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fe fcb3 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005a5a:	61f8      	str	r0, [r7, #28]
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	61fb      	str	r3, [r7, #28]
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80fb 	beq.w	8005c70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d305      	bcc.n	8005a96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d903      	bls.n	8005a9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a9c:	e0e8      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	4615      	mov	r5, r2
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	022b      	lsls	r3, r5, #8
 8005ab0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ab4:	0222      	lsls	r2, r4, #8
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	6849      	ldr	r1, [r1, #4]
 8005aba:	0849      	lsrs	r1, r1, #1
 8005abc:	2000      	movs	r0, #0
 8005abe:	4688      	mov	r8, r1
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ac6:	eb43 0b09 	adc.w	fp, r3, r9
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad8:	4650      	mov	r0, sl
 8005ada:	4659      	mov	r1, fp
 8005adc:	f7fa fbc8 	bl	8000270 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aee:	d308      	bcc.n	8005b02 <UART_SetConfig+0x3de>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af6:	d204      	bcs.n	8005b02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	e0b6      	b.n	8005c70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b08:	e0b2      	b.n	8005c70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d15e      	bne.n	8005bd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d828      	bhi.n	8005b6e <UART_SetConfig+0x44a>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x400>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b6f 	.word	0x08005b6f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b6f 	.word	0x08005b6f
 8005b44:	08005b67 	.word	0x08005b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fe fcd2 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e014      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fe fce4 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
        break;
 8005b56:	e010      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b58:	4b4d      	ldr	r3, [pc, #308]	; (8005c90 <UART_SetConfig+0x56c>)
 8005b5a:	61fb      	str	r3, [r7, #28]
        break;
 8005b5c:	e00d      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5e:	f7fe fc2f 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005b62:	61f8      	str	r0, [r7, #28]
        break;
 8005b64:	e009      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6a:	61fb      	str	r3, [r7, #28]
        break;
 8005b6c:	e005      	b.n	8005b7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d077      	beq.n	8005c70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005a      	lsls	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d916      	bls.n	8005bca <UART_SetConfig+0x4a6>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba2:	d212      	bcs.n	8005bca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f023 030f 	bic.w	r3, r3, #15
 8005bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	8afb      	ldrh	r3, [r7, #22]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	8afa      	ldrh	r2, [r7, #22]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e052      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bd0:	e04e      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d827      	bhi.n	8005c2a <UART_SetConfig+0x506>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x4bc>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fe fc74 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
        break;
 8005c0a:	e014      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fe fc86 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
        break;
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <UART_SetConfig+0x56c>)
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fe fbd1 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005c1e:	61f8      	str	r0, [r7, #28]
        break;
 8005c20:	e009      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	61fb      	str	r3, [r7, #28]
        break;
 8005c28:	e005      	b.n	8005c36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c34:	bf00      	nop
    }

    if (pclk != 0U)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d019      	beq.n	8005c70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	085a      	lsrs	r2, r3, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d909      	bls.n	8005c6a <UART_SetConfig+0x546>
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d205      	bcs.n	8005c6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e002      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	00f42400 	.word	0x00f42400

08005c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01a      	beq.n	8005daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d92:	d10a      	bne.n	8005daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de8:	f7fb f91e 	bl	8001028 <HAL_GetTick>
 8005dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d10e      	bne.n	8005e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f82d 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e023      	b.n	8005e62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d10e      	bne.n	8005e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f817 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00d      	b.n	8005e62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b09c      	sub	sp, #112	; 0x70
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7a:	e0a5      	b.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	f000 80a1 	beq.w	8005fc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fb f8cf 	bl	8001028 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d13e      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e067      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d04f      	beq.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f36:	d147      	bne.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	637b      	str	r3, [r7, #52]	; 0x34
 8005f62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e6      	bne.n	8005f42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	613b      	str	r3, [r7, #16]
   return(result);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3308      	adds	r3, #8
 8005f92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f94:	623a      	str	r2, [r7, #32]
 8005f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69f9      	ldr	r1, [r7, #28]
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e010      	b.n	8005fea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69da      	ldr	r2, [r3, #28]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	bf0c      	ite	eq
 8005fd8:	2301      	moveq	r3, #1
 8005fda:	2300      	movne	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	79fb      	ldrb	r3, [r7, #7]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	f43f af4a 	beq.w	8005e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3770      	adds	r7, #112	; 0x70
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <__errno>:
 8005ff4:	4b01      	ldr	r3, [pc, #4]	; (8005ffc <__errno+0x8>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	2000000c 	.word	0x2000000c

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	4d0d      	ldr	r5, [pc, #52]	; (8006038 <__libc_init_array+0x38>)
 8006004:	4c0d      	ldr	r4, [pc, #52]	; (800603c <__libc_init_array+0x3c>)
 8006006:	1b64      	subs	r4, r4, r5
 8006008:	10a4      	asrs	r4, r4, #2
 800600a:	2600      	movs	r6, #0
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	4d0b      	ldr	r5, [pc, #44]	; (8006040 <__libc_init_array+0x40>)
 8006012:	4c0c      	ldr	r4, [pc, #48]	; (8006044 <__libc_init_array+0x44>)
 8006014:	f001 f832 	bl	800707c <_init>
 8006018:	1b64      	subs	r4, r4, r5
 800601a:	10a4      	asrs	r4, r4, #2
 800601c:	2600      	movs	r6, #0
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	f855 3b04 	ldr.w	r3, [r5], #4
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	080072c8 	.word	0x080072c8
 800603c:	080072c8 	.word	0x080072c8
 8006040:	080072c8 	.word	0x080072c8
 8006044:	080072cc 	.word	0x080072cc

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	4291      	cmp	r1, r2
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <memset>:
 8006064:	4402      	add	r2, r0
 8006066:	4603      	mov	r3, r0
 8006068:	4293      	cmp	r3, r2
 800606a:	d100      	bne.n	800606e <memset+0xa>
 800606c:	4770      	bx	lr
 800606e:	f803 1b01 	strb.w	r1, [r3], #1
 8006072:	e7f9      	b.n	8006068 <memset+0x4>

08006074 <iprintf>:
 8006074:	b40f      	push	{r0, r1, r2, r3}
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <iprintf+0x2c>)
 8006078:	b513      	push	{r0, r1, r4, lr}
 800607a:	681c      	ldr	r4, [r3, #0]
 800607c:	b124      	cbz	r4, 8006088 <iprintf+0x14>
 800607e:	69a3      	ldr	r3, [r4, #24]
 8006080:	b913      	cbnz	r3, 8006088 <iprintf+0x14>
 8006082:	4620      	mov	r0, r4
 8006084:	f000 fa5e 	bl	8006544 <__sinit>
 8006088:	ab05      	add	r3, sp, #20
 800608a:	9a04      	ldr	r2, [sp, #16]
 800608c:	68a1      	ldr	r1, [r4, #8]
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fc67 	bl	8006964 <_vfiprintf_r>
 8006096:	b002      	add	sp, #8
 8006098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr
 80060a0:	2000000c 	.word	0x2000000c

080060a4 <_puts_r>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	460e      	mov	r6, r1
 80060a8:	4605      	mov	r5, r0
 80060aa:	b118      	cbz	r0, 80060b4 <_puts_r+0x10>
 80060ac:	6983      	ldr	r3, [r0, #24]
 80060ae:	b90b      	cbnz	r3, 80060b4 <_puts_r+0x10>
 80060b0:	f000 fa48 	bl	8006544 <__sinit>
 80060b4:	69ab      	ldr	r3, [r5, #24]
 80060b6:	68ac      	ldr	r4, [r5, #8]
 80060b8:	b913      	cbnz	r3, 80060c0 <_puts_r+0x1c>
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 fa42 	bl	8006544 <__sinit>
 80060c0:	4b2c      	ldr	r3, [pc, #176]	; (8006174 <_puts_r+0xd0>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d120      	bne.n	8006108 <_puts_r+0x64>
 80060c6:	686c      	ldr	r4, [r5, #4]
 80060c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ca:	07db      	lsls	r3, r3, #31
 80060cc:	d405      	bmi.n	80060da <_puts_r+0x36>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	0598      	lsls	r0, r3, #22
 80060d2:	d402      	bmi.n	80060da <_puts_r+0x36>
 80060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d6:	f000 fad3 	bl	8006680 <__retarget_lock_acquire_recursive>
 80060da:	89a3      	ldrh	r3, [r4, #12]
 80060dc:	0719      	lsls	r1, r3, #28
 80060de:	d51d      	bpl.n	800611c <_puts_r+0x78>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	b1db      	cbz	r3, 800611c <_puts_r+0x78>
 80060e4:	3e01      	subs	r6, #1
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060ec:	3b01      	subs	r3, #1
 80060ee:	60a3      	str	r3, [r4, #8]
 80060f0:	bb39      	cbnz	r1, 8006142 <_puts_r+0x9e>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da38      	bge.n	8006168 <_puts_r+0xc4>
 80060f6:	4622      	mov	r2, r4
 80060f8:	210a      	movs	r1, #10
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 f848 	bl	8006190 <__swbuf_r>
 8006100:	3001      	adds	r0, #1
 8006102:	d011      	beq.n	8006128 <_puts_r+0x84>
 8006104:	250a      	movs	r5, #10
 8006106:	e011      	b.n	800612c <_puts_r+0x88>
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <_puts_r+0xd4>)
 800610a:	429c      	cmp	r4, r3
 800610c:	d101      	bne.n	8006112 <_puts_r+0x6e>
 800610e:	68ac      	ldr	r4, [r5, #8]
 8006110:	e7da      	b.n	80060c8 <_puts_r+0x24>
 8006112:	4b1a      	ldr	r3, [pc, #104]	; (800617c <_puts_r+0xd8>)
 8006114:	429c      	cmp	r4, r3
 8006116:	bf08      	it	eq
 8006118:	68ec      	ldreq	r4, [r5, #12]
 800611a:	e7d5      	b.n	80060c8 <_puts_r+0x24>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f000 f888 	bl	8006234 <__swsetup_r>
 8006124:	2800      	cmp	r0, #0
 8006126:	d0dd      	beq.n	80060e4 <_puts_r+0x40>
 8006128:	f04f 35ff 	mov.w	r5, #4294967295
 800612c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612e:	07da      	lsls	r2, r3, #31
 8006130:	d405      	bmi.n	800613e <_puts_r+0x9a>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	d402      	bmi.n	800613e <_puts_r+0x9a>
 8006138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613a:	f000 faa2 	bl	8006682 <__retarget_lock_release_recursive>
 800613e:	4628      	mov	r0, r5
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	2b00      	cmp	r3, #0
 8006144:	da04      	bge.n	8006150 <_puts_r+0xac>
 8006146:	69a2      	ldr	r2, [r4, #24]
 8006148:	429a      	cmp	r2, r3
 800614a:	dc06      	bgt.n	800615a <_puts_r+0xb6>
 800614c:	290a      	cmp	r1, #10
 800614e:	d004      	beq.n	800615a <_puts_r+0xb6>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	6022      	str	r2, [r4, #0]
 8006156:	7019      	strb	r1, [r3, #0]
 8006158:	e7c5      	b.n	80060e6 <_puts_r+0x42>
 800615a:	4622      	mov	r2, r4
 800615c:	4628      	mov	r0, r5
 800615e:	f000 f817 	bl	8006190 <__swbuf_r>
 8006162:	3001      	adds	r0, #1
 8006164:	d1bf      	bne.n	80060e6 <_puts_r+0x42>
 8006166:	e7df      	b.n	8006128 <_puts_r+0x84>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	250a      	movs	r5, #10
 800616c:	1c5a      	adds	r2, r3, #1
 800616e:	6022      	str	r2, [r4, #0]
 8006170:	701d      	strb	r5, [r3, #0]
 8006172:	e7db      	b.n	800612c <_puts_r+0x88>
 8006174:	0800724c 	.word	0x0800724c
 8006178:	0800726c 	.word	0x0800726c
 800617c:	0800722c 	.word	0x0800722c

08006180 <puts>:
 8006180:	4b02      	ldr	r3, [pc, #8]	; (800618c <puts+0xc>)
 8006182:	4601      	mov	r1, r0
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f7ff bf8d 	b.w	80060a4 <_puts_r>
 800618a:	bf00      	nop
 800618c:	2000000c 	.word	0x2000000c

08006190 <__swbuf_r>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	460e      	mov	r6, r1
 8006194:	4614      	mov	r4, r2
 8006196:	4605      	mov	r5, r0
 8006198:	b118      	cbz	r0, 80061a2 <__swbuf_r+0x12>
 800619a:	6983      	ldr	r3, [r0, #24]
 800619c:	b90b      	cbnz	r3, 80061a2 <__swbuf_r+0x12>
 800619e:	f000 f9d1 	bl	8006544 <__sinit>
 80061a2:	4b21      	ldr	r3, [pc, #132]	; (8006228 <__swbuf_r+0x98>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	d12b      	bne.n	8006200 <__swbuf_r+0x70>
 80061a8:	686c      	ldr	r4, [r5, #4]
 80061aa:	69a3      	ldr	r3, [r4, #24]
 80061ac:	60a3      	str	r3, [r4, #8]
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	071a      	lsls	r2, r3, #28
 80061b2:	d52f      	bpl.n	8006214 <__swbuf_r+0x84>
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	b36b      	cbz	r3, 8006214 <__swbuf_r+0x84>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	6820      	ldr	r0, [r4, #0]
 80061bc:	1ac0      	subs	r0, r0, r3
 80061be:	6963      	ldr	r3, [r4, #20]
 80061c0:	b2f6      	uxtb	r6, r6
 80061c2:	4283      	cmp	r3, r0
 80061c4:	4637      	mov	r7, r6
 80061c6:	dc04      	bgt.n	80061d2 <__swbuf_r+0x42>
 80061c8:	4621      	mov	r1, r4
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f926 	bl	800641c <_fflush_r>
 80061d0:	bb30      	cbnz	r0, 8006220 <__swbuf_r+0x90>
 80061d2:	68a3      	ldr	r3, [r4, #8]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	60a3      	str	r3, [r4, #8]
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	701e      	strb	r6, [r3, #0]
 80061e0:	6963      	ldr	r3, [r4, #20]
 80061e2:	3001      	adds	r0, #1
 80061e4:	4283      	cmp	r3, r0
 80061e6:	d004      	beq.n	80061f2 <__swbuf_r+0x62>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	07db      	lsls	r3, r3, #31
 80061ec:	d506      	bpl.n	80061fc <__swbuf_r+0x6c>
 80061ee:	2e0a      	cmp	r6, #10
 80061f0:	d104      	bne.n	80061fc <__swbuf_r+0x6c>
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 f911 	bl	800641c <_fflush_r>
 80061fa:	b988      	cbnz	r0, 8006220 <__swbuf_r+0x90>
 80061fc:	4638      	mov	r0, r7
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <__swbuf_r+0x9c>)
 8006202:	429c      	cmp	r4, r3
 8006204:	d101      	bne.n	800620a <__swbuf_r+0x7a>
 8006206:	68ac      	ldr	r4, [r5, #8]
 8006208:	e7cf      	b.n	80061aa <__swbuf_r+0x1a>
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <__swbuf_r+0xa0>)
 800620c:	429c      	cmp	r4, r3
 800620e:	bf08      	it	eq
 8006210:	68ec      	ldreq	r4, [r5, #12]
 8006212:	e7ca      	b.n	80061aa <__swbuf_r+0x1a>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f000 f80c 	bl	8006234 <__swsetup_r>
 800621c:	2800      	cmp	r0, #0
 800621e:	d0cb      	beq.n	80061b8 <__swbuf_r+0x28>
 8006220:	f04f 37ff 	mov.w	r7, #4294967295
 8006224:	e7ea      	b.n	80061fc <__swbuf_r+0x6c>
 8006226:	bf00      	nop
 8006228:	0800724c 	.word	0x0800724c
 800622c:	0800726c 	.word	0x0800726c
 8006230:	0800722c 	.word	0x0800722c

08006234 <__swsetup_r>:
 8006234:	4b32      	ldr	r3, [pc, #200]	; (8006300 <__swsetup_r+0xcc>)
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	681d      	ldr	r5, [r3, #0]
 800623a:	4606      	mov	r6, r0
 800623c:	460c      	mov	r4, r1
 800623e:	b125      	cbz	r5, 800624a <__swsetup_r+0x16>
 8006240:	69ab      	ldr	r3, [r5, #24]
 8006242:	b913      	cbnz	r3, 800624a <__swsetup_r+0x16>
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f97d 	bl	8006544 <__sinit>
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <__swsetup_r+0xd0>)
 800624c:	429c      	cmp	r4, r3
 800624e:	d10f      	bne.n	8006270 <__swsetup_r+0x3c>
 8006250:	686c      	ldr	r4, [r5, #4]
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006258:	0719      	lsls	r1, r3, #28
 800625a:	d42c      	bmi.n	80062b6 <__swsetup_r+0x82>
 800625c:	06dd      	lsls	r5, r3, #27
 800625e:	d411      	bmi.n	8006284 <__swsetup_r+0x50>
 8006260:	2309      	movs	r3, #9
 8006262:	6033      	str	r3, [r6, #0]
 8006264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	f04f 30ff 	mov.w	r0, #4294967295
 800626e:	e03e      	b.n	80062ee <__swsetup_r+0xba>
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <__swsetup_r+0xd4>)
 8006272:	429c      	cmp	r4, r3
 8006274:	d101      	bne.n	800627a <__swsetup_r+0x46>
 8006276:	68ac      	ldr	r4, [r5, #8]
 8006278:	e7eb      	b.n	8006252 <__swsetup_r+0x1e>
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <__swsetup_r+0xd8>)
 800627c:	429c      	cmp	r4, r3
 800627e:	bf08      	it	eq
 8006280:	68ec      	ldreq	r4, [r5, #12]
 8006282:	e7e6      	b.n	8006252 <__swsetup_r+0x1e>
 8006284:	0758      	lsls	r0, r3, #29
 8006286:	d512      	bpl.n	80062ae <__swsetup_r+0x7a>
 8006288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628a:	b141      	cbz	r1, 800629e <__swsetup_r+0x6a>
 800628c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006290:	4299      	cmp	r1, r3
 8006292:	d002      	beq.n	800629a <__swsetup_r+0x66>
 8006294:	4630      	mov	r0, r6
 8006296:	f000 fa5b 	bl	8006750 <_free_r>
 800629a:	2300      	movs	r3, #0
 800629c:	6363      	str	r3, [r4, #52]	; 0x34
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062a4:	81a3      	strh	r3, [r4, #12]
 80062a6:	2300      	movs	r3, #0
 80062a8:	6063      	str	r3, [r4, #4]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f043 0308 	orr.w	r3, r3, #8
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	b94b      	cbnz	r3, 80062ce <__swsetup_r+0x9a>
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d003      	beq.n	80062ce <__swsetup_r+0x9a>
 80062c6:	4621      	mov	r1, r4
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 fa01 	bl	80066d0 <__smakebuf_r>
 80062ce:	89a0      	ldrh	r0, [r4, #12]
 80062d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d4:	f010 0301 	ands.w	r3, r0, #1
 80062d8:	d00a      	beq.n	80062f0 <__swsetup_r+0xbc>
 80062da:	2300      	movs	r3, #0
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	6963      	ldr	r3, [r4, #20]
 80062e0:	425b      	negs	r3, r3
 80062e2:	61a3      	str	r3, [r4, #24]
 80062e4:	6923      	ldr	r3, [r4, #16]
 80062e6:	b943      	cbnz	r3, 80062fa <__swsetup_r+0xc6>
 80062e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062ec:	d1ba      	bne.n	8006264 <__swsetup_r+0x30>
 80062ee:	bd70      	pop	{r4, r5, r6, pc}
 80062f0:	0781      	lsls	r1, r0, #30
 80062f2:	bf58      	it	pl
 80062f4:	6963      	ldrpl	r3, [r4, #20]
 80062f6:	60a3      	str	r3, [r4, #8]
 80062f8:	e7f4      	b.n	80062e4 <__swsetup_r+0xb0>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e7f7      	b.n	80062ee <__swsetup_r+0xba>
 80062fe:	bf00      	nop
 8006300:	2000000c 	.word	0x2000000c
 8006304:	0800724c 	.word	0x0800724c
 8006308:	0800726c 	.word	0x0800726c
 800630c:	0800722c 	.word	0x0800722c

08006310 <__sflush_r>:
 8006310:	898a      	ldrh	r2, [r1, #12]
 8006312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	4605      	mov	r5, r0
 8006318:	0710      	lsls	r0, r2, #28
 800631a:	460c      	mov	r4, r1
 800631c:	d458      	bmi.n	80063d0 <__sflush_r+0xc0>
 800631e:	684b      	ldr	r3, [r1, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	dc05      	bgt.n	8006330 <__sflush_r+0x20>
 8006324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006326:	2b00      	cmp	r3, #0
 8006328:	dc02      	bgt.n	8006330 <__sflush_r+0x20>
 800632a:	2000      	movs	r0, #0
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006332:	2e00      	cmp	r6, #0
 8006334:	d0f9      	beq.n	800632a <__sflush_r+0x1a>
 8006336:	2300      	movs	r3, #0
 8006338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800633c:	682f      	ldr	r7, [r5, #0]
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	d032      	beq.n	80063a8 <__sflush_r+0x98>
 8006342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	075a      	lsls	r2, r3, #29
 8006348:	d505      	bpl.n	8006356 <__sflush_r+0x46>
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	1ac0      	subs	r0, r0, r3
 800634e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006350:	b10b      	cbz	r3, 8006356 <__sflush_r+0x46>
 8006352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006354:	1ac0      	subs	r0, r0, r3
 8006356:	2300      	movs	r3, #0
 8006358:	4602      	mov	r2, r0
 800635a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	4628      	mov	r0, r5
 8006360:	47b0      	blx	r6
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	d106      	bne.n	8006376 <__sflush_r+0x66>
 8006368:	6829      	ldr	r1, [r5, #0]
 800636a:	291d      	cmp	r1, #29
 800636c:	d82c      	bhi.n	80063c8 <__sflush_r+0xb8>
 800636e:	4a2a      	ldr	r2, [pc, #168]	; (8006418 <__sflush_r+0x108>)
 8006370:	40ca      	lsrs	r2, r1
 8006372:	07d6      	lsls	r6, r2, #31
 8006374:	d528      	bpl.n	80063c8 <__sflush_r+0xb8>
 8006376:	2200      	movs	r2, #0
 8006378:	6062      	str	r2, [r4, #4]
 800637a:	04d9      	lsls	r1, r3, #19
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	d504      	bpl.n	800638c <__sflush_r+0x7c>
 8006382:	1c42      	adds	r2, r0, #1
 8006384:	d101      	bne.n	800638a <__sflush_r+0x7a>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	b903      	cbnz	r3, 800638c <__sflush_r+0x7c>
 800638a:	6560      	str	r0, [r4, #84]	; 0x54
 800638c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638e:	602f      	str	r7, [r5, #0]
 8006390:	2900      	cmp	r1, #0
 8006392:	d0ca      	beq.n	800632a <__sflush_r+0x1a>
 8006394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__sflush_r+0x92>
 800639c:	4628      	mov	r0, r5
 800639e:	f000 f9d7 	bl	8006750 <_free_r>
 80063a2:	2000      	movs	r0, #0
 80063a4:	6360      	str	r0, [r4, #52]	; 0x34
 80063a6:	e7c1      	b.n	800632c <__sflush_r+0x1c>
 80063a8:	6a21      	ldr	r1, [r4, #32]
 80063aa:	2301      	movs	r3, #1
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b0      	blx	r6
 80063b0:	1c41      	adds	r1, r0, #1
 80063b2:	d1c7      	bne.n	8006344 <__sflush_r+0x34>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0c4      	beq.n	8006344 <__sflush_r+0x34>
 80063ba:	2b1d      	cmp	r3, #29
 80063bc:	d001      	beq.n	80063c2 <__sflush_r+0xb2>
 80063be:	2b16      	cmp	r3, #22
 80063c0:	d101      	bne.n	80063c6 <__sflush_r+0xb6>
 80063c2:	602f      	str	r7, [r5, #0]
 80063c4:	e7b1      	b.n	800632a <__sflush_r+0x1a>
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	e7ad      	b.n	800632c <__sflush_r+0x1c>
 80063d0:	690f      	ldr	r7, [r1, #16]
 80063d2:	2f00      	cmp	r7, #0
 80063d4:	d0a9      	beq.n	800632a <__sflush_r+0x1a>
 80063d6:	0793      	lsls	r3, r2, #30
 80063d8:	680e      	ldr	r6, [r1, #0]
 80063da:	bf08      	it	eq
 80063dc:	694b      	ldreq	r3, [r1, #20]
 80063de:	600f      	str	r7, [r1, #0]
 80063e0:	bf18      	it	ne
 80063e2:	2300      	movne	r3, #0
 80063e4:	eba6 0807 	sub.w	r8, r6, r7
 80063e8:	608b      	str	r3, [r1, #8]
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd9c      	ble.n	800632a <__sflush_r+0x1a>
 80063f0:	6a21      	ldr	r1, [r4, #32]
 80063f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f4:	4643      	mov	r3, r8
 80063f6:	463a      	mov	r2, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b0      	blx	r6
 80063fc:	2800      	cmp	r0, #0
 80063fe:	dc06      	bgt.n	800640e <__sflush_r+0xfe>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	e78e      	b.n	800632c <__sflush_r+0x1c>
 800640e:	4407      	add	r7, r0
 8006410:	eba8 0800 	sub.w	r8, r8, r0
 8006414:	e7e9      	b.n	80063ea <__sflush_r+0xda>
 8006416:	bf00      	nop
 8006418:	20400001 	.word	0x20400001

0800641c <_fflush_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	690b      	ldr	r3, [r1, #16]
 8006420:	4605      	mov	r5, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b913      	cbnz	r3, 800642c <_fflush_r+0x10>
 8006426:	2500      	movs	r5, #0
 8006428:	4628      	mov	r0, r5
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	b118      	cbz	r0, 8006436 <_fflush_r+0x1a>
 800642e:	6983      	ldr	r3, [r0, #24]
 8006430:	b90b      	cbnz	r3, 8006436 <_fflush_r+0x1a>
 8006432:	f000 f887 	bl	8006544 <__sinit>
 8006436:	4b14      	ldr	r3, [pc, #80]	; (8006488 <_fflush_r+0x6c>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d11b      	bne.n	8006474 <_fflush_r+0x58>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0ef      	beq.n	8006426 <_fflush_r+0xa>
 8006446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006448:	07d0      	lsls	r0, r2, #31
 800644a:	d404      	bmi.n	8006456 <_fflush_r+0x3a>
 800644c:	0599      	lsls	r1, r3, #22
 800644e:	d402      	bmi.n	8006456 <_fflush_r+0x3a>
 8006450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006452:	f000 f915 	bl	8006680 <__retarget_lock_acquire_recursive>
 8006456:	4628      	mov	r0, r5
 8006458:	4621      	mov	r1, r4
 800645a:	f7ff ff59 	bl	8006310 <__sflush_r>
 800645e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006460:	07da      	lsls	r2, r3, #31
 8006462:	4605      	mov	r5, r0
 8006464:	d4e0      	bmi.n	8006428 <_fflush_r+0xc>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	d4dd      	bmi.n	8006428 <_fflush_r+0xc>
 800646c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646e:	f000 f908 	bl	8006682 <__retarget_lock_release_recursive>
 8006472:	e7d9      	b.n	8006428 <_fflush_r+0xc>
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <_fflush_r+0x70>)
 8006476:	429c      	cmp	r4, r3
 8006478:	d101      	bne.n	800647e <_fflush_r+0x62>
 800647a:	68ac      	ldr	r4, [r5, #8]
 800647c:	e7df      	b.n	800643e <_fflush_r+0x22>
 800647e:	4b04      	ldr	r3, [pc, #16]	; (8006490 <_fflush_r+0x74>)
 8006480:	429c      	cmp	r4, r3
 8006482:	bf08      	it	eq
 8006484:	68ec      	ldreq	r4, [r5, #12]
 8006486:	e7da      	b.n	800643e <_fflush_r+0x22>
 8006488:	0800724c 	.word	0x0800724c
 800648c:	0800726c 	.word	0x0800726c
 8006490:	0800722c 	.word	0x0800722c

08006494 <std>:
 8006494:	2300      	movs	r3, #0
 8006496:	b510      	push	{r4, lr}
 8006498:	4604      	mov	r4, r0
 800649a:	e9c0 3300 	strd	r3, r3, [r0]
 800649e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064a2:	6083      	str	r3, [r0, #8]
 80064a4:	8181      	strh	r1, [r0, #12]
 80064a6:	6643      	str	r3, [r0, #100]	; 0x64
 80064a8:	81c2      	strh	r2, [r0, #14]
 80064aa:	6183      	str	r3, [r0, #24]
 80064ac:	4619      	mov	r1, r3
 80064ae:	2208      	movs	r2, #8
 80064b0:	305c      	adds	r0, #92	; 0x5c
 80064b2:	f7ff fdd7 	bl	8006064 <memset>
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <std+0x38>)
 80064b8:	6263      	str	r3, [r4, #36]	; 0x24
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <std+0x3c>)
 80064bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <std+0x40>)
 80064c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <std+0x44>)
 80064c4:	6224      	str	r4, [r4, #32]
 80064c6:	6323      	str	r3, [r4, #48]	; 0x30
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	08006f0d 	.word	0x08006f0d
 80064d0:	08006f2f 	.word	0x08006f2f
 80064d4:	08006f67 	.word	0x08006f67
 80064d8:	08006f8b 	.word	0x08006f8b

080064dc <_cleanup_r>:
 80064dc:	4901      	ldr	r1, [pc, #4]	; (80064e4 <_cleanup_r+0x8>)
 80064de:	f000 b8af 	b.w	8006640 <_fwalk_reent>
 80064e2:	bf00      	nop
 80064e4:	0800641d 	.word	0x0800641d

080064e8 <__sfmoreglue>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	2268      	movs	r2, #104	; 0x68
 80064ec:	1e4d      	subs	r5, r1, #1
 80064ee:	4355      	muls	r5, r2
 80064f0:	460e      	mov	r6, r1
 80064f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064f6:	f000 f997 	bl	8006828 <_malloc_r>
 80064fa:	4604      	mov	r4, r0
 80064fc:	b140      	cbz	r0, 8006510 <__sfmoreglue+0x28>
 80064fe:	2100      	movs	r1, #0
 8006500:	e9c0 1600 	strd	r1, r6, [r0]
 8006504:	300c      	adds	r0, #12
 8006506:	60a0      	str	r0, [r4, #8]
 8006508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800650c:	f7ff fdaa 	bl	8006064 <memset>
 8006510:	4620      	mov	r0, r4
 8006512:	bd70      	pop	{r4, r5, r6, pc}

08006514 <__sfp_lock_acquire>:
 8006514:	4801      	ldr	r0, [pc, #4]	; (800651c <__sfp_lock_acquire+0x8>)
 8006516:	f000 b8b3 	b.w	8006680 <__retarget_lock_acquire_recursive>
 800651a:	bf00      	nop
 800651c:	200002b1 	.word	0x200002b1

08006520 <__sfp_lock_release>:
 8006520:	4801      	ldr	r0, [pc, #4]	; (8006528 <__sfp_lock_release+0x8>)
 8006522:	f000 b8ae 	b.w	8006682 <__retarget_lock_release_recursive>
 8006526:	bf00      	nop
 8006528:	200002b1 	.word	0x200002b1

0800652c <__sinit_lock_acquire>:
 800652c:	4801      	ldr	r0, [pc, #4]	; (8006534 <__sinit_lock_acquire+0x8>)
 800652e:	f000 b8a7 	b.w	8006680 <__retarget_lock_acquire_recursive>
 8006532:	bf00      	nop
 8006534:	200002b2 	.word	0x200002b2

08006538 <__sinit_lock_release>:
 8006538:	4801      	ldr	r0, [pc, #4]	; (8006540 <__sinit_lock_release+0x8>)
 800653a:	f000 b8a2 	b.w	8006682 <__retarget_lock_release_recursive>
 800653e:	bf00      	nop
 8006540:	200002b2 	.word	0x200002b2

08006544 <__sinit>:
 8006544:	b510      	push	{r4, lr}
 8006546:	4604      	mov	r4, r0
 8006548:	f7ff fff0 	bl	800652c <__sinit_lock_acquire>
 800654c:	69a3      	ldr	r3, [r4, #24]
 800654e:	b11b      	cbz	r3, 8006558 <__sinit+0x14>
 8006550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006554:	f7ff bff0 	b.w	8006538 <__sinit_lock_release>
 8006558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800655c:	6523      	str	r3, [r4, #80]	; 0x50
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <__sinit+0x68>)
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <__sinit+0x6c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	62a2      	str	r2, [r4, #40]	; 0x28
 8006566:	42a3      	cmp	r3, r4
 8006568:	bf04      	itt	eq
 800656a:	2301      	moveq	r3, #1
 800656c:	61a3      	streq	r3, [r4, #24]
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f820 	bl	80065b4 <__sfp>
 8006574:	6060      	str	r0, [r4, #4]
 8006576:	4620      	mov	r0, r4
 8006578:	f000 f81c 	bl	80065b4 <__sfp>
 800657c:	60a0      	str	r0, [r4, #8]
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f818 	bl	80065b4 <__sfp>
 8006584:	2200      	movs	r2, #0
 8006586:	60e0      	str	r0, [r4, #12]
 8006588:	2104      	movs	r1, #4
 800658a:	6860      	ldr	r0, [r4, #4]
 800658c:	f7ff ff82 	bl	8006494 <std>
 8006590:	68a0      	ldr	r0, [r4, #8]
 8006592:	2201      	movs	r2, #1
 8006594:	2109      	movs	r1, #9
 8006596:	f7ff ff7d 	bl	8006494 <std>
 800659a:	68e0      	ldr	r0, [r4, #12]
 800659c:	2202      	movs	r2, #2
 800659e:	2112      	movs	r1, #18
 80065a0:	f7ff ff78 	bl	8006494 <std>
 80065a4:	2301      	movs	r3, #1
 80065a6:	61a3      	str	r3, [r4, #24]
 80065a8:	e7d2      	b.n	8006550 <__sinit+0xc>
 80065aa:	bf00      	nop
 80065ac:	08007228 	.word	0x08007228
 80065b0:	080064dd 	.word	0x080064dd

080065b4 <__sfp>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	4607      	mov	r7, r0
 80065b8:	f7ff ffac 	bl	8006514 <__sfp_lock_acquire>
 80065bc:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <__sfp+0x84>)
 80065be:	681e      	ldr	r6, [r3, #0]
 80065c0:	69b3      	ldr	r3, [r6, #24]
 80065c2:	b913      	cbnz	r3, 80065ca <__sfp+0x16>
 80065c4:	4630      	mov	r0, r6
 80065c6:	f7ff ffbd 	bl	8006544 <__sinit>
 80065ca:	3648      	adds	r6, #72	; 0x48
 80065cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	d503      	bpl.n	80065dc <__sfp+0x28>
 80065d4:	6833      	ldr	r3, [r6, #0]
 80065d6:	b30b      	cbz	r3, 800661c <__sfp+0x68>
 80065d8:	6836      	ldr	r6, [r6, #0]
 80065da:	e7f7      	b.n	80065cc <__sfp+0x18>
 80065dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065e0:	b9d5      	cbnz	r5, 8006618 <__sfp+0x64>
 80065e2:	4b16      	ldr	r3, [pc, #88]	; (800663c <__sfp+0x88>)
 80065e4:	60e3      	str	r3, [r4, #12]
 80065e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ea:	6665      	str	r5, [r4, #100]	; 0x64
 80065ec:	f000 f847 	bl	800667e <__retarget_lock_init_recursive>
 80065f0:	f7ff ff96 	bl	8006520 <__sfp_lock_release>
 80065f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065fc:	6025      	str	r5, [r4, #0]
 80065fe:	61a5      	str	r5, [r4, #24]
 8006600:	2208      	movs	r2, #8
 8006602:	4629      	mov	r1, r5
 8006604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006608:	f7ff fd2c 	bl	8006064 <memset>
 800660c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006614:	4620      	mov	r0, r4
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	3468      	adds	r4, #104	; 0x68
 800661a:	e7d9      	b.n	80065d0 <__sfp+0x1c>
 800661c:	2104      	movs	r1, #4
 800661e:	4638      	mov	r0, r7
 8006620:	f7ff ff62 	bl	80064e8 <__sfmoreglue>
 8006624:	4604      	mov	r4, r0
 8006626:	6030      	str	r0, [r6, #0]
 8006628:	2800      	cmp	r0, #0
 800662a:	d1d5      	bne.n	80065d8 <__sfp+0x24>
 800662c:	f7ff ff78 	bl	8006520 <__sfp_lock_release>
 8006630:	230c      	movs	r3, #12
 8006632:	603b      	str	r3, [r7, #0]
 8006634:	e7ee      	b.n	8006614 <__sfp+0x60>
 8006636:	bf00      	nop
 8006638:	08007228 	.word	0x08007228
 800663c:	ffff0001 	.word	0xffff0001

08006640 <_fwalk_reent>:
 8006640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006644:	4606      	mov	r6, r0
 8006646:	4688      	mov	r8, r1
 8006648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800664c:	2700      	movs	r7, #0
 800664e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006652:	f1b9 0901 	subs.w	r9, r9, #1
 8006656:	d505      	bpl.n	8006664 <_fwalk_reent+0x24>
 8006658:	6824      	ldr	r4, [r4, #0]
 800665a:	2c00      	cmp	r4, #0
 800665c:	d1f7      	bne.n	800664e <_fwalk_reent+0xe>
 800665e:	4638      	mov	r0, r7
 8006660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006664:	89ab      	ldrh	r3, [r5, #12]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d907      	bls.n	800667a <_fwalk_reent+0x3a>
 800666a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800666e:	3301      	adds	r3, #1
 8006670:	d003      	beq.n	800667a <_fwalk_reent+0x3a>
 8006672:	4629      	mov	r1, r5
 8006674:	4630      	mov	r0, r6
 8006676:	47c0      	blx	r8
 8006678:	4307      	orrs	r7, r0
 800667a:	3568      	adds	r5, #104	; 0x68
 800667c:	e7e9      	b.n	8006652 <_fwalk_reent+0x12>

0800667e <__retarget_lock_init_recursive>:
 800667e:	4770      	bx	lr

08006680 <__retarget_lock_acquire_recursive>:
 8006680:	4770      	bx	lr

08006682 <__retarget_lock_release_recursive>:
 8006682:	4770      	bx	lr

08006684 <__swhatbuf_r>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	460e      	mov	r6, r1
 8006688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800668c:	2900      	cmp	r1, #0
 800668e:	b096      	sub	sp, #88	; 0x58
 8006690:	4614      	mov	r4, r2
 8006692:	461d      	mov	r5, r3
 8006694:	da08      	bge.n	80066a8 <__swhatbuf_r+0x24>
 8006696:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	602a      	str	r2, [r5, #0]
 800669e:	061a      	lsls	r2, r3, #24
 80066a0:	d410      	bmi.n	80066c4 <__swhatbuf_r+0x40>
 80066a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a6:	e00e      	b.n	80066c6 <__swhatbuf_r+0x42>
 80066a8:	466a      	mov	r2, sp
 80066aa:	f000 fc95 	bl	8006fd8 <_fstat_r>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	dbf1      	blt.n	8006696 <__swhatbuf_r+0x12>
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066bc:	425a      	negs	r2, r3
 80066be:	415a      	adcs	r2, r3
 80066c0:	602a      	str	r2, [r5, #0]
 80066c2:	e7ee      	b.n	80066a2 <__swhatbuf_r+0x1e>
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	2000      	movs	r0, #0
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	b016      	add	sp, #88	; 0x58
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080066d0 <__smakebuf_r>:
 80066d0:	898b      	ldrh	r3, [r1, #12]
 80066d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066d4:	079d      	lsls	r5, r3, #30
 80066d6:	4606      	mov	r6, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	d507      	bpl.n	80066ec <__smakebuf_r+0x1c>
 80066dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	2301      	movs	r3, #1
 80066e6:	6163      	str	r3, [r4, #20]
 80066e8:	b002      	add	sp, #8
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
 80066ec:	ab01      	add	r3, sp, #4
 80066ee:	466a      	mov	r2, sp
 80066f0:	f7ff ffc8 	bl	8006684 <__swhatbuf_r>
 80066f4:	9900      	ldr	r1, [sp, #0]
 80066f6:	4605      	mov	r5, r0
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 f895 	bl	8006828 <_malloc_r>
 80066fe:	b948      	cbnz	r0, 8006714 <__smakebuf_r+0x44>
 8006700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006704:	059a      	lsls	r2, r3, #22
 8006706:	d4ef      	bmi.n	80066e8 <__smakebuf_r+0x18>
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	f043 0302 	orr.w	r3, r3, #2
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	e7e3      	b.n	80066dc <__smakebuf_r+0xc>
 8006714:	4b0d      	ldr	r3, [pc, #52]	; (800674c <__smakebuf_r+0x7c>)
 8006716:	62b3      	str	r3, [r6, #40]	; 0x28
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	6020      	str	r0, [r4, #0]
 800671c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	9b00      	ldr	r3, [sp, #0]
 8006724:	6163      	str	r3, [r4, #20]
 8006726:	9b01      	ldr	r3, [sp, #4]
 8006728:	6120      	str	r0, [r4, #16]
 800672a:	b15b      	cbz	r3, 8006744 <__smakebuf_r+0x74>
 800672c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006730:	4630      	mov	r0, r6
 8006732:	f000 fc63 	bl	8006ffc <_isatty_r>
 8006736:	b128      	cbz	r0, 8006744 <__smakebuf_r+0x74>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	81a3      	strh	r3, [r4, #12]
 8006744:	89a0      	ldrh	r0, [r4, #12]
 8006746:	4305      	orrs	r5, r0
 8006748:	81a5      	strh	r5, [r4, #12]
 800674a:	e7cd      	b.n	80066e8 <__smakebuf_r+0x18>
 800674c:	080064dd 	.word	0x080064dd

08006750 <_free_r>:
 8006750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006752:	2900      	cmp	r1, #0
 8006754:	d044      	beq.n	80067e0 <_free_r+0x90>
 8006756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675a:	9001      	str	r0, [sp, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f1a1 0404 	sub.w	r4, r1, #4
 8006762:	bfb8      	it	lt
 8006764:	18e4      	addlt	r4, r4, r3
 8006766:	f000 fc6b 	bl	8007040 <__malloc_lock>
 800676a:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <_free_r+0x94>)
 800676c:	9801      	ldr	r0, [sp, #4]
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	b933      	cbnz	r3, 8006780 <_free_r+0x30>
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	6014      	str	r4, [r2, #0]
 8006776:	b003      	add	sp, #12
 8006778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800677c:	f000 bc66 	b.w	800704c <__malloc_unlock>
 8006780:	42a3      	cmp	r3, r4
 8006782:	d908      	bls.n	8006796 <_free_r+0x46>
 8006784:	6825      	ldr	r5, [r4, #0]
 8006786:	1961      	adds	r1, r4, r5
 8006788:	428b      	cmp	r3, r1
 800678a:	bf01      	itttt	eq
 800678c:	6819      	ldreq	r1, [r3, #0]
 800678e:	685b      	ldreq	r3, [r3, #4]
 8006790:	1949      	addeq	r1, r1, r5
 8006792:	6021      	streq	r1, [r4, #0]
 8006794:	e7ed      	b.n	8006772 <_free_r+0x22>
 8006796:	461a      	mov	r2, r3
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	b10b      	cbz	r3, 80067a0 <_free_r+0x50>
 800679c:	42a3      	cmp	r3, r4
 800679e:	d9fa      	bls.n	8006796 <_free_r+0x46>
 80067a0:	6811      	ldr	r1, [r2, #0]
 80067a2:	1855      	adds	r5, r2, r1
 80067a4:	42a5      	cmp	r5, r4
 80067a6:	d10b      	bne.n	80067c0 <_free_r+0x70>
 80067a8:	6824      	ldr	r4, [r4, #0]
 80067aa:	4421      	add	r1, r4
 80067ac:	1854      	adds	r4, r2, r1
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	6011      	str	r1, [r2, #0]
 80067b2:	d1e0      	bne.n	8006776 <_free_r+0x26>
 80067b4:	681c      	ldr	r4, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	6053      	str	r3, [r2, #4]
 80067ba:	4421      	add	r1, r4
 80067bc:	6011      	str	r1, [r2, #0]
 80067be:	e7da      	b.n	8006776 <_free_r+0x26>
 80067c0:	d902      	bls.n	80067c8 <_free_r+0x78>
 80067c2:	230c      	movs	r3, #12
 80067c4:	6003      	str	r3, [r0, #0]
 80067c6:	e7d6      	b.n	8006776 <_free_r+0x26>
 80067c8:	6825      	ldr	r5, [r4, #0]
 80067ca:	1961      	adds	r1, r4, r5
 80067cc:	428b      	cmp	r3, r1
 80067ce:	bf04      	itt	eq
 80067d0:	6819      	ldreq	r1, [r3, #0]
 80067d2:	685b      	ldreq	r3, [r3, #4]
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	bf04      	itt	eq
 80067d8:	1949      	addeq	r1, r1, r5
 80067da:	6021      	streq	r1, [r4, #0]
 80067dc:	6054      	str	r4, [r2, #4]
 80067de:	e7ca      	b.n	8006776 <_free_r+0x26>
 80067e0:	b003      	add	sp, #12
 80067e2:	bd30      	pop	{r4, r5, pc}
 80067e4:	200002b4 	.word	0x200002b4

080067e8 <sbrk_aligned>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4e0e      	ldr	r6, [pc, #56]	; (8006824 <sbrk_aligned+0x3c>)
 80067ec:	460c      	mov	r4, r1
 80067ee:	6831      	ldr	r1, [r6, #0]
 80067f0:	4605      	mov	r5, r0
 80067f2:	b911      	cbnz	r1, 80067fa <sbrk_aligned+0x12>
 80067f4:	f000 fb7a 	bl	8006eec <_sbrk_r>
 80067f8:	6030      	str	r0, [r6, #0]
 80067fa:	4621      	mov	r1, r4
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 fb75 	bl	8006eec <_sbrk_r>
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	d00a      	beq.n	800681c <sbrk_aligned+0x34>
 8006806:	1cc4      	adds	r4, r0, #3
 8006808:	f024 0403 	bic.w	r4, r4, #3
 800680c:	42a0      	cmp	r0, r4
 800680e:	d007      	beq.n	8006820 <sbrk_aligned+0x38>
 8006810:	1a21      	subs	r1, r4, r0
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fb6a 	bl	8006eec <_sbrk_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d101      	bne.n	8006820 <sbrk_aligned+0x38>
 800681c:	f04f 34ff 	mov.w	r4, #4294967295
 8006820:	4620      	mov	r0, r4
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	200002b8 	.word	0x200002b8

08006828 <_malloc_r>:
 8006828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682c:	1ccd      	adds	r5, r1, #3
 800682e:	f025 0503 	bic.w	r5, r5, #3
 8006832:	3508      	adds	r5, #8
 8006834:	2d0c      	cmp	r5, #12
 8006836:	bf38      	it	cc
 8006838:	250c      	movcc	r5, #12
 800683a:	2d00      	cmp	r5, #0
 800683c:	4607      	mov	r7, r0
 800683e:	db01      	blt.n	8006844 <_malloc_r+0x1c>
 8006840:	42a9      	cmp	r1, r5
 8006842:	d905      	bls.n	8006850 <_malloc_r+0x28>
 8006844:	230c      	movs	r3, #12
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	2600      	movs	r6, #0
 800684a:	4630      	mov	r0, r6
 800684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006850:	4e2e      	ldr	r6, [pc, #184]	; (800690c <_malloc_r+0xe4>)
 8006852:	f000 fbf5 	bl	8007040 <__malloc_lock>
 8006856:	6833      	ldr	r3, [r6, #0]
 8006858:	461c      	mov	r4, r3
 800685a:	bb34      	cbnz	r4, 80068aa <_malloc_r+0x82>
 800685c:	4629      	mov	r1, r5
 800685e:	4638      	mov	r0, r7
 8006860:	f7ff ffc2 	bl	80067e8 <sbrk_aligned>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	4604      	mov	r4, r0
 8006868:	d14d      	bne.n	8006906 <_malloc_r+0xde>
 800686a:	6834      	ldr	r4, [r6, #0]
 800686c:	4626      	mov	r6, r4
 800686e:	2e00      	cmp	r6, #0
 8006870:	d140      	bne.n	80068f4 <_malloc_r+0xcc>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	4631      	mov	r1, r6
 8006876:	4638      	mov	r0, r7
 8006878:	eb04 0803 	add.w	r8, r4, r3
 800687c:	f000 fb36 	bl	8006eec <_sbrk_r>
 8006880:	4580      	cmp	r8, r0
 8006882:	d13a      	bne.n	80068fa <_malloc_r+0xd2>
 8006884:	6821      	ldr	r1, [r4, #0]
 8006886:	3503      	adds	r5, #3
 8006888:	1a6d      	subs	r5, r5, r1
 800688a:	f025 0503 	bic.w	r5, r5, #3
 800688e:	3508      	adds	r5, #8
 8006890:	2d0c      	cmp	r5, #12
 8006892:	bf38      	it	cc
 8006894:	250c      	movcc	r5, #12
 8006896:	4629      	mov	r1, r5
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff ffa5 	bl	80067e8 <sbrk_aligned>
 800689e:	3001      	adds	r0, #1
 80068a0:	d02b      	beq.n	80068fa <_malloc_r+0xd2>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	442b      	add	r3, r5
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	e00e      	b.n	80068c8 <_malloc_r+0xa0>
 80068aa:	6822      	ldr	r2, [r4, #0]
 80068ac:	1b52      	subs	r2, r2, r5
 80068ae:	d41e      	bmi.n	80068ee <_malloc_r+0xc6>
 80068b0:	2a0b      	cmp	r2, #11
 80068b2:	d916      	bls.n	80068e2 <_malloc_r+0xba>
 80068b4:	1961      	adds	r1, r4, r5
 80068b6:	42a3      	cmp	r3, r4
 80068b8:	6025      	str	r5, [r4, #0]
 80068ba:	bf18      	it	ne
 80068bc:	6059      	strne	r1, [r3, #4]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	bf08      	it	eq
 80068c2:	6031      	streq	r1, [r6, #0]
 80068c4:	5162      	str	r2, [r4, r5]
 80068c6:	604b      	str	r3, [r1, #4]
 80068c8:	4638      	mov	r0, r7
 80068ca:	f104 060b 	add.w	r6, r4, #11
 80068ce:	f000 fbbd 	bl	800704c <__malloc_unlock>
 80068d2:	f026 0607 	bic.w	r6, r6, #7
 80068d6:	1d23      	adds	r3, r4, #4
 80068d8:	1af2      	subs	r2, r6, r3
 80068da:	d0b6      	beq.n	800684a <_malloc_r+0x22>
 80068dc:	1b9b      	subs	r3, r3, r6
 80068de:	50a3      	str	r3, [r4, r2]
 80068e0:	e7b3      	b.n	800684a <_malloc_r+0x22>
 80068e2:	6862      	ldr	r2, [r4, #4]
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	bf0c      	ite	eq
 80068e8:	6032      	streq	r2, [r6, #0]
 80068ea:	605a      	strne	r2, [r3, #4]
 80068ec:	e7ec      	b.n	80068c8 <_malloc_r+0xa0>
 80068ee:	4623      	mov	r3, r4
 80068f0:	6864      	ldr	r4, [r4, #4]
 80068f2:	e7b2      	b.n	800685a <_malloc_r+0x32>
 80068f4:	4634      	mov	r4, r6
 80068f6:	6876      	ldr	r6, [r6, #4]
 80068f8:	e7b9      	b.n	800686e <_malloc_r+0x46>
 80068fa:	230c      	movs	r3, #12
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4638      	mov	r0, r7
 8006900:	f000 fba4 	bl	800704c <__malloc_unlock>
 8006904:	e7a1      	b.n	800684a <_malloc_r+0x22>
 8006906:	6025      	str	r5, [r4, #0]
 8006908:	e7de      	b.n	80068c8 <_malloc_r+0xa0>
 800690a:	bf00      	nop
 800690c:	200002b4 	.word	0x200002b4

08006910 <__sfputc_r>:
 8006910:	6893      	ldr	r3, [r2, #8]
 8006912:	3b01      	subs	r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	b410      	push	{r4}
 8006918:	6093      	str	r3, [r2, #8]
 800691a:	da08      	bge.n	800692e <__sfputc_r+0x1e>
 800691c:	6994      	ldr	r4, [r2, #24]
 800691e:	42a3      	cmp	r3, r4
 8006920:	db01      	blt.n	8006926 <__sfputc_r+0x16>
 8006922:	290a      	cmp	r1, #10
 8006924:	d103      	bne.n	800692e <__sfputc_r+0x1e>
 8006926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800692a:	f7ff bc31 	b.w	8006190 <__swbuf_r>
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	1c58      	adds	r0, r3, #1
 8006932:	6010      	str	r0, [r2, #0]
 8006934:	7019      	strb	r1, [r3, #0]
 8006936:	4608      	mov	r0, r1
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800693c:	4770      	bx	lr

0800693e <__sfputs_r>:
 800693e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006940:	4606      	mov	r6, r0
 8006942:	460f      	mov	r7, r1
 8006944:	4614      	mov	r4, r2
 8006946:	18d5      	adds	r5, r2, r3
 8006948:	42ac      	cmp	r4, r5
 800694a:	d101      	bne.n	8006950 <__sfputs_r+0x12>
 800694c:	2000      	movs	r0, #0
 800694e:	e007      	b.n	8006960 <__sfputs_r+0x22>
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	463a      	mov	r2, r7
 8006956:	4630      	mov	r0, r6
 8006958:	f7ff ffda 	bl	8006910 <__sfputc_r>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d1f3      	bne.n	8006948 <__sfputs_r+0xa>
 8006960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006964 <_vfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	460d      	mov	r5, r1
 800696a:	b09d      	sub	sp, #116	; 0x74
 800696c:	4614      	mov	r4, r2
 800696e:	4698      	mov	r8, r3
 8006970:	4606      	mov	r6, r0
 8006972:	b118      	cbz	r0, 800697c <_vfiprintf_r+0x18>
 8006974:	6983      	ldr	r3, [r0, #24]
 8006976:	b90b      	cbnz	r3, 800697c <_vfiprintf_r+0x18>
 8006978:	f7ff fde4 	bl	8006544 <__sinit>
 800697c:	4b89      	ldr	r3, [pc, #548]	; (8006ba4 <_vfiprintf_r+0x240>)
 800697e:	429d      	cmp	r5, r3
 8006980:	d11b      	bne.n	80069ba <_vfiprintf_r+0x56>
 8006982:	6875      	ldr	r5, [r6, #4]
 8006984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	d405      	bmi.n	8006996 <_vfiprintf_r+0x32>
 800698a:	89ab      	ldrh	r3, [r5, #12]
 800698c:	059a      	lsls	r2, r3, #22
 800698e:	d402      	bmi.n	8006996 <_vfiprintf_r+0x32>
 8006990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006992:	f7ff fe75 	bl	8006680 <__retarget_lock_acquire_recursive>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	071b      	lsls	r3, r3, #28
 800699a:	d501      	bpl.n	80069a0 <_vfiprintf_r+0x3c>
 800699c:	692b      	ldr	r3, [r5, #16]
 800699e:	b9eb      	cbnz	r3, 80069dc <_vfiprintf_r+0x78>
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff fc46 	bl	8006234 <__swsetup_r>
 80069a8:	b1c0      	cbz	r0, 80069dc <_vfiprintf_r+0x78>
 80069aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ac:	07dc      	lsls	r4, r3, #31
 80069ae:	d50e      	bpl.n	80069ce <_vfiprintf_r+0x6a>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b01d      	add	sp, #116	; 0x74
 80069b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ba:	4b7b      	ldr	r3, [pc, #492]	; (8006ba8 <_vfiprintf_r+0x244>)
 80069bc:	429d      	cmp	r5, r3
 80069be:	d101      	bne.n	80069c4 <_vfiprintf_r+0x60>
 80069c0:	68b5      	ldr	r5, [r6, #8]
 80069c2:	e7df      	b.n	8006984 <_vfiprintf_r+0x20>
 80069c4:	4b79      	ldr	r3, [pc, #484]	; (8006bac <_vfiprintf_r+0x248>)
 80069c6:	429d      	cmp	r5, r3
 80069c8:	bf08      	it	eq
 80069ca:	68f5      	ldreq	r5, [r6, #12]
 80069cc:	e7da      	b.n	8006984 <_vfiprintf_r+0x20>
 80069ce:	89ab      	ldrh	r3, [r5, #12]
 80069d0:	0598      	lsls	r0, r3, #22
 80069d2:	d4ed      	bmi.n	80069b0 <_vfiprintf_r+0x4c>
 80069d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d6:	f7ff fe54 	bl	8006682 <__retarget_lock_release_recursive>
 80069da:	e7e9      	b.n	80069b0 <_vfiprintf_r+0x4c>
 80069dc:	2300      	movs	r3, #0
 80069de:	9309      	str	r3, [sp, #36]	; 0x24
 80069e0:	2320      	movs	r3, #32
 80069e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069ea:	2330      	movs	r3, #48	; 0x30
 80069ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bb0 <_vfiprintf_r+0x24c>
 80069f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f4:	f04f 0901 	mov.w	r9, #1
 80069f8:	4623      	mov	r3, r4
 80069fa:	469a      	mov	sl, r3
 80069fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a00:	b10a      	cbz	r2, 8006a06 <_vfiprintf_r+0xa2>
 8006a02:	2a25      	cmp	r2, #37	; 0x25
 8006a04:	d1f9      	bne.n	80069fa <_vfiprintf_r+0x96>
 8006a06:	ebba 0b04 	subs.w	fp, sl, r4
 8006a0a:	d00b      	beq.n	8006a24 <_vfiprintf_r+0xc0>
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	4622      	mov	r2, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ff93 	bl	800693e <__sfputs_r>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f000 80aa 	beq.w	8006b72 <_vfiprintf_r+0x20e>
 8006a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a20:	445a      	add	r2, fp
 8006a22:	9209      	str	r2, [sp, #36]	; 0x24
 8006a24:	f89a 3000 	ldrb.w	r3, [sl]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80a2 	beq.w	8006b72 <_vfiprintf_r+0x20e>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f04f 32ff 	mov.w	r2, #4294967295
 8006a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a38:	f10a 0a01 	add.w	sl, sl, #1
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	9307      	str	r3, [sp, #28]
 8006a40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a44:	931a      	str	r3, [sp, #104]	; 0x68
 8006a46:	4654      	mov	r4, sl
 8006a48:	2205      	movs	r2, #5
 8006a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4e:	4858      	ldr	r0, [pc, #352]	; (8006bb0 <_vfiprintf_r+0x24c>)
 8006a50:	f7f9 fbbe 	bl	80001d0 <memchr>
 8006a54:	9a04      	ldr	r2, [sp, #16]
 8006a56:	b9d8      	cbnz	r0, 8006a90 <_vfiprintf_r+0x12c>
 8006a58:	06d1      	lsls	r1, r2, #27
 8006a5a:	bf44      	itt	mi
 8006a5c:	2320      	movmi	r3, #32
 8006a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a62:	0713      	lsls	r3, r2, #28
 8006a64:	bf44      	itt	mi
 8006a66:	232b      	movmi	r3, #43	; 0x2b
 8006a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a70:	2b2a      	cmp	r3, #42	; 0x2a
 8006a72:	d015      	beq.n	8006aa0 <_vfiprintf_r+0x13c>
 8006a74:	9a07      	ldr	r2, [sp, #28]
 8006a76:	4654      	mov	r4, sl
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f04f 0c0a 	mov.w	ip, #10
 8006a7e:	4621      	mov	r1, r4
 8006a80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a84:	3b30      	subs	r3, #48	; 0x30
 8006a86:	2b09      	cmp	r3, #9
 8006a88:	d94e      	bls.n	8006b28 <_vfiprintf_r+0x1c4>
 8006a8a:	b1b0      	cbz	r0, 8006aba <_vfiprintf_r+0x156>
 8006a8c:	9207      	str	r2, [sp, #28]
 8006a8e:	e014      	b.n	8006aba <_vfiprintf_r+0x156>
 8006a90:	eba0 0308 	sub.w	r3, r0, r8
 8006a94:	fa09 f303 	lsl.w	r3, r9, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	46a2      	mov	sl, r4
 8006a9e:	e7d2      	b.n	8006a46 <_vfiprintf_r+0xe2>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	1d19      	adds	r1, r3, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	9103      	str	r1, [sp, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bfbb      	ittet	lt
 8006aac:	425b      	neglt	r3, r3
 8006aae:	f042 0202 	orrlt.w	r2, r2, #2
 8006ab2:	9307      	strge	r3, [sp, #28]
 8006ab4:	9307      	strlt	r3, [sp, #28]
 8006ab6:	bfb8      	it	lt
 8006ab8:	9204      	strlt	r2, [sp, #16]
 8006aba:	7823      	ldrb	r3, [r4, #0]
 8006abc:	2b2e      	cmp	r3, #46	; 0x2e
 8006abe:	d10c      	bne.n	8006ada <_vfiprintf_r+0x176>
 8006ac0:	7863      	ldrb	r3, [r4, #1]
 8006ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac4:	d135      	bne.n	8006b32 <_vfiprintf_r+0x1ce>
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	1d1a      	adds	r2, r3, #4
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	9203      	str	r2, [sp, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	bfb8      	it	lt
 8006ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ad6:	3402      	adds	r4, #2
 8006ad8:	9305      	str	r3, [sp, #20]
 8006ada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bc0 <_vfiprintf_r+0x25c>
 8006ade:	7821      	ldrb	r1, [r4, #0]
 8006ae0:	2203      	movs	r2, #3
 8006ae2:	4650      	mov	r0, sl
 8006ae4:	f7f9 fb74 	bl	80001d0 <memchr>
 8006ae8:	b140      	cbz	r0, 8006afc <_vfiprintf_r+0x198>
 8006aea:	2340      	movs	r3, #64	; 0x40
 8006aec:	eba0 000a 	sub.w	r0, r0, sl
 8006af0:	fa03 f000 	lsl.w	r0, r3, r0
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	4303      	orrs	r3, r0
 8006af8:	3401      	adds	r4, #1
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b00:	482c      	ldr	r0, [pc, #176]	; (8006bb4 <_vfiprintf_r+0x250>)
 8006b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b06:	2206      	movs	r2, #6
 8006b08:	f7f9 fb62 	bl	80001d0 <memchr>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d03f      	beq.n	8006b90 <_vfiprintf_r+0x22c>
 8006b10:	4b29      	ldr	r3, [pc, #164]	; (8006bb8 <_vfiprintf_r+0x254>)
 8006b12:	bb1b      	cbnz	r3, 8006b5c <_vfiprintf_r+0x1f8>
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	3307      	adds	r3, #7
 8006b18:	f023 0307 	bic.w	r3, r3, #7
 8006b1c:	3308      	adds	r3, #8
 8006b1e:	9303      	str	r3, [sp, #12]
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	443b      	add	r3, r7
 8006b24:	9309      	str	r3, [sp, #36]	; 0x24
 8006b26:	e767      	b.n	80069f8 <_vfiprintf_r+0x94>
 8006b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	2001      	movs	r0, #1
 8006b30:	e7a5      	b.n	8006a7e <_vfiprintf_r+0x11a>
 8006b32:	2300      	movs	r3, #0
 8006b34:	3401      	adds	r4, #1
 8006b36:	9305      	str	r3, [sp, #20]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f04f 0c0a 	mov.w	ip, #10
 8006b3e:	4620      	mov	r0, r4
 8006b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b44:	3a30      	subs	r2, #48	; 0x30
 8006b46:	2a09      	cmp	r2, #9
 8006b48:	d903      	bls.n	8006b52 <_vfiprintf_r+0x1ee>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0c5      	beq.n	8006ada <_vfiprintf_r+0x176>
 8006b4e:	9105      	str	r1, [sp, #20]
 8006b50:	e7c3      	b.n	8006ada <_vfiprintf_r+0x176>
 8006b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b56:	4604      	mov	r4, r0
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e7f0      	b.n	8006b3e <_vfiprintf_r+0x1da>
 8006b5c:	ab03      	add	r3, sp, #12
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	462a      	mov	r2, r5
 8006b62:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <_vfiprintf_r+0x258>)
 8006b64:	a904      	add	r1, sp, #16
 8006b66:	4630      	mov	r0, r6
 8006b68:	f3af 8000 	nop.w
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	1c78      	adds	r0, r7, #1
 8006b70:	d1d6      	bne.n	8006b20 <_vfiprintf_r+0x1bc>
 8006b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b74:	07d9      	lsls	r1, r3, #31
 8006b76:	d405      	bmi.n	8006b84 <_vfiprintf_r+0x220>
 8006b78:	89ab      	ldrh	r3, [r5, #12]
 8006b7a:	059a      	lsls	r2, r3, #22
 8006b7c:	d402      	bmi.n	8006b84 <_vfiprintf_r+0x220>
 8006b7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b80:	f7ff fd7f 	bl	8006682 <__retarget_lock_release_recursive>
 8006b84:	89ab      	ldrh	r3, [r5, #12]
 8006b86:	065b      	lsls	r3, r3, #25
 8006b88:	f53f af12 	bmi.w	80069b0 <_vfiprintf_r+0x4c>
 8006b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b8e:	e711      	b.n	80069b4 <_vfiprintf_r+0x50>
 8006b90:	ab03      	add	r3, sp, #12
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	462a      	mov	r2, r5
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <_vfiprintf_r+0x258>)
 8006b98:	a904      	add	r1, sp, #16
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f880 	bl	8006ca0 <_printf_i>
 8006ba0:	e7e4      	b.n	8006b6c <_vfiprintf_r+0x208>
 8006ba2:	bf00      	nop
 8006ba4:	0800724c 	.word	0x0800724c
 8006ba8:	0800726c 	.word	0x0800726c
 8006bac:	0800722c 	.word	0x0800722c
 8006bb0:	0800728c 	.word	0x0800728c
 8006bb4:	08007296 	.word	0x08007296
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	0800693f 	.word	0x0800693f
 8006bc0:	08007292 	.word	0x08007292

08006bc4 <_printf_common>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	4616      	mov	r6, r2
 8006bca:	4699      	mov	r9, r3
 8006bcc:	688a      	ldr	r2, [r1, #8]
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4613      	movlt	r3, r2
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006be0:	4607      	mov	r7, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b10a      	cbz	r2, 8006bea <_printf_common+0x26>
 8006be6:	3301      	adds	r3, #1
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	0699      	lsls	r1, r3, #26
 8006bee:	bf42      	ittt	mi
 8006bf0:	6833      	ldrmi	r3, [r6, #0]
 8006bf2:	3302      	addmi	r3, #2
 8006bf4:	6033      	strmi	r3, [r6, #0]
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	f015 0506 	ands.w	r5, r5, #6
 8006bfc:	d106      	bne.n	8006c0c <_printf_common+0x48>
 8006bfe:	f104 0a19 	add.w	sl, r4, #25
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc26      	bgt.n	8006c5a <_printf_common+0x96>
 8006c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c10:	1e13      	subs	r3, r2, #0
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	bf18      	it	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	0692      	lsls	r2, r2, #26
 8006c1a:	d42b      	bmi.n	8006c74 <_printf_common+0xb0>
 8006c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c20:	4649      	mov	r1, r9
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d01e      	beq.n	8006c68 <_printf_common+0xa4>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	68e5      	ldr	r5, [r4, #12]
 8006c2e:	6832      	ldr	r2, [r6, #0]
 8006c30:	f003 0306 	and.w	r3, r3, #6
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	bf08      	it	eq
 8006c38:	1aad      	subeq	r5, r5, r2
 8006c3a:	68a3      	ldr	r3, [r4, #8]
 8006c3c:	6922      	ldr	r2, [r4, #16]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	2600      	movs	r6, #0
 8006c50:	341a      	adds	r4, #26
 8006c52:	42b5      	cmp	r5, r6
 8006c54:	d11a      	bne.n	8006c8c <_printf_common+0xc8>
 8006c56:	2000      	movs	r0, #0
 8006c58:	e008      	b.n	8006c6c <_printf_common+0xa8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4649      	mov	r1, r9
 8006c60:	4638      	mov	r0, r7
 8006c62:	47c0      	blx	r8
 8006c64:	3001      	adds	r0, #1
 8006c66:	d103      	bne.n	8006c70 <_printf_common+0xac>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	3501      	adds	r5, #1
 8006c72:	e7c6      	b.n	8006c02 <_printf_common+0x3e>
 8006c74:	18e1      	adds	r1, r4, r3
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	2030      	movs	r0, #48	; 0x30
 8006c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7e:	4422      	add	r2, r4
 8006c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c88:	3302      	adds	r3, #2
 8006c8a:	e7c7      	b.n	8006c1c <_printf_common+0x58>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4649      	mov	r1, r9
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	3001      	adds	r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa4>
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7d9      	b.n	8006c52 <_printf_common+0x8e>
	...

08006ca0 <_printf_i>:
 8006ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	7e0f      	ldrb	r7, [r1, #24]
 8006ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca8:	2f78      	cmp	r7, #120	; 0x78
 8006caa:	4691      	mov	r9, r2
 8006cac:	4680      	mov	r8, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cb6:	d807      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cb8:	2f62      	cmp	r7, #98	; 0x62
 8006cba:	d80a      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	f000 80d8 	beq.w	8006e72 <_printf_i+0x1d2>
 8006cc2:	2f58      	cmp	r7, #88	; 0x58
 8006cc4:	f000 80a3 	beq.w	8006e0e <_printf_i+0x16e>
 8006cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cd0:	e03a      	b.n	8006d48 <_printf_i+0xa8>
 8006cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd6:	2b15      	cmp	r3, #21
 8006cd8:	d8f6      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cda:	a101      	add	r1, pc, #4	; (adr r1, 8006ce0 <_printf_i+0x40>)
 8006cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006cc9 	.word	0x08006cc9
 8006cec:	08006cc9 	.word	0x08006cc9
 8006cf0:	08006cc9 	.word	0x08006cc9
 8006cf4:	08006cc9 	.word	0x08006cc9
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006cc9 	.word	0x08006cc9
 8006d00:	08006cc9 	.word	0x08006cc9
 8006d04:	08006cc9 	.word	0x08006cc9
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	08006e59 	.word	0x08006e59
 8006d10:	08006d7d 	.word	0x08006d7d
 8006d14:	08006e3b 	.word	0x08006e3b
 8006d18:	08006cc9 	.word	0x08006cc9
 8006d1c:	08006cc9 	.word	0x08006cc9
 8006d20:	08006e7b 	.word	0x08006e7b
 8006d24:	08006cc9 	.word	0x08006cc9
 8006d28:	08006d7d 	.word	0x08006d7d
 8006d2c:	08006cc9 	.word	0x08006cc9
 8006d30:	08006cc9 	.word	0x08006cc9
 8006d34:	08006e43 	.word	0x08006e43
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	1d1a      	adds	r2, r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e0a3      	b.n	8006e94 <_printf_i+0x1f4>
 8006d4c:	6820      	ldr	r0, [r4, #0]
 8006d4e:	6829      	ldr	r1, [r5, #0]
 8006d50:	0606      	lsls	r6, r0, #24
 8006d52:	f101 0304 	add.w	r3, r1, #4
 8006d56:	d50a      	bpl.n	8006d6e <_printf_i+0xce>
 8006d58:	680e      	ldr	r6, [r1, #0]
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	2e00      	cmp	r6, #0
 8006d5e:	da03      	bge.n	8006d68 <_printf_i+0xc8>
 8006d60:	232d      	movs	r3, #45	; 0x2d
 8006d62:	4276      	negs	r6, r6
 8006d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d68:	485e      	ldr	r0, [pc, #376]	; (8006ee4 <_printf_i+0x244>)
 8006d6a:	230a      	movs	r3, #10
 8006d6c:	e019      	b.n	8006da2 <_printf_i+0x102>
 8006d6e:	680e      	ldr	r6, [r1, #0]
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d76:	bf18      	it	ne
 8006d78:	b236      	sxthne	r6, r6
 8006d7a:	e7ef      	b.n	8006d5c <_printf_i+0xbc>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	6820      	ldr	r0, [r4, #0]
 8006d80:	1d19      	adds	r1, r3, #4
 8006d82:	6029      	str	r1, [r5, #0]
 8006d84:	0601      	lsls	r1, r0, #24
 8006d86:	d501      	bpl.n	8006d8c <_printf_i+0xec>
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	e002      	b.n	8006d92 <_printf_i+0xf2>
 8006d8c:	0646      	lsls	r6, r0, #25
 8006d8e:	d5fb      	bpl.n	8006d88 <_printf_i+0xe8>
 8006d90:	881e      	ldrh	r6, [r3, #0]
 8006d92:	4854      	ldr	r0, [pc, #336]	; (8006ee4 <_printf_i+0x244>)
 8006d94:	2f6f      	cmp	r7, #111	; 0x6f
 8006d96:	bf0c      	ite	eq
 8006d98:	2308      	moveq	r3, #8
 8006d9a:	230a      	movne	r3, #10
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006da2:	6865      	ldr	r5, [r4, #4]
 8006da4:	60a5      	str	r5, [r4, #8]
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	bfa2      	ittt	ge
 8006daa:	6821      	ldrge	r1, [r4, #0]
 8006dac:	f021 0104 	bicge.w	r1, r1, #4
 8006db0:	6021      	strge	r1, [r4, #0]
 8006db2:	b90e      	cbnz	r6, 8006db8 <_printf_i+0x118>
 8006db4:	2d00      	cmp	r5, #0
 8006db6:	d04d      	beq.n	8006e54 <_printf_i+0x1b4>
 8006db8:	4615      	mov	r5, r2
 8006dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8006dc2:	5dc7      	ldrb	r7, [r0, r7]
 8006dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc8:	4637      	mov	r7, r6
 8006dca:	42bb      	cmp	r3, r7
 8006dcc:	460e      	mov	r6, r1
 8006dce:	d9f4      	bls.n	8006dba <_printf_i+0x11a>
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d10b      	bne.n	8006dec <_printf_i+0x14c>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	07de      	lsls	r6, r3, #31
 8006dd8:	d508      	bpl.n	8006dec <_printf_i+0x14c>
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	6861      	ldr	r1, [r4, #4]
 8006dde:	4299      	cmp	r1, r3
 8006de0:	bfde      	ittt	le
 8006de2:	2330      	movle	r3, #48	; 0x30
 8006de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006dec:	1b52      	subs	r2, r2, r5
 8006dee:	6122      	str	r2, [r4, #16]
 8006df0:	f8cd a000 	str.w	sl, [sp]
 8006df4:	464b      	mov	r3, r9
 8006df6:	aa03      	add	r2, sp, #12
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	f7ff fee2 	bl	8006bc4 <_printf_common>
 8006e00:	3001      	adds	r0, #1
 8006e02:	d14c      	bne.n	8006e9e <_printf_i+0x1fe>
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	b004      	add	sp, #16
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	4835      	ldr	r0, [pc, #212]	; (8006ee4 <_printf_i+0x244>)
 8006e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e14:	6829      	ldr	r1, [r5, #0]
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e1c:	6029      	str	r1, [r5, #0]
 8006e1e:	061d      	lsls	r5, r3, #24
 8006e20:	d514      	bpl.n	8006e4c <_printf_i+0x1ac>
 8006e22:	07df      	lsls	r7, r3, #31
 8006e24:	bf44      	itt	mi
 8006e26:	f043 0320 	orrmi.w	r3, r3, #32
 8006e2a:	6023      	strmi	r3, [r4, #0]
 8006e2c:	b91e      	cbnz	r6, 8006e36 <_printf_i+0x196>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	f023 0320 	bic.w	r3, r3, #32
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	2310      	movs	r3, #16
 8006e38:	e7b0      	b.n	8006d9c <_printf_i+0xfc>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f043 0320 	orr.w	r3, r3, #32
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	2378      	movs	r3, #120	; 0x78
 8006e44:	4828      	ldr	r0, [pc, #160]	; (8006ee8 <_printf_i+0x248>)
 8006e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e4a:	e7e3      	b.n	8006e14 <_printf_i+0x174>
 8006e4c:	0659      	lsls	r1, r3, #25
 8006e4e:	bf48      	it	mi
 8006e50:	b2b6      	uxthmi	r6, r6
 8006e52:	e7e6      	b.n	8006e22 <_printf_i+0x182>
 8006e54:	4615      	mov	r5, r2
 8006e56:	e7bb      	b.n	8006dd0 <_printf_i+0x130>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	6826      	ldr	r6, [r4, #0]
 8006e5c:	6961      	ldr	r1, [r4, #20]
 8006e5e:	1d18      	adds	r0, r3, #4
 8006e60:	6028      	str	r0, [r5, #0]
 8006e62:	0635      	lsls	r5, r6, #24
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	d501      	bpl.n	8006e6c <_printf_i+0x1cc>
 8006e68:	6019      	str	r1, [r3, #0]
 8006e6a:	e002      	b.n	8006e72 <_printf_i+0x1d2>
 8006e6c:	0670      	lsls	r0, r6, #25
 8006e6e:	d5fb      	bpl.n	8006e68 <_printf_i+0x1c8>
 8006e70:	8019      	strh	r1, [r3, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	4615      	mov	r5, r2
 8006e78:	e7ba      	b.n	8006df0 <_printf_i+0x150>
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	1d1a      	adds	r2, r3, #4
 8006e7e:	602a      	str	r2, [r5, #0]
 8006e80:	681d      	ldr	r5, [r3, #0]
 8006e82:	6862      	ldr	r2, [r4, #4]
 8006e84:	2100      	movs	r1, #0
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7f9 f9a2 	bl	80001d0 <memchr>
 8006e8c:	b108      	cbz	r0, 8006e92 <_printf_i+0x1f2>
 8006e8e:	1b40      	subs	r0, r0, r5
 8006e90:	6060      	str	r0, [r4, #4]
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	2300      	movs	r3, #0
 8006e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e9c:	e7a8      	b.n	8006df0 <_printf_i+0x150>
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	47d0      	blx	sl
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d0ab      	beq.n	8006e04 <_printf_i+0x164>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	079b      	lsls	r3, r3, #30
 8006eb0:	d413      	bmi.n	8006eda <_printf_i+0x23a>
 8006eb2:	68e0      	ldr	r0, [r4, #12]
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	bfb8      	it	lt
 8006eba:	4618      	movlt	r0, r3
 8006ebc:	e7a4      	b.n	8006e08 <_printf_i+0x168>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	47d0      	blx	sl
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d09b      	beq.n	8006e04 <_printf_i+0x164>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	9903      	ldr	r1, [sp, #12]
 8006ed2:	1a5b      	subs	r3, r3, r1
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dcf2      	bgt.n	8006ebe <_printf_i+0x21e>
 8006ed8:	e7eb      	b.n	8006eb2 <_printf_i+0x212>
 8006eda:	2500      	movs	r5, #0
 8006edc:	f104 0619 	add.w	r6, r4, #25
 8006ee0:	e7f5      	b.n	8006ece <_printf_i+0x22e>
 8006ee2:	bf00      	nop
 8006ee4:	0800729d 	.word	0x0800729d
 8006ee8:	080072ae 	.word	0x080072ae

08006eec <_sbrk_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_sbrk_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7f9 ffb4 	bl	8000e64 <_sbrk>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_sbrk_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_sbrk_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	200002bc 	.word	0x200002bc

08006f0c <__sread>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	460c      	mov	r4, r1
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	f000 f8a0 	bl	8007058 <_read_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	bfab      	itete	ge
 8006f1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f1e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f20:	181b      	addge	r3, r3, r0
 8006f22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f26:	bfac      	ite	ge
 8006f28:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f2a:	81a3      	strhlt	r3, [r4, #12]
 8006f2c:	bd10      	pop	{r4, pc}

08006f2e <__swrite>:
 8006f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	461f      	mov	r7, r3
 8006f34:	898b      	ldrh	r3, [r1, #12]
 8006f36:	05db      	lsls	r3, r3, #23
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4616      	mov	r6, r2
 8006f3e:	d505      	bpl.n	8006f4c <__swrite+0x1e>
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	2302      	movs	r3, #2
 8006f46:	2200      	movs	r2, #0
 8006f48:	f000 f868 	bl	800701c <_lseek_r>
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	4632      	mov	r2, r6
 8006f5a:	463b      	mov	r3, r7
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	f000 b817 	b.w	8006f94 <_write_r>

08006f66 <__sseek>:
 8006f66:	b510      	push	{r4, lr}
 8006f68:	460c      	mov	r4, r1
 8006f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6e:	f000 f855 	bl	800701c <_lseek_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	bf15      	itete	ne
 8006f78:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f82:	81a3      	strheq	r3, [r4, #12]
 8006f84:	bf18      	it	ne
 8006f86:	81a3      	strhne	r3, [r4, #12]
 8006f88:	bd10      	pop	{r4, pc}

08006f8a <__sclose>:
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 b813 	b.w	8006fb8 <_close_r>
	...

08006f94 <_write_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d07      	ldr	r5, [pc, #28]	; (8006fb4 <_write_r+0x20>)
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	602a      	str	r2, [r5, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f7f9 fae6 	bl	8000574 <_write>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_write_r+0x1e>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_write_r+0x1e>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	200002bc 	.word	0x200002bc

08006fb8 <_close_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d06      	ldr	r5, [pc, #24]	; (8006fd4 <_close_r+0x1c>)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	f7f9 ff19 	bl	8000dfa <_close>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_close_r+0x1a>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_close_r+0x1a>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200002bc 	.word	0x200002bc

08006fd8 <_fstat_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d07      	ldr	r5, [pc, #28]	; (8006ff8 <_fstat_r+0x20>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	f7f9 ff14 	bl	8000e12 <_fstat>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	d102      	bne.n	8006ff4 <_fstat_r+0x1c>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	b103      	cbz	r3, 8006ff4 <_fstat_r+0x1c>
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	bd38      	pop	{r3, r4, r5, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200002bc 	.word	0x200002bc

08006ffc <_isatty_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_isatty_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7f9 ff13 	bl	8000e32 <_isatty>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_isatty_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_isatty_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	200002bc 	.word	0x200002bc

0800701c <_lseek_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	; (800703c <_lseek_r+0x20>)
 8007020:	4604      	mov	r4, r0
 8007022:	4608      	mov	r0, r1
 8007024:	4611      	mov	r1, r2
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7f9 ff0c 	bl	8000e48 <_lseek>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_lseek_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_lseek_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	200002bc 	.word	0x200002bc

08007040 <__malloc_lock>:
 8007040:	4801      	ldr	r0, [pc, #4]	; (8007048 <__malloc_lock+0x8>)
 8007042:	f7ff bb1d 	b.w	8006680 <__retarget_lock_acquire_recursive>
 8007046:	bf00      	nop
 8007048:	200002b0 	.word	0x200002b0

0800704c <__malloc_unlock>:
 800704c:	4801      	ldr	r0, [pc, #4]	; (8007054 <__malloc_unlock+0x8>)
 800704e:	f7ff bb18 	b.w	8006682 <__retarget_lock_release_recursive>
 8007052:	bf00      	nop
 8007054:	200002b0 	.word	0x200002b0

08007058 <_read_r>:
 8007058:	b538      	push	{r3, r4, r5, lr}
 800705a:	4d07      	ldr	r5, [pc, #28]	; (8007078 <_read_r+0x20>)
 800705c:	4604      	mov	r4, r0
 800705e:	4608      	mov	r0, r1
 8007060:	4611      	mov	r1, r2
 8007062:	2200      	movs	r2, #0
 8007064:	602a      	str	r2, [r5, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f7f9 feaa 	bl	8000dc0 <_read>
 800706c:	1c43      	adds	r3, r0, #1
 800706e:	d102      	bne.n	8007076 <_read_r+0x1e>
 8007070:	682b      	ldr	r3, [r5, #0]
 8007072:	b103      	cbz	r3, 8007076 <_read_r+0x1e>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	bd38      	pop	{r3, r4, r5, pc}
 8007078:	200002bc 	.word	0x200002bc

0800707c <_init>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	bf00      	nop
 8007080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007082:	bc08      	pop	{r3}
 8007084:	469e      	mov	lr, r3
 8007086:	4770      	bx	lr

08007088 <_fini>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr
