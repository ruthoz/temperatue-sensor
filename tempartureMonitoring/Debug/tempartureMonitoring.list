
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08012858  08012858  00022858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080130d8  080130d8  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  080130d8  080130d8  000230d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080130e0  080130e0  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080130e0  080130e0  000230e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080130ec  080130ec  000230ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080130f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac8  20000228  0801331c  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf0  0801331c  00032cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033870  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007543  00000000  00000000  00063ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  0006b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023c0  00000000  00000000  0006d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030752  00000000  00000000  0006fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003195d  00000000  00000000  000a0192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109ba9  00000000  00000000  000d1aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001db698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7e0  00000000  00000000  001db6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012840 	.word	0x08012840

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08012840 	.word	0x08012840

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>:
#include "Button.h"
#include "cmsis_os.h"

extern Button button;

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	821a      	strh	r2, [r3, #16]
	_counter = 0;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
	_state = BUTTON_STATE_NONE;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint32_t delayTick = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]

	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	8a1b      	ldrh	r3, [r3, #16]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f003 fa66 	bl	80043e8 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <_ZN6Button9interruptEv+0x38>
		_timeTickOn = HAL_GetTick();
 8000f2c:	f002 fb50 	bl	80035d0 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	605a      	str	r2, [r3, #4]
		}
		else{
			_state = BUTTON_STATE_WAITH;
		}
	}
}
 8000f36:	e030      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	8a1b      	ldrh	r3, [r3, #16]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4610      	mov	r0, r2
 8000f44:	f003 fa50 	bl	80043e8 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	bf0c      	ite	eq
 8000f4e:	2301      	moveq	r3, #1
 8000f50:	2300      	movne	r3, #0
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d020      	beq.n	8000f9a <_ZN6Button9interruptEv+0x9a>
		_timeTickOff = HAL_GetTick();
 8000f58:	f002 fb3a 	bl	80035d0 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	609a      	str	r2, [r3, #8]
		delayTick = _timeTickOff - _timeTickOn;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	60fb      	str	r3, [r7, #12]
		if(delayTick > 500){
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f74:	d903      	bls.n	8000f7e <_ZN6Button9interruptEv+0x7e>
			_state = BUTTON_LONG_PRESS;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	701a      	strb	r2, [r3, #0]
}
 8000f7c:	e00d      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
		else if (_state == BUTTON_STATE_WAITH) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d106      	bne.n	8000f94 <_ZN6Button9interruptEv+0x94>
			_state = BUTTON_DOUBLE_PRESS;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
			_counter = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
}
 8000f92:	e002      	b.n	8000f9a <_ZN6Button9interruptEv+0x9a>
			_state = BUTTON_STATE_WAITH;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZN6Button8getStateEv>:

StateButton Button::getState(){
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	return _state;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_ZN6Button10getCounterEv>:

uint32_t Button::getCounter(){
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return _counter;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_ZN6Button8setStateE11StateButon_>:

void Button::setState(StateButton state){
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
	_state = state;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZN6Button12resetCounterEv>:

void Button::resetCounter(){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	_counter = 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <_ZN6Button11plusCounterEv>:

void Button::plusCounter(){
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	_counter++;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	615a      	str	r2, [r3, #20]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <StartbuttonTak>:

extern "C" void StartbuttonTak()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartbuttonTak */
  /* Infinite loop */
  while(1)
  {
	if (button.getState() == BUTTON_STATE_WAITH) {
 800102c:	4811      	ldr	r0, [pc, #68]	; (8001074 <StartbuttonTak+0x4c>)
 800102e:	f7ff ffb8 	bl	8000fa2 <_ZN6Button8getStateEv>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d014      	beq.n	800106c <StartbuttonTak+0x44>
		button.plusCounter();
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <StartbuttonTak+0x4c>)
 8001044:	f7ff ffe1 	bl	800100a <_ZN6Button11plusCounterEv>
	  	if(button.getCounter() > 200 ){
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <StartbuttonTak+0x4c>)
 800104a:	f7ff ffb6 	bl	8000fba <_ZN6Button10getCounterEv>
 800104e:	4603      	mov	r3, r0
 8001050:	2bc8      	cmp	r3, #200	; 0xc8
 8001052:	bf8c      	ite	hi
 8001054:	2301      	movhi	r3, #1
 8001056:	2300      	movls	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <StartbuttonTak+0x44>
	  		button.setState(BUTTON_STATE_PRESS);
 800105e:	2102      	movs	r1, #2
 8001060:	4804      	ldr	r0, [pc, #16]	; (8001074 <StartbuttonTak+0x4c>)
 8001062:	f7ff ffb6 	bl	8000fd2 <_ZN6Button8setStateE11StateButon_>
   	  	    button.resetCounter();
 8001066:	4803      	ldr	r0, [pc, #12]	; (8001074 <StartbuttonTak+0x4c>)
 8001068:	f7ff ffc2 	bl	8000ff0 <_ZN6Button12resetCounterEv>
		    //printf("One \n\r");
	  	}
	}
    osDelay(1);
 800106c:	2001      	movs	r0, #1
 800106e:	f00b fa89 	bl	800c584 <osDelay>
	if (button.getState() == BUTTON_STATE_WAITH) {
 8001072:	e7db      	b.n	800102c <StartbuttonTak+0x4>
 8001074:	2000041c 	.word	0x2000041c

08001078 <_ZN6Buzzer8playNoteEv>:
	}
	playNote();
}

void Buzzer::playNote()
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(_timer,0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(_timer, _noteBuzzer[_currentNote]);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7d1b      	ldrb	r3, [r3, #20]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3202      	adds	r2, #2
 8001094:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7d1b      	ldrb	r3, [r3, #20]
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3202      	adds	r2, #2
 80010aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(_timer, TIM_CHANNEL_1, (_noteBuzzer[_currentNote]/2));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	461a      	mov	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3202      	adds	r2, #2
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	0fda      	lsrs	r2, r3, #31
 80010c4:	4413      	add	r3, r2
 80010c6:	105b      	asrs	r3, r3, #1
 80010c8:	461a      	mov	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <_ZN6Buzzer2onEv>:


void Buzzer::on(){
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
	_state = MUSIC_ON;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Start_IT(_timer);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fe91 	bl	8006e18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(_timer, TIM_CHANNEL_1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 ff81 	bl	8007004 <HAL_TIM_PWM_Start_IT>
	playNote();
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb8 	bl	8001078 <_ZN6Buzzer8playNoteEv>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN6Buzzer3offEv>:

void Buzzer::off(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	_state = MUSIC_OFF;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	711a      	strb	r2, [r3, #4]
	HAL_TIM_Base_Stop_IT(_timer);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fee8 	bl	8006ef8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(_timer, TIM_CHANNEL_1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f006 f8bc 	bl	80072ac <HAL_TIM_PWM_Stop_IT>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <_ZN10CliCommandC1EPKc+0x28>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3304      	adds	r3, #4
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f00e fdd5 	bl	800fd02 <strcpy>
	}
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	08012b38 	.word	0x08012b38

08001168 <_ZN10CliCommandD1Ev>:
	virtual void doCommand(const char* param) = 0;
	virtual ~CliCommand(){}
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <_ZN10CliCommandD1Ev+0x1c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	08012b38 	.word	0x08012b38

08001188 <_ZN10CliCommandD0Ev>:
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffe9 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001196:	2118      	movs	r1, #24
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f00d fe67 	bl	800ee6c <_ZdlPvj>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN8LedOnCmdC1EPKcP3Led>:
extern File file;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffbf 	bl	800113c <_ZN10CliCommandC1EPKc>
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	08012b24 	.word	0x08012b24

080011d8 <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
		_led->on();
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f8bf 	bl	800236a <_ZN3Led2onEv>
	}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff99 	bl	800113c <_ZN10CliCommandC1EPKc>
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	619a      	str	r2, [r3, #24]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08012b10 	.word	0x08012b10

08001224 <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
		_led->off();
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	4618      	mov	r0, r3
 8001234:	f001 f8ac 	bl	8002390 <_ZN3Led3offEv>
	}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN11LedBlinkCmdC1EPKcP3Led>:
};

class LedBlinkCmd : public CliCommand {
	Led *_led;
public:
	LedBlinkCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff73 	bl	800113c <_ZN10CliCommandC1EPKc>
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <_ZN11LedBlinkCmdC1EPKcP3Led+0x2c>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08012afc 	.word	0x08012afc

08001270 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
		_led->blink();
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f001 f899 	bl	80023b6 <_ZN3Led5blinkEv>
	}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>:
};

class BuzzerOnCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOnCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff4d 	bl	800113c <_ZN10CliCommandC1EPKc>
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer+0x2c>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	08012ae8 	.word	0x08012ae8

080012bc <_ZN11BuzzerOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
		_buzzer->on();
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff07 	bl	80010de <_ZN6Buzzer2onEv>
	}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>:
};

class BuzzerOffCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOffCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff27 	bl	800113c <_ZN10CliCommandC1EPKc>
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer+0x2c>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	08012ad4 	.word	0x08012ad4

08001308 <_ZN12BuzzerOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
		_buzzer->off();
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fefa 	bl	8001110 <_ZN6Buzzer3offEv>
	}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN14getDataTimeCmdC1EPKcP3Rtc>:
};

class getDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	getDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff01 	bl	800113c <_ZN10CliCommandC1EPKc>
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_ZN14getDataTimeCmdC1EPKcP3Rtc+0x2c>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08012ac0 	.word	0x08012ac0

08001354 <_ZN14getDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b087      	sub	sp, #28
 8001358:	af04      	add	r7, sp, #16
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
		_rtc->getTime(&dateTime);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4910      	ldr	r1, [pc, #64]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fab8 	bl	80028da <_ZN3Rtc7getTimeEP9DateTime_>
		printf("%02d:%02d:%02d-%d-%02d/%02d/%02d\r\n",
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 800136c:	689c      	ldr	r4, [r3, #8]
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001370:	685d      	ldr	r5, [r3, #4]
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001374:	681e      	ldr	r6, [r3, #0]
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 800137c:	6912      	ldr	r2, [r2, #16]
 800137e:	4909      	ldr	r1, [pc, #36]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001380:	6949      	ldr	r1, [r1, #20]
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001384:	6980      	ldr	r0, [r0, #24]
 8001386:	9003      	str	r0, [sp, #12]
 8001388:	9102      	str	r1, [sp, #8]
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4633      	mov	r3, r6
 8001390:	462a      	mov	r2, r5
 8001392:	4621      	mov	r1, r4
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <_ZN14getDataTimeCmd9doCommandEPKc+0x54>)
 8001396:	f00e fb41 	bl	800fa1c <iprintf>
						dateTime.hours, dateTime.min, dateTime.sec,
						dateTime.weekDay,
						dateTime.day, dateTime.month, dateTime.year);
	}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000478 	.word	0x20000478
 80013a8:	08012858 	.word	0x08012858

080013ac <_ZN14setDataTimeCmdC1EPKcP3Rtc>:
};

class setDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	setDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff febd 	bl	800113c <_ZN10CliCommandC1EPKc>
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_ZN14setDataTimeCmdC1EPKcP3Rtc+0x2c>)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	619a      	str	r2, [r3, #24]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08012aac 	.word	0x08012aac

080013dc <_ZN14setDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
		//DateTime dateTime;
	}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <_ZN18setCriticalTempCmdC1EPKcP5Flash>:

class setCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	setCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe99 	bl	800113c <_ZN10CliCommandC1EPKc>
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_ZN18setCriticalTempCmdC1EPKcP5Flash+0x2c>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	08012a98 	.word	0x08012a98

08001424 <_ZN18setCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 800142e:	6838      	ldr	r0, [r7, #0]
 8001430:	f00d fd55 	bl	800eede <atoi>
 8001434:	4603      	mov	r3, r0
 8001436:	81fb      	strh	r3, [r7, #14]
		Temprature.criticalTemp = val;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	8013      	strh	r3, [r2, #0]
		_flash->writh(&Temprature, sizeof(thresholdTemp));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2206      	movs	r2, #6
 8001444:	4903      	ldr	r1, [pc, #12]	; (8001454 <_ZN18setCriticalTempCmd9doCommandEPKc+0x30>)
 8001446:	4618      	mov	r0, r3
 8001448:	f000 ff05 	bl	8002256 <_ZN5Flash5writhEPvj>
	}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000

08001458 <_ZN17setWarningTempCmdC1EPKcP5Flash>:

class setWarningTempCmd : public CliCommand {
	Flash* _flash;

public:
	setWarningTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe67 	bl	800113c <_ZN10CliCommandC1EPKc>
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_ZN17setWarningTempCmdC1EPKcP5Flash+0x2c>)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	08012a84 	.word	0x08012a84

08001488 <_ZN17setWarningTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 8001492:	6838      	ldr	r0, [r7, #0]
 8001494:	f00d fd23 	bl	800eede <atoi>
 8001498:	4603      	mov	r3, r0
 800149a:	81fb      	strh	r3, [r7, #14]
		Temprature.warningTemp = val;
 800149c:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	8053      	strh	r3, [r2, #2]
		_flash->writh(&Temprature, sizeof(thresholdTemp));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2206      	movs	r2, #6
 80014a8:	4903      	ldr	r1, [pc, #12]	; (80014b8 <_ZN17setWarningTempCmd9doCommandEPKc+0x30>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 fed3 	bl	8002256 <_ZN5Flash5writhEPvj>
	}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000

080014bc <_ZN18getCriticalTempCmdC1EPKcP5Flash>:

class getCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	getCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fe35 	bl	800113c <_ZN10CliCommandC1EPKc>
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_ZN18getCriticalTempCmdC1EPKcP5Flash+0x2c>)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	08012a70 	.word	0x08012a70

080014ec <_ZN18getCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	{
		_flash->read(&Temprature);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4904      	ldr	r1, [pc, #16]	; (800150c <_ZN18getCriticalTempCmd9doCommandEPKc+0x20>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 fee1 	bl	80022c4 <_ZN5Flash4readEP13thresholdTemp>
	}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000000 	.word	0x20000000

08001510 <_ZN8clearCmdC1EPKcP4File>:

class clearCmd : public CliCommand {
	File* _file;

public:
	clearCmd (const char * name, File* file) : CliCommand(name), _file(file) {}
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fe0b 	bl	800113c <_ZN10CliCommandC1EPKc>
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_ZN8clearCmdC1EPKcP4File+0x2c>)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08012a5c 	.word	0x08012a5c

08001540 <_ZN8clearCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	{
		_file->clear();
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fe3a 	bl	80021c8 <_ZN4File5clearEv>
	}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_Z7CliInitv>:
};


void CliInit()
{
 800155c:	b598      	push	{r3, r4, r7, lr}
 800155e:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledOn", &ledB));
 8001560:	201c      	movs	r0, #28
 8001562:	f00d fc85 	bl	800ee70 <_Znwj>
 8001566:	4603      	mov	r3, r0
 8001568:	461c      	mov	r4, r3
 800156a:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <_Z7CliInitv+0x13c>)
 800156c:	494b      	ldr	r1, [pc, #300]	; (800169c <_Z7CliInitv+0x140>)
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff fe1a 	bl	80011a8 <_ZN8LedOnCmdC1EPKcP3Led>
 8001574:	4621      	mov	r1, r4
 8001576:	484a      	ldr	r0, [pc, #296]	; (80016a0 <_Z7CliInitv+0x144>)
 8001578:	f000 fa67 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledOff", &ledB));
 800157c:	201c      	movs	r0, #28
 800157e:	f00d fc77 	bl	800ee70 <_Znwj>
 8001582:	4603      	mov	r3, r0
 8001584:	461c      	mov	r4, r3
 8001586:	4a44      	ldr	r2, [pc, #272]	; (8001698 <_Z7CliInitv+0x13c>)
 8001588:	4946      	ldr	r1, [pc, #280]	; (80016a4 <_Z7CliInitv+0x148>)
 800158a:	4620      	mov	r0, r4
 800158c:	f7ff fe32 	bl	80011f4 <_ZN9LedOffCmdC1EPKcP3Led>
 8001590:	4621      	mov	r1, r4
 8001592:	4843      	ldr	r0, [pc, #268]	; (80016a0 <_Z7CliInitv+0x144>)
 8001594:	f000 fa59 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedBlinkCmd("ledBlink", &ledB));
 8001598:	201c      	movs	r0, #28
 800159a:	f00d fc69 	bl	800ee70 <_Znwj>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <_Z7CliInitv+0x13c>)
 80015a4:	4940      	ldr	r1, [pc, #256]	; (80016a8 <_Z7CliInitv+0x14c>)
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff fe4a 	bl	8001240 <_ZN11LedBlinkCmdC1EPKcP3Led>
 80015ac:	4621      	mov	r1, r4
 80015ae:	483c      	ldr	r0, [pc, #240]	; (80016a0 <_Z7CliInitv+0x144>)
 80015b0:	f000 fa4b 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	////////////////////buzzer///////////////////////////
	CliContainer.add (new BuzzerOnCmd("BOn", &buzzer));
 80015b4:	201c      	movs	r0, #28
 80015b6:	f00d fc5b 	bl	800ee70 <_Znwj>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461c      	mov	r4, r3
 80015be:	4a3b      	ldr	r2, [pc, #236]	; (80016ac <_Z7CliInitv+0x150>)
 80015c0:	493b      	ldr	r1, [pc, #236]	; (80016b0 <_Z7CliInitv+0x154>)
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fe62 	bl	800128c <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>
 80015c8:	4621      	mov	r1, r4
 80015ca:	4835      	ldr	r0, [pc, #212]	; (80016a0 <_Z7CliInitv+0x144>)
 80015cc:	f000 fa3d 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new BuzzerOffCmd("BOff", &buzzer));
 80015d0:	201c      	movs	r0, #28
 80015d2:	f00d fc4d 	bl	800ee70 <_Znwj>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461c      	mov	r4, r3
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <_Z7CliInitv+0x150>)
 80015dc:	4935      	ldr	r1, [pc, #212]	; (80016b4 <_Z7CliInitv+0x158>)
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff fe7a 	bl	80012d8 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>
 80015e4:	4621      	mov	r1, r4
 80015e6:	482e      	ldr	r0, [pc, #184]	; (80016a0 <_Z7CliInitv+0x144>)
 80015e8:	f000 fa2f 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>

	/////////////////////RTC//////////////////////////
	CliContainer.add (new getDataTimeCmd("getTime", &rtc));
 80015ec:	201c      	movs	r0, #28
 80015ee:	f00d fc3f 	bl	800ee70 <_Znwj>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461c      	mov	r4, r3
 80015f6:	4a30      	ldr	r2, [pc, #192]	; (80016b8 <_Z7CliInitv+0x15c>)
 80015f8:	4930      	ldr	r1, [pc, #192]	; (80016bc <_Z7CliInitv+0x160>)
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fe92 	bl	8001324 <_ZN14getDataTimeCmdC1EPKcP3Rtc>
 8001600:	4621      	mov	r1, r4
 8001602:	4827      	ldr	r0, [pc, #156]	; (80016a0 <_Z7CliInitv+0x144>)
 8001604:	f000 fa21 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setDataTimeCmd("setTime", &rtc));
 8001608:	201c      	movs	r0, #28
 800160a:	f00d fc31 	bl	800ee70 <_Znwj>
 800160e:	4603      	mov	r3, r0
 8001610:	461c      	mov	r4, r3
 8001612:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <_Z7CliInitv+0x15c>)
 8001614:	492a      	ldr	r1, [pc, #168]	; (80016c0 <_Z7CliInitv+0x164>)
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fec8 	bl	80013ac <_ZN14setDataTimeCmdC1EPKcP3Rtc>
 800161c:	4621      	mov	r1, r4
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <_Z7CliInitv+0x144>)
 8001620:	f000 fa13 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>

	////////////////////flash/////////////////////////
	CliContainer.add (new setCriticalTempCmd("setCritical", &flash));
 8001624:	201c      	movs	r0, #28
 8001626:	f00d fc23 	bl	800ee70 <_Znwj>
 800162a:	4603      	mov	r3, r0
 800162c:	461c      	mov	r4, r3
 800162e:	4a25      	ldr	r2, [pc, #148]	; (80016c4 <_Z7CliInitv+0x168>)
 8001630:	4925      	ldr	r1, [pc, #148]	; (80016c8 <_Z7CliInitv+0x16c>)
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fede 	bl	80013f4 <_ZN18setCriticalTempCmdC1EPKcP5Flash>
 8001638:	4621      	mov	r1, r4
 800163a:	4819      	ldr	r0, [pc, #100]	; (80016a0 <_Z7CliInitv+0x144>)
 800163c:	f000 fa05 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setWarningTempCmd("setWarning", &flash));
 8001640:	201c      	movs	r0, #28
 8001642:	f00d fc15 	bl	800ee70 <_Znwj>
 8001646:	4603      	mov	r3, r0
 8001648:	461c      	mov	r4, r3
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <_Z7CliInitv+0x168>)
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <_Z7CliInitv+0x170>)
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff ff02 	bl	8001458 <_ZN17setWarningTempCmdC1EPKcP5Flash>
 8001654:	4621      	mov	r1, r4
 8001656:	4812      	ldr	r0, [pc, #72]	; (80016a0 <_Z7CliInitv+0x144>)
 8001658:	f000 f9f7 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>

	CliContainer.add (new getCriticalTempCmd("getCritical", &flash));
 800165c:	201c      	movs	r0, #28
 800165e:	f00d fc07 	bl	800ee70 <_Znwj>
 8001662:	4603      	mov	r3, r0
 8001664:	461c      	mov	r4, r3
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <_Z7CliInitv+0x168>)
 8001668:	4919      	ldr	r1, [pc, #100]	; (80016d0 <_Z7CliInitv+0x174>)
 800166a:	4620      	mov	r0, r4
 800166c:	f7ff ff26 	bl	80014bc <_ZN18getCriticalTempCmdC1EPKcP5Flash>
 8001670:	4621      	mov	r1, r4
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <_Z7CliInitv+0x144>)
 8001674:	f000 f9e9 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>

	/////////////////file///////////////////////////////////////////
	CliContainer.add (new clearCmd("clearLog", &file));
 8001678:	201c      	movs	r0, #28
 800167a:	f00d fbf9 	bl	800ee70 <_Znwj>
 800167e:	4603      	mov	r3, r0
 8001680:	461c      	mov	r4, r3
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <_Z7CliInitv+0x178>)
 8001684:	4914      	ldr	r1, [pc, #80]	; (80016d8 <_Z7CliInitv+0x17c>)
 8001686:	4620      	mov	r0, r4
 8001688:	f7ff ff42 	bl	8001510 <_ZN8clearCmdC1EPKcP4File>
 800168c:	4621      	mov	r1, r4
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <_Z7CliInitv+0x144>)
 8001690:	f000 f9db 	bl	8001a4a <_ZN12CliContainer3addEP10CliCommand>

}
 8001694:	bf00      	nop
 8001696:	bd98      	pop	{r3, r4, r7, pc}
 8001698:	20000434 	.word	0x20000434
 800169c:	0801287c 	.word	0x0801287c
 80016a0:	20000244 	.word	0x20000244
 80016a4:	08012884 	.word	0x08012884
 80016a8:	0801288c 	.word	0x0801288c
 80016ac:	20000404 	.word	0x20000404
 80016b0:	08012898 	.word	0x08012898
 80016b4:	0801289c 	.word	0x0801289c
 80016b8:	20000470 	.word	0x20000470
 80016bc:	080128a4 	.word	0x080128a4
 80016c0:	080128ac 	.word	0x080128ac
 80016c4:	20000468 	.word	0x20000468
 80016c8:	080128b4 	.word	0x080128b4
 80016cc:	080128c0 	.word	0x080128c0
 80016d0:	080128cc 	.word	0x080128cc
 80016d4:	20000494 	.word	0x20000494
 80016d8:	080128d8 	.word	0x080128d8

080016dc <_ZN8clearCmdD1Ev>:
class clearCmd : public CliCommand {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_ZN8clearCmdD1Ev+0x20>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd3b 	bl	8001168 <_ZN10CliCommandD1Ev>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08012a5c 	.word	0x08012a5c

08001700 <_ZN8clearCmdD0Ev>:
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_ZN8clearCmdD1Ev>
 800170e:	211c      	movs	r1, #28
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f00d fbab 	bl	800ee6c <_ZdlPvj>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_ZN18getCriticalTempCmdD1Ev>:
class getCriticalTempCmd : public CliCommand {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <_ZN18getCriticalTempCmdD1Ev+0x20>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fd19 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	08012a70 	.word	0x08012a70

08001744 <_ZN18getCriticalTempCmdD0Ev>:
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe7 	bl	8001720 <_ZN18getCriticalTempCmdD1Ev>
 8001752:	211c      	movs	r1, #28
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f00d fb89 	bl	800ee6c <_ZdlPvj>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN17setWarningTempCmdD1Ev>:
class setWarningTempCmd : public CliCommand {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	4a05      	ldr	r2, [pc, #20]	; (8001784 <_ZN17setWarningTempCmdD1Ev+0x20>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fcf7 	bl	8001168 <_ZN10CliCommandD1Ev>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	08012a84 	.word	0x08012a84

08001788 <_ZN17setWarningTempCmdD0Ev>:
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_ZN17setWarningTempCmdD1Ev>
 8001796:	211c      	movs	r1, #28
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f00d fb67 	bl	800ee6c <_ZdlPvj>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN18setCriticalTempCmdD1Ev>:
class setCriticalTempCmd : public CliCommand {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_ZN18setCriticalTempCmdD1Ev+0x20>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fcd5 	bl	8001168 <_ZN10CliCommandD1Ev>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08012a98 	.word	0x08012a98

080017cc <_ZN18setCriticalTempCmdD0Ev>:
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_ZN18setCriticalTempCmdD1Ev>
 80017da:	211c      	movs	r1, #28
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f00d fb45 	bl	800ee6c <_ZdlPvj>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZN14setDataTimeCmdD1Ev>:
class setDataTimeCmd : public CliCommand {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4a05      	ldr	r2, [pc, #20]	; (800180c <_ZN14setDataTimeCmdD1Ev+0x20>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fcb3 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08012aac 	.word	0x08012aac

08001810 <_ZN14setDataTimeCmdD0Ev>:
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffe7 	bl	80017ec <_ZN14setDataTimeCmdD1Ev>
 800181e:	211c      	movs	r1, #28
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f00d fb23 	bl	800ee6c <_ZdlPvj>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN14getDataTimeCmdD1Ev>:
class getDataTimeCmd : public CliCommand {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_ZN14getDataTimeCmdD1Ev+0x20>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fc91 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	08012ac0 	.word	0x08012ac0

08001854 <_ZN14getDataTimeCmdD0Ev>:
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe7 	bl	8001830 <_ZN14getDataTimeCmdD1Ev>
 8001862:	211c      	movs	r1, #28
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f00d fb01 	bl	800ee6c <_ZdlPvj>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN12BuzzerOffCmdD1Ev>:
class BuzzerOffCmd : public CliCommand {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4a05      	ldr	r2, [pc, #20]	; (8001894 <_ZN12BuzzerOffCmdD1Ev+0x20>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc6f 	bl	8001168 <_ZN10CliCommandD1Ev>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	08012ad4 	.word	0x08012ad4

08001898 <_ZN12BuzzerOffCmdD0Ev>:
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffe7 	bl	8001874 <_ZN12BuzzerOffCmdD1Ev>
 80018a6:	211c      	movs	r1, #28
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f00d fadf 	bl	800ee6c <_ZdlPvj>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZN11BuzzerOnCmdD1Ev>:
class BuzzerOnCmd : public CliCommand {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_ZN11BuzzerOnCmdD1Ev+0x20>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fc4d 	bl	8001168 <_ZN10CliCommandD1Ev>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	08012ae8 	.word	0x08012ae8

080018dc <_ZN11BuzzerOnCmdD0Ev>:
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_ZN11BuzzerOnCmdD1Ev>
 80018ea:	211c      	movs	r1, #28
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f00d fabd 	bl	800ee6c <_ZdlPvj>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <_ZN11LedBlinkCmdD1Ev+0x20>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc2b 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08012afc 	.word	0x08012afc

08001920 <_ZN11LedBlinkCmdD0Ev>:
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffe7 	bl	80018fc <_ZN11LedBlinkCmdD1Ev>
 800192e:	211c      	movs	r1, #28
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f00d fa9b 	bl	800ee6c <_ZdlPvj>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_ZN9LedOffCmdD1Ev+0x20>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fc09 	bl	8001168 <_ZN10CliCommandD1Ev>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08012b10 	.word	0x08012b10

08001964 <_ZN9LedOffCmdD0Ev>:
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe7 	bl	8001940 <_ZN9LedOffCmdD1Ev>
 8001972:	211c      	movs	r1, #28
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f00d fa79 	bl	800ee6c <_ZdlPvj>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <_ZN8LedOnCmdD1Ev+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fbe7 	bl	8001168 <_ZN10CliCommandD1Ev>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08012b24 	.word	0x08012b24

080019a8 <_ZN8LedOnCmdD0Ev>:
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ffe7 	bl	8001984 <_ZN8LedOnCmdD1Ev>
 80019b6:	211c      	movs	r1, #28
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f00d fa57 	bl	800ee6c <_ZdlPvj>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
		return _name;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
	}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN12CliContainerC1Ev>:

#include "CliContainer.h"

CliContainer CliContainer;

CliContainer::CliContainer()
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
{
	_counter = 0;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	651a      	str	r2, [r3, #80]	; 0x50
	memset(_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2250      	movs	r2, #80	; 0x50
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00d fabf 	bl	800ef78 <memset>
}
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b13      	cmp	r3, #19
 8001a14:	dc14      	bgt.n	8001a40 <_ZN12CliContainerD1Ev+0x3c>
		if (_CliCommand[i] != NULL) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <_ZN12CliContainerD1Ev+0x34>
			delete _CliCommand[i];
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <_ZN12CliContainerD1Ev+0x34>
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	3208      	adds	r2, #8
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e7e7      	b.n	8001a10 <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	if (_counter < MAX_CLI) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a58:	2b13      	cmp	r3, #19
 8001a5a:	dc0a      	bgt.n	8001a72 <_ZN12CliContainer3addEP10CliCommand+0x28>
		_CliCommand[_counter] = pCliCommand;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6839      	ldr	r1, [r7, #0]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_counter++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_ZN12CliContainer4CallEPcS0_>:

int CliContainer::getCounter(){
	return _counter;
}

int CliContainer::Call (char* cmdname, char* param ){
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < _counter; i++){
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	da25      	bge.n	8001ae4 <_ZN12CliContainer4CallEPcS0_+0x66>
		if(strcmp(cmdname, _CliCommand[i]->getName())==0){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff91 	bl	80019c8 <_ZNK10CliCommand7getNameEv>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	68b8      	ldr	r0, [r7, #8]
 8001aac:	f7fe fb90 	bl	80001d0 <strcmp>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <_ZN12CliContainer4CallEPcS0_+0x5e>
			_CliCommand[i]->doCommand(param);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4798      	blx	r3
			return 1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e004      	b.n	8001ae6 <_ZN12CliContainer4CallEPcS0_+0x68>
	for (int i = 0; i < _counter; i++){
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e7d4      	b.n	8001a8e <_ZN12CliContainer4CallEPcS0_+0x10>
		}
	}
	return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <_Z41__static_initialization_and_destruction_0ii>:
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d102      	bne.n	8001b10 <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer CliContainer;
 8001b0a:	4809      	ldr	r0, [pc, #36]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b0c:	f7ff ff68 	bl	80019e0 <_ZN12CliContainerC1Ev>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001b22:	f7ff ff6f 	bl	8001a04 <_ZN12CliContainerD1Ev>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000244 	.word	0x20000244

08001b34 <_GLOBAL__sub_I_CliContainer>:
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f7ff ffd7 	bl	8001af0 <_Z41__static_initialization_and_destruction_0ii>
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_GLOBAL__sub_D_CliContainer>:
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ffcf 	bl	8001af0 <_Z41__static_initialization_and_destruction_0ii>
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_Z22Communication_commTaskv>:
static uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
static int cmdcount = 0;
static int cmdprint = 0;

int Communication_commTask()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001b5a:	1db9      	adds	r1, r7, #6
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4839      	ldr	r0, [pc, #228]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001b62:	f006 fc0b 	bl	800837c <HAL_UART_Receive>
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d025      	beq.n	8001bbc <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001b70:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001b88:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da0d      	bge.n	8001bb8 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	492a      	ldr	r1, [pc, #168]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001ba4:	600a      	str	r2, [r1, #0]
 8001ba6:	4a2b      	ldr	r2, [pc, #172]	; (8001c54 <_Z22Communication_commTaskv+0x100>)
 8001ba8:	1899      	adds	r1, r3, r2
 8001baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4825      	ldr	r0, [pc, #148]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001bb2:	f006 fb4f 	bl	8008254 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001bb6:	e7eb      	b.n	8001b90 <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e040      	b.n	8001c3e <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	2b0d      	cmp	r3, #13
 8001bc0:	d016      	beq.n	8001bf0 <_Z22Communication_commTaskv+0x9c>
 8001bc2:	79bb      	ldrb	r3, [r7, #6]
 8001bc4:	2b0a      	cmp	r3, #10
 8001bc6:	d013      	beq.n	8001bf0 <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b63      	cmp	r3, #99	; 0x63
 8001bce:	dd05      	ble.n	8001bdc <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	491b      	ldr	r1, [pc, #108]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001be4:	600a      	str	r2, [r1, #0]
 8001be6:	79b9      	ldrb	r1, [r7, #6]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <_Z22Communication_commTaskv+0x100>)
 8001bea:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e026      	b.n	8001c3e <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	da0d      	bge.n	8001c18 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	4912      	ldr	r1, [pc, #72]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001c04:	600a      	str	r2, [r1, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <_Z22Communication_commTaskv+0x100>)
 8001c08:	1899      	adds	r1, r3, r2
 8001c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0e:	2201      	movs	r2, #1
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001c12:	f006 fb1f 	bl	8008254 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8001c16:	e7eb      	b.n	8001bf0 <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	490e      	ldr	r1, [pc, #56]	; (8001c58 <_Z22Communication_commTaskv+0x104>)
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <_Z22Communication_commTaskv+0xf4>)
 8001c22:	f006 fb17 	bl	8008254 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <_Z22Communication_commTaskv+0x100>)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_Z22Communication_commTaskv+0xfc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <_Z22Communication_commTaskv+0xf8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000b18 	.word	0x20000b18
 8001c4c:	20000300 	.word	0x20000300
 8001c50:	200002fc 	.word	0x200002fc
 8001c54:	20000298 	.word	0x20000298
 8001c58:	080128e4 	.word	0x080128e4

08001c5c <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

    int params = sscanf((const char*)cmdbuffer,"%s %s", cmd, param );
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	f107 0218 	add.w	r2, r7, #24
 8001c68:	490f      	ldr	r1, [pc, #60]	; (8001ca8 <_Z27Communication_handleCommandv+0x4c>)
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <_Z27Communication_handleCommandv+0x50>)
 8001c6c:	f00d ffd8 	bl	800fc20 <siscanf>
 8001c70:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d012      	beq.n	8001c9e <_Z27Communication_handleCommandv+0x42>
	   return;
    }

    if(CliContainer.Call(cmd, param) == 0){
 8001c78:	1d3a      	adds	r2, r7, #4
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <_Z27Communication_handleCommandv+0x54>)
 8001c82:	f7ff fefc 	bl	8001a7e <_ZN12CliContainer4CallEPcS0_>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <_Z27Communication_handleCommandv+0x44>
    printf("Invalid command\r\n");
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <_Z27Communication_handleCommandv+0x58>)
 8001c98:	f00d ff46 	bl	800fb28 <puts>
 8001c9c:	e000      	b.n	8001ca0 <_Z27Communication_handleCommandv+0x44>
	   return;
 8001c9e:	bf00      	nop
    }
}
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	080128e8 	.word	0x080128e8
 8001cac:	20000298 	.word	0x20000298
 8001cb0:	20000244 	.word	0x20000244
 8001cb4:	080128f0 	.word	0x080128f0

08001cb8 <StartComTask>:

extern "C" void StartComTask()
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8001cbc:	f7ff fc4e 	bl	800155c <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8001cc0:	f7ff ff48 	bl	8001b54 <_Z22Communication_commTaskv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <StartComTask+0x20>
		  Communication_handleCommand();
 8001cd4:	f7ff ffc2 	bl	8001c5c <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f00a fc53 	bl	800c584 <osDelay>
	  if (Communication_commTask()){
 8001cde:	e7ef      	b.n	8001cc0 <StartComTask+0x8>

08001ce0 <_ZN3Dht14waitWhileEqualEii>:
extern TIM_HandleTypeDef htim16;

extern Dht dht;

int Dht::waitWhileEqual(int value, int expectedTime)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	uint32_t timeout = expectedTime + (expectedTime) / 5;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a19      	ldr	r2, [pc, #100]	; (8001d54 <_ZN3Dht14waitWhileEqualEii+0x74>)
 8001cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf4:	1052      	asrs	r2, r2, #1
 8001cf6:	17db      	asrs	r3, r3, #31
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(_gpioPort, _gpioPin) == value) {
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	889b      	ldrh	r3, [r3, #4]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f002 fb67 	bl	80043e8 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <_ZN3Dht14waitWhileEqualEii+0x6a>
		if (__HAL_TIM_GET_COUNTER(_timer) > timeout) {
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	bf34      	ite	cc
 8001d3c:	2301      	movcc	r3, #1
 8001d3e:	2300      	movcs	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0e1      	beq.n	8001d0a <_ZN3Dht14waitWhileEqualEii+0x2a>
			// too much time in the state
			return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <_ZN3Dht14waitWhileEqualEii+0x6c>
		}
	}

	return true;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	66666667 	.word	0x66666667

08001d58 <_ZN3Dht13setGpioOutputEv>:

void Dht::setGpioOutput()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f107 020c 	add.w	r2, r7, #12
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 f981 	bl	8004094 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001d92:	2017      	movs	r0, #23
 8001d94:	f001 fd75 	bl	8003882 <HAL_NVIC_DisableIRQ>
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_ZN3Dht12setGpioInputEv>:

void Dht::setGpioInput()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f107 020c 	add.w	r2, r7, #12
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 f95d 	bl	8004094 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001dda:	2017      	movs	r0, #23
 8001ddc:	f001 fd51 	bl	8003882 <HAL_NVIC_DisableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_ZN3Dht4readEv>:

int Dht::read()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	setGpioOutput();
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffb1 	bl	8001d58 <_ZN3Dht13setGpioOutputEv>

	HAL_TIM_Base_Start(_timer);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 ff7c 	bl	8006cf8 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_RESET);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	889b      	ldrh	r3, [r3, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	4619      	mov	r1, r3
 8001e16:	f002 faff 	bl	8004418 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(_timer) < 19000);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001e26:	4293      	cmp	r3, r2
 8001e28:	bf94      	ite	ls
 8001e2a:	2301      	movls	r3, #1
 8001e2c:	2300      	movhi	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d000      	beq.n	8001e36 <_ZN3Dht4readEv+0x4e>
 8001e34:	e7f1      	b.n	8001e1a <_ZN3Dht4readEv+0x32>

	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_SET);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	889b      	ldrh	r3, [r3, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4619      	mov	r1, r3
 8001e42:	f002 fae9 	bl	8004418 <HAL_GPIO_WritePin>

	// start listening
	setGpioInput();
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffaa 	bl	8001da0 <_ZN3Dht12setGpioInputEv>

	// wait for response 20-40us
	if (!waitWhileEqual( 1, 40)) {
 8001e4c:	2228      	movs	r2, #40	; 0x28
 8001e4e:	2101      	movs	r1, #1
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff45 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <_ZN3Dht4readEv+0x82>
		return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e021      	b.n	8001eae <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(0, 80)) {
 8001e6a:	2250      	movs	r2, #80	; 0x50
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ff36 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <_ZN3Dht4readEv+0xa0>
		return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e012      	b.n	8001eae <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(1, 80)) {
 8001e88:	2250      	movs	r2, #80	; 0x50
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff27 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <_ZN3Dht4readEv+0xbe>
		return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e003      	b.n	8001eae <_ZN3Dht4readEv+0xc6>
	}
	reciveData();
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f806 	bl	8001eb8 <_ZN3Dht10reciveDataEv>
	return 1;
 8001eac:	2301      	movs	r3, #1

}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <_ZN3Dht10reciveDataEv>:

int Dht::reciveData()
{
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	// DHT start send data bits

	uint8_t data[5] = { 0 };
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	dc50      	bgt.n	8001f74 <_ZN3Dht10reciveDataEv+0xbc>
		for (int j = 0; j < 8; j++) {
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b07      	cmp	r3, #7
 8001eda:	dc47      	bgt.n	8001f6c <_ZN3Dht10reciveDataEv+0xb4>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual( 0, 60)) {
 8001edc:	223c      	movs	r2, #60	; 0x3c
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fefd 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_ZN3Dht10reciveDataEv+0x42>
				return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e095      	b.n	8002026 <_ZN3Dht10reciveDataEv+0x16e>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual( 1, 70)) {
 8001efa:	2246      	movs	r2, #70	; 0x46
 8001efc:	2101      	movs	r1, #1
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff feee 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_ZN3Dht10reciveDataEv+0x60>
				return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e086      	b.n	8002026 <_ZN3Dht10reciveDataEv+0x16e>
			}

			data[i] <<= 1;
 8001f18:	f107 0208 	add.w	r2, r7, #8
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	b2d9      	uxtb	r1, r3
 8001f26:	f107 0208 	add.w	r2, r7, #8
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	460a      	mov	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(_timer) > 50) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2b32      	cmp	r3, #50	; 0x32
 8001f3c:	bf8c      	ite	hi
 8001f3e:	2301      	movhi	r3, #1
 8001f40:	2300      	movls	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <_ZN3Dht10reciveDataEv+0xac>
				data[i] |= 1;
 8001f48:	f107 0208 	add.w	r2, r7, #8
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	b2d9      	uxtb	r1, r3
 8001f58:	f107 0208 	add.w	r2, r7, #8
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	460a      	mov	r2, r1
 8001f62:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	3301      	adds	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	e7b4      	b.n	8001ed6 <_ZN3Dht10reciveDataEv+0x1e>
	for (int i = 0; i < 5; i++) {
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e7ab      	b.n	8001ecc <_ZN3Dht10reciveDataEv+0x14>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 8001f74:	7a3a      	ldrb	r2, [r7, #8]
 8001f76:	7a7b      	ldrb	r3, [r7, #9]
 8001f78:	4413      	add	r3, r2
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	4413      	add	r3, r2
 8001f86:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 8001f88:	7b3b      	ldrb	r3, [r7, #12]
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <_ZN3Dht10reciveDataEv+0xdc>
		return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e048      	b.n	8002026 <_ZN3Dht10reciveDataEv+0x16e>
	}

	_humidity = (double)data[0] + ((double)data[1]) / 10;
 8001f94:	7a3b      	ldrb	r3, [r7, #8]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fac4 	bl	8000524 <__aeabi_ui2d>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	460d      	mov	r5, r1
 8001fa0:	7a7b      	ldrb	r3, [r7, #9]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fabe 	bl	8000524 <__aeabi_ui2d>
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <_ZN3Dht10reciveDataEv+0x178>)
 8001fae:	f7fe fc5d 	bl	800086c <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe f977 	bl	80002ac <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_temperature = (double)data[2] + ((double)data[3]) / 10;
 8001fc8:	7abb      	ldrb	r3, [r7, #10]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe faaa 	bl	8000524 <__aeabi_ui2d>
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe faa4 	bl	8000524 <__aeabi_ui2d>
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <_ZN3Dht10reciveDataEv+0x178>)
 8001fe2:	f7fe fc43 	bl	800086c <__aeabi_ddiv>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f95d 	bl	80002ac <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual( 0, 100)) {
 8001ffc:	2264      	movs	r2, #100	; 0x64
 8001ffe:	2100      	movs	r1, #0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fe6d 	bl	8001ce0 <_ZN3Dht14waitWhileEqualEii>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf0c      	ite	eq
 800200c:	2301      	moveq	r3, #1
 800200e:	2300      	movne	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <_ZN3Dht10reciveDataEv+0x162>
		return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e005      	b.n	8002026 <_ZN3Dht10reciveDataEv+0x16e>
	}

	HAL_TIM_Base_Stop(_timer);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	4618      	mov	r0, r3
 8002020:	f004 fed2 	bl	8006dc8 <HAL_TIM_Base_Stop>

	return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bdb0      	pop	{r4, r5, r7, pc}
 800202e:	bf00      	nop
 8002030:	40240000 	.word	0x40240000

08002034 <_ZN3Dht14getTemperatureEv>:
{
	return _humidity;
}

double Dht::getTemperature()
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	return _temperature;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002042:	ec43 2b17 	vmov	d7, r2, r3
}
 8002046:	eeb0 0a47 	vmov.f32	s0, s14
 800204a:	eef0 0a67 	vmov.f32	s1, s15
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <StartDhtTask>:


/* USER CODE END Header_StartDhtTask */
extern "C" void StartDhtTask()
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartDhtTask */
  /* Infinite loop */
  while(1)
  {
	dht.read();
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <StartDhtTask+0x14>)
 800205e:	f7ff fec3 	bl	8001de8 <_ZN3Dht4readEv>
    osDelay(1000);
 8002062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002066:	f00a fa8d 	bl	800c584 <osDelay>
	dht.read();
 800206a:	e7f7      	b.n	800205c <StartDhtTask+0x4>
 800206c:	20000440 	.word	0x20000440

08002070 <_ZN4FileC1EPKc>:

#include <File.h>

extern UART_HandleTypeDef huart2;

File::File(const char* nameFile) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
	strcpy(_nameFile, nameFile);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f203 4361 	addw	r3, r3, #1121	; 0x461
 8002080:	6839      	ldr	r1, [r7, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f00d fe3d 	bl	800fd02 <strcpy>
}
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <_ZN4File8myprintfEPKcz>:

void File::myprintf(const char *fmt, ...) {
 8002094:	b40e      	push	{r1, r2, r3}
 8002096:	b580      	push	{r7, lr}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	60bb      	str	r3, [r7, #8]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ac:	480b      	ldr	r0, [pc, #44]	; (80020dc <_ZN4File8myprintfEPKcz+0x48>)
 80020ae:	f00d feeb 	bl	800fe88 <vsniprintf>
    va_end(args);

  int len = strlen(buffer);
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <_ZN4File8myprintfEPKcz+0x48>)
 80020b4:	f7fe f896 	bl	80001e4 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	60fb      	str	r3, [r7, #12]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	4905      	ldr	r1, [pc, #20]	; (80020dc <_ZN4File8myprintfEPKcz+0x48>)
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <_ZN4File8myprintfEPKcz+0x4c>)
 80020c8:	f006 f8c4 	bl	8008254 <HAL_UART_Transmit>

}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020d6:	b003      	add	sp, #12
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000304 	.word	0x20000304
 80020e0:	20000b18 	.word	0x20000b18

080020e4 <_ZN4File10initSDCardEv>:
void File::initSDCard(){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80020ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f0:	f001 fa7a 	bl	80035e8 <HAL_Delay>
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	490c      	ldr	r1, [pc, #48]	; (800212c <_ZN4File10initSDCardEv+0x48>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f009 fcb4 	bl	800ba68 <f_mount>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if (fres != FR_OK) {
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <_ZN4File10initSDCardEv+0x42>
		myprintf("f_mount error (%i)\r\n", fres);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800211a:	461a      	mov	r2, r3
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <_ZN4File10initSDCardEv+0x4c>)
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffb8 	bl	8002094 <_ZN4File8myprintfEPKcz>
		return;
 8002124:	bf00      	nop
	}
}
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	08012904 	.word	0x08012904
 8002130:	08012908 	.word	0x08012908

08002134 <_ZN4File5writeEPKc>:
	f_close(&fil);


}

void File::write(const char* writeBuf){
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
	//write a file "write.txt"
	fres = f_open(&fil, _nameFile, FA_WRITE | FA_OPEN_APPEND | FA_OPEN_EXISTING);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 700c 	add.w	r0, r3, #560	; 0x230
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f203 4361 	addw	r3, r3, #1121	; 0x461
 800214a:	2232      	movs	r2, #50	; 0x32
 800214c:	4619      	mov	r1, r3
 800214e:	f009 fcd1 	bl	800baf4 <f_open>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if(fres == FR_OK) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 8002162:	2b00      	cmp	r3, #0
 8002164:	d007      	beq.n	8002176 <_ZN4File5writeEPKc+0x42>
    	//myprintf("I was able to open 'write.txt' for writing\r\n");
	} else {
		myprintf("f_open error (%i)\r\n", fres);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 800216c:	461a      	mov	r2, r3
 800216e:	4914      	ldr	r1, [pc, #80]	; (80021c0 <_ZN4File5writeEPKc+0x8c>)
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff8f 	bl	8002094 <_ZN4File8myprintfEPKcz>
    }

	UINT bytesWrote;
	fres = f_write(&fil, writeBuf, strlen(writeBuf), &bytesWrote);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f503 740c 	add.w	r4, r3, #560	; 0x230
 800217c:	6838      	ldr	r0, [r7, #0]
 800217e:	f7fe f831 	bl	80001e4 <strlen>
 8002182:	4602      	mov	r2, r0
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	4620      	mov	r0, r4
 800218c:	f009 fe70 	bl	800be70 <f_write>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if(fres == FR_OK) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <_ZN4File5writeEPKc+0x78>
		//myprintf("Wrote %i bytes to '%s'!\r\n", bytesWrote, _nameFile);
	} else {
		myprintf("f_write error (%i)\r\n");
 80021a4:	4907      	ldr	r1, [pc, #28]	; (80021c4 <_ZN4File5writeEPKc+0x90>)
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff74 	bl	8002094 <_ZN4File8myprintfEPKcz>
	}

	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00a f84f 	bl	800c256 <f_close>
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}
 80021c0:	08012920 	.word	0x08012920
 80021c4:	08012948 	.word	0x08012948

080021c8 <_ZN4File5clearEv>:

void File::clear(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

	//write a file "write.txt"
	fres = f_open(&fil, _nameFile, FA_CREATE_ALWAYS);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 700c 	add.w	r0, r3, #560	; 0x230
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f203 4361 	addw	r3, r3, #1121	; 0x461
 80021dc:	2208      	movs	r2, #8
 80021de:	4619      	mov	r1, r3
 80021e0:	f009 fc88 	bl	800baf4 <f_open>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
	if(fres == FR_OK) {
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <_ZN4File5clearEv+0x40>
    	//myprintf("I was able to open 'write.txt' for writing\r\n");
	} else {
		myprintf("f_open error (%i)\r\n", fres);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3460 	ldrb.w	r3, [r3, #1120]	; 0x460
 80021fe:	461a      	mov	r2, r3
 8002200:	4906      	ldr	r1, [pc, #24]	; (800221c <_ZN4File5clearEv+0x54>)
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff46 	bl	8002094 <_ZN4File8myprintfEPKcz>
    }
	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800220e:	4618      	mov	r0, r3
 8002210:	f00a f821 	bl	800c256 <f_close>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08012920 	.word	0x08012920

08002220 <_ZN5Flash5eraseEv>:

#include "Flash.h"


void Flash::erase()
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	uint32_t pageError;
	FLASH_EraseInitTypeDef basicFlash;

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
	basicFlash.Banks = FLASH_BANK_2;
 800222c:	2302      	movs	r3, #2
 800222e:	613b      	str	r3, [r7, #16]
	basicFlash.Page = _page;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	617b      	str	r3, [r7, #20]
	basicFlash.NbPages = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 800223a:	f001 fd13 	bl	8003c64 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&basicFlash, &pageError);
 800223e:	f107 021c 	add.w	r2, r7, #28
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fddf 	bl	8003e0c <HAL_FLASHEx_Erase>
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN5Flash5writhEPvj>:

void Flash::writh(void* data, size_t size)
{
 8002256:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
	erase();
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f7ff ffdb 	bl	8002220 <_ZN5Flash5eraseEv>
	uint64_t* Data = (uint64_t *)(data);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	617b      	str	r3, [r7, #20]
	for(uint64_t i = 0; i < size ; i ++){
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	461c      	mov	r4, r3
 8002280:	4615      	mov	r5, r2
 8002282:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002286:	42a2      	cmp	r2, r4
 8002288:	41ab      	sbcs	r3, r5
 800228a:	d216      	bcs.n	80022ba <_ZN5Flash5writhEPvj+0x64>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)_flashAdd+(i*8), *(Data+i));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	18d1      	adds	r1, r2, r3
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4413      	add	r3, r2
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	2000      	movs	r0, #0
 80022a4:	f001 fb86 	bl	80039b4 <HAL_FLASH_Program>
	for(uint64_t i = 0; i < size ; i ++){
 80022a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022ac:	f112 0801 	adds.w	r8, r2, #1
 80022b0:	f143 0900 	adc.w	r9, r3, #0
 80022b4:	e9c7 8906 	strd	r8, r9, [r7, #24]
 80022b8:	e7df      	b.n	800227a <_ZN5Flash5writhEPvj+0x24>
	}
}
 80022ba:	bf00      	nop
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080022c4 <_ZN5Flash4readEP13thresholdTemp>:

void Flash::read(thresholdTemp* buffer)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80022ce:	f001 fcc9 	bl	8003c64 <HAL_FLASH_Unlock>
	thresholdTemp * data = (thresholdTemp *)(_flashAdd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60fb      	str	r3, [r7, #12]
	if(data->magicNum!= 0x5A5A){
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	889b      	ldrh	r3, [r3, #4]
 80022dc:	f645 225a 	movw	r2, #23130	; 0x5a5a
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d103      	bne.n	80022ec <_ZN5Flash4readEP13thresholdTemp+0x28>
		return;
	}
	buffer = (thresholdTemp *)(_flashAdd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	e000      	b.n	80022ee <_ZN5Flash4readEP13thresholdTemp+0x2a>
		return;
 80022ec:	bf00      	nop
}
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
   }
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	891b      	ldrh	r3, [r3, #8]
   }
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZN3Led8getStateEv>:

    LedState getState(){
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    	return _state;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
   }
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "cmsis_os.h"

extern Led ledB;

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	4613      	mov	r3, r2
 8002348:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_ZN3Led2onEv>:

void Led::on()
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6858      	ldr	r0, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	891b      	ldrh	r3, [r3, #8]
 8002380:	2201      	movs	r2, #1
 8002382:	4619      	mov	r1, r3
 8002384:	f002 f848 	bl	8004418 <HAL_GPIO_WritePin>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <_ZN3Led3offEv>:

void Led::off()
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6858      	ldr	r0, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	891b      	ldrh	r3, [r3, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	f002 f835 	bl	8004418 <HAL_GPIO_WritePin>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_ZN3Led5blinkEv>:
void Led::blink()
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	_state = STATE_BLINKING;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	701a      	strb	r2, [r3, #0]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <startBlinkTask>:


extern "C" void startBlinkTask()
{
 80023d0:	b598      	push	{r3, r4, r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */

  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 80023d4:	480f      	ldr	r0, [pc, #60]	; (8002414 <startBlinkTask+0x44>)
 80023d6:	f7ff ffa5 	bl	8002324 <_ZN3Led8getStateEv>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b02      	cmp	r3, #2
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00f      	beq.n	800240a <startBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 80023ea:	480a      	ldr	r0, [pc, #40]	; (8002414 <startBlinkTask+0x44>)
 80023ec:	f7ff ff82 	bl	80022f4 <_ZN3Led8getGPIOxEv>
 80023f0:	4604      	mov	r4, r0
 80023f2:	4808      	ldr	r0, [pc, #32]	; (8002414 <startBlinkTask+0x44>)
 80023f4:	f7ff ff8a 	bl	800230c <_ZN3Led11getGPIO_PinEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f002 f823 	bl	8004448 <HAL_GPIO_TogglePin>
	osDelay(600);
 8002402:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002406:	f00a f8bd 	bl	800c584 <osDelay>
	}
	osDelay(1);
 800240a:	2001      	movs	r0, #1
 800240c:	f00a f8ba 	bl	800c584 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 8002410:	e7e0      	b.n	80023d4 <startBlinkTask+0x4>
 8002412:	bf00      	nop
 8002414:	20000434 	.word	0x20000434

08002418 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:

	int bcdToInt(uint8_t bcd);
	uint8_t intToBcd(int value, int minVal, int maxVal);

public:
	Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr){
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
		_hi2c = hi2c;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	601a      	str	r2, [r3, #0]
		_devAddr = devAddr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	711a      	strb	r2, [r3, #4]
	};
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_ZN3RtcD1Ev>:
	~Rtc(){};
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_ZN3LedD1Ev>:
    ~Led(){};
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_ZN6ButtonD1Ev>:
	uint32_t _counter;
public:


	Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Button(){};
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:


public:


	Buzzer(TIM_HandleTypeDef * timer){
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
	_timer = timer;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]
	_noteBuzzer [0] = 390;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8002498:	609a      	str	r2, [r3, #8]
	_noteBuzzer [1] = 100;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2264      	movs	r2, #100	; 0x64
 800249e:	60da      	str	r2, [r3, #12]
	_state = MUSIC_OFF;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	711a      	strb	r2, [r3, #4]
	_sizeOfMusic = (sizeof(_noteBuzzer) / sizeof(_noteBuzzer[0]));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	611a      	str	r2, [r3, #16]
	_currentNote= 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	751a      	strb	r2, [r3, #20]
	}
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_ZN6BuzzerD1Ev>:
	~Buzzer(){};
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>:

	int waitWhileEqual(int value, int expectedTime);
	void setGpioOutput();
	void setGpioInput();
public:
	Dht( GPIO_TypeDef* gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer){
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
		_gpioPort = gpioPort;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	601a      	str	r2, [r3, #0]
		_gpioPin = gpioPin;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	809a      	strh	r2, [r3, #4]
		_timer = timer;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]
//		_counter = 0;
//		_maxCounter = 0;
//		_state = DHT_STATE_NO_DATA;
		_temperature = 0.0;
 80024f8:	68f9      	ldr	r1, [r7, #12]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9c1 2306 	strd	r2, r3, [r1, #24]
		_humidity = 0.0;
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_ZN3DhtD1Ev>:
	~Dht(){};
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZN5FlashC1Ev>:
	uint32_t _flashAdd;
	uint32_t _page;

public:

	Flash(){
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
		_page = 256;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002546:	605a      	str	r2, [r3, #4]
		_flashAdd = 0x08080000;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a04      	ldr	r2, [pc, #16]	; (800255c <_ZN5FlashC1Ev+0x24>)
 800254c:	601a      	str	r2, [r3, #0]
	}
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	08080000 	.word	0x08080000

08002560 <_ZN5FlashD1Ev>:
	~Flash(){};
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <_ZN4FileD1Ev>:
	char _nameFile [20];
	DWORD free_clusters, free_sectors, total_sectors;

public:
	File(const char* nameFile);
	~File(){};
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_write>:
File file("test.txt");
static char logBuffer[100];

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	b29a      	uxth	r2, r3
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	4804      	ldr	r0, [pc, #16]	; (80025b4 <_write+0x28>)
 80025a4:	f005 fe56 	bl	8008254 <HAL_UART_Transmit>
	return len;
 80025a8:	687b      	ldr	r3, [r7, #4]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000b18 	.word	0x20000b18

080025b8 <HAL_GPIO_EXTI_Callback>:
//////////////////////////////////////////////////////////////


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x18>)
 80025c4:	f7fe fc9c 	bl	8000f00 <_ZN6Button9interruptEv>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000041c 	.word	0x2000041c

080025d4 <StartManagerTask>:




extern "C" void StartManagerTask(void *argument)
{
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	b091      	sub	sp, #68	; 0x44
 80025d8:	af08      	add	r7, sp, #32
 80025da:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartManagerTask */
	file.initSDCard();
 80025dc:	486b      	ldr	r0, [pc, #428]	; (800278c <StartManagerTask+0x1b8>)
 80025de:	f7ff fd81 	bl	80020e4 <_ZN4File10initSDCardEv>
	flash.read(&Temprature);
 80025e2:	496b      	ldr	r1, [pc, #428]	; (8002790 <StartManagerTask+0x1bc>)
 80025e4:	486b      	ldr	r0, [pc, #428]	; (8002794 <StartManagerTask+0x1c0>)
 80025e6:	f7ff fe6d 	bl	80022c4 <_ZN5Flash4readEP13thresholdTemp>
	stateTemp stateOfTemp = NORMAL_TEMPRATURE;
 80025ea:	2302      	movs	r3, #2
 80025ec:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
	while(1)
	{
		rtc.getTime(&dateTime);
 80025ee:	496a      	ldr	r1, [pc, #424]	; (8002798 <StartManagerTask+0x1c4>)
 80025f0:	486a      	ldr	r0, [pc, #424]	; (800279c <StartManagerTask+0x1c8>)
 80025f2:	f000 f972 	bl	80028da <_ZN3Rtc7getTimeEP9DateTime_>
		sprintf(logBuffer,"date time : %02d:%02d:%02d-%d-%02d/%02d/%02d temperature: %f \r\n",
 80025f6:	4b68      	ldr	r3, [pc, #416]	; (8002798 <StartManagerTask+0x1c4>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	4b66      	ldr	r3, [pc, #408]	; (8002798 <StartManagerTask+0x1c4>)
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	60f9      	str	r1, [r7, #12]
 8002602:	4b65      	ldr	r3, [pc, #404]	; (8002798 <StartManagerTask+0x1c4>)
 8002604:	681c      	ldr	r4, [r3, #0]
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <StartManagerTask+0x1c4>)
 8002608:	68dd      	ldr	r5, [r3, #12]
 800260a:	4b63      	ldr	r3, [pc, #396]	; (8002798 <StartManagerTask+0x1c4>)
 800260c:	691e      	ldr	r6, [r3, #16]
 800260e:	4b62      	ldr	r3, [pc, #392]	; (8002798 <StartManagerTask+0x1c4>)
 8002610:	6958      	ldr	r0, [r3, #20]
 8002612:	60b8      	str	r0, [r7, #8]
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <StartManagerTask+0x1c4>)
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	4861      	ldr	r0, [pc, #388]	; (80027a0 <StartManagerTask+0x1cc>)
 800261c:	f7ff fd0a 	bl	8002034 <_ZN3Dht14getTemperatureEv>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	eef0 7a60 	vmov.f32	s15, s1
 8002628:	ed8d 7b06 	vstr	d7, [sp, #24]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	9204      	str	r2, [sp, #16]
 8002630:	68b8      	ldr	r0, [r7, #8]
 8002632:	9003      	str	r0, [sp, #12]
 8002634:	9602      	str	r6, [sp, #8]
 8002636:	9501      	str	r5, [sp, #4]
 8002638:	9400      	str	r4, [sp, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4959      	ldr	r1, [pc, #356]	; (80027a4 <StartManagerTask+0x1d0>)
 8002640:	4859      	ldr	r0, [pc, #356]	; (80027a8 <StartManagerTask+0x1d4>)
 8002642:	f00d facd 	bl	800fbe0 <siprintf>
				dateTime.hours, dateTime.min, dateTime.sec, dateTime.weekDay,
				dateTime.day, dateTime.month, dateTime.year,
				dht.getTemperature() );
		file.write(logBuffer);
 8002646:	4958      	ldr	r1, [pc, #352]	; (80027a8 <StartManagerTask+0x1d4>)
 8002648:	4850      	ldr	r0, [pc, #320]	; (800278c <StartManagerTask+0x1b8>)
 800264a:	f7ff fd73 	bl	8002134 <_ZN4File5writeEPKc>

	if(dht.getTemperature() > Temprature.criticalTemp){
 800264e:	4854      	ldr	r0, [pc, #336]	; (80027a0 <StartManagerTask+0x1cc>)
 8002650:	f7ff fcf0 	bl	8002034 <_ZN3Dht14getTemperatureEv>
 8002654:	ec55 4b10 	vmov	r4, r5, d0
 8002658:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <StartManagerTask+0x1bc>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff71 	bl	8000544 <__aeabi_i2d>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	2101      	movs	r1, #1
 8002668:	460e      	mov	r6, r1
 800266a:	4620      	mov	r0, r4
 800266c:	4629      	mov	r1, r5
 800266e:	f7fe fa63 	bl	8000b38 <__aeabi_dcmpgt>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <StartManagerTask+0xa8>
 8002678:	2300      	movs	r3, #0
 800267a:	461e      	mov	r6, r3
 800267c:	b2f3      	uxtb	r3, r6
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <StartManagerTask+0xc6>
		if(stateOfTemp!=CRITICAL_TEMPRATURE){
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d07b      	beq.n	8002780 <StartManagerTask+0x1ac>
		ledB.blink();
 8002688:	4848      	ldr	r0, [pc, #288]	; (80027ac <StartManagerTask+0x1d8>)
 800268a:	f7ff fe94 	bl	80023b6 <_ZN3Led5blinkEv>
		buzzer.on();
 800268e:	4848      	ldr	r0, [pc, #288]	; (80027b0 <StartManagerTask+0x1dc>)
 8002690:	f7fe fd25 	bl	80010de <_ZN6Buzzer2onEv>
		stateOfTemp = CRITICAL_TEMPRATURE;
 8002694:	2300      	movs	r3, #0
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	e072      	b.n	8002780 <StartManagerTask+0x1ac>
		// send log to file2
		}
	}
	else if(dht.getTemperature() > Temprature.warningTemp){
 800269a:	4841      	ldr	r0, [pc, #260]	; (80027a0 <StartManagerTask+0x1cc>)
 800269c:	f7ff fcca 	bl	8002034 <_ZN3Dht14getTemperatureEv>
 80026a0:	ec55 4b10 	vmov	r4, r5, d0
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <StartManagerTask+0x1bc>)
 80026a6:	885b      	ldrh	r3, [r3, #2]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff4b 	bl	8000544 <__aeabi_i2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	2101      	movs	r1, #1
 80026b4:	460e      	mov	r6, r1
 80026b6:	4620      	mov	r0, r4
 80026b8:	4629      	mov	r1, r5
 80026ba:	f7fe fa3d 	bl	8000b38 <__aeabi_dcmpgt>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <StartManagerTask+0xf4>
 80026c4:	2300      	movs	r3, #0
 80026c6:	461e      	mov	r6, r3
 80026c8:	b2f3      	uxtb	r3, r6
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d02c      	beq.n	8002728 <StartManagerTask+0x154>

		if(stateOfTemp==NORMAL_TEMPRATURE){
 80026ce:	7ffb      	ldrb	r3, [r7, #31]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d104      	bne.n	80026de <StartManagerTask+0x10a>
			ledB.on();
 80026d4:	4835      	ldr	r0, [pc, #212]	; (80027ac <StartManagerTask+0x1d8>)
 80026d6:	f7ff fe48 	bl	800236a <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 80026da:	2301      	movs	r3, #1
 80026dc:	77fb      	strb	r3, [r7, #31]
			// send log to file2
		}
		if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80026de:	7ffb      	ldrb	r3, [r7, #31]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <StartManagerTask+0x13c>
			dht.getTemperature() > (Temprature.criticalTemp-3)){
 80026e4:	482e      	ldr	r0, [pc, #184]	; (80027a0 <StartManagerTask+0x1cc>)
 80026e6:	f7ff fca5 	bl	8002034 <_ZN3Dht14getTemperatureEv>
 80026ea:	ec55 4b10 	vmov	r4, r5, d0
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <StartManagerTask+0x1bc>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	3b03      	subs	r3, #3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff25 	bl	8000544 <__aeabi_i2d>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
		if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	f7fe fa19 	bl	8000b38 <__aeabi_dcmpgt>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <StartManagerTask+0x13c>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <StartManagerTask+0x13e>
 8002710:	2300      	movs	r3, #0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d034      	beq.n	8002780 <StartManagerTask+0x1ac>
			buzzer.off();
 8002716:	4826      	ldr	r0, [pc, #152]	; (80027b0 <StartManagerTask+0x1dc>)
 8002718:	f7fe fcfa 	bl	8001110 <_ZN6Buzzer3offEv>
			ledB.on();
 800271c:	4823      	ldr	r0, [pc, #140]	; (80027ac <StartManagerTask+0x1d8>)
 800271e:	f7ff fe24 	bl	800236a <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 8002722:	2301      	movs	r3, #1
 8002724:	77fb      	strb	r3, [r7, #31]
 8002726:	e02b      	b.n	8002780 <StartManagerTask+0x1ac>
			// send log to file2
		}

	}
	else{
		if(stateOfTemp==CRITICAL_TEMPRATURE){
 8002728:	7ffb      	ldrb	r3, [r7, #31]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <StartManagerTask+0x16a>
					ledB.off();
 800272e:	481f      	ldr	r0, [pc, #124]	; (80027ac <StartManagerTask+0x1d8>)
 8002730:	f7ff fe2e 	bl	8002390 <_ZN3Led3offEv>
					buzzer.off();
 8002734:	481e      	ldr	r0, [pc, #120]	; (80027b0 <StartManagerTask+0x1dc>)
 8002736:	f7fe fceb 	bl	8001110 <_ZN6Buzzer3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 800273a:	2302      	movs	r3, #2
 800273c:	77fb      	strb	r3, [r7, #31]
					// send log to file2
		}
		if(stateOfTemp==WARNING_TEMPRATURE &&
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d115      	bne.n	8002770 <StartManagerTask+0x19c>
					dht.getTemperature() > (Temprature.warningTemp-3)){
 8002744:	4816      	ldr	r0, [pc, #88]	; (80027a0 <StartManagerTask+0x1cc>)
 8002746:	f7ff fc75 	bl	8002034 <_ZN3Dht14getTemperatureEv>
 800274a:	ec55 4b10 	vmov	r4, r5, d0
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <StartManagerTask+0x1bc>)
 8002750:	885b      	ldrh	r3, [r3, #2]
 8002752:	3b03      	subs	r3, #3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fef5 	bl	8000544 <__aeabi_i2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
		if(stateOfTemp==WARNING_TEMPRATURE &&
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fe f9e9 	bl	8000b38 <__aeabi_dcmpgt>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <StartManagerTask+0x19c>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <StartManagerTask+0x19e>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <StartManagerTask+0x1ac>
					ledB.off();
 8002776:	480d      	ldr	r0, [pc, #52]	; (80027ac <StartManagerTask+0x1d8>)
 8002778:	f7ff fe0a 	bl	8002390 <_ZN3Led3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 800277c:	2302      	movs	r3, #2
 800277e:	77fb      	strb	r3, [r7, #31]
					// send log to file2
		}
	}
	osDelay(1000);
 8002780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002784:	f009 fefe 	bl	800c584 <osDelay>
		rtc.getTime(&dateTime);
 8002788:	e731      	b.n	80025ee <StartManagerTask+0x1a>
 800278a:	bf00      	nop
 800278c:	20000494 	.word	0x20000494
 8002790:	20000000 	.word	0x20000000
 8002794:	20000468 	.word	0x20000468
 8002798:	20000478 	.word	0x20000478
 800279c:	20000470 	.word	0x20000470
 80027a0:	20000440 	.word	0x20000440
 80027a4:	08012960 	.word	0x08012960
 80027a8:	20000918 	.word	0x20000918
 80027ac:	20000434 	.word	0x20000434
 80027b0:	20000404 	.word	0x20000404

080027b4 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartManagerTask */
}
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d127      	bne.n	8002814 <_Z41__static_initialization_and_destruction_0ii+0x60>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d122      	bne.n	8002814 <_Z41__static_initialization_and_destruction_0ii+0x60>
Buzzer buzzer(&htim3);
 80027ce:	4922      	ldr	r1, [pc, #136]	; (8002858 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80027d0:	4822      	ldr	r0, [pc, #136]	; (800285c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80027d2:	f7ff fe56 	bl	8002482 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
Button button(B2_GPIO_Port ,  B2_Pin);
 80027d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80027de:	4820      	ldr	r0, [pc, #128]	; (8002860 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80027e0:	f7fe fb74 	bl	8000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 80027e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027e8:	491e      	ldr	r1, [pc, #120]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80027ea:	481f      	ldr	r0, [pc, #124]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80027ec:	f7ff fda6 	bl	800233c <_ZN3LedC1EP12GPIO_TypeDeft>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80027f2:	2220      	movs	r2, #32
 80027f4:	491b      	ldr	r1, [pc, #108]	; (8002864 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80027f6:	481e      	ldr	r0, [pc, #120]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80027f8:	f7ff fe6d 	bl	80024d6 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>
Flash flash;
 80027fc:	481d      	ldr	r0, [pc, #116]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80027fe:	f7ff fe9b 	bl	8002538 <_ZN5FlashC1Ev>
Rtc rtc(&hi2c1, 0xD0);
 8002802:	22d0      	movs	r2, #208	; 0xd0
 8002804:	491c      	ldr	r1, [pc, #112]	; (8002878 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8002806:	481d      	ldr	r0, [pc, #116]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002808:	f7ff fe06 	bl	8002418 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
File file("test.txt");
 800280c:	491c      	ldr	r1, [pc, #112]	; (8002880 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800280e:	481d      	ldr	r0, [pc, #116]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002810:	f7ff fc2e 	bl	8002070 <_ZN4FileC1EPKc>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d119      	bne.n	800284e <_Z41__static_initialization_and_destruction_0ii+0x9a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002820:	4293      	cmp	r3, r2
 8002822:	d114      	bne.n	800284e <_Z41__static_initialization_and_destruction_0ii+0x9a>
 8002824:	4817      	ldr	r0, [pc, #92]	; (8002884 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002826:	f7ff fea6 	bl	8002576 <_ZN4FileD1Ev>
Rtc rtc(&hi2c1, 0xD0);
 800282a:	4814      	ldr	r0, [pc, #80]	; (800287c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800282c:	f7ff fe08 	bl	8002440 <_ZN3RtcD1Ev>
Flash flash;
 8002830:	4810      	ldr	r0, [pc, #64]	; (8002874 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002832:	f7ff fe95 	bl	8002560 <_ZN5FlashD1Ev>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 8002836:	480e      	ldr	r0, [pc, #56]	; (8002870 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8002838:	f7ff fe73 	bl	8002522 <_ZN3DhtD1Ev>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 800283c:	480a      	ldr	r0, [pc, #40]	; (8002868 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800283e:	f7ff fe0a 	bl	8002456 <_ZN3LedD1Ev>
Button button(B2_GPIO_Port ,  B2_Pin);
 8002842:	4807      	ldr	r0, [pc, #28]	; (8002860 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002844:	f7ff fe12 	bl	800246c <_ZN6ButtonD1Ev>
Buzzer buzzer(&htim3);
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800284a:	f7ff fe39 	bl	80024c0 <_ZN6BuzzerD1Ev>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000a34 	.word	0x20000a34
 800285c:	20000404 	.word	0x20000404
 8002860:	2000041c 	.word	0x2000041c
 8002864:	48000400 	.word	0x48000400
 8002868:	20000434 	.word	0x20000434
 800286c:	20000acc 	.word	0x20000acc
 8002870:	20000440 	.word	0x20000440
 8002874:	20000468 	.word	0x20000468
 8002878:	2000097c 	.word	0x2000097c
 800287c:	20000470 	.word	0x20000470
 8002880:	080129a0 	.word	0x080129a0
 8002884:	20000494 	.word	0x20000494

08002888 <_GLOBAL__sub_I_buzzer>:
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
 800288c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff ff8f 	bl	80027b4 <_Z41__static_initialization_and_destruction_0ii>
 8002896:	bd80      	pop	{r7, pc}

08002898 <_GLOBAL__sub_D_buzzer>:
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
 800289c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff ff87 	bl	80027b4 <_Z41__static_initialization_and_destruction_0ii>
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZN3Rtc8bcdToIntEh>:

extern I2C_HandleTypeDef hi2c1;


int Rtc::bcdToInt(uint8_t bcd)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	091b      	lsrs	r3, r3, #4
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	461a      	mov	r2, r3
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	4413      	add	r3, r2
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_ZN3Rtc7getTimeEP9DateTime_>:
	return ((value / 10) << 4) | (value % 10);
}


void Rtc::getTime(DateTime* dateTime)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af04      	add	r7, sp, #16
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	b299      	uxth	r1, r3
 80028ee:	23ff      	movs	r3, #255	; 0xff
 80028f0:	9302      	str	r3, [sp, #8]
 80028f2:	2307      	movs	r3, #7
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2301      	movs	r3, #1
 80028fe:	2200      	movs	r2, #0
 8002900:	f001 fe64 	bl	80045cc <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8002904:	7a3b      	ldrb	r3, [r7, #8]
 8002906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800290a:	b2db      	uxtb	r3, r3
 800290c:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 800290e:	7a3b      	ldrb	r3, [r7, #8]
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ffc8 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002918:	4602      	mov	r2, r0
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 800291e:	7a7b      	ldrb	r3, [r7, #9]
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffc0 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002928:	4602      	mov	r2, r0
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffb8 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002938:	4602      	mov	r2, r0
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f003 0207 	and.w	r2, r3, #7
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8002948:	7b3b      	ldrb	r3, [r7, #12]
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ffab 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002952:	4602      	mov	r2, r0
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 8002958:	7b7b      	ldrb	r3, [r7, #13]
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffa3 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	4619      	mov	r1, r3
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff9b 	bl	80028a8 <_ZN3Rtc8bcdToIntEh>
 8002972:	4602      	mov	r2, r0
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	619a      	str	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002984:	f000 fdb4 	bl	80034f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002988:	f000 f86a 	bl	8002a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800298c:	f000 fa20 	bl	8002dd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002990:	f000 f9ee 	bl	8002d70 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002994:	f000 f8b6 	bl	8002b04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002998:	f000 f932 	bl	8002c00 <MX_TIM3_Init>
  MX_TIM6_Init();
 800299c:	f000 f98a 	bl	8002cb4 <MX_TIM6_Init>
  MX_TIM16_Init();
 80029a0:	f000 f9c0 	bl	8002d24 <MX_TIM16_Init>
  MX_SPI1_Init();
 80029a4:	f000 f8ee 	bl	8002b84 <MX_SPI1_Init>
  MX_FATFS_Init();
 80029a8:	f006 fdd0 	bl	800954c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80029ac:	f009 fd0e 	bl	800c3cc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029b0:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <main+0x98>)
 80029b2:	2100      	movs	r1, #0
 80029b4:	4819      	ldr	r0, [pc, #100]	; (8002a1c <main+0x9c>)
 80029b6:	f009 fd53 	bl	800c460 <osThreadNew>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a18      	ldr	r2, [pc, #96]	; (8002a20 <main+0xa0>)
 80029be:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <main+0xa4>)
 80029c2:	2100      	movs	r1, #0
 80029c4:	4818      	ldr	r0, [pc, #96]	; (8002a28 <main+0xa8>)
 80029c6:	f009 fd4b 	bl	800c460 <osThreadNew>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4a17      	ldr	r2, [pc, #92]	; (8002a2c <main+0xac>)
 80029ce:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <main+0xb0>)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4817      	ldr	r0, [pc, #92]	; (8002a34 <main+0xb4>)
 80029d6:	f009 fd43 	bl	800c460 <osThreadNew>
 80029da:	4603      	mov	r3, r0
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <main+0xb8>)
 80029de:	6013      	str	r3, [r2, #0]

  /* creation of buttonTak */
  buttonTakHandle = osThreadNew(StartbuttonTak, NULL, &buttonTak_attributes);
 80029e0:	4a16      	ldr	r2, [pc, #88]	; (8002a3c <main+0xbc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	4816      	ldr	r0, [pc, #88]	; (8002a40 <main+0xc0>)
 80029e6:	f009 fd3b 	bl	800c460 <osThreadNew>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <main+0xc4>)
 80029ee:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(StartDhtTask, NULL, &DhtTask_attributes);
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <main+0xc8>)
 80029f2:	2100      	movs	r1, #0
 80029f4:	4815      	ldr	r0, [pc, #84]	; (8002a4c <main+0xcc>)
 80029f6:	f009 fd33 	bl	800c460 <osThreadNew>
 80029fa:	4603      	mov	r3, r0
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <main+0xd0>)
 80029fe:	6013      	str	r3, [r2, #0]

  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <main+0xd4>)
 8002a02:	2100      	movs	r1, #0
 8002a04:	4814      	ldr	r0, [pc, #80]	; (8002a58 <main+0xd8>)
 8002a06:	f009 fd2b 	bl	800c460 <osThreadNew>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <main+0xdc>)
 8002a0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a10:	f009 fd00 	bl	800c414 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <main+0x94>
 8002a16:	bf00      	nop
 8002a18:	08012b44 	.word	0x08012b44
 8002a1c:	08002ee9 	.word	0x08002ee9
 8002a20:	20000b9c 	.word	0x20000b9c
 8002a24:	08012b68 	.word	0x08012b68
 8002a28:	080023d1 	.word	0x080023d1
 8002a2c:	20000ba0 	.word	0x20000ba0
 8002a30:	08012b8c 	.word	0x08012b8c
 8002a34:	08001cb9 	.word	0x08001cb9
 8002a38:	20000ba4 	.word	0x20000ba4
 8002a3c:	08012bb0 	.word	0x08012bb0
 8002a40:	08001029 	.word	0x08001029
 8002a44:	20000ba8 	.word	0x20000ba8
 8002a48:	08012bd4 	.word	0x08012bd4
 8002a4c:	08002059 	.word	0x08002059
 8002a50:	20000bac 	.word	0x20000bac
 8002a54:	08012bf8 	.word	0x08012bf8
 8002a58:	080025d5 	.word	0x080025d5
 8002a5c:	20000bb0 	.word	0x20000bb0

08002a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b096      	sub	sp, #88	; 0x58
 8002a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	2244      	movs	r2, #68	; 0x44
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00c fa82 	bl	800ef78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a74:	463b      	mov	r3, r7
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a86:	f002 f9b3 	bl	8004df0 <HAL_PWREx_ControlVoltageScaling>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002a90:	f000 fa32 	bl	8002ef8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a94:	2302      	movs	r3, #2
 8002a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002aae:	230a      	movs	r3, #10
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002aba:	2302      	movs	r3, #2
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 f9ea 	bl	8004e9c <HAL_RCC_OscConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002ace:	f000 fa13 	bl	8002ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	2104      	movs	r1, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fdb2 	bl	8005654 <HAL_RCC_ClockConfig>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002af6:	f000 f9ff 	bl	8002ef8 <Error_Handler>
  }
}
 8002afa:	bf00      	nop
 8002afc:	3758      	adds	r7, #88	; 0x58
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b0a:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <MX_I2C1_Init+0x78>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002b0e:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <MX_I2C1_Init+0x7c>)
 8002b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b3e:	480e      	ldr	r0, [pc, #56]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b40:	f001 fcb4 	bl	80044ac <HAL_I2C_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b4a:	f000 f9d5 	bl	8002ef8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b52:	f002 f8a7 	bl	8004ca4 <HAL_I2CEx_ConfigAnalogFilter>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b5c:	f000 f9cc 	bl	8002ef8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b60:	2100      	movs	r1, #0
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_I2C1_Init+0x74>)
 8002b64:	f002 f8e9 	bl	8004d3a <HAL_I2CEx_ConfigDigitalFilter>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b6e:	f000 f9c3 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000097c 	.word	0x2000097c
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	10909cec 	.word	0x10909cec

08002b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <MX_SPI1_Init+0x78>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002b9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ba2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba4:	4b14      	ldr	r3, [pc, #80]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bba:	2230      	movs	r2, #48	; 0x30
 8002bbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bca:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002bd0:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002bde:	2208      	movs	r2, #8
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <MX_SPI1_Init+0x74>)
 8002be4:	f003 fc16 	bl	8006414 <HAL_SPI_Init>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002bee:	f000 f983 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200009d0 	.word	0x200009d0
 8002bfc:	40013000 	.word	0x40013000

08002c00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c12:	463b      	mov	r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c26:	4a22      	ldr	r2, [pc, #136]	; (8002cb0 <MX_TIM3_Init+0xb0>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c2c:	f240 321f 	movw	r2, #799	; 0x31f
 8002c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c3a:	2264      	movs	r2, #100	; 0x64
 8002c3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c4a:	4818      	ldr	r0, [pc, #96]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c4c:	f004 f983 	bl	8006f56 <HAL_TIM_PWM_Init>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002c56:	f000 f94f 	bl	8002ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	4810      	ldr	r0, [pc, #64]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c6a:	f005 f9ff 	bl	800806c <HAL_TIMEx_MasterConfigSynchronization>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002c74:	f000 f940 	bl	8002ef8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c78:	2360      	movs	r3, #96	; 0x60
 8002c7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002c7c:	2332      	movs	r3, #50	; 0x32
 8002c7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c88:	463b      	mov	r3, r7
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4807      	ldr	r0, [pc, #28]	; (8002cac <MX_TIM3_Init+0xac>)
 8002c90:	f004 fd10 	bl	80076b4 <HAL_TIM_PWM_ConfigChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002c9a:	f000 f92d 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <MX_TIM3_Init+0xac>)
 8002ca0:	f000 fa5a 	bl	8003158 <HAL_TIM_MspPostInit>

}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000a34 	.word	0x20000a34
 8002cb0:	40000400 	.word	0x40000400

08002cb4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cc4:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <MX_TIM6_Init+0x6c>)
 8002cc8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002ccc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002cd0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002cda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ce0:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ce6:	480d      	ldr	r0, [pc, #52]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002ce8:	f003 ffae 	bl	8006c48 <HAL_TIM_Base_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cf2:	f000 f901 	bl	8002ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	4806      	ldr	r0, [pc, #24]	; (8002d1c <MX_TIM6_Init+0x68>)
 8002d04:	f005 f9b2 	bl	800806c <HAL_TIMEx_MasterConfigSynchronization>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002d0e:	f000 f8f3 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000a80 	.word	0x20000a80
 8002d20:	40001000 	.word	0x40001000

08002d24 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <MX_TIM16_Init+0x48>)
 8002d2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d30:	2250      	movs	r2, #80	; 0x50
 8002d32:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <MX_TIM16_Init+0x44>)
 8002d56:	f003 ff77 	bl	8006c48 <HAL_TIM_Base_Init>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002d60:	f000 f8ca 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000acc 	.word	0x20000acc
 8002d6c:	40014400 	.word	0x40014400

08002d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <MX_USART2_UART_Init+0x5c>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <MX_USART2_UART_Init+0x58>)
 8002db4:	f005 fa00 	bl	80081b8 <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002dbe:	f000 f89b 	bl	8002ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000b18 	.word	0x20000b18
 8002dcc:	40004400 	.word	0x40004400

08002dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	4a3c      	ldr	r2, [pc, #240]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	4a36      	ldr	r2, [pc, #216]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b31      	ldr	r3, [pc, #196]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	4a30      	ldr	r2, [pc, #192]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <MX_GPIO_Init+0x10c>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8002e46:	2200      	movs	r2, #0
 8002e48:	f246 0140 	movw	r1, #24640	; 0x6040
 8002e4c:	4824      	ldr	r0, [pc, #144]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002e4e:	f001 fae3 	bl	8004418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e58:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	481e      	ldr	r0, [pc, #120]	; (8002ee4 <MX_GPIO_Init+0x114>)
 8002e6a:	f001 f913 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SD_CS_Pin;
 8002e6e:	f246 0340 	movw	r3, #24640	; 0x6040
 8002e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e74:	2301      	movs	r3, #1
 8002e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	4619      	mov	r1, r3
 8002e86:	4816      	ldr	r0, [pc, #88]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002e88:	f001 f904 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea6:	f001 f8f5 	bl	8004094 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4808      	ldr	r0, [pc, #32]	; (8002ee0 <MX_GPIO_Init+0x110>)
 8002ec0:	f001 f8e8 	bl	8004094 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	2028      	movs	r0, #40	; 0x28
 8002eca:	f000 fcb0 	bl	800382e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ece:	2028      	movs	r0, #40	; 0x28
 8002ed0:	f000 fcc9 	bl	8003866 <HAL_NVIC_EnableIRQ>

}
 8002ed4:	bf00      	nop
 8002ed6:	3728      	adds	r7, #40	; 0x28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48000800 	.word	0x48000800

08002ee8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f009 fb47 	bl	800c584 <osDelay>
 8002ef6:	e7fb      	b.n	8002ef0 <StartDefaultTask+0x8>

08002ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002efc:	b672      	cpsid	i
}
 8002efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <Error_Handler+0x8>
	...

08002f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6613      	str	r3, [r2, #96]	; 0x60
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_MspInit+0x5c>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	210f      	movs	r1, #15
 8002f3e:	f06f 0001 	mvn.w	r0, #1
 8002f42:	f000 fc74 	bl	800382e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2105      	movs	r1, #5
 8002f4a:	2004      	movs	r0, #4
 8002f4c:	f000 fc6f 	bl	800382e <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002f50:	2004      	movs	r0, #4
 8002f52:	f000 fc88 	bl	8003866 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b0ac      	sub	sp, #176	; 0xb0
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2288      	movs	r2, #136	; 0x88
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f00b fff7 	bl	800ef78 <memset>
  if(hi2c->Instance==I2C1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	; (8003014 <HAL_I2C_MspInit+0xb0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d13b      	bne.n	800300c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f94:	2340      	movs	r3, #64	; 0x40
 8002f96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fd7b 	bl	8005a9c <HAL_RCCEx_PeriphCLKConfig>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002fac:	f7ff ffa4 	bl	8002ef8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb4:	4a18      	ldr	r2, [pc, #96]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbc:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd0:	2312      	movs	r3, #18
 8002fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fec:	4619      	mov	r1, r3
 8002fee:	480b      	ldr	r0, [pc, #44]	; (800301c <HAL_I2C_MspInit+0xb8>)
 8002ff0:	f001 f850 	bl	8004094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	4a07      	ldr	r2, [pc, #28]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8002ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_I2C_MspInit+0xb4>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800300c:	bf00      	nop
 800300e:	37b0      	adds	r7, #176	; 0xb0
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40005400 	.word	0x40005400
 8003018:	40021000 	.word	0x40021000
 800301c:	48000400 	.word	0x48000400

08003020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <HAL_SPI_MspInit+0x7c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d128      	bne.n	8003094 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 8003044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 8003048:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800304c:	6613      	str	r3, [r2, #96]	; 0x60
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 8003050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <HAL_SPI_MspInit+0x80>)
 8003068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003072:	23e0      	movs	r3, #224	; 0xe0
 8003074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003076:	2302      	movs	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307e:	2303      	movs	r3, #3
 8003080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003082:	2305      	movs	r3, #5
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003090:	f001 f800 	bl	8004094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003094:	bf00      	nop
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40013000 	.word	0x40013000
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_TIM_PWM_MspInit+0x38>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10b      	bne.n	80030ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6593      	str	r3, [r2, #88]	; 0x58
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40000400 	.word	0x40000400
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_TIM_Base_MspInit+0x68>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d114      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a15      	ldr	r2, [pc, #84]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 80030fc:	f043 0310 	orr.w	r3, r3, #16
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 0310 	and.w	r3, r3, #16
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800310e:	2200      	movs	r2, #0
 8003110:	2105      	movs	r1, #5
 8003112:	2036      	movs	r0, #54	; 0x36
 8003114:	f000 fb8b 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003118:	2036      	movs	r0, #54	; 0x36
 800311a:	f000 fba4 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800311e:	e010      	b.n	8003142 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <HAL_TIM_Base_MspInit+0x70>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d10b      	bne.n	8003142 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800312a:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	4a08      	ldr	r2, [pc, #32]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	6613      	str	r3, [r2, #96]	; 0x60
 8003136:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_TIM_Base_MspInit+0x6c>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40001000 	.word	0x40001000
 8003150:	40021000 	.word	0x40021000
 8003154:	40014400 	.word	0x40014400

08003158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <HAL_TIM_MspPostInit+0x64>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d11b      	bne.n	80031b2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_TIM_MspPostInit+0x68>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIM_MspPostInit+0x68>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_TIM_MspPostInit+0x68>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003192:	2310      	movs	r3, #16
 8003194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a2:	2302      	movs	r3, #2
 80031a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <HAL_TIM_MspPostInit+0x6c>)
 80031ae:	f000 ff71 	bl	8004094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031b2:	bf00      	nop
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40021000 	.word	0x40021000
 80031c4:	48000400 	.word	0x48000400

080031c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0ac      	sub	sp, #176	; 0xb0
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e0:	f107 0314 	add.w	r3, r7, #20
 80031e4:	2288      	movs	r2, #136	; 0x88
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f00b fec5 	bl	800ef78 <memset>
  if(huart->Instance==USART2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a25      	ldr	r2, [pc, #148]	; (8003288 <HAL_UART_MspInit+0xc0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d143      	bne.n	8003280 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031f8:	2302      	movs	r3, #2
 80031fa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031fc:	2300      	movs	r3, #0
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fc49 	bl	8005a9c <HAL_RCCEx_PeriphCLKConfig>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003210:	f7ff fe72 	bl	8002ef8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_UART_MspInit+0xc4>)
 800321a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_UART_MspInit+0xc4>)
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_UART_MspInit+0xc4>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_UART_MspInit+0xc4>)
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003244:	230c      	movs	r3, #12
 8003246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003256:	2303      	movs	r3, #3
 8003258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800325c:	2307      	movs	r3, #7
 800325e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003266:	4619      	mov	r1, r3
 8003268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800326c:	f000 ff12 	bl	8004094 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003270:	2200      	movs	r2, #0
 8003272:	2105      	movs	r1, #5
 8003274:	2026      	movs	r0, #38	; 0x26
 8003276:	f000 fada 	bl	800382e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800327a:	2026      	movs	r0, #38	; 0x26
 800327c:	f000 faf3 	bl	8003866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003280:	bf00      	nop
 8003282:	37b0      	adds	r7, #176	; 0xb0
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40004400 	.word	0x40004400
 800328c:	40021000 	.word	0x40021000

08003290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <NMI_Handler+0x4>

08003296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <HardFault_Handler+0x4>

0800329c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <MemManage_Handler+0x4>

080032a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <BusFault_Handler+0x4>

080032a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <UsageFault_Handler+0x4>

080032ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c0:	f000 f972 	bl	80035a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80032c4:	f00a fd6c 	bl	800dda0 <xTaskGetSchedulerState>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80032ce:	f00b fb53 	bl	800e978 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80032da:	f000 fbd7 	bl	8003a8c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <USART2_IRQHandler+0x10>)
 80032ea:	f005 f919 	bl	8008520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000b18 	.word	0x20000b18

080032f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80032fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003300:	f001 f8bc 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003308:	f001 f8b8 	bl	800447c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}

08003310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <TIM6_DAC_IRQHandler+0x10>)
 8003316:	f004 f8ad 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	20000a80 	.word	0x20000a80

08003324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
	return 1;
 8003328:	2301      	movs	r3, #1
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_kill>:

int _kill(int pid, int sig)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800333e:	f00b fdd3 	bl	800eee8 <__errno>
 8003342:	4603      	mov	r3, r0
 8003344:	2216      	movs	r2, #22
 8003346:	601a      	str	r2, [r3, #0]
	return -1;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <_exit>:

void _exit (int status)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800335c:	f04f 31ff 	mov.w	r1, #4294967295
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffe7 	bl	8003334 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003366:	e7fe      	b.n	8003366 <_exit+0x12>

08003368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	e00a      	b.n	8003390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800337a:	f3af 8000 	nop.w
 800337e:	4601      	mov	r1, r0
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	60ba      	str	r2, [r7, #8]
 8003386:	b2ca      	uxtb	r2, r1
 8003388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	3301      	adds	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	429a      	cmp	r2, r3
 8003396:	dbf0      	blt.n	800337a <_read+0x12>
	}

return len;
 8003398:	687b      	ldr	r3, [r7, #4]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
	return -1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ca:	605a      	str	r2, [r3, #4]
	return 0;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <_isatty>:

int _isatty(int file)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
	return 1;
 80033e2:	2301      	movs	r3, #1
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
	return 0;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <_sbrk+0x5c>)
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <_sbrk+0x60>)
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <_sbrk+0x64>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <_sbrk+0x64>)
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <_sbrk+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d207      	bcs.n	800344c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800343c:	f00b fd54 	bl	800eee8 <__errno>
 8003440:	4603      	mov	r3, r0
 8003442:	220c      	movs	r2, #12
 8003444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	e009      	b.n	8003460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <_sbrk+0x64>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <_sbrk+0x64>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	4a05      	ldr	r2, [pc, #20]	; (8003470 <_sbrk+0x64>)
 800345c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20018000 	.word	0x20018000
 800346c:	00000400 	.word	0x00000400
 8003470:	20000bb4 	.word	0x20000bb4
 8003474:	20002cf0 	.word	0x20002cf0

08003478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <SystemInit+0x20>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	4a05      	ldr	r2, [pc, #20]	; (8003498 <SystemInit+0x20>)
 8003484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800348c:	bf00      	nop
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800349c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034a0:	f7ff ffea 	bl	8003478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034a4:	480c      	ldr	r0, [pc, #48]	; (80034d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80034a6:	490d      	ldr	r1, [pc, #52]	; (80034dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a8:	4a0d      	ldr	r2, [pc, #52]	; (80034e0 <LoopForever+0xe>)
  movs r3, #0
 80034aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034ac:	e002      	b.n	80034b4 <LoopCopyDataInit>

080034ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034b2:	3304      	adds	r3, #4

080034b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b8:	d3f9      	bcc.n	80034ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034bc:	4c0a      	ldr	r4, [pc, #40]	; (80034e8 <LoopForever+0x16>)
  movs r3, #0
 80034be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c0:	e001      	b.n	80034c6 <LoopFillZerobss>

080034c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c4:	3204      	adds	r2, #4

080034c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c8:	d3fb      	bcc.n	80034c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034ca:	f00b fd13 	bl	800eef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034ce:	f7ff fa57 	bl	8002980 <main>

080034d2 <LoopForever>:

LoopForever:
    b LoopForever
 80034d2:	e7fe      	b.n	80034d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80034d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034dc:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80034e0:	080130f8 	.word	0x080130f8
  ldr r2, =_sbss
 80034e4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80034e8:	20002cf0 	.word	0x20002cf0

080034ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC1_2_IRQHandler>
	...

080034f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_Init+0x3c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_Init+0x3c>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003506:	2003      	movs	r0, #3
 8003508:	f000 f986 	bl	8003818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800350c:	200f      	movs	r0, #15
 800350e:	f000 f80f 	bl	8003530 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	71fb      	strb	r3, [r7, #7]
 800351c:	e001      	b.n	8003522 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800351e:	f7ff fcf1 	bl	8002f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003522:	79fb      	ldrb	r3, [r7, #7]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40022000 	.word	0x40022000

08003530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800353c:	4b17      	ldr	r3, [pc, #92]	; (800359c <HAL_InitTick+0x6c>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003544:	4b16      	ldr	r3, [pc, #88]	; (80035a0 <HAL_InitTick+0x70>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b14      	ldr	r3, [pc, #80]	; (800359c <HAL_InitTick+0x6c>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003552:	fbb3 f3f1 	udiv	r3, r3, r1
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f99f 	bl	800389e <HAL_SYSTICK_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10f      	bne.n	8003586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d809      	bhi.n	8003580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800356c:	2200      	movs	r2, #0
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f000 f95b 	bl	800382e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003578:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_InitTick+0x74>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e007      	b.n	8003590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	e004      	b.n	8003590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e001      	b.n	8003590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000010 	.word	0x20000010
 80035a0:	20000008 	.word	0x20000008
 80035a4:	2000000c 	.word	0x2000000c

080035a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_IncTick+0x20>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x24>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_IncTick+0x24>)
 80035ba:	6013      	str	r3, [r2, #0]
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000010 	.word	0x20000010
 80035cc:	20000bb8 	.word	0x20000bb8

080035d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return uwTick;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_GetTick+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000bb8 	.word	0x20000bb8

080035e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f0:	f7ff ffee 	bl	80035d0 <HAL_GetTick>
 80035f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d005      	beq.n	800360e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_Delay+0x44>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800360e:	bf00      	nop
 8003610:	f7ff ffde 	bl	80035d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	429a      	cmp	r2, r3
 800361e:	d8f7      	bhi.n	8003610 <HAL_Delay+0x28>
  {
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000010 	.word	0x20000010

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	; (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db12      	blt.n	8003708 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	490a      	ldr	r1, [pc, #40]	; (8003714 <__NVIC_DisableIRQ+0x44>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	3320      	adds	r3, #32
 80036f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036fc:	f3bf 8f4f 	dsb	sy
}
 8003700:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003702:	f3bf 8f6f 	isb	sy
}
 8003706:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000e100 	.word	0xe000e100

08003718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	6039      	str	r1, [r7, #0]
 8003722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003728:	2b00      	cmp	r3, #0
 800372a:	db0a      	blt.n	8003742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	490c      	ldr	r1, [pc, #48]	; (8003764 <__NVIC_SetPriority+0x4c>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	440b      	add	r3, r1
 800373c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003740:	e00a      	b.n	8003758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <__NVIC_SetPriority+0x50>)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	f003 030f 	and.w	r3, r3, #15
 800374e:	3b04      	subs	r3, #4
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	440b      	add	r3, r1
 8003756:	761a      	strb	r2, [r3, #24]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	e000e100 	.word	0xe000e100
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f1c3 0307 	rsb	r3, r3, #7
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf28      	it	cs
 800378a:	2304      	movcs	r3, #4
 800378c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	2b06      	cmp	r3, #6
 8003794:	d902      	bls.n	800379c <NVIC_EncodePriority+0x30>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	3b03      	subs	r3, #3
 800379a:	e000      	b.n	800379e <NVIC_EncodePriority+0x32>
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	f04f 32ff 	mov.w	r2, #4294967295
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43da      	mvns	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	401a      	ands	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b4:	f04f 31ff 	mov.w	r1, #4294967295
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa01 f303 	lsl.w	r3, r1, r3
 80037be:	43d9      	mvns	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c4:	4313      	orrs	r3, r2
         );
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037e4:	d301      	bcc.n	80037ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00f      	b.n	800380a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <SysTick_Config+0x40>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f2:	210f      	movs	r1, #15
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f7ff ff8e 	bl	8003718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <SysTick_Config+0x40>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <SysTick_Config+0x40>)
 8003804:	2207      	movs	r2, #7
 8003806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	e000e010 	.word	0xe000e010

08003818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff05 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003840:	f7ff ff1a 	bl	8003678 <__NVIC_GetPriorityGrouping>
 8003844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	6978      	ldr	r0, [r7, #20]
 800384c:	f7ff ff8e 	bl	800376c <NVIC_EncodePriority>
 8003850:	4602      	mov	r2, r0
 8003852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff ff5d 	bl	8003718 <__NVIC_SetPriority>
}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff0d 	bl	8003694 <__NVIC_EnableIRQ>
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff1d 	bl	80036d0 <__NVIC_DisableIRQ>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff94 	bl	80037d4 <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d008      	beq.n	80038e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2204      	movs	r2, #4
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e022      	b.n	8003926 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f003 021c 	and.w	r2, r3, #28
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2101      	movs	r1, #1
 800390e:	fa01 f202 	lsl.w	r2, r1, r2
 8003912:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d005      	beq.n	8003956 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	e029      	b.n	80039aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 020e 	bic.w	r2, r2, #14
 8003964:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 021c 	and.w	r2, r3, #28
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
    }
  }
  return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039c6:	4b2f      	ldr	r3, [pc, #188]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_FLASH_Program+0x1e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e053      	b.n	8003a7a <HAL_FLASH_Program+0xc6>
 80039d2:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039dc:	f000 f964 	bl	8003ca8 <FLASH_WaitForLastOperation>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d143      	bne.n	8003a72 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <HAL_FLASH_Program+0xd4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80039fc:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_FLASH_Program+0xd4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_FLASH_Program+0xd4>)
 8003a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a06:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003a08:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	771a      	strb	r2, [r3, #28]
 8003a0e:	e002      	b.n	8003a16 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003a10:	4b1c      	ldr	r3, [pc, #112]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f000 f997 	bl	8003d54 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003a26:	2301      	movs	r3, #1
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e010      	b.n	8003a4e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d002      	beq.n	8003a38 <HAL_FLASH_Program+0x84>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d10a      	bne.n	8003a4e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	68b8      	ldr	r0, [r7, #8]
 8003a3e:	f000 f9af 	bl	8003da0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d102      	bne.n	8003a4e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003a48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a4c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a52:	f000 f929 	bl	8003ca8 <FLASH_WaitForLastOperation>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_FLASH_Program+0xd4>)
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <HAL_FLASH_Program+0xd4>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003a6e:	f000 fac7 	bl	8004000 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_FLASH_Program+0xd0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]

  return status;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000014 	.word	0x20000014
 8003a88:	40022000 	.word	0x40022000

08003a8c <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003a92:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4a67      	ldr	r2, [pc, #412]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003a98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a9c:	f023 0307 	bic.w	r3, r3, #7
 8003aa0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003aa2:	4b64      	ldr	r3, [pc, #400]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	4a63      	ldr	r2, [pc, #396]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003aa8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003aac:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003aae:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ab0:	7a1b      	ldrb	r3, [r3, #8]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d105      	bne.n	8003ac4 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	4a5d      	ldr	r2, [pc, #372]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac2:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d045      	beq.n	8003b62 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003ad6:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	4a56      	ldr	r2, [pc, #344]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ae0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_FLASH_IRQHandler+0x70>
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003af6:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	618b      	str	r3, [r1, #24]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_FLASH_IRQHandler+0x84>
 8003b06:	4a4b      	ldr	r2, [pc, #300]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003b0e:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003b10:	f000 fa76 	bl	8004000 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003b14:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b16:	7a1b      	ldrb	r3, [r3, #8]
 8003b18:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d105      	bne.n	8003b2c <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003b20:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f893 	bl	8003c50 <HAL_FLASH_OperationErrorCallback>
 8003b2a:	e017      	b.n	8003b5c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d105      	bne.n	8003b3e <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f88a 	bl	8003c50 <HAL_FLASH_OperationErrorCallback>
 8003b3c:	e00e      	b.n	8003b5c <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d002      	beq.n	8003b4a <HAL_FLASH_IRQHandler+0xbe>
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d105      	bne.n	8003b56 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f87e 	bl	8003c50 <HAL_FLASH_OperationErrorCallback>
 8003b54:	e002      	b.n	8003b5c <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003b56:	2000      	movs	r0, #0
 8003b58:	f000 f87a 	bl	8003c50 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003b5c:	4b36      	ldr	r3, [pc, #216]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003b62:	4b34      	ldr	r3, [pc, #208]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d04f      	beq.n	8003c0e <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003b74:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b76:	7a1b      	ldrb	r3, [r3, #8]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d12b      	bne.n	8003bd6 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b86:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003b88:	4b2b      	ldr	r3, [pc, #172]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003b90:	4b29      	ldr	r3, [pc, #164]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 f851 	bl	8003c3c <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a25      	ldr	r2, [pc, #148]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ba2:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003ba4:	4b24      	ldr	r3, [pc, #144]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9ef 	bl	8003f94 <FLASH_PageErase>
 8003bb6:	e02a      	b.n	8003c0e <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003bc6:	f000 fa1b 	bl	8004000 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f834 	bl	8003c3c <HAL_FLASH_EndOfOperationCallback>
 8003bd4:	e01b      	b.n	8003c0e <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8003bd6:	f000 fa13 	bl	8004000 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8003bda:	4b17      	ldr	r3, [pc, #92]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003bdc:	7a1b      	ldrb	r3, [r3, #8]
 8003bde:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d105      	bne.n	8003bf2 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f826 	bl	8003c3c <HAL_FLASH_EndOfOperationCallback>
 8003bf0:	e00a      	b.n	8003c08 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d002      	beq.n	8003bfe <HAL_FLASH_IRQHandler+0x172>
 8003bf8:	7afb      	ldrb	r3, [r7, #11]
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d104      	bne.n	8003c08 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f81a 	bl	8003c3c <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003c10:	7a1b      	ldrb	r3, [r3, #8]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <HAL_FLASH_IRQHandler+0x1a8>)
 8003c1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003c22:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_FLASH_IRQHandler+0x1ac>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000
 8003c38:	20000014 	.word	0x20000014

08003c3c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_FLASH_Unlock+0x38>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da0b      	bge.n	8003c8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_FLASH_Unlock+0x38>)
 8003c78:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_FLASH_Unlock+0x3c>)
 8003c7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_FLASH_Unlock+0x38>)
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_FLASH_Unlock+0x40>)
 8003c80:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_FLASH_Unlock+0x38>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	da01      	bge.n	8003c8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	45670123 	.word	0x45670123
 8003ca4:	cdef89ab 	.word	0xcdef89ab

08003ca8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff fc8e 	bl	80035d0 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003cb6:	e00d      	b.n	8003cd4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d009      	beq.n	8003cd4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003cc0:	f7ff fc86 	bl	80035d0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d801      	bhi.n	8003cd4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e037      	b.n	8003d44 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1eb      	bne.n	8003cb8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01e      	beq.n	8003d30 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003cf2:	4b17      	ldr	r3, [pc, #92]	; (8003d50 <FLASH_WaitForLastOperation+0xa8>)
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <FLASH_WaitForLastOperation+0xa8>)
 8003cfc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <FLASH_WaitForLastOperation+0x70>
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003d12:	490e      	ldr	r1, [pc, #56]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	618b      	str	r3, [r1, #24]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d004      	beq.n	8003d2c <FLASH_WaitForLastOperation+0x84>
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d2a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e009      	b.n	8003d44 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <FLASH_WaitForLastOperation+0xa4>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40022000 	.word	0x40022000
 8003d50:	20000014 	.word	0x20000014

08003d54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <FLASH_Program_DoubleWord+0x48>)
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <FLASH_Program_DoubleWord+0x48>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d72:	f3bf 8f6f 	isb	sy
}
 8003d76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8003d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	000a      	movs	r2, r1
 8003d86:	2300      	movs	r3, #0
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	3104      	adds	r1, #4
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	600b      	str	r3, [r1, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40022000 	.word	0x40022000

08003da0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003daa:	2340      	movs	r3, #64	; 0x40
 8003dac:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <FLASH_Program_Fast+0x68>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <FLASH_Program_Fast+0x68>)
 8003dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003dc8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dcc:	b672      	cpsid	i
}
 8003dce:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3304      	adds	r3, #4
 8003de2:	617b      	str	r3, [r7, #20]
    row_index--;
 8003de4:	7ffb      	ldrb	r3, [r7, #31]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ef      	bne.n	8003dd0 <FLASH_Program_Fast+0x30>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8003dfc:	bf00      	nop
 8003dfe:	3724      	adds	r7, #36	; 0x24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40022000 	.word	0x40022000

08003e0c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e16:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_FLASHEx_Erase+0x16>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e087      	b.n	8003f32 <HAL_FLASHEx_Erase+0x126>
 8003e22:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e2c:	f7ff ff3c 	bl	8003ca8 <FLASH_WaitForLastOperation>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d177      	bne.n	8003f2a <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e3a:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8003e40:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d013      	beq.n	8003e74 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e4c:	4b3c      	ldr	r3, [pc, #240]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d009      	beq.n	8003e6c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e62:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e66:	2203      	movs	r2, #3
 8003e68:	771a      	strb	r2, [r3, #28]
 8003e6a:	e016      	b.n	8003e9a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003e6c:	4b33      	ldr	r3, [pc, #204]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	771a      	strb	r2, [r3, #28]
 8003e72:	e012      	b.n	8003e9a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003e74:	4b32      	ldr	r3, [pc, #200]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003e80:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003e8c:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e8e:	2202      	movs	r2, #2
 8003e90:	771a      	strb	r2, [r3, #28]
 8003e92:	e002      	b.n	8003e9a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d113      	bne.n	8003eca <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f84c 	bl	8003f44 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eb0:	f7ff fefa 	bl	8003ca8 <FLASH_WaitForLastOperation>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8003eb8:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ec2:	f023 0304 	bic.w	r3, r3, #4
 8003ec6:	6153      	str	r3, [r2, #20]
 8003ec8:	e02d      	b.n	8003f26 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	e01d      	b.n	8003f16 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68b8      	ldr	r0, [r7, #8]
 8003ee2:	f000 f857 	bl	8003f94 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ee6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003eea:	f7ff fedd 	bl	8003ca8 <FLASH_WaitForLastOperation>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003ef2:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <HAL_FLASHEx_Erase+0x134>)
 8003ef8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003efc:	f023 0302 	bic.w	r3, r3, #2
 8003f00:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	601a      	str	r2, [r3, #0]
          break;
 8003f0e:	e00a      	b.n	8003f26 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3301      	adds	r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3d9      	bcc.n	8003eda <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f26:	f000 f86b 	bl	8004000 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <HAL_FLASHEx_Erase+0x130>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000014 	.word	0x20000014
 8003f40:	40022000 	.word	0x40022000

08003f44 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003f56:	4b0e      	ldr	r3, [pc, #56]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	4a0d      	ldr	r2, [pc, #52]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <FLASH_MassErase+0x4c>)
 8003f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f82:	6153      	str	r3, [r2, #20]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40022000 	.word	0x40022000

08003f94 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <FLASH_PageErase+0x68>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb2:	6153      	str	r3, [r2, #20]
 8003fb4:	e005      	b.n	8003fc2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4a10      	ldr	r2, [pc, #64]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fc0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	4a07      	ldr	r2, [pc, #28]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <FLASH_PageErase+0x68>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	6153      	str	r3, [r2, #20]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40022000 	.word	0x40022000

08004000 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004006:	4b21      	ldr	r3, [pc, #132]	; (800408c <FLASH_FlushCaches+0x8c>)
 8004008:	7f1b      	ldrb	r3, [r3, #28]
 800400a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d002      	beq.n	8004018 <FLASH_FlushCaches+0x18>
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d117      	bne.n	8004048 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <FLASH_FlushCaches+0x90>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <FLASH_FlushCaches+0x90>)
 800401e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004022:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <FLASH_FlushCaches+0x90>)
 800402a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800403a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800403c:	4b14      	ldr	r3, [pc, #80]	; (8004090 <FLASH_FlushCaches+0x90>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004046:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d002      	beq.n	8004054 <FLASH_FlushCaches+0x54>
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d111      	bne.n	8004078 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <FLASH_FlushCaches+0x90>)
 800405a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004066:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800406a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <FLASH_FlushCaches+0x90>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <FLASH_FlushCaches+0x90>)
 8004072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004076:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <FLASH_FlushCaches+0x8c>)
 800407a:	2200      	movs	r2, #0
 800407c:	771a      	strb	r2, [r3, #28]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000014 	.word	0x20000014
 8004090:	40022000 	.word	0x40022000

08004094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a2:	e17f      	b.n	80043a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa01 f303 	lsl.w	r3, r1, r3
 80040b0:	4013      	ands	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8171 	beq.w	800439e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d005      	beq.n	80040d4 <HAL_GPIO_Init+0x40>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d130      	bne.n	8004136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800410a:	2201      	movs	r2, #1
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0201 	and.w	r2, r3, #1
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d118      	bne.n	8004174 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004148:	2201      	movs	r2, #1
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	f003 0201 	and.w	r2, r3, #1
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	2b03      	cmp	r3, #3
 800417e:	d017      	beq.n	80041b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	2203      	movs	r2, #3
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d123      	bne.n	8004204 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	08da      	lsrs	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3208      	adds	r2, #8
 80041c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	08da      	lsrs	r2, r3, #3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3208      	adds	r2, #8
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	2203      	movs	r2, #3
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80ac 	beq.w	800439e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_GPIO_Init+0x330>)
 8004248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424a:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_GPIO_Init+0x330>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6613      	str	r3, [r2, #96]	; 0x60
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_GPIO_Init+0x330>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800425e:	4a5a      	ldr	r2, [pc, #360]	; (80043c8 <HAL_GPIO_Init+0x334>)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	3302      	adds	r3, #2
 8004266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	220f      	movs	r2, #15
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004288:	d025      	beq.n	80042d6 <HAL_GPIO_Init+0x242>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a4f      	ldr	r2, [pc, #316]	; (80043cc <HAL_GPIO_Init+0x338>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <HAL_GPIO_Init+0x23e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4e      	ldr	r2, [pc, #312]	; (80043d0 <HAL_GPIO_Init+0x33c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d019      	beq.n	80042ce <HAL_GPIO_Init+0x23a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4d      	ldr	r2, [pc, #308]	; (80043d4 <HAL_GPIO_Init+0x340>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_GPIO_Init+0x236>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4c      	ldr	r2, [pc, #304]	; (80043d8 <HAL_GPIO_Init+0x344>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00d      	beq.n	80042c6 <HAL_GPIO_Init+0x232>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4b      	ldr	r2, [pc, #300]	; (80043dc <HAL_GPIO_Init+0x348>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <HAL_GPIO_Init+0x22e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <HAL_GPIO_Init+0x34c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_GPIO_Init+0x22a>
 80042ba:	2306      	movs	r3, #6
 80042bc:	e00c      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042be:	2307      	movs	r3, #7
 80042c0:	e00a      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042c2:	2305      	movs	r3, #5
 80042c4:	e008      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042c6:	2304      	movs	r3, #4
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042ca:	2303      	movs	r3, #3
 80042cc:	e004      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e002      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x244>
 80042d6:	2300      	movs	r3, #0
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	f002 0203 	and.w	r2, r2, #3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4093      	lsls	r3, r2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042e8:	4937      	ldr	r1, [pc, #220]	; (80043c8 <HAL_GPIO_Init+0x334>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042f6:	4b3b      	ldr	r3, [pc, #236]	; (80043e4 <HAL_GPIO_Init+0x350>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800431a:	4a32      	ldr	r2, [pc, #200]	; (80043e4 <HAL_GPIO_Init+0x350>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004320:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <HAL_GPIO_Init+0x350>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	43db      	mvns	r3, r3
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004344:	4a27      	ldr	r2, [pc, #156]	; (80043e4 <HAL_GPIO_Init+0x350>)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800434a:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_GPIO_Init+0x350>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	43db      	mvns	r3, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_GPIO_Init+0x350>)
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004374:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <HAL_GPIO_Init+0x350>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	43db      	mvns	r3, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4013      	ands	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_GPIO_Init+0x350>)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3301      	adds	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa22 f303 	lsr.w	r3, r2, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f47f ae78 	bne.w	80040a4 <HAL_GPIO_Init+0x10>
  }
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40010000 	.word	0x40010000
 80043cc:	48000400 	.word	0x48000400
 80043d0:	48000800 	.word	0x48000800
 80043d4:	48000c00 	.word	0x48000c00
 80043d8:	48001000 	.word	0x48001000
 80043dc:	48001400 	.word	0x48001400
 80043e0:	48001800 	.word	0x48001800
 80043e4:	40010400 	.word	0x40010400

080043e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	887b      	ldrh	r3, [r7, #2]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d002      	beq.n	8004406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
 8004404:	e001      	b.n	800440a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
 8004424:	4613      	mov	r3, r2
 8004426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004428:	787b      	ldrb	r3, [r7, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800442e:	887a      	ldrh	r2, [r7, #2]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004434:	e002      	b.n	800443c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800445a:	887a      	ldrh	r2, [r7, #2]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	041a      	lsls	r2, r3, #16
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43d9      	mvns	r1, r3
 8004466:	887b      	ldrh	r3, [r7, #2]
 8004468:	400b      	ands	r3, r1
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f88c 	bl	80025b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40010400 	.word	0x40010400

080044ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e081      	b.n	80045c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fe fd46 	bl	8002f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d107      	bne.n	8004526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	e006      	b.n	8004534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d104      	bne.n	8004546 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	4608      	mov	r0, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	4603      	mov	r3, r0
 80045dc:	817b      	strh	r3, [r7, #10]
 80045de:	460b      	mov	r3, r1
 80045e0:	813b      	strh	r3, [r7, #8]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	f040 80fd 	bne.w	80047ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_I2C_Mem_Read+0x34>
 80045fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d105      	bne.n	800460c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0f1      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_I2C_Mem_Read+0x4e>
 8004616:	2302      	movs	r3, #2
 8004618:	e0ea      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004622:	f7fe ffd5 	bl	80035d0 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2319      	movs	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f95b 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0d5      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2222      	movs	r2, #34	; 0x22
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2240      	movs	r2, #64	; 0x40
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800466c:	88f8      	ldrh	r0, [r7, #6]
 800466e:	893a      	ldrh	r2, [r7, #8]
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	9301      	str	r3, [sp, #4]
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4603      	mov	r3, r0
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f8bf 	bl	8004800 <I2C_RequestMemoryRead>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0ad      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	2bff      	cmp	r3, #255	; 0xff
 800469c:	d90e      	bls.n	80046bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	8979      	ldrh	r1, [r7, #10]
 80046ac:	4b52      	ldr	r3, [pc, #328]	; (80047f8 <HAL_I2C_Mem_Read+0x22c>)
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 fac3 	bl	8004c40 <I2C_TransferConfig>
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	8979      	ldrh	r1, [r7, #10]
 80046ce:	4b4a      	ldr	r3, [pc, #296]	; (80047f8 <HAL_I2C_Mem_Read+0x22c>)
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fab2 	bl	8004c40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2200      	movs	r2, #0
 80046e4:	2104      	movs	r1, #4
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f902 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07c      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d034      	beq.n	800479c <HAL_I2C_Mem_Read+0x1d0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d130      	bne.n	800479c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	2200      	movs	r2, #0
 8004742:	2180      	movs	r1, #128	; 0x80
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8d3 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04d      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2bff      	cmp	r3, #255	; 0xff
 800475c:	d90e      	bls.n	800477c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	22ff      	movs	r2, #255	; 0xff
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	b2da      	uxtb	r2, r3
 800476a:	8979      	ldrh	r1, [r7, #10]
 800476c:	2300      	movs	r3, #0
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fa63 	bl	8004c40 <I2C_TransferConfig>
 800477a:	e00f      	b.n	800479c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	b2da      	uxtb	r2, r3
 800478c:	8979      	ldrh	r1, [r7, #10]
 800478e:	2300      	movs	r3, #0
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fa52 	bl	8004c40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d19a      	bne.n	80046dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f920 	bl	80049f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e01a      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2220      	movs	r2, #32
 80047c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6859      	ldr	r1, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_I2C_Mem_Read+0x230>)
 80047ce:	400b      	ands	r3, r1
 80047d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e000      	b.n	80047f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	80002400 	.word	0x80002400
 80047fc:	fe00e800 	.word	0xfe00e800

08004800 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4603      	mov	r3, r0
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	460b      	mov	r3, r1
 8004814:	813b      	strh	r3, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	8979      	ldrh	r1, [r7, #10]
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <I2C_RequestMemoryRead+0xa4>)
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	2300      	movs	r3, #0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa0a 	bl	8004c40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	69b9      	ldr	r1, [r7, #24]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f89d 	bl	8004970 <I2C_WaitOnTXISFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e02c      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	629a      	str	r2, [r3, #40]	; 0x28
 8004850:	e015      	b.n	800487e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b29b      	uxth	r3, r3
 8004858:	b2da      	uxtb	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	69b9      	ldr	r1, [r7, #24]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f883 	bl	8004970 <I2C_WaitOnTXISFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e012      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004874:	893b      	ldrh	r3, [r7, #8]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f831 	bl	80048f0 <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	80002000 	.word	0x80002000

080048a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d007      	beq.n	80048e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	619a      	str	r2, [r3, #24]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004900:	e022      	b.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d01e      	beq.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490a:	f7fe fe61 	bl	80035d0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d302      	bcc.n	8004920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d113      	bne.n	8004948 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e00f      	b.n	8004968 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	429a      	cmp	r2, r3
 8004964:	d0cd      	beq.n	8004902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800497c:	e02c      	b.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f870 	bl	8004a68 <I2C_IsErrorOccurred>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e02a      	b.n	80049e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d01e      	beq.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499a:	f7fe fe19 	bl	80035d0 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d302      	bcc.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e007      	b.n	80049e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d1cb      	bne.n	800497e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049fc:	e028      	b.n	8004a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f830 	bl	8004a68 <I2C_IsErrorOccurred>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e026      	b.n	8004a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe fddd 	bl	80035d0 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d113      	bne.n	8004a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d1cf      	bne.n	80049fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d075      	beq.n	8004b80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a9c:	e056      	b.n	8004b4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d052      	beq.n	8004b4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fe fd93 	bl	80035d0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_IsErrorOccurred+0x54>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d147      	bne.n	8004b4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ace:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ade:	d12e      	bne.n	8004b3e <I2C_IsErrorOccurred+0xd6>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ae6:	d02a      	beq.n	8004b3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d027      	beq.n	8004b3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004afe:	f7fe fd67 	bl	80035d0 <HAL_GetTick>
 8004b02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b04:	e01b      	b.n	8004b3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b06:	f7fe fd63 	bl	80035d0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b19      	cmp	r3, #25
 8004b12:	d914      	bls.n	8004b3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	f043 0220 	orr.w	r2, r3, #32
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d1dc      	bne.n	8004b06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d003      	beq.n	8004b62 <I2C_IsErrorOccurred+0xfa>
 8004b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d09d      	beq.n	8004a9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f043 0302 	orr.w	r3, r3, #2
 8004bdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d01c      	beq.n	8004c30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff fe56 	bl	80048a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6859      	ldr	r1, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <I2C_IsErrorOccurred+0x1d4>)
 8004c08:	400b      	ands	r3, r1
 8004c0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3728      	adds	r7, #40	; 0x28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	fe00e800 	.word	0xfe00e800

08004c40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	817b      	strh	r3, [r7, #10]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c58:	7a7b      	ldrb	r3, [r7, #9]
 8004c5a:	041b      	lsls	r3, r3, #16
 8004c5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c60:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c6e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	0d5b      	lsrs	r3, r3, #21
 8004c7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <I2C_TransferConfig+0x60>)
 8004c80:	430b      	orrs	r3, r1
 8004c82:	43db      	mvns	r3, r3
 8004c84:	ea02 0103 	and.w	r1, r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	03ff63ff 	.word	0x03ff63ff

08004ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	d138      	bne.n	8004d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e032      	b.n	8004d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2224      	movs	r2, #36	; 0x24
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0201 	bic.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6819      	ldr	r1, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e000      	b.n	8004d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d139      	bne.n	8004dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e033      	b.n	8004dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2224      	movs	r2, #36	; 0x24
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e000      	b.n	8004dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <HAL_PWREx_GetVoltageRange+0x18>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40007000 	.word	0x40007000

08004df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfe:	d130      	bne.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e00:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e0c:	d038      	beq.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e0e:	4b20      	ldr	r3, [pc, #128]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2232      	movs	r2, #50	; 0x32
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0c9b      	lsrs	r3, r3, #18
 8004e30:	3301      	adds	r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e34:	e002      	b.n	8004e3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d102      	bne.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f2      	bne.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	d110      	bne.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e00f      	b.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6e:	d007      	beq.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e78:	4a05      	ldr	r2, [pc, #20]	; (8004e90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40007000 	.word	0x40007000
 8004e94:	20000008 	.word	0x20000008
 8004e98:	431bde83 	.word	0x431bde83

08004e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e3ca      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eae:	4b97      	ldr	r3, [pc, #604]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb8:	4b94      	ldr	r3, [pc, #592]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80e4 	beq.w	8005098 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d007      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4a>
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	f040 808b 	bne.w	8004ff4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 8087 	bne.w	8004ff4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ee6:	4b89      	ldr	r3, [pc, #548]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x62>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e3a2      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1a      	ldr	r2, [r3, #32]
 8004f02:	4b82      	ldr	r3, [pc, #520]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <HAL_RCC_OscConfig+0x7c>
 8004f0e:	4b7f      	ldr	r3, [pc, #508]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f16:	e005      	b.n	8004f24 <HAL_RCC_OscConfig+0x88>
 8004f18:	4b7c      	ldr	r3, [pc, #496]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d223      	bcs.n	8004f70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fd55 	bl	80059dc <RCC_SetFlashLatencyFromMSIRange>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e383      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f3c:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a72      	ldr	r2, [pc, #456]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f42:	f043 0308 	orr.w	r3, r3, #8
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b70      	ldr	r3, [pc, #448]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	496d      	ldr	r1, [pc, #436]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5a:	4b6c      	ldr	r3, [pc, #432]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	021b      	lsls	r3, r3, #8
 8004f68:	4968      	ldr	r1, [pc, #416]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]
 8004f6e:	e025      	b.n	8004fbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f70:	4b66      	ldr	r3, [pc, #408]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a65      	ldr	r2, [pc, #404]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f76:	f043 0308 	orr.w	r3, r3, #8
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b63      	ldr	r3, [pc, #396]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4960      	ldr	r1, [pc, #384]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	495b      	ldr	r1, [pc, #364]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fd15 	bl	80059dc <RCC_SetFlashLatencyFromMSIRange>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e343      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fbc:	f000 fc4a 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b52      	ldr	r3, [pc, #328]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	4950      	ldr	r1, [pc, #320]	; (8005110 <HAL_RCC_OscConfig+0x274>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_RCC_OscConfig+0x278>)
 8004fda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004fdc:	4b4e      	ldr	r3, [pc, #312]	; (8005118 <HAL_RCC_OscConfig+0x27c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fe faa5 	bl	8003530 <HAL_InitTick>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d052      	beq.n	8005096 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	e327      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d032      	beq.n	8005062 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ffc:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005002:	f043 0301 	orr.w	r3, r3, #1
 8005006:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005008:	f7fe fae2 	bl	80035d0 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005010:	f7fe fade 	bl	80035d0 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e310      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005022:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800502e:	4b37      	ldr	r3, [pc, #220]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a36      	ldr	r2, [pc, #216]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005034:	f043 0308 	orr.w	r3, r3, #8
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	4931      	ldr	r1, [pc, #196]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005048:	4313      	orrs	r3, r2
 800504a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800504c:	4b2f      	ldr	r3, [pc, #188]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	492c      	ldr	r1, [pc, #176]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]
 8005060:	e01a      	b.n	8005098 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005062:	4b2a      	ldr	r3, [pc, #168]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800506e:	f7fe faaf 	bl	80035d0 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005076:	f7fe faab 	bl	80035d0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e2dd      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005088:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_OscConfig+0x270>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0x1da>
 8005094:	e000      	b.n	8005098 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005096:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d074      	beq.n	800518e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d005      	beq.n	80050b6 <HAL_RCC_OscConfig+0x21a>
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d10e      	bne.n	80050ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b15      	ldr	r3, [pc, #84]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d064      	beq.n	800518c <HAL_RCC_OscConfig+0x2f0>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d160      	bne.n	800518c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2ba      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x24a>
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	e026      	b.n	8005134 <HAL_RCC_OscConfig+0x298>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ee:	d115      	bne.n	800511c <HAL_RCC_OscConfig+0x280>
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a05      	ldr	r2, [pc, #20]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <HAL_RCC_OscConfig+0x270>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a02      	ldr	r2, [pc, #8]	; (800510c <HAL_RCC_OscConfig+0x270>)
 8005102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e014      	b.n	8005134 <HAL_RCC_OscConfig+0x298>
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	08012c1c 	.word	0x08012c1c
 8005114:	20000008 	.word	0x20000008
 8005118:	2000000c 	.word	0x2000000c
 800511c:	4ba0      	ldr	r3, [pc, #640]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a9f      	ldr	r2, [pc, #636]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b9d      	ldr	r3, [pc, #628]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a9c      	ldr	r2, [pc, #624]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800512e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d013      	beq.n	8005164 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513c:	f7fe fa48 	bl	80035d0 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fe fa44 	bl	80035d0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e276      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005156:	4b92      	ldr	r3, [pc, #584]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x2a8>
 8005162:	e014      	b.n	800518e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fe fa34 	bl	80035d0 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516c:	f7fe fa30 	bl	80035d0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b64      	cmp	r3, #100	; 0x64
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e262      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800517e:	4b88      	ldr	r3, [pc, #544]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x2d0>
 800518a:	e000      	b.n	800518e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800518c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d060      	beq.n	800525c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x310>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d119      	bne.n	80051da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d116      	bne.n	80051da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ac:	4b7c      	ldr	r3, [pc, #496]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_OscConfig+0x328>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e23f      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c4:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	061b      	lsls	r3, r3, #24
 80051d2:	4973      	ldr	r1, [pc, #460]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d8:	e040      	b.n	800525c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d023      	beq.n	800522a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e2:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a6e      	ldr	r2, [pc, #440]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fe f9ef 	bl	80035d0 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fe f9eb 	bl	80035d0 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e21d      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005208:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b62      	ldr	r3, [pc, #392]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	495f      	ldr	r1, [pc, #380]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
 8005228:	e018      	b.n	800525c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b5d      	ldr	r3, [pc, #372]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5c      	ldr	r2, [pc, #368]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fe f9cb 	bl	80035d0 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523e:	f7fe f9c7 	bl	80035d0 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e1f9      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005250:	4b53      	ldr	r3, [pc, #332]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d03c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01c      	beq.n	80052aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005270:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005276:	4a4a      	ldr	r2, [pc, #296]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fe f9a6 	bl	80035d0 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fe f9a2 	bl	80035d0 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e1d4      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0ef      	beq.n	8005288 <HAL_RCC_OscConfig+0x3ec>
 80052a8:	e01b      	b.n	80052e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b0:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ba:	f7fe f989 	bl	80035d0 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c2:	f7fe f985 	bl	80035d0 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e1b7      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052d4:	4b32      	ldr	r3, [pc, #200]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1ef      	bne.n	80052c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80a6 	beq.w	800543c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f0:	2300      	movs	r3, #0
 80052f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10d      	bne.n	800531c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530a:	6593      	str	r3, [r2, #88]	; 0x58
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800530e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531c:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d118      	bne.n	800535a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005328:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 800532e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005334:	f7fe f94c 	bl	80035d0 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533c:	f7fe f948 	bl	80035d0 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e17a      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <HAL_RCC_OscConfig+0x508>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d108      	bne.n	8005374 <HAL_RCC_OscConfig+0x4d8>
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	4a0d      	ldr	r2, [pc, #52]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005372:	e029      	b.n	80053c8 <HAL_RCC_OscConfig+0x52c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b05      	cmp	r3, #5
 800537a:	d115      	bne.n	80053a8 <HAL_RCC_OscConfig+0x50c>
 800537c:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a07      	ldr	r2, [pc, #28]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005384:	f043 0304 	orr.w	r3, r3, #4
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <HAL_RCC_OscConfig+0x504>)
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800539c:	e014      	b.n	80053c8 <HAL_RCC_OscConfig+0x52c>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40007000 	.word	0x40007000
 80053a8:	4b9c      	ldr	r3, [pc, #624]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80053aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ae:	4a9b      	ldr	r2, [pc, #620]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b8:	4b98      	ldr	r3, [pc, #608]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a97      	ldr	r2, [pc, #604]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fe f8fe 	bl	80035d0 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fe f8fa 	bl	80035d0 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e12a      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	4b8b      	ldr	r3, [pc, #556]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80053f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0ed      	beq.n	80053d8 <HAL_RCC_OscConfig+0x53c>
 80053fc:	e015      	b.n	800542a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fe:	f7fe f8e7 	bl	80035d0 <HAL_GetTick>
 8005402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005404:	e00a      	b.n	800541c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005406:	f7fe f8e3 	bl	80035d0 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f241 3288 	movw	r2, #5000	; 0x1388
 8005414:	4293      	cmp	r3, r2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e113      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800541c:	4b7f      	ldr	r3, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x780>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ed      	bne.n	8005406 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800542a:	7ffb      	ldrb	r3, [r7, #31]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d105      	bne.n	800543c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005430:	4b7a      	ldr	r3, [pc, #488]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	4a79      	ldr	r2, [pc, #484]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80fe 	beq.w	8005642 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	2b02      	cmp	r3, #2
 800544c:	f040 80d0 	bne.w	80055f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005450:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0203 	and.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	d130      	bne.n	80054c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	3b01      	subs	r3, #1
 8005470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d127      	bne.n	80054c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d11f      	bne.n	80054c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005490:	2a07      	cmp	r2, #7
 8005492:	bf14      	ite	ne
 8005494:	2201      	movne	r2, #1
 8005496:	2200      	moveq	r2, #0
 8005498:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800549a:	4293      	cmp	r3, r2
 800549c:	d113      	bne.n	80054c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	085b      	lsrs	r3, r3, #1
 80054aa:	3b01      	subs	r3, #1
 80054ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d109      	bne.n	80054c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	3b01      	subs	r3, #1
 80054c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d06e      	beq.n	80055a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d069      	beq.n	80055a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054cc:	4b53      	ldr	r3, [pc, #332]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054d8:	4b50      	ldr	r3, [pc, #320]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0ad      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054e8:	4b4c      	ldr	r3, [pc, #304]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a4b      	ldr	r2, [pc, #300]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80054ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054f4:	f7fe f86c 	bl	80035d0 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fc:	f7fe f868 	bl	80035d0 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e09a      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800550e:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1f0      	bne.n	80054fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800551a:	4b40      	ldr	r3, [pc, #256]	; (800561c <HAL_RCC_OscConfig+0x780>)
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	4b40      	ldr	r3, [pc, #256]	; (8005620 <HAL_RCC_OscConfig+0x784>)
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800552a:	3a01      	subs	r2, #1
 800552c:	0112      	lsls	r2, r2, #4
 800552e:	4311      	orrs	r1, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005534:	0212      	lsls	r2, r2, #8
 8005536:	4311      	orrs	r1, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800553c:	0852      	lsrs	r2, r2, #1
 800553e:	3a01      	subs	r2, #1
 8005540:	0552      	lsls	r2, r2, #21
 8005542:	4311      	orrs	r1, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005548:	0852      	lsrs	r2, r2, #1
 800554a:	3a01      	subs	r2, #1
 800554c:	0652      	lsls	r2, r2, #25
 800554e:	4311      	orrs	r1, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005554:	0912      	lsrs	r2, r2, #4
 8005556:	0452      	lsls	r2, r2, #17
 8005558:	430a      	orrs	r2, r1
 800555a:	4930      	ldr	r1, [pc, #192]	; (800561c <HAL_RCC_OscConfig+0x780>)
 800555c:	4313      	orrs	r3, r2
 800555e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005560:	4b2e      	ldr	r3, [pc, #184]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800556a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCC_OscConfig+0x780>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005578:	f7fe f82a 	bl	80035d0 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe f826 	bl	80035d0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e058      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_RCC_OscConfig+0x780>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800559e:	e050      	b.n	8005642 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04f      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d148      	bne.n	8005642 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055bc:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055c8:	f7fe f802 	bl	80035d0 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fd fffe 	bl	80035d0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e030      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0x734>
 80055ee:	e028      	b.n	8005642 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b0c      	cmp	r3, #12
 80055f4:	d023      	beq.n	800563e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f6:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a08      	ldr	r2, [pc, #32]	; (800561c <HAL_RCC_OscConfig+0x780>)
 80055fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fd ffe5 	bl	80035d0 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005608:	e00c      	b.n	8005624 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800560a:	f7fd ffe1 	bl	80035d0 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d905      	bls.n	8005624 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e013      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
 800561c:	40021000 	.word	0x40021000
 8005620:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x7b0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ec      	bne.n	800560a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <HAL_RCC_OscConfig+0x7b0>)
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	4905      	ldr	r1, [pc, #20]	; (800564c <HAL_RCC_OscConfig+0x7b0>)
 8005636:	4b06      	ldr	r3, [pc, #24]	; (8005650 <HAL_RCC_OscConfig+0x7b4>)
 8005638:	4013      	ands	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
 800563c:	e001      	b.n	8005642 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000
 8005650:	feeefffc 	.word	0xfeeefffc

08005654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0e7      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005668:	4b75      	ldr	r3, [pc, #468]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d910      	bls.n	8005698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b72      	ldr	r3, [pc, #456]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 0207 	bic.w	r2, r3, #7
 800567e:	4970      	ldr	r1, [pc, #448]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b6e      	ldr	r3, [pc, #440]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d001      	beq.n	8005698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e0cf      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d010      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4b66      	ldr	r3, [pc, #408]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d908      	bls.n	80056c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b4:	4b63      	ldr	r3, [pc, #396]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4960      	ldr	r1, [pc, #384]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d04c      	beq.n	800576c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056da:	4b5a      	ldr	r3, [pc, #360]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d121      	bne.n	800572a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e0a6      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d107      	bne.n	8005702 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056f2:	4b54      	ldr	r3, [pc, #336]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d115      	bne.n	800572a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e09a      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800570a:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d109      	bne.n	800572a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e08e      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800571a:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e086      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800572a:	4b46      	ldr	r3, [pc, #280]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 0203 	bic.w	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	4943      	ldr	r1, [pc, #268]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	4313      	orrs	r3, r2
 800573a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd ff48 	bl	80035d0 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005742:	e00a      	b.n	800575a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005744:	f7fd ff44 	bl	80035d0 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e06e      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	4b3a      	ldr	r3, [pc, #232]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f003 020c 	and.w	r2, r3, #12
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	429a      	cmp	r2, r3
 800576a:	d1eb      	bne.n	8005744 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d010      	beq.n	800579a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005784:	429a      	cmp	r2, r3
 8005786:	d208      	bcs.n	800579a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005788:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	492b      	ldr	r1, [pc, #172]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800579a:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d210      	bcs.n	80057ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a8:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f023 0207 	bic.w	r2, r3, #7
 80057b0:	4923      	ldr	r1, [pc, #140]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b8:	4b21      	ldr	r3, [pc, #132]	; (8005840 <HAL_RCC_ClockConfig+0x1ec>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d001      	beq.n	80057ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e036      	b.n	8005838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057d6:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	4918      	ldr	r1, [pc, #96]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f4:	4b13      	ldr	r3, [pc, #76]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4910      	ldr	r1, [pc, #64]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	4313      	orrs	r3, r2
 8005806:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005808:	f000 f824 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <HAL_RCC_ClockConfig+0x1f0>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	091b      	lsrs	r3, r3, #4
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	490b      	ldr	r1, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x1f4>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	4a09      	ldr	r2, [pc, #36]	; (800584c <HAL_RCC_ClockConfig+0x1f8>)
 8005826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005828:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1fc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f7fd fe7f 	bl	8003530 <HAL_InitTick>
 8005832:	4603      	mov	r3, r0
 8005834:	72fb      	strb	r3, [r7, #11]

  return status;
 8005836:	7afb      	ldrb	r3, [r7, #11]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40022000 	.word	0x40022000
 8005844:	40021000 	.word	0x40021000
 8005848:	08012c1c 	.word	0x08012c1c
 800584c:	20000008 	.word	0x20000008
 8005850:	2000000c 	.word	0x2000000c

08005854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005862:	4b3e      	ldr	r3, [pc, #248]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800586c:	4b3b      	ldr	r3, [pc, #236]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x34>
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d121      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d11e      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005888:	4b34      	ldr	r3, [pc, #208]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005894:	4b31      	ldr	r3, [pc, #196]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 8005896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e005      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058a4:	4b2d      	ldr	r3, [pc, #180]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058b0:	4a2b      	ldr	r2, [pc, #172]	; (8005960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058c4:	e00a      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d102      	bne.n	80058d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <HAL_RCC_GetSysClockFreq+0x110>)
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e004      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d101      	bne.n	80058dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058d8:	4b23      	ldr	r3, [pc, #140]	; (8005968 <HAL_RCC_GetSysClockFreq+0x114>)
 80058da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b0c      	cmp	r3, #12
 80058e0:	d134      	bne.n	800594c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058e2:	4b1e      	ldr	r3, [pc, #120]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d003      	beq.n	80058fa <HAL_RCC_GetSysClockFreq+0xa6>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d003      	beq.n	8005900 <HAL_RCC_GetSysClockFreq+0xac>
 80058f8:	e005      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058fa:	4b1a      	ldr	r3, [pc, #104]	; (8005964 <HAL_RCC_GetSysClockFreq+0x110>)
 80058fc:	617b      	str	r3, [r7, #20]
      break;
 80058fe:	e005      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCC_GetSysClockFreq+0x114>)
 8005902:	617b      	str	r3, [r7, #20]
      break;
 8005904:	e002      	b.n	800590c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	617b      	str	r3, [r7, #20]
      break;
 800590a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800590c:	4b13      	ldr	r3, [pc, #76]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	3301      	adds	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800591a:	4b10      	ldr	r3, [pc, #64]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	0a1b      	lsrs	r3, r3, #8
 8005920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	fb03 f202 	mul.w	r2, r3, r2
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_RCC_GetSysClockFreq+0x108>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	0e5b      	lsrs	r3, r3, #25
 8005938:	f003 0303 	and.w	r3, r3, #3
 800593c:	3301      	adds	r3, #1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	fbb2 f3f3 	udiv	r3, r2, r3
 800594a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800594c:	69bb      	ldr	r3, [r7, #24]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3724      	adds	r7, #36	; 0x24
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000
 8005960:	08012c34 	.word	0x08012c34
 8005964:	00f42400 	.word	0x00f42400
 8005968:	007a1200 	.word	0x007a1200

0800596c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_RCC_GetHCLKFreq+0x14>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000008 	.word	0x20000008

08005984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005988:	f7ff fff0 	bl	800596c <HAL_RCC_GetHCLKFreq>
 800598c:	4602      	mov	r2, r0
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4904      	ldr	r1, [pc, #16]	; (80059ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800599a:	5ccb      	ldrb	r3, [r1, r3]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	08012c2c 	.word	0x08012c2c

080059b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059b4:	f7ff ffda 	bl	800596c <HAL_RCC_GetHCLKFreq>
 80059b8:	4602      	mov	r2, r0
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	0adb      	lsrs	r3, r3, #11
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	4904      	ldr	r1, [pc, #16]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059c6:	5ccb      	ldrb	r3, [r1, r3]
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	40021000 	.word	0x40021000
 80059d8:	08012c2c 	.word	0x08012c2c

080059dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059e8:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059f4:	f7ff f9ee 	bl	8004dd4 <HAL_PWREx_GetVoltageRange>
 80059f8:	6178      	str	r0, [r7, #20]
 80059fa:	e014      	b.n	8005a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059fc:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a06:	6593      	str	r3, [r2, #88]	; 0x58
 8005a08:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a14:	f7ff f9de 	bl	8004dd4 <HAL_PWREx_GetVoltageRange>
 8005a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a1a:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2c:	d10b      	bne.n	8005a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d919      	bls.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2ba0      	cmp	r3, #160	; 0xa0
 8005a38:	d902      	bls.n	8005a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e013      	b.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a40:	2301      	movs	r3, #1
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	e010      	b.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d902      	bls.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e00a      	b.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b80      	cmp	r3, #128	; 0x80
 8005a56:	d102      	bne.n	8005a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a58:	2302      	movs	r3, #2
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	e004      	b.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b70      	cmp	r3, #112	; 0x70
 8005a62:	d101      	bne.n	8005a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a64:	2301      	movs	r3, #1
 8005a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f023 0207 	bic.w	r2, r3, #7
 8005a70:	4909      	ldr	r1, [pc, #36]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a78:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d001      	beq.n	8005a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	40022000 	.word	0x40022000

08005a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d041      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005abc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ac0:	d02a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ac6:	d824      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005acc:	d008      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ad2:	d81e      	bhi.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005adc:	d010      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ade:	e018      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ae0:	4b86      	ldr	r3, [pc, #536]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a85      	ldr	r2, [pc, #532]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aec:	e015      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	2100      	movs	r1, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fabb 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005afe:	e00c      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3320      	adds	r3, #32
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fba6 	bl	8006258 <RCCEx_PLLSAI2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	74fb      	strb	r3, [r7, #19]
      break;
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b1a:	7cfb      	ldrb	r3, [r7, #19]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b2e:	4973      	ldr	r1, [pc, #460]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b36:	e001      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	7cfb      	ldrb	r3, [r7, #19]
 8005b3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d041      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b50:	d02a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b56:	d824      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b5c:	d008      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b62:	d81e      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b6c:	d010      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b6e:	e018      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b70:	4b62      	ldr	r3, [pc, #392]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a61      	ldr	r2, [pc, #388]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b7c:	e015      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fa73 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b8e:	e00c      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3320      	adds	r3, #32
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fb5e 	bl	8006258 <RCCEx_PLLSAI2_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	74fb      	strb	r3, [r7, #19]
      break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bb0:	4b52      	ldr	r3, [pc, #328]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bbe:	494f      	ldr	r1, [pc, #316]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bc6:	e001      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80a0 	beq.w	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bde:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00d      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf8:	4a40      	ldr	r2, [pc, #256]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8005c00:	4b3e      	ldr	r3, [pc, #248]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c10:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3a      	ldr	r2, [pc, #232]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c1c:	f7fd fcd8 	bl	80035d0 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c22:	e009      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c24:	f7fd fcd4 	bl	80035d0 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d902      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	74fb      	strb	r3, [r7, #19]
        break;
 8005c36:	e005      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ef      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d15c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c4a:	4b2c      	ldr	r3, [pc, #176]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c54:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01f      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d019      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c68:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7a:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c84:	4b1d      	ldr	r3, [pc, #116]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c94:	4a19      	ldr	r2, [pc, #100]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca6:	f7fd fc93 	bl	80035d0 <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cac:	e00b      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fd fc8f 	bl	80035d0 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d902      	bls.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cc4:	e006      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ec      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005cd4:	7cfb      	ldrb	r3, [r7, #19]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cda:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cea:	4904      	ldr	r1, [pc, #16]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cf2:	e009      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cf4:	7cfb      	ldrb	r3, [r7, #19]
 8005cf6:	74bb      	strb	r3, [r7, #18]
 8005cf8:	e006      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
 8005d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	7cfb      	ldrb	r3, [r7, #19]
 8005d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d08:	7c7b      	ldrb	r3, [r7, #17]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0e:	4b9e      	ldr	r3, [pc, #632]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	4a9d      	ldr	r2, [pc, #628]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d26:	4b98      	ldr	r3, [pc, #608]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f023 0203 	bic.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	4994      	ldr	r1, [pc, #592]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d48:	4b8f      	ldr	r3, [pc, #572]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 020c 	bic.w	r2, r3, #12
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d56:	498c      	ldr	r1, [pc, #560]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d6a:	4b87      	ldr	r3, [pc, #540]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	4983      	ldr	r1, [pc, #524]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d8c:	4b7e      	ldr	r3, [pc, #504]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	497b      	ldr	r1, [pc, #492]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dae:	4b76      	ldr	r3, [pc, #472]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dbc:	4972      	ldr	r1, [pc, #456]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dd0:	4b6d      	ldr	r3, [pc, #436]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	496a      	ldr	r1, [pc, #424]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005df2:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	4961      	ldr	r1, [pc, #388]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e14:	4b5c      	ldr	r3, [pc, #368]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	4959      	ldr	r1, [pc, #356]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e36:	4b54      	ldr	r3, [pc, #336]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	4950      	ldr	r1, [pc, #320]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e58:	4b4b      	ldr	r3, [pc, #300]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	4948      	ldr	r1, [pc, #288]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e7a:	4b43      	ldr	r3, [pc, #268]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	493f      	ldr	r1, [pc, #252]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d028      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e9c:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eaa:	4937      	ldr	r1, [pc, #220]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eba:	d106      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ebc:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ec6:	60d3      	str	r3, [r2, #12]
 8005ec8:	e011      	b.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ed2:	d10c      	bne.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f8c8 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d028      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	491f      	ldr	r1, [pc, #124]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f18:	d106      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1a:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a1a      	ldr	r2, [pc, #104]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f24:	60d3      	str	r3, [r2, #12]
 8005f26:	e011      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f899 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02b      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f58:	4b0b      	ldr	r3, [pc, #44]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f66:	4908      	ldr	r1, [pc, #32]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f76:	d109      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f78:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4a02      	ldr	r2, [pc, #8]	; (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f82:	60d3      	str	r3, [r2, #12]
 8005f84:	e014      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 f867 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fa6:	7cfb      	ldrb	r3, [r7, #19]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fac:	7cfb      	ldrb	r3, [r7, #19]
 8005fae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d02f      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fbc:	4b2b      	ldr	r3, [pc, #172]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fca:	4928      	ldr	r1, [pc, #160]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fda:	d10d      	bne.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f844 	bl	8006070 <RCCEx_PLLSAI1_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fec:	7cfb      	ldrb	r3, [r7, #19]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d014      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ff2:	7cfb      	ldrb	r3, [r7, #19]
 8005ff4:	74bb      	strb	r3, [r7, #18]
 8005ff6:	e011      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006000:	d10c      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3320      	adds	r3, #32
 8006006:	2102      	movs	r1, #2
 8006008:	4618      	mov	r0, r3
 800600a:	f000 f925 	bl	8006258 <RCCEx_PLLSAI2_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006028:	4b10      	ldr	r3, [pc, #64]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006036:	490d      	ldr	r1, [pc, #52]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800604a:	4b08      	ldr	r3, [pc, #32]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605a:	4904      	ldr	r1, [pc, #16]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006062:	7cbb      	ldrb	r3, [r7, #18]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000

08006070 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800607e:	4b75      	ldr	r3, [pc, #468]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800608a:	4b72      	ldr	r3, [pc, #456]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0203 	and.w	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d10d      	bne.n	80060b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
       ||
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060a2:	4b6c      	ldr	r3, [pc, #432]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
       ||
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d047      	beq.n	8006146 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
 80060ba:	e044      	b.n	8006146 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d018      	beq.n	80060f6 <RCCEx_PLLSAI1_Config+0x86>
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d825      	bhi.n	8006114 <RCCEx_PLLSAI1_Config+0xa4>
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d002      	beq.n	80060d2 <RCCEx_PLLSAI1_Config+0x62>
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d009      	beq.n	80060e4 <RCCEx_PLLSAI1_Config+0x74>
 80060d0:	e020      	b.n	8006114 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060d2:	4b60      	ldr	r3, [pc, #384]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11d      	bne.n	800611a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e2:	e01a      	b.n	800611a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060e4:	4b5b      	ldr	r3, [pc, #364]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d116      	bne.n	800611e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f4:	e013      	b.n	800611e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060f6:	4b57      	ldr	r3, [pc, #348]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10f      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006102:	4b54      	ldr	r3, [pc, #336]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006112:	e006      	b.n	8006122 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e004      	b.n	8006124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800611a:	bf00      	nop
 800611c:	e002      	b.n	8006124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800611e:	bf00      	nop
 8006120:	e000      	b.n	8006124 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006122:	bf00      	nop
    }

    if(status == HAL_OK)
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800612a:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	3b01      	subs	r3, #1
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	430b      	orrs	r3, r1
 8006140:	4944      	ldr	r1, [pc, #272]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006142:	4313      	orrs	r3, r2
 8006144:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d17d      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800614c:	4b41      	ldr	r3, [pc, #260]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a40      	ldr	r2, [pc, #256]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006152:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006158:	f7fd fa3a 	bl	80035d0 <HAL_GetTick>
 800615c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800615e:	e009      	b.n	8006174 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006160:	f7fd fa36 	bl	80035d0 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
        break;
 8006172:	e005      	b.n	8006180 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006174:	4b37      	ldr	r3, [pc, #220]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1ef      	bne.n	8006160 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d160      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d111      	bne.n	80061b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800618c:	4b31      	ldr	r3, [pc, #196]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6892      	ldr	r2, [r2, #8]
 800619c:	0211      	lsls	r1, r2, #8
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	68d2      	ldr	r2, [r2, #12]
 80061a2:	0912      	lsrs	r2, r2, #4
 80061a4:	0452      	lsls	r2, r2, #17
 80061a6:	430a      	orrs	r2, r1
 80061a8:	492a      	ldr	r1, [pc, #168]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	610b      	str	r3, [r1, #16]
 80061ae:	e027      	b.n	8006200 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d112      	bne.n	80061dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061b6:	4b27      	ldr	r3, [pc, #156]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6892      	ldr	r2, [r2, #8]
 80061c6:	0211      	lsls	r1, r2, #8
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6912      	ldr	r2, [r2, #16]
 80061cc:	0852      	lsrs	r2, r2, #1
 80061ce:	3a01      	subs	r2, #1
 80061d0:	0552      	lsls	r2, r2, #21
 80061d2:	430a      	orrs	r2, r1
 80061d4:	491f      	ldr	r1, [pc, #124]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	610b      	str	r3, [r1, #16]
 80061da:	e011      	b.n	8006200 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061dc:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6892      	ldr	r2, [r2, #8]
 80061ec:	0211      	lsls	r1, r2, #8
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6952      	ldr	r2, [r2, #20]
 80061f2:	0852      	lsrs	r2, r2, #1
 80061f4:	3a01      	subs	r2, #1
 80061f6:	0652      	lsls	r2, r2, #25
 80061f8:	430a      	orrs	r2, r1
 80061fa:	4916      	ldr	r1, [pc, #88]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006200:	4b14      	ldr	r3, [pc, #80]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a13      	ldr	r2, [pc, #76]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006206:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800620a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fd f9e0 	bl	80035d0 <HAL_GetTick>
 8006210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006212:	e009      	b.n	8006228 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006214:	f7fd f9dc 	bl	80035d0 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d902      	bls.n	8006228 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	73fb      	strb	r3, [r7, #15]
          break;
 8006226:	e005      	b.n	8006234 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0ef      	beq.n	8006214 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006234:	7bfb      	ldrb	r3, [r7, #15]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	4904      	ldr	r1, [pc, #16]	; (8006254 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000

08006258 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006266:	4b6a      	ldr	r3, [pc, #424]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d018      	beq.n	80062a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006272:	4b67      	ldr	r3, [pc, #412]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f003 0203 	and.w	r2, r3, #3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d10d      	bne.n	800629e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
       ||
 8006286:	2b00      	cmp	r3, #0
 8006288:	d009      	beq.n	800629e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800628a:	4b61      	ldr	r3, [pc, #388]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	091b      	lsrs	r3, r3, #4
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
       ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d047      	beq.n	800632e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e044      	b.n	800632e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d018      	beq.n	80062de <RCCEx_PLLSAI2_Config+0x86>
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d825      	bhi.n	80062fc <RCCEx_PLLSAI2_Config+0xa4>
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d002      	beq.n	80062ba <RCCEx_PLLSAI2_Config+0x62>
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d009      	beq.n	80062cc <RCCEx_PLLSAI2_Config+0x74>
 80062b8:	e020      	b.n	80062fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ba:	4b55      	ldr	r3, [pc, #340]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d11d      	bne.n	8006302 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ca:	e01a      	b.n	8006302 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062cc:	4b50      	ldr	r3, [pc, #320]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d116      	bne.n	8006306 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062dc:	e013      	b.n	8006306 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062de:	4b4c      	ldr	r3, [pc, #304]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10f      	bne.n	800630a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062ea:	4b49      	ldr	r3, [pc, #292]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062fa:	e006      	b.n	800630a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e004      	b.n	800630c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800630a:	bf00      	nop
    }

    if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006312:	4b3f      	ldr	r3, [pc, #252]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6819      	ldr	r1, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	3b01      	subs	r3, #1
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	430b      	orrs	r3, r1
 8006328:	4939      	ldr	r1, [pc, #228]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800632a:	4313      	orrs	r3, r2
 800632c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d167      	bne.n	8006404 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006334:	4b36      	ldr	r3, [pc, #216]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a35      	ldr	r2, [pc, #212]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006340:	f7fd f946 	bl	80035d0 <HAL_GetTick>
 8006344:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006346:	e009      	b.n	800635c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006348:	f7fd f942 	bl	80035d0 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	73fb      	strb	r3, [r7, #15]
        break;
 800635a:	e005      	b.n	8006368 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800635c:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1ef      	bne.n	8006348 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d14a      	bne.n	8006404 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d111      	bne.n	8006398 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006374:	4b26      	ldr	r3, [pc, #152]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800637c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6892      	ldr	r2, [r2, #8]
 8006384:	0211      	lsls	r1, r2, #8
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	0912      	lsrs	r2, r2, #4
 800638c:	0452      	lsls	r2, r2, #17
 800638e:	430a      	orrs	r2, r1
 8006390:	491f      	ldr	r1, [pc, #124]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	614b      	str	r3, [r1, #20]
 8006396:	e011      	b.n	80063bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006398:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6892      	ldr	r2, [r2, #8]
 80063a8:	0211      	lsls	r1, r2, #8
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6912      	ldr	r2, [r2, #16]
 80063ae:	0852      	lsrs	r2, r2, #1
 80063b0:	3a01      	subs	r2, #1
 80063b2:	0652      	lsls	r2, r2, #25
 80063b4:	430a      	orrs	r2, r1
 80063b6:	4916      	ldr	r1, [pc, #88]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063bc:	4b14      	ldr	r3, [pc, #80]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063c8:	f7fd f902 	bl	80035d0 <HAL_GetTick>
 80063cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063ce:	e009      	b.n	80063e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063d0:	f7fd f8fe 	bl	80035d0 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d902      	bls.n	80063e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	73fb      	strb	r3, [r7, #15]
          break;
 80063e2:	e005      	b.n	80063f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0ef      	beq.n	80063d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063f8:	695a      	ldr	r2, [r3, #20]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4904      	ldr	r1, [pc, #16]	; (8006410 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006400:	4313      	orrs	r3, r2
 8006402:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40021000 	.word	0x40021000

08006414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e095      	b.n	8006552 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2b00      	cmp	r3, #0
 800642c:	d108      	bne.n	8006440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006436:	d009      	beq.n	800644c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	61da      	str	r2, [r3, #28]
 800643e:	e005      	b.n	800644c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d106      	bne.n	800646c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc fdda 	bl	8003020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006482:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648c:	d902      	bls.n	8006494 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e002      	b.n	800649a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006498:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064a2:	d007      	beq.n	80064b4 <HAL_SPI_Init+0xa0>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	431a      	orrs	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	ea42 0103 	orr.w	r1, r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	f003 0204 	and.w	r2, r3, #4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006530:	ea42 0103 	orr.w	r1, r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08a      	sub	sp, #40	; 0x28
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006568:	2301      	movs	r3, #1
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_SPI_TransmitReceive+0x26>
 800657c:	2302      	movs	r3, #2
 800657e:	e1fb      	b.n	8006978 <HAL_SPI_TransmitReceive+0x41e>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006588:	f7fd f822 	bl	80035d0 <HAL_GetTick>
 800658c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006594:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800659c:	887b      	ldrh	r3, [r7, #2]
 800659e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80065a0:	887b      	ldrh	r3, [r7, #2]
 80065a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065a4:	7efb      	ldrb	r3, [r7, #27]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d00e      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x6e>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065b0:	d106      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x66>
 80065ba:	7efb      	ldrb	r3, [r7, #27]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065c6:	e1cd      	b.n	8006964 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_SPI_TransmitReceive+0x80>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_SPI_TransmitReceive+0x80>
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80065e0:	e1c0      	b.n	8006964 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d003      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2205      	movs	r2, #5
 80065f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	887a      	ldrh	r2, [r7, #2]
 8006606:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	887a      	ldrh	r2, [r7, #2]
 800660e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006638:	d802      	bhi.n	8006640 <HAL_SPI_TransmitReceive+0xe6>
 800663a:	8a3b      	ldrh	r3, [r7, #16]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d908      	bls.n	8006652 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800664e:	605a      	str	r2, [r3, #4]
 8006650:	e007      	b.n	8006662 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b40      	cmp	r3, #64	; 0x40
 800666e:	d007      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006688:	d97c      	bls.n	8006784 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_SPI_TransmitReceive+0x13e>
 8006692:	8a7b      	ldrh	r3, [r7, #18]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d169      	bne.n	800676c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	881a      	ldrh	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	1c9a      	adds	r2, r3, #2
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066bc:	e056      	b.n	800676c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d11b      	bne.n	8006704 <HAL_SPI_TransmitReceive+0x1aa>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <HAL_SPI_TransmitReceive+0x1aa>
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d113      	bne.n	8006704 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11c      	bne.n	800674c <HAL_SPI_TransmitReceive+0x1f2>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	b292      	uxth	r2, r2
 800672a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	1c9a      	adds	r2, r3, #2
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006748:	2301      	movs	r3, #1
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800674c:	f7fc ff40 	bl	80035d0 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006758:	429a      	cmp	r2, r3
 800675a:	d807      	bhi.n	800676c <HAL_SPI_TransmitReceive+0x212>
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006762:	d003      	beq.n	800676c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800676a:	e0fb      	b.n	8006964 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1a3      	bne.n	80066be <HAL_SPI_TransmitReceive+0x164>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d19d      	bne.n	80066be <HAL_SPI_TransmitReceive+0x164>
 8006782:	e0df      	b.n	8006944 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_SPI_TransmitReceive+0x23a>
 800678c:	8a7b      	ldrh	r3, [r7, #18]
 800678e:	2b01      	cmp	r3, #1
 8006790:	f040 80cb 	bne.w	800692a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b01      	cmp	r3, #1
 800679c:	d912      	bls.n	80067c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ae:	1c9a      	adds	r2, r3, #2
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b02      	subs	r3, #2
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067c2:	e0b2      	b.n	800692a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ea:	e09e      	b.n	800692a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d134      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x30a>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d02f      	beq.n	8006864 <HAL_SPI_TransmitReceive+0x30a>
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	2b01      	cmp	r3, #1
 8006808:	d12c      	bne.n	8006864 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d912      	bls.n	800683a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	881a      	ldrh	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b02      	subs	r3, #2
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006838:	e012      	b.n	8006860 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	d148      	bne.n	8006904 <HAL_SPI_TransmitReceive+0x3aa>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006878:	b29b      	uxth	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d042      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	d923      	bls.n	80068d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006894:	b292      	uxth	r2, r2
 8006896:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	1c9a      	adds	r2, r3, #2
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b02      	subs	r3, #2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d81f      	bhi.n	8006900 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ce:	605a      	str	r2, [r3, #4]
 80068d0:	e016      	b.n	8006900 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f103 020c 	add.w	r2, r3, #12
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006900:	2301      	movs	r3, #1
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006904:	f7fc fe64 	bl	80035d0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006910:	429a      	cmp	r2, r3
 8006912:	d803      	bhi.n	800691c <HAL_SPI_TransmitReceive+0x3c2>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d102      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x3c8>
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	2b00      	cmp	r3, #0
 8006920:	d103      	bne.n	800692a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006928:	e01c      	b.n	8006964 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	f47f af5b 	bne.w	80067ec <HAL_SPI_TransmitReceive+0x292>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800693c:	b29b      	uxth	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	f47f af54 	bne.w	80067ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f937 	bl	8006bbc <SPI_EndRxTxTransaction>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	661a      	str	r2, [r3, #96]	; 0x60
 8006960:	e000      	b.n	8006964 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	; 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006990:	f7fc fe1e 	bl	80035d0 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	1a9b      	subs	r3, r3, r2
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	4413      	add	r3, r2
 800699e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069a0:	f7fc fe16 	bl	80035d0 <HAL_GetTick>
 80069a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069a6:	4b39      	ldr	r3, [pc, #228]	; (8006a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	015b      	lsls	r3, r3, #5
 80069ac:	0d1b      	lsrs	r3, r3, #20
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	fb02 f303 	mul.w	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b6:	e054      	b.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d050      	beq.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069c0:	f7fc fe06 	bl	80035d0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d902      	bls.n	80069d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d13d      	bne.n	8006a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ee:	d111      	bne.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f8:	d004      	beq.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a02:	d107      	bne.n	8006a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1c:	d10f      	bne.n	8006a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e017      	b.n	8006a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	bf0c      	ite	eq
 8006a72:	2301      	moveq	r3, #1
 8006a74:	2300      	movne	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d19b      	bne.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3720      	adds	r7, #32
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000008 	.word	0x20000008

08006a90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006aa2:	f7fc fd95 	bl	80035d0 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	4413      	add	r3, r2
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ab2:	f7fc fd8d 	bl	80035d0 <HAL_GetTick>
 8006ab6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ac0:	4b3d      	ldr	r3, [pc, #244]	; (8006bb8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	00da      	lsls	r2, r3, #3
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	0d1b      	lsrs	r3, r3, #20
 8006ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ad8:	e060      	b.n	8006b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ae0:	d107      	bne.n	8006af2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006af0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d050      	beq.n	8006b9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006afa:	f7fc fd69 	bl	80035d0 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d902      	bls.n	8006b10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d13d      	bne.n	8006b8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b28:	d111      	bne.n	8006b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b32:	d004      	beq.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3c:	d107      	bne.n	8006b4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b56:	d10f      	bne.n	8006b78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e010      	b.n	8006bae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d196      	bne.n	8006ada <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3728      	adds	r7, #40	; 0x28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000008 	.word	0x20000008

08006bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff ff5b 	bl	8006a90 <SPI_WaitFifoStateUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e027      	b.n	8006c40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fec0 	bl	8006980 <SPI_WaitFlagStateUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e014      	b.n	8006c40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f7ff ff34 	bl	8006a90 <SPI_WaitFifoStateUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c32:	f043 0220 	orr.w	r2, r3, #32
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e000      	b.n	8006c40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e049      	b.n	8006cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fc fa38 	bl	80030e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f000 fe5a 	bl	8007940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d001      	beq.n	8006d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e047      	b.n	8006da0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <HAL_TIM_Base_Start+0xb4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d018      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1f      	ldr	r2, [pc, #124]	; (8006db0 <HAL_TIM_Base_Start+0xb8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <HAL_TIM_Base_Start+0xbc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <HAL_TIM_Base_Start+0xc0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <HAL_TIM_Base_Start+0xc4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIM_Base_Start+0x66>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <HAL_TIM_Base_Start+0xc8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d115      	bne.n	8006d8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	4b17      	ldr	r3, [pc, #92]	; (8006dc4 <HAL_TIM_Base_Start+0xcc>)
 8006d66:	4013      	ands	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b06      	cmp	r3, #6
 8006d6e:	d015      	beq.n	8006d9c <HAL_TIM_Base_Start+0xa4>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d011      	beq.n	8006d9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0201 	orr.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d88:	e008      	b.n	8006d9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f042 0201 	orr.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e000      	b.n	8006d9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40000400 	.word	0x40000400
 8006db4:	40000800 	.word	0x40000800
 8006db8:	40000c00 	.word	0x40000c00
 8006dbc:	40013400 	.word	0x40013400
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	00010007 	.word	0x00010007

08006dc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a1a      	ldr	r2, [r3, #32]
 8006dd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10f      	bne.n	8006e00 <HAL_TIM_Base_Stop+0x38>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	f240 4344 	movw	r3, #1092	; 0x444
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_Base_Stop+0x38>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0201 	bic.w	r2, r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d001      	beq.n	8006e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e04f      	b.n	8006ed0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a23      	ldr	r2, [pc, #140]	; (8006edc <HAL_TIM_Base_Start_IT+0xc4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e5a:	d018      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <HAL_TIM_Base_Start_IT+0xd4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_TIM_Base_Start_IT+0x76>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d115      	bne.n	8006eba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d015      	beq.n	8006ecc <HAL_TIM_Base_Start_IT+0xb4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d011      	beq.n	8006ecc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb8:	e008      	b.n	8006ecc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e000      	b.n	8006ece <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40000400 	.word	0x40000400
 8006ee4:	40000800 	.word	0x40000800
 8006ee8:	40000c00 	.word	0x40000c00
 8006eec:	40013400 	.word	0x40013400
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	00010007 	.word	0x00010007

08006ef8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0201 	bic.w	r2, r2, #1
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <HAL_TIM_Base_Stop_IT+0x48>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	f240 4344 	movw	r3, #1092	; 0x444
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIM_Base_Stop_IT+0x48>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e049      	b.n	8006ffc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d106      	bne.n	8006f82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fc f891 	bl	80030a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2202      	movs	r2, #2
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f000 fcd3 	bl	8007940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <HAL_TIM_PWM_Start_IT+0x28>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e03c      	b.n	80070a6 <HAL_TIM_PWM_Start_IT+0xa2>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b04      	cmp	r3, #4
 8007030:	d109      	bne.n	8007046 <HAL_TIM_PWM_Start_IT+0x42>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	e02f      	b.n	80070a6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b08      	cmp	r3, #8
 800704a:	d109      	bne.n	8007060 <HAL_TIM_PWM_Start_IT+0x5c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	bf14      	ite	ne
 8007058:	2301      	movne	r3, #1
 800705a:	2300      	moveq	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	e022      	b.n	80070a6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b0c      	cmp	r3, #12
 8007064:	d109      	bne.n	800707a <HAL_TIM_PWM_Start_IT+0x76>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	bf14      	ite	ne
 8007072:	2301      	movne	r3, #1
 8007074:	2300      	moveq	r3, #0
 8007076:	b2db      	uxtb	r3, r3
 8007078:	e015      	b.n	80070a6 <HAL_TIM_PWM_Start_IT+0xa2>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b10      	cmp	r3, #16
 800707e:	d109      	bne.n	8007094 <HAL_TIM_PWM_Start_IT+0x90>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b01      	cmp	r3, #1
 800708a:	bf14      	ite	ne
 800708c:	2301      	movne	r3, #1
 800708e:	2300      	moveq	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	e008      	b.n	80070a6 <HAL_TIM_PWM_Start_IT+0xa2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0e7      	b.n	800727e <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <HAL_TIM_PWM_Start_IT+0xba>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070bc:	e023      	b.n	8007106 <HAL_TIM_PWM_Start_IT+0x102>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_PWM_Start_IT+0xca>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070cc:	e01b      	b.n	8007106 <HAL_TIM_PWM_Start_IT+0x102>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d104      	bne.n	80070de <HAL_TIM_PWM_Start_IT+0xda>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070dc:	e013      	b.n	8007106 <HAL_TIM_PWM_Start_IT+0x102>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b0c      	cmp	r3, #12
 80070e2:	d104      	bne.n	80070ee <HAL_TIM_PWM_Start_IT+0xea>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070ec:	e00b      	b.n	8007106 <HAL_TIM_PWM_Start_IT+0x102>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d104      	bne.n	80070fe <HAL_TIM_PWM_Start_IT+0xfa>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070fc:	e003      	b.n	8007106 <HAL_TIM_PWM_Start_IT+0x102>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d841      	bhi.n	8007190 <HAL_TIM_PWM_Start_IT+0x18c>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <HAL_TIM_PWM_Start_IT+0x110>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007149 	.word	0x08007149
 8007118:	08007191 	.word	0x08007191
 800711c:	08007191 	.word	0x08007191
 8007120:	08007191 	.word	0x08007191
 8007124:	0800715b 	.word	0x0800715b
 8007128:	08007191 	.word	0x08007191
 800712c:	08007191 	.word	0x08007191
 8007130:	08007191 	.word	0x08007191
 8007134:	0800716d 	.word	0x0800716d
 8007138:	08007191 	.word	0x08007191
 800713c:	08007191 	.word	0x08007191
 8007140:	08007191 	.word	0x08007191
 8007144:	0800717f 	.word	0x0800717f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0202 	orr.w	r2, r2, #2
 8007156:	60da      	str	r2, [r3, #12]
      break;
 8007158:	e01d      	b.n	8007196 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0204 	orr.w	r2, r2, #4
 8007168:	60da      	str	r2, [r3, #12]
      break;
 800716a:	e014      	b.n	8007196 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0208 	orr.w	r2, r2, #8
 800717a:	60da      	str	r2, [r3, #12]
      break;
 800717c:	e00b      	b.n	8007196 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0210 	orr.w	r2, r2, #16
 800718c:	60da      	str	r2, [r3, #12]
      break;
 800718e:	e002      	b.n	8007196 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
      break;
 8007194:	bf00      	nop
  }

  if (status == HAL_OK)
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d16f      	bne.n	800727c <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2201      	movs	r2, #1
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 ff3b 	bl	8008020 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a36      	ldr	r2, [pc, #216]	; (8007288 <HAL_TIM_PWM_Start_IT+0x284>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <HAL_TIM_PWM_Start_IT+0x1d8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a34      	ldr	r2, [pc, #208]	; (800728c <HAL_TIM_PWM_Start_IT+0x288>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <HAL_TIM_PWM_Start_IT+0x1d8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a33      	ldr	r2, [pc, #204]	; (8007290 <HAL_TIM_PWM_Start_IT+0x28c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <HAL_TIM_PWM_Start_IT+0x1d8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a31      	ldr	r2, [pc, #196]	; (8007294 <HAL_TIM_PWM_Start_IT+0x290>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <HAL_TIM_PWM_Start_IT+0x1d8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a30      	ldr	r2, [pc, #192]	; (8007298 <HAL_TIM_PWM_Start_IT+0x294>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d101      	bne.n	80071e0 <HAL_TIM_PWM_Start_IT+0x1dc>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <HAL_TIM_PWM_Start_IT+0x1de>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a23      	ldr	r2, [pc, #140]	; (8007288 <HAL_TIM_PWM_Start_IT+0x284>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d01d      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007208:	d018      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a23      	ldr	r2, [pc, #140]	; (800729c <HAL_TIM_PWM_Start_IT+0x298>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a21      	ldr	r2, [pc, #132]	; (80072a0 <HAL_TIM_PWM_Start_IT+0x29c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIM_PWM_Start_IT+0x288>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_TIM_PWM_Start_IT+0x238>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a16      	ldr	r2, [pc, #88]	; (8007290 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d115      	bne.n	8007268 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	4b19      	ldr	r3, [pc, #100]	; (80072a8 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007244:	4013      	ands	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b06      	cmp	r3, #6
 800724c:	d015      	beq.n	800727a <HAL_TIM_PWM_Start_IT+0x276>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007254:	d011      	beq.n	800727a <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0201 	orr.w	r2, r2, #1
 8007264:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007266:	e008      	b.n	800727a <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e000      	b.n	800727c <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800727a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	40014400 	.word	0x40014400
 8007298:	40014800 	.word	0x40014800
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	00010007 	.word	0x00010007

080072ac <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b0c      	cmp	r3, #12
 80072be:	d841      	bhi.n	8007344 <HAL_TIM_PWM_Stop_IT+0x98>
 80072c0:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80072c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c6:	bf00      	nop
 80072c8:	080072fd 	.word	0x080072fd
 80072cc:	08007345 	.word	0x08007345
 80072d0:	08007345 	.word	0x08007345
 80072d4:	08007345 	.word	0x08007345
 80072d8:	0800730f 	.word	0x0800730f
 80072dc:	08007345 	.word	0x08007345
 80072e0:	08007345 	.word	0x08007345
 80072e4:	08007345 	.word	0x08007345
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007345 	.word	0x08007345
 80072f0:	08007345 	.word	0x08007345
 80072f4:	08007345 	.word	0x08007345
 80072f8:	08007333 	.word	0x08007333
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0202 	bic.w	r2, r2, #2
 800730a:	60da      	str	r2, [r3, #12]
      break;
 800730c:	e01d      	b.n	800734a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0204 	bic.w	r2, r2, #4
 800731c:	60da      	str	r2, [r3, #12]
      break;
 800731e:	e014      	b.n	800734a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0208 	bic.w	r2, r2, #8
 800732e:	60da      	str	r2, [r3, #12]
      break;
 8007330:	e00b      	b.n	800734a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0210 	bic.w	r2, r2, #16
 8007340:	60da      	str	r2, [r3, #12]
      break;
 8007342:	e002      	b.n	800734a <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	73fb      	strb	r3, [r7, #15]
      break;
 8007348:	bf00      	nop
  }

  if (status == HAL_OK)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f040 8081 	bne.w	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2200      	movs	r2, #0
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fe60 	bl	8008020 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a3e      	ldr	r2, [pc, #248]	; (8007460 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_TIM_PWM_Stop_IT+0xe6>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a3b      	ldr	r2, [pc, #236]	; (8007468 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_TIM_PWM_Stop_IT+0xe6>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a3a      	ldr	r2, [pc, #232]	; (800746c <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_TIM_PWM_Stop_IT+0xe6>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a38      	ldr	r2, [pc, #224]	; (8007470 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d101      	bne.n	8007396 <HAL_TIM_PWM_Stop_IT+0xea>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <HAL_TIM_PWM_Stop_IT+0xec>
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d017      	beq.n	80073cc <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a1a      	ldr	r2, [r3, #32]
 80073a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10f      	bne.n	80073cc <HAL_TIM_PWM_Stop_IT+0x120>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	f240 4344 	movw	r3, #1092	; 0x444
 80073b6:	4013      	ands	r3, r2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_PWM_Stop_IT+0x120>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6a1a      	ldr	r2, [r3, #32]
 80073d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80073d6:	4013      	ands	r3, r2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10f      	bne.n	80073fc <HAL_TIM_PWM_Stop_IT+0x150>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	f240 4344 	movw	r3, #1092	; 0x444
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <HAL_TIM_PWM_Stop_IT+0x150>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <HAL_TIM_PWM_Stop_IT+0x160>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800740a:	e023      	b.n	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b04      	cmp	r3, #4
 8007410:	d104      	bne.n	800741c <HAL_TIM_PWM_Stop_IT+0x170>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800741a:	e01b      	b.n	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b08      	cmp	r3, #8
 8007420:	d104      	bne.n	800742c <HAL_TIM_PWM_Stop_IT+0x180>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800742a:	e013      	b.n	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b0c      	cmp	r3, #12
 8007430:	d104      	bne.n	800743c <HAL_TIM_PWM_Stop_IT+0x190>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800743a:	e00b      	b.n	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b10      	cmp	r3, #16
 8007440:	d104      	bne.n	800744c <HAL_TIM_PWM_Stop_IT+0x1a0>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800744a:	e003      	b.n	8007454 <HAL_TIM_PWM_Stop_IT+0x1a8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40012c00 	.word	0x40012c00
 8007464:	40013400 	.word	0x40013400
 8007468:	40014000 	.word	0x40014000
 800746c:	40014400 	.word	0x40014400
 8007470:	40014800 	.word	0x40014800

08007474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b02      	cmp	r3, #2
 8007488:	d122      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b02      	cmp	r3, #2
 8007496:	d11b      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0202 	mvn.w	r2, #2
 80074a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fa24 	bl	8007904 <HAL_TIM_IC_CaptureCallback>
 80074bc:	e005      	b.n	80074ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa16 	bl	80078f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fa27 	bl	8007918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d122      	bne.n	8007524 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d11b      	bne.n	8007524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0204 	mvn.w	r2, #4
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9fa 	bl	8007904 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9ec 	bl	80078f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f9fd 	bl	8007918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b08      	cmp	r3, #8
 8007530:	d122      	bne.n	8007578 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b08      	cmp	r3, #8
 800753e:	d11b      	bne.n	8007578 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0208 	mvn.w	r2, #8
 8007548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2204      	movs	r2, #4
 800754e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9d0 	bl	8007904 <HAL_TIM_IC_CaptureCallback>
 8007564:	e005      	b.n	8007572 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9c2 	bl	80078f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f9d3 	bl	8007918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b10      	cmp	r3, #16
 8007584:	d122      	bne.n	80075cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	2b10      	cmp	r3, #16
 8007592:	d11b      	bne.n	80075cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0210 	mvn.w	r2, #16
 800759c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2208      	movs	r2, #8
 80075a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9a6 	bl	8007904 <HAL_TIM_IC_CaptureCallback>
 80075b8:	e005      	b.n	80075c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f998 	bl	80078f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9a9 	bl	8007918 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d10e      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d107      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0201 	mvn.w	r2, #1
 80075f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f972 	bl	80078dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007602:	2b80      	cmp	r3, #128	; 0x80
 8007604:	d10e      	bne.n	8007624 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d107      	bne.n	8007624 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800761c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fdb6 	bl	8008190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007632:	d10e      	bne.n	8007652 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	2b80      	cmp	r3, #128	; 0x80
 8007640:	d107      	bne.n	8007652 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800764a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fda9 	bl	80081a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765c:	2b40      	cmp	r3, #64	; 0x40
 800765e:	d10e      	bne.n	800767e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d107      	bne.n	800767e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f957 	bl	800792c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b20      	cmp	r3, #32
 800768a:	d10e      	bne.n	80076aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b20      	cmp	r3, #32
 8007698:	d107      	bne.n	80076aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f06f 0220 	mvn.w	r2, #32
 80076a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fd69 	bl	800817c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0ff      	b.n	80078d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b14      	cmp	r3, #20
 80076de:	f200 80f0 	bhi.w	80078c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	080078c3 	.word	0x080078c3
 80076f0:	080078c3 	.word	0x080078c3
 80076f4:	080078c3 	.word	0x080078c3
 80076f8:	0800777d 	.word	0x0800777d
 80076fc:	080078c3 	.word	0x080078c3
 8007700:	080078c3 	.word	0x080078c3
 8007704:	080078c3 	.word	0x080078c3
 8007708:	080077bf 	.word	0x080077bf
 800770c:	080078c3 	.word	0x080078c3
 8007710:	080078c3 	.word	0x080078c3
 8007714:	080078c3 	.word	0x080078c3
 8007718:	080077ff 	.word	0x080077ff
 800771c:	080078c3 	.word	0x080078c3
 8007720:	080078c3 	.word	0x080078c3
 8007724:	080078c3 	.word	0x080078c3
 8007728:	08007841 	.word	0x08007841
 800772c:	080078c3 	.word	0x080078c3
 8007730:	080078c3 	.word	0x080078c3
 8007734:	080078c3 	.word	0x080078c3
 8007738:	08007881 	.word	0x08007881
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f996 	bl	8007a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0208 	orr.w	r2, r2, #8
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0204 	bic.w	r2, r2, #4
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	619a      	str	r2, [r3, #24]
      break;
 800777a:	e0a5      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fa06 	bl	8007b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	021a      	lsls	r2, r3, #8
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	619a      	str	r2, [r3, #24]
      break;
 80077bc:	e084      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fa6f 	bl	8007ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0208 	orr.w	r2, r2, #8
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0204 	bic.w	r2, r2, #4
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	61da      	str	r2, [r3, #28]
      break;
 80077fc:	e064      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fad7 	bl	8007db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	021a      	lsls	r2, r3, #8
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
      break;
 800783e:	e043      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fb20 	bl	8007e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0208 	orr.w	r2, r2, #8
 800785a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0204 	bic.w	r2, r2, #4
 800786a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	691a      	ldr	r2, [r3, #16]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800787e:	e023      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fb64 	bl	8007f54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800789a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078c0:	e002      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
      break;
 80078c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a40      	ldr	r2, [pc, #256]	; (8007a54 <TIM_Base_SetConfig+0x114>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d013      	beq.n	8007980 <TIM_Base_SetConfig+0x40>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800795e:	d00f      	beq.n	8007980 <TIM_Base_SetConfig+0x40>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a3d      	ldr	r2, [pc, #244]	; (8007a58 <TIM_Base_SetConfig+0x118>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d00b      	beq.n	8007980 <TIM_Base_SetConfig+0x40>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a3c      	ldr	r2, [pc, #240]	; (8007a5c <TIM_Base_SetConfig+0x11c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d007      	beq.n	8007980 <TIM_Base_SetConfig+0x40>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a3b      	ldr	r2, [pc, #236]	; (8007a60 <TIM_Base_SetConfig+0x120>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_Base_SetConfig+0x40>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a3a      	ldr	r2, [pc, #232]	; (8007a64 <TIM_Base_SetConfig+0x124>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d108      	bne.n	8007992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2f      	ldr	r2, [pc, #188]	; (8007a54 <TIM_Base_SetConfig+0x114>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01f      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a0:	d01b      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2c      	ldr	r2, [pc, #176]	; (8007a58 <TIM_Base_SetConfig+0x118>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d017      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2b      	ldr	r2, [pc, #172]	; (8007a5c <TIM_Base_SetConfig+0x11c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a2a      	ldr	r2, [pc, #168]	; (8007a60 <TIM_Base_SetConfig+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a29      	ldr	r2, [pc, #164]	; (8007a64 <TIM_Base_SetConfig+0x124>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a28      	ldr	r2, [pc, #160]	; (8007a68 <TIM_Base_SetConfig+0x128>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <TIM_Base_SetConfig+0x12c>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_Base_SetConfig+0x9a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <TIM_Base_SetConfig+0x130>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d108      	bne.n	80079ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a10      	ldr	r2, [pc, #64]	; (8007a54 <TIM_Base_SetConfig+0x114>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00f      	beq.n	8007a38 <TIM_Base_SetConfig+0xf8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a12      	ldr	r2, [pc, #72]	; (8007a64 <TIM_Base_SetConfig+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_Base_SetConfig+0xf8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a11      	ldr	r2, [pc, #68]	; (8007a68 <TIM_Base_SetConfig+0x128>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_Base_SetConfig+0xf8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <TIM_Base_SetConfig+0x12c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_Base_SetConfig+0xf8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <TIM_Base_SetConfig+0x130>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d103      	bne.n	8007a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	615a      	str	r2, [r3, #20]
}
 8007a46:	bf00      	nop
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40000400 	.word	0x40000400
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	40000c00 	.word	0x40000c00
 8007a64:	40013400 	.word	0x40013400
 8007a68:	40014000 	.word	0x40014000
 8007a6c:	40014400 	.word	0x40014400
 8007a70:	40014800 	.word	0x40014800

08007a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f023 0302 	bic.w	r3, r3, #2
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a2c      	ldr	r2, [pc, #176]	; (8007b80 <TIM_OC1_SetConfig+0x10c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00f      	beq.n	8007af4 <TIM_OC1_SetConfig+0x80>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a2b      	ldr	r2, [pc, #172]	; (8007b84 <TIM_OC1_SetConfig+0x110>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00b      	beq.n	8007af4 <TIM_OC1_SetConfig+0x80>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a2a      	ldr	r2, [pc, #168]	; (8007b88 <TIM_OC1_SetConfig+0x114>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d007      	beq.n	8007af4 <TIM_OC1_SetConfig+0x80>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a29      	ldr	r2, [pc, #164]	; (8007b8c <TIM_OC1_SetConfig+0x118>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC1_SetConfig+0x80>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a28      	ldr	r2, [pc, #160]	; (8007b90 <TIM_OC1_SetConfig+0x11c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10c      	bne.n	8007b0e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0308 	bic.w	r3, r3, #8
 8007afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	f023 0304 	bic.w	r3, r3, #4
 8007b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <TIM_OC1_SetConfig+0x10c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00f      	beq.n	8007b36 <TIM_OC1_SetConfig+0xc2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <TIM_OC1_SetConfig+0x110>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_OC1_SetConfig+0xc2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a19      	ldr	r2, [pc, #100]	; (8007b88 <TIM_OC1_SetConfig+0x114>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d007      	beq.n	8007b36 <TIM_OC1_SetConfig+0xc2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <TIM_OC1_SetConfig+0x118>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_OC1_SetConfig+0xc2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <TIM_OC1_SetConfig+0x11c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d111      	bne.n	8007b5a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800

08007b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f023 0210 	bic.w	r2, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f023 0320 	bic.w	r3, r3, #32
 8007be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a28      	ldr	r2, [pc, #160]	; (8007c94 <TIM_OC2_SetConfig+0x100>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d003      	beq.n	8007c00 <TIM_OC2_SetConfig+0x6c>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a27      	ldr	r2, [pc, #156]	; (8007c98 <TIM_OC2_SetConfig+0x104>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10d      	bne.n	8007c1c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	011b      	lsls	r3, r3, #4
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <TIM_OC2_SetConfig+0x100>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00f      	beq.n	8007c44 <TIM_OC2_SetConfig+0xb0>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <TIM_OC2_SetConfig+0x104>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d00b      	beq.n	8007c44 <TIM_OC2_SetConfig+0xb0>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <TIM_OC2_SetConfig+0x108>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d007      	beq.n	8007c44 <TIM_OC2_SetConfig+0xb0>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a1a      	ldr	r2, [pc, #104]	; (8007ca0 <TIM_OC2_SetConfig+0x10c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d003      	beq.n	8007c44 <TIM_OC2_SetConfig+0xb0>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <TIM_OC2_SetConfig+0x110>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d113      	bne.n	8007c6c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40012c00 	.word	0x40012c00
 8007c98:	40013400 	.word	0x40013400
 8007c9c:	40014000 	.word	0x40014000
 8007ca0:	40014400 	.word	0x40014400
 8007ca4:	40014800 	.word	0x40014800

08007ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a27      	ldr	r2, [pc, #156]	; (8007da4 <TIM_OC3_SetConfig+0xfc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d003      	beq.n	8007d12 <TIM_OC3_SetConfig+0x6a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a26      	ldr	r2, [pc, #152]	; (8007da8 <TIM_OC3_SetConfig+0x100>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d10d      	bne.n	8007d2e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <TIM_OC3_SetConfig+0xfc>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00f      	beq.n	8007d56 <TIM_OC3_SetConfig+0xae>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <TIM_OC3_SetConfig+0x100>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00b      	beq.n	8007d56 <TIM_OC3_SetConfig+0xae>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a1a      	ldr	r2, [pc, #104]	; (8007dac <TIM_OC3_SetConfig+0x104>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d007      	beq.n	8007d56 <TIM_OC3_SetConfig+0xae>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a19      	ldr	r2, [pc, #100]	; (8007db0 <TIM_OC3_SetConfig+0x108>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_OC3_SetConfig+0xae>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a18      	ldr	r2, [pc, #96]	; (8007db4 <TIM_OC3_SetConfig+0x10c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d113      	bne.n	8007d7e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	40012c00 	.word	0x40012c00
 8007da8:	40013400 	.word	0x40013400
 8007dac:	40014000 	.word	0x40014000
 8007db0:	40014400 	.word	0x40014400
 8007db4:	40014800 	.word	0x40014800

08007db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	021b      	lsls	r3, r3, #8
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	031b      	lsls	r3, r3, #12
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <TIM_OC4_SetConfig+0xc0>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00f      	beq.n	8007e3c <TIM_OC4_SetConfig+0x84>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <TIM_OC4_SetConfig+0xc4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <TIM_OC4_SetConfig+0x84>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a16      	ldr	r2, [pc, #88]	; (8007e80 <TIM_OC4_SetConfig+0xc8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <TIM_OC4_SetConfig+0x84>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	; (8007e84 <TIM_OC4_SetConfig+0xcc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_OC4_SetConfig+0x84>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a14      	ldr	r2, [pc, #80]	; (8007e88 <TIM_OC4_SetConfig+0xd0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d109      	bne.n	8007e50 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	019b      	lsls	r3, r3, #6
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40013400 	.word	0x40013400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800

08007e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	041b      	lsls	r3, r3, #16
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <TIM_OC5_SetConfig+0xb4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_OC5_SetConfig+0x7a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <TIM_OC5_SetConfig+0xb8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_OC5_SetConfig+0x7a>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <TIM_OC5_SetConfig+0xbc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_OC5_SetConfig+0x7a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a14      	ldr	r2, [pc, #80]	; (8007f4c <TIM_OC5_SetConfig+0xc0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC5_SetConfig+0x7a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <TIM_OC5_SetConfig+0xc4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d109      	bne.n	8007f1a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	621a      	str	r2, [r3, #32]
}
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40013400 	.word	0x40013400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800

08007f54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	051b      	lsls	r3, r3, #20
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a18      	ldr	r2, [pc, #96]	; (800800c <TIM_OC6_SetConfig+0xb8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00f      	beq.n	8007fd0 <TIM_OC6_SetConfig+0x7c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a17      	ldr	r2, [pc, #92]	; (8008010 <TIM_OC6_SetConfig+0xbc>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00b      	beq.n	8007fd0 <TIM_OC6_SetConfig+0x7c>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a16      	ldr	r2, [pc, #88]	; (8008014 <TIM_OC6_SetConfig+0xc0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d007      	beq.n	8007fd0 <TIM_OC6_SetConfig+0x7c>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a15      	ldr	r2, [pc, #84]	; (8008018 <TIM_OC6_SetConfig+0xc4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_OC6_SetConfig+0x7c>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a14      	ldr	r2, [pc, #80]	; (800801c <TIM_OC6_SetConfig+0xc8>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d109      	bne.n	8007fe4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	029b      	lsls	r3, r3, #10
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	621a      	str	r2, [r3, #32]
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40012c00 	.word	0x40012c00
 8008010:	40013400 	.word	0x40013400
 8008014:	40014000 	.word	0x40014000
 8008018:	40014400 	.word	0x40014400
 800801c:	40014800 	.word	0x40014800

08008020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	f003 031f 	and.w	r3, r3, #31
 8008032:	2201      	movs	r2, #1
 8008034:	fa02 f303 	lsl.w	r3, r2, r3
 8008038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a1a      	ldr	r2, [r3, #32]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	43db      	mvns	r3, r3
 8008042:	401a      	ands	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	fa01 f303 	lsl.w	r3, r1, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
	...

0800806c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008080:	2302      	movs	r3, #2
 8008082:	e068      	b.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2e      	ldr	r2, [pc, #184]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2d      	ldr	r2, [pc, #180]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d108      	bne.n	80080ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d01d      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d018      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1b      	ldr	r2, [pc, #108]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d013      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a1a      	ldr	r2, [pc, #104]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00e      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a18      	ldr	r2, [pc, #96]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d009      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a13      	ldr	r2, [pc, #76]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d004      	beq.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d10c      	bne.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4313      	orrs	r3, r2
 800813a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40013400 	.word	0x40013400
 800816c:	40000400 	.word	0x40000400
 8008170:	40000800 	.word	0x40000800
 8008174:	40000c00 	.word	0x40000c00
 8008178:	40014000 	.word	0x40014000

0800817c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e040      	b.n	800824c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fa fff4 	bl	80031c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2224      	movs	r2, #36	; 0x24
 80081e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc94 	bl	8008b24 <UART_SetConfig>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e022      	b.n	800824c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 ff40 	bl	8009094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 ffc7 	bl	80091d8 <UART_CheckIdleState>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08a      	sub	sp, #40	; 0x28
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	4613      	mov	r3, r2
 8008262:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008268:	2b20      	cmp	r3, #32
 800826a:	f040 8082 	bne.w	8008372 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <HAL_UART_Transmit+0x26>
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e07a      	b.n	8008374 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_UART_Transmit+0x38>
 8008288:	2302      	movs	r3, #2
 800828a:	e073      	b.n	8008374 <HAL_UART_Transmit+0x120>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2221      	movs	r2, #33	; 0x21
 80082a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a2:	f7fb f995 	bl	80035d0 <HAL_GetTick>
 80082a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	88fa      	ldrh	r2, [r7, #6]
 80082ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c0:	d108      	bne.n	80082d4 <HAL_UART_Transmit+0x80>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80082ca:	2300      	movs	r3, #0
 80082cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	e003      	b.n	80082dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80082e4:	e02d      	b.n	8008342 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2200      	movs	r2, #0
 80082ee:	2180      	movs	r1, #128	; 0x80
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 ffba 	bl	800926a <UART_WaitOnFlagUntilTimeout>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e039      	b.n	8008374 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008312:	b292      	uxth	r2, r2
 8008314:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	3302      	adds	r3, #2
 800831a:	61bb      	str	r3, [r7, #24]
 800831c:	e008      	b.n	8008330 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	781a      	ldrb	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	b292      	uxth	r2, r2
 8008328:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3301      	adds	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008336:	b29b      	uxth	r3, r3
 8008338:	3b01      	subs	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1cb      	bne.n	80082e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2200      	movs	r2, #0
 8008356:	2140      	movs	r1, #64	; 0x40
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 ff86 	bl	800926a <UART_WaitOnFlagUntilTimeout>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e005      	b.n	8008374 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2220      	movs	r2, #32
 800836c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008390:	2b20      	cmp	r3, #32
 8008392:	f040 80bf 	bne.w	8008514 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <HAL_UART_Receive+0x26>
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e0b7      	b.n	8008516 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_UART_Receive+0x38>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e0b0      	b.n	8008516 <HAL_UART_Receive+0x19a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2222      	movs	r2, #34	; 0x22
 80083c8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083d0:	f7fb f8fe 	bl	80035d0 <HAL_GetTick>
 80083d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	88fa      	ldrh	r2, [r7, #6]
 80083da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	88fa      	ldrh	r2, [r7, #6]
 80083e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ee:	d10e      	bne.n	800840e <HAL_UART_Receive+0x92>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <HAL_UART_Receive+0x88>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008402:	e02d      	b.n	8008460 <HAL_UART_Receive+0xe4>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	22ff      	movs	r2, #255	; 0xff
 8008408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800840c:	e028      	b.n	8008460 <HAL_UART_Receive+0xe4>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10d      	bne.n	8008432 <HAL_UART_Receive+0xb6>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <HAL_UART_Receive+0xac>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	22ff      	movs	r2, #255	; 0xff
 8008422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008426:	e01b      	b.n	8008460 <HAL_UART_Receive+0xe4>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	227f      	movs	r2, #127	; 0x7f
 800842c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008430:	e016      	b.n	8008460 <HAL_UART_Receive+0xe4>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800843a:	d10d      	bne.n	8008458 <HAL_UART_Receive+0xdc>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <HAL_UART_Receive+0xd2>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	227f      	movs	r2, #127	; 0x7f
 8008448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800844c:	e008      	b.n	8008460 <HAL_UART_Receive+0xe4>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	223f      	movs	r2, #63	; 0x3f
 8008452:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008456:	e003      	b.n	8008460 <HAL_UART_Receive+0xe4>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008466:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008470:	d108      	bne.n	8008484 <HAL_UART_Receive+0x108>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	e003      	b.n	800848c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008494:	e033      	b.n	80084fe <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	2120      	movs	r1, #32
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 fee2 	bl	800926a <UART_WaitOnFlagUntilTimeout>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e032      	b.n	8008516 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10c      	bne.n	80084d0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084bc:	b29a      	uxth	r2, r3
 80084be:	8a7b      	ldrh	r3, [r7, #18]
 80084c0:	4013      	ands	r3, r2
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	3302      	adds	r3, #2
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	e00d      	b.n	80084ec <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	8a7b      	ldrh	r3, [r7, #18]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4013      	ands	r3, r2
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	3301      	adds	r3, #1
 80084ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1c5      	bne.n	8008496 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b0ba      	sub	sp, #232	; 0xe8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800854a:	f640 030f 	movw	r3, #2063	; 0x80f
 800854e:	4013      	ands	r3, r2
 8008550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d115      	bne.n	8008588 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00f      	beq.n	8008588 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d009      	beq.n	8008588 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 82a6 	beq.w	8008aca <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
      }
      return;
 8008586:	e2a0      	b.n	8008aca <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8117 	beq.w	80087c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800859e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085a2:	4b85      	ldr	r3, [pc, #532]	; (80087b8 <HAL_UART_IRQHandler+0x298>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 810a 	beq.w	80087c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d011      	beq.n	80085dc <HAL_UART_IRQHandler+0xbc>
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2201      	movs	r2, #1
 80085ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d2:	f043 0201 	orr.w	r2, r3, #1
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d011      	beq.n	800860c <HAL_UART_IRQHandler+0xec>
 80085e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2202      	movs	r2, #2
 80085fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008602:	f043 0204 	orr.w	r2, r3, #4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d011      	beq.n	800863c <HAL_UART_IRQHandler+0x11c>
 8008618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2204      	movs	r2, #4
 800862a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008632:	f043 0202 	orr.w	r2, r3, #2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800863c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008640:	f003 0308 	and.w	r3, r3, #8
 8008644:	2b00      	cmp	r3, #0
 8008646:	d017      	beq.n	8008678 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b00      	cmp	r3, #0
 8008652:	d105      	bne.n	8008660 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2208      	movs	r2, #8
 8008666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800866e:	f043 0208 	orr.w	r2, r3, #8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008680:	2b00      	cmp	r3, #0
 8008682:	d012      	beq.n	80086aa <HAL_UART_IRQHandler+0x18a>
 8008684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00c      	beq.n	80086aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a0:	f043 0220 	orr.w	r2, r3, #32
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 820c 	beq.w	8008ace <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	d005      	beq.n	8008702 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d04f      	beq.n	80087a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fe75 	bl	80093f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008712:	2b40      	cmp	r3, #64	; 0x40
 8008714:	d141      	bne.n	800879a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800872c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3308      	adds	r3, #8
 800873e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800874e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800875a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1d9      	bne.n	8008716 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	2b00      	cmp	r3, #0
 8008768:	d013      	beq.n	8008792 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876e:	4a13      	ldr	r2, [pc, #76]	; (80087bc <HAL_UART_IRQHandler+0x29c>)
 8008770:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	4618      	mov	r0, r3
 8008778:	f7fb f8db 	bl	8003932 <HAL_DMA_Abort_IT>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d017      	beq.n	80087b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e00f      	b.n	80087b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9b0 	bl	8008af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	e00b      	b.n	80087b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9ac 	bl	8008af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	e007      	b.n	80087b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f9a8 	bl	8008af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80087b0:	e18d      	b.n	8008ace <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b2:	bf00      	nop
    return;
 80087b4:	e18b      	b.n	8008ace <HAL_UART_IRQHandler+0x5ae>
 80087b6:	bf00      	nop
 80087b8:	04000120 	.word	0x04000120
 80087bc:	080094b9 	.word	0x080094b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	f040 8146 	bne.w	8008a56 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ce:	f003 0310 	and.w	r3, r3, #16
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 813f 	beq.w	8008a56 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087dc:	f003 0310 	and.w	r3, r3, #16
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8138 	beq.w	8008a56 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2210      	movs	r2, #16
 80087ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	2b40      	cmp	r3, #64	; 0x40
 80087fa:	f040 80b4 	bne.w	8008966 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800880a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 815f 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800881a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800881e:	429a      	cmp	r2, r3
 8008820:	f080 8157 	bcs.w	8008ad2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800882a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 8085 	bne.w	800894a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800885c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800886a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800886e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008876:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800887a:	e841 2300 	strex	r3, r2, [r1]
 800887e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1da      	bne.n	8008840 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800889a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800889c:	f023 0301 	bic.w	r3, r3, #1
 80088a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3308      	adds	r3, #8
 80088aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e1      	bne.n	800888a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80088ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e3      	bne.n	80088c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008912:	e853 3f00 	ldrex	r3, [r3]
 8008916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891a:	f023 0310 	bic.w	r3, r3, #16
 800891e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800892c:	65bb      	str	r3, [r7, #88]	; 0x58
 800892e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800893a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e4      	bne.n	800890a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008944:	4618      	mov	r0, r3
 8008946:	f7fa ffb6 	bl	80038b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008956:	b29b      	uxth	r3, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	b29b      	uxth	r3, r3
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8d4 	bl	8008b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008964:	e0b5      	b.n	8008ad2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008972:	b29b      	uxth	r3, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80a7 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80a2 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	461a      	mov	r2, r3
 80089b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089b4:	647b      	str	r3, [r7, #68]	; 0x44
 80089b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e4      	bne.n	8008992 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	623b      	str	r3, [r7, #32]
   return(result);
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80089ec:	633a      	str	r2, [r7, #48]	; 0x30
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e3      	bne.n	80089c8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2220      	movs	r2, #32
 8008a04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0310 	bic.w	r3, r3, #16
 8008a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	69b9      	ldr	r1, [r7, #24]
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	617b      	str	r3, [r7, #20]
   return(result);
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e4      	bne.n	8008a12 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f85c 	bl	8008b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a54:	e03f      	b.n	8008ad6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00e      	beq.n	8008a80 <HAL_UART_IRQHandler+0x560>
 8008a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d008      	beq.n	8008a80 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fd5d 	bl	8009538 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a7e:	e02d      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00e      	beq.n	8008aaa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d01c      	beq.n	8008ada <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
    }
    return;
 8008aa8:	e017      	b.n	8008ada <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d012      	beq.n	8008adc <HAL_UART_IRQHandler+0x5bc>
 8008ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00c      	beq.n	8008adc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fd0e 	bl	80094e4 <UART_EndTransmit_IT>
    return;
 8008ac8:	e008      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008aca:	bf00      	nop
 8008acc:	e006      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
    return;
 8008ace:	bf00      	nop
 8008ad0:	e004      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ad2:	bf00      	nop
 8008ad4:	e002      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
      return;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <HAL_UART_IRQHandler+0x5bc>
    return;
 8008ada:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008adc:	37e8      	adds	r7, #232	; 0xe8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop

08008ae4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b28:	b08a      	sub	sp, #40	; 0x28
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4ba4      	ldr	r3, [pc, #656]	; (8008de4 <UART_SetConfig+0x2c0>)
 8008b54:	4013      	ands	r3, r2
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a99      	ldr	r2, [pc, #612]	; (8008de8 <UART_SetConfig+0x2c4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d004      	beq.n	8008b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a90      	ldr	r2, [pc, #576]	; (8008dec <UART_SetConfig+0x2c8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d126      	bne.n	8008bfc <UART_SetConfig+0xd8>
 8008bae:	4b90      	ldr	r3, [pc, #576]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d81b      	bhi.n	8008bf4 <UART_SetConfig+0xd0>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <UART_SetConfig+0xa0>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008bd5 	.word	0x08008bd5
 8008bc8:	08008be5 	.word	0x08008be5
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008bed 	.word	0x08008bed
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bda:	e116      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be2:	e112      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008be4:	2304      	movs	r3, #4
 8008be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bea:	e10e      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008bec:	2308      	movs	r3, #8
 8008bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf2:	e10a      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008bf4:	2310      	movs	r3, #16
 8008bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bfa:	e106      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a7c      	ldr	r2, [pc, #496]	; (8008df4 <UART_SetConfig+0x2d0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d138      	bne.n	8008c78 <UART_SetConfig+0x154>
 8008c06:	4b7a      	ldr	r3, [pc, #488]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0c:	f003 030c 	and.w	r3, r3, #12
 8008c10:	2b0c      	cmp	r3, #12
 8008c12:	d82d      	bhi.n	8008c70 <UART_SetConfig+0x14c>
 8008c14:	a201      	add	r2, pc, #4	; (adr r2, 8008c1c <UART_SetConfig+0xf8>)
 8008c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1a:	bf00      	nop
 8008c1c:	08008c51 	.word	0x08008c51
 8008c20:	08008c71 	.word	0x08008c71
 8008c24:	08008c71 	.word	0x08008c71
 8008c28:	08008c71 	.word	0x08008c71
 8008c2c:	08008c61 	.word	0x08008c61
 8008c30:	08008c71 	.word	0x08008c71
 8008c34:	08008c71 	.word	0x08008c71
 8008c38:	08008c71 	.word	0x08008c71
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c71 	.word	0x08008c71
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	08008c69 	.word	0x08008c69
 8008c50:	2300      	movs	r3, #0
 8008c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c56:	e0d8      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5e:	e0d4      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c66:	e0d0      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6e:	e0cc      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c76:	e0c8      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a5e      	ldr	r2, [pc, #376]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d125      	bne.n	8008cce <UART_SetConfig+0x1aa>
 8008c82:	4b5b      	ldr	r3, [pc, #364]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008c8c:	2b30      	cmp	r3, #48	; 0x30
 8008c8e:	d016      	beq.n	8008cbe <UART_SetConfig+0x19a>
 8008c90:	2b30      	cmp	r3, #48	; 0x30
 8008c92:	d818      	bhi.n	8008cc6 <UART_SetConfig+0x1a2>
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d00a      	beq.n	8008cae <UART_SetConfig+0x18a>
 8008c98:	2b20      	cmp	r3, #32
 8008c9a:	d814      	bhi.n	8008cc6 <UART_SetConfig+0x1a2>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <UART_SetConfig+0x182>
 8008ca0:	2b10      	cmp	r3, #16
 8008ca2:	d008      	beq.n	8008cb6 <UART_SetConfig+0x192>
 8008ca4:	e00f      	b.n	8008cc6 <UART_SetConfig+0x1a2>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cac:	e0ad      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cb4:	e0a9      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008cb6:	2304      	movs	r3, #4
 8008cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cbc:	e0a5      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cc4:	e0a1      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008cc6:	2310      	movs	r3, #16
 8008cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ccc:	e09d      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a4a      	ldr	r2, [pc, #296]	; (8008dfc <UART_SetConfig+0x2d8>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d125      	bne.n	8008d24 <UART_SetConfig+0x200>
 8008cd8:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8008ce4:	d016      	beq.n	8008d14 <UART_SetConfig+0x1f0>
 8008ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ce8:	d818      	bhi.n	8008d1c <UART_SetConfig+0x1f8>
 8008cea:	2b80      	cmp	r3, #128	; 0x80
 8008cec:	d00a      	beq.n	8008d04 <UART_SetConfig+0x1e0>
 8008cee:	2b80      	cmp	r3, #128	; 0x80
 8008cf0:	d814      	bhi.n	8008d1c <UART_SetConfig+0x1f8>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <UART_SetConfig+0x1d8>
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d008      	beq.n	8008d0c <UART_SetConfig+0x1e8>
 8008cfa:	e00f      	b.n	8008d1c <UART_SetConfig+0x1f8>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d02:	e082      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d0a:	e07e      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d12:	e07a      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d1a:	e076      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d22:	e072      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a35      	ldr	r2, [pc, #212]	; (8008e00 <UART_SetConfig+0x2dc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d12a      	bne.n	8008d84 <UART_SetConfig+0x260>
 8008d2e:	4b30      	ldr	r3, [pc, #192]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d3c:	d01a      	beq.n	8008d74 <UART_SetConfig+0x250>
 8008d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d42:	d81b      	bhi.n	8008d7c <UART_SetConfig+0x258>
 8008d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d48:	d00c      	beq.n	8008d64 <UART_SetConfig+0x240>
 8008d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4e:	d815      	bhi.n	8008d7c <UART_SetConfig+0x258>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <UART_SetConfig+0x238>
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d58:	d008      	beq.n	8008d6c <UART_SetConfig+0x248>
 8008d5a:	e00f      	b.n	8008d7c <UART_SetConfig+0x258>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d62:	e052      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d64:	2302      	movs	r3, #2
 8008d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d6a:	e04e      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d6c:	2304      	movs	r3, #4
 8008d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d72:	e04a      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d74:	2308      	movs	r3, #8
 8008d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7a:	e046      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d82:	e042      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <UART_SetConfig+0x2c4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d13a      	bne.n	8008e04 <UART_SetConfig+0x2e0>
 8008d8e:	4b18      	ldr	r3, [pc, #96]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d9c:	d01a      	beq.n	8008dd4 <UART_SetConfig+0x2b0>
 8008d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da2:	d81b      	bhi.n	8008ddc <UART_SetConfig+0x2b8>
 8008da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da8:	d00c      	beq.n	8008dc4 <UART_SetConfig+0x2a0>
 8008daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dae:	d815      	bhi.n	8008ddc <UART_SetConfig+0x2b8>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <UART_SetConfig+0x298>
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db8:	d008      	beq.n	8008dcc <UART_SetConfig+0x2a8>
 8008dba:	e00f      	b.n	8008ddc <UART_SetConfig+0x2b8>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dc2:	e022      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dca:	e01e      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd2:	e01a      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dda:	e016      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de2:	e012      	b.n	8008e0a <UART_SetConfig+0x2e6>
 8008de4:	efff69f3 	.word	0xefff69f3
 8008de8:	40008000 	.word	0x40008000
 8008dec:	40013800 	.word	0x40013800
 8008df0:	40021000 	.word	0x40021000
 8008df4:	40004400 	.word	0x40004400
 8008df8:	40004800 	.word	0x40004800
 8008dfc:	40004c00 	.word	0x40004c00
 8008e00:	40005000 	.word	0x40005000
 8008e04:	2310      	movs	r3, #16
 8008e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a9f      	ldr	r2, [pc, #636]	; (800908c <UART_SetConfig+0x568>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d17a      	bne.n	8008f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d824      	bhi.n	8008e66 <UART_SetConfig+0x342>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <UART_SetConfig+0x300>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e49 	.word	0x08008e49
 8008e28:	08008e67 	.word	0x08008e67
 8008e2c:	08008e51 	.word	0x08008e51
 8008e30:	08008e67 	.word	0x08008e67
 8008e34:	08008e57 	.word	0x08008e57
 8008e38:	08008e67 	.word	0x08008e67
 8008e3c:	08008e67 	.word	0x08008e67
 8008e40:	08008e67 	.word	0x08008e67
 8008e44:	08008e5f 	.word	0x08008e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e48:	f7fc fd9c 	bl	8005984 <HAL_RCC_GetPCLK1Freq>
 8008e4c:	61f8      	str	r0, [r7, #28]
        break;
 8008e4e:	e010      	b.n	8008e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e50:	4b8f      	ldr	r3, [pc, #572]	; (8009090 <UART_SetConfig+0x56c>)
 8008e52:	61fb      	str	r3, [r7, #28]
        break;
 8008e54:	e00d      	b.n	8008e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e56:	f7fc fcfd 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8008e5a:	61f8      	str	r0, [r7, #28]
        break;
 8008e5c:	e009      	b.n	8008e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e62:	61fb      	str	r3, [r7, #28]
        break;
 8008e64:	e005      	b.n	8008e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80fb 	beq.w	8009070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d305      	bcc.n	8008e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d903      	bls.n	8008e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e9c:	e0e8      	b.n	8009070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	461c      	mov	r4, r3
 8008ea4:	4615      	mov	r5, r2
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	022b      	lsls	r3, r5, #8
 8008eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008eb4:	0222      	lsls	r2, r4, #8
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	6849      	ldr	r1, [r1, #4]
 8008eba:	0849      	lsrs	r1, r1, #1
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	4688      	mov	r8, r1
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8008ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	603b      	str	r3, [r7, #0]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	f7f7 fe74 	bl	8000bc8 <__aeabi_uldivmod>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eee:	d308      	bcc.n	8008f02 <UART_SetConfig+0x3de>
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ef6:	d204      	bcs.n	8008f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	60da      	str	r2, [r3, #12]
 8008f00:	e0b6      	b.n	8009070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f08:	e0b2      	b.n	8009070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f12:	d15e      	bne.n	8008fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d828      	bhi.n	8008f6e <UART_SetConfig+0x44a>
 8008f1c:	a201      	add	r2, pc, #4	; (adr r2, 8008f24 <UART_SetConfig+0x400>)
 8008f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f22:	bf00      	nop
 8008f24:	08008f49 	.word	0x08008f49
 8008f28:	08008f51 	.word	0x08008f51
 8008f2c:	08008f59 	.word	0x08008f59
 8008f30:	08008f6f 	.word	0x08008f6f
 8008f34:	08008f5f 	.word	0x08008f5f
 8008f38:	08008f6f 	.word	0x08008f6f
 8008f3c:	08008f6f 	.word	0x08008f6f
 8008f40:	08008f6f 	.word	0x08008f6f
 8008f44:	08008f67 	.word	0x08008f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f48:	f7fc fd1c 	bl	8005984 <HAL_RCC_GetPCLK1Freq>
 8008f4c:	61f8      	str	r0, [r7, #28]
        break;
 8008f4e:	e014      	b.n	8008f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f50:	f7fc fd2e 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 8008f54:	61f8      	str	r0, [r7, #28]
        break;
 8008f56:	e010      	b.n	8008f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f58:	4b4d      	ldr	r3, [pc, #308]	; (8009090 <UART_SetConfig+0x56c>)
 8008f5a:	61fb      	str	r3, [r7, #28]
        break;
 8008f5c:	e00d      	b.n	8008f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5e:	f7fc fc79 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8008f62:	61f8      	str	r0, [r7, #28]
        break;
 8008f64:	e009      	b.n	8008f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f6a:	61fb      	str	r3, [r7, #28]
        break;
 8008f6c:	e005      	b.n	8008f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d077      	beq.n	8009070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	005a      	lsls	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	085b      	lsrs	r3, r3, #1
 8008f8a:	441a      	add	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d916      	bls.n	8008fca <UART_SetConfig+0x4a6>
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa2:	d212      	bcs.n	8008fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	f023 030f 	bic.w	r3, r3, #15
 8008fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	085b      	lsrs	r3, r3, #1
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	8afb      	ldrh	r3, [r7, #22]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	8afa      	ldrh	r2, [r7, #22]
 8008fc6:	60da      	str	r2, [r3, #12]
 8008fc8:	e052      	b.n	8009070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008fd0:	e04e      	b.n	8009070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d827      	bhi.n	800902a <UART_SetConfig+0x506>
 8008fda:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <UART_SetConfig+0x4bc>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	0800900d 	.word	0x0800900d
 8008fe8:	08009015 	.word	0x08009015
 8008fec:	0800902b 	.word	0x0800902b
 8008ff0:	0800901b 	.word	0x0800901b
 8008ff4:	0800902b 	.word	0x0800902b
 8008ff8:	0800902b 	.word	0x0800902b
 8008ffc:	0800902b 	.word	0x0800902b
 8009000:	08009023 	.word	0x08009023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009004:	f7fc fcbe 	bl	8005984 <HAL_RCC_GetPCLK1Freq>
 8009008:	61f8      	str	r0, [r7, #28]
        break;
 800900a:	e014      	b.n	8009036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800900c:	f7fc fcd0 	bl	80059b0 <HAL_RCC_GetPCLK2Freq>
 8009010:	61f8      	str	r0, [r7, #28]
        break;
 8009012:	e010      	b.n	8009036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009014:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <UART_SetConfig+0x56c>)
 8009016:	61fb      	str	r3, [r7, #28]
        break;
 8009018:	e00d      	b.n	8009036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800901a:	f7fc fc1b 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 800901e:	61f8      	str	r0, [r7, #28]
        break;
 8009020:	e009      	b.n	8009036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009026:	61fb      	str	r3, [r7, #28]
        break;
 8009028:	e005      	b.n	8009036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009034:	bf00      	nop
    }

    if (pclk != 0U)
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d019      	beq.n	8009070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	085a      	lsrs	r2, r3, #1
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b0f      	cmp	r3, #15
 8009054:	d909      	bls.n	800906a <UART_SetConfig+0x546>
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d205      	bcs.n	800906a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	e002      	b.n	8009070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800907c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009080:	4618      	mov	r0, r3
 8009082:	3728      	adds	r7, #40	; 0x28
 8009084:	46bd      	mov	sp, r7
 8009086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800908a:	bf00      	nop
 800908c:	40008000 	.word	0x40008000
 8009090:	00f42400 	.word	0x00f42400

08009094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01a      	beq.n	80091aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009192:	d10a      	bne.n	80091aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af02      	add	r7, sp, #8
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091e8:	f7fa f9f2 	bl	80035d0 <HAL_GetTick>
 80091ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d10e      	bne.n	800921a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f82d 	bl	800926a <UART_WaitOnFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e023      	b.n	8009262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b04      	cmp	r3, #4
 8009226:	d10e      	bne.n	8009246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f817 	bl	800926a <UART_WaitOnFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e00d      	b.n	8009262 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2220      	movs	r2, #32
 800924a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b09c      	sub	sp, #112	; 0x70
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	603b      	str	r3, [r7, #0]
 8009276:	4613      	mov	r3, r2
 8009278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800927a:	e0a5      	b.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800927e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009282:	f000 80a1 	beq.w	80093c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009286:	f7fa f9a3 	bl	80035d0 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009292:	429a      	cmp	r2, r3
 8009294:	d302      	bcc.n	800929c <UART_WaitOnFlagUntilTimeout+0x32>
 8009296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009298:	2b00      	cmp	r3, #0
 800929a:	d13e      	bne.n	800931a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092b0:	667b      	str	r3, [r7, #100]	; 0x64
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e6      	bne.n	800929c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	663b      	str	r3, [r7, #96]	; 0x60
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80092f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2220      	movs	r2, #32
 800930c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e067      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0304 	and.w	r3, r3, #4
 8009324:	2b00      	cmp	r3, #0
 8009326:	d04f      	beq.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009336:	d147      	bne.n	80093c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009340:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	e853 3f00 	ldrex	r3, [r3]
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
 8009362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009368:	e841 2300 	strex	r3, r2, [r1]
 800936c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e6      	bne.n	8009342 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	e853 3f00 	ldrex	r3, [r3]
 8009382:	613b      	str	r3, [r7, #16]
   return(result);
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f023 0301 	bic.w	r3, r3, #1
 800938a:	66bb      	str	r3, [r7, #104]	; 0x68
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009394:	623a      	str	r2, [r7, #32]
 8009396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	69f9      	ldr	r1, [r7, #28]
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e5      	bne.n	8009374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2220      	movs	r2, #32
 80093ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2220      	movs	r2, #32
 80093b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e010      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	69da      	ldr	r2, [r3, #28]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	4013      	ands	r3, r2
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	bf0c      	ite	eq
 80093d8:	2301      	moveq	r3, #1
 80093da:	2300      	movne	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	461a      	mov	r2, r3
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	f43f af4a 	beq.w	800927c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3770      	adds	r7, #112	; 0x70
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b095      	sub	sp, #84	; 0x54
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800940e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009418:	643b      	str	r3, [r7, #64]	; 0x40
 800941a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800941e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	61fb      	str	r3, [r7, #28]
   return(result);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	f023 0301 	bic.w	r3, r3, #1
 8009442:	64bb      	str	r3, [r7, #72]	; 0x48
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3308      	adds	r3, #8
 800944a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800944c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800944e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e5      	bne.n	800942c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009464:	2b01      	cmp	r3, #1
 8009466:	d118      	bne.n	800949a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60bb      	str	r3, [r7, #8]
   return(result);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0310 	bic.w	r3, r3, #16
 800947c:	647b      	str	r3, [r7, #68]	; 0x44
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	461a      	mov	r2, r3
 8009484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009486:	61bb      	str	r3, [r7, #24]
 8009488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6979      	ldr	r1, [r7, #20]
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	613b      	str	r3, [r7, #16]
   return(result);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e6      	bne.n	8009468 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80094ac:	bf00      	nop
 80094ae:	3754      	adds	r7, #84	; 0x54
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f7ff fb0e 	bl	8008af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094dc:	bf00      	nop
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	61bb      	str	r3, [r7, #24]
 800950c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	613b      	str	r3, [r7, #16]
   return(result);
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff fada 	bl	8008ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009530:	bf00      	nop
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009550:	4904      	ldr	r1, [pc, #16]	; (8009564 <MX_FATFS_Init+0x18>)
 8009552:	4805      	ldr	r0, [pc, #20]	; (8009568 <MX_FATFS_Init+0x1c>)
 8009554:	f002 fef6 	bl	800c344 <FATFS_LinkDriver>
 8009558:	4603      	mov	r3, r0
 800955a:	461a      	mov	r2, r3
 800955c:	4b03      	ldr	r3, [pc, #12]	; (800956c <MX_FATFS_Init+0x20>)
 800955e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009560:	bf00      	nop
 8009562:	bd80      	pop	{r7, pc}
 8009564:	20000bc0 	.word	0x20000bc0
 8009568:	20000034 	.word	0x20000034
 800956c:	20000bbc 	.word	0x20000bbc

08009570 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009574:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009576:	4618      	mov	r0, r3
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED THIS LINE
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f9d9 	bl	8009944 <USER_SPI_initialize>
 8009592:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADDED THIS LINE
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fab7 	bl	8009b1c <USER_SPI_status>
 80095ae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADDED THIS LINE
 80095c8:	7bf8      	ldrb	r0, [r7, #15]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	f000 faba 	bl	8009b48 <USER_SPI_read>
 80095d4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADDED THIS LINE
 80095ee:	7bf8      	ldrb	r0, [r7, #15]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	f000 fb0d 	bl	8009c14 <USER_SPI_write>
 80095fa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	4603      	mov	r3, r0
 800960c:	603a      	str	r2, [r7, #0]
 800960e:	71fb      	strb	r3, [r7, #7]
 8009610:	460b      	mov	r3, r1
 8009612:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADDED THIS LINE
 8009614:	79b9      	ldrb	r1, [r7, #6]
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fb76 	bl	8009d0c <USER_SPI_ioctl>
 8009620:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009634:	f7f9 ffcc 	bl	80035d0 <HAL_GetTick>
 8009638:	4603      	mov	r3, r0
 800963a:	4a04      	ldr	r2, [pc, #16]	; (800964c <SPI_Timer_On+0x20>)
 800963c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800963e:	4a04      	ldr	r2, [pc, #16]	; (8009650 <SPI_Timer_On+0x24>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6013      	str	r3, [r2, #0]
}
 8009644:	bf00      	nop
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	20000bc8 	.word	0x20000bc8
 8009650:	20000bcc 	.word	0x20000bcc

08009654 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009654:	b580      	push	{r7, lr}
 8009656:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009658:	f7f9 ffba 	bl	80035d0 <HAL_GetTick>
 800965c:	4602      	mov	r2, r0
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <SPI_Timer_Status+0x24>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	1ad2      	subs	r2, r2, r3
 8009664:	4b05      	ldr	r3, [pc, #20]	; (800967c <SPI_Timer_Status+0x28>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	429a      	cmp	r2, r3
 800966a:	bf34      	ite	cc
 800966c:	2301      	movcc	r3, #1
 800966e:	2300      	movcs	r3, #0
 8009670:	b2db      	uxtb	r3, r3
}
 8009672:	4618      	mov	r0, r3
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000bc8 	.word	0x20000bc8
 800967c:	20000bcc 	.word	0x20000bcc

08009680 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af02      	add	r7, sp, #8
 8009686:	4603      	mov	r3, r0
 8009688:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800968a:	f107 020f 	add.w	r2, r7, #15
 800968e:	1df9      	adds	r1, r7, #7
 8009690:	2332      	movs	r3, #50	; 0x32
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2301      	movs	r3, #1
 8009696:	4804      	ldr	r0, [pc, #16]	; (80096a8 <xchg_spi+0x28>)
 8009698:	f7fc ff5f 	bl	800655a <HAL_SPI_TransmitReceive>
    return rxDat;
 800969c:	7bfb      	ldrb	r3, [r7, #15]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200009d0 	.word	0x200009d0

080096ac <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80096ac:	b590      	push	{r4, r7, lr}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	e00a      	b.n	80096d2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	18d4      	adds	r4, r2, r3
 80096c2:	20ff      	movs	r0, #255	; 0xff
 80096c4:	f7ff ffdc 	bl	8009680 <xchg_spi>
 80096c8:	4603      	mov	r3, r0
 80096ca:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d3f0      	bcc.n	80096bc <rcvr_spi_multi+0x10>
	}
}
 80096da:	bf00      	nop
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd90      	pop	{r4, r7, pc}

080096e4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e009      	b.n	8009708 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4413      	add	r3, r2
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff ffbf 	bl	8009680 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3301      	adds	r3, #1
 8009706:	60fb      	str	r3, [r7, #12]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	d3f1      	bcc.n	80096f4 <xmit_spi_multi+0x10>
	}
}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b086      	sub	sp, #24
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009722:	f7f9 ff55 	bl	80035d0 <HAL_GetTick>
 8009726:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800972c:	20ff      	movs	r0, #255	; 0xff
 800972e:	f7ff ffa7 	bl	8009680 <xchg_spi>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	2bff      	cmp	r3, #255	; 0xff
 800973a:	d007      	beq.n	800974c <wait_ready+0x32>
 800973c:	f7f9 ff48 	bl	80035d0 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	693a      	ldr	r2, [r7, #16]
 8009748:	429a      	cmp	r2, r3
 800974a:	d8ef      	bhi.n	800972c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	2bff      	cmp	r3, #255	; 0xff
 8009750:	bf0c      	ite	eq
 8009752:	2301      	moveq	r3, #1
 8009754:	2300      	movne	r3, #0
 8009756:	b2db      	uxtb	r3, r3
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009764:	2201      	movs	r2, #1
 8009766:	2140      	movs	r1, #64	; 0x40
 8009768:	4803      	ldr	r0, [pc, #12]	; (8009778 <despiselect+0x18>)
 800976a:	f7fa fe55 	bl	8004418 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800976e:	20ff      	movs	r0, #255	; 0xff
 8009770:	f7ff ff86 	bl	8009680 <xchg_spi>

}
 8009774:	bf00      	nop
 8009776:	bd80      	pop	{r7, pc}
 8009778:	48000400 	.word	0x48000400

0800977c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009780:	2200      	movs	r2, #0
 8009782:	2140      	movs	r1, #64	; 0x40
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <spiselect+0x30>)
 8009786:	f7fa fe47 	bl	8004418 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800978a:	20ff      	movs	r0, #255	; 0xff
 800978c:	f7ff ff78 	bl	8009680 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009794:	f7ff ffc1 	bl	800971a <wait_ready>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <spiselect+0x26>
 800979e:	2301      	movs	r3, #1
 80097a0:	e002      	b.n	80097a8 <spiselect+0x2c>

	despiselect();
 80097a2:	f7ff ffdd 	bl	8009760 <despiselect>
	return 0;	/* Timeout */
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	48000400 	.word	0x48000400

080097b0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80097ba:	20c8      	movs	r0, #200	; 0xc8
 80097bc:	f7ff ff36 	bl	800962c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80097c0:	20ff      	movs	r0, #255	; 0xff
 80097c2:	f7ff ff5d 	bl	8009680 <xchg_spi>
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	2bff      	cmp	r3, #255	; 0xff
 80097ce:	d104      	bne.n	80097da <rcvr_datablock+0x2a>
 80097d0:	f7ff ff40 	bl	8009654 <SPI_Timer_Status>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f2      	bne.n	80097c0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	2bfe      	cmp	r3, #254	; 0xfe
 80097de:	d001      	beq.n	80097e4 <rcvr_datablock+0x34>
 80097e0:	2300      	movs	r3, #0
 80097e2:	e00a      	b.n	80097fa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7ff ff60 	bl	80096ac <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80097ec:	20ff      	movs	r0, #255	; 0xff
 80097ee:	f7ff ff47 	bl	8009680 <xchg_spi>
 80097f2:	20ff      	movs	r0, #255	; 0xff
 80097f4:	f7ff ff44 	bl	8009680 <xchg_spi>

	return 1;						/* Function succeeded */
 80097f8:	2301      	movs	r3, #1
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800980e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009812:	f7ff ff82 	bl	800971a <wait_ready>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <xmit_datablock+0x1e>
 800981c:	2300      	movs	r3, #0
 800981e:	e01e      	b.n	800985e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff ff2c 	bl	8009680 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	2bfd      	cmp	r3, #253	; 0xfd
 800982c:	d016      	beq.n	800985c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800982e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff ff56 	bl	80096e4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009838:	20ff      	movs	r0, #255	; 0xff
 800983a:	f7ff ff21 	bl	8009680 <xchg_spi>
 800983e:	20ff      	movs	r0, #255	; 0xff
 8009840:	f7ff ff1e 	bl	8009680 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009844:	20ff      	movs	r0, #255	; 0xff
 8009846:	f7ff ff1b 	bl	8009680 <xchg_spi>
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	2b05      	cmp	r3, #5
 8009856:	d001      	beq.n	800985c <xmit_datablock+0x5a>
 8009858:	2300      	movs	r3, #0
 800985a:	e000      	b.n	800985e <xmit_datablock+0x5c>
	}
	return 1;
 800985c:	2301      	movs	r3, #1
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	4603      	mov	r3, r0
 800986e:	6039      	str	r1, [r7, #0]
 8009870:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009876:	2b00      	cmp	r3, #0
 8009878:	da0e      	bge.n	8009898 <send_cmd+0x32>
		cmd &= 0x7F;
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009880:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009882:	2100      	movs	r1, #0
 8009884:	2037      	movs	r0, #55	; 0x37
 8009886:	f7ff ffee 	bl	8009866 <send_cmd>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d901      	bls.n	8009898 <send_cmd+0x32>
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	e051      	b.n	800993c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b0c      	cmp	r3, #12
 800989c:	d008      	beq.n	80098b0 <send_cmd+0x4a>
		despiselect();
 800989e:	f7ff ff5f 	bl	8009760 <despiselect>
		if (!spiselect()) return 0xFF;
 80098a2:	f7ff ff6b 	bl	800977c <spiselect>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <send_cmd+0x4a>
 80098ac:	23ff      	movs	r3, #255	; 0xff
 80098ae:	e045      	b.n	800993c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff fee1 	bl	8009680 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	0e1b      	lsrs	r3, r3, #24
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fedb 	bl	8009680 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fed5 	bl	8009680 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	0a1b      	lsrs	r3, r3, #8
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fecf 	bl	8009680 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff feca 	bl	8009680 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <send_cmd+0x94>
 80098f6:	2395      	movs	r3, #149	; 0x95
 80098f8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d101      	bne.n	8009904 <send_cmd+0x9e>
 8009900:	2387      	movs	r3, #135	; 0x87
 8009902:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff feba 	bl	8009680 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b0c      	cmp	r3, #12
 8009910:	d102      	bne.n	8009918 <send_cmd+0xb2>
 8009912:	20ff      	movs	r0, #255	; 0xff
 8009914:	f7ff feb4 	bl	8009680 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009918:	230a      	movs	r3, #10
 800991a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800991c:	20ff      	movs	r0, #255	; 0xff
 800991e:	f7ff feaf 	bl	8009680 <xchg_spi>
 8009922:	4603      	mov	r3, r0
 8009924:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800992a:	2b00      	cmp	r3, #0
 800992c:	da05      	bge.n	800993a <send_cmd+0xd4>
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	3b01      	subs	r3, #1
 8009932:	73fb      	strb	r3, [r7, #15]
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1f0      	bne.n	800991c <send_cmd+0xb6>

	return res;							/* Return received response */
 800993a:	7bbb      	ldrb	r3, [r7, #14]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009944:	b590      	push	{r4, r7, lr}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <USER_SPI_initialize+0x14>
 8009954:	2301      	movs	r3, #1
 8009956:	e0d6      	b.n	8009b06 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009958:	4b6d      	ldr	r3, [pc, #436]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <USER_SPI_initialize+0x2a>
 8009966:	4b6a      	ldr	r3, [pc, #424]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	b2db      	uxtb	r3, r3
 800996c:	e0cb      	b.n	8009b06 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800996e:	4b69      	ldr	r3, [pc, #420]	; (8009b14 <USER_SPI_initialize+0x1d0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009978:	4b66      	ldr	r3, [pc, #408]	; (8009b14 <USER_SPI_initialize+0x1d0>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009980:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009982:	230a      	movs	r3, #10
 8009984:	73fb      	strb	r3, [r7, #15]
 8009986:	e005      	b.n	8009994 <USER_SPI_initialize+0x50>
 8009988:	20ff      	movs	r0, #255	; 0xff
 800998a:	f7ff fe79 	bl	8009680 <xchg_spi>
 800998e:	7bfb      	ldrb	r3, [r7, #15]
 8009990:	3b01      	subs	r3, #1
 8009992:	73fb      	strb	r3, [r7, #15]
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1f6      	bne.n	8009988 <USER_SPI_initialize+0x44>

	ty = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800999e:	2100      	movs	r1, #0
 80099a0:	2000      	movs	r0, #0
 80099a2:	f7ff ff60 	bl	8009866 <send_cmd>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	f040 808b 	bne.w	8009ac4 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80099ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099b2:	f7ff fe3b 	bl	800962c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80099b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099ba:	2008      	movs	r0, #8
 80099bc:	f7ff ff53 	bl	8009866 <send_cmd>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d151      	bne.n	8009a6a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
 80099ca:	e00d      	b.n	80099e8 <USER_SPI_initialize+0xa4>
 80099cc:	7bfc      	ldrb	r4, [r7, #15]
 80099ce:	20ff      	movs	r0, #255	; 0xff
 80099d0:	f7ff fe56 	bl	8009680 <xchg_spi>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	f104 0310 	add.w	r3, r4, #16
 80099dc:	443b      	add	r3, r7
 80099de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	3301      	adds	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d9ee      	bls.n	80099cc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80099ee:	7abb      	ldrb	r3, [r7, #10]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d167      	bne.n	8009ac4 <USER_SPI_initialize+0x180>
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	2baa      	cmp	r3, #170	; 0xaa
 80099f8:	d164      	bne.n	8009ac4 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80099fa:	bf00      	nop
 80099fc:	f7ff fe2a 	bl	8009654 <SPI_Timer_Status>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d007      	beq.n	8009a16 <USER_SPI_initialize+0xd2>
 8009a06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a0a:	20a9      	movs	r0, #169	; 0xa9
 8009a0c:	f7ff ff2b 	bl	8009866 <send_cmd>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f2      	bne.n	80099fc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009a16:	f7ff fe1d 	bl	8009654 <SPI_Timer_Status>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d051      	beq.n	8009ac4 <USER_SPI_initialize+0x180>
 8009a20:	2100      	movs	r1, #0
 8009a22:	203a      	movs	r0, #58	; 0x3a
 8009a24:	f7ff ff1f 	bl	8009866 <send_cmd>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d14a      	bne.n	8009ac4 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	e00d      	b.n	8009a50 <USER_SPI_initialize+0x10c>
 8009a34:	7bfc      	ldrb	r4, [r7, #15]
 8009a36:	20ff      	movs	r0, #255	; 0xff
 8009a38:	f7ff fe22 	bl	8009680 <xchg_spi>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f104 0310 	add.w	r3, r4, #16
 8009a44:	443b      	add	r3, r7
 8009a46:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	73fb      	strb	r3, [r7, #15]
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d9ee      	bls.n	8009a34 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009a56:	7a3b      	ldrb	r3, [r7, #8]
 8009a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <USER_SPI_initialize+0x120>
 8009a60:	230c      	movs	r3, #12
 8009a62:	e000      	b.n	8009a66 <USER_SPI_initialize+0x122>
 8009a64:	2304      	movs	r3, #4
 8009a66:	737b      	strb	r3, [r7, #13]
 8009a68:	e02c      	b.n	8009ac4 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	20a9      	movs	r0, #169	; 0xa9
 8009a6e:	f7ff fefa 	bl	8009866 <send_cmd>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d804      	bhi.n	8009a82 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009a78:	2302      	movs	r3, #2
 8009a7a:	737b      	strb	r3, [r7, #13]
 8009a7c:	23a9      	movs	r3, #169	; 0xa9
 8009a7e:	73bb      	strb	r3, [r7, #14]
 8009a80:	e003      	b.n	8009a8a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009a82:	2301      	movs	r3, #1
 8009a84:	737b      	strb	r3, [r7, #13]
 8009a86:	2301      	movs	r3, #1
 8009a88:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009a8a:	bf00      	nop
 8009a8c:	f7ff fde2 	bl	8009654 <SPI_Timer_Status>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <USER_SPI_initialize+0x162>
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff fee3 	bl	8009866 <send_cmd>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1f2      	bne.n	8009a8c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009aa6:	f7ff fdd5 	bl	8009654 <SPI_Timer_Status>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d007      	beq.n	8009ac0 <USER_SPI_initialize+0x17c>
 8009ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ab4:	2010      	movs	r0, #16
 8009ab6:	f7ff fed6 	bl	8009866 <send_cmd>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <USER_SPI_initialize+0x180>
				ty = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009ac4:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <USER_SPI_initialize+0x1d4>)
 8009ac6:	7b7b      	ldrb	r3, [r7, #13]
 8009ac8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009aca:	f7ff fe49 	bl	8009760 <despiselect>

	if (ty) {			/* OK */
 8009ace:	7b7b      	ldrb	r3, [r7, #13]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d012      	beq.n	8009afa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009ad4:	4b0f      	ldr	r3, [pc, #60]	; (8009b14 <USER_SPI_initialize+0x1d0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ade:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <USER_SPI_initialize+0x1d0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0210 	orr.w	r2, r2, #16
 8009ae6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009ae8:	4b09      	ldr	r3, [pc, #36]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	f023 0301 	bic.w	r3, r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	e002      	b.n	8009b00 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009afa:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009b00:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <USER_SPI_initialize+0x1cc>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	b2db      	uxtb	r3, r3
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd90      	pop	{r4, r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000048 	.word	0x20000048
 8009b14:	200009d0 	.word	0x200009d0
 8009b18:	20000bc4 	.word	0x20000bc4

08009b1c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <USER_SPI_status+0x14>
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e002      	b.n	8009b36 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009b30:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <USER_SPI_status+0x28>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000048 	.word	0x20000048

08009b48 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <USER_SPI_read+0x1c>
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <USER_SPI_read+0x20>
 8009b64:	2304      	movs	r3, #4
 8009b66:	e04d      	b.n	8009c04 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009b68:	4b28      	ldr	r3, [pc, #160]	; (8009c0c <USER_SPI_read+0xc4>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <USER_SPI_read+0x32>
 8009b76:	2303      	movs	r3, #3
 8009b78:	e044      	b.n	8009c04 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009b7a:	4b25      	ldr	r3, [pc, #148]	; (8009c10 <USER_SPI_read+0xc8>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 0308 	and.w	r3, r3, #8
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <USER_SPI_read+0x44>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	025b      	lsls	r3, r3, #9
 8009b8a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d111      	bne.n	8009bb6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009b92:	6879      	ldr	r1, [r7, #4]
 8009b94:	2011      	movs	r0, #17
 8009b96:	f7ff fe66 	bl	8009866 <send_cmd>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d129      	bne.n	8009bf4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ba4:	68b8      	ldr	r0, [r7, #8]
 8009ba6:	f7ff fe03 	bl	80097b0 <rcvr_datablock>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d021      	beq.n	8009bf4 <USER_SPI_read+0xac>
			count = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	603b      	str	r3, [r7, #0]
 8009bb4:	e01e      	b.n	8009bf4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	2012      	movs	r0, #18
 8009bba:	f7ff fe54 	bl	8009866 <send_cmd>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d117      	bne.n	8009bf4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bc8:	68b8      	ldr	r0, [r7, #8]
 8009bca:	f7ff fdf1 	bl	80097b0 <rcvr_datablock>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <USER_SPI_read+0xa2>
				buff += 512;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009bda:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1ed      	bne.n	8009bc4 <USER_SPI_read+0x7c>
 8009be8:	e000      	b.n	8009bec <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009bea:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009bec:	2100      	movs	r1, #0
 8009bee:	200c      	movs	r0, #12
 8009bf0:	f7ff fe39 	bl	8009866 <send_cmd>
		}
	}
	despiselect();
 8009bf4:	f7ff fdb4 	bl	8009760 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf14      	ite	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	2300      	moveq	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000048 	.word	0x20000048
 8009c10:	20000bc4 	.word	0x20000bc4

08009c14 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <USER_SPI_write+0x1c>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <USER_SPI_write+0x20>
 8009c30:	2304      	movs	r3, #4
 8009c32:	e063      	b.n	8009cfc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009c34:	4b33      	ldr	r3, [pc, #204]	; (8009d04 <USER_SPI_write+0xf0>)
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <USER_SPI_write+0x32>
 8009c42:	2303      	movs	r3, #3
 8009c44:	e05a      	b.n	8009cfc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009c46:	4b2f      	ldr	r3, [pc, #188]	; (8009d04 <USER_SPI_write+0xf0>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <USER_SPI_write+0x44>
 8009c54:	2302      	movs	r3, #2
 8009c56:	e051      	b.n	8009cfc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009c58:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <USER_SPI_write+0xf4>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	f003 0308 	and.w	r3, r3, #8
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <USER_SPI_write+0x56>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	025b      	lsls	r3, r3, #9
 8009c68:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d110      	bne.n	8009c92 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	2018      	movs	r0, #24
 8009c74:	f7ff fdf7 	bl	8009866 <send_cmd>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d136      	bne.n	8009cec <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009c7e:	21fe      	movs	r1, #254	; 0xfe
 8009c80:	68b8      	ldr	r0, [r7, #8]
 8009c82:	f7ff fdbe 	bl	8009802 <xmit_datablock>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02f      	beq.n	8009cec <USER_SPI_write+0xd8>
			count = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	e02c      	b.n	8009cec <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009c92:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <USER_SPI_write+0xf4>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	f003 0306 	and.w	r3, r3, #6
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d003      	beq.n	8009ca6 <USER_SPI_write+0x92>
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	2097      	movs	r0, #151	; 0x97
 8009ca2:	f7ff fde0 	bl	8009866 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	2019      	movs	r0, #25
 8009caa:	f7ff fddc 	bl	8009866 <send_cmd>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d11b      	bne.n	8009cec <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cb4:	21fc      	movs	r1, #252	; 0xfc
 8009cb6:	68b8      	ldr	r0, [r7, #8]
 8009cb8:	f7ff fda3 	bl	8009802 <xmit_datablock>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00a      	beq.n	8009cd8 <USER_SPI_write+0xc4>
				buff += 512;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009cc8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	603b      	str	r3, [r7, #0]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1ee      	bne.n	8009cb4 <USER_SPI_write+0xa0>
 8009cd6:	e000      	b.n	8009cda <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cd8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009cda:	21fd      	movs	r1, #253	; 0xfd
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f7ff fd90 	bl	8009802 <xmit_datablock>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d101      	bne.n	8009cec <USER_SPI_write+0xd8>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009cec:	f7ff fd38 	bl	8009760 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bf14      	ite	ne
 8009cf6:	2301      	movne	r3, #1
 8009cf8:	2300      	moveq	r3, #0
 8009cfa:	b2db      	uxtb	r3, r3
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000048 	.word	0x20000048
 8009d08:	20000bc4 	.word	0x20000bc4

08009d0c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	; 0x30
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	603a      	str	r2, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <USER_SPI_ioctl+0x1a>
 8009d22:	2304      	movs	r3, #4
 8009d24:	e15a      	b.n	8009fdc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009d26:	4baf      	ldr	r3, [pc, #700]	; (8009fe4 <USER_SPI_ioctl+0x2d8>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <USER_SPI_ioctl+0x2c>
 8009d34:	2303      	movs	r3, #3
 8009d36:	e151      	b.n	8009fdc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009d3e:	79bb      	ldrb	r3, [r7, #6]
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	f200 8136 	bhi.w	8009fb2 <USER_SPI_ioctl+0x2a6>
 8009d46:	a201      	add	r2, pc, #4	; (adr r2, 8009d4c <USER_SPI_ioctl+0x40>)
 8009d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4c:	08009d61 	.word	0x08009d61
 8009d50:	08009d75 	.word	0x08009d75
 8009d54:	08009fb3 	.word	0x08009fb3
 8009d58:	08009e21 	.word	0x08009e21
 8009d5c:	08009f17 	.word	0x08009f17
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009d60:	f7ff fd0c 	bl	800977c <spiselect>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8127 	beq.w	8009fba <USER_SPI_ioctl+0x2ae>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009d72:	e122      	b.n	8009fba <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009d74:	2100      	movs	r1, #0
 8009d76:	2009      	movs	r0, #9
 8009d78:	f7ff fd75 	bl	8009866 <send_cmd>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f040 811d 	bne.w	8009fbe <USER_SPI_ioctl+0x2b2>
 8009d84:	f107 030c 	add.w	r3, r7, #12
 8009d88:	2110      	movs	r1, #16
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fd10 	bl	80097b0 <rcvr_datablock>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8113 	beq.w	8009fbe <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009d98:	7b3b      	ldrb	r3, [r7, #12]
 8009d9a:	099b      	lsrs	r3, r3, #6
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d111      	bne.n	8009dc6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009da2:	7d7b      	ldrb	r3, [r7, #21]
 8009da4:	461a      	mov	r2, r3
 8009da6:	7d3b      	ldrb	r3, [r7, #20]
 8009da8:	021b      	lsls	r3, r3, #8
 8009daa:	4413      	add	r3, r2
 8009dac:	461a      	mov	r2, r3
 8009dae:	7cfb      	ldrb	r3, [r7, #19]
 8009db0:	041b      	lsls	r3, r3, #16
 8009db2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009db6:	4413      	add	r3, r2
 8009db8:	3301      	adds	r3, #1
 8009dba:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	029a      	lsls	r2, r3, #10
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	e028      	b.n	8009e18 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009dc6:	7c7b      	ldrb	r3, [r7, #17]
 8009dc8:	f003 030f 	and.w	r3, r3, #15
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	7dbb      	ldrb	r3, [r7, #22]
 8009dd0:	09db      	lsrs	r3, r3, #7
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	7d7b      	ldrb	r3, [r7, #21]
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f003 0306 	and.w	r3, r3, #6
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	4413      	add	r3, r2
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	3302      	adds	r3, #2
 8009dea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009dee:	7d3b      	ldrb	r3, [r7, #20]
 8009df0:	099b      	lsrs	r3, r3, #6
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	7cfb      	ldrb	r3, [r7, #19]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	7cbb      	ldrb	r3, [r7, #18]
 8009dfe:	029b      	lsls	r3, r3, #10
 8009e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e04:	4413      	add	r3, r2
 8009e06:	3301      	adds	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009e0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e0e:	3b09      	subs	r3, #9
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	409a      	lsls	r2, r3
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009e1e:	e0ce      	b.n	8009fbe <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009e20:	4b71      	ldr	r3, [pc, #452]	; (8009fe8 <USER_SPI_ioctl+0x2dc>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d031      	beq.n	8009e90 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	208d      	movs	r0, #141	; 0x8d
 8009e30:	f7ff fd19 	bl	8009866 <send_cmd>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 80c3 	bne.w	8009fc2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009e3c:	20ff      	movs	r0, #255	; 0xff
 8009e3e:	f7ff fc1f 	bl	8009680 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009e42:	f107 030c 	add.w	r3, r7, #12
 8009e46:	2110      	movs	r1, #16
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff fcb1 	bl	80097b0 <rcvr_datablock>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80b6 	beq.w	8009fc2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009e56:	2330      	movs	r3, #48	; 0x30
 8009e58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e5c:	e007      	b.n	8009e6e <USER_SPI_ioctl+0x162>
 8009e5e:	20ff      	movs	r0, #255	; 0xff
 8009e60:	f7ff fc0e 	bl	8009680 <xchg_spi>
 8009e64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f3      	bne.n	8009e5e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009e76:	7dbb      	ldrb	r3, [r7, #22]
 8009e78:	091b      	lsrs	r3, r3, #4
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	2310      	movs	r3, #16
 8009e80:	fa03 f202 	lsl.w	r2, r3, r2
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009e8e:	e098      	b.n	8009fc2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009e90:	2100      	movs	r1, #0
 8009e92:	2009      	movs	r0, #9
 8009e94:	f7ff fce7 	bl	8009866 <send_cmd>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f040 8091 	bne.w	8009fc2 <USER_SPI_ioctl+0x2b6>
 8009ea0:	f107 030c 	add.w	r3, r7, #12
 8009ea4:	2110      	movs	r1, #16
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fc82 	bl	80097b0 <rcvr_datablock>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8087 	beq.w	8009fc2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009eb4:	4b4c      	ldr	r3, [pc, #304]	; (8009fe8 <USER_SPI_ioctl+0x2dc>)
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d012      	beq.n	8009ee6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009ec0:	7dbb      	ldrb	r3, [r7, #22]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009ec8:	7dfa      	ldrb	r2, [r7, #23]
 8009eca:	09d2      	lsrs	r2, r2, #7
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	4413      	add	r3, r2
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	7e7b      	ldrb	r3, [r7, #25]
 8009ed4:	099b      	lsrs	r3, r3, #6
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	fa02 f303 	lsl.w	r3, r2, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	e013      	b.n	8009f0e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009ee6:	7dbb      	ldrb	r3, [r7, #22]
 8009ee8:	109b      	asrs	r3, r3, #2
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	f003 031f 	and.w	r3, r3, #31
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	7dfa      	ldrb	r2, [r7, #23]
 8009ef4:	00d2      	lsls	r2, r2, #3
 8009ef6:	f002 0218 	and.w	r2, r2, #24
 8009efa:	7df9      	ldrb	r1, [r7, #23]
 8009efc:	0949      	lsrs	r1, r1, #5
 8009efe:	b2c9      	uxtb	r1, r1
 8009f00:	440a      	add	r2, r1
 8009f02:	3201      	adds	r2, #1
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009f14:	e055      	b.n	8009fc2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009f16:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <USER_SPI_ioctl+0x2dc>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	f003 0306 	and.w	r3, r3, #6
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d051      	beq.n	8009fc6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009f22:	f107 020c 	add.w	r2, r7, #12
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	210b      	movs	r1, #11
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff feee 	bl	8009d0c <USER_SPI_ioctl>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d149      	bne.n	8009fca <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009f36:	7b3b      	ldrb	r3, [r7, #12]
 8009f38:	099b      	lsrs	r3, r3, #6
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d104      	bne.n	8009f4a <USER_SPI_ioctl+0x23e>
 8009f40:	7dbb      	ldrb	r3, [r7, #22]
 8009f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d041      	beq.n	8009fce <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	623b      	str	r3, [r7, #32]
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009f5a:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <USER_SPI_ioctl+0x2dc>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d105      	bne.n	8009f72 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f68:	025b      	lsls	r3, r3, #9
 8009f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	025b      	lsls	r3, r3, #9
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f74:	2020      	movs	r0, #32
 8009f76:	f7ff fc76 	bl	8009866 <send_cmd>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d128      	bne.n	8009fd2 <USER_SPI_ioctl+0x2c6>
 8009f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f82:	2021      	movs	r0, #33	; 0x21
 8009f84:	f7ff fc6f 	bl	8009866 <send_cmd>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d121      	bne.n	8009fd2 <USER_SPI_ioctl+0x2c6>
 8009f8e:	2100      	movs	r1, #0
 8009f90:	2026      	movs	r0, #38	; 0x26
 8009f92:	f7ff fc68 	bl	8009866 <send_cmd>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d11a      	bne.n	8009fd2 <USER_SPI_ioctl+0x2c6>
 8009f9c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009fa0:	f7ff fbbb 	bl	800971a <wait_ready>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d013      	beq.n	8009fd2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009faa:	2300      	movs	r3, #0
 8009fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009fb0:	e00f      	b.n	8009fd2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009fb2:	2304      	movs	r3, #4
 8009fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fb8:	e00c      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fba:	bf00      	nop
 8009fbc:	e00a      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fbe:	bf00      	nop
 8009fc0:	e008      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fc2:	bf00      	nop
 8009fc4:	e006      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009fc6:	bf00      	nop
 8009fc8:	e004      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fd2:	bf00      	nop
	}

	despiselect();
 8009fd4:	f7ff fbc4 	bl	8009760 <despiselect>

	return res;
 8009fd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3730      	adds	r7, #48	; 0x30
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20000048 	.word	0x20000048
 8009fe8:	20000bc4 	.word	0x20000bc4

08009fec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ff6:	79fb      	ldrb	r3, [r7, #7]
 8009ff8:	4a08      	ldr	r2, [pc, #32]	; (800a01c <disk_status+0x30>)
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	79fa      	ldrb	r2, [r7, #7]
 800a004:	4905      	ldr	r1, [pc, #20]	; (800a01c <disk_status+0x30>)
 800a006:	440a      	add	r2, r1
 800a008:	7a12      	ldrb	r2, [r2, #8]
 800a00a:	4610      	mov	r0, r2
 800a00c:	4798      	blx	r3
 800a00e:	4603      	mov	r3, r0
 800a010:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a012:	7bfb      	ldrb	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000bf8 	.word	0x20000bf8

0800a020 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	4a0d      	ldr	r2, [pc, #52]	; (800a068 <disk_initialize+0x48>)
 800a032:	5cd3      	ldrb	r3, [r2, r3]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d111      	bne.n	800a05c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	4a0b      	ldr	r2, [pc, #44]	; (800a068 <disk_initialize+0x48>)
 800a03c:	2101      	movs	r1, #1
 800a03e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	4a09      	ldr	r2, [pc, #36]	; (800a068 <disk_initialize+0x48>)
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	79fa      	ldrb	r2, [r7, #7]
 800a04e:	4906      	ldr	r1, [pc, #24]	; (800a068 <disk_initialize+0x48>)
 800a050:	440a      	add	r2, r1
 800a052:	7a12      	ldrb	r2, [r2, #8]
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20000bf8 	.word	0x20000bf8

0800a06c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	60b9      	str	r1, [r7, #8]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	603b      	str	r3, [r7, #0]
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	4a0a      	ldr	r2, [pc, #40]	; (800a0a8 <disk_read+0x3c>)
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	689c      	ldr	r4, [r3, #8]
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <disk_read+0x3c>)
 800a08c:	4413      	add	r3, r2
 800a08e:	7a18      	ldrb	r0, [r3, #8]
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	47a0      	blx	r4
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd90      	pop	{r4, r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000bf8 	.word	0x20000bf8

0800a0ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0ac:	b590      	push	{r4, r7, lr}
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	603b      	str	r3, [r7, #0]
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	4a0a      	ldr	r2, [pc, #40]	; (800a0e8 <disk_write+0x3c>)
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	68dc      	ldr	r4, [r3, #12]
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4a07      	ldr	r2, [pc, #28]	; (800a0e8 <disk_write+0x3c>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	7a18      	ldrb	r0, [r3, #8]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	47a0      	blx	r4
 800a0d8:	4603      	mov	r3, r0
 800a0da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd90      	pop	{r4, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000bf8 	.word	0x20000bf8

0800a0ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	603a      	str	r2, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	4a09      	ldr	r2, [pc, #36]	; (800a124 <disk_ioctl+0x38>)
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	79fa      	ldrb	r2, [r7, #7]
 800a10a:	4906      	ldr	r1, [pc, #24]	; (800a124 <disk_ioctl+0x38>)
 800a10c:	440a      	add	r2, r1
 800a10e:	7a10      	ldrb	r0, [r2, #8]
 800a110:	79b9      	ldrb	r1, [r7, #6]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	4798      	blx	r3
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]
  return res;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000bf8 	.word	0x20000bf8

0800a128 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3301      	adds	r3, #1
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a138:	89fb      	ldrh	r3, [r7, #14]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	b21a      	sxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	b21b      	sxth	r3, r3
 800a144:	4313      	orrs	r3, r2
 800a146:	b21b      	sxth	r3, r3
 800a148:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a14a:	89fb      	ldrh	r3, [r7, #14]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3303      	adds	r3, #3
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	021b      	lsls	r3, r3, #8
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	3202      	adds	r2, #2
 800a170:	7812      	ldrb	r2, [r2, #0]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	021b      	lsls	r3, r3, #8
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	3201      	adds	r2, #1
 800a17e:	7812      	ldrb	r2, [r2, #0]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	7812      	ldrb	r2, [r2, #0]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a190:	68fb      	ldr	r3, [r7, #12]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	607a      	str	r2, [r7, #4]
 800a1b0:	887a      	ldrh	r2, [r7, #2]
 800a1b2:	b2d2      	uxtb	r2, r2
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	887b      	ldrh	r3, [r7, #2]
 800a1b8:	0a1b      	lsrs	r3, r3, #8
 800a1ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	1c5a      	adds	r2, r3, #1
 800a1c0:	607a      	str	r2, [r7, #4]
 800a1c2:	887a      	ldrh	r2, [r7, #2]
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	701a      	strb	r2, [r3, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	607a      	str	r2, [r7, #4]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	701a      	strb	r2, [r3, #0]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	0a1b      	lsrs	r3, r3, #8
 800a1ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	607a      	str	r2, [r7, #4]
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	701a      	strb	r2, [r3, #0]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	0a1b      	lsrs	r3, r3, #8
 800a200:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00d      	beq.n	800a262 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	1c53      	adds	r3, r2, #1
 800a24a:	613b      	str	r3, [r7, #16]
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	1c59      	adds	r1, r3, #1
 800a250:	6179      	str	r1, [r7, #20]
 800a252:	7812      	ldrb	r2, [r2, #0]
 800a254:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3b01      	subs	r3, #1
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f1      	bne.n	800a246 <mem_cpy+0x1a>
	}
}
 800a262:	bf00      	nop
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a26e:	b480      	push	{r7}
 800a270:	b087      	sub	sp, #28
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	617a      	str	r2, [r7, #20]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	b2d2      	uxtb	r2, r2
 800a288:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	607b      	str	r3, [r7, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f3      	bne.n	800a27e <mem_set+0x10>
}
 800a296:	bf00      	nop
 800a298:	bf00      	nop
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2a4:	b480      	push	{r7}
 800a2a6:	b089      	sub	sp, #36	; 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	61fa      	str	r2, [r7, #28]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	61ba      	str	r2, [r7, #24]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	1acb      	subs	r3, r1, r3
 800a2d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	607b      	str	r3, [r7, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <mem_cmp+0x40>
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0eb      	beq.n	800a2bc <mem_cmp+0x18>

	return r;
 800a2e4:	697b      	ldr	r3, [r7, #20]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3724      	adds	r7, #36	; 0x24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a2fc:	e002      	b.n	800a304 <chk_chr+0x12>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3301      	adds	r3, #1
 800a302:	607b      	str	r3, [r7, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <chk_chr+0x26>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	4293      	cmp	r3, r2
 800a316:	d1f2      	bne.n	800a2fe <chk_chr+0xc>
	return *str;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	781b      	ldrb	r3, [r3, #0]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	e029      	b.n	800a390 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a33c:	4a27      	ldr	r2, [pc, #156]	; (800a3dc <chk_lock+0xb4>)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	4413      	add	r3, r2
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d01d      	beq.n	800a386 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a34a:	4a24      	ldr	r2, [pc, #144]	; (800a3dc <chk_lock+0xb4>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	4413      	add	r3, r2
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d116      	bne.n	800a38a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a35c:	4a1f      	ldr	r2, [pc, #124]	; (800a3dc <chk_lock+0xb4>)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	4413      	add	r3, r2
 800a364:	3304      	adds	r3, #4
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d10c      	bne.n	800a38a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a370:	4a1a      	ldr	r2, [pc, #104]	; (800a3dc <chk_lock+0xb4>)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	011b      	lsls	r3, r3, #4
 800a376:	4413      	add	r3, r2
 800a378:	3308      	adds	r3, #8
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a380:	429a      	cmp	r2, r3
 800a382:	d102      	bne.n	800a38a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a384:	e007      	b.n	800a396 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a386:	2301      	movs	r3, #1
 800a388:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d9d2      	bls.n	800a33c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d109      	bne.n	800a3b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <chk_lock+0x80>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d101      	bne.n	800a3ac <chk_lock+0x84>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e010      	b.n	800a3ce <chk_lock+0xa6>
 800a3ac:	2312      	movs	r3, #18
 800a3ae:	e00e      	b.n	800a3ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d108      	bne.n	800a3c8 <chk_lock+0xa0>
 800a3b6:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <chk_lock+0xb4>)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	4413      	add	r3, r2
 800a3be:	330c      	adds	r3, #12
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3c6:	d101      	bne.n	800a3cc <chk_lock+0xa4>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	e000      	b.n	800a3ce <chk_lock+0xa6>
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3714      	adds	r7, #20
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr
 800a3da:	bf00      	nop
 800a3dc:	20000bd8 	.word	0x20000bd8

0800a3e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	e002      	b.n	800a3f2 <enq_lock+0x12>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	607b      	str	r3, [r7, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d806      	bhi.n	800a406 <enq_lock+0x26>
 800a3f8:	4a09      	ldr	r2, [pc, #36]	; (800a420 <enq_lock+0x40>)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	011b      	lsls	r3, r3, #4
 800a3fe:	4413      	add	r3, r2
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1f2      	bne.n	800a3ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b02      	cmp	r3, #2
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
}
 800a412:	4618      	mov	r0, r3
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20000bd8 	.word	0x20000bd8

0800a424 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]
 800a432:	e01f      	b.n	800a474 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a434:	4a41      	ldr	r2, [pc, #260]	; (800a53c <inc_lock+0x118>)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	4413      	add	r3, r2
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d113      	bne.n	800a46e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a446:	4a3d      	ldr	r2, [pc, #244]	; (800a53c <inc_lock+0x118>)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	011b      	lsls	r3, r3, #4
 800a44c:	4413      	add	r3, r2
 800a44e:	3304      	adds	r3, #4
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a456:	429a      	cmp	r2, r3
 800a458:	d109      	bne.n	800a46e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a45a:	4a38      	ldr	r2, [pc, #224]	; (800a53c <inc_lock+0x118>)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	4413      	add	r3, r2
 800a462:	3308      	adds	r3, #8
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d006      	beq.n	800a47c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3301      	adds	r3, #1
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d9dc      	bls.n	800a434 <inc_lock+0x10>
 800a47a:	e000      	b.n	800a47e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a47c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b02      	cmp	r3, #2
 800a482:	d132      	bne.n	800a4ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	e002      	b.n	800a490 <inc_lock+0x6c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3301      	adds	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d806      	bhi.n	800a4a4 <inc_lock+0x80>
 800a496:	4a29      	ldr	r2, [pc, #164]	; (800a53c <inc_lock+0x118>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	4413      	add	r3, r2
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f2      	bne.n	800a48a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d101      	bne.n	800a4ae <inc_lock+0x8a>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e040      	b.n	800a530 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4922      	ldr	r1, [pc, #136]	; (800a53c <inc_lock+0x118>)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	011b      	lsls	r3, r3, #4
 800a4b8:	440b      	add	r3, r1
 800a4ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	491e      	ldr	r1, [pc, #120]	; (800a53c <inc_lock+0x118>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	440b      	add	r3, r1
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	695a      	ldr	r2, [r3, #20]
 800a4d0:	491a      	ldr	r1, [pc, #104]	; (800a53c <inc_lock+0x118>)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	011b      	lsls	r3, r3, #4
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3308      	adds	r3, #8
 800a4da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a4dc:	4a17      	ldr	r2, [pc, #92]	; (800a53c <inc_lock+0x118>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	011b      	lsls	r3, r3, #4
 800a4e2:	4413      	add	r3, r2
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <inc_lock+0xe0>
 800a4f0:	4a12      	ldr	r2, [pc, #72]	; (800a53c <inc_lock+0x118>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	4413      	add	r3, r2
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <inc_lock+0xe0>
 800a500:	2300      	movs	r3, #0
 800a502:	e015      	b.n	800a530 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d108      	bne.n	800a51c <inc_lock+0xf8>
 800a50a:	4a0c      	ldr	r2, [pc, #48]	; (800a53c <inc_lock+0x118>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	011b      	lsls	r3, r3, #4
 800a510:	4413      	add	r3, r2
 800a512:	330c      	adds	r3, #12
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	3301      	adds	r3, #1
 800a518:	b29a      	uxth	r2, r3
 800a51a:	e001      	b.n	800a520 <inc_lock+0xfc>
 800a51c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a520:	4906      	ldr	r1, [pc, #24]	; (800a53c <inc_lock+0x118>)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	011b      	lsls	r3, r3, #4
 800a526:	440b      	add	r3, r1
 800a528:	330c      	adds	r3, #12
 800a52a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3301      	adds	r3, #1
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	20000bd8 	.word	0x20000bd8

0800a540 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	607b      	str	r3, [r7, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d825      	bhi.n	800a5a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a554:	4a17      	ldr	r2, [pc, #92]	; (800a5b4 <dec_lock+0x74>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	4413      	add	r3, r2
 800a55c:	330c      	adds	r3, #12
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a562:	89fb      	ldrh	r3, [r7, #14]
 800a564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a568:	d101      	bne.n	800a56e <dec_lock+0x2e>
 800a56a:	2300      	movs	r3, #0
 800a56c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a56e:	89fb      	ldrh	r3, [r7, #14]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <dec_lock+0x3a>
 800a574:	89fb      	ldrh	r3, [r7, #14]
 800a576:	3b01      	subs	r3, #1
 800a578:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a57a:	4a0e      	ldr	r2, [pc, #56]	; (800a5b4 <dec_lock+0x74>)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	011b      	lsls	r3, r3, #4
 800a580:	4413      	add	r3, r2
 800a582:	330c      	adds	r3, #12
 800a584:	89fa      	ldrh	r2, [r7, #14]
 800a586:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a588:	89fb      	ldrh	r3, [r7, #14]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d105      	bne.n	800a59a <dec_lock+0x5a>
 800a58e:	4a09      	ldr	r2, [pc, #36]	; (800a5b4 <dec_lock+0x74>)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	4413      	add	r3, r2
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	737b      	strb	r3, [r7, #13]
 800a59e:	e001      	b.n	800a5a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	20000bd8 	.word	0x20000bd8

0800a5b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	e010      	b.n	800a5e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	; (800a5fc <clear_lock+0x44>)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	4413      	add	r3, r2
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d105      	bne.n	800a5e2 <clear_lock+0x2a>
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <clear_lock+0x44>)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	011b      	lsls	r3, r3, #4
 800a5dc:	4413      	add	r3, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d9eb      	bls.n	800a5c6 <clear_lock+0xe>
	}
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	20000bd8 	.word	0x20000bd8

0800a600 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	78db      	ldrb	r3, [r3, #3]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d034      	beq.n	800a67e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a618:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	7858      	ldrb	r0, [r3, #1]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a624:	2301      	movs	r3, #1
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	f7ff fd40 	bl	800a0ac <disk_write>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a632:	2301      	movs	r3, #1
 800a634:	73fb      	strb	r3, [r7, #15]
 800a636:	e022      	b.n	800a67e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	1ad2      	subs	r2, r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d217      	bcs.n	800a67e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	789b      	ldrb	r3, [r3, #2]
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	e010      	b.n	800a678 <sync_window+0x78>
					wsect += fs->fsize;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	697a      	ldr	r2, [r7, #20]
 800a65c:	4413      	add	r3, r2
 800a65e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	7858      	ldrb	r0, [r3, #1]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a66a:	2301      	movs	r3, #1
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	f7ff fd1d 	bl	800a0ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	3b01      	subs	r3, #1
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d8eb      	bhi.n	800a656 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3718      	adds	r7, #24
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d01b      	beq.n	800a6d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f7ff ffad 	bl	800a600 <sync_window>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d113      	bne.n	800a6d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	7858      	ldrb	r0, [r3, #1]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	f7ff fcd5 	bl	800a06c <disk_read>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ff87 	bl	800a600 <sync_window>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d158      	bne.n	800a7ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d148      	bne.n	800a796 <sync_fs+0xb2>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	791b      	ldrb	r3, [r3, #4]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d144      	bne.n	800a796 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3330      	adds	r3, #48	; 0x30
 800a710:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a714:	2100      	movs	r1, #0
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff fda9 	bl	800a26e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3330      	adds	r3, #48	; 0x30
 800a720:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a724:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff fd38 	bl	800a19e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3330      	adds	r3, #48	; 0x30
 800a732:	4921      	ldr	r1, [pc, #132]	; (800a7b8 <sync_fs+0xd4>)
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fd4d 	bl	800a1d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3330      	adds	r3, #48	; 0x30
 800a73e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a742:	491e      	ldr	r1, [pc, #120]	; (800a7bc <sync_fs+0xd8>)
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff fd45 	bl	800a1d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3330      	adds	r3, #48	; 0x30
 800a74e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	4619      	mov	r1, r3
 800a758:	4610      	mov	r0, r2
 800a75a:	f7ff fd3b 	bl	800a1d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3330      	adds	r3, #48	; 0x30
 800a762:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	4619      	mov	r1, r3
 800a76c:	4610      	mov	r0, r2
 800a76e:	f7ff fd31 	bl	800a1d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7858      	ldrb	r0, [r3, #1]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78a:	2301      	movs	r3, #1
 800a78c:	f7ff fc8e 	bl	800a0ac <disk_write>
			fs->fsi_flag = 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff fca4 	bl	800a0ec <disk_ioctl>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <sync_fs+0xca>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	41615252 	.word	0x41615252
 800a7bc:	61417272 	.word	0x61417272

0800a7c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3b02      	subs	r3, #2
 800a7ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	3b02      	subs	r3, #2
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d301      	bcc.n	800a7e0 <clust2sect+0x20>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e008      	b.n	800a7f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	895b      	ldrh	r3, [r3, #10]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	fb03 f202 	mul.w	r2, r3, r2
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f0:	4413      	add	r3, r2
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d904      	bls.n	800a81e <get_fat+0x20>
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	695b      	ldr	r3, [r3, #20]
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d302      	bcc.n	800a824 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a81e:	2301      	movs	r3, #1
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e08f      	b.n	800a944 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a824:	f04f 33ff 	mov.w	r3, #4294967295
 800a828:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d062      	beq.n	800a8f8 <get_fat+0xfa>
 800a832:	2b03      	cmp	r3, #3
 800a834:	dc7c      	bgt.n	800a930 <get_fat+0x132>
 800a836:	2b01      	cmp	r3, #1
 800a838:	d002      	beq.n	800a840 <get_fat+0x42>
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d042      	beq.n	800a8c4 <get_fat+0xc6>
 800a83e:	e077      	b.n	800a930 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	085b      	lsrs	r3, r3, #1
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	4413      	add	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	6a1a      	ldr	r2, [r3, #32]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	0a5b      	lsrs	r3, r3, #9
 800a856:	4413      	add	r3, r2
 800a858:	4619      	mov	r1, r3
 800a85a:	6938      	ldr	r0, [r7, #16]
 800a85c:	f7ff ff14 	bl	800a688 <move_window>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d167      	bne.n	800a936 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	1c5a      	adds	r2, r3, #1
 800a86a:	60fa      	str	r2, [r7, #12]
 800a86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	4413      	add	r3, r2
 800a874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a878:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	6a1a      	ldr	r2, [r3, #32]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	0a5b      	lsrs	r3, r3, #9
 800a882:	4413      	add	r3, r2
 800a884:	4619      	mov	r1, r3
 800a886:	6938      	ldr	r0, [r7, #16]
 800a888:	f7ff fefe 	bl	800a688 <move_window>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d153      	bne.n	800a93a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a898:	693a      	ldr	r2, [r7, #16]
 800a89a:	4413      	add	r3, r2
 800a89c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8a0:	021b      	lsls	r3, r3, #8
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <get_fat+0xbc>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	091b      	lsrs	r3, r3, #4
 800a8b8:	e002      	b.n	800a8c0 <get_fat+0xc2>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8c0:	617b      	str	r3, [r7, #20]
			break;
 800a8c2:	e03f      	b.n	800a944 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6a1a      	ldr	r2, [r3, #32]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	0a1b      	lsrs	r3, r3, #8
 800a8cc:	4413      	add	r3, r2
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6938      	ldr	r0, [r7, #16]
 800a8d2:	f7ff fed9 	bl	800a688 <move_window>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d130      	bne.n	800a93e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a8ea:	4413      	add	r3, r2
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fc1b 	bl	800a128 <ld_word>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	617b      	str	r3, [r7, #20]
			break;
 800a8f6:	e025      	b.n	800a944 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6a1a      	ldr	r2, [r3, #32]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	09db      	lsrs	r3, r3, #7
 800a900:	4413      	add	r3, r2
 800a902:	4619      	mov	r1, r3
 800a904:	6938      	ldr	r0, [r7, #16]
 800a906:	f7ff febf 	bl	800a688 <move_window>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d118      	bne.n	800a942 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a91e:	4413      	add	r3, r2
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fc19 	bl	800a158 <ld_dword>
 800a926:	4603      	mov	r3, r0
 800a928:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a92c:	617b      	str	r3, [r7, #20]
			break;
 800a92e:	e009      	b.n	800a944 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a930:	2301      	movs	r3, #1
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	e006      	b.n	800a944 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a936:	bf00      	nop
 800a938:	e004      	b.n	800a944 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a93a:	bf00      	nop
 800a93c:	e002      	b.n	800a944 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a93e:	bf00      	nop
 800a940:	e000      	b.n	800a944 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a942:	bf00      	nop
		}
	}

	return val;
 800a944:	697b      	ldr	r3, [r7, #20]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3718      	adds	r7, #24
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a94e:	b590      	push	{r4, r7, lr}
 800a950:	b089      	sub	sp, #36	; 0x24
 800a952:	af00      	add	r7, sp, #0
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a95a:	2302      	movs	r3, #2
 800a95c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b01      	cmp	r3, #1
 800a962:	f240 80d2 	bls.w	800ab0a <put_fat+0x1bc>
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	f080 80cc 	bcs.w	800ab0a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	781b      	ldrb	r3, [r3, #0]
 800a976:	2b03      	cmp	r3, #3
 800a978:	f000 8096 	beq.w	800aaa8 <put_fat+0x15a>
 800a97c:	2b03      	cmp	r3, #3
 800a97e:	f300 80cd 	bgt.w	800ab1c <put_fat+0x1ce>
 800a982:	2b01      	cmp	r3, #1
 800a984:	d002      	beq.n	800a98c <put_fat+0x3e>
 800a986:	2b02      	cmp	r3, #2
 800a988:	d06e      	beq.n	800aa68 <put_fat+0x11a>
 800a98a:	e0c7      	b.n	800ab1c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	61bb      	str	r3, [r7, #24]
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	085b      	lsrs	r3, r3, #1
 800a994:	69ba      	ldr	r2, [r7, #24]
 800a996:	4413      	add	r3, r2
 800a998:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6a1a      	ldr	r2, [r3, #32]
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	0a5b      	lsrs	r3, r3, #9
 800a9a2:	4413      	add	r3, r2
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f7ff fe6e 	bl	800a688 <move_window>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9b0:	7ffb      	ldrb	r3, [r7, #31]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f040 80ab 	bne.w	800ab0e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	1c59      	adds	r1, r3, #1
 800a9c2:	61b9      	str	r1, [r7, #24]
 800a9c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9c8:	4413      	add	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <put_fat+0xa4>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b25b      	sxtb	r3, r3
 800a9dc:	f003 030f 	and.w	r3, r3, #15
 800a9e0:	b25a      	sxtb	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	011b      	lsls	r3, r3, #4
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	b25b      	sxtb	r3, r3
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	e001      	b.n	800a9f6 <put_fat+0xa8>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a1a      	ldr	r2, [r3, #32]
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	0a5b      	lsrs	r3, r3, #9
 800aa08:	4413      	add	r3, r2
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7ff fe3b 	bl	800a688 <move_window>
 800aa12:	4603      	mov	r3, r0
 800aa14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa16:	7ffb      	ldrb	r3, [r7, #31]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d17a      	bne.n	800ab12 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa28:	4413      	add	r3, r2
 800aa2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <put_fat+0xf0>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	091b      	lsrs	r3, r3, #4
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	e00e      	b.n	800aa5c <put_fat+0x10e>
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	b25b      	sxtb	r3, r3
 800aa44:	f023 030f 	bic.w	r3, r3, #15
 800aa48:	b25a      	sxtb	r2, r3
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	b25b      	sxtb	r3, r3
 800aa50:	f003 030f 	and.w	r3, r3, #15
 800aa54:	b25b      	sxtb	r3, r3
 800aa56:	4313      	orrs	r3, r2
 800aa58:	b25b      	sxtb	r3, r3
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	70da      	strb	r2, [r3, #3]
			break;
 800aa66:	e059      	b.n	800ab1c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a1a      	ldr	r2, [r3, #32]
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	0a1b      	lsrs	r3, r3, #8
 800aa70:	4413      	add	r3, r2
 800aa72:	4619      	mov	r1, r3
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff fe07 	bl	800a688 <move_window>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa7e:	7ffb      	ldrb	r3, [r7, #31]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d148      	bne.n	800ab16 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aa92:	4413      	add	r3, r2
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	b292      	uxth	r2, r2
 800aa98:	4611      	mov	r1, r2
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff fb7f 	bl	800a19e <st_word>
			fs->wflag = 1;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	70da      	strb	r2, [r3, #3]
			break;
 800aaa6:	e039      	b.n	800ab1c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a1a      	ldr	r2, [r3, #32]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	09db      	lsrs	r3, r3, #7
 800aab0:	4413      	add	r3, r2
 800aab2:	4619      	mov	r1, r3
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f7ff fde7 	bl	800a688 <move_window>
 800aaba:	4603      	mov	r3, r0
 800aabc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aabe:	7ffb      	ldrb	r3, [r7, #31]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d12a      	bne.n	800ab1a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aad8:	4413      	add	r3, r2
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff fb3c 	bl	800a158 <ld_dword>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aae6:	4323      	orrs	r3, r4
 800aae8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aaf8:	4413      	add	r3, r2
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff fb69 	bl	800a1d4 <st_dword>
			fs->wflag = 1;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2201      	movs	r2, #1
 800ab06:	70da      	strb	r2, [r3, #3]
			break;
 800ab08:	e008      	b.n	800ab1c <put_fat+0x1ce>
		}
	}
 800ab0a:	bf00      	nop
 800ab0c:	e006      	b.n	800ab1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab0e:	bf00      	nop
 800ab10:	e004      	b.n	800ab1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab12:	bf00      	nop
 800ab14:	e002      	b.n	800ab1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab16:	bf00      	nop
 800ab18:	e000      	b.n	800ab1c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab1a:	bf00      	nop
	return res;
 800ab1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3724      	adds	r7, #36	; 0x24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd90      	pop	{r4, r7, pc}

0800ab26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b088      	sub	sp, #32
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	60f8      	str	r0, [r7, #12]
 800ab2e:	60b9      	str	r1, [r7, #8]
 800ab30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d904      	bls.n	800ab4c <remove_chain+0x26>
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d301      	bcc.n	800ab50 <remove_chain+0x2a>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	e04b      	b.n	800abe8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00c      	beq.n	800ab70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab56:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	69b8      	ldr	r0, [r7, #24]
 800ab5e:	f7ff fef6 	bl	800a94e <put_fat>
 800ab62:	4603      	mov	r3, r0
 800ab64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab66:	7ffb      	ldrb	r3, [r7, #31]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <remove_chain+0x4a>
 800ab6c:	7ffb      	ldrb	r3, [r7, #31]
 800ab6e:	e03b      	b.n	800abe8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab70:	68b9      	ldr	r1, [r7, #8]
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff fe43 	bl	800a7fe <get_fat>
 800ab78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d031      	beq.n	800abe4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <remove_chain+0x64>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e02e      	b.n	800abe8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab90:	d101      	bne.n	800ab96 <remove_chain+0x70>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e028      	b.n	800abe8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab96:	2200      	movs	r2, #0
 800ab98:	68b9      	ldr	r1, [r7, #8]
 800ab9a:	69b8      	ldr	r0, [r7, #24]
 800ab9c:	f7ff fed7 	bl	800a94e <put_fat>
 800aba0:	4603      	mov	r3, r0
 800aba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aba4:	7ffb      	ldrb	r3, [r7, #31]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <remove_chain+0x88>
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	e01c      	b.n	800abe8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	691a      	ldr	r2, [r3, #16]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	695b      	ldr	r3, [r3, #20]
 800abb6:	3b02      	subs	r3, #2
 800abb8:	429a      	cmp	r2, r3
 800abba:	d20b      	bcs.n	800abd4 <remove_chain+0xae>
			fs->free_clst++;
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	1c5a      	adds	r2, r3, #1
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	791b      	ldrb	r3, [r3, #4]
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	695b      	ldr	r3, [r3, #20]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d3c6      	bcc.n	800ab70 <remove_chain+0x4a>
 800abe2:	e000      	b.n	800abe6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800abe4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3720      	adds	r7, #32
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10d      	bne.n	800ac22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d004      	beq.n	800ac1c <create_chain+0x2c>
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d31b      	bcc.n	800ac54 <create_chain+0x64>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	e018      	b.n	800ac54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fdea 	bl	800a7fe <get_fat>
 800ac2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d801      	bhi.n	800ac36 <create_chain+0x46>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e070      	b.n	800ad18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3c:	d101      	bne.n	800ac42 <create_chain+0x52>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	e06a      	b.n	800ad18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	695b      	ldr	r3, [r3, #20]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d201      	bcs.n	800ac50 <create_chain+0x60>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	e063      	b.n	800ad18 <create_chain+0x128>
		scl = clst;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	69fa      	ldr	r2, [r7, #28]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d307      	bcc.n	800ac78 <create_chain+0x88>
				ncl = 2;
 800ac68:	2302      	movs	r3, #2
 800ac6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d901      	bls.n	800ac78 <create_chain+0x88>
 800ac74:	2300      	movs	r3, #0
 800ac76:	e04f      	b.n	800ad18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ac78:	69f9      	ldr	r1, [r7, #28]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff fdbf 	bl	800a7fe <get_fat>
 800ac80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00e      	beq.n	800aca6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d003      	beq.n	800ac96 <create_chain+0xa6>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d101      	bne.n	800ac9a <create_chain+0xaa>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	e03e      	b.n	800ad18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d1da      	bne.n	800ac58 <create_chain+0x68>
 800aca2:	2300      	movs	r3, #0
 800aca4:	e038      	b.n	800ad18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aca6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aca8:	f04f 32ff 	mov.w	r2, #4294967295
 800acac:	69f9      	ldr	r1, [r7, #28]
 800acae:	6938      	ldr	r0, [r7, #16]
 800acb0:	f7ff fe4d 	bl	800a94e <put_fat>
 800acb4:	4603      	mov	r3, r0
 800acb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d109      	bne.n	800acd2 <create_chain+0xe2>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d006      	beq.n	800acd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800acc4:	69fa      	ldr	r2, [r7, #28]
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6938      	ldr	r0, [r7, #16]
 800acca:	f7ff fe40 	bl	800a94e <put_fat>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d116      	bne.n	800ad06 <create_chain+0x116>
		fs->last_clst = ncl;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	69fa      	ldr	r2, [r7, #28]
 800acdc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	691a      	ldr	r2, [r3, #16]
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	3b02      	subs	r3, #2
 800ace8:	429a      	cmp	r2, r3
 800acea:	d804      	bhi.n	800acf6 <create_chain+0x106>
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	1e5a      	subs	r2, r3, #1
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	791b      	ldrb	r3, [r3, #4]
 800acfa:	f043 0301 	orr.w	r3, r3, #1
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	711a      	strb	r2, [r3, #4]
 800ad04:	e007      	b.n	800ad16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d102      	bne.n	800ad12 <create_chain+0x122>
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad10:	e000      	b.n	800ad14 <create_chain+0x124>
 800ad12:	2301      	movs	r3, #1
 800ad14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad16:	69fb      	ldr	r3, [r7, #28]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	3304      	adds	r3, #4
 800ad36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	8952      	ldrh	r2, [r2, #10]
 800ad40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	1d1a      	adds	r2, r3, #4
 800ad4a:	613a      	str	r2, [r7, #16]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d101      	bne.n	800ad5a <clmt_clust+0x3a>
 800ad56:	2300      	movs	r3, #0
 800ad58:	e010      	b.n	800ad7c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d307      	bcc.n	800ad72 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	617b      	str	r3, [r7, #20]
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad70:	e7e9      	b.n	800ad46 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ad72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	4413      	add	r3, r2
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	371c      	adds	r7, #28
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad9e:	d204      	bcs.n	800adaa <dir_sdi+0x22>
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f003 031f 	and.w	r3, r3, #31
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d001      	beq.n	800adae <dir_sdi+0x26>
		return FR_INT_ERR;
 800adaa:	2302      	movs	r3, #2
 800adac:	e063      	b.n	800ae76 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d106      	bne.n	800adce <dir_sdi+0x46>
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d902      	bls.n	800adce <dir_sdi+0x46>
		clst = fs->dirbase;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10c      	bne.n	800adee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	095b      	lsrs	r3, r3, #5
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	8912      	ldrh	r2, [r2, #8]
 800addc:	4293      	cmp	r3, r2
 800adde:	d301      	bcc.n	800ade4 <dir_sdi+0x5c>
 800ade0:	2302      	movs	r3, #2
 800ade2:	e048      	b.n	800ae76 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	61da      	str	r2, [r3, #28]
 800adec:	e029      	b.n	800ae42 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	895b      	ldrh	r3, [r3, #10]
 800adf2:	025b      	lsls	r3, r3, #9
 800adf4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800adf6:	e019      	b.n	800ae2c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6979      	ldr	r1, [r7, #20]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fcfe 	bl	800a7fe <get_fat>
 800ae02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae0a:	d101      	bne.n	800ae10 <dir_sdi+0x88>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e032      	b.n	800ae76 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d904      	bls.n	800ae20 <dir_sdi+0x98>
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d301      	bcc.n	800ae24 <dir_sdi+0x9c>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e028      	b.n	800ae76 <dir_sdi+0xee>
			ofs -= csz;
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae2c:	683a      	ldr	r2, [r7, #0]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d2e1      	bcs.n	800adf8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae34:	6979      	ldr	r1, [r7, #20]
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f7ff fcc2 	bl	800a7c0 <clust2sect>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d101      	bne.n	800ae54 <dir_sdi+0xcc>
 800ae50:	2302      	movs	r3, #2
 800ae52:	e010      	b.n	800ae76 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	0a5b      	lsrs	r3, r3, #9
 800ae5c:	441a      	add	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae6e:	441a      	add	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b086      	sub	sp, #24
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	3320      	adds	r3, #32
 800ae94:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <dir_next+0x28>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aea4:	d301      	bcc.n	800aeaa <dir_next+0x2c>
 800aea6:	2304      	movs	r3, #4
 800aea8:	e0aa      	b.n	800b000 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f040 8098 	bne.w	800afe6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10b      	bne.n	800aee0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	8912      	ldrh	r2, [r2, #8]
 800aed0:	4293      	cmp	r3, r2
 800aed2:	f0c0 8088 	bcc.w	800afe6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	61da      	str	r2, [r3, #28]
 800aedc:	2304      	movs	r3, #4
 800aede:	e08f      	b.n	800b000 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	0a5b      	lsrs	r3, r3, #9
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	8952      	ldrh	r2, [r2, #10]
 800aee8:	3a01      	subs	r2, #1
 800aeea:	4013      	ands	r3, r2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d17a      	bne.n	800afe6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	4619      	mov	r1, r3
 800aef8:	4610      	mov	r0, r2
 800aefa:	f7ff fc80 	bl	800a7fe <get_fat>
 800aefe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d801      	bhi.n	800af0a <dir_next+0x8c>
 800af06:	2302      	movs	r3, #2
 800af08:	e07a      	b.n	800b000 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d101      	bne.n	800af16 <dir_next+0x98>
 800af12:	2301      	movs	r3, #1
 800af14:	e074      	b.n	800b000 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d358      	bcc.n	800afd2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d104      	bne.n	800af30 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	61da      	str	r2, [r3, #28]
 800af2c:	2304      	movs	r3, #4
 800af2e:	e067      	b.n	800b000 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	4619      	mov	r1, r3
 800af38:	4610      	mov	r0, r2
 800af3a:	f7ff fe59 	bl	800abf0 <create_chain>
 800af3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <dir_next+0xcc>
 800af46:	2307      	movs	r3, #7
 800af48:	e05a      	b.n	800b000 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <dir_next+0xd6>
 800af50:	2302      	movs	r3, #2
 800af52:	e055      	b.n	800b000 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5a:	d101      	bne.n	800af60 <dir_next+0xe2>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e04f      	b.n	800b000 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff fb4d 	bl	800a600 <sync_window>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <dir_next+0xf2>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e047      	b.n	800b000 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3330      	adds	r3, #48	; 0x30
 800af74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff f977 	bl	800a26e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af80:	2300      	movs	r3, #0
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7ff fc1a 	bl	800a7c0 <clust2sect>
 800af8c:	4602      	mov	r2, r0
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c
 800af92:	e012      	b.n	800afba <dir_next+0x13c>
						fs->wflag = 1;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2201      	movs	r2, #1
 800af98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff fb30 	bl	800a600 <sync_window>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <dir_next+0x12c>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e02a      	b.n	800b000 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	3301      	adds	r3, #1
 800afae:	613b      	str	r3, [r7, #16]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb4:	1c5a      	adds	r2, r3, #1
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	62da      	str	r2, [r3, #44]	; 0x2c
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	895b      	ldrh	r3, [r3, #10]
 800afbe:	461a      	mov	r2, r3
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d3e6      	bcc.n	800af94 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	1ad2      	subs	r2, r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800afd8:	6979      	ldr	r1, [r7, #20]
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fbf0 	bl	800a7c0 <clust2sect>
 800afe0:	4602      	mov	r2, r0
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	441a      	add	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b018:	2100      	movs	r1, #0
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f7ff feb4 	bl	800ad88 <dir_sdi>
 800b020:	4603      	mov	r3, r0
 800b022:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d12b      	bne.n	800b082 <dir_alloc+0x7a>
		n = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	4619      	mov	r1, r3
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f7ff fb27 	bl	800a688 <move_window>
 800b03a:	4603      	mov	r3, r0
 800b03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11d      	bne.n	800b080 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2be5      	cmp	r3, #229	; 0xe5
 800b04c:	d004      	beq.n	800b058 <dir_alloc+0x50>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	3301      	adds	r3, #1
 800b05c:	613b      	str	r3, [r7, #16]
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d102      	bne.n	800b06c <dir_alloc+0x64>
 800b066:	e00c      	b.n	800b082 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b068:	2300      	movs	r3, #0
 800b06a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b06c:	2101      	movs	r1, #1
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff ff05 	bl	800ae7e <dir_next>
 800b074:	4603      	mov	r3, r0
 800b076:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0d7      	beq.n	800b02e <dir_alloc+0x26>
 800b07e:	e000      	b.n	800b082 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b080:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b082:	7dfb      	ldrb	r3, [r7, #23]
 800b084:	2b04      	cmp	r3, #4
 800b086:	d101      	bne.n	800b08c <dir_alloc+0x84>
 800b088:	2307      	movs	r3, #7
 800b08a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b084      	sub	sp, #16
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	331a      	adds	r3, #26
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff f83f 	bl	800a128 <ld_word>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b03      	cmp	r3, #3
 800b0b4:	d109      	bne.n	800b0ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff f834 	bl	800a128 <ld_word>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	041b      	lsls	r3, r3, #16
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	331a      	adds	r3, #26
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff f857 	bl	800a19e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d109      	bne.n	800b10c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f103 0214 	add.w	r2, r3, #20
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	0c1b      	lsrs	r3, r3, #16
 800b102:	b29b      	uxth	r3, r3
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f7ff f849 	bl	800a19e <st_word>
	}
}
 800b10c:	bf00      	nop
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b122:	2100      	movs	r1, #0
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff fe2f 	bl	800ad88 <dir_sdi>
 800b12a:	4603      	mov	r3, r0
 800b12c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <dir_find+0x24>
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	e03e      	b.n	800b1b6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	4619      	mov	r1, r3
 800b13e:	6938      	ldr	r0, [r7, #16]
 800b140:	f7ff faa2 	bl	800a688 <move_window>
 800b144:	4603      	mov	r3, r0
 800b146:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d12f      	bne.n	800b1ae <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <dir_find+0x4e>
 800b15c:	2304      	movs	r3, #4
 800b15e:	75fb      	strb	r3, [r7, #23]
 800b160:	e028      	b.n	800b1b4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	330b      	adds	r3, #11
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
 800b178:	330b      	adds	r3, #11
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0308 	and.w	r3, r3, #8
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <dir_find+0x86>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a18      	ldr	r0, [r3, #32]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3324      	adds	r3, #36	; 0x24
 800b18c:	220b      	movs	r2, #11
 800b18e:	4619      	mov	r1, r3
 800b190:	f7ff f888 	bl	800a2a4 <mem_cmp>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00b      	beq.n	800b1b2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b19a:	2100      	movs	r1, #0
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff fe6e 	bl	800ae7e <dir_next>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0c5      	beq.n	800b138 <dir_find+0x24>
 800b1ac:	e002      	b.n	800b1b4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b1ae:	bf00      	nop
 800b1b0:	e000      	b.n	800b1b4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b1b2:	bf00      	nop

	return res;
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff ff1a 	bl	800b008 <dir_alloc>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d11c      	bne.n	800b218 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	68b8      	ldr	r0, [r7, #8]
 800b1e6:	f7ff fa4f 	bl	800a688 <move_window>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d111      	bne.n	800b218 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f7ff f836 	bl	800a26e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a18      	ldr	r0, [r3, #32]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3324      	adds	r3, #36	; 0x24
 800b20a:	220b      	movs	r2, #11
 800b20c:	4619      	mov	r1, r3
 800b20e:	f7ff f80d 	bl	800a22c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	2201      	movs	r2, #1
 800b216:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	3324      	adds	r3, #36	; 0x24
 800b238:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b23a:	220b      	movs	r2, #11
 800b23c:	2120      	movs	r1, #32
 800b23e:	68b8      	ldr	r0, [r7, #8]
 800b240:	f7ff f815 	bl	800a26e <mem_set>
	si = i = 0; ni = 8;
 800b244:	2300      	movs	r3, #0
 800b246:	613b      	str	r3, [r7, #16]
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	2308      	movs	r3, #8
 800b24e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	61fa      	str	r2, [r7, #28]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b25e:	7efb      	ldrb	r3, [r7, #27]
 800b260:	2b20      	cmp	r3, #32
 800b262:	d94e      	bls.n	800b302 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b264:	7efb      	ldrb	r3, [r7, #27]
 800b266:	2b2f      	cmp	r3, #47	; 0x2f
 800b268:	d006      	beq.n	800b278 <create_name+0x54>
 800b26a:	7efb      	ldrb	r3, [r7, #27]
 800b26c:	2b5c      	cmp	r3, #92	; 0x5c
 800b26e:	d110      	bne.n	800b292 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b270:	e002      	b.n	800b278 <create_name+0x54>
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	3301      	adds	r3, #1
 800b276:	61fb      	str	r3, [r7, #28]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b2f      	cmp	r3, #47	; 0x2f
 800b282:	d0f6      	beq.n	800b272 <create_name+0x4e>
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	4413      	add	r3, r2
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b5c      	cmp	r3, #92	; 0x5c
 800b28e:	d0f0      	beq.n	800b272 <create_name+0x4e>
			break;
 800b290:	e038      	b.n	800b304 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b292:	7efb      	ldrb	r3, [r7, #27]
 800b294:	2b2e      	cmp	r3, #46	; 0x2e
 800b296:	d003      	beq.n	800b2a0 <create_name+0x7c>
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d30c      	bcc.n	800b2ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	2b0b      	cmp	r3, #11
 800b2a4:	d002      	beq.n	800b2ac <create_name+0x88>
 800b2a6:	7efb      	ldrb	r3, [r7, #27]
 800b2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2aa:	d001      	beq.n	800b2b0 <create_name+0x8c>
 800b2ac:	2306      	movs	r3, #6
 800b2ae:	e044      	b.n	800b33a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	613b      	str	r3, [r7, #16]
 800b2b4:	230b      	movs	r3, #11
 800b2b6:	617b      	str	r3, [r7, #20]
			continue;
 800b2b8:	e022      	b.n	800b300 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b2ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	da04      	bge.n	800b2cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b2c2:	7efb      	ldrb	r3, [r7, #27]
 800b2c4:	3b80      	subs	r3, #128	; 0x80
 800b2c6:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <create_name+0x120>)
 800b2c8:	5cd3      	ldrb	r3, [r2, r3]
 800b2ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b2cc:	7efb      	ldrb	r3, [r7, #27]
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	481d      	ldr	r0, [pc, #116]	; (800b348 <create_name+0x124>)
 800b2d2:	f7ff f80e 	bl	800a2f2 <chk_chr>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <create_name+0xbc>
 800b2dc:	2306      	movs	r3, #6
 800b2de:	e02c      	b.n	800b33a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b2e0:	7efb      	ldrb	r3, [r7, #27]
 800b2e2:	2b60      	cmp	r3, #96	; 0x60
 800b2e4:	d905      	bls.n	800b2f2 <create_name+0xce>
 800b2e6:	7efb      	ldrb	r3, [r7, #27]
 800b2e8:	2b7a      	cmp	r3, #122	; 0x7a
 800b2ea:	d802      	bhi.n	800b2f2 <create_name+0xce>
 800b2ec:	7efb      	ldrb	r3, [r7, #27]
 800b2ee:	3b20      	subs	r3, #32
 800b2f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	613a      	str	r2, [r7, #16]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	7efa      	ldrb	r2, [r7, #27]
 800b2fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b300:	e7a6      	b.n	800b250 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b302:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	441a      	add	r2, r3
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d101      	bne.n	800b318 <create_name+0xf4>
 800b314:	2306      	movs	r3, #6
 800b316:	e010      	b.n	800b33a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2be5      	cmp	r3, #229	; 0xe5
 800b31e:	d102      	bne.n	800b326 <create_name+0x102>
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	2205      	movs	r2, #5
 800b324:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b326:	7efb      	ldrb	r3, [r7, #27]
 800b328:	2b20      	cmp	r3, #32
 800b32a:	d801      	bhi.n	800b330 <create_name+0x10c>
 800b32c:	2204      	movs	r2, #4
 800b32e:	e000      	b.n	800b332 <create_name+0x10e>
 800b330:	2200      	movs	r2, #0
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	330b      	adds	r3, #11
 800b336:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b338:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	08012c64 	.word	0x08012c64
 800b348:	080129ec 	.word	0x080129ec

0800b34c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b360:	e002      	b.n	800b368 <follow_path+0x1c>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	3301      	adds	r3, #1
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b2f      	cmp	r3, #47	; 0x2f
 800b36e:	d0f8      	beq.n	800b362 <follow_path+0x16>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b5c      	cmp	r3, #92	; 0x5c
 800b376:	d0f4      	beq.n	800b362 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	2200      	movs	r2, #0
 800b37c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b1f      	cmp	r3, #31
 800b384:	d80a      	bhi.n	800b39c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2280      	movs	r2, #128	; 0x80
 800b38a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b38e:	2100      	movs	r1, #0
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7ff fcf9 	bl	800ad88 <dir_sdi>
 800b396:	4603      	mov	r3, r0
 800b398:	75fb      	strb	r3, [r7, #23]
 800b39a:	e043      	b.n	800b424 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b39c:	463b      	mov	r3, r7
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7ff ff3f 	bl	800b224 <create_name>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b3aa:	7dfb      	ldrb	r3, [r7, #23]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d134      	bne.n	800b41a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff feaf 	bl	800b114 <dir_find>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b3c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00a      	beq.n	800b3de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	2b04      	cmp	r3, #4
 800b3cc:	d127      	bne.n	800b41e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b3ce:	7afb      	ldrb	r3, [r7, #11]
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d122      	bne.n	800b41e <follow_path+0xd2>
 800b3d8:	2305      	movs	r3, #5
 800b3da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b3dc:	e01f      	b.n	800b41e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d11c      	bne.n	800b422 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	799b      	ldrb	r3, [r3, #6]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d102      	bne.n	800b3fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b3f4:	2305      	movs	r3, #5
 800b3f6:	75fb      	strb	r3, [r7, #23]
 800b3f8:	e014      	b.n	800b424 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b408:	4413      	add	r3, r2
 800b40a:	4619      	mov	r1, r3
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f7ff fe42 	bl	800b096 <ld_clust>
 800b412:	4602      	mov	r2, r0
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b418:	e7c0      	b.n	800b39c <follow_path+0x50>
			if (res != FR_OK) break;
 800b41a:	bf00      	nop
 800b41c:	e002      	b.n	800b424 <follow_path+0xd8>
				break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b422:	bf00      	nop
			}
		}
	}

	return res;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b42e:	b480      	push	{r7}
 800b430:	b087      	sub	sp, #28
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b436:	f04f 33ff 	mov.w	r3, #4294967295
 800b43a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d031      	beq.n	800b4a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	617b      	str	r3, [r7, #20]
 800b44a:	e002      	b.n	800b452 <get_ldnumber+0x24>
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	3301      	adds	r3, #1
 800b450:	617b      	str	r3, [r7, #20]
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	2b20      	cmp	r3, #32
 800b458:	d903      	bls.n	800b462 <get_ldnumber+0x34>
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	2b3a      	cmp	r3, #58	; 0x3a
 800b460:	d1f4      	bne.n	800b44c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b3a      	cmp	r3, #58	; 0x3a
 800b468:	d11c      	bne.n	800b4a4 <get_ldnumber+0x76>
			tp = *path;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	60fa      	str	r2, [r7, #12]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	3b30      	subs	r3, #48	; 0x30
 800b47a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	2b09      	cmp	r3, #9
 800b480:	d80e      	bhi.n	800b4a0 <get_ldnumber+0x72>
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	429a      	cmp	r2, r3
 800b488:	d10a      	bne.n	800b4a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d107      	bne.n	800b4a0 <get_ldnumber+0x72>
					vol = (int)i;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3301      	adds	r3, #1
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	e002      	b.n	800b4aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b4a8:	693b      	ldr	r3, [r7, #16]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	371c      	adds	r7, #28
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	70da      	strb	r2, [r3, #3]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff f8d8 	bl	800a688 <move_window>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <check_fs+0x2a>
 800b4de:	2304      	movs	r3, #4
 800b4e0:	e038      	b.n	800b554 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	3330      	adds	r3, #48	; 0x30
 800b4e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fe1c 	bl	800a128 <ld_word>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d001      	beq.n	800b500 <check_fs+0x48>
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e029      	b.n	800b554 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b506:	2be9      	cmp	r3, #233	; 0xe9
 800b508:	d009      	beq.n	800b51e <check_fs+0x66>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b510:	2beb      	cmp	r3, #235	; 0xeb
 800b512:	d11e      	bne.n	800b552 <check_fs+0x9a>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b51a:	2b90      	cmp	r3, #144	; 0x90
 800b51c:	d119      	bne.n	800b552 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3330      	adds	r3, #48	; 0x30
 800b522:	3336      	adds	r3, #54	; 0x36
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe fe17 	bl	800a158 <ld_dword>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b530:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <check_fs+0xa4>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d101      	bne.n	800b53a <check_fs+0x82>
 800b536:	2300      	movs	r3, #0
 800b538:	e00c      	b.n	800b554 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3330      	adds	r3, #48	; 0x30
 800b53e:	3352      	adds	r3, #82	; 0x52
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fe09 	bl	800a158 <ld_dword>
 800b546:	4603      	mov	r3, r0
 800b548:	4a05      	ldr	r2, [pc, #20]	; (800b560 <check_fs+0xa8>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d101      	bne.n	800b552 <check_fs+0x9a>
 800b54e:	2300      	movs	r3, #0
 800b550:	e000      	b.n	800b554 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b552:	2302      	movs	r3, #2
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	00544146 	.word	0x00544146
 800b560:	33544146 	.word	0x33544146

0800b564 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b096      	sub	sp, #88	; 0x58
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f7ff ff58 	bl	800b42e <get_ldnumber>
 800b57e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	2b00      	cmp	r3, #0
 800b584:	da01      	bge.n	800b58a <find_volume+0x26>
 800b586:	230b      	movs	r3, #11
 800b588:	e22d      	b.n	800b9e6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b58a:	4aa1      	ldr	r2, [pc, #644]	; (800b810 <find_volume+0x2ac>)
 800b58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b592:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	2b00      	cmp	r3, #0
 800b598:	d101      	bne.n	800b59e <find_volume+0x3a>
 800b59a:	230c      	movs	r3, #12
 800b59c:	e223      	b.n	800b9e6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f023 0301 	bic.w	r3, r3, #1
 800b5aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01a      	beq.n	800b5ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b6:	785b      	ldrb	r3, [r3, #1]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe fd17 	bl	8009fec <disk_status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b5c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10c      	bne.n	800b5ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d007      	beq.n	800b5e6 <find_volume+0x82>
 800b5d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b5da:	f003 0304 	and.w	r3, r3, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b5e2:	230a      	movs	r3, #10
 800b5e4:	e1ff      	b.n	800b9e6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e1fd      	b.n	800b9e6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b5f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fa:	785b      	ldrb	r3, [r3, #1]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe fd0f 	bl	800a020 <disk_initialize>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b614:	2303      	movs	r3, #3
 800b616:	e1e6      	b.n	800b9e6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b618:	79fb      	ldrb	r3, [r7, #7]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d007      	beq.n	800b62e <find_volume+0xca>
 800b61e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b622:	f003 0304 	and.w	r3, r3, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b62a:	230a      	movs	r3, #10
 800b62c:	e1db      	b.n	800b9e6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b636:	f7ff ff3f 	bl	800b4b8 <check_fs>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b644:	2b02      	cmp	r3, #2
 800b646:	d149      	bne.n	800b6dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b648:	2300      	movs	r3, #0
 800b64a:	643b      	str	r3, [r7, #64]	; 0x40
 800b64c:	e01e      	b.n	800b68c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b65c:	4413      	add	r3, r2
 800b65e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	3304      	adds	r3, #4
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d006      	beq.n	800b678 <find_volume+0x114>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	3308      	adds	r3, #8
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe fd72 	bl	800a158 <ld_dword>
 800b674:	4602      	mov	r2, r0
 800b676:	e000      	b.n	800b67a <find_volume+0x116>
 800b678:	2200      	movs	r2, #0
 800b67a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	3358      	adds	r3, #88	; 0x58
 800b680:	443b      	add	r3, r7
 800b682:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b688:	3301      	adds	r3, #1
 800b68a:	643b      	str	r3, [r7, #64]	; 0x40
 800b68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d9dd      	bls.n	800b64e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b692:	2300      	movs	r3, #0
 800b694:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <find_volume+0x13e>
 800b69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	3358      	adds	r3, #88	; 0x58
 800b6a8:	443b      	add	r3, r7
 800b6aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b6ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b6b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <find_volume+0x15e>
 800b6b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b6ba:	f7ff fefd 	bl	800b4b8 <check_fs>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	e000      	b.n	800b6c4 <find_volume+0x160>
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d905      	bls.n	800b6dc <find_volume+0x178>
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800b6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d8:	2b03      	cmp	r3, #3
 800b6da:	d9e2      	bls.n	800b6a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d101      	bne.n	800b6e8 <find_volume+0x184>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e17e      	b.n	800b9e6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b6e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d901      	bls.n	800b6f4 <find_volume+0x190>
 800b6f0:	230d      	movs	r3, #13
 800b6f2:	e178      	b.n	800b9e6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f6:	3330      	adds	r3, #48	; 0x30
 800b6f8:	330b      	adds	r3, #11
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe fd14 	bl	800a128 <ld_word>
 800b700:	4603      	mov	r3, r0
 800b702:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b706:	d001      	beq.n	800b70c <find_volume+0x1a8>
 800b708:	230d      	movs	r3, #13
 800b70a:	e16c      	b.n	800b9e6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	3330      	adds	r3, #48	; 0x30
 800b710:	3316      	adds	r3, #22
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fd08 	bl	800a128 <ld_word>
 800b718:	4603      	mov	r3, r0
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b71c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <find_volume+0x1cc>
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	3330      	adds	r3, #48	; 0x30
 800b726:	3324      	adds	r3, #36	; 0x24
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe fd15 	bl	800a158 <ld_dword>
 800b72e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b734:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b738:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b742:	789b      	ldrb	r3, [r3, #2]
 800b744:	2b01      	cmp	r3, #1
 800b746:	d005      	beq.n	800b754 <find_volume+0x1f0>
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	789b      	ldrb	r3, [r3, #2]
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d001      	beq.n	800b754 <find_volume+0x1f0>
 800b750:	230d      	movs	r3, #13
 800b752:	e148      	b.n	800b9e6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	789b      	ldrb	r3, [r3, #2]
 800b758:	461a      	mov	r2, r3
 800b75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75c:	fb02 f303 	mul.w	r3, r2, r3
 800b760:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b768:	b29a      	uxth	r2, r3
 800b76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	895b      	ldrh	r3, [r3, #10]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d008      	beq.n	800b788 <find_volume+0x224>
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	895b      	ldrh	r3, [r3, #10]
 800b780:	3b01      	subs	r3, #1
 800b782:	4013      	ands	r3, r2
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <find_volume+0x228>
 800b788:	230d      	movs	r3, #13
 800b78a:	e12c      	b.n	800b9e6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78e:	3330      	adds	r3, #48	; 0x30
 800b790:	3311      	adds	r3, #17
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fcc8 	bl	800a128 <ld_word>
 800b798:	4603      	mov	r3, r0
 800b79a:	461a      	mov	r2, r3
 800b79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	891b      	ldrh	r3, [r3, #8]
 800b7a4:	f003 030f 	and.w	r3, r3, #15
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <find_volume+0x24e>
 800b7ae:	230d      	movs	r3, #13
 800b7b0:	e119      	b.n	800b9e6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	3330      	adds	r3, #48	; 0x30
 800b7b6:	3313      	adds	r3, #19
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fcb5 	bl	800a128 <ld_word>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b7c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <find_volume+0x272>
 800b7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ca:	3330      	adds	r3, #48	; 0x30
 800b7cc:	3320      	adds	r3, #32
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fcc2 	bl	800a158 <ld_dword>
 800b7d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	3330      	adds	r3, #48	; 0x30
 800b7da:	330e      	adds	r3, #14
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe fca3 	bl	800a128 <ld_word>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b7e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <find_volume+0x28c>
 800b7ec:	230d      	movs	r3, #13
 800b7ee:	e0fa      	b.n	800b9e6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b7f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	4413      	add	r3, r2
 800b7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7f8:	8912      	ldrh	r2, [r2, #8]
 800b7fa:	0912      	lsrs	r2, r2, #4
 800b7fc:	b292      	uxth	r2, r2
 800b7fe:	4413      	add	r3, r2
 800b800:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b802:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b806:	429a      	cmp	r2, r3
 800b808:	d204      	bcs.n	800b814 <find_volume+0x2b0>
 800b80a:	230d      	movs	r3, #13
 800b80c:	e0eb      	b.n	800b9e6 <find_volume+0x482>
 800b80e:	bf00      	nop
 800b810:	20000bd0 	.word	0x20000bd0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b81c:	8952      	ldrh	r2, [r2, #10]
 800b81e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b822:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <find_volume+0x2ca>
 800b82a:	230d      	movs	r3, #13
 800b82c:	e0db      	b.n	800b9e6 <find_volume+0x482>
		fmt = FS_FAT32;
 800b82e:	2303      	movs	r3, #3
 800b830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d802      	bhi.n	800b844 <find_volume+0x2e0>
 800b83e:	2302      	movs	r3, #2
 800b840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d802      	bhi.n	800b854 <find_volume+0x2f0>
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	1c9a      	adds	r2, r3, #2
 800b858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b85e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b860:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b862:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b866:	441a      	add	r2, r3
 800b868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b86c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	441a      	add	r2, r3
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d11e      	bne.n	800b8bc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b880:	3330      	adds	r3, #48	; 0x30
 800b882:	332a      	adds	r3, #42	; 0x2a
 800b884:	4618      	mov	r0, r3
 800b886:	f7fe fc4f 	bl	800a128 <ld_word>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d001      	beq.n	800b894 <find_volume+0x330>
 800b890:	230d      	movs	r3, #13
 800b892:	e0a8      	b.n	800b9e6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	891b      	ldrh	r3, [r3, #8]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <find_volume+0x33c>
 800b89c:	230d      	movs	r3, #13
 800b89e:	e0a2      	b.n	800b9e6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a2:	3330      	adds	r3, #48	; 0x30
 800b8a4:	332c      	adds	r3, #44	; 0x2c
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fc56 	bl	800a158 <ld_dword>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b4:	695b      	ldr	r3, [r3, #20]
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ba:	e01f      	b.n	800b8fc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8be:	891b      	ldrh	r3, [r3, #8]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <find_volume+0x364>
 800b8c4:	230d      	movs	r3, #13
 800b8c6:	e08e      	b.n	800b9e6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	6a1a      	ldr	r2, [r3, #32]
 800b8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ce:	441a      	add	r2, r3
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d103      	bne.n	800b8e4 <find_volume+0x380>
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	e00a      	b.n	800b8fa <find_volume+0x396>
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	695a      	ldr	r2, [r3, #20]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	4413      	add	r3, r2
 800b8ee:	085a      	lsrs	r2, r3, #1
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b8fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	699a      	ldr	r2, [r3, #24]
 800b900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b902:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b906:	0a5b      	lsrs	r3, r3, #9
 800b908:	429a      	cmp	r2, r3
 800b90a:	d201      	bcs.n	800b910 <find_volume+0x3ac>
 800b90c:	230d      	movs	r3, #13
 800b90e:	e06a      	b.n	800b9e6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f04f 32ff 	mov.w	r2, #4294967295
 800b916:	611a      	str	r2, [r3, #16]
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	691a      	ldr	r2, [r3, #16]
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	2280      	movs	r2, #128	; 0x80
 800b924:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d149      	bne.n	800b9c2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	3330      	adds	r3, #48	; 0x30
 800b932:	3330      	adds	r3, #48	; 0x30
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fbf7 	bl	800a128 <ld_word>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d140      	bne.n	800b9c2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b942:	3301      	adds	r3, #1
 800b944:	4619      	mov	r1, r3
 800b946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b948:	f7fe fe9e 	bl	800a688 <move_window>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d137      	bne.n	800b9c2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	2200      	movs	r2, #0
 800b956:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95a:	3330      	adds	r3, #48	; 0x30
 800b95c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b960:	4618      	mov	r0, r3
 800b962:	f7fe fbe1 	bl	800a128 <ld_word>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b96e:	429a      	cmp	r2, r3
 800b970:	d127      	bne.n	800b9c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	3330      	adds	r3, #48	; 0x30
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fbee 	bl	800a158 <ld_dword>
 800b97c:	4603      	mov	r3, r0
 800b97e:	4a1c      	ldr	r2, [pc, #112]	; (800b9f0 <find_volume+0x48c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d11e      	bne.n	800b9c2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b986:	3330      	adds	r3, #48	; 0x30
 800b988:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fe fbe3 	bl	800a158 <ld_dword>
 800b992:	4603      	mov	r3, r0
 800b994:	4a17      	ldr	r2, [pc, #92]	; (800b9f4 <find_volume+0x490>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d113      	bne.n	800b9c2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	3330      	adds	r3, #48	; 0x30
 800b99e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fbd8 	bl	800a158 <ld_dword>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	3330      	adds	r3, #48	; 0x30
 800b9b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fbce 	bl	800a158 <ld_dword>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b9c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b9ca:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <find_volume+0x494>)
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	4b09      	ldr	r3, [pc, #36]	; (800b9f8 <find_volume+0x494>)
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <find_volume+0x494>)
 800b9d8:	881a      	ldrh	r2, [r3, #0]
 800b9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b9de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b9e0:	f7fe fdea 	bl	800a5b8 <clear_lock>
#endif
	return FR_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3758      	adds	r7, #88	; 0x58
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	41615252 	.word	0x41615252
 800b9f4:	61417272 	.word	0x61417272
 800b9f8:	20000bd4 	.word	0x20000bd4

0800b9fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ba06:	2309      	movs	r3, #9
 800ba08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d01c      	beq.n	800ba4a <validate+0x4e>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d018      	beq.n	800ba4a <validate+0x4e>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d013      	beq.n	800ba4a <validate+0x4e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	889a      	ldrh	r2, [r3, #4]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	88db      	ldrh	r3, [r3, #6]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d10c      	bne.n	800ba4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	785b      	ldrb	r3, [r3, #1]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fad8 	bl	8009fec <disk_status>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <validate+0x4e>
			res = FR_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d102      	bne.n	800ba56 <validate+0x5a>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	e000      	b.n	800ba58 <validate+0x5c>
 800ba56:	2300      	movs	r3, #0
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	6013      	str	r3, [r2, #0]
	return res;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b088      	sub	sp, #32
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	4613      	mov	r3, r2
 800ba74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ba7a:	f107 0310 	add.w	r3, r7, #16
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff fcd5 	bl	800b42e <get_ldnumber>
 800ba84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	da01      	bge.n	800ba90 <f_mount+0x28>
 800ba8c:	230b      	movs	r3, #11
 800ba8e:	e02b      	b.n	800bae8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ba90:	4a17      	ldr	r2, [pc, #92]	; (800baf0 <f_mount+0x88>)
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d005      	beq.n	800baac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800baa0:	69b8      	ldr	r0, [r7, #24]
 800baa2:	f7fe fd89 	bl	800a5b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	490d      	ldr	r1, [pc, #52]	; (800baf0 <f_mount+0x88>)
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <f_mount+0x66>
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d001      	beq.n	800bad2 <f_mount+0x6a>
 800bace:	2300      	movs	r3, #0
 800bad0:	e00a      	b.n	800bae8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bad2:	f107 010c 	add.w	r1, r7, #12
 800bad6:	f107 0308 	add.w	r3, r7, #8
 800bada:	2200      	movs	r2, #0
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff fd41 	bl	800b564 <find_volume>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3720      	adds	r7, #32
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	20000bd0 	.word	0x20000bd0

0800baf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b098      	sub	sp, #96	; 0x60
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4613      	mov	r3, r2
 800bb00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <f_open+0x18>
 800bb08:	2309      	movs	r3, #9
 800bb0a:	e1ad      	b.n	800be68 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bb0c:	79fb      	ldrb	r3, [r7, #7]
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bb14:	79fa      	ldrb	r2, [r7, #7]
 800bb16:	f107 0110 	add.w	r1, r7, #16
 800bb1a:	f107 0308 	add.w	r3, r7, #8
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff fd20 	bl	800b564 <find_volume>
 800bb24:	4603      	mov	r3, r0
 800bb26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bb2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f040 8191 	bne.w	800be56 <f_open+0x362>
		dj.obj.fs = fs;
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	f107 0314 	add.w	r3, r7, #20
 800bb3e:	4611      	mov	r1, r2
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fc03 	bl	800b34c <follow_path>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bb4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d11a      	bne.n	800bb8a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bb54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb58:	b25b      	sxtb	r3, r3
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	da03      	bge.n	800bb66 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bb5e:	2306      	movs	r3, #6
 800bb60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb64:	e011      	b.n	800bb8a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	f023 0301 	bic.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	461a      	mov	r2, r3
 800bb78:	f107 0314 	add.w	r3, r7, #20
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fbd2 	bl	800a328 <chk_lock>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bb8a:	79fb      	ldrb	r3, [r7, #7]
 800bb8c:	f003 031c 	and.w	r3, r3, #28
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d07f      	beq.n	800bc94 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bb94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d017      	beq.n	800bbcc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d10e      	bne.n	800bbc2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bba4:	f7fe fc1c 	bl	800a3e0 <enq_lock>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d006      	beq.n	800bbbc <f_open+0xc8>
 800bbae:	f107 0314 	add.w	r3, r7, #20
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fb03 	bl	800b1be <dir_register>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	e000      	b.n	800bbbe <f_open+0xca>
 800bbbc:	2312      	movs	r3, #18
 800bbbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	f043 0308 	orr.w	r3, r3, #8
 800bbc8:	71fb      	strb	r3, [r7, #7]
 800bbca:	e010      	b.n	800bbee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bbcc:	7ebb      	ldrb	r3, [r7, #26]
 800bbce:	f003 0311 	and.w	r3, r3, #17
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <f_open+0xea>
					res = FR_DENIED;
 800bbd6:	2307      	movs	r3, #7
 800bbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bbdc:	e007      	b.n	800bbee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d002      	beq.n	800bbee <f_open+0xfa>
 800bbe8:	2308      	movs	r3, #8
 800bbea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bbee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d168      	bne.n	800bcc8 <f_open+0x1d4>
 800bbf6:	79fb      	ldrb	r3, [r7, #7]
 800bbf8:	f003 0308 	and.w	r3, r3, #8
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d063      	beq.n	800bcc8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bc00:	f7fd fcb6 	bl	8009570 <get_fattime>
 800bc04:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	330e      	adds	r3, #14
 800bc0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fe fae1 	bl	800a1d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc14:	3316      	adds	r3, #22
 800bc16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fe fadb 	bl	800a1d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	330b      	adds	r3, #11
 800bc22:	2220      	movs	r2, #32
 800bc24:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fa32 	bl	800b096 <ld_clust>
 800bc32:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bc38:	2200      	movs	r2, #0
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7ff fa4a 	bl	800b0d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	331c      	adds	r3, #28
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fac4 	bl	800a1d4 <st_dword>
					fs->wflag = 1;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bc52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d037      	beq.n	800bcc8 <f_open+0x1d4>
						dw = fs->winsect;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	2200      	movs	r2, #0
 800bc64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7fe ff5d 	bl	800ab26 <remove_chain>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bc72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d126      	bne.n	800bcc8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe fd02 	bl	800a688 <move_window>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc8e:	3a01      	subs	r2, #1
 800bc90:	60da      	str	r2, [r3, #12]
 800bc92:	e019      	b.n	800bcc8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bc94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d115      	bne.n	800bcc8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bc9c:	7ebb      	ldrb	r3, [r7, #26]
 800bc9e:	f003 0310 	and.w	r3, r3, #16
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <f_open+0x1ba>
					res = FR_NO_FILE;
 800bca6:	2304      	movs	r3, #4
 800bca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bcac:	e00c      	b.n	800bcc8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	f003 0302 	and.w	r3, r3, #2
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <f_open+0x1d4>
 800bcb8:	7ebb      	ldrb	r3, [r7, #26]
 800bcba:	f003 0301 	and.w	r3, r3, #1
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <f_open+0x1d4>
						res = FR_DENIED;
 800bcc2:	2307      	movs	r3, #7
 800bcc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bcc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d128      	bne.n	800bd22 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
 800bcd2:	f003 0308 	and.w	r3, r3, #8
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bcda:	79fb      	ldrb	r3, [r7, #7]
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bcea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	f023 0301 	bic.w	r3, r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bf14      	ite	ne
 800bcfa:	2301      	movne	r3, #1
 800bcfc:	2300      	moveq	r3, #0
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	461a      	mov	r2, r3
 800bd02:	f107 0314 	add.w	r3, r7, #20
 800bd06:	4611      	mov	r1, r2
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fe fb8b 	bl	800a424 <inc_lock>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d102      	bne.n	800bd22 <f_open+0x22e>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bd22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f040 8095 	bne.w	800be56 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff f9af 	bl	800b096 <ld_clust>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd40:	331c      	adds	r3, #28
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fa08 	bl	800a158 <ld_dword>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	88da      	ldrh	r2, [r3, #6]
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	79fa      	ldrb	r2, [r7, #7]
 800bd66:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2200      	movs	r2, #0
 800bd72:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3330      	adds	r3, #48	; 0x30
 800bd7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fa72 	bl	800a26e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	f003 0320 	and.w	r3, r3, #32
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d060      	beq.n	800be56 <f_open+0x362>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d05c      	beq.n	800be56 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	895b      	ldrh	r3, [r3, #10]
 800bda8:	025b      	lsls	r3, r3, #9
 800bdaa:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	657b      	str	r3, [r7, #84]	; 0x54
 800bdb8:	e016      	b.n	800bde8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fd1d 	bl	800a7fe <get_fat>
 800bdc4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d802      	bhi.n	800bdd2 <f_open+0x2de>
 800bdcc:	2302      	movs	r3, #2
 800bdce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bdd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd8:	d102      	bne.n	800bde0 <f_open+0x2ec>
 800bdda:	2301      	movs	r3, #1
 800bddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bde0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bde2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	657b      	str	r3, [r7, #84]	; 0x54
 800bde8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d103      	bne.n	800bdf8 <f_open+0x304>
 800bdf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d8e0      	bhi.n	800bdba <f_open+0x2c6>
				}
				fp->clust = clst;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bdfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be02:	2b00      	cmp	r3, #0
 800be04:	d127      	bne.n	800be56 <f_open+0x362>
 800be06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d022      	beq.n	800be56 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be14:	4618      	mov	r0, r3
 800be16:	f7fe fcd3 	bl	800a7c0 <clust2sect>
 800be1a:	6478      	str	r0, [r7, #68]	; 0x44
 800be1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <f_open+0x336>
						res = FR_INT_ERR;
 800be22:	2302      	movs	r3, #2
 800be24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be28:	e015      	b.n	800be56 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800be2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be2c:	0a5a      	lsrs	r2, r3, #9
 800be2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be30:	441a      	add	r2, r3
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	7858      	ldrb	r0, [r3, #1]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6a1a      	ldr	r2, [r3, #32]
 800be44:	2301      	movs	r3, #1
 800be46:	f7fe f911 	bl	800a06c <disk_read>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <f_open+0x362>
 800be50:	2301      	movs	r3, #1
 800be52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800be56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <f_open+0x370>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800be64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3760      	adds	r7, #96	; 0x60
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08c      	sub	sp, #48	; 0x30
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2200      	movs	r2, #0
 800be86:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f107 0210 	add.w	r2, r7, #16
 800be8e:	4611      	mov	r1, r2
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff fdb3 	bl	800b9fc <validate>
 800be96:	4603      	mov	r3, r0
 800be98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d107      	bne.n	800beb4 <f_write+0x44>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	7d5b      	ldrb	r3, [r3, #21]
 800bea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800beac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <f_write+0x4a>
 800beb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beb8:	e14b      	b.n	800c152 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	7d1b      	ldrb	r3, [r3, #20]
 800bebe:	f003 0302 	and.w	r3, r3, #2
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <f_write+0x5a>
 800bec6:	2307      	movs	r3, #7
 800bec8:	e143      	b.n	800c152 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	699a      	ldr	r2, [r3, #24]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	441a      	add	r2, r3
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	f080 812d 	bcs.w	800c136 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	43db      	mvns	r3, r3
 800bee2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bee4:	e127      	b.n	800c136 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	699b      	ldr	r3, [r3, #24]
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 80e3 	bne.w	800c0ba <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	0a5b      	lsrs	r3, r3, #9
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	8952      	ldrh	r2, [r2, #10]
 800befe:	3a01      	subs	r2, #1
 800bf00:	4013      	ands	r3, r2
 800bf02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d143      	bne.n	800bf92 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10c      	bne.n	800bf2c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d11a      	bne.n	800bf54 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2100      	movs	r1, #0
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe fe64 	bl	800abf0 <create_chain>
 800bf28:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf2a:	e013      	b.n	800bf54 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d007      	beq.n	800bf44 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7fe fef0 	bl	800ad20 <clmt_clust>
 800bf40:	62b8      	str	r0, [r7, #40]	; 0x28
 800bf42:	e007      	b.n	800bf54 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	f7fe fe4f 	bl	800abf0 <create_chain>
 800bf52:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 80f2 	beq.w	800c140 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d104      	bne.n	800bf6c <f_write+0xfc>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2202      	movs	r2, #2
 800bf66:	755a      	strb	r2, [r3, #21]
 800bf68:	2302      	movs	r3, #2
 800bf6a:	e0f2      	b.n	800c152 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d104      	bne.n	800bf7e <f_write+0x10e>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2201      	movs	r2, #1
 800bf78:	755a      	strb	r2, [r3, #21]
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e0e9      	b.n	800c152 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <f_write+0x122>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	7d1b      	ldrb	r3, [r3, #20]
 800bf96:	b25b      	sxtb	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	da18      	bge.n	800bfce <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	7858      	ldrb	r0, [r3, #1]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a1a      	ldr	r2, [r3, #32]
 800bfaa:	2301      	movs	r3, #1
 800bfac:	f7fe f87e 	bl	800a0ac <disk_write>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <f_write+0x150>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	755a      	strb	r2, [r3, #21]
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e0c8      	b.n	800c152 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	7d1b      	ldrb	r3, [r3, #20]
 800bfc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	69db      	ldr	r3, [r3, #28]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	f7fe fbf2 	bl	800a7c0 <clust2sect>
 800bfdc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d104      	bne.n	800bfee <f_write+0x17e>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	755a      	strb	r2, [r3, #21]
 800bfea:	2302      	movs	r3, #2
 800bfec:	e0b1      	b.n	800c152 <f_write+0x2e2>
			sect += csect;
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	4413      	add	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	0a5b      	lsrs	r3, r3, #9
 800bffa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d03c      	beq.n	800c07c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c002:	69ba      	ldr	r2, [r7, #24]
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	4413      	add	r3, r2
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	8952      	ldrh	r2, [r2, #10]
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d905      	bls.n	800c01c <f_write+0x1ac>
					cc = fs->csize - csect;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	895b      	ldrh	r3, [r3, #10]
 800c014:	461a      	mov	r2, r3
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	7858      	ldrb	r0, [r3, #1]
 800c020:	6a3b      	ldr	r3, [r7, #32]
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	69f9      	ldr	r1, [r7, #28]
 800c026:	f7fe f841 	bl	800a0ac <disk_write>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <f_write+0x1ca>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2201      	movs	r2, #1
 800c034:	755a      	strb	r2, [r3, #21]
 800c036:	2301      	movs	r3, #1
 800c038:	e08b      	b.n	800c152 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6a1a      	ldr	r2, [r3, #32]
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	6a3a      	ldr	r2, [r7, #32]
 800c044:	429a      	cmp	r2, r3
 800c046:	d915      	bls.n	800c074 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a1a      	ldr	r2, [r3, #32]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	025b      	lsls	r3, r3, #9
 800c058:	69fa      	ldr	r2, [r7, #28]
 800c05a:	4413      	add	r3, r2
 800c05c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c060:	4619      	mov	r1, r3
 800c062:	f7fe f8e3 	bl	800a22c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	7d1b      	ldrb	r3, [r3, #20]
 800c06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	025b      	lsls	r3, r3, #9
 800c078:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c07a:	e03f      	b.n	800c0fc <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	429a      	cmp	r2, r3
 800c084:	d016      	beq.n	800c0b4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	699a      	ldr	r2, [r3, #24]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c08e:	429a      	cmp	r2, r3
 800c090:	d210      	bcs.n	800c0b4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	7858      	ldrb	r0, [r3, #1]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c09c:	2301      	movs	r3, #1
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	f7fd ffe4 	bl	800a06c <disk_read>
 800c0a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	755a      	strb	r2, [r3, #21]
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	e04e      	b.n	800c152 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d901      	bls.n	800c0d4 <f_write+0x264>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	699b      	ldr	r3, [r3, #24]
 800c0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0e2:	4413      	add	r3, r2
 800c0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e6:	69f9      	ldr	r1, [r7, #28]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe f89f 	bl	800a22c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	7d1b      	ldrb	r3, [r3, #20]
 800c0f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	4413      	add	r3, r2
 800c102:	61fb      	str	r3, [r7, #28]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	699a      	ldr	r2, [r3, #24]
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	441a      	add	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	619a      	str	r2, [r3, #24]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	699b      	ldr	r3, [r3, #24]
 800c118:	429a      	cmp	r2, r3
 800c11a:	bf38      	it	cc
 800c11c:	461a      	movcc	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	60da      	str	r2, [r3, #12]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	441a      	add	r2, r3
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f47f aed4 	bne.w	800bee6 <f_write+0x76>
 800c13e:	e000      	b.n	800c142 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c140:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	7d1b      	ldrb	r3, [r3, #20]
 800c146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3730      	adds	r7, #48	; 0x30
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f107 0208 	add.w	r2, r7, #8
 800c168:	4611      	mov	r1, r2
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7ff fc46 	bl	800b9fc <validate>
 800c170:	4603      	mov	r3, r0
 800c172:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c174:	7dfb      	ldrb	r3, [r7, #23]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d168      	bne.n	800c24c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	7d1b      	ldrb	r3, [r3, #20]
 800c17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	d062      	beq.n	800c24c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7d1b      	ldrb	r3, [r3, #20]
 800c18a:	b25b      	sxtb	r3, r3
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	da15      	bge.n	800c1bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	7858      	ldrb	r0, [r3, #1]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1a      	ldr	r2, [r3, #32]
 800c19e:	2301      	movs	r3, #1
 800c1a0:	f7fd ff84 	bl	800a0ac <disk_write>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <f_sync+0x54>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e04f      	b.n	800c24e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	7d1b      	ldrb	r3, [r3, #20]
 800c1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c1bc:	f7fd f9d8 	bl	8009570 <get_fattime>
 800c1c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	f7fe fa5c 	bl	800a688 <move_window>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d138      	bne.n	800c24c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	330b      	adds	r3, #11
 800c1e4:	781a      	ldrb	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	330b      	adds	r3, #11
 800c1ea:	f042 0220 	orr.w	r2, r2, #32
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	68f9      	ldr	r1, [r7, #12]
 800c1fe:	f7fe ff69 	bl	800b0d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f103 021c 	add.w	r2, r3, #28
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	4619      	mov	r1, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	f7fd ffe0 	bl	800a1d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3316      	adds	r3, #22
 800c218:	6939      	ldr	r1, [r7, #16]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fd ffda 	bl	800a1d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	3312      	adds	r3, #18
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd ffb9 	bl	800a19e <st_word>
					fs->wflag = 1;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	2201      	movs	r2, #1
 800c230:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	4618      	mov	r0, r3
 800c236:	f7fe fa55 	bl	800a6e4 <sync_fs>
 800c23a:	4603      	mov	r3, r0
 800c23c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7d1b      	ldrb	r3, [r3, #20]
 800c242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c246:	b2da      	uxtb	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff ff7b 	bl	800c15a <f_sync>
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d118      	bne.n	800c2a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f107 0208 	add.w	r2, r7, #8
 800c274:	4611      	mov	r1, r2
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff fbc0 	bl	800b9fc <validate>
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10c      	bne.n	800c2a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fe f958 	bl	800a540 <dec_lock>
 800c290:	4603      	mov	r3, r0
 800c292:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c294:	7bfb      	ldrb	r3, [r7, #15]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c2c2:	4b1f      	ldr	r3, [pc, #124]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2c4:	7a5b      	ldrb	r3, [r3, #9]
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d131      	bne.n	800c330 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c2cc:	4b1c      	ldr	r3, [pc, #112]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2ce:	7a5b      	ldrb	r3, [r3, #9]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	4b1a      	ldr	r3, [pc, #104]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c2da:	4b19      	ldr	r3, [pc, #100]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2dc:	7a5b      	ldrb	r3, [r3, #9]
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	4a17      	ldr	r2, [pc, #92]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c2ea:	4b15      	ldr	r3, [pc, #84]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b13      	ldr	r3, [pc, #76]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c2fc:	7a5b      	ldrb	r3, [r3, #9]
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	1c5a      	adds	r2, r3, #1
 800c302:	b2d1      	uxtb	r1, r2
 800c304:	4a0e      	ldr	r2, [pc, #56]	; (800c340 <FATFS_LinkDriverEx+0x94>)
 800c306:	7251      	strb	r1, [r2, #9]
 800c308:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c30a:	7dbb      	ldrb	r3, [r7, #22]
 800c30c:	3330      	adds	r3, #48	; 0x30
 800c30e:	b2da      	uxtb	r2, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	3301      	adds	r3, #1
 800c318:	223a      	movs	r2, #58	; 0x3a
 800c31a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3302      	adds	r3, #2
 800c320:	222f      	movs	r2, #47	; 0x2f
 800c322:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	3303      	adds	r3, #3
 800c328:	2200      	movs	r2, #0
 800c32a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
}
 800c332:	4618      	mov	r0, r3
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	20000bf8 	.word	0x20000bf8

0800c344 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c34e:	2200      	movs	r2, #0
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff ffaa 	bl	800c2ac <FATFS_LinkDriverEx>
 800c358:	4603      	mov	r3, r0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <__NVIC_SetPriority>:
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	4603      	mov	r3, r0
 800c36c:	6039      	str	r1, [r7, #0]
 800c36e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c374:	2b00      	cmp	r3, #0
 800c376:	db0a      	blt.n	800c38e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	490c      	ldr	r1, [pc, #48]	; (800c3b0 <__NVIC_SetPriority+0x4c>)
 800c37e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c382:	0112      	lsls	r2, r2, #4
 800c384:	b2d2      	uxtb	r2, r2
 800c386:	440b      	add	r3, r1
 800c388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c38c:	e00a      	b.n	800c3a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	b2da      	uxtb	r2, r3
 800c392:	4908      	ldr	r1, [pc, #32]	; (800c3b4 <__NVIC_SetPriority+0x50>)
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	3b04      	subs	r3, #4
 800c39c:	0112      	lsls	r2, r2, #4
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	440b      	add	r3, r1
 800c3a2:	761a      	strb	r2, [r3, #24]
}
 800c3a4:	bf00      	nop
 800c3a6:	370c      	adds	r7, #12
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	e000e100 	.word	0xe000e100
 800c3b4:	e000ed00 	.word	0xe000ed00

0800c3b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c3bc:	2100      	movs	r1, #0
 800c3be:	f06f 0004 	mvn.w	r0, #4
 800c3c2:	f7ff ffcf 	bl	800c364 <__NVIC_SetPriority>
#endif
}
 800c3c6:	bf00      	nop
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3d2:	f3ef 8305 	mrs	r3, IPSR
 800c3d6:	603b      	str	r3, [r7, #0]
  return(result);
 800c3d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c3de:	f06f 0305 	mvn.w	r3, #5
 800c3e2:	607b      	str	r3, [r7, #4]
 800c3e4:	e00c      	b.n	800c400 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c3e6:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <osKernelInitialize+0x44>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d105      	bne.n	800c3fa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c3ee:	4b08      	ldr	r3, [pc, #32]	; (800c410 <osKernelInitialize+0x44>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	e002      	b.n	800c400 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c400:	687b      	ldr	r3, [r7, #4]
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	20000c04 	.word	0x20000c04

0800c414 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c41a:	f3ef 8305 	mrs	r3, IPSR
 800c41e:	603b      	str	r3, [r7, #0]
  return(result);
 800c420:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <osKernelStart+0x1a>
    stat = osErrorISR;
 800c426:	f06f 0305 	mvn.w	r3, #5
 800c42a:	607b      	str	r3, [r7, #4]
 800c42c:	e010      	b.n	800c450 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c42e:	4b0b      	ldr	r3, [pc, #44]	; (800c45c <osKernelStart+0x48>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d109      	bne.n	800c44a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c436:	f7ff ffbf 	bl	800c3b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c43a:	4b08      	ldr	r3, [pc, #32]	; (800c45c <osKernelStart+0x48>)
 800c43c:	2202      	movs	r2, #2
 800c43e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c440:	f001 f866 	bl	800d510 <vTaskStartScheduler>
      stat = osOK;
 800c444:	2300      	movs	r3, #0
 800c446:	607b      	str	r3, [r7, #4]
 800c448:	e002      	b.n	800c450 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c44a:	f04f 33ff 	mov.w	r3, #4294967295
 800c44e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c450:	687b      	ldr	r3, [r7, #4]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	20000c04 	.word	0x20000c04

0800c460 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c460:	b580      	push	{r7, lr}
 800c462:	b08e      	sub	sp, #56	; 0x38
 800c464:	af04      	add	r7, sp, #16
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c46c:	2300      	movs	r3, #0
 800c46e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c470:	f3ef 8305 	mrs	r3, IPSR
 800c474:	617b      	str	r3, [r7, #20]
  return(result);
 800c476:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d17e      	bne.n	800c57a <osThreadNew+0x11a>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d07b      	beq.n	800c57a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c482:	2380      	movs	r3, #128	; 0x80
 800c484:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c486:	2318      	movs	r3, #24
 800c488:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c48e:	f04f 33ff 	mov.w	r3, #4294967295
 800c492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d045      	beq.n	800c526 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <osThreadNew+0x48>
        name = attr->name;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d002      	beq.n	800c4b6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	699b      	ldr	r3, [r3, #24]
 800c4b4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d008      	beq.n	800c4ce <osThreadNew+0x6e>
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	2b38      	cmp	r3, #56	; 0x38
 800c4c0:	d805      	bhi.n	800c4ce <osThreadNew+0x6e>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <osThreadNew+0x72>
        return (NULL);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e054      	b.n	800c57c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	089b      	lsrs	r3, r3, #2
 800c4e0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <osThreadNew+0xa8>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	2b5b      	cmp	r3, #91	; 0x5b
 800c4f0:	d90a      	bls.n	800c508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d006      	beq.n	800c508 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <osThreadNew+0xa8>
        mem = 1;
 800c502:	2301      	movs	r3, #1
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	e010      	b.n	800c52a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <osThreadNew+0xca>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d108      	bne.n	800c52a <osThreadNew+0xca>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	691b      	ldr	r3, [r3, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d104      	bne.n	800c52a <osThreadNew+0xca>
          mem = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	61bb      	str	r3, [r7, #24]
 800c524:	e001      	b.n	800c52a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d110      	bne.n	800c552 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c538:	9202      	str	r2, [sp, #8]
 800c53a:	9301      	str	r3, [sp, #4]
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	6a3a      	ldr	r2, [r7, #32]
 800c544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 fe0c 	bl	800d164 <xTaskCreateStatic>
 800c54c:	4603      	mov	r3, r0
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	e013      	b.n	800c57a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d110      	bne.n	800c57a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c558:	6a3b      	ldr	r3, [r7, #32]
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	f107 0310 	add.w	r3, r7, #16
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 fe57 	bl	800d21e <xTaskCreate>
 800c570:	4603      	mov	r3, r0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d001      	beq.n	800c57a <osThreadNew+0x11a>
            hTask = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c57a:	693b      	ldr	r3, [r7, #16]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3728      	adds	r7, #40	; 0x28
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c58c:	f3ef 8305 	mrs	r3, IPSR
 800c590:	60bb      	str	r3, [r7, #8]
  return(result);
 800c592:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c594:	2b00      	cmp	r3, #0
 800c596:	d003      	beq.n	800c5a0 <osDelay+0x1c>
    stat = osErrorISR;
 800c598:	f06f 0305 	mvn.w	r3, #5
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e007      	b.n	800c5b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 ff7c 	bl	800d4a8 <vTaskDelay>
    }
  }

  return (stat);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
	...

0800c5bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a07      	ldr	r2, [pc, #28]	; (800c5e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c5cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4a06      	ldr	r2, [pc, #24]	; (800c5ec <vApplicationGetIdleTaskMemory+0x30>)
 800c5d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2280      	movs	r2, #128	; 0x80
 800c5d8:	601a      	str	r2, [r3, #0]
}
 800c5da:	bf00      	nop
 800c5dc:	3714      	adds	r7, #20
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	20000c08 	.word	0x20000c08
 800c5ec:	20000c64 	.word	0x20000c64

0800c5f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	4a07      	ldr	r2, [pc, #28]	; (800c61c <vApplicationGetTimerTaskMemory+0x2c>)
 800c600:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	4a06      	ldr	r2, [pc, #24]	; (800c620 <vApplicationGetTimerTaskMemory+0x30>)
 800c606:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c60e:	601a      	str	r2, [r3, #0]
}
 800c610:	bf00      	nop
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr
 800c61c:	20000e64 	.word	0x20000e64
 800c620:	20000ec0 	.word	0x20000ec0

0800c624 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f103 0208 	add.w	r2, r3, #8
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f04f 32ff 	mov.w	r2, #4294967295
 800c63c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f103 0208 	add.w	r2, r3, #8
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f103 0208 	add.w	r2, r3, #8
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c67e:	b480      	push	{r7}
 800c680:	b085      	sub	sp, #20
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
 800c686:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	68fa      	ldr	r2, [r7, #12]
 800c692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	1c5a      	adds	r2, r3, #1
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b085      	sub	sp, #20
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6dc:	d103      	bne.n	800c6e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e00c      	b.n	800c700 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e002      	b.n	800c6f4 <vListInsert+0x2e>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	68ba      	ldr	r2, [r7, #8]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d2f6      	bcs.n	800c6ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	1c5a      	adds	r2, r3, #1
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	601a      	str	r2, [r3, #0]
}
 800c72c:	bf00      	nop
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	691b      	ldr	r3, [r3, #16]
 800c744:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6892      	ldr	r2, [r2, #8]
 800c74e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	6852      	ldr	r2, [r2, #4]
 800c758:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	429a      	cmp	r2, r3
 800c762:	d103      	bne.n	800c76c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1e5a      	subs	r2, r3, #1
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	681b      	ldr	r3, [r3, #0]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7b6:	f002 f84d 	bl	800e854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c2:	68f9      	ldr	r1, [r7, #12]
 800c7c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7c6:	fb01 f303 	mul.w	r3, r1, r3
 800c7ca:	441a      	add	r2, r3
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	68f9      	ldr	r1, [r7, #12]
 800c7ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c7ec:	fb01 f303 	mul.w	r3, r1, r3
 800c7f0:	441a      	add	r2, r3
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	22ff      	movs	r2, #255	; 0xff
 800c7fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	22ff      	movs	r2, #255	; 0xff
 800c802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d114      	bne.n	800c836 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d01a      	beq.n	800c84a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3310      	adds	r3, #16
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 f903 	bl	800da24 <xTaskRemoveFromEventList>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d012      	beq.n	800c84a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c824:	4b0c      	ldr	r3, [pc, #48]	; (800c858 <xQueueGenericReset+0xcc>)
 800c826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c82a:	601a      	str	r2, [r3, #0]
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	e009      	b.n	800c84a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3310      	adds	r3, #16
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fef2 	bl	800c624 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3324      	adds	r3, #36	; 0x24
 800c844:	4618      	mov	r0, r3
 800c846:	f7ff feed 	bl	800c624 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c84a:	f002 f833 	bl	800e8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c84e:	2301      	movs	r3, #1
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	e000ed04 	.word	0xe000ed04

0800c85c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08e      	sub	sp, #56	; 0x38
 800c860:	af02      	add	r7, sp, #8
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c882:	bf00      	nop
 800c884:	e7fe      	b.n	800c884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10a      	bne.n	800c8a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c890:	f383 8811 	msr	BASEPRI, r3
 800c894:	f3bf 8f6f 	isb	sy
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c89e:	bf00      	nop
 800c8a0:	e7fe      	b.n	800c8a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d002      	beq.n	800c8ae <xQueueGenericCreateStatic+0x52>
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <xQueueGenericCreateStatic+0x56>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	e000      	b.n	800c8b4 <xQueueGenericCreateStatic+0x58>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10a      	bne.n	800c8ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	623b      	str	r3, [r7, #32]
}
 800c8ca:	bf00      	nop
 800c8cc:	e7fe      	b.n	800c8cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d102      	bne.n	800c8da <xQueueGenericCreateStatic+0x7e>
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d101      	bne.n	800c8de <xQueueGenericCreateStatic+0x82>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e000      	b.n	800c8e0 <xQueueGenericCreateStatic+0x84>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	61fb      	str	r3, [r7, #28]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c8fa:	2350      	movs	r3, #80	; 0x50
 800c8fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	2b50      	cmp	r3, #80	; 0x50
 800c902:	d00a      	beq.n	800c91a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c908:	f383 8811 	msr	BASEPRI, r3
 800c90c:	f3bf 8f6f 	isb	sy
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	61bb      	str	r3, [r7, #24]
}
 800c916:	bf00      	nop
 800c918:	e7fe      	b.n	800c918 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c91a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00d      	beq.n	800c942 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c92e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	4613      	mov	r3, r2
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	68b9      	ldr	r1, [r7, #8]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 f805 	bl	800c94c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c944:	4618      	mov	r0, r3
 800c946:	3730      	adds	r7, #48	; 0x30
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d103      	bne.n	800c968 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	e002      	b.n	800c96e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	68ba      	ldr	r2, [r7, #8]
 800c978:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c97a:	2101      	movs	r1, #1
 800c97c:	69b8      	ldr	r0, [r7, #24]
 800c97e:	f7ff ff05 	bl	800c78c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	78fa      	ldrb	r2, [r7, #3]
 800c986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c98a:	bf00      	nop
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
	...

0800c994 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08e      	sub	sp, #56	; 0x38
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
 800c9a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10a      	bne.n	800c9c6 <xQueueGenericSend+0x32>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9c2:	bf00      	nop
 800c9c4:	e7fe      	b.n	800c9c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d103      	bne.n	800c9d4 <xQueueGenericSend+0x40>
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <xQueueGenericSend+0x44>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e000      	b.n	800c9da <xQueueGenericSend+0x46>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <xQueueGenericSend+0x60>
	__asm volatile
 800c9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e2:	f383 8811 	msr	BASEPRI, r3
 800c9e6:	f3bf 8f6f 	isb	sy
 800c9ea:	f3bf 8f4f 	dsb	sy
 800c9ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d103      	bne.n	800ca02 <xQueueGenericSend+0x6e>
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d101      	bne.n	800ca06 <xQueueGenericSend+0x72>
 800ca02:	2301      	movs	r3, #1
 800ca04:	e000      	b.n	800ca08 <xQueueGenericSend+0x74>
 800ca06:	2300      	movs	r3, #0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10a      	bne.n	800ca22 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	f383 8811 	msr	BASEPRI, r3
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	623b      	str	r3, [r7, #32]
}
 800ca1e:	bf00      	nop
 800ca20:	e7fe      	b.n	800ca20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca22:	f001 f9bd 	bl	800dda0 <xTaskGetSchedulerState>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d102      	bne.n	800ca32 <xQueueGenericSend+0x9e>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <xQueueGenericSend+0xa2>
 800ca32:	2301      	movs	r3, #1
 800ca34:	e000      	b.n	800ca38 <xQueueGenericSend+0xa4>
 800ca36:	2300      	movs	r3, #0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10a      	bne.n	800ca52 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	61fb      	str	r3, [r7, #28]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca52:	f001 feff 	bl	800e854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d302      	bcc.n	800ca68 <xQueueGenericSend+0xd4>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d129      	bne.n	800cabc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca6e:	f000 fa0b 	bl	800ce88 <prvCopyDataToQueue>
 800ca72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d010      	beq.n	800ca9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7e:	3324      	adds	r3, #36	; 0x24
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 ffcf 	bl	800da24 <xTaskRemoveFromEventList>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d013      	beq.n	800cab4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca8c:	4b3f      	ldr	r3, [pc, #252]	; (800cb8c <xQueueGenericSend+0x1f8>)
 800ca8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	f3bf 8f4f 	dsb	sy
 800ca98:	f3bf 8f6f 	isb	sy
 800ca9c:	e00a      	b.n	800cab4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d007      	beq.n	800cab4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800caa4:	4b39      	ldr	r3, [pc, #228]	; (800cb8c <xQueueGenericSend+0x1f8>)
 800caa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caaa:	601a      	str	r2, [r3, #0]
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cab4:	f001 fefe 	bl	800e8b4 <vPortExitCritical>
				return pdPASS;
 800cab8:	2301      	movs	r3, #1
 800caba:	e063      	b.n	800cb84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d103      	bne.n	800caca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cac2:	f001 fef7 	bl	800e8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	e05c      	b.n	800cb84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800caca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d106      	bne.n	800cade <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cad0:	f107 0314 	add.w	r3, r7, #20
 800cad4:	4618      	mov	r0, r3
 800cad6:	f001 f809 	bl	800daec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cada:	2301      	movs	r3, #1
 800cadc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cade:	f001 fee9 	bl	800e8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cae2:	f000 fd7b 	bl	800d5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cae6:	f001 feb5 	bl	800e854 <vPortEnterCritical>
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caf0:	b25b      	sxtb	r3, r3
 800caf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf6:	d103      	bne.n	800cb00 <xQueueGenericSend+0x16c>
 800caf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb06:	b25b      	sxtb	r3, r3
 800cb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0c:	d103      	bne.n	800cb16 <xQueueGenericSend+0x182>
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	2200      	movs	r2, #0
 800cb12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb16:	f001 fecd 	bl	800e8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb1a:	1d3a      	adds	r2, r7, #4
 800cb1c:	f107 0314 	add.w	r3, r7, #20
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fff8 	bl	800db18 <xTaskCheckForTimeOut>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d124      	bne.n	800cb78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb30:	f000 faa2 	bl	800d078 <prvIsQueueFull>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d018      	beq.n	800cb6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	3310      	adds	r3, #16
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	4611      	mov	r1, r2
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 ff1e 	bl	800d984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4a:	f000 fa2d 	bl	800cfa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb4e:	f000 fd53 	bl	800d5f8 <xTaskResumeAll>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f47f af7c 	bne.w	800ca52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	; (800cb8c <xQueueGenericSend+0x1f8>)
 800cb5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	e772      	b.n	800ca52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb6e:	f000 fa1b 	bl	800cfa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb72:	f000 fd41 	bl	800d5f8 <xTaskResumeAll>
 800cb76:	e76c      	b.n	800ca52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb7a:	f000 fa15 	bl	800cfa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb7e:	f000 fd3b 	bl	800d5f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3738      	adds	r7, #56	; 0x38
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	e000ed04 	.word	0xe000ed04

0800cb90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b090      	sub	sp, #64	; 0x40
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10a      	bne.n	800cbbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbba:	bf00      	nop
 800cbbc:	e7fe      	b.n	800cbbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d103      	bne.n	800cbcc <xQueueGenericSendFromISR+0x3c>
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <xQueueGenericSendFromISR+0x40>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	e000      	b.n	800cbd2 <xQueueGenericSendFromISR+0x42>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2b02      	cmp	r3, #2
 800cbf0:	d103      	bne.n	800cbfa <xQueueGenericSendFromISR+0x6a>
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf6:	2b01      	cmp	r3, #1
 800cbf8:	d101      	bne.n	800cbfe <xQueueGenericSendFromISR+0x6e>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e000      	b.n	800cc00 <xQueueGenericSendFromISR+0x70>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10a      	bne.n	800cc1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	623b      	str	r3, [r7, #32]
}
 800cc16:	bf00      	nop
 800cc18:	e7fe      	b.n	800cc18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc1a:	f001 fefd 	bl	800ea18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc1e:	f3ef 8211 	mrs	r2, BASEPRI
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	61fa      	str	r2, [r7, #28]
 800cc34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d302      	bcc.n	800cc4c <xQueueGenericSendFromISR+0xbc>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d12f      	bne.n	800ccac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc5c:	683a      	ldr	r2, [r7, #0]
 800cc5e:	68b9      	ldr	r1, [r7, #8]
 800cc60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc62:	f000 f911 	bl	800ce88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc6e:	d112      	bne.n	800cc96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d016      	beq.n	800cca6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	3324      	adds	r3, #36	; 0x24
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fed1 	bl	800da24 <xTaskRemoveFromEventList>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00e      	beq.n	800cca6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00b      	beq.n	800cca6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2201      	movs	r2, #1
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	e007      	b.n	800cca6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	b25a      	sxtb	r2, r3
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cca6:	2301      	movs	r3, #1
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccaa:	e001      	b.n	800ccb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3740      	adds	r7, #64	; 0x40
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
	...

0800ccc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08c      	sub	sp, #48	; 0x30
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10a      	bne.n	800ccf8 <xQueueReceive+0x30>
	__asm volatile
 800cce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce6:	f383 8811 	msr	BASEPRI, r3
 800ccea:	f3bf 8f6f 	isb	sy
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	623b      	str	r3, [r7, #32]
}
 800ccf4:	bf00      	nop
 800ccf6:	e7fe      	b.n	800ccf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <xQueueReceive+0x3e>
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <xQueueReceive+0x42>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <xQueueReceive+0x44>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xQueueReceive+0x5e>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61fb      	str	r3, [r7, #28]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd26:	f001 f83b 	bl	800dda0 <xTaskGetSchedulerState>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d102      	bne.n	800cd36 <xQueueReceive+0x6e>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <xQueueReceive+0x72>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e000      	b.n	800cd3c <xQueueReceive+0x74>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <xQueueReceive+0x8e>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	61bb      	str	r3, [r7, #24]
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd56:	f001 fd7d 	bl	800e854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01f      	beq.n	800cda6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd6a:	f000 f8f7 	bl	800cf5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd70:	1e5a      	subs	r2, r3, #1
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00f      	beq.n	800cd9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd80:	3310      	adds	r3, #16
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fe4e 	bl	800da24 <xTaskRemoveFromEventList>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd8e:	4b3d      	ldr	r3, [pc, #244]	; (800ce84 <xQueueReceive+0x1bc>)
 800cd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd9e:	f001 fd89 	bl	800e8b4 <vPortExitCritical>
				return pdPASS;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e069      	b.n	800ce7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d103      	bne.n	800cdb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdac:	f001 fd82 	bl	800e8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e062      	b.n	800ce7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d106      	bne.n	800cdc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdba:	f107 0310 	add.w	r3, r7, #16
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f000 fe94 	bl	800daec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdc8:	f001 fd74 	bl	800e8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdcc:	f000 fc06 	bl	800d5dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdd0:	f001 fd40 	bl	800e854 <vPortEnterCritical>
 800cdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdda:	b25b      	sxtb	r3, r3
 800cddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde0:	d103      	bne.n	800cdea <xQueueReceive+0x122>
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf0:	b25b      	sxtb	r3, r3
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d103      	bne.n	800ce00 <xQueueReceive+0x138>
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce00:	f001 fd58 	bl	800e8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce04:	1d3a      	adds	r2, r7, #4
 800ce06:	f107 0310 	add.w	r3, r7, #16
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fe83 	bl	800db18 <xTaskCheckForTimeOut>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d123      	bne.n	800ce60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1a:	f000 f917 	bl	800d04c <prvIsQueueEmpty>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d017      	beq.n	800ce54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	3324      	adds	r3, #36	; 0x24
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f000 fda9 	bl	800d984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce34:	f000 f8b8 	bl	800cfa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce38:	f000 fbde 	bl	800d5f8 <xTaskResumeAll>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d189      	bne.n	800cd56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ce42:	4b10      	ldr	r3, [pc, #64]	; (800ce84 <xQueueReceive+0x1bc>)
 800ce44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce48:	601a      	str	r2, [r3, #0]
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	e780      	b.n	800cd56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ce54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce56:	f000 f8a7 	bl	800cfa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce5a:	f000 fbcd 	bl	800d5f8 <xTaskResumeAll>
 800ce5e:	e77a      	b.n	800cd56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ce60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce62:	f000 f8a1 	bl	800cfa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce66:	f000 fbc7 	bl	800d5f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce6c:	f000 f8ee 	bl	800d04c <prvIsQueueEmpty>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f43f af6f 	beq.w	800cd56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3730      	adds	r7, #48	; 0x30
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	e000ed04 	.word	0xe000ed04

0800ce88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ce94:	2300      	movs	r3, #0
 800ce96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10d      	bne.n	800cec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d14d      	bne.n	800cf4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 ff92 	bl	800dddc <xTaskPriorityDisinherit>
 800ceb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2200      	movs	r2, #0
 800cebe:	609a      	str	r2, [r3, #8]
 800cec0:	e043      	b.n	800cf4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d119      	bne.n	800cefc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6858      	ldr	r0, [r3, #4]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ced0:	461a      	mov	r2, r3
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	f002 f842 	bl	800ef5c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	685a      	ldr	r2, [r3, #4]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee0:	441a      	add	r2, r3
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	685a      	ldr	r2, [r3, #4]
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d32b      	bcc.n	800cf4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	605a      	str	r2, [r3, #4]
 800cefa:	e026      	b.n	800cf4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68d8      	ldr	r0, [r3, #12]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf04:	461a      	mov	r2, r3
 800cf06:	68b9      	ldr	r1, [r7, #8]
 800cf08:	f002 f828 	bl	800ef5c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68da      	ldr	r2, [r3, #12]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf14:	425b      	negs	r3, r3
 800cf16:	441a      	add	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	68da      	ldr	r2, [r3, #12]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d207      	bcs.n	800cf38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	689a      	ldr	r2, [r3, #8]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf30:	425b      	negs	r3, r3
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d105      	bne.n	800cf4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	1c5a      	adds	r2, r3, #1
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cf52:	697b      	ldr	r3, [r7, #20]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d018      	beq.n	800cfa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68da      	ldr	r2, [r3, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf76:	441a      	add	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68da      	ldr	r2, [r3, #12]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d303      	bcc.n	800cf90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68d9      	ldr	r1, [r3, #12]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6838      	ldr	r0, [r7, #0]
 800cf9c:	f001 ffde 	bl	800ef5c <memcpy>
	}
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cfb0:	f001 fc50 	bl	800e854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfbc:	e011      	b.n	800cfe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d012      	beq.n	800cfec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	3324      	adds	r3, #36	; 0x24
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fd2a 	bl	800da24 <xTaskRemoveFromEventList>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d001      	beq.n	800cfda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cfd6:	f000 fe01 	bl	800dbdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cfda:	7bfb      	ldrb	r3, [r7, #15]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cfe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	dce9      	bgt.n	800cfbe <prvUnlockQueue+0x16>
 800cfea:	e000      	b.n	800cfee <prvUnlockQueue+0x46>
					break;
 800cfec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	22ff      	movs	r2, #255	; 0xff
 800cff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cff6:	f001 fc5d 	bl	800e8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cffa:	f001 fc2b 	bl	800e854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d006:	e011      	b.n	800d02c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d012      	beq.n	800d036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3310      	adds	r3, #16
 800d014:	4618      	mov	r0, r3
 800d016:	f000 fd05 	bl	800da24 <xTaskRemoveFromEventList>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d020:	f000 fddc 	bl	800dbdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d024:	7bbb      	ldrb	r3, [r7, #14]
 800d026:	3b01      	subs	r3, #1
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d030:	2b00      	cmp	r3, #0
 800d032:	dce9      	bgt.n	800d008 <prvUnlockQueue+0x60>
 800d034:	e000      	b.n	800d038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	22ff      	movs	r2, #255	; 0xff
 800d03c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d040:	f001 fc38 	bl	800e8b4 <vPortExitCritical>
}
 800d044:	bf00      	nop
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d054:	f001 fbfe 	bl	800e854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d102      	bne.n	800d066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d060:	2301      	movs	r3, #1
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	e001      	b.n	800d06a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d066:	2300      	movs	r3, #0
 800d068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d06a:	f001 fc23 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800d06e:	68fb      	ldr	r3, [r7, #12]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d080:	f001 fbe8 	bl	800e854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d102      	bne.n	800d096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d090:	2301      	movs	r3, #1
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	e001      	b.n	800d09a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d096:	2300      	movs	r3, #0
 800d098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d09a:	f001 fc0b 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800d09e:	68fb      	ldr	r3, [r7, #12]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b085      	sub	sp, #20
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	60fb      	str	r3, [r7, #12]
 800d0b6:	e014      	b.n	800d0e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d0b8:	4a0f      	ldr	r2, [pc, #60]	; (800d0f8 <vQueueAddToRegistry+0x50>)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10b      	bne.n	800d0dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d0c4:	490c      	ldr	r1, [pc, #48]	; (800d0f8 <vQueueAddToRegistry+0x50>)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d0ce:	4a0a      	ldr	r2, [pc, #40]	; (800d0f8 <vQueueAddToRegistry+0x50>)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	4413      	add	r3, r2
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d0da:	e006      	b.n	800d0ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	60fb      	str	r3, [r7, #12]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b07      	cmp	r3, #7
 800d0e6:	d9e7      	bls.n	800d0b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d0e8:	bf00      	nop
 800d0ea:	bf00      	nop
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	200012c0 	.word	0x200012c0

0800d0fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d10c:	f001 fba2 	bl	800e854 <vPortEnterCritical>
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d116:	b25b      	sxtb	r3, r3
 800d118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11c:	d103      	bne.n	800d126 <vQueueWaitForMessageRestricted+0x2a>
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2200      	movs	r2, #0
 800d122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d12c:	b25b      	sxtb	r3, r3
 800d12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d132:	d103      	bne.n	800d13c <vQueueWaitForMessageRestricted+0x40>
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d13c:	f001 fbba 	bl	800e8b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d144:	2b00      	cmp	r3, #0
 800d146:	d106      	bne.n	800d156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	3324      	adds	r3, #36	; 0x24
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	68b9      	ldr	r1, [r7, #8]
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fc3b 	bl	800d9cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d156:	6978      	ldr	r0, [r7, #20]
 800d158:	f7ff ff26 	bl	800cfa8 <prvUnlockQueue>
	}
 800d15c:	bf00      	nop
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08e      	sub	sp, #56	; 0x38
 800d168:	af04      	add	r7, sp, #16
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d174:	2b00      	cmp	r3, #0
 800d176:	d10a      	bne.n	800d18e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17c:	f383 8811 	msr	BASEPRI, r3
 800d180:	f3bf 8f6f 	isb	sy
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	623b      	str	r3, [r7, #32]
}
 800d18a:	bf00      	nop
 800d18c:	e7fe      	b.n	800d18c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10a      	bne.n	800d1aa <xTaskCreateStatic+0x46>
	__asm volatile
 800d194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d198:	f383 8811 	msr	BASEPRI, r3
 800d19c:	f3bf 8f6f 	isb	sy
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	61fb      	str	r3, [r7, #28]
}
 800d1a6:	bf00      	nop
 800d1a8:	e7fe      	b.n	800d1a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d1aa:	235c      	movs	r3, #92	; 0x5c
 800d1ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d1b2:	d00a      	beq.n	800d1ca <xTaskCreateStatic+0x66>
	__asm volatile
 800d1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b8:	f383 8811 	msr	BASEPRI, r3
 800d1bc:	f3bf 8f6f 	isb	sy
 800d1c0:	f3bf 8f4f 	dsb	sy
 800d1c4:	61bb      	str	r3, [r7, #24]
}
 800d1c6:	bf00      	nop
 800d1c8:	e7fe      	b.n	800d1c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d1ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01e      	beq.n	800d210 <xTaskCreateStatic+0xac>
 800d1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d01b      	beq.n	800d210 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9303      	str	r3, [sp, #12]
 800d1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f0:	9302      	str	r3, [sp, #8]
 800d1f2:	f107 0314 	add.w	r3, r7, #20
 800d1f6:	9301      	str	r3, [sp, #4]
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	68b9      	ldr	r1, [r7, #8]
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 f850 	bl	800d2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d20a:	f000 f8dd 	bl	800d3c8 <prvAddNewTaskToReadyList>
 800d20e:	e001      	b.n	800d214 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d210:	2300      	movs	r3, #0
 800d212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d214:	697b      	ldr	r3, [r7, #20]
	}
 800d216:	4618      	mov	r0, r3
 800d218:	3728      	adds	r7, #40	; 0x28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b08c      	sub	sp, #48	; 0x30
 800d222:	af04      	add	r7, sp, #16
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	603b      	str	r3, [r7, #0]
 800d22a:	4613      	mov	r3, r2
 800d22c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d22e:	88fb      	ldrh	r3, [r7, #6]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4618      	mov	r0, r3
 800d234:	f001 fc30 	bl	800ea98 <pvPortMalloc>
 800d238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00e      	beq.n	800d25e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d240:	205c      	movs	r0, #92	; 0x5c
 800d242:	f001 fc29 	bl	800ea98 <pvPortMalloc>
 800d246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d003      	beq.n	800d256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	697a      	ldr	r2, [r7, #20]
 800d252:	631a      	str	r2, [r3, #48]	; 0x30
 800d254:	e005      	b.n	800d262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d256:	6978      	ldr	r0, [r7, #20]
 800d258:	f001 fcea 	bl	800ec30 <vPortFree>
 800d25c:	e001      	b.n	800d262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d25e:	2300      	movs	r3, #0
 800d260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d017      	beq.n	800d298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d270:	88fa      	ldrh	r2, [r7, #6]
 800d272:	2300      	movs	r3, #0
 800d274:	9303      	str	r3, [sp, #12]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	9302      	str	r3, [sp, #8]
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 f80e 	bl	800d2a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d28c:	69f8      	ldr	r0, [r7, #28]
 800d28e:	f000 f89b 	bl	800d3c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d292:	2301      	movs	r3, #1
 800d294:	61bb      	str	r3, [r7, #24]
 800d296:	e002      	b.n	800d29e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d298:	f04f 33ff 	mov.w	r3, #4294967295
 800d29c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d29e:	69bb      	ldr	r3, [r7, #24]
	}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3720      	adds	r7, #32
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	461a      	mov	r2, r3
 800d2c0:	21a5      	movs	r1, #165	; 0xa5
 800d2c2:	f001 fe59 	bl	800ef78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	f003 0307 	and.w	r3, r3, #7
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	617b      	str	r3, [r7, #20]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01f      	beq.n	800d346 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
 800d30a:	e012      	b.n	800d332 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	4413      	add	r3, r2
 800d312:	7819      	ldrb	r1, [r3, #0]
 800d314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	4413      	add	r3, r2
 800d31a:	3334      	adds	r3, #52	; 0x34
 800d31c:	460a      	mov	r2, r1
 800d31e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	4413      	add	r3, r2
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	3301      	adds	r3, #1
 800d330:	61fb      	str	r3, [r7, #28]
 800d332:	69fb      	ldr	r3, [r7, #28]
 800d334:	2b0f      	cmp	r3, #15
 800d336:	d9e9      	bls.n	800d30c <prvInitialiseNewTask+0x64>
 800d338:	e000      	b.n	800d33c <prvInitialiseNewTask+0x94>
			{
				break;
 800d33a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	2200      	movs	r2, #0
 800d340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d344:	e003      	b.n	800d34e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	2b37      	cmp	r3, #55	; 0x37
 800d352:	d901      	bls.n	800d358 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d354:	2337      	movs	r3, #55	; 0x37
 800d356:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d362:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d366:	2200      	movs	r2, #0
 800d368:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	3304      	adds	r3, #4
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff f978 	bl	800c664 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d376:	3318      	adds	r3, #24
 800d378:	4618      	mov	r0, r3
 800d37a:	f7ff f973 	bl	800c664 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d382:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d392:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	2200      	movs	r2, #0
 800d398:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	68f9      	ldr	r1, [r7, #12]
 800d3a6:	69b8      	ldr	r0, [r7, #24]
 800d3a8:	f001 f928 	bl	800e5fc <pxPortInitialiseStack>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d3be:	bf00      	nop
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d3d0:	f001 fa40 	bl	800e854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	4a2c      	ldr	r2, [pc, #176]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d3de:	4b2c      	ldr	r3, [pc, #176]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d109      	bne.n	800d3fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d3e6:	4a2a      	ldr	r2, [pc, #168]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d3ec:	4b27      	ldr	r3, [pc, #156]	; (800d48c <prvAddNewTaskToReadyList+0xc4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d110      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d3f4:	f000 fc16 	bl	800dc24 <prvInitialiseTaskLists>
 800d3f8:	e00d      	b.n	800d416 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d3fa:	4b26      	ldr	r3, [pc, #152]	; (800d494 <prvAddNewTaskToReadyList+0xcc>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d402:	4b23      	ldr	r3, [pc, #140]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d802      	bhi.n	800d416 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d410:	4a1f      	ldr	r2, [pc, #124]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d416:	4b20      	ldr	r3, [pc, #128]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	3301      	adds	r3, #1
 800d41c:	4a1e      	ldr	r2, [pc, #120]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d41e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d420:	4b1d      	ldr	r3, [pc, #116]	; (800d498 <prvAddNewTaskToReadyList+0xd0>)
 800d422:	681a      	ldr	r2, [r3, #0]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42c:	4b1b      	ldr	r3, [pc, #108]	; (800d49c <prvAddNewTaskToReadyList+0xd4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	429a      	cmp	r2, r3
 800d432:	d903      	bls.n	800d43c <prvAddNewTaskToReadyList+0x74>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	4a18      	ldr	r2, [pc, #96]	; (800d49c <prvAddNewTaskToReadyList+0xd4>)
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	4613      	mov	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4a15      	ldr	r2, [pc, #84]	; (800d4a0 <prvAddNewTaskToReadyList+0xd8>)
 800d44a:	441a      	add	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3304      	adds	r3, #4
 800d450:	4619      	mov	r1, r3
 800d452:	4610      	mov	r0, r2
 800d454:	f7ff f913 	bl	800c67e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d458:	f001 fa2c 	bl	800e8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <prvAddNewTaskToReadyList+0xcc>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d464:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <prvAddNewTaskToReadyList+0xc8>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	429a      	cmp	r2, r3
 800d470:	d207      	bcs.n	800d482 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d472:	4b0c      	ldr	r3, [pc, #48]	; (800d4a4 <prvAddNewTaskToReadyList+0xdc>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d482:	bf00      	nop
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200017d4 	.word	0x200017d4
 800d490:	20001300 	.word	0x20001300
 800d494:	200017e0 	.word	0x200017e0
 800d498:	200017f0 	.word	0x200017f0
 800d49c:	200017dc 	.word	0x200017dc
 800d4a0:	20001304 	.word	0x20001304
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d017      	beq.n	800d4ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d4ba:	4b13      	ldr	r3, [pc, #76]	; (800d508 <vTaskDelay+0x60>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <vTaskDelay+0x30>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	60bb      	str	r3, [r7, #8]
}
 800d4d4:	bf00      	nop
 800d4d6:	e7fe      	b.n	800d4d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d4d8:	f000 f880 	bl	800d5dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4dc:	2100      	movs	r1, #0
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fcea 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d4e4:	f000 f888 	bl	800d5f8 <xTaskResumeAll>
 800d4e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d107      	bne.n	800d500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d4f0:	4b06      	ldr	r3, [pc, #24]	; (800d50c <vTaskDelay+0x64>)
 800d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f6:	601a      	str	r2, [r3, #0]
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d500:	bf00      	nop
 800d502:	3710      	adds	r7, #16
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	200017fc 	.word	0x200017fc
 800d50c:	e000ed04 	.word	0xe000ed04

0800d510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08a      	sub	sp, #40	; 0x28
 800d514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d516:	2300      	movs	r3, #0
 800d518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d51a:	2300      	movs	r3, #0
 800d51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d51e:	463a      	mov	r2, r7
 800d520:	1d39      	adds	r1, r7, #4
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff f848 	bl	800c5bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	9202      	str	r2, [sp, #8]
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	2300      	movs	r3, #0
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	2300      	movs	r3, #0
 800d53c:	460a      	mov	r2, r1
 800d53e:	4921      	ldr	r1, [pc, #132]	; (800d5c4 <vTaskStartScheduler+0xb4>)
 800d540:	4821      	ldr	r0, [pc, #132]	; (800d5c8 <vTaskStartScheduler+0xb8>)
 800d542:	f7ff fe0f 	bl	800d164 <xTaskCreateStatic>
 800d546:	4603      	mov	r3, r0
 800d548:	4a20      	ldr	r2, [pc, #128]	; (800d5cc <vTaskStartScheduler+0xbc>)
 800d54a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d54c:	4b1f      	ldr	r3, [pc, #124]	; (800d5cc <vTaskStartScheduler+0xbc>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d554:	2301      	movs	r3, #1
 800d556:	617b      	str	r3, [r7, #20]
 800d558:	e001      	b.n	800d55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d102      	bne.n	800d56a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d564:	f000 fcfc 	bl	800df60 <xTimerCreateTimerTask>
 800d568:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d116      	bne.n	800d59e <vTaskStartScheduler+0x8e>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	613b      	str	r3, [r7, #16]
}
 800d582:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d584:	4b12      	ldr	r3, [pc, #72]	; (800d5d0 <vTaskStartScheduler+0xc0>)
 800d586:	f04f 32ff 	mov.w	r2, #4294967295
 800d58a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d58c:	4b11      	ldr	r3, [pc, #68]	; (800d5d4 <vTaskStartScheduler+0xc4>)
 800d58e:	2201      	movs	r2, #1
 800d590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d592:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <vTaskStartScheduler+0xc8>)
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d598:	f001 f8ba 	bl	800e710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d59c:	e00e      	b.n	800d5bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a4:	d10a      	bne.n	800d5bc <vTaskStartScheduler+0xac>
	__asm volatile
 800d5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5aa:	f383 8811 	msr	BASEPRI, r3
 800d5ae:	f3bf 8f6f 	isb	sy
 800d5b2:	f3bf 8f4f 	dsb	sy
 800d5b6:	60fb      	str	r3, [r7, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	e7fe      	b.n	800d5ba <vTaskStartScheduler+0xaa>
}
 800d5bc:	bf00      	nop
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	08012a30 	.word	0x08012a30
 800d5c8:	0800dbf5 	.word	0x0800dbf5
 800d5cc:	200017f8 	.word	0x200017f8
 800d5d0:	200017f4 	.word	0x200017f4
 800d5d4:	200017e0 	.word	0x200017e0
 800d5d8:	200017d8 	.word	0x200017d8

0800d5dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d5e0:	4b04      	ldr	r3, [pc, #16]	; (800d5f4 <vTaskSuspendAll+0x18>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	4a03      	ldr	r2, [pc, #12]	; (800d5f4 <vTaskSuspendAll+0x18>)
 800d5e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d5ea:	bf00      	nop
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f2:	4770      	bx	lr
 800d5f4:	200017fc 	.word	0x200017fc

0800d5f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d602:	2300      	movs	r3, #0
 800d604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d606:	4b42      	ldr	r3, [pc, #264]	; (800d710 <xTaskResumeAll+0x118>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <xTaskResumeAll+0x2c>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	603b      	str	r3, [r7, #0]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d624:	f001 f916 	bl	800e854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d628:	4b39      	ldr	r3, [pc, #228]	; (800d710 <xTaskResumeAll+0x118>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	3b01      	subs	r3, #1
 800d62e:	4a38      	ldr	r2, [pc, #224]	; (800d710 <xTaskResumeAll+0x118>)
 800d630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d632:	4b37      	ldr	r3, [pc, #220]	; (800d710 <xTaskResumeAll+0x118>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d162      	bne.n	800d700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d63a:	4b36      	ldr	r3, [pc, #216]	; (800d714 <xTaskResumeAll+0x11c>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d05e      	beq.n	800d700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d642:	e02f      	b.n	800d6a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d644:	4b34      	ldr	r3, [pc, #208]	; (800d718 <xTaskResumeAll+0x120>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	3318      	adds	r3, #24
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff f871 	bl	800c738 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3304      	adds	r3, #4
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff f86c 	bl	800c738 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d664:	4b2d      	ldr	r3, [pc, #180]	; (800d71c <xTaskResumeAll+0x124>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d903      	bls.n	800d674 <xTaskResumeAll+0x7c>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d670:	4a2a      	ldr	r2, [pc, #168]	; (800d71c <xTaskResumeAll+0x124>)
 800d672:	6013      	str	r3, [r2, #0]
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d678:	4613      	mov	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4a27      	ldr	r2, [pc, #156]	; (800d720 <xTaskResumeAll+0x128>)
 800d682:	441a      	add	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3304      	adds	r3, #4
 800d688:	4619      	mov	r1, r3
 800d68a:	4610      	mov	r0, r2
 800d68c:	f7fe fff7 	bl	800c67e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d694:	4b23      	ldr	r3, [pc, #140]	; (800d724 <xTaskResumeAll+0x12c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d302      	bcc.n	800d6a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d69e:	4b22      	ldr	r3, [pc, #136]	; (800d728 <xTaskResumeAll+0x130>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d6a4:	4b1c      	ldr	r3, [pc, #112]	; (800d718 <xTaskResumeAll+0x120>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1cb      	bne.n	800d644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d6b2:	f000 fb55 	bl	800dd60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d6b6:	4b1d      	ldr	r3, [pc, #116]	; (800d72c <xTaskResumeAll+0x134>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d010      	beq.n	800d6e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d6c2:	f000 f847 	bl	800d754 <xTaskIncrementTick>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d6cc:	4b16      	ldr	r3, [pc, #88]	; (800d728 <xTaskResumeAll+0x130>)
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1f1      	bne.n	800d6c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d6de:	4b13      	ldr	r3, [pc, #76]	; (800d72c <xTaskResumeAll+0x134>)
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d6e4:	4b10      	ldr	r3, [pc, #64]	; (800d728 <xTaskResumeAll+0x130>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d009      	beq.n	800d700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d6f0:	4b0f      	ldr	r3, [pc, #60]	; (800d730 <xTaskResumeAll+0x138>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d700:	f001 f8d8 	bl	800e8b4 <vPortExitCritical>

	return xAlreadyYielded;
 800d704:	68bb      	ldr	r3, [r7, #8]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3710      	adds	r7, #16
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	200017fc 	.word	0x200017fc
 800d714:	200017d4 	.word	0x200017d4
 800d718:	20001794 	.word	0x20001794
 800d71c:	200017dc 	.word	0x200017dc
 800d720:	20001304 	.word	0x20001304
 800d724:	20001300 	.word	0x20001300
 800d728:	200017e8 	.word	0x200017e8
 800d72c:	200017e4 	.word	0x200017e4
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d73a:	4b05      	ldr	r3, [pc, #20]	; (800d750 <xTaskGetTickCount+0x1c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d740:	687b      	ldr	r3, [r7, #4]
}
 800d742:	4618      	mov	r0, r3
 800d744:	370c      	adds	r7, #12
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	200017d8 	.word	0x200017d8

0800d754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d75a:	2300      	movs	r3, #0
 800d75c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d75e:	4b4f      	ldr	r3, [pc, #316]	; (800d89c <xTaskIncrementTick+0x148>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	f040 808f 	bne.w	800d886 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d768:	4b4d      	ldr	r3, [pc, #308]	; (800d8a0 <xTaskIncrementTick+0x14c>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d770:	4a4b      	ldr	r2, [pc, #300]	; (800d8a0 <xTaskIncrementTick+0x14c>)
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d120      	bne.n	800d7be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d77c:	4b49      	ldr	r3, [pc, #292]	; (800d8a4 <xTaskIncrementTick+0x150>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00a      	beq.n	800d79c <xTaskIncrementTick+0x48>
	__asm volatile
 800d786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	603b      	str	r3, [r7, #0]
}
 800d798:	bf00      	nop
 800d79a:	e7fe      	b.n	800d79a <xTaskIncrementTick+0x46>
 800d79c:	4b41      	ldr	r3, [pc, #260]	; (800d8a4 <xTaskIncrementTick+0x150>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	60fb      	str	r3, [r7, #12]
 800d7a2:	4b41      	ldr	r3, [pc, #260]	; (800d8a8 <xTaskIncrementTick+0x154>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a3f      	ldr	r2, [pc, #252]	; (800d8a4 <xTaskIncrementTick+0x150>)
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	4a3f      	ldr	r2, [pc, #252]	; (800d8a8 <xTaskIncrementTick+0x154>)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6013      	str	r3, [r2, #0]
 800d7b0:	4b3e      	ldr	r3, [pc, #248]	; (800d8ac <xTaskIncrementTick+0x158>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	4a3d      	ldr	r2, [pc, #244]	; (800d8ac <xTaskIncrementTick+0x158>)
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	f000 fad1 	bl	800dd60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7be:	4b3c      	ldr	r3, [pc, #240]	; (800d8b0 <xTaskIncrementTick+0x15c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d349      	bcc.n	800d85c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7c8:	4b36      	ldr	r3, [pc, #216]	; (800d8a4 <xTaskIncrementTick+0x150>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d104      	bne.n	800d7dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7d2:	4b37      	ldr	r3, [pc, #220]	; (800d8b0 <xTaskIncrementTick+0x15c>)
 800d7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d8:	601a      	str	r2, [r3, #0]
					break;
 800d7da:	e03f      	b.n	800d85c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7dc:	4b31      	ldr	r3, [pc, #196]	; (800d8a4 <xTaskIncrementTick+0x150>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d203      	bcs.n	800d7fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d7f4:	4a2e      	ldr	r2, [pc, #184]	; (800d8b0 <xTaskIncrementTick+0x15c>)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d7fa:	e02f      	b.n	800d85c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	3304      	adds	r3, #4
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe ff99 	bl	800c738 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d004      	beq.n	800d818 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	3318      	adds	r3, #24
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe ff90 	bl	800c738 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	4b25      	ldr	r3, [pc, #148]	; (800d8b4 <xTaskIncrementTick+0x160>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	429a      	cmp	r2, r3
 800d822:	d903      	bls.n	800d82c <xTaskIncrementTick+0xd8>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d828:	4a22      	ldr	r2, [pc, #136]	; (800d8b4 <xTaskIncrementTick+0x160>)
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d830:	4613      	mov	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4a1f      	ldr	r2, [pc, #124]	; (800d8b8 <xTaskIncrementTick+0x164>)
 800d83a:	441a      	add	r2, r3
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	3304      	adds	r3, #4
 800d840:	4619      	mov	r1, r3
 800d842:	4610      	mov	r0, r2
 800d844:	f7fe ff1b 	bl	800c67e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84c:	4b1b      	ldr	r3, [pc, #108]	; (800d8bc <xTaskIncrementTick+0x168>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d852:	429a      	cmp	r2, r3
 800d854:	d3b8      	bcc.n	800d7c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d856:	2301      	movs	r3, #1
 800d858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d85a:	e7b5      	b.n	800d7c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d85c:	4b17      	ldr	r3, [pc, #92]	; (800d8bc <xTaskIncrementTick+0x168>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	4915      	ldr	r1, [pc, #84]	; (800d8b8 <xTaskIncrementTick+0x164>)
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	440b      	add	r3, r1
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d901      	bls.n	800d878 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d874:	2301      	movs	r3, #1
 800d876:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d878:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <xTaskIncrementTick+0x16c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d007      	beq.n	800d890 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d880:	2301      	movs	r3, #1
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e004      	b.n	800d890 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d886:	4b0f      	ldr	r3, [pc, #60]	; (800d8c4 <xTaskIncrementTick+0x170>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	4a0d      	ldr	r2, [pc, #52]	; (800d8c4 <xTaskIncrementTick+0x170>)
 800d88e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d890:	697b      	ldr	r3, [r7, #20]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3718      	adds	r7, #24
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	200017fc 	.word	0x200017fc
 800d8a0:	200017d8 	.word	0x200017d8
 800d8a4:	2000178c 	.word	0x2000178c
 800d8a8:	20001790 	.word	0x20001790
 800d8ac:	200017ec 	.word	0x200017ec
 800d8b0:	200017f4 	.word	0x200017f4
 800d8b4:	200017dc 	.word	0x200017dc
 800d8b8:	20001304 	.word	0x20001304
 800d8bc:	20001300 	.word	0x20001300
 800d8c0:	200017e8 	.word	0x200017e8
 800d8c4:	200017e4 	.word	0x200017e4

0800d8c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d8ce:	4b28      	ldr	r3, [pc, #160]	; (800d970 <vTaskSwitchContext+0xa8>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d8d6:	4b27      	ldr	r3, [pc, #156]	; (800d974 <vTaskSwitchContext+0xac>)
 800d8d8:	2201      	movs	r2, #1
 800d8da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d8dc:	e041      	b.n	800d962 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d8de:	4b25      	ldr	r3, [pc, #148]	; (800d974 <vTaskSwitchContext+0xac>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8e4:	4b24      	ldr	r3, [pc, #144]	; (800d978 <vTaskSwitchContext+0xb0>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	60fb      	str	r3, [r7, #12]
 800d8ea:	e010      	b.n	800d90e <vTaskSwitchContext+0x46>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10a      	bne.n	800d908 <vTaskSwitchContext+0x40>
	__asm volatile
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	607b      	str	r3, [r7, #4]
}
 800d904:	bf00      	nop
 800d906:	e7fe      	b.n	800d906 <vTaskSwitchContext+0x3e>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	3b01      	subs	r3, #1
 800d90c:	60fb      	str	r3, [r7, #12]
 800d90e:	491b      	ldr	r1, [pc, #108]	; (800d97c <vTaskSwitchContext+0xb4>)
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	440b      	add	r3, r1
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0e4      	beq.n	800d8ec <vTaskSwitchContext+0x24>
 800d922:	68fa      	ldr	r2, [r7, #12]
 800d924:	4613      	mov	r3, r2
 800d926:	009b      	lsls	r3, r3, #2
 800d928:	4413      	add	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4a13      	ldr	r2, [pc, #76]	; (800d97c <vTaskSwitchContext+0xb4>)
 800d92e:	4413      	add	r3, r2
 800d930:	60bb      	str	r3, [r7, #8]
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	605a      	str	r2, [r3, #4]
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3308      	adds	r3, #8
 800d944:	429a      	cmp	r2, r3
 800d946:	d104      	bne.n	800d952 <vTaskSwitchContext+0x8a>
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	685a      	ldr	r2, [r3, #4]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	605a      	str	r2, [r3, #4]
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	4a09      	ldr	r2, [pc, #36]	; (800d980 <vTaskSwitchContext+0xb8>)
 800d95a:	6013      	str	r3, [r2, #0]
 800d95c:	4a06      	ldr	r2, [pc, #24]	; (800d978 <vTaskSwitchContext+0xb0>)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6013      	str	r3, [r2, #0]
}
 800d962:	bf00      	nop
 800d964:	3714      	adds	r7, #20
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	200017fc 	.word	0x200017fc
 800d974:	200017e8 	.word	0x200017e8
 800d978:	200017dc 	.word	0x200017dc
 800d97c:	20001304 	.word	0x20001304
 800d980:	20001300 	.word	0x20001300

0800d984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	60fb      	str	r3, [r7, #12]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9aa:	4b07      	ldr	r3, [pc, #28]	; (800d9c8 <vTaskPlaceOnEventList+0x44>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3318      	adds	r3, #24
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7fe fe87 	bl	800c6c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	6838      	ldr	r0, [r7, #0]
 800d9bc:	f000 fa7c 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
}
 800d9c0:	bf00      	nop
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20001300 	.word	0x20001300

0800d9cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10a      	bne.n	800d9f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	617b      	str	r3, [r7, #20]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3318      	adds	r3, #24
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7fe fe3e 	bl	800c67e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da08:	f04f 33ff 	mov.w	r3, #4294967295
 800da0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da0e:	6879      	ldr	r1, [r7, #4]
 800da10:	68b8      	ldr	r0, [r7, #8]
 800da12:	f000 fa51 	bl	800deb8 <prvAddCurrentTaskToDelayedList>
	}
 800da16:	bf00      	nop
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20001300 	.word	0x20001300

0800da24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	60fb      	str	r3, [r7, #12]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	3318      	adds	r3, #24
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe fe6f 	bl	800c738 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da5a:	4b1e      	ldr	r3, [pc, #120]	; (800dad4 <xTaskRemoveFromEventList+0xb0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d11d      	bne.n	800da9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	3304      	adds	r3, #4
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe fe66 	bl	800c738 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da70:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <xTaskRemoveFromEventList+0xb4>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d903      	bls.n	800da80 <xTaskRemoveFromEventList+0x5c>
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	4a16      	ldr	r2, [pc, #88]	; (800dad8 <xTaskRemoveFromEventList+0xb4>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a13      	ldr	r2, [pc, #76]	; (800dadc <xTaskRemoveFromEventList+0xb8>)
 800da8e:	441a      	add	r2, r3
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fe fdf1 	bl	800c67e <vListInsertEnd>
 800da9c:	e005      	b.n	800daaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	3318      	adds	r3, #24
 800daa2:	4619      	mov	r1, r3
 800daa4:	480e      	ldr	r0, [pc, #56]	; (800dae0 <xTaskRemoveFromEventList+0xbc>)
 800daa6:	f7fe fdea 	bl	800c67e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daae:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <xTaskRemoveFromEventList+0xc0>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d905      	bls.n	800dac4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dab8:	2301      	movs	r3, #1
 800daba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dabc:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <xTaskRemoveFromEventList+0xc4>)
 800dabe:	2201      	movs	r2, #1
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	e001      	b.n	800dac8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dac8:	697b      	ldr	r3, [r7, #20]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	200017fc 	.word	0x200017fc
 800dad8:	200017dc 	.word	0x200017dc
 800dadc:	20001304 	.word	0x20001304
 800dae0:	20001794 	.word	0x20001794
 800dae4:	20001300 	.word	0x20001300
 800dae8:	200017e8 	.word	0x200017e8

0800daec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <vTaskInternalSetTimeOutState+0x24>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dafc:	4b05      	ldr	r3, [pc, #20]	; (800db14 <vTaskInternalSetTimeOutState+0x28>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	605a      	str	r2, [r3, #4]
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	200017ec 	.word	0x200017ec
 800db14:	200017d8 	.word	0x200017d8

0800db18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	613b      	str	r3, [r7, #16]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	60fb      	str	r3, [r7, #12]
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db5a:	f000 fe7b 	bl	800e854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db5e:	4b1d      	ldr	r3, [pc, #116]	; (800dbd4 <xTaskCheckForTimeOut+0xbc>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db76:	d102      	bne.n	800db7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db78:	2300      	movs	r3, #0
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	e023      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <xTaskCheckForTimeOut+0xc0>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d007      	beq.n	800db9a <xTaskCheckForTimeOut+0x82>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	429a      	cmp	r2, r3
 800db92:	d302      	bcc.n	800db9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	e015      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d20b      	bcs.n	800dbbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	1ad2      	subs	r2, r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff ff9b 	bl	800daec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	e004      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbc6:	f000 fe75 	bl	800e8b4 <vPortExitCritical>

	return xReturn;
 800dbca:	69fb      	ldr	r3, [r7, #28]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	200017d8 	.word	0x200017d8
 800dbd8:	200017ec 	.word	0x200017ec

0800dbdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbe0:	4b03      	ldr	r3, [pc, #12]	; (800dbf0 <vTaskMissedYield+0x14>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	601a      	str	r2, [r3, #0]
}
 800dbe6:	bf00      	nop
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	200017e8 	.word	0x200017e8

0800dbf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbfc:	f000 f852 	bl	800dca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc00:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <prvIdleTask+0x28>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d9f9      	bls.n	800dbfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <prvIdleTask+0x2c>)
 800dc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc18:	e7f0      	b.n	800dbfc <prvIdleTask+0x8>
 800dc1a:	bf00      	nop
 800dc1c:	20001304 	.word	0x20001304
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	607b      	str	r3, [r7, #4]
 800dc2e:	e00c      	b.n	800dc4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4613      	mov	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4413      	add	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4a12      	ldr	r2, [pc, #72]	; (800dc84 <prvInitialiseTaskLists+0x60>)
 800dc3c:	4413      	add	r3, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fe fcf0 	bl	800c624 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3301      	adds	r3, #1
 800dc48:	607b      	str	r3, [r7, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b37      	cmp	r3, #55	; 0x37
 800dc4e:	d9ef      	bls.n	800dc30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc50:	480d      	ldr	r0, [pc, #52]	; (800dc88 <prvInitialiseTaskLists+0x64>)
 800dc52:	f7fe fce7 	bl	800c624 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc56:	480d      	ldr	r0, [pc, #52]	; (800dc8c <prvInitialiseTaskLists+0x68>)
 800dc58:	f7fe fce4 	bl	800c624 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc5c:	480c      	ldr	r0, [pc, #48]	; (800dc90 <prvInitialiseTaskLists+0x6c>)
 800dc5e:	f7fe fce1 	bl	800c624 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc62:	480c      	ldr	r0, [pc, #48]	; (800dc94 <prvInitialiseTaskLists+0x70>)
 800dc64:	f7fe fcde 	bl	800c624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc68:	480b      	ldr	r0, [pc, #44]	; (800dc98 <prvInitialiseTaskLists+0x74>)
 800dc6a:	f7fe fcdb 	bl	800c624 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <prvInitialiseTaskLists+0x78>)
 800dc70:	4a05      	ldr	r2, [pc, #20]	; (800dc88 <prvInitialiseTaskLists+0x64>)
 800dc72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc74:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <prvInitialiseTaskLists+0x7c>)
 800dc76:	4a05      	ldr	r2, [pc, #20]	; (800dc8c <prvInitialiseTaskLists+0x68>)
 800dc78:	601a      	str	r2, [r3, #0]
}
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20001304 	.word	0x20001304
 800dc88:	20001764 	.word	0x20001764
 800dc8c:	20001778 	.word	0x20001778
 800dc90:	20001794 	.word	0x20001794
 800dc94:	200017a8 	.word	0x200017a8
 800dc98:	200017c0 	.word	0x200017c0
 800dc9c:	2000178c 	.word	0x2000178c
 800dca0:	20001790 	.word	0x20001790

0800dca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcaa:	e019      	b.n	800dce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dcac:	f000 fdd2 	bl	800e854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb0:	4b10      	ldr	r3, [pc, #64]	; (800dcf4 <prvCheckTasksWaitingTermination+0x50>)
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3304      	adds	r3, #4
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe fd3b 	bl	800c738 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcc2:	4b0d      	ldr	r3, [pc, #52]	; (800dcf8 <prvCheckTasksWaitingTermination+0x54>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	4a0b      	ldr	r2, [pc, #44]	; (800dcf8 <prvCheckTasksWaitingTermination+0x54>)
 800dcca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	4a0a      	ldr	r2, [pc, #40]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dcd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcd6:	f000 fded 	bl	800e8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f810 	bl	800dd00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce0:	4b06      	ldr	r3, [pc, #24]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e1      	bne.n	800dcac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	200017a8 	.word	0x200017a8
 800dcf8:	200017d4 	.word	0x200017d4
 800dcfc:	200017bc 	.word	0x200017bc

0800dd00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d108      	bne.n	800dd24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 ff8a 	bl	800ec30 <vPortFree>
				vPortFree( pxTCB );
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 ff87 	bl	800ec30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd22:	e018      	b.n	800dd56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d103      	bne.n	800dd36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 ff7e 	bl	800ec30 <vPortFree>
	}
 800dd34:	e00f      	b.n	800dd56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dd3c:	2b02      	cmp	r3, #2
 800dd3e:	d00a      	beq.n	800dd56 <prvDeleteTCB+0x56>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	60fb      	str	r3, [r7, #12]
}
 800dd52:	bf00      	nop
 800dd54:	e7fe      	b.n	800dd54 <prvDeleteTCB+0x54>
	}
 800dd56:	bf00      	nop
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
	...

0800dd60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd66:	4b0c      	ldr	r3, [pc, #48]	; (800dd98 <prvResetNextTaskUnblockTime+0x38>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d104      	bne.n	800dd7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd70:	4b0a      	ldr	r3, [pc, #40]	; (800dd9c <prvResetNextTaskUnblockTime+0x3c>)
 800dd72:	f04f 32ff 	mov.w	r2, #4294967295
 800dd76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd78:	e008      	b.n	800dd8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd7a:	4b07      	ldr	r3, [pc, #28]	; (800dd98 <prvResetNextTaskUnblockTime+0x38>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	4a04      	ldr	r2, [pc, #16]	; (800dd9c <prvResetNextTaskUnblockTime+0x3c>)
 800dd8a:	6013      	str	r3, [r2, #0]
}
 800dd8c:	bf00      	nop
 800dd8e:	370c      	adds	r7, #12
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	2000178c 	.word	0x2000178c
 800dd9c:	200017f4 	.word	0x200017f4

0800dda0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dda0:	b480      	push	{r7}
 800dda2:	b083      	sub	sp, #12
 800dda4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dda6:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <xTaskGetSchedulerState+0x34>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	607b      	str	r3, [r7, #4]
 800ddb2:	e008      	b.n	800ddc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddb4:	4b08      	ldr	r3, [pc, #32]	; (800ddd8 <xTaskGetSchedulerState+0x38>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ddbc:	2302      	movs	r3, #2
 800ddbe:	607b      	str	r3, [r7, #4]
 800ddc0:	e001      	b.n	800ddc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddc6:	687b      	ldr	r3, [r7, #4]
	}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr
 800ddd4:	200017e0 	.word	0x200017e0
 800ddd8:	200017fc 	.word	0x200017fc

0800dddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dde8:	2300      	movs	r3, #0
 800ddea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d056      	beq.n	800dea0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ddf2:	4b2e      	ldr	r3, [pc, #184]	; (800deac <xTaskPriorityDisinherit+0xd0>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d00a      	beq.n	800de12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	60fb      	str	r3, [r7, #12]
}
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de16:	2b00      	cmp	r3, #0
 800de18:	d10a      	bne.n	800de30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800de1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de1e:	f383 8811 	msr	BASEPRI, r3
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	f3bf 8f4f 	dsb	sy
 800de2a:	60bb      	str	r3, [r7, #8]
}
 800de2c:	bf00      	nop
 800de2e:	e7fe      	b.n	800de2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de34:	1e5a      	subs	r2, r3, #1
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de42:	429a      	cmp	r2, r3
 800de44:	d02c      	beq.n	800dea0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d128      	bne.n	800dea0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	3304      	adds	r3, #4
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fc70 	bl	800c738 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de70:	4b0f      	ldr	r3, [pc, #60]	; (800deb0 <xTaskPriorityDisinherit+0xd4>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	429a      	cmp	r2, r3
 800de76:	d903      	bls.n	800de80 <xTaskPriorityDisinherit+0xa4>
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7c:	4a0c      	ldr	r2, [pc, #48]	; (800deb0 <xTaskPriorityDisinherit+0xd4>)
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de84:	4613      	mov	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4413      	add	r3, r2
 800de8a:	009b      	lsls	r3, r3, #2
 800de8c:	4a09      	ldr	r2, [pc, #36]	; (800deb4 <xTaskPriorityDisinherit+0xd8>)
 800de8e:	441a      	add	r2, r3
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	3304      	adds	r3, #4
 800de94:	4619      	mov	r1, r3
 800de96:	4610      	mov	r0, r2
 800de98:	f7fe fbf1 	bl	800c67e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800de9c:	2301      	movs	r3, #1
 800de9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dea0:	697b      	ldr	r3, [r7, #20]
	}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20001300 	.word	0x20001300
 800deb0:	200017dc 	.word	0x200017dc
 800deb4:	20001304 	.word	0x20001304

0800deb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dec2:	4b21      	ldr	r3, [pc, #132]	; (800df48 <prvAddCurrentTaskToDelayedList+0x90>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dec8:	4b20      	ldr	r3, [pc, #128]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	3304      	adds	r3, #4
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fe fc32 	bl	800c738 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d10a      	bne.n	800def2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d007      	beq.n	800def2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dee2:	4b1a      	ldr	r3, [pc, #104]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	3304      	adds	r3, #4
 800dee8:	4619      	mov	r1, r3
 800deea:	4819      	ldr	r0, [pc, #100]	; (800df50 <prvAddCurrentTaskToDelayedList+0x98>)
 800deec:	f7fe fbc7 	bl	800c67e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800def0:	e026      	b.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4413      	add	r3, r2
 800def8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800defa:	4b14      	ldr	r3, [pc, #80]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	68ba      	ldr	r2, [r7, #8]
 800df00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	429a      	cmp	r2, r3
 800df08:	d209      	bcs.n	800df1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df0a:	4b12      	ldr	r3, [pc, #72]	; (800df54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	3304      	adds	r3, #4
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fe fbd5 	bl	800c6c6 <vListInsert>
}
 800df1c:	e010      	b.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df1e:	4b0e      	ldr	r3, [pc, #56]	; (800df58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <prvAddCurrentTaskToDelayedList+0x94>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3304      	adds	r3, #4
 800df28:	4619      	mov	r1, r3
 800df2a:	4610      	mov	r0, r2
 800df2c:	f7fe fbcb 	bl	800c6c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68ba      	ldr	r2, [r7, #8]
 800df36:	429a      	cmp	r2, r3
 800df38:	d202      	bcs.n	800df40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800df3a:	4a08      	ldr	r2, [pc, #32]	; (800df5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	6013      	str	r3, [r2, #0]
}
 800df40:	bf00      	nop
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	200017d8 	.word	0x200017d8
 800df4c:	20001300 	.word	0x20001300
 800df50:	200017c0 	.word	0x200017c0
 800df54:	20001790 	.word	0x20001790
 800df58:	2000178c 	.word	0x2000178c
 800df5c:	200017f4 	.word	0x200017f4

0800df60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08a      	sub	sp, #40	; 0x28
 800df64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df66:	2300      	movs	r3, #0
 800df68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df6a:	f000 fb07 	bl	800e57c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df6e:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <xTimerCreateTimerTask+0x80>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d021      	beq.n	800dfba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df7e:	1d3a      	adds	r2, r7, #4
 800df80:	f107 0108 	add.w	r1, r7, #8
 800df84:	f107 030c 	add.w	r3, r7, #12
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fe fb31 	bl	800c5f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df8e:	6879      	ldr	r1, [r7, #4]
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	9202      	str	r2, [sp, #8]
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	2302      	movs	r3, #2
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	2300      	movs	r3, #0
 800df9e:	460a      	mov	r2, r1
 800dfa0:	4910      	ldr	r1, [pc, #64]	; (800dfe4 <xTimerCreateTimerTask+0x84>)
 800dfa2:	4811      	ldr	r0, [pc, #68]	; (800dfe8 <xTimerCreateTimerTask+0x88>)
 800dfa4:	f7ff f8de 	bl	800d164 <xTaskCreateStatic>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	4a10      	ldr	r2, [pc, #64]	; (800dfec <xTimerCreateTimerTask+0x8c>)
 800dfac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dfae:	4b0f      	ldr	r3, [pc, #60]	; (800dfec <xTimerCreateTimerTask+0x8c>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10a      	bne.n	800dfd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	613b      	str	r3, [r7, #16]
}
 800dfd2:	bf00      	nop
 800dfd4:	e7fe      	b.n	800dfd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dfd6:	697b      	ldr	r3, [r7, #20]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20001830 	.word	0x20001830
 800dfe4:	08012a38 	.word	0x08012a38
 800dfe8:	0800e125 	.word	0x0800e125
 800dfec:	20001834 	.word	0x20001834

0800dff0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b08a      	sub	sp, #40	; 0x28
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dffe:	2300      	movs	r3, #0
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10a      	bne.n	800e01e <xTimerGenericCommand+0x2e>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	623b      	str	r3, [r7, #32]
}
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e01e:	4b1a      	ldr	r3, [pc, #104]	; (800e088 <xTimerGenericCommand+0x98>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d02a      	beq.n	800e07c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b05      	cmp	r3, #5
 800e036:	dc18      	bgt.n	800e06a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e038:	f7ff feb2 	bl	800dda0 <xTaskGetSchedulerState>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b02      	cmp	r3, #2
 800e040:	d109      	bne.n	800e056 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e042:	4b11      	ldr	r3, [pc, #68]	; (800e088 <xTimerGenericCommand+0x98>)
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f107 0110 	add.w	r1, r7, #16
 800e04a:	2300      	movs	r3, #0
 800e04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e04e:	f7fe fca1 	bl	800c994 <xQueueGenericSend>
 800e052:	6278      	str	r0, [r7, #36]	; 0x24
 800e054:	e012      	b.n	800e07c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e056:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <xTimerGenericCommand+0x98>)
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	f107 0110 	add.w	r1, r7, #16
 800e05e:	2300      	movs	r3, #0
 800e060:	2200      	movs	r2, #0
 800e062:	f7fe fc97 	bl	800c994 <xQueueGenericSend>
 800e066:	6278      	str	r0, [r7, #36]	; 0x24
 800e068:	e008      	b.n	800e07c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e06a:	4b07      	ldr	r3, [pc, #28]	; (800e088 <xTimerGenericCommand+0x98>)
 800e06c:	6818      	ldr	r0, [r3, #0]
 800e06e:	f107 0110 	add.w	r1, r7, #16
 800e072:	2300      	movs	r3, #0
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	f7fe fd8b 	bl	800cb90 <xQueueGenericSendFromISR>
 800e07a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3728      	adds	r7, #40	; 0x28
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20001830 	.word	0x20001830

0800e08c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b088      	sub	sp, #32
 800e090:	af02      	add	r7, sp, #8
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e096:	4b22      	ldr	r3, [pc, #136]	; (800e120 <prvProcessExpiredTimer+0x94>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe fb47 	bl	800c738 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0b0:	f003 0304 	and.w	r3, r3, #4
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d022      	beq.n	800e0fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	699a      	ldr	r2, [r3, #24]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	18d1      	adds	r1, r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	6978      	ldr	r0, [r7, #20]
 800e0c6:	f000 f8d1 	bl	800e26c <prvInsertTimerInActiveList>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d01f      	beq.n	800e110 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	2100      	movs	r1, #0
 800e0da:	6978      	ldr	r0, [r7, #20]
 800e0dc:	f7ff ff88 	bl	800dff0 <xTimerGenericCommand>
 800e0e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d113      	bne.n	800e110 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	60fb      	str	r3, [r7, #12]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e104:	f023 0301 	bic.w	r3, r3, #1
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	6a1b      	ldr	r3, [r3, #32]
 800e114:	6978      	ldr	r0, [r7, #20]
 800e116:	4798      	blx	r3
}
 800e118:	bf00      	nop
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20001828 	.word	0x20001828

0800e124 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e12c:	f107 0308 	add.w	r3, r7, #8
 800e130:	4618      	mov	r0, r3
 800e132:	f000 f857 	bl	800e1e4 <prvGetNextExpireTime>
 800e136:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	4619      	mov	r1, r3
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f000 f803 	bl	800e148 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e142:	f000 f8d5 	bl	800e2f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e146:	e7f1      	b.n	800e12c <prvTimerTask+0x8>

0800e148 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e152:	f7ff fa43 	bl	800d5dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e156:	f107 0308 	add.w	r3, r7, #8
 800e15a:	4618      	mov	r0, r3
 800e15c:	f000 f866 	bl	800e22c <prvSampleTimeNow>
 800e160:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d130      	bne.n	800e1ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10a      	bne.n	800e184 <prvProcessTimerOrBlockTask+0x3c>
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	429a      	cmp	r2, r3
 800e174:	d806      	bhi.n	800e184 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e176:	f7ff fa3f 	bl	800d5f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e17a:	68f9      	ldr	r1, [r7, #12]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ff85 	bl	800e08c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e182:	e024      	b.n	800e1ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d008      	beq.n	800e19c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e18a:	4b13      	ldr	r3, [pc, #76]	; (800e1d8 <prvProcessTimerOrBlockTask+0x90>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <prvProcessTimerOrBlockTask+0x50>
 800e194:	2301      	movs	r3, #1
 800e196:	e000      	b.n	800e19a <prvProcessTimerOrBlockTask+0x52>
 800e198:	2300      	movs	r3, #0
 800e19a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e19c:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <prvProcessTimerOrBlockTask+0x94>)
 800e19e:	6818      	ldr	r0, [r3, #0]
 800e1a0:	687a      	ldr	r2, [r7, #4]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	1ad3      	subs	r3, r2, r3
 800e1a6:	683a      	ldr	r2, [r7, #0]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	f7fe ffa7 	bl	800d0fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1ae:	f7ff fa23 	bl	800d5f8 <xTaskResumeAll>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10a      	bne.n	800e1ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1b8:	4b09      	ldr	r3, [pc, #36]	; (800e1e0 <prvProcessTimerOrBlockTask+0x98>)
 800e1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	f3bf 8f6f 	isb	sy
}
 800e1c8:	e001      	b.n	800e1ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1ca:	f7ff fa15 	bl	800d5f8 <xTaskResumeAll>
}
 800e1ce:	bf00      	nop
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	2000182c 	.word	0x2000182c
 800e1dc:	20001830 	.word	0x20001830
 800e1e0:	e000ed04 	.word	0xe000ed04

0800e1e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e1ec:	4b0e      	ldr	r3, [pc, #56]	; (800e228 <prvGetNextExpireTime+0x44>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <prvGetNextExpireTime+0x16>
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	e000      	b.n	800e1fc <prvGetNextExpireTime+0x18>
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d105      	bne.n	800e214 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e208:	4b07      	ldr	r3, [pc, #28]	; (800e228 <prvGetNextExpireTime+0x44>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68db      	ldr	r3, [r3, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	60fb      	str	r3, [r7, #12]
 800e212:	e001      	b.n	800e218 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e214:	2300      	movs	r3, #0
 800e216:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e218:	68fb      	ldr	r3, [r7, #12]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3714      	adds	r7, #20
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	20001828 	.word	0x20001828

0800e22c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e234:	f7ff fa7e 	bl	800d734 <xTaskGetTickCount>
 800e238:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e23a:	4b0b      	ldr	r3, [pc, #44]	; (800e268 <prvSampleTimeNow+0x3c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	429a      	cmp	r2, r3
 800e242:	d205      	bcs.n	800e250 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e244:	f000 f936 	bl	800e4b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	e002      	b.n	800e256 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e256:	4a04      	ldr	r2, [pc, #16]	; (800e268 <prvSampleTimeNow+0x3c>)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e25c:	68fb      	ldr	r3, [r7, #12]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	20001838 	.word	0x20001838

0800e26c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e27a:	2300      	movs	r3, #0
 800e27c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	68fa      	ldr	r2, [r7, #12]
 800e288:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d812      	bhi.n	800e2b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e292:	687a      	ldr	r2, [r7, #4]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	1ad2      	subs	r2, r2, r3
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d302      	bcc.n	800e2a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	e01b      	b.n	800e2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2a6:	4b10      	ldr	r3, [pc, #64]	; (800e2e8 <prvInsertTimerInActiveList+0x7c>)
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	f7fe fa08 	bl	800c6c6 <vListInsert>
 800e2b6:	e012      	b.n	800e2de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d206      	bcs.n	800e2ce <prvInsertTimerInActiveList+0x62>
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d302      	bcc.n	800e2ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	617b      	str	r3, [r7, #20]
 800e2cc:	e007      	b.n	800e2de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2ce:	4b07      	ldr	r3, [pc, #28]	; (800e2ec <prvInsertTimerInActiveList+0x80>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	4610      	mov	r0, r2
 800e2da:	f7fe f9f4 	bl	800c6c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2de:	697b      	ldr	r3, [r7, #20]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3718      	adds	r7, #24
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	2000182c 	.word	0x2000182c
 800e2ec:	20001828 	.word	0x20001828

0800e2f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b08e      	sub	sp, #56	; 0x38
 800e2f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2f6:	e0ca      	b.n	800e48e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	da18      	bge.n	800e330 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e2fe:	1d3b      	adds	r3, r7, #4
 800e300:	3304      	adds	r3, #4
 800e302:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10a      	bne.n	800e320 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	61fb      	str	r3, [r7, #28]
}
 800e31c:	bf00      	nop
 800e31e:	e7fe      	b.n	800e31e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e326:	6850      	ldr	r0, [r2, #4]
 800e328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e32a:	6892      	ldr	r2, [r2, #8]
 800e32c:	4611      	mov	r1, r2
 800e32e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	f2c0 80aa 	blt.w	800e48c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d004      	beq.n	800e34e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e346:	3304      	adds	r3, #4
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fe f9f5 	bl	800c738 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e34e:	463b      	mov	r3, r7
 800e350:	4618      	mov	r0, r3
 800e352:	f7ff ff6b 	bl	800e22c <prvSampleTimeNow>
 800e356:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b09      	cmp	r3, #9
 800e35c:	f200 8097 	bhi.w	800e48e <prvProcessReceivedCommands+0x19e>
 800e360:	a201      	add	r2, pc, #4	; (adr r2, 800e368 <prvProcessReceivedCommands+0x78>)
 800e362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e366:	bf00      	nop
 800e368:	0800e391 	.word	0x0800e391
 800e36c:	0800e391 	.word	0x0800e391
 800e370:	0800e391 	.word	0x0800e391
 800e374:	0800e405 	.word	0x0800e405
 800e378:	0800e419 	.word	0x0800e419
 800e37c:	0800e463 	.word	0x0800e463
 800e380:	0800e391 	.word	0x0800e391
 800e384:	0800e391 	.word	0x0800e391
 800e388:	0800e405 	.word	0x0800e405
 800e38c:	0800e419 	.word	0x0800e419
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e396:	f043 0301 	orr.w	r3, r3, #1
 800e39a:	b2da      	uxtb	r2, r3
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	18d1      	adds	r1, r2, r3
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3b0:	f7ff ff5c 	bl	800e26c <prvInsertTimerInActiveList>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d069      	beq.n	800e48e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d05e      	beq.n	800e48e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	441a      	add	r2, r3
 800e3d8:	2300      	movs	r3, #0
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	2100      	movs	r1, #0
 800e3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3e2:	f7ff fe05 	bl	800dff0 <xTimerGenericCommand>
 800e3e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e3e8:	6a3b      	ldr	r3, [r7, #32]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d14f      	bne.n	800e48e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	61bb      	str	r3, [r7, #24]
}
 800e400:	bf00      	nop
 800e402:	e7fe      	b.n	800e402 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e40a:	f023 0301 	bic.w	r3, r3, #1
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e416:	e03a      	b.n	800e48e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e41e:	f043 0301 	orr.w	r3, r3, #1
 800e422:	b2da      	uxtb	r2, r3
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d10a      	bne.n	800e44e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e43c:	f383 8811 	msr	BASEPRI, r3
 800e440:	f3bf 8f6f 	isb	sy
 800e444:	f3bf 8f4f 	dsb	sy
 800e448:	617b      	str	r3, [r7, #20]
}
 800e44a:	bf00      	nop
 800e44c:	e7fe      	b.n	800e44c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	699a      	ldr	r2, [r3, #24]
 800e452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e454:	18d1      	adds	r1, r2, r3
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e45c:	f7ff ff06 	bl	800e26c <prvInsertTimerInActiveList>
					break;
 800e460:	e015      	b.n	800e48e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e468:	f003 0302 	and.w	r3, r3, #2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d103      	bne.n	800e478 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e472:	f000 fbdd 	bl	800ec30 <vPortFree>
 800e476:	e00a      	b.n	800e48e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e47e:	f023 0301 	bic.w	r3, r3, #1
 800e482:	b2da      	uxtb	r2, r3
 800e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e48a:	e000      	b.n	800e48e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e48c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e48e:	4b08      	ldr	r3, [pc, #32]	; (800e4b0 <prvProcessReceivedCommands+0x1c0>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	1d39      	adds	r1, r7, #4
 800e494:	2200      	movs	r2, #0
 800e496:	4618      	mov	r0, r3
 800e498:	f7fe fc16 	bl	800ccc8 <xQueueReceive>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f47f af2a 	bne.w	800e2f8 <prvProcessReceivedCommands+0x8>
	}
}
 800e4a4:	bf00      	nop
 800e4a6:	bf00      	nop
 800e4a8:	3730      	adds	r7, #48	; 0x30
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	20001830 	.word	0x20001830

0800e4b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b088      	sub	sp, #32
 800e4b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4ba:	e048      	b.n	800e54e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4c6:	4b2b      	ldr	r3, [pc, #172]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fe f92f 	bl	800c738 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6a1b      	ldr	r3, [r3, #32]
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4e8:	f003 0304 	and.w	r3, r3, #4
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d02e      	beq.n	800e54e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	699b      	ldr	r3, [r3, #24]
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d90e      	bls.n	800e520 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	68ba      	ldr	r2, [r7, #8]
 800e506:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e50e:	4b19      	ldr	r3, [pc, #100]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3304      	adds	r3, #4
 800e516:	4619      	mov	r1, r3
 800e518:	4610      	mov	r0, r2
 800e51a:	f7fe f8d4 	bl	800c6c6 <vListInsert>
 800e51e:	e016      	b.n	800e54e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e520:	2300      	movs	r3, #0
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	2300      	movs	r3, #0
 800e526:	693a      	ldr	r2, [r7, #16]
 800e528:	2100      	movs	r1, #0
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f7ff fd60 	bl	800dff0 <xTimerGenericCommand>
 800e530:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d10a      	bne.n	800e54e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53c:	f383 8811 	msr	BASEPRI, r3
 800e540:	f3bf 8f6f 	isb	sy
 800e544:	f3bf 8f4f 	dsb	sy
 800e548:	603b      	str	r3, [r7, #0]
}
 800e54a:	bf00      	nop
 800e54c:	e7fe      	b.n	800e54c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e54e:	4b09      	ldr	r3, [pc, #36]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1b1      	bne.n	800e4bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e558:	4b06      	ldr	r3, [pc, #24]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e55e:	4b06      	ldr	r3, [pc, #24]	; (800e578 <prvSwitchTimerLists+0xc4>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a04      	ldr	r2, [pc, #16]	; (800e574 <prvSwitchTimerLists+0xc0>)
 800e564:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e566:	4a04      	ldr	r2, [pc, #16]	; (800e578 <prvSwitchTimerLists+0xc4>)
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	6013      	str	r3, [r2, #0]
}
 800e56c:	bf00      	nop
 800e56e:	3718      	adds	r7, #24
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20001828 	.word	0x20001828
 800e578:	2000182c 	.word	0x2000182c

0800e57c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e582:	f000 f967 	bl	800e854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e586:	4b15      	ldr	r3, [pc, #84]	; (800e5dc <prvCheckForValidListAndQueue+0x60>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d120      	bne.n	800e5d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e58e:	4814      	ldr	r0, [pc, #80]	; (800e5e0 <prvCheckForValidListAndQueue+0x64>)
 800e590:	f7fe f848 	bl	800c624 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e594:	4813      	ldr	r0, [pc, #76]	; (800e5e4 <prvCheckForValidListAndQueue+0x68>)
 800e596:	f7fe f845 	bl	800c624 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e59a:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <prvCheckForValidListAndQueue+0x6c>)
 800e59c:	4a10      	ldr	r2, [pc, #64]	; (800e5e0 <prvCheckForValidListAndQueue+0x64>)
 800e59e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5a0:	4b12      	ldr	r3, [pc, #72]	; (800e5ec <prvCheckForValidListAndQueue+0x70>)
 800e5a2:	4a10      	ldr	r2, [pc, #64]	; (800e5e4 <prvCheckForValidListAndQueue+0x68>)
 800e5a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	4b11      	ldr	r3, [pc, #68]	; (800e5f0 <prvCheckForValidListAndQueue+0x74>)
 800e5ac:	4a11      	ldr	r2, [pc, #68]	; (800e5f4 <prvCheckForValidListAndQueue+0x78>)
 800e5ae:	2110      	movs	r1, #16
 800e5b0:	200a      	movs	r0, #10
 800e5b2:	f7fe f953 	bl	800c85c <xQueueGenericCreateStatic>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	4a08      	ldr	r2, [pc, #32]	; (800e5dc <prvCheckForValidListAndQueue+0x60>)
 800e5ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5bc:	4b07      	ldr	r3, [pc, #28]	; (800e5dc <prvCheckForValidListAndQueue+0x60>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d005      	beq.n	800e5d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5c4:	4b05      	ldr	r3, [pc, #20]	; (800e5dc <prvCheckForValidListAndQueue+0x60>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	490b      	ldr	r1, [pc, #44]	; (800e5f8 <prvCheckForValidListAndQueue+0x7c>)
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fd6c 	bl	800d0a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5d0:	f000 f970 	bl	800e8b4 <vPortExitCritical>
}
 800e5d4:	bf00      	nop
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	20001830 	.word	0x20001830
 800e5e0:	20001800 	.word	0x20001800
 800e5e4:	20001814 	.word	0x20001814
 800e5e8:	20001828 	.word	0x20001828
 800e5ec:	2000182c 	.word	0x2000182c
 800e5f0:	200018dc 	.word	0x200018dc
 800e5f4:	2000183c 	.word	0x2000183c
 800e5f8:	08012a40 	.word	0x08012a40

0800e5fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b085      	sub	sp, #20
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3b04      	subs	r3, #4
 800e60c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3b04      	subs	r3, #4
 800e61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f023 0201 	bic.w	r2, r3, #1
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3b04      	subs	r3, #4
 800e62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e62c:	4a0c      	ldr	r2, [pc, #48]	; (800e660 <pxPortInitialiseStack+0x64>)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3b14      	subs	r3, #20
 800e636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3b04      	subs	r3, #4
 800e642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f06f 0202 	mvn.w	r2, #2
 800e64a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	3b20      	subs	r3, #32
 800e650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e652:	68fb      	ldr	r3, [r7, #12]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	0800e665 	.word	0x0800e665

0800e664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e66a:	2300      	movs	r3, #0
 800e66c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e66e:	4b12      	ldr	r3, [pc, #72]	; (800e6b8 <prvTaskExitError+0x54>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e676:	d00a      	beq.n	800e68e <prvTaskExitError+0x2a>
	__asm volatile
 800e678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67c:	f383 8811 	msr	BASEPRI, r3
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	60fb      	str	r3, [r7, #12]
}
 800e68a:	bf00      	nop
 800e68c:	e7fe      	b.n	800e68c <prvTaskExitError+0x28>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	60bb      	str	r3, [r7, #8]
}
 800e6a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6a2:	bf00      	nop
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d0fc      	beq.n	800e6a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	2000004c 	.word	0x2000004c
 800e6bc:	00000000 	.word	0x00000000

0800e6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <pxCurrentTCBConst2>)
 800e6c2:	6819      	ldr	r1, [r3, #0]
 800e6c4:	6808      	ldr	r0, [r1, #0]
 800e6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ca:	f380 8809 	msr	PSP, r0
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	f04f 0000 	mov.w	r0, #0
 800e6d6:	f380 8811 	msr	BASEPRI, r0
 800e6da:	4770      	bx	lr
 800e6dc:	f3af 8000 	nop.w

0800e6e0 <pxCurrentTCBConst2>:
 800e6e0:	20001300 	.word	0x20001300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop

0800e6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <prvPortStartFirstTask+0x24>)
 800e6ea:	6800      	ldr	r0, [r0, #0]
 800e6ec:	6800      	ldr	r0, [r0, #0]
 800e6ee:	f380 8808 	msr	MSP, r0
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8814 	msr	CONTROL, r0
 800e6fa:	b662      	cpsie	i
 800e6fc:	b661      	cpsie	f
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	f3bf 8f6f 	isb	sy
 800e706:	df00      	svc	0
 800e708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e70a:	bf00      	nop
 800e70c:	e000ed08 	.word	0xe000ed08

0800e710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e716:	4b46      	ldr	r3, [pc, #280]	; (800e830 <xPortStartScheduler+0x120>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a46      	ldr	r2, [pc, #280]	; (800e834 <xPortStartScheduler+0x124>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d10a      	bne.n	800e736 <xPortStartScheduler+0x26>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	613b      	str	r3, [r7, #16]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e736:	4b3e      	ldr	r3, [pc, #248]	; (800e830 <xPortStartScheduler+0x120>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a3f      	ldr	r2, [pc, #252]	; (800e838 <xPortStartScheduler+0x128>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10a      	bne.n	800e756 <xPortStartScheduler+0x46>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	60fb      	str	r3, [r7, #12]
}
 800e752:	bf00      	nop
 800e754:	e7fe      	b.n	800e754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e756:	4b39      	ldr	r3, [pc, #228]	; (800e83c <xPortStartScheduler+0x12c>)
 800e758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	22ff      	movs	r2, #255	; 0xff
 800e766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	4b31      	ldr	r3, [pc, #196]	; (800e840 <xPortStartScheduler+0x130>)
 800e77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e77e:	4b31      	ldr	r3, [pc, #196]	; (800e844 <xPortStartScheduler+0x134>)
 800e780:	2207      	movs	r2, #7
 800e782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e784:	e009      	b.n	800e79a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e786:	4b2f      	ldr	r3, [pc, #188]	; (800e844 <xPortStartScheduler+0x134>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	3b01      	subs	r3, #1
 800e78c:	4a2d      	ldr	r2, [pc, #180]	; (800e844 <xPortStartScheduler+0x134>)
 800e78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	005b      	lsls	r3, r3, #1
 800e796:	b2db      	uxtb	r3, r3
 800e798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e79a:	78fb      	ldrb	r3, [r7, #3]
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a2:	2b80      	cmp	r3, #128	; 0x80
 800e7a4:	d0ef      	beq.n	800e786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7a6:	4b27      	ldr	r3, [pc, #156]	; (800e844 <xPortStartScheduler+0x134>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f1c3 0307 	rsb	r3, r3, #7
 800e7ae:	2b04      	cmp	r3, #4
 800e7b0:	d00a      	beq.n	800e7c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	60bb      	str	r3, [r7, #8]
}
 800e7c4:	bf00      	nop
 800e7c6:	e7fe      	b.n	800e7c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7c8:	4b1e      	ldr	r3, [pc, #120]	; (800e844 <xPortStartScheduler+0x134>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	4a1d      	ldr	r2, [pc, #116]	; (800e844 <xPortStartScheduler+0x134>)
 800e7d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7d2:	4b1c      	ldr	r3, [pc, #112]	; (800e844 <xPortStartScheduler+0x134>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e7da:	4a1a      	ldr	r2, [pc, #104]	; (800e844 <xPortStartScheduler+0x134>)
 800e7dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e7e6:	4b18      	ldr	r3, [pc, #96]	; (800e848 <xPortStartScheduler+0x138>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a17      	ldr	r2, [pc, #92]	; (800e848 <xPortStartScheduler+0x138>)
 800e7ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7f2:	4b15      	ldr	r3, [pc, #84]	; (800e848 <xPortStartScheduler+0x138>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4a14      	ldr	r2, [pc, #80]	; (800e848 <xPortStartScheduler+0x138>)
 800e7f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7fe:	f000 f8dd 	bl	800e9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e802:	4b12      	ldr	r3, [pc, #72]	; (800e84c <xPortStartScheduler+0x13c>)
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e808:	f000 f8fc 	bl	800ea04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e80c:	4b10      	ldr	r3, [pc, #64]	; (800e850 <xPortStartScheduler+0x140>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a0f      	ldr	r2, [pc, #60]	; (800e850 <xPortStartScheduler+0x140>)
 800e812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e818:	f7ff ff66 	bl	800e6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e81c:	f7ff f854 	bl	800d8c8 <vTaskSwitchContext>
	prvTaskExitError();
 800e820:	f7ff ff20 	bl	800e664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3718      	adds	r7, #24
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	e000ed00 	.word	0xe000ed00
 800e834:	410fc271 	.word	0x410fc271
 800e838:	410fc270 	.word	0x410fc270
 800e83c:	e000e400 	.word	0xe000e400
 800e840:	2000192c 	.word	0x2000192c
 800e844:	20001930 	.word	0x20001930
 800e848:	e000ed20 	.word	0xe000ed20
 800e84c:	2000004c 	.word	0x2000004c
 800e850:	e000ef34 	.word	0xe000ef34

0800e854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
	__asm volatile
 800e85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85e:	f383 8811 	msr	BASEPRI, r3
 800e862:	f3bf 8f6f 	isb	sy
 800e866:	f3bf 8f4f 	dsb	sy
 800e86a:	607b      	str	r3, [r7, #4]
}
 800e86c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e86e:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <vPortEnterCritical+0x58>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3301      	adds	r3, #1
 800e874:	4a0d      	ldr	r2, [pc, #52]	; (800e8ac <vPortEnterCritical+0x58>)
 800e876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <vPortEnterCritical+0x58>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d10f      	bne.n	800e8a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e880:	4b0b      	ldr	r3, [pc, #44]	; (800e8b0 <vPortEnterCritical+0x5c>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00a      	beq.n	800e8a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	603b      	str	r3, [r7, #0]
}
 800e89c:	bf00      	nop
 800e89e:	e7fe      	b.n	800e89e <vPortEnterCritical+0x4a>
	}
}
 800e8a0:	bf00      	nop
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr
 800e8ac:	2000004c 	.word	0x2000004c
 800e8b0:	e000ed04 	.word	0xe000ed04

0800e8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8ba:	4b12      	ldr	r3, [pc, #72]	; (800e904 <vPortExitCritical+0x50>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10a      	bne.n	800e8d8 <vPortExitCritical+0x24>
	__asm volatile
 800e8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c6:	f383 8811 	msr	BASEPRI, r3
 800e8ca:	f3bf 8f6f 	isb	sy
 800e8ce:	f3bf 8f4f 	dsb	sy
 800e8d2:	607b      	str	r3, [r7, #4]
}
 800e8d4:	bf00      	nop
 800e8d6:	e7fe      	b.n	800e8d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <vPortExitCritical+0x50>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3b01      	subs	r3, #1
 800e8de:	4a09      	ldr	r2, [pc, #36]	; (800e904 <vPortExitCritical+0x50>)
 800e8e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e8e2:	4b08      	ldr	r3, [pc, #32]	; (800e904 <vPortExitCritical+0x50>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d105      	bne.n	800e8f6 <vPortExitCritical+0x42>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	f383 8811 	msr	BASEPRI, r3
}
 800e8f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8f6:	bf00      	nop
 800e8f8:	370c      	adds	r7, #12
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2000004c 	.word	0x2000004c
	...

0800e910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e910:	f3ef 8009 	mrs	r0, PSP
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4b15      	ldr	r3, [pc, #84]	; (800e970 <pxCurrentTCBConst>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	f01e 0f10 	tst.w	lr, #16
 800e920:	bf08      	it	eq
 800e922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92a:	6010      	str	r0, [r2, #0]
 800e92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e934:	f380 8811 	msr	BASEPRI, r0
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	f3bf 8f6f 	isb	sy
 800e940:	f7fe ffc2 	bl	800d8c8 <vTaskSwitchContext>
 800e944:	f04f 0000 	mov.w	r0, #0
 800e948:	f380 8811 	msr	BASEPRI, r0
 800e94c:	bc09      	pop	{r0, r3}
 800e94e:	6819      	ldr	r1, [r3, #0]
 800e950:	6808      	ldr	r0, [r1, #0]
 800e952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e956:	f01e 0f10 	tst.w	lr, #16
 800e95a:	bf08      	it	eq
 800e95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e960:	f380 8809 	msr	PSP, r0
 800e964:	f3bf 8f6f 	isb	sy
 800e968:	4770      	bx	lr
 800e96a:	bf00      	nop
 800e96c:	f3af 8000 	nop.w

0800e970 <pxCurrentTCBConst>:
 800e970:	20001300 	.word	0x20001300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e974:	bf00      	nop
 800e976:	bf00      	nop

0800e978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	607b      	str	r3, [r7, #4]
}
 800e990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e992:	f7fe fedf 	bl	800d754 <xTaskIncrementTick>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e99c:	4b06      	ldr	r3, [pc, #24]	; (800e9b8 <xPortSysTickHandler+0x40>)
 800e99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f383 8811 	msr	BASEPRI, r3
}
 800e9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	e000ed04 	.word	0xe000ed04

0800e9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <vPortSetupTimerInterrupt+0x34>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <vPortSetupTimerInterrupt+0x38>)
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	; (800e9f8 <vPortSetupTimerInterrupt+0x3c>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a0a      	ldr	r2, [pc, #40]	; (800e9fc <vPortSetupTimerInterrupt+0x40>)
 800e9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d6:	099b      	lsrs	r3, r3, #6
 800e9d8:	4a09      	ldr	r2, [pc, #36]	; (800ea00 <vPortSetupTimerInterrupt+0x44>)
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9de:	4b04      	ldr	r3, [pc, #16]	; (800e9f0 <vPortSetupTimerInterrupt+0x34>)
 800e9e0:	2207      	movs	r2, #7
 800e9e2:	601a      	str	r2, [r3, #0]
}
 800e9e4:	bf00      	nop
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	e000e010 	.word	0xe000e010
 800e9f4:	e000e018 	.word	0xe000e018
 800e9f8:	20000008 	.word	0x20000008
 800e9fc:	10624dd3 	.word	0x10624dd3
 800ea00:	e000e014 	.word	0xe000e014

0800ea04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ea14 <vPortEnableVFP+0x10>
 800ea08:	6801      	ldr	r1, [r0, #0]
 800ea0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ea0e:	6001      	str	r1, [r0, #0]
 800ea10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea12:	bf00      	nop
 800ea14:	e000ed88 	.word	0xe000ed88

0800ea18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea1e:	f3ef 8305 	mrs	r3, IPSR
 800ea22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b0f      	cmp	r3, #15
 800ea28:	d914      	bls.n	800ea54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea2a:	4a17      	ldr	r2, [pc, #92]	; (800ea88 <vPortValidateInterruptPriority+0x70>)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	4413      	add	r3, r2
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ea34:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <vPortValidateInterruptPriority+0x74>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	7afa      	ldrb	r2, [r7, #11]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d20a      	bcs.n	800ea54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	607b      	str	r3, [r7, #4]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ea54:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <vPortValidateInterruptPriority+0x78>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ea5c:	4b0d      	ldr	r3, [pc, #52]	; (800ea94 <vPortValidateInterruptPriority+0x7c>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d90a      	bls.n	800ea7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea68:	f383 8811 	msr	BASEPRI, r3
 800ea6c:	f3bf 8f6f 	isb	sy
 800ea70:	f3bf 8f4f 	dsb	sy
 800ea74:	603b      	str	r3, [r7, #0]
}
 800ea76:	bf00      	nop
 800ea78:	e7fe      	b.n	800ea78 <vPortValidateInterruptPriority+0x60>
	}
 800ea7a:	bf00      	nop
 800ea7c:	3714      	adds	r7, #20
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea84:	4770      	bx	lr
 800ea86:	bf00      	nop
 800ea88:	e000e3f0 	.word	0xe000e3f0
 800ea8c:	2000192c 	.word	0x2000192c
 800ea90:	e000ed0c 	.word	0xe000ed0c
 800ea94:	20001930 	.word	0x20001930

0800ea98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08a      	sub	sp, #40	; 0x28
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eaa4:	f7fe fd9a 	bl	800d5dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eaa8:	4b5b      	ldr	r3, [pc, #364]	; (800ec18 <pvPortMalloc+0x180>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eab0:	f000 f920 	bl	800ecf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eab4:	4b59      	ldr	r3, [pc, #356]	; (800ec1c <pvPortMalloc+0x184>)
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4013      	ands	r3, r2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f040 8093 	bne.w	800ebe8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01d      	beq.n	800eb04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800eac8:	2208      	movs	r2, #8
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4413      	add	r3, r2
 800eace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f003 0307 	and.w	r3, r3, #7
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d014      	beq.n	800eb04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f023 0307 	bic.w	r3, r3, #7
 800eae0:	3308      	adds	r3, #8
 800eae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <pvPortMalloc+0x6c>
	__asm volatile
 800eaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf2:	f383 8811 	msr	BASEPRI, r3
 800eaf6:	f3bf 8f6f 	isb	sy
 800eafa:	f3bf 8f4f 	dsb	sy
 800eafe:	617b      	str	r3, [r7, #20]
}
 800eb00:	bf00      	nop
 800eb02:	e7fe      	b.n	800eb02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d06e      	beq.n	800ebe8 <pvPortMalloc+0x150>
 800eb0a:	4b45      	ldr	r3, [pc, #276]	; (800ec20 <pvPortMalloc+0x188>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	687a      	ldr	r2, [r7, #4]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d869      	bhi.n	800ebe8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb14:	4b43      	ldr	r3, [pc, #268]	; (800ec24 <pvPortMalloc+0x18c>)
 800eb16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb18:	4b42      	ldr	r3, [pc, #264]	; (800ec24 <pvPortMalloc+0x18c>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb1e:	e004      	b.n	800eb2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d903      	bls.n	800eb3c <pvPortMalloc+0xa4>
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1f1      	bne.n	800eb20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eb3c:	4b36      	ldr	r3, [pc, #216]	; (800ec18 <pvPortMalloc+0x180>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d050      	beq.n	800ebe8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	2208      	movs	r2, #8
 800eb4c:	4413      	add	r3, r2
 800eb4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	6a3b      	ldr	r3, [r7, #32]
 800eb56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	1ad2      	subs	r2, r2, r3
 800eb60:	2308      	movs	r3, #8
 800eb62:	005b      	lsls	r3, r3, #1
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d91f      	bls.n	800eba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4413      	add	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00a      	beq.n	800eb90 <pvPortMalloc+0xf8>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	613b      	str	r3, [r7, #16]
}
 800eb8c:	bf00      	nop
 800eb8e:	e7fe      	b.n	800eb8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	1ad2      	subs	r2, r2, r3
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	687a      	ldr	r2, [r7, #4]
 800eba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eba2:	69b8      	ldr	r0, [r7, #24]
 800eba4:	f000 f908 	bl	800edb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eba8:	4b1d      	ldr	r3, [pc, #116]	; (800ec20 <pvPortMalloc+0x188>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	4a1b      	ldr	r2, [pc, #108]	; (800ec20 <pvPortMalloc+0x188>)
 800ebb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ebb6:	4b1a      	ldr	r3, [pc, #104]	; (800ec20 <pvPortMalloc+0x188>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	4b1b      	ldr	r3, [pc, #108]	; (800ec28 <pvPortMalloc+0x190>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d203      	bcs.n	800ebca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ebc2:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <pvPortMalloc+0x188>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a18      	ldr	r2, [pc, #96]	; (800ec28 <pvPortMalloc+0x190>)
 800ebc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	685a      	ldr	r2, [r3, #4]
 800ebce:	4b13      	ldr	r3, [pc, #76]	; (800ec1c <pvPortMalloc+0x184>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	2200      	movs	r2, #0
 800ebdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ebde:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <pvPortMalloc+0x194>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	4a11      	ldr	r2, [pc, #68]	; (800ec2c <pvPortMalloc+0x194>)
 800ebe6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ebe8:	f7fe fd06 	bl	800d5f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	f003 0307 	and.w	r3, r3, #7
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d00a      	beq.n	800ec0c <pvPortMalloc+0x174>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	60fb      	str	r3, [r7, #12]
}
 800ec08:	bf00      	nop
 800ec0a:	e7fe      	b.n	800ec0a <pvPortMalloc+0x172>
	return pvReturn;
 800ec0c:	69fb      	ldr	r3, [r7, #28]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3728      	adds	r7, #40	; 0x28
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	20002cc4 	.word	0x20002cc4
 800ec1c:	20002cd8 	.word	0x20002cd8
 800ec20:	20002cc8 	.word	0x20002cc8
 800ec24:	20002cbc 	.word	0x20002cbc
 800ec28:	20002ccc 	.word	0x20002ccc
 800ec2c:	20002cd0 	.word	0x20002cd0

0800ec30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b086      	sub	sp, #24
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d04d      	beq.n	800ecde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ec42:	2308      	movs	r3, #8
 800ec44:	425b      	negs	r3, r3
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	4413      	add	r3, r2
 800ec4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	4b24      	ldr	r3, [pc, #144]	; (800ece8 <vPortFree+0xb8>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	4013      	ands	r3, r2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10a      	bne.n	800ec74 <vPortFree+0x44>
	__asm volatile
 800ec5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	60fb      	str	r3, [r7, #12]
}
 800ec70:	bf00      	nop
 800ec72:	e7fe      	b.n	800ec72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d00a      	beq.n	800ec92 <vPortFree+0x62>
	__asm volatile
 800ec7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec80:	f383 8811 	msr	BASEPRI, r3
 800ec84:	f3bf 8f6f 	isb	sy
 800ec88:	f3bf 8f4f 	dsb	sy
 800ec8c:	60bb      	str	r3, [r7, #8]
}
 800ec8e:	bf00      	nop
 800ec90:	e7fe      	b.n	800ec90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	685a      	ldr	r2, [r3, #4]
 800ec96:	4b14      	ldr	r3, [pc, #80]	; (800ece8 <vPortFree+0xb8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d01e      	beq.n	800ecde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d11a      	bne.n	800ecde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	685a      	ldr	r2, [r3, #4]
 800ecac:	4b0e      	ldr	r3, [pc, #56]	; (800ece8 <vPortFree+0xb8>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	43db      	mvns	r3, r3
 800ecb2:	401a      	ands	r2, r3
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ecb8:	f7fe fc90 	bl	800d5dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	4b0a      	ldr	r3, [pc, #40]	; (800ecec <vPortFree+0xbc>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	4a09      	ldr	r2, [pc, #36]	; (800ecec <vPortFree+0xbc>)
 800ecc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ecca:	6938      	ldr	r0, [r7, #16]
 800eccc:	f000 f874 	bl	800edb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ecd0:	4b07      	ldr	r3, [pc, #28]	; (800ecf0 <vPortFree+0xc0>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	4a06      	ldr	r2, [pc, #24]	; (800ecf0 <vPortFree+0xc0>)
 800ecd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ecda:	f7fe fc8d 	bl	800d5f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ecde:	bf00      	nop
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20002cd8 	.word	0x20002cd8
 800ecec:	20002cc8 	.word	0x20002cc8
 800ecf0:	20002cd4 	.word	0x20002cd4

0800ecf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ecfa:	f241 3388 	movw	r3, #5000	; 0x1388
 800ecfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed00:	4b27      	ldr	r3, [pc, #156]	; (800eda0 <prvHeapInit+0xac>)
 800ed02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00c      	beq.n	800ed28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	3307      	adds	r3, #7
 800ed12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f023 0307 	bic.w	r3, r3, #7
 800ed1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	4a1f      	ldr	r2, [pc, #124]	; (800eda0 <prvHeapInit+0xac>)
 800ed24:	4413      	add	r3, r2
 800ed26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed2c:	4a1d      	ldr	r2, [pc, #116]	; (800eda4 <prvHeapInit+0xb0>)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ed32:	4b1c      	ldr	r3, [pc, #112]	; (800eda4 <prvHeapInit+0xb0>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ed40:	2208      	movs	r2, #8
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	1a9b      	subs	r3, r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f023 0307 	bic.w	r3, r3, #7
 800ed4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4a15      	ldr	r2, [pc, #84]	; (800eda8 <prvHeapInit+0xb4>)
 800ed54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ed56:	4b14      	ldr	r3, [pc, #80]	; (800eda8 <prvHeapInit+0xb4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed5e:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <prvHeapInit+0xb4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed74:	4b0c      	ldr	r3, [pc, #48]	; (800eda8 <prvHeapInit+0xb4>)
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4a0a      	ldr	r2, [pc, #40]	; (800edac <prvHeapInit+0xb8>)
 800ed82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	4a09      	ldr	r2, [pc, #36]	; (800edb0 <prvHeapInit+0xbc>)
 800ed8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <prvHeapInit+0xc0>)
 800ed8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ed92:	601a      	str	r2, [r3, #0]
}
 800ed94:	bf00      	nop
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	20001934 	.word	0x20001934
 800eda4:	20002cbc 	.word	0x20002cbc
 800eda8:	20002cc4 	.word	0x20002cc4
 800edac:	20002ccc 	.word	0x20002ccc
 800edb0:	20002cc8 	.word	0x20002cc8
 800edb4:	20002cd8 	.word	0x20002cd8

0800edb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800edb8:	b480      	push	{r7}
 800edba:	b085      	sub	sp, #20
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800edc0:	4b28      	ldr	r3, [pc, #160]	; (800ee64 <prvInsertBlockIntoFreeList+0xac>)
 800edc2:	60fb      	str	r3, [r7, #12]
 800edc4:	e002      	b.n	800edcc <prvInsertBlockIntoFreeList+0x14>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	60fb      	str	r3, [r7, #12]
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d8f7      	bhi.n	800edc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	4413      	add	r3, r2
 800ede2:	687a      	ldr	r2, [r7, #4]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d108      	bne.n	800edfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	441a      	add	r2, r3
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	441a      	add	r2, r3
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d118      	bne.n	800ee40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	4b15      	ldr	r3, [pc, #84]	; (800ee68 <prvInsertBlockIntoFreeList+0xb0>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d00d      	beq.n	800ee36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	685a      	ldr	r2, [r3, #4]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	441a      	add	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	601a      	str	r2, [r3, #0]
 800ee34:	e008      	b.n	800ee48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee36:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <prvInsertBlockIntoFreeList+0xb0>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	e003      	b.n	800ee48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d002      	beq.n	800ee56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee56:	bf00      	nop
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	20002cbc 	.word	0x20002cbc
 800ee68:	20002cc4 	.word	0x20002cc4

0800ee6c <_ZdlPvj>:
 800ee6c:	f000 b814 	b.w	800ee98 <_ZdlPv>

0800ee70 <_Znwj>:
 800ee70:	2801      	cmp	r0, #1
 800ee72:	bf38      	it	cc
 800ee74:	2001      	movcc	r0, #1
 800ee76:	b510      	push	{r4, lr}
 800ee78:	4604      	mov	r4, r0
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 f85e 	bl	800ef3c <malloc>
 800ee80:	b930      	cbnz	r0, 800ee90 <_Znwj+0x20>
 800ee82:	f000 f81d 	bl	800eec0 <_ZSt15get_new_handlerv>
 800ee86:	b908      	cbnz	r0, 800ee8c <_Znwj+0x1c>
 800ee88:	f000 f822 	bl	800eed0 <abort>
 800ee8c:	4780      	blx	r0
 800ee8e:	e7f4      	b.n	800ee7a <_Znwj+0xa>
 800ee90:	bd10      	pop	{r4, pc}

0800ee92 <__cxa_pure_virtual>:
 800ee92:	b508      	push	{r3, lr}
 800ee94:	f000 f80e 	bl	800eeb4 <_ZSt9terminatev>

0800ee98 <_ZdlPv>:
 800ee98:	f000 b858 	b.w	800ef4c <free>

0800ee9c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee9c:	b508      	push	{r3, lr}
 800ee9e:	4780      	blx	r0
 800eea0:	f000 f816 	bl	800eed0 <abort>

0800eea4 <_ZSt13get_terminatev>:
 800eea4:	4b02      	ldr	r3, [pc, #8]	; (800eeb0 <_ZSt13get_terminatev+0xc>)
 800eea6:	6818      	ldr	r0, [r3, #0]
 800eea8:	f3bf 8f5b 	dmb	ish
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	20000050 	.word	0x20000050

0800eeb4 <_ZSt9terminatev>:
 800eeb4:	b508      	push	{r3, lr}
 800eeb6:	f7ff fff5 	bl	800eea4 <_ZSt13get_terminatev>
 800eeba:	f7ff ffef 	bl	800ee9c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800eec0 <_ZSt15get_new_handlerv>:
 800eec0:	4b02      	ldr	r3, [pc, #8]	; (800eecc <_ZSt15get_new_handlerv+0xc>)
 800eec2:	6818      	ldr	r0, [r3, #0]
 800eec4:	f3bf 8f5b 	dmb	ish
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	20002cdc 	.word	0x20002cdc

0800eed0 <abort>:
 800eed0:	b508      	push	{r3, lr}
 800eed2:	2006      	movs	r0, #6
 800eed4:	f000 fe68 	bl	800fba8 <raise>
 800eed8:	2001      	movs	r0, #1
 800eeda:	f7f4 fa3b 	bl	8003354 <_exit>

0800eede <atoi>:
 800eede:	220a      	movs	r2, #10
 800eee0:	2100      	movs	r1, #0
 800eee2:	f000 bf9b 	b.w	800fe1c <strtol>
	...

0800eee8 <__errno>:
 800eee8:	4b01      	ldr	r3, [pc, #4]	; (800eef0 <__errno+0x8>)
 800eeea:	6818      	ldr	r0, [r3, #0]
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop
 800eef0:	20000054 	.word	0x20000054

0800eef4 <__libc_init_array>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	4d0d      	ldr	r5, [pc, #52]	; (800ef2c <__libc_init_array+0x38>)
 800eef8:	4c0d      	ldr	r4, [pc, #52]	; (800ef30 <__libc_init_array+0x3c>)
 800eefa:	1b64      	subs	r4, r4, r5
 800eefc:	10a4      	asrs	r4, r4, #2
 800eefe:	2600      	movs	r6, #0
 800ef00:	42a6      	cmp	r6, r4
 800ef02:	d109      	bne.n	800ef18 <__libc_init_array+0x24>
 800ef04:	4d0b      	ldr	r5, [pc, #44]	; (800ef34 <__libc_init_array+0x40>)
 800ef06:	4c0c      	ldr	r4, [pc, #48]	; (800ef38 <__libc_init_array+0x44>)
 800ef08:	f003 fc9a 	bl	8012840 <_init>
 800ef0c:	1b64      	subs	r4, r4, r5
 800ef0e:	10a4      	asrs	r4, r4, #2
 800ef10:	2600      	movs	r6, #0
 800ef12:	42a6      	cmp	r6, r4
 800ef14:	d105      	bne.n	800ef22 <__libc_init_array+0x2e>
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
 800ef18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef1c:	4798      	blx	r3
 800ef1e:	3601      	adds	r6, #1
 800ef20:	e7ee      	b.n	800ef00 <__libc_init_array+0xc>
 800ef22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef26:	4798      	blx	r3
 800ef28:	3601      	adds	r6, #1
 800ef2a:	e7f2      	b.n	800ef12 <__libc_init_array+0x1e>
 800ef2c:	080130e0 	.word	0x080130e0
 800ef30:	080130e0 	.word	0x080130e0
 800ef34:	080130e0 	.word	0x080130e0
 800ef38:	080130ec 	.word	0x080130ec

0800ef3c <malloc>:
 800ef3c:	4b02      	ldr	r3, [pc, #8]	; (800ef48 <malloc+0xc>)
 800ef3e:	4601      	mov	r1, r0
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	f000 b88d 	b.w	800f060 <_malloc_r>
 800ef46:	bf00      	nop
 800ef48:	20000054 	.word	0x20000054

0800ef4c <free>:
 800ef4c:	4b02      	ldr	r3, [pc, #8]	; (800ef58 <free+0xc>)
 800ef4e:	4601      	mov	r1, r0
 800ef50:	6818      	ldr	r0, [r3, #0]
 800ef52:	f000 b819 	b.w	800ef88 <_free_r>
 800ef56:	bf00      	nop
 800ef58:	20000054 	.word	0x20000054

0800ef5c <memcpy>:
 800ef5c:	440a      	add	r2, r1
 800ef5e:	4291      	cmp	r1, r2
 800ef60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef64:	d100      	bne.n	800ef68 <memcpy+0xc>
 800ef66:	4770      	bx	lr
 800ef68:	b510      	push	{r4, lr}
 800ef6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef72:	4291      	cmp	r1, r2
 800ef74:	d1f9      	bne.n	800ef6a <memcpy+0xe>
 800ef76:	bd10      	pop	{r4, pc}

0800ef78 <memset>:
 800ef78:	4402      	add	r2, r0
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d100      	bne.n	800ef82 <memset+0xa>
 800ef80:	4770      	bx	lr
 800ef82:	f803 1b01 	strb.w	r1, [r3], #1
 800ef86:	e7f9      	b.n	800ef7c <memset+0x4>

0800ef88 <_free_r>:
 800ef88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef8a:	2900      	cmp	r1, #0
 800ef8c:	d044      	beq.n	800f018 <_free_r+0x90>
 800ef8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef92:	9001      	str	r0, [sp, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	f1a1 0404 	sub.w	r4, r1, #4
 800ef9a:	bfb8      	it	lt
 800ef9c:	18e4      	addlt	r4, r4, r3
 800ef9e:	f002 f915 	bl	80111cc <__malloc_lock>
 800efa2:	4a1e      	ldr	r2, [pc, #120]	; (800f01c <_free_r+0x94>)
 800efa4:	9801      	ldr	r0, [sp, #4]
 800efa6:	6813      	ldr	r3, [r2, #0]
 800efa8:	b933      	cbnz	r3, 800efb8 <_free_r+0x30>
 800efaa:	6063      	str	r3, [r4, #4]
 800efac:	6014      	str	r4, [r2, #0]
 800efae:	b003      	add	sp, #12
 800efb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efb4:	f002 b910 	b.w	80111d8 <__malloc_unlock>
 800efb8:	42a3      	cmp	r3, r4
 800efba:	d908      	bls.n	800efce <_free_r+0x46>
 800efbc:	6825      	ldr	r5, [r4, #0]
 800efbe:	1961      	adds	r1, r4, r5
 800efc0:	428b      	cmp	r3, r1
 800efc2:	bf01      	itttt	eq
 800efc4:	6819      	ldreq	r1, [r3, #0]
 800efc6:	685b      	ldreq	r3, [r3, #4]
 800efc8:	1949      	addeq	r1, r1, r5
 800efca:	6021      	streq	r1, [r4, #0]
 800efcc:	e7ed      	b.n	800efaa <_free_r+0x22>
 800efce:	461a      	mov	r2, r3
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	b10b      	cbz	r3, 800efd8 <_free_r+0x50>
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	d9fa      	bls.n	800efce <_free_r+0x46>
 800efd8:	6811      	ldr	r1, [r2, #0]
 800efda:	1855      	adds	r5, r2, r1
 800efdc:	42a5      	cmp	r5, r4
 800efde:	d10b      	bne.n	800eff8 <_free_r+0x70>
 800efe0:	6824      	ldr	r4, [r4, #0]
 800efe2:	4421      	add	r1, r4
 800efe4:	1854      	adds	r4, r2, r1
 800efe6:	42a3      	cmp	r3, r4
 800efe8:	6011      	str	r1, [r2, #0]
 800efea:	d1e0      	bne.n	800efae <_free_r+0x26>
 800efec:	681c      	ldr	r4, [r3, #0]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	6053      	str	r3, [r2, #4]
 800eff2:	4421      	add	r1, r4
 800eff4:	6011      	str	r1, [r2, #0]
 800eff6:	e7da      	b.n	800efae <_free_r+0x26>
 800eff8:	d902      	bls.n	800f000 <_free_r+0x78>
 800effa:	230c      	movs	r3, #12
 800effc:	6003      	str	r3, [r0, #0]
 800effe:	e7d6      	b.n	800efae <_free_r+0x26>
 800f000:	6825      	ldr	r5, [r4, #0]
 800f002:	1961      	adds	r1, r4, r5
 800f004:	428b      	cmp	r3, r1
 800f006:	bf04      	itt	eq
 800f008:	6819      	ldreq	r1, [r3, #0]
 800f00a:	685b      	ldreq	r3, [r3, #4]
 800f00c:	6063      	str	r3, [r4, #4]
 800f00e:	bf04      	itt	eq
 800f010:	1949      	addeq	r1, r1, r5
 800f012:	6021      	streq	r1, [r4, #0]
 800f014:	6054      	str	r4, [r2, #4]
 800f016:	e7ca      	b.n	800efae <_free_r+0x26>
 800f018:	b003      	add	sp, #12
 800f01a:	bd30      	pop	{r4, r5, pc}
 800f01c:	20002ce0 	.word	0x20002ce0

0800f020 <sbrk_aligned>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	4e0e      	ldr	r6, [pc, #56]	; (800f05c <sbrk_aligned+0x3c>)
 800f024:	460c      	mov	r4, r1
 800f026:	6831      	ldr	r1, [r6, #0]
 800f028:	4605      	mov	r5, r0
 800f02a:	b911      	cbnz	r1, 800f032 <sbrk_aligned+0x12>
 800f02c:	f000 fd84 	bl	800fb38 <_sbrk_r>
 800f030:	6030      	str	r0, [r6, #0]
 800f032:	4621      	mov	r1, r4
 800f034:	4628      	mov	r0, r5
 800f036:	f000 fd7f 	bl	800fb38 <_sbrk_r>
 800f03a:	1c43      	adds	r3, r0, #1
 800f03c:	d00a      	beq.n	800f054 <sbrk_aligned+0x34>
 800f03e:	1cc4      	adds	r4, r0, #3
 800f040:	f024 0403 	bic.w	r4, r4, #3
 800f044:	42a0      	cmp	r0, r4
 800f046:	d007      	beq.n	800f058 <sbrk_aligned+0x38>
 800f048:	1a21      	subs	r1, r4, r0
 800f04a:	4628      	mov	r0, r5
 800f04c:	f000 fd74 	bl	800fb38 <_sbrk_r>
 800f050:	3001      	adds	r0, #1
 800f052:	d101      	bne.n	800f058 <sbrk_aligned+0x38>
 800f054:	f04f 34ff 	mov.w	r4, #4294967295
 800f058:	4620      	mov	r0, r4
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	20002ce4 	.word	0x20002ce4

0800f060 <_malloc_r>:
 800f060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f064:	1ccd      	adds	r5, r1, #3
 800f066:	f025 0503 	bic.w	r5, r5, #3
 800f06a:	3508      	adds	r5, #8
 800f06c:	2d0c      	cmp	r5, #12
 800f06e:	bf38      	it	cc
 800f070:	250c      	movcc	r5, #12
 800f072:	2d00      	cmp	r5, #0
 800f074:	4607      	mov	r7, r0
 800f076:	db01      	blt.n	800f07c <_malloc_r+0x1c>
 800f078:	42a9      	cmp	r1, r5
 800f07a:	d905      	bls.n	800f088 <_malloc_r+0x28>
 800f07c:	230c      	movs	r3, #12
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	2600      	movs	r6, #0
 800f082:	4630      	mov	r0, r6
 800f084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f088:	4e2e      	ldr	r6, [pc, #184]	; (800f144 <_malloc_r+0xe4>)
 800f08a:	f002 f89f 	bl	80111cc <__malloc_lock>
 800f08e:	6833      	ldr	r3, [r6, #0]
 800f090:	461c      	mov	r4, r3
 800f092:	bb34      	cbnz	r4, 800f0e2 <_malloc_r+0x82>
 800f094:	4629      	mov	r1, r5
 800f096:	4638      	mov	r0, r7
 800f098:	f7ff ffc2 	bl	800f020 <sbrk_aligned>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	4604      	mov	r4, r0
 800f0a0:	d14d      	bne.n	800f13e <_malloc_r+0xde>
 800f0a2:	6834      	ldr	r4, [r6, #0]
 800f0a4:	4626      	mov	r6, r4
 800f0a6:	2e00      	cmp	r6, #0
 800f0a8:	d140      	bne.n	800f12c <_malloc_r+0xcc>
 800f0aa:	6823      	ldr	r3, [r4, #0]
 800f0ac:	4631      	mov	r1, r6
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	eb04 0803 	add.w	r8, r4, r3
 800f0b4:	f000 fd40 	bl	800fb38 <_sbrk_r>
 800f0b8:	4580      	cmp	r8, r0
 800f0ba:	d13a      	bne.n	800f132 <_malloc_r+0xd2>
 800f0bc:	6821      	ldr	r1, [r4, #0]
 800f0be:	3503      	adds	r5, #3
 800f0c0:	1a6d      	subs	r5, r5, r1
 800f0c2:	f025 0503 	bic.w	r5, r5, #3
 800f0c6:	3508      	adds	r5, #8
 800f0c8:	2d0c      	cmp	r5, #12
 800f0ca:	bf38      	it	cc
 800f0cc:	250c      	movcc	r5, #12
 800f0ce:	4629      	mov	r1, r5
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f7ff ffa5 	bl	800f020 <sbrk_aligned>
 800f0d6:	3001      	adds	r0, #1
 800f0d8:	d02b      	beq.n	800f132 <_malloc_r+0xd2>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	442b      	add	r3, r5
 800f0de:	6023      	str	r3, [r4, #0]
 800f0e0:	e00e      	b.n	800f100 <_malloc_r+0xa0>
 800f0e2:	6822      	ldr	r2, [r4, #0]
 800f0e4:	1b52      	subs	r2, r2, r5
 800f0e6:	d41e      	bmi.n	800f126 <_malloc_r+0xc6>
 800f0e8:	2a0b      	cmp	r2, #11
 800f0ea:	d916      	bls.n	800f11a <_malloc_r+0xba>
 800f0ec:	1961      	adds	r1, r4, r5
 800f0ee:	42a3      	cmp	r3, r4
 800f0f0:	6025      	str	r5, [r4, #0]
 800f0f2:	bf18      	it	ne
 800f0f4:	6059      	strne	r1, [r3, #4]
 800f0f6:	6863      	ldr	r3, [r4, #4]
 800f0f8:	bf08      	it	eq
 800f0fa:	6031      	streq	r1, [r6, #0]
 800f0fc:	5162      	str	r2, [r4, r5]
 800f0fe:	604b      	str	r3, [r1, #4]
 800f100:	4638      	mov	r0, r7
 800f102:	f104 060b 	add.w	r6, r4, #11
 800f106:	f002 f867 	bl	80111d8 <__malloc_unlock>
 800f10a:	f026 0607 	bic.w	r6, r6, #7
 800f10e:	1d23      	adds	r3, r4, #4
 800f110:	1af2      	subs	r2, r6, r3
 800f112:	d0b6      	beq.n	800f082 <_malloc_r+0x22>
 800f114:	1b9b      	subs	r3, r3, r6
 800f116:	50a3      	str	r3, [r4, r2]
 800f118:	e7b3      	b.n	800f082 <_malloc_r+0x22>
 800f11a:	6862      	ldr	r2, [r4, #4]
 800f11c:	42a3      	cmp	r3, r4
 800f11e:	bf0c      	ite	eq
 800f120:	6032      	streq	r2, [r6, #0]
 800f122:	605a      	strne	r2, [r3, #4]
 800f124:	e7ec      	b.n	800f100 <_malloc_r+0xa0>
 800f126:	4623      	mov	r3, r4
 800f128:	6864      	ldr	r4, [r4, #4]
 800f12a:	e7b2      	b.n	800f092 <_malloc_r+0x32>
 800f12c:	4634      	mov	r4, r6
 800f12e:	6876      	ldr	r6, [r6, #4]
 800f130:	e7b9      	b.n	800f0a6 <_malloc_r+0x46>
 800f132:	230c      	movs	r3, #12
 800f134:	603b      	str	r3, [r7, #0]
 800f136:	4638      	mov	r0, r7
 800f138:	f002 f84e 	bl	80111d8 <__malloc_unlock>
 800f13c:	e7a1      	b.n	800f082 <_malloc_r+0x22>
 800f13e:	6025      	str	r5, [r4, #0]
 800f140:	e7de      	b.n	800f100 <_malloc_r+0xa0>
 800f142:	bf00      	nop
 800f144:	20002ce0 	.word	0x20002ce0

0800f148 <__cvt>:
 800f148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f14c:	ec55 4b10 	vmov	r4, r5, d0
 800f150:	2d00      	cmp	r5, #0
 800f152:	460e      	mov	r6, r1
 800f154:	4619      	mov	r1, r3
 800f156:	462b      	mov	r3, r5
 800f158:	bfbb      	ittet	lt
 800f15a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f15e:	461d      	movlt	r5, r3
 800f160:	2300      	movge	r3, #0
 800f162:	232d      	movlt	r3, #45	; 0x2d
 800f164:	700b      	strb	r3, [r1, #0]
 800f166:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f168:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f16c:	4691      	mov	r9, r2
 800f16e:	f023 0820 	bic.w	r8, r3, #32
 800f172:	bfbc      	itt	lt
 800f174:	4622      	movlt	r2, r4
 800f176:	4614      	movlt	r4, r2
 800f178:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f17c:	d005      	beq.n	800f18a <__cvt+0x42>
 800f17e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f182:	d100      	bne.n	800f186 <__cvt+0x3e>
 800f184:	3601      	adds	r6, #1
 800f186:	2102      	movs	r1, #2
 800f188:	e000      	b.n	800f18c <__cvt+0x44>
 800f18a:	2103      	movs	r1, #3
 800f18c:	ab03      	add	r3, sp, #12
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	ab02      	add	r3, sp, #8
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	ec45 4b10 	vmov	d0, r4, r5
 800f198:	4653      	mov	r3, sl
 800f19a:	4632      	mov	r2, r6
 800f19c:	f000 fff0 	bl	8010180 <_dtoa_r>
 800f1a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	d102      	bne.n	800f1ae <__cvt+0x66>
 800f1a8:	f019 0f01 	tst.w	r9, #1
 800f1ac:	d022      	beq.n	800f1f4 <__cvt+0xac>
 800f1ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f1b2:	eb07 0906 	add.w	r9, r7, r6
 800f1b6:	d110      	bne.n	800f1da <__cvt+0x92>
 800f1b8:	783b      	ldrb	r3, [r7, #0]
 800f1ba:	2b30      	cmp	r3, #48	; 0x30
 800f1bc:	d10a      	bne.n	800f1d4 <__cvt+0x8c>
 800f1be:	2200      	movs	r2, #0
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	f7f1 fc8f 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1ca:	b918      	cbnz	r0, 800f1d4 <__cvt+0x8c>
 800f1cc:	f1c6 0601 	rsb	r6, r6, #1
 800f1d0:	f8ca 6000 	str.w	r6, [sl]
 800f1d4:	f8da 3000 	ldr.w	r3, [sl]
 800f1d8:	4499      	add	r9, r3
 800f1da:	2200      	movs	r2, #0
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4620      	mov	r0, r4
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	f7f1 fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1e6:	b108      	cbz	r0, 800f1ec <__cvt+0xa4>
 800f1e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f1ec:	2230      	movs	r2, #48	; 0x30
 800f1ee:	9b03      	ldr	r3, [sp, #12]
 800f1f0:	454b      	cmp	r3, r9
 800f1f2:	d307      	bcc.n	800f204 <__cvt+0xbc>
 800f1f4:	9b03      	ldr	r3, [sp, #12]
 800f1f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1f8:	1bdb      	subs	r3, r3, r7
 800f1fa:	4638      	mov	r0, r7
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	b004      	add	sp, #16
 800f200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f204:	1c59      	adds	r1, r3, #1
 800f206:	9103      	str	r1, [sp, #12]
 800f208:	701a      	strb	r2, [r3, #0]
 800f20a:	e7f0      	b.n	800f1ee <__cvt+0xa6>

0800f20c <__exponent>:
 800f20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f20e:	4603      	mov	r3, r0
 800f210:	2900      	cmp	r1, #0
 800f212:	bfb8      	it	lt
 800f214:	4249      	neglt	r1, r1
 800f216:	f803 2b02 	strb.w	r2, [r3], #2
 800f21a:	bfb4      	ite	lt
 800f21c:	222d      	movlt	r2, #45	; 0x2d
 800f21e:	222b      	movge	r2, #43	; 0x2b
 800f220:	2909      	cmp	r1, #9
 800f222:	7042      	strb	r2, [r0, #1]
 800f224:	dd2a      	ble.n	800f27c <__exponent+0x70>
 800f226:	f10d 0407 	add.w	r4, sp, #7
 800f22a:	46a4      	mov	ip, r4
 800f22c:	270a      	movs	r7, #10
 800f22e:	46a6      	mov	lr, r4
 800f230:	460a      	mov	r2, r1
 800f232:	fb91 f6f7 	sdiv	r6, r1, r7
 800f236:	fb07 1516 	mls	r5, r7, r6, r1
 800f23a:	3530      	adds	r5, #48	; 0x30
 800f23c:	2a63      	cmp	r2, #99	; 0x63
 800f23e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f246:	4631      	mov	r1, r6
 800f248:	dcf1      	bgt.n	800f22e <__exponent+0x22>
 800f24a:	3130      	adds	r1, #48	; 0x30
 800f24c:	f1ae 0502 	sub.w	r5, lr, #2
 800f250:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f254:	1c44      	adds	r4, r0, #1
 800f256:	4629      	mov	r1, r5
 800f258:	4561      	cmp	r1, ip
 800f25a:	d30a      	bcc.n	800f272 <__exponent+0x66>
 800f25c:	f10d 0209 	add.w	r2, sp, #9
 800f260:	eba2 020e 	sub.w	r2, r2, lr
 800f264:	4565      	cmp	r5, ip
 800f266:	bf88      	it	hi
 800f268:	2200      	movhi	r2, #0
 800f26a:	4413      	add	r3, r2
 800f26c:	1a18      	subs	r0, r3, r0
 800f26e:	b003      	add	sp, #12
 800f270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f276:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f27a:	e7ed      	b.n	800f258 <__exponent+0x4c>
 800f27c:	2330      	movs	r3, #48	; 0x30
 800f27e:	3130      	adds	r1, #48	; 0x30
 800f280:	7083      	strb	r3, [r0, #2]
 800f282:	70c1      	strb	r1, [r0, #3]
 800f284:	1d03      	adds	r3, r0, #4
 800f286:	e7f1      	b.n	800f26c <__exponent+0x60>

0800f288 <_printf_float>:
 800f288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f28c:	ed2d 8b02 	vpush	{d8}
 800f290:	b08d      	sub	sp, #52	; 0x34
 800f292:	460c      	mov	r4, r1
 800f294:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f298:	4616      	mov	r6, r2
 800f29a:	461f      	mov	r7, r3
 800f29c:	4605      	mov	r5, r0
 800f29e:	f001 ff15 	bl	80110cc <_localeconv_r>
 800f2a2:	f8d0 a000 	ldr.w	sl, [r0]
 800f2a6:	4650      	mov	r0, sl
 800f2a8:	f7f0 ff9c 	bl	80001e4 <strlen>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	9305      	str	r3, [sp, #20]
 800f2b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f2b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f2bc:	3307      	adds	r3, #7
 800f2be:	f023 0307 	bic.w	r3, r3, #7
 800f2c2:	f103 0208 	add.w	r2, r3, #8
 800f2c6:	f8c8 2000 	str.w	r2, [r8]
 800f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f2d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f2d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f2da:	9307      	str	r3, [sp, #28]
 800f2dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f2e0:	ee08 0a10 	vmov	s16, r0
 800f2e4:	4b9f      	ldr	r3, [pc, #636]	; (800f564 <_printf_float+0x2dc>)
 800f2e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	f7f1 fc2d 	bl	8000b4c <__aeabi_dcmpun>
 800f2f2:	bb88      	cbnz	r0, 800f358 <_printf_float+0xd0>
 800f2f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f2f8:	4b9a      	ldr	r3, [pc, #616]	; (800f564 <_printf_float+0x2dc>)
 800f2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fe:	f7f1 fc07 	bl	8000b10 <__aeabi_dcmple>
 800f302:	bb48      	cbnz	r0, 800f358 <_printf_float+0xd0>
 800f304:	2200      	movs	r2, #0
 800f306:	2300      	movs	r3, #0
 800f308:	4640      	mov	r0, r8
 800f30a:	4649      	mov	r1, r9
 800f30c:	f7f1 fbf6 	bl	8000afc <__aeabi_dcmplt>
 800f310:	b110      	cbz	r0, 800f318 <_printf_float+0x90>
 800f312:	232d      	movs	r3, #45	; 0x2d
 800f314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f318:	4b93      	ldr	r3, [pc, #588]	; (800f568 <_printf_float+0x2e0>)
 800f31a:	4894      	ldr	r0, [pc, #592]	; (800f56c <_printf_float+0x2e4>)
 800f31c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f320:	bf94      	ite	ls
 800f322:	4698      	movls	r8, r3
 800f324:	4680      	movhi	r8, r0
 800f326:	2303      	movs	r3, #3
 800f328:	6123      	str	r3, [r4, #16]
 800f32a:	9b05      	ldr	r3, [sp, #20]
 800f32c:	f023 0204 	bic.w	r2, r3, #4
 800f330:	6022      	str	r2, [r4, #0]
 800f332:	f04f 0900 	mov.w	r9, #0
 800f336:	9700      	str	r7, [sp, #0]
 800f338:	4633      	mov	r3, r6
 800f33a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f33c:	4621      	mov	r1, r4
 800f33e:	4628      	mov	r0, r5
 800f340:	f000 f9d8 	bl	800f6f4 <_printf_common>
 800f344:	3001      	adds	r0, #1
 800f346:	f040 8090 	bne.w	800f46a <_printf_float+0x1e2>
 800f34a:	f04f 30ff 	mov.w	r0, #4294967295
 800f34e:	b00d      	add	sp, #52	; 0x34
 800f350:	ecbd 8b02 	vpop	{d8}
 800f354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f358:	4642      	mov	r2, r8
 800f35a:	464b      	mov	r3, r9
 800f35c:	4640      	mov	r0, r8
 800f35e:	4649      	mov	r1, r9
 800f360:	f7f1 fbf4 	bl	8000b4c <__aeabi_dcmpun>
 800f364:	b140      	cbz	r0, 800f378 <_printf_float+0xf0>
 800f366:	464b      	mov	r3, r9
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfbc      	itt	lt
 800f36c:	232d      	movlt	r3, #45	; 0x2d
 800f36e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f372:	487f      	ldr	r0, [pc, #508]	; (800f570 <_printf_float+0x2e8>)
 800f374:	4b7f      	ldr	r3, [pc, #508]	; (800f574 <_printf_float+0x2ec>)
 800f376:	e7d1      	b.n	800f31c <_printf_float+0x94>
 800f378:	6863      	ldr	r3, [r4, #4]
 800f37a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f37e:	9206      	str	r2, [sp, #24]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	d13f      	bne.n	800f404 <_printf_float+0x17c>
 800f384:	2306      	movs	r3, #6
 800f386:	6063      	str	r3, [r4, #4]
 800f388:	9b05      	ldr	r3, [sp, #20]
 800f38a:	6861      	ldr	r1, [r4, #4]
 800f38c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f390:	2300      	movs	r3, #0
 800f392:	9303      	str	r3, [sp, #12]
 800f394:	ab0a      	add	r3, sp, #40	; 0x28
 800f396:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f39a:	ab09      	add	r3, sp, #36	; 0x24
 800f39c:	ec49 8b10 	vmov	d0, r8, r9
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	6022      	str	r2, [r4, #0]
 800f3a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f7ff fecd 	bl	800f148 <__cvt>
 800f3ae:	9b06      	ldr	r3, [sp, #24]
 800f3b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3b2:	2b47      	cmp	r3, #71	; 0x47
 800f3b4:	4680      	mov	r8, r0
 800f3b6:	d108      	bne.n	800f3ca <_printf_float+0x142>
 800f3b8:	1cc8      	adds	r0, r1, #3
 800f3ba:	db02      	blt.n	800f3c2 <_printf_float+0x13a>
 800f3bc:	6863      	ldr	r3, [r4, #4]
 800f3be:	4299      	cmp	r1, r3
 800f3c0:	dd41      	ble.n	800f446 <_printf_float+0x1be>
 800f3c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f3c6:	fa5f fb8b 	uxtb.w	fp, fp
 800f3ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f3ce:	d820      	bhi.n	800f412 <_printf_float+0x18a>
 800f3d0:	3901      	subs	r1, #1
 800f3d2:	465a      	mov	r2, fp
 800f3d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f3d8:	9109      	str	r1, [sp, #36]	; 0x24
 800f3da:	f7ff ff17 	bl	800f20c <__exponent>
 800f3de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3e0:	1813      	adds	r3, r2, r0
 800f3e2:	2a01      	cmp	r2, #1
 800f3e4:	4681      	mov	r9, r0
 800f3e6:	6123      	str	r3, [r4, #16]
 800f3e8:	dc02      	bgt.n	800f3f0 <_printf_float+0x168>
 800f3ea:	6822      	ldr	r2, [r4, #0]
 800f3ec:	07d2      	lsls	r2, r2, #31
 800f3ee:	d501      	bpl.n	800f3f4 <_printf_float+0x16c>
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	6123      	str	r3, [r4, #16]
 800f3f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d09c      	beq.n	800f336 <_printf_float+0xae>
 800f3fc:	232d      	movs	r3, #45	; 0x2d
 800f3fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f402:	e798      	b.n	800f336 <_printf_float+0xae>
 800f404:	9a06      	ldr	r2, [sp, #24]
 800f406:	2a47      	cmp	r2, #71	; 0x47
 800f408:	d1be      	bne.n	800f388 <_printf_float+0x100>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1bc      	bne.n	800f388 <_printf_float+0x100>
 800f40e:	2301      	movs	r3, #1
 800f410:	e7b9      	b.n	800f386 <_printf_float+0xfe>
 800f412:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f416:	d118      	bne.n	800f44a <_printf_float+0x1c2>
 800f418:	2900      	cmp	r1, #0
 800f41a:	6863      	ldr	r3, [r4, #4]
 800f41c:	dd0b      	ble.n	800f436 <_printf_float+0x1ae>
 800f41e:	6121      	str	r1, [r4, #16]
 800f420:	b913      	cbnz	r3, 800f428 <_printf_float+0x1a0>
 800f422:	6822      	ldr	r2, [r4, #0]
 800f424:	07d0      	lsls	r0, r2, #31
 800f426:	d502      	bpl.n	800f42e <_printf_float+0x1a6>
 800f428:	3301      	adds	r3, #1
 800f42a:	440b      	add	r3, r1
 800f42c:	6123      	str	r3, [r4, #16]
 800f42e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f430:	f04f 0900 	mov.w	r9, #0
 800f434:	e7de      	b.n	800f3f4 <_printf_float+0x16c>
 800f436:	b913      	cbnz	r3, 800f43e <_printf_float+0x1b6>
 800f438:	6822      	ldr	r2, [r4, #0]
 800f43a:	07d2      	lsls	r2, r2, #31
 800f43c:	d501      	bpl.n	800f442 <_printf_float+0x1ba>
 800f43e:	3302      	adds	r3, #2
 800f440:	e7f4      	b.n	800f42c <_printf_float+0x1a4>
 800f442:	2301      	movs	r3, #1
 800f444:	e7f2      	b.n	800f42c <_printf_float+0x1a4>
 800f446:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f44c:	4299      	cmp	r1, r3
 800f44e:	db05      	blt.n	800f45c <_printf_float+0x1d4>
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	6121      	str	r1, [r4, #16]
 800f454:	07d8      	lsls	r0, r3, #31
 800f456:	d5ea      	bpl.n	800f42e <_printf_float+0x1a6>
 800f458:	1c4b      	adds	r3, r1, #1
 800f45a:	e7e7      	b.n	800f42c <_printf_float+0x1a4>
 800f45c:	2900      	cmp	r1, #0
 800f45e:	bfd4      	ite	le
 800f460:	f1c1 0202 	rsble	r2, r1, #2
 800f464:	2201      	movgt	r2, #1
 800f466:	4413      	add	r3, r2
 800f468:	e7e0      	b.n	800f42c <_printf_float+0x1a4>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	055a      	lsls	r2, r3, #21
 800f46e:	d407      	bmi.n	800f480 <_printf_float+0x1f8>
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	4642      	mov	r2, r8
 800f474:	4631      	mov	r1, r6
 800f476:	4628      	mov	r0, r5
 800f478:	47b8      	blx	r7
 800f47a:	3001      	adds	r0, #1
 800f47c:	d12c      	bne.n	800f4d8 <_printf_float+0x250>
 800f47e:	e764      	b.n	800f34a <_printf_float+0xc2>
 800f480:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f484:	f240 80e0 	bls.w	800f648 <_printf_float+0x3c0>
 800f488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f48c:	2200      	movs	r2, #0
 800f48e:	2300      	movs	r3, #0
 800f490:	f7f1 fb2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800f494:	2800      	cmp	r0, #0
 800f496:	d034      	beq.n	800f502 <_printf_float+0x27a>
 800f498:	4a37      	ldr	r2, [pc, #220]	; (800f578 <_printf_float+0x2f0>)
 800f49a:	2301      	movs	r3, #1
 800f49c:	4631      	mov	r1, r6
 800f49e:	4628      	mov	r0, r5
 800f4a0:	47b8      	blx	r7
 800f4a2:	3001      	adds	r0, #1
 800f4a4:	f43f af51 	beq.w	800f34a <_printf_float+0xc2>
 800f4a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	db02      	blt.n	800f4b6 <_printf_float+0x22e>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	07d8      	lsls	r0, r3, #31
 800f4b4:	d510      	bpl.n	800f4d8 <_printf_float+0x250>
 800f4b6:	ee18 3a10 	vmov	r3, s16
 800f4ba:	4652      	mov	r2, sl
 800f4bc:	4631      	mov	r1, r6
 800f4be:	4628      	mov	r0, r5
 800f4c0:	47b8      	blx	r7
 800f4c2:	3001      	adds	r0, #1
 800f4c4:	f43f af41 	beq.w	800f34a <_printf_float+0xc2>
 800f4c8:	f04f 0800 	mov.w	r8, #0
 800f4cc:	f104 091a 	add.w	r9, r4, #26
 800f4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	4543      	cmp	r3, r8
 800f4d6:	dc09      	bgt.n	800f4ec <_printf_float+0x264>
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	079b      	lsls	r3, r3, #30
 800f4dc:	f100 8105 	bmi.w	800f6ea <_printf_float+0x462>
 800f4e0:	68e0      	ldr	r0, [r4, #12]
 800f4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4e4:	4298      	cmp	r0, r3
 800f4e6:	bfb8      	it	lt
 800f4e8:	4618      	movlt	r0, r3
 800f4ea:	e730      	b.n	800f34e <_printf_float+0xc6>
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	464a      	mov	r2, r9
 800f4f0:	4631      	mov	r1, r6
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	47b8      	blx	r7
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	f43f af27 	beq.w	800f34a <_printf_float+0xc2>
 800f4fc:	f108 0801 	add.w	r8, r8, #1
 800f500:	e7e6      	b.n	800f4d0 <_printf_float+0x248>
 800f502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f504:	2b00      	cmp	r3, #0
 800f506:	dc39      	bgt.n	800f57c <_printf_float+0x2f4>
 800f508:	4a1b      	ldr	r2, [pc, #108]	; (800f578 <_printf_float+0x2f0>)
 800f50a:	2301      	movs	r3, #1
 800f50c:	4631      	mov	r1, r6
 800f50e:	4628      	mov	r0, r5
 800f510:	47b8      	blx	r7
 800f512:	3001      	adds	r0, #1
 800f514:	f43f af19 	beq.w	800f34a <_printf_float+0xc2>
 800f518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f51c:	4313      	orrs	r3, r2
 800f51e:	d102      	bne.n	800f526 <_printf_float+0x29e>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	07d9      	lsls	r1, r3, #31
 800f524:	d5d8      	bpl.n	800f4d8 <_printf_float+0x250>
 800f526:	ee18 3a10 	vmov	r3, s16
 800f52a:	4652      	mov	r2, sl
 800f52c:	4631      	mov	r1, r6
 800f52e:	4628      	mov	r0, r5
 800f530:	47b8      	blx	r7
 800f532:	3001      	adds	r0, #1
 800f534:	f43f af09 	beq.w	800f34a <_printf_float+0xc2>
 800f538:	f04f 0900 	mov.w	r9, #0
 800f53c:	f104 0a1a 	add.w	sl, r4, #26
 800f540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f542:	425b      	negs	r3, r3
 800f544:	454b      	cmp	r3, r9
 800f546:	dc01      	bgt.n	800f54c <_printf_float+0x2c4>
 800f548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f54a:	e792      	b.n	800f472 <_printf_float+0x1ea>
 800f54c:	2301      	movs	r3, #1
 800f54e:	4652      	mov	r2, sl
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	f43f aef7 	beq.w	800f34a <_printf_float+0xc2>
 800f55c:	f109 0901 	add.w	r9, r9, #1
 800f560:	e7ee      	b.n	800f540 <_printf_float+0x2b8>
 800f562:	bf00      	nop
 800f564:	7fefffff 	.word	0x7fefffff
 800f568:	08012ce8 	.word	0x08012ce8
 800f56c:	08012cec 	.word	0x08012cec
 800f570:	08012cf4 	.word	0x08012cf4
 800f574:	08012cf0 	.word	0x08012cf0
 800f578:	08013079 	.word	0x08013079
 800f57c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f57e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f580:	429a      	cmp	r2, r3
 800f582:	bfa8      	it	ge
 800f584:	461a      	movge	r2, r3
 800f586:	2a00      	cmp	r2, #0
 800f588:	4691      	mov	r9, r2
 800f58a:	dc37      	bgt.n	800f5fc <_printf_float+0x374>
 800f58c:	f04f 0b00 	mov.w	fp, #0
 800f590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f594:	f104 021a 	add.w	r2, r4, #26
 800f598:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f59a:	9305      	str	r3, [sp, #20]
 800f59c:	eba3 0309 	sub.w	r3, r3, r9
 800f5a0:	455b      	cmp	r3, fp
 800f5a2:	dc33      	bgt.n	800f60c <_printf_float+0x384>
 800f5a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	db3b      	blt.n	800f624 <_printf_float+0x39c>
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	07da      	lsls	r2, r3, #31
 800f5b0:	d438      	bmi.n	800f624 <_printf_float+0x39c>
 800f5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b4:	9a05      	ldr	r2, [sp, #20]
 800f5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5b8:	1a9a      	subs	r2, r3, r2
 800f5ba:	eba3 0901 	sub.w	r9, r3, r1
 800f5be:	4591      	cmp	r9, r2
 800f5c0:	bfa8      	it	ge
 800f5c2:	4691      	movge	r9, r2
 800f5c4:	f1b9 0f00 	cmp.w	r9, #0
 800f5c8:	dc35      	bgt.n	800f636 <_printf_float+0x3ae>
 800f5ca:	f04f 0800 	mov.w	r8, #0
 800f5ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5d2:	f104 0a1a 	add.w	sl, r4, #26
 800f5d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5da:	1a9b      	subs	r3, r3, r2
 800f5dc:	eba3 0309 	sub.w	r3, r3, r9
 800f5e0:	4543      	cmp	r3, r8
 800f5e2:	f77f af79 	ble.w	800f4d8 <_printf_float+0x250>
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	4652      	mov	r2, sl
 800f5ea:	4631      	mov	r1, r6
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	47b8      	blx	r7
 800f5f0:	3001      	adds	r0, #1
 800f5f2:	f43f aeaa 	beq.w	800f34a <_printf_float+0xc2>
 800f5f6:	f108 0801 	add.w	r8, r8, #1
 800f5fa:	e7ec      	b.n	800f5d6 <_printf_float+0x34e>
 800f5fc:	4613      	mov	r3, r2
 800f5fe:	4631      	mov	r1, r6
 800f600:	4642      	mov	r2, r8
 800f602:	4628      	mov	r0, r5
 800f604:	47b8      	blx	r7
 800f606:	3001      	adds	r0, #1
 800f608:	d1c0      	bne.n	800f58c <_printf_float+0x304>
 800f60a:	e69e      	b.n	800f34a <_printf_float+0xc2>
 800f60c:	2301      	movs	r3, #1
 800f60e:	4631      	mov	r1, r6
 800f610:	4628      	mov	r0, r5
 800f612:	9205      	str	r2, [sp, #20]
 800f614:	47b8      	blx	r7
 800f616:	3001      	adds	r0, #1
 800f618:	f43f ae97 	beq.w	800f34a <_printf_float+0xc2>
 800f61c:	9a05      	ldr	r2, [sp, #20]
 800f61e:	f10b 0b01 	add.w	fp, fp, #1
 800f622:	e7b9      	b.n	800f598 <_printf_float+0x310>
 800f624:	ee18 3a10 	vmov	r3, s16
 800f628:	4652      	mov	r2, sl
 800f62a:	4631      	mov	r1, r6
 800f62c:	4628      	mov	r0, r5
 800f62e:	47b8      	blx	r7
 800f630:	3001      	adds	r0, #1
 800f632:	d1be      	bne.n	800f5b2 <_printf_float+0x32a>
 800f634:	e689      	b.n	800f34a <_printf_float+0xc2>
 800f636:	9a05      	ldr	r2, [sp, #20]
 800f638:	464b      	mov	r3, r9
 800f63a:	4442      	add	r2, r8
 800f63c:	4631      	mov	r1, r6
 800f63e:	4628      	mov	r0, r5
 800f640:	47b8      	blx	r7
 800f642:	3001      	adds	r0, #1
 800f644:	d1c1      	bne.n	800f5ca <_printf_float+0x342>
 800f646:	e680      	b.n	800f34a <_printf_float+0xc2>
 800f648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f64a:	2a01      	cmp	r2, #1
 800f64c:	dc01      	bgt.n	800f652 <_printf_float+0x3ca>
 800f64e:	07db      	lsls	r3, r3, #31
 800f650:	d538      	bpl.n	800f6c4 <_printf_float+0x43c>
 800f652:	2301      	movs	r3, #1
 800f654:	4642      	mov	r2, r8
 800f656:	4631      	mov	r1, r6
 800f658:	4628      	mov	r0, r5
 800f65a:	47b8      	blx	r7
 800f65c:	3001      	adds	r0, #1
 800f65e:	f43f ae74 	beq.w	800f34a <_printf_float+0xc2>
 800f662:	ee18 3a10 	vmov	r3, s16
 800f666:	4652      	mov	r2, sl
 800f668:	4631      	mov	r1, r6
 800f66a:	4628      	mov	r0, r5
 800f66c:	47b8      	blx	r7
 800f66e:	3001      	adds	r0, #1
 800f670:	f43f ae6b 	beq.w	800f34a <_printf_float+0xc2>
 800f674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f678:	2200      	movs	r2, #0
 800f67a:	2300      	movs	r3, #0
 800f67c:	f7f1 fa34 	bl	8000ae8 <__aeabi_dcmpeq>
 800f680:	b9d8      	cbnz	r0, 800f6ba <_printf_float+0x432>
 800f682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f684:	f108 0201 	add.w	r2, r8, #1
 800f688:	3b01      	subs	r3, #1
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	47b8      	blx	r7
 800f690:	3001      	adds	r0, #1
 800f692:	d10e      	bne.n	800f6b2 <_printf_float+0x42a>
 800f694:	e659      	b.n	800f34a <_printf_float+0xc2>
 800f696:	2301      	movs	r3, #1
 800f698:	4652      	mov	r2, sl
 800f69a:	4631      	mov	r1, r6
 800f69c:	4628      	mov	r0, r5
 800f69e:	47b8      	blx	r7
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	f43f ae52 	beq.w	800f34a <_printf_float+0xc2>
 800f6a6:	f108 0801 	add.w	r8, r8, #1
 800f6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	4543      	cmp	r3, r8
 800f6b0:	dcf1      	bgt.n	800f696 <_printf_float+0x40e>
 800f6b2:	464b      	mov	r3, r9
 800f6b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f6b8:	e6dc      	b.n	800f474 <_printf_float+0x1ec>
 800f6ba:	f04f 0800 	mov.w	r8, #0
 800f6be:	f104 0a1a 	add.w	sl, r4, #26
 800f6c2:	e7f2      	b.n	800f6aa <_printf_float+0x422>
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	4642      	mov	r2, r8
 800f6c8:	e7df      	b.n	800f68a <_printf_float+0x402>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	464a      	mov	r2, r9
 800f6ce:	4631      	mov	r1, r6
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	47b8      	blx	r7
 800f6d4:	3001      	adds	r0, #1
 800f6d6:	f43f ae38 	beq.w	800f34a <_printf_float+0xc2>
 800f6da:	f108 0801 	add.w	r8, r8, #1
 800f6de:	68e3      	ldr	r3, [r4, #12]
 800f6e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6e2:	1a5b      	subs	r3, r3, r1
 800f6e4:	4543      	cmp	r3, r8
 800f6e6:	dcf0      	bgt.n	800f6ca <_printf_float+0x442>
 800f6e8:	e6fa      	b.n	800f4e0 <_printf_float+0x258>
 800f6ea:	f04f 0800 	mov.w	r8, #0
 800f6ee:	f104 0919 	add.w	r9, r4, #25
 800f6f2:	e7f4      	b.n	800f6de <_printf_float+0x456>

0800f6f4 <_printf_common>:
 800f6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6f8:	4616      	mov	r6, r2
 800f6fa:	4699      	mov	r9, r3
 800f6fc:	688a      	ldr	r2, [r1, #8]
 800f6fe:	690b      	ldr	r3, [r1, #16]
 800f700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f704:	4293      	cmp	r3, r2
 800f706:	bfb8      	it	lt
 800f708:	4613      	movlt	r3, r2
 800f70a:	6033      	str	r3, [r6, #0]
 800f70c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f710:	4607      	mov	r7, r0
 800f712:	460c      	mov	r4, r1
 800f714:	b10a      	cbz	r2, 800f71a <_printf_common+0x26>
 800f716:	3301      	adds	r3, #1
 800f718:	6033      	str	r3, [r6, #0]
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	0699      	lsls	r1, r3, #26
 800f71e:	bf42      	ittt	mi
 800f720:	6833      	ldrmi	r3, [r6, #0]
 800f722:	3302      	addmi	r3, #2
 800f724:	6033      	strmi	r3, [r6, #0]
 800f726:	6825      	ldr	r5, [r4, #0]
 800f728:	f015 0506 	ands.w	r5, r5, #6
 800f72c:	d106      	bne.n	800f73c <_printf_common+0x48>
 800f72e:	f104 0a19 	add.w	sl, r4, #25
 800f732:	68e3      	ldr	r3, [r4, #12]
 800f734:	6832      	ldr	r2, [r6, #0]
 800f736:	1a9b      	subs	r3, r3, r2
 800f738:	42ab      	cmp	r3, r5
 800f73a:	dc26      	bgt.n	800f78a <_printf_common+0x96>
 800f73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f740:	1e13      	subs	r3, r2, #0
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	bf18      	it	ne
 800f746:	2301      	movne	r3, #1
 800f748:	0692      	lsls	r2, r2, #26
 800f74a:	d42b      	bmi.n	800f7a4 <_printf_common+0xb0>
 800f74c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f750:	4649      	mov	r1, r9
 800f752:	4638      	mov	r0, r7
 800f754:	47c0      	blx	r8
 800f756:	3001      	adds	r0, #1
 800f758:	d01e      	beq.n	800f798 <_printf_common+0xa4>
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	68e5      	ldr	r5, [r4, #12]
 800f75e:	6832      	ldr	r2, [r6, #0]
 800f760:	f003 0306 	and.w	r3, r3, #6
 800f764:	2b04      	cmp	r3, #4
 800f766:	bf08      	it	eq
 800f768:	1aad      	subeq	r5, r5, r2
 800f76a:	68a3      	ldr	r3, [r4, #8]
 800f76c:	6922      	ldr	r2, [r4, #16]
 800f76e:	bf0c      	ite	eq
 800f770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f774:	2500      	movne	r5, #0
 800f776:	4293      	cmp	r3, r2
 800f778:	bfc4      	itt	gt
 800f77a:	1a9b      	subgt	r3, r3, r2
 800f77c:	18ed      	addgt	r5, r5, r3
 800f77e:	2600      	movs	r6, #0
 800f780:	341a      	adds	r4, #26
 800f782:	42b5      	cmp	r5, r6
 800f784:	d11a      	bne.n	800f7bc <_printf_common+0xc8>
 800f786:	2000      	movs	r0, #0
 800f788:	e008      	b.n	800f79c <_printf_common+0xa8>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4652      	mov	r2, sl
 800f78e:	4649      	mov	r1, r9
 800f790:	4638      	mov	r0, r7
 800f792:	47c0      	blx	r8
 800f794:	3001      	adds	r0, #1
 800f796:	d103      	bne.n	800f7a0 <_printf_common+0xac>
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a0:	3501      	adds	r5, #1
 800f7a2:	e7c6      	b.n	800f732 <_printf_common+0x3e>
 800f7a4:	18e1      	adds	r1, r4, r3
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	2030      	movs	r0, #48	; 0x30
 800f7aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7ae:	4422      	add	r2, r4
 800f7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7b8:	3302      	adds	r3, #2
 800f7ba:	e7c7      	b.n	800f74c <_printf_common+0x58>
 800f7bc:	2301      	movs	r3, #1
 800f7be:	4622      	mov	r2, r4
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	47c0      	blx	r8
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	d0e6      	beq.n	800f798 <_printf_common+0xa4>
 800f7ca:	3601      	adds	r6, #1
 800f7cc:	e7d9      	b.n	800f782 <_printf_common+0x8e>
	...

0800f7d0 <_printf_i>:
 800f7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	7e0f      	ldrb	r7, [r1, #24]
 800f7d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f7d8:	2f78      	cmp	r7, #120	; 0x78
 800f7da:	4691      	mov	r9, r2
 800f7dc:	4680      	mov	r8, r0
 800f7de:	460c      	mov	r4, r1
 800f7e0:	469a      	mov	sl, r3
 800f7e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f7e6:	d807      	bhi.n	800f7f8 <_printf_i+0x28>
 800f7e8:	2f62      	cmp	r7, #98	; 0x62
 800f7ea:	d80a      	bhi.n	800f802 <_printf_i+0x32>
 800f7ec:	2f00      	cmp	r7, #0
 800f7ee:	f000 80d8 	beq.w	800f9a2 <_printf_i+0x1d2>
 800f7f2:	2f58      	cmp	r7, #88	; 0x58
 800f7f4:	f000 80a3 	beq.w	800f93e <_printf_i+0x16e>
 800f7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f800:	e03a      	b.n	800f878 <_printf_i+0xa8>
 800f802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f806:	2b15      	cmp	r3, #21
 800f808:	d8f6      	bhi.n	800f7f8 <_printf_i+0x28>
 800f80a:	a101      	add	r1, pc, #4	; (adr r1, 800f810 <_printf_i+0x40>)
 800f80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f810:	0800f869 	.word	0x0800f869
 800f814:	0800f87d 	.word	0x0800f87d
 800f818:	0800f7f9 	.word	0x0800f7f9
 800f81c:	0800f7f9 	.word	0x0800f7f9
 800f820:	0800f7f9 	.word	0x0800f7f9
 800f824:	0800f7f9 	.word	0x0800f7f9
 800f828:	0800f87d 	.word	0x0800f87d
 800f82c:	0800f7f9 	.word	0x0800f7f9
 800f830:	0800f7f9 	.word	0x0800f7f9
 800f834:	0800f7f9 	.word	0x0800f7f9
 800f838:	0800f7f9 	.word	0x0800f7f9
 800f83c:	0800f989 	.word	0x0800f989
 800f840:	0800f8ad 	.word	0x0800f8ad
 800f844:	0800f96b 	.word	0x0800f96b
 800f848:	0800f7f9 	.word	0x0800f7f9
 800f84c:	0800f7f9 	.word	0x0800f7f9
 800f850:	0800f9ab 	.word	0x0800f9ab
 800f854:	0800f7f9 	.word	0x0800f7f9
 800f858:	0800f8ad 	.word	0x0800f8ad
 800f85c:	0800f7f9 	.word	0x0800f7f9
 800f860:	0800f7f9 	.word	0x0800f7f9
 800f864:	0800f973 	.word	0x0800f973
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	1d1a      	adds	r2, r3, #4
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	602a      	str	r2, [r5, #0]
 800f870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f878:	2301      	movs	r3, #1
 800f87a:	e0a3      	b.n	800f9c4 <_printf_i+0x1f4>
 800f87c:	6820      	ldr	r0, [r4, #0]
 800f87e:	6829      	ldr	r1, [r5, #0]
 800f880:	0606      	lsls	r6, r0, #24
 800f882:	f101 0304 	add.w	r3, r1, #4
 800f886:	d50a      	bpl.n	800f89e <_printf_i+0xce>
 800f888:	680e      	ldr	r6, [r1, #0]
 800f88a:	602b      	str	r3, [r5, #0]
 800f88c:	2e00      	cmp	r6, #0
 800f88e:	da03      	bge.n	800f898 <_printf_i+0xc8>
 800f890:	232d      	movs	r3, #45	; 0x2d
 800f892:	4276      	negs	r6, r6
 800f894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f898:	485e      	ldr	r0, [pc, #376]	; (800fa14 <_printf_i+0x244>)
 800f89a:	230a      	movs	r3, #10
 800f89c:	e019      	b.n	800f8d2 <_printf_i+0x102>
 800f89e:	680e      	ldr	r6, [r1, #0]
 800f8a0:	602b      	str	r3, [r5, #0]
 800f8a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8a6:	bf18      	it	ne
 800f8a8:	b236      	sxthne	r6, r6
 800f8aa:	e7ef      	b.n	800f88c <_printf_i+0xbc>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	6820      	ldr	r0, [r4, #0]
 800f8b0:	1d19      	adds	r1, r3, #4
 800f8b2:	6029      	str	r1, [r5, #0]
 800f8b4:	0601      	lsls	r1, r0, #24
 800f8b6:	d501      	bpl.n	800f8bc <_printf_i+0xec>
 800f8b8:	681e      	ldr	r6, [r3, #0]
 800f8ba:	e002      	b.n	800f8c2 <_printf_i+0xf2>
 800f8bc:	0646      	lsls	r6, r0, #25
 800f8be:	d5fb      	bpl.n	800f8b8 <_printf_i+0xe8>
 800f8c0:	881e      	ldrh	r6, [r3, #0]
 800f8c2:	4854      	ldr	r0, [pc, #336]	; (800fa14 <_printf_i+0x244>)
 800f8c4:	2f6f      	cmp	r7, #111	; 0x6f
 800f8c6:	bf0c      	ite	eq
 800f8c8:	2308      	moveq	r3, #8
 800f8ca:	230a      	movne	r3, #10
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f8d2:	6865      	ldr	r5, [r4, #4]
 800f8d4:	60a5      	str	r5, [r4, #8]
 800f8d6:	2d00      	cmp	r5, #0
 800f8d8:	bfa2      	ittt	ge
 800f8da:	6821      	ldrge	r1, [r4, #0]
 800f8dc:	f021 0104 	bicge.w	r1, r1, #4
 800f8e0:	6021      	strge	r1, [r4, #0]
 800f8e2:	b90e      	cbnz	r6, 800f8e8 <_printf_i+0x118>
 800f8e4:	2d00      	cmp	r5, #0
 800f8e6:	d04d      	beq.n	800f984 <_printf_i+0x1b4>
 800f8e8:	4615      	mov	r5, r2
 800f8ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800f8ee:	fb03 6711 	mls	r7, r3, r1, r6
 800f8f2:	5dc7      	ldrb	r7, [r0, r7]
 800f8f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f8f8:	4637      	mov	r7, r6
 800f8fa:	42bb      	cmp	r3, r7
 800f8fc:	460e      	mov	r6, r1
 800f8fe:	d9f4      	bls.n	800f8ea <_printf_i+0x11a>
 800f900:	2b08      	cmp	r3, #8
 800f902:	d10b      	bne.n	800f91c <_printf_i+0x14c>
 800f904:	6823      	ldr	r3, [r4, #0]
 800f906:	07de      	lsls	r6, r3, #31
 800f908:	d508      	bpl.n	800f91c <_printf_i+0x14c>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	6861      	ldr	r1, [r4, #4]
 800f90e:	4299      	cmp	r1, r3
 800f910:	bfde      	ittt	le
 800f912:	2330      	movle	r3, #48	; 0x30
 800f914:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f918:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f91c:	1b52      	subs	r2, r2, r5
 800f91e:	6122      	str	r2, [r4, #16]
 800f920:	f8cd a000 	str.w	sl, [sp]
 800f924:	464b      	mov	r3, r9
 800f926:	aa03      	add	r2, sp, #12
 800f928:	4621      	mov	r1, r4
 800f92a:	4640      	mov	r0, r8
 800f92c:	f7ff fee2 	bl	800f6f4 <_printf_common>
 800f930:	3001      	adds	r0, #1
 800f932:	d14c      	bne.n	800f9ce <_printf_i+0x1fe>
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	b004      	add	sp, #16
 800f93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f93e:	4835      	ldr	r0, [pc, #212]	; (800fa14 <_printf_i+0x244>)
 800f940:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f944:	6829      	ldr	r1, [r5, #0]
 800f946:	6823      	ldr	r3, [r4, #0]
 800f948:	f851 6b04 	ldr.w	r6, [r1], #4
 800f94c:	6029      	str	r1, [r5, #0]
 800f94e:	061d      	lsls	r5, r3, #24
 800f950:	d514      	bpl.n	800f97c <_printf_i+0x1ac>
 800f952:	07df      	lsls	r7, r3, #31
 800f954:	bf44      	itt	mi
 800f956:	f043 0320 	orrmi.w	r3, r3, #32
 800f95a:	6023      	strmi	r3, [r4, #0]
 800f95c:	b91e      	cbnz	r6, 800f966 <_printf_i+0x196>
 800f95e:	6823      	ldr	r3, [r4, #0]
 800f960:	f023 0320 	bic.w	r3, r3, #32
 800f964:	6023      	str	r3, [r4, #0]
 800f966:	2310      	movs	r3, #16
 800f968:	e7b0      	b.n	800f8cc <_printf_i+0xfc>
 800f96a:	6823      	ldr	r3, [r4, #0]
 800f96c:	f043 0320 	orr.w	r3, r3, #32
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	2378      	movs	r3, #120	; 0x78
 800f974:	4828      	ldr	r0, [pc, #160]	; (800fa18 <_printf_i+0x248>)
 800f976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f97a:	e7e3      	b.n	800f944 <_printf_i+0x174>
 800f97c:	0659      	lsls	r1, r3, #25
 800f97e:	bf48      	it	mi
 800f980:	b2b6      	uxthmi	r6, r6
 800f982:	e7e6      	b.n	800f952 <_printf_i+0x182>
 800f984:	4615      	mov	r5, r2
 800f986:	e7bb      	b.n	800f900 <_printf_i+0x130>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	6826      	ldr	r6, [r4, #0]
 800f98c:	6961      	ldr	r1, [r4, #20]
 800f98e:	1d18      	adds	r0, r3, #4
 800f990:	6028      	str	r0, [r5, #0]
 800f992:	0635      	lsls	r5, r6, #24
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	d501      	bpl.n	800f99c <_printf_i+0x1cc>
 800f998:	6019      	str	r1, [r3, #0]
 800f99a:	e002      	b.n	800f9a2 <_printf_i+0x1d2>
 800f99c:	0670      	lsls	r0, r6, #25
 800f99e:	d5fb      	bpl.n	800f998 <_printf_i+0x1c8>
 800f9a0:	8019      	strh	r1, [r3, #0]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	6123      	str	r3, [r4, #16]
 800f9a6:	4615      	mov	r5, r2
 800f9a8:	e7ba      	b.n	800f920 <_printf_i+0x150>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	1d1a      	adds	r2, r3, #4
 800f9ae:	602a      	str	r2, [r5, #0]
 800f9b0:	681d      	ldr	r5, [r3, #0]
 800f9b2:	6862      	ldr	r2, [r4, #4]
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f7f0 fc22 	bl	8000200 <memchr>
 800f9bc:	b108      	cbz	r0, 800f9c2 <_printf_i+0x1f2>
 800f9be:	1b40      	subs	r0, r0, r5
 800f9c0:	6060      	str	r0, [r4, #4]
 800f9c2:	6863      	ldr	r3, [r4, #4]
 800f9c4:	6123      	str	r3, [r4, #16]
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9cc:	e7a8      	b.n	800f920 <_printf_i+0x150>
 800f9ce:	6923      	ldr	r3, [r4, #16]
 800f9d0:	462a      	mov	r2, r5
 800f9d2:	4649      	mov	r1, r9
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	47d0      	blx	sl
 800f9d8:	3001      	adds	r0, #1
 800f9da:	d0ab      	beq.n	800f934 <_printf_i+0x164>
 800f9dc:	6823      	ldr	r3, [r4, #0]
 800f9de:	079b      	lsls	r3, r3, #30
 800f9e0:	d413      	bmi.n	800fa0a <_printf_i+0x23a>
 800f9e2:	68e0      	ldr	r0, [r4, #12]
 800f9e4:	9b03      	ldr	r3, [sp, #12]
 800f9e6:	4298      	cmp	r0, r3
 800f9e8:	bfb8      	it	lt
 800f9ea:	4618      	movlt	r0, r3
 800f9ec:	e7a4      	b.n	800f938 <_printf_i+0x168>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	4632      	mov	r2, r6
 800f9f2:	4649      	mov	r1, r9
 800f9f4:	4640      	mov	r0, r8
 800f9f6:	47d0      	blx	sl
 800f9f8:	3001      	adds	r0, #1
 800f9fa:	d09b      	beq.n	800f934 <_printf_i+0x164>
 800f9fc:	3501      	adds	r5, #1
 800f9fe:	68e3      	ldr	r3, [r4, #12]
 800fa00:	9903      	ldr	r1, [sp, #12]
 800fa02:	1a5b      	subs	r3, r3, r1
 800fa04:	42ab      	cmp	r3, r5
 800fa06:	dcf2      	bgt.n	800f9ee <_printf_i+0x21e>
 800fa08:	e7eb      	b.n	800f9e2 <_printf_i+0x212>
 800fa0a:	2500      	movs	r5, #0
 800fa0c:	f104 0619 	add.w	r6, r4, #25
 800fa10:	e7f5      	b.n	800f9fe <_printf_i+0x22e>
 800fa12:	bf00      	nop
 800fa14:	08012cf8 	.word	0x08012cf8
 800fa18:	08012d09 	.word	0x08012d09

0800fa1c <iprintf>:
 800fa1c:	b40f      	push	{r0, r1, r2, r3}
 800fa1e:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <iprintf+0x2c>)
 800fa20:	b513      	push	{r0, r1, r4, lr}
 800fa22:	681c      	ldr	r4, [r3, #0]
 800fa24:	b124      	cbz	r4, 800fa30 <iprintf+0x14>
 800fa26:	69a3      	ldr	r3, [r4, #24]
 800fa28:	b913      	cbnz	r3, 800fa30 <iprintf+0x14>
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f001 fab0 	bl	8010f90 <__sinit>
 800fa30:	ab05      	add	r3, sp, #20
 800fa32:	9a04      	ldr	r2, [sp, #16]
 800fa34:	68a1      	ldr	r1, [r4, #8]
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	4620      	mov	r0, r4
 800fa3a:	f002 fac5 	bl	8011fc8 <_vfiprintf_r>
 800fa3e:	b002      	add	sp, #8
 800fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa44:	b004      	add	sp, #16
 800fa46:	4770      	bx	lr
 800fa48:	20000054 	.word	0x20000054

0800fa4c <_puts_r>:
 800fa4c:	b570      	push	{r4, r5, r6, lr}
 800fa4e:	460e      	mov	r6, r1
 800fa50:	4605      	mov	r5, r0
 800fa52:	b118      	cbz	r0, 800fa5c <_puts_r+0x10>
 800fa54:	6983      	ldr	r3, [r0, #24]
 800fa56:	b90b      	cbnz	r3, 800fa5c <_puts_r+0x10>
 800fa58:	f001 fa9a 	bl	8010f90 <__sinit>
 800fa5c:	69ab      	ldr	r3, [r5, #24]
 800fa5e:	68ac      	ldr	r4, [r5, #8]
 800fa60:	b913      	cbnz	r3, 800fa68 <_puts_r+0x1c>
 800fa62:	4628      	mov	r0, r5
 800fa64:	f001 fa94 	bl	8010f90 <__sinit>
 800fa68:	4b2c      	ldr	r3, [pc, #176]	; (800fb1c <_puts_r+0xd0>)
 800fa6a:	429c      	cmp	r4, r3
 800fa6c:	d120      	bne.n	800fab0 <_puts_r+0x64>
 800fa6e:	686c      	ldr	r4, [r5, #4]
 800fa70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa72:	07db      	lsls	r3, r3, #31
 800fa74:	d405      	bmi.n	800fa82 <_puts_r+0x36>
 800fa76:	89a3      	ldrh	r3, [r4, #12]
 800fa78:	0598      	lsls	r0, r3, #22
 800fa7a:	d402      	bmi.n	800fa82 <_puts_r+0x36>
 800fa7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa7e:	f001 fb2a 	bl	80110d6 <__retarget_lock_acquire_recursive>
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	0719      	lsls	r1, r3, #28
 800fa86:	d51d      	bpl.n	800fac4 <_puts_r+0x78>
 800fa88:	6923      	ldr	r3, [r4, #16]
 800fa8a:	b1db      	cbz	r3, 800fac4 <_puts_r+0x78>
 800fa8c:	3e01      	subs	r6, #1
 800fa8e:	68a3      	ldr	r3, [r4, #8]
 800fa90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa94:	3b01      	subs	r3, #1
 800fa96:	60a3      	str	r3, [r4, #8]
 800fa98:	bb39      	cbnz	r1, 800faea <_puts_r+0x9e>
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da38      	bge.n	800fb10 <_puts_r+0xc4>
 800fa9e:	4622      	mov	r2, r4
 800faa0:	210a      	movs	r1, #10
 800faa2:	4628      	mov	r0, r5
 800faa4:	f000 f9fe 	bl	800fea4 <__swbuf_r>
 800faa8:	3001      	adds	r0, #1
 800faaa:	d011      	beq.n	800fad0 <_puts_r+0x84>
 800faac:	250a      	movs	r5, #10
 800faae:	e011      	b.n	800fad4 <_puts_r+0x88>
 800fab0:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <_puts_r+0xd4>)
 800fab2:	429c      	cmp	r4, r3
 800fab4:	d101      	bne.n	800faba <_puts_r+0x6e>
 800fab6:	68ac      	ldr	r4, [r5, #8]
 800fab8:	e7da      	b.n	800fa70 <_puts_r+0x24>
 800faba:	4b1a      	ldr	r3, [pc, #104]	; (800fb24 <_puts_r+0xd8>)
 800fabc:	429c      	cmp	r4, r3
 800fabe:	bf08      	it	eq
 800fac0:	68ec      	ldreq	r4, [r5, #12]
 800fac2:	e7d5      	b.n	800fa70 <_puts_r+0x24>
 800fac4:	4621      	mov	r1, r4
 800fac6:	4628      	mov	r0, r5
 800fac8:	f000 fa50 	bl	800ff6c <__swsetup_r>
 800facc:	2800      	cmp	r0, #0
 800face:	d0dd      	beq.n	800fa8c <_puts_r+0x40>
 800fad0:	f04f 35ff 	mov.w	r5, #4294967295
 800fad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fad6:	07da      	lsls	r2, r3, #31
 800fad8:	d405      	bmi.n	800fae6 <_puts_r+0x9a>
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	059b      	lsls	r3, r3, #22
 800fade:	d402      	bmi.n	800fae6 <_puts_r+0x9a>
 800fae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fae2:	f001 faf9 	bl	80110d8 <__retarget_lock_release_recursive>
 800fae6:	4628      	mov	r0, r5
 800fae8:	bd70      	pop	{r4, r5, r6, pc}
 800faea:	2b00      	cmp	r3, #0
 800faec:	da04      	bge.n	800faf8 <_puts_r+0xac>
 800faee:	69a2      	ldr	r2, [r4, #24]
 800faf0:	429a      	cmp	r2, r3
 800faf2:	dc06      	bgt.n	800fb02 <_puts_r+0xb6>
 800faf4:	290a      	cmp	r1, #10
 800faf6:	d004      	beq.n	800fb02 <_puts_r+0xb6>
 800faf8:	6823      	ldr	r3, [r4, #0]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	6022      	str	r2, [r4, #0]
 800fafe:	7019      	strb	r1, [r3, #0]
 800fb00:	e7c5      	b.n	800fa8e <_puts_r+0x42>
 800fb02:	4622      	mov	r2, r4
 800fb04:	4628      	mov	r0, r5
 800fb06:	f000 f9cd 	bl	800fea4 <__swbuf_r>
 800fb0a:	3001      	adds	r0, #1
 800fb0c:	d1bf      	bne.n	800fa8e <_puts_r+0x42>
 800fb0e:	e7df      	b.n	800fad0 <_puts_r+0x84>
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	250a      	movs	r5, #10
 800fb14:	1c5a      	adds	r2, r3, #1
 800fb16:	6022      	str	r2, [r4, #0]
 800fb18:	701d      	strb	r5, [r3, #0]
 800fb1a:	e7db      	b.n	800fad4 <_puts_r+0x88>
 800fb1c:	08012ecc 	.word	0x08012ecc
 800fb20:	08012eec 	.word	0x08012eec
 800fb24:	08012eac 	.word	0x08012eac

0800fb28 <puts>:
 800fb28:	4b02      	ldr	r3, [pc, #8]	; (800fb34 <puts+0xc>)
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	f7ff bf8d 	b.w	800fa4c <_puts_r>
 800fb32:	bf00      	nop
 800fb34:	20000054 	.word	0x20000054

0800fb38 <_sbrk_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4d06      	ldr	r5, [pc, #24]	; (800fb54 <_sbrk_r+0x1c>)
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	4604      	mov	r4, r0
 800fb40:	4608      	mov	r0, r1
 800fb42:	602b      	str	r3, [r5, #0]
 800fb44:	f7f3 fc62 	bl	800340c <_sbrk>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	d102      	bne.n	800fb52 <_sbrk_r+0x1a>
 800fb4c:	682b      	ldr	r3, [r5, #0]
 800fb4e:	b103      	cbz	r3, 800fb52 <_sbrk_r+0x1a>
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	20002cec 	.word	0x20002cec

0800fb58 <_raise_r>:
 800fb58:	291f      	cmp	r1, #31
 800fb5a:	b538      	push	{r3, r4, r5, lr}
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	460d      	mov	r5, r1
 800fb60:	d904      	bls.n	800fb6c <_raise_r+0x14>
 800fb62:	2316      	movs	r3, #22
 800fb64:	6003      	str	r3, [r0, #0]
 800fb66:	f04f 30ff 	mov.w	r0, #4294967295
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}
 800fb6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb6e:	b112      	cbz	r2, 800fb76 <_raise_r+0x1e>
 800fb70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb74:	b94b      	cbnz	r3, 800fb8a <_raise_r+0x32>
 800fb76:	4620      	mov	r0, r4
 800fb78:	f000 f830 	bl	800fbdc <_getpid_r>
 800fb7c:	462a      	mov	r2, r5
 800fb7e:	4601      	mov	r1, r0
 800fb80:	4620      	mov	r0, r4
 800fb82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb86:	f000 b817 	b.w	800fbb8 <_kill_r>
 800fb8a:	2b01      	cmp	r3, #1
 800fb8c:	d00a      	beq.n	800fba4 <_raise_r+0x4c>
 800fb8e:	1c59      	adds	r1, r3, #1
 800fb90:	d103      	bne.n	800fb9a <_raise_r+0x42>
 800fb92:	2316      	movs	r3, #22
 800fb94:	6003      	str	r3, [r0, #0]
 800fb96:	2001      	movs	r0, #1
 800fb98:	e7e7      	b.n	800fb6a <_raise_r+0x12>
 800fb9a:	2400      	movs	r4, #0
 800fb9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fba0:	4628      	mov	r0, r5
 800fba2:	4798      	blx	r3
 800fba4:	2000      	movs	r0, #0
 800fba6:	e7e0      	b.n	800fb6a <_raise_r+0x12>

0800fba8 <raise>:
 800fba8:	4b02      	ldr	r3, [pc, #8]	; (800fbb4 <raise+0xc>)
 800fbaa:	4601      	mov	r1, r0
 800fbac:	6818      	ldr	r0, [r3, #0]
 800fbae:	f7ff bfd3 	b.w	800fb58 <_raise_r>
 800fbb2:	bf00      	nop
 800fbb4:	20000054 	.word	0x20000054

0800fbb8 <_kill_r>:
 800fbb8:	b538      	push	{r3, r4, r5, lr}
 800fbba:	4d07      	ldr	r5, [pc, #28]	; (800fbd8 <_kill_r+0x20>)
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	4608      	mov	r0, r1
 800fbc2:	4611      	mov	r1, r2
 800fbc4:	602b      	str	r3, [r5, #0]
 800fbc6:	f7f3 fbb5 	bl	8003334 <_kill>
 800fbca:	1c43      	adds	r3, r0, #1
 800fbcc:	d102      	bne.n	800fbd4 <_kill_r+0x1c>
 800fbce:	682b      	ldr	r3, [r5, #0]
 800fbd0:	b103      	cbz	r3, 800fbd4 <_kill_r+0x1c>
 800fbd2:	6023      	str	r3, [r4, #0]
 800fbd4:	bd38      	pop	{r3, r4, r5, pc}
 800fbd6:	bf00      	nop
 800fbd8:	20002cec 	.word	0x20002cec

0800fbdc <_getpid_r>:
 800fbdc:	f7f3 bba2 	b.w	8003324 <_getpid>

0800fbe0 <siprintf>:
 800fbe0:	b40e      	push	{r1, r2, r3}
 800fbe2:	b500      	push	{lr}
 800fbe4:	b09c      	sub	sp, #112	; 0x70
 800fbe6:	ab1d      	add	r3, sp, #116	; 0x74
 800fbe8:	9002      	str	r0, [sp, #8]
 800fbea:	9006      	str	r0, [sp, #24]
 800fbec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fbf0:	4809      	ldr	r0, [pc, #36]	; (800fc18 <siprintf+0x38>)
 800fbf2:	9107      	str	r1, [sp, #28]
 800fbf4:	9104      	str	r1, [sp, #16]
 800fbf6:	4909      	ldr	r1, [pc, #36]	; (800fc1c <siprintf+0x3c>)
 800fbf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfc:	9105      	str	r1, [sp, #20]
 800fbfe:	6800      	ldr	r0, [r0, #0]
 800fc00:	9301      	str	r3, [sp, #4]
 800fc02:	a902      	add	r1, sp, #8
 800fc04:	f001 fee4 	bl	80119d0 <_svfiprintf_r>
 800fc08:	9b02      	ldr	r3, [sp, #8]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	701a      	strb	r2, [r3, #0]
 800fc0e:	b01c      	add	sp, #112	; 0x70
 800fc10:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc14:	b003      	add	sp, #12
 800fc16:	4770      	bx	lr
 800fc18:	20000054 	.word	0x20000054
 800fc1c:	ffff0208 	.word	0xffff0208

0800fc20 <siscanf>:
 800fc20:	b40e      	push	{r1, r2, r3}
 800fc22:	b510      	push	{r4, lr}
 800fc24:	b09f      	sub	sp, #124	; 0x7c
 800fc26:	ac21      	add	r4, sp, #132	; 0x84
 800fc28:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fc2c:	f854 2b04 	ldr.w	r2, [r4], #4
 800fc30:	9201      	str	r2, [sp, #4]
 800fc32:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fc36:	9004      	str	r0, [sp, #16]
 800fc38:	9008      	str	r0, [sp, #32]
 800fc3a:	f7f0 fad3 	bl	80001e4 <strlen>
 800fc3e:	4b0c      	ldr	r3, [pc, #48]	; (800fc70 <siscanf+0x50>)
 800fc40:	9005      	str	r0, [sp, #20]
 800fc42:	9009      	str	r0, [sp, #36]	; 0x24
 800fc44:	930d      	str	r3, [sp, #52]	; 0x34
 800fc46:	480b      	ldr	r0, [pc, #44]	; (800fc74 <siscanf+0x54>)
 800fc48:	9a01      	ldr	r2, [sp, #4]
 800fc4a:	6800      	ldr	r0, [r0, #0]
 800fc4c:	9403      	str	r4, [sp, #12]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	9311      	str	r3, [sp, #68]	; 0x44
 800fc52:	9316      	str	r3, [sp, #88]	; 0x58
 800fc54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fc58:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fc5c:	a904      	add	r1, sp, #16
 800fc5e:	4623      	mov	r3, r4
 800fc60:	f002 f810 	bl	8011c84 <__ssvfiscanf_r>
 800fc64:	b01f      	add	sp, #124	; 0x7c
 800fc66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc6a:	b003      	add	sp, #12
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	0800fc9b 	.word	0x0800fc9b
 800fc74:	20000054 	.word	0x20000054

0800fc78 <__sread>:
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc80:	f002 fc24 	bl	80124cc <_read_r>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	bfab      	itete	ge
 800fc88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc8a:	89a3      	ldrhlt	r3, [r4, #12]
 800fc8c:	181b      	addge	r3, r3, r0
 800fc8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc92:	bfac      	ite	ge
 800fc94:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc96:	81a3      	strhlt	r3, [r4, #12]
 800fc98:	bd10      	pop	{r4, pc}

0800fc9a <__seofread>:
 800fc9a:	2000      	movs	r0, #0
 800fc9c:	4770      	bx	lr

0800fc9e <__swrite>:
 800fc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca2:	461f      	mov	r7, r3
 800fca4:	898b      	ldrh	r3, [r1, #12]
 800fca6:	05db      	lsls	r3, r3, #23
 800fca8:	4605      	mov	r5, r0
 800fcaa:	460c      	mov	r4, r1
 800fcac:	4616      	mov	r6, r2
 800fcae:	d505      	bpl.n	800fcbc <__swrite+0x1e>
 800fcb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f001 fa10 	bl	80110dc <_lseek_r>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fcc6:	81a3      	strh	r3, [r4, #12]
 800fcc8:	4632      	mov	r2, r6
 800fcca:	463b      	mov	r3, r7
 800fccc:	4628      	mov	r0, r5
 800fcce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd2:	f000 b939 	b.w	800ff48 <_write_r>

0800fcd6 <__sseek>:
 800fcd6:	b510      	push	{r4, lr}
 800fcd8:	460c      	mov	r4, r1
 800fcda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcde:	f001 f9fd 	bl	80110dc <_lseek_r>
 800fce2:	1c43      	adds	r3, r0, #1
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	bf15      	itete	ne
 800fce8:	6560      	strne	r0, [r4, #84]	; 0x54
 800fcea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fcee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fcf2:	81a3      	strheq	r3, [r4, #12]
 800fcf4:	bf18      	it	ne
 800fcf6:	81a3      	strhne	r3, [r4, #12]
 800fcf8:	bd10      	pop	{r4, pc}

0800fcfa <__sclose>:
 800fcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcfe:	f000 b9a3 	b.w	8010048 <_close_r>

0800fd02 <strcpy>:
 800fd02:	4603      	mov	r3, r0
 800fd04:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd08:	f803 2b01 	strb.w	r2, [r3], #1
 800fd0c:	2a00      	cmp	r2, #0
 800fd0e:	d1f9      	bne.n	800fd04 <strcpy+0x2>
 800fd10:	4770      	bx	lr
	...

0800fd14 <_strtol_l.constprop.0>:
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd1a:	d001      	beq.n	800fd20 <_strtol_l.constprop.0+0xc>
 800fd1c:	2b24      	cmp	r3, #36	; 0x24
 800fd1e:	d906      	bls.n	800fd2e <_strtol_l.constprop.0+0x1a>
 800fd20:	f7ff f8e2 	bl	800eee8 <__errno>
 800fd24:	2316      	movs	r3, #22
 800fd26:	6003      	str	r3, [r0, #0]
 800fd28:	2000      	movs	r0, #0
 800fd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd2e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fe14 <_strtol_l.constprop.0+0x100>
 800fd32:	460d      	mov	r5, r1
 800fd34:	462e      	mov	r6, r5
 800fd36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd3a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fd3e:	f017 0708 	ands.w	r7, r7, #8
 800fd42:	d1f7      	bne.n	800fd34 <_strtol_l.constprop.0+0x20>
 800fd44:	2c2d      	cmp	r4, #45	; 0x2d
 800fd46:	d132      	bne.n	800fdae <_strtol_l.constprop.0+0x9a>
 800fd48:	782c      	ldrb	r4, [r5, #0]
 800fd4a:	2701      	movs	r7, #1
 800fd4c:	1cb5      	adds	r5, r6, #2
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d05b      	beq.n	800fe0a <_strtol_l.constprop.0+0xf6>
 800fd52:	2b10      	cmp	r3, #16
 800fd54:	d109      	bne.n	800fd6a <_strtol_l.constprop.0+0x56>
 800fd56:	2c30      	cmp	r4, #48	; 0x30
 800fd58:	d107      	bne.n	800fd6a <_strtol_l.constprop.0+0x56>
 800fd5a:	782c      	ldrb	r4, [r5, #0]
 800fd5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fd60:	2c58      	cmp	r4, #88	; 0x58
 800fd62:	d14d      	bne.n	800fe00 <_strtol_l.constprop.0+0xec>
 800fd64:	786c      	ldrb	r4, [r5, #1]
 800fd66:	2310      	movs	r3, #16
 800fd68:	3502      	adds	r5, #2
 800fd6a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fd6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd72:	f04f 0c00 	mov.w	ip, #0
 800fd76:	fbb8 f9f3 	udiv	r9, r8, r3
 800fd7a:	4666      	mov	r6, ip
 800fd7c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fd80:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd84:	f1be 0f09 	cmp.w	lr, #9
 800fd88:	d816      	bhi.n	800fdb8 <_strtol_l.constprop.0+0xa4>
 800fd8a:	4674      	mov	r4, lr
 800fd8c:	42a3      	cmp	r3, r4
 800fd8e:	dd24      	ble.n	800fdda <_strtol_l.constprop.0+0xc6>
 800fd90:	f1bc 0f00 	cmp.w	ip, #0
 800fd94:	db1e      	blt.n	800fdd4 <_strtol_l.constprop.0+0xc0>
 800fd96:	45b1      	cmp	r9, r6
 800fd98:	d31c      	bcc.n	800fdd4 <_strtol_l.constprop.0+0xc0>
 800fd9a:	d101      	bne.n	800fda0 <_strtol_l.constprop.0+0x8c>
 800fd9c:	45a2      	cmp	sl, r4
 800fd9e:	db19      	blt.n	800fdd4 <_strtol_l.constprop.0+0xc0>
 800fda0:	fb06 4603 	mla	r6, r6, r3, r4
 800fda4:	f04f 0c01 	mov.w	ip, #1
 800fda8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdac:	e7e8      	b.n	800fd80 <_strtol_l.constprop.0+0x6c>
 800fdae:	2c2b      	cmp	r4, #43	; 0x2b
 800fdb0:	bf04      	itt	eq
 800fdb2:	782c      	ldrbeq	r4, [r5, #0]
 800fdb4:	1cb5      	addeq	r5, r6, #2
 800fdb6:	e7ca      	b.n	800fd4e <_strtol_l.constprop.0+0x3a>
 800fdb8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fdbc:	f1be 0f19 	cmp.w	lr, #25
 800fdc0:	d801      	bhi.n	800fdc6 <_strtol_l.constprop.0+0xb2>
 800fdc2:	3c37      	subs	r4, #55	; 0x37
 800fdc4:	e7e2      	b.n	800fd8c <_strtol_l.constprop.0+0x78>
 800fdc6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fdca:	f1be 0f19 	cmp.w	lr, #25
 800fdce:	d804      	bhi.n	800fdda <_strtol_l.constprop.0+0xc6>
 800fdd0:	3c57      	subs	r4, #87	; 0x57
 800fdd2:	e7db      	b.n	800fd8c <_strtol_l.constprop.0+0x78>
 800fdd4:	f04f 3cff 	mov.w	ip, #4294967295
 800fdd8:	e7e6      	b.n	800fda8 <_strtol_l.constprop.0+0x94>
 800fdda:	f1bc 0f00 	cmp.w	ip, #0
 800fdde:	da05      	bge.n	800fdec <_strtol_l.constprop.0+0xd8>
 800fde0:	2322      	movs	r3, #34	; 0x22
 800fde2:	6003      	str	r3, [r0, #0]
 800fde4:	4646      	mov	r6, r8
 800fde6:	b942      	cbnz	r2, 800fdfa <_strtol_l.constprop.0+0xe6>
 800fde8:	4630      	mov	r0, r6
 800fdea:	e79e      	b.n	800fd2a <_strtol_l.constprop.0+0x16>
 800fdec:	b107      	cbz	r7, 800fdf0 <_strtol_l.constprop.0+0xdc>
 800fdee:	4276      	negs	r6, r6
 800fdf0:	2a00      	cmp	r2, #0
 800fdf2:	d0f9      	beq.n	800fde8 <_strtol_l.constprop.0+0xd4>
 800fdf4:	f1bc 0f00 	cmp.w	ip, #0
 800fdf8:	d000      	beq.n	800fdfc <_strtol_l.constprop.0+0xe8>
 800fdfa:	1e69      	subs	r1, r5, #1
 800fdfc:	6011      	str	r1, [r2, #0]
 800fdfe:	e7f3      	b.n	800fde8 <_strtol_l.constprop.0+0xd4>
 800fe00:	2430      	movs	r4, #48	; 0x30
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1b1      	bne.n	800fd6a <_strtol_l.constprop.0+0x56>
 800fe06:	2308      	movs	r3, #8
 800fe08:	e7af      	b.n	800fd6a <_strtol_l.constprop.0+0x56>
 800fe0a:	2c30      	cmp	r4, #48	; 0x30
 800fe0c:	d0a5      	beq.n	800fd5a <_strtol_l.constprop.0+0x46>
 800fe0e:	230a      	movs	r3, #10
 800fe10:	e7ab      	b.n	800fd6a <_strtol_l.constprop.0+0x56>
 800fe12:	bf00      	nop
 800fe14:	08012d1b 	.word	0x08012d1b

0800fe18 <_strtol_r>:
 800fe18:	f7ff bf7c 	b.w	800fd14 <_strtol_l.constprop.0>

0800fe1c <strtol>:
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	460a      	mov	r2, r1
 800fe20:	4601      	mov	r1, r0
 800fe22:	4802      	ldr	r0, [pc, #8]	; (800fe2c <strtol+0x10>)
 800fe24:	6800      	ldr	r0, [r0, #0]
 800fe26:	f7ff bf75 	b.w	800fd14 <_strtol_l.constprop.0>
 800fe2a:	bf00      	nop
 800fe2c:	20000054 	.word	0x20000054

0800fe30 <_vsniprintf_r>:
 800fe30:	b530      	push	{r4, r5, lr}
 800fe32:	4614      	mov	r4, r2
 800fe34:	2c00      	cmp	r4, #0
 800fe36:	b09b      	sub	sp, #108	; 0x6c
 800fe38:	4605      	mov	r5, r0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	da05      	bge.n	800fe4a <_vsniprintf_r+0x1a>
 800fe3e:	238b      	movs	r3, #139	; 0x8b
 800fe40:	6003      	str	r3, [r0, #0]
 800fe42:	f04f 30ff 	mov.w	r0, #4294967295
 800fe46:	b01b      	add	sp, #108	; 0x6c
 800fe48:	bd30      	pop	{r4, r5, pc}
 800fe4a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800fe52:	bf14      	ite	ne
 800fe54:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fe58:	4623      	moveq	r3, r4
 800fe5a:	9302      	str	r3, [sp, #8]
 800fe5c:	9305      	str	r3, [sp, #20]
 800fe5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe62:	9100      	str	r1, [sp, #0]
 800fe64:	9104      	str	r1, [sp, #16]
 800fe66:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe6a:	4669      	mov	r1, sp
 800fe6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fe6e:	f001 fdaf 	bl	80119d0 <_svfiprintf_r>
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	bfbc      	itt	lt
 800fe76:	238b      	movlt	r3, #139	; 0x8b
 800fe78:	602b      	strlt	r3, [r5, #0]
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	d0e3      	beq.n	800fe46 <_vsniprintf_r+0x16>
 800fe7e:	9b00      	ldr	r3, [sp, #0]
 800fe80:	2200      	movs	r2, #0
 800fe82:	701a      	strb	r2, [r3, #0]
 800fe84:	e7df      	b.n	800fe46 <_vsniprintf_r+0x16>
	...

0800fe88 <vsniprintf>:
 800fe88:	b507      	push	{r0, r1, r2, lr}
 800fe8a:	9300      	str	r3, [sp, #0]
 800fe8c:	4613      	mov	r3, r2
 800fe8e:	460a      	mov	r2, r1
 800fe90:	4601      	mov	r1, r0
 800fe92:	4803      	ldr	r0, [pc, #12]	; (800fea0 <vsniprintf+0x18>)
 800fe94:	6800      	ldr	r0, [r0, #0]
 800fe96:	f7ff ffcb 	bl	800fe30 <_vsniprintf_r>
 800fe9a:	b003      	add	sp, #12
 800fe9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fea0:	20000054 	.word	0x20000054

0800fea4 <__swbuf_r>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	460e      	mov	r6, r1
 800fea8:	4614      	mov	r4, r2
 800feaa:	4605      	mov	r5, r0
 800feac:	b118      	cbz	r0, 800feb6 <__swbuf_r+0x12>
 800feae:	6983      	ldr	r3, [r0, #24]
 800feb0:	b90b      	cbnz	r3, 800feb6 <__swbuf_r+0x12>
 800feb2:	f001 f86d 	bl	8010f90 <__sinit>
 800feb6:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <__swbuf_r+0x98>)
 800feb8:	429c      	cmp	r4, r3
 800feba:	d12b      	bne.n	800ff14 <__swbuf_r+0x70>
 800febc:	686c      	ldr	r4, [r5, #4]
 800febe:	69a3      	ldr	r3, [r4, #24]
 800fec0:	60a3      	str	r3, [r4, #8]
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	071a      	lsls	r2, r3, #28
 800fec6:	d52f      	bpl.n	800ff28 <__swbuf_r+0x84>
 800fec8:	6923      	ldr	r3, [r4, #16]
 800feca:	b36b      	cbz	r3, 800ff28 <__swbuf_r+0x84>
 800fecc:	6923      	ldr	r3, [r4, #16]
 800fece:	6820      	ldr	r0, [r4, #0]
 800fed0:	1ac0      	subs	r0, r0, r3
 800fed2:	6963      	ldr	r3, [r4, #20]
 800fed4:	b2f6      	uxtb	r6, r6
 800fed6:	4283      	cmp	r3, r0
 800fed8:	4637      	mov	r7, r6
 800feda:	dc04      	bgt.n	800fee6 <__swbuf_r+0x42>
 800fedc:	4621      	mov	r1, r4
 800fede:	4628      	mov	r0, r5
 800fee0:	f000 ffc2 	bl	8010e68 <_fflush_r>
 800fee4:	bb30      	cbnz	r0, 800ff34 <__swbuf_r+0x90>
 800fee6:	68a3      	ldr	r3, [r4, #8]
 800fee8:	3b01      	subs	r3, #1
 800feea:	60a3      	str	r3, [r4, #8]
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	1c5a      	adds	r2, r3, #1
 800fef0:	6022      	str	r2, [r4, #0]
 800fef2:	701e      	strb	r6, [r3, #0]
 800fef4:	6963      	ldr	r3, [r4, #20]
 800fef6:	3001      	adds	r0, #1
 800fef8:	4283      	cmp	r3, r0
 800fefa:	d004      	beq.n	800ff06 <__swbuf_r+0x62>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	07db      	lsls	r3, r3, #31
 800ff00:	d506      	bpl.n	800ff10 <__swbuf_r+0x6c>
 800ff02:	2e0a      	cmp	r6, #10
 800ff04:	d104      	bne.n	800ff10 <__swbuf_r+0x6c>
 800ff06:	4621      	mov	r1, r4
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f000 ffad 	bl	8010e68 <_fflush_r>
 800ff0e:	b988      	cbnz	r0, 800ff34 <__swbuf_r+0x90>
 800ff10:	4638      	mov	r0, r7
 800ff12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff14:	4b0a      	ldr	r3, [pc, #40]	; (800ff40 <__swbuf_r+0x9c>)
 800ff16:	429c      	cmp	r4, r3
 800ff18:	d101      	bne.n	800ff1e <__swbuf_r+0x7a>
 800ff1a:	68ac      	ldr	r4, [r5, #8]
 800ff1c:	e7cf      	b.n	800febe <__swbuf_r+0x1a>
 800ff1e:	4b09      	ldr	r3, [pc, #36]	; (800ff44 <__swbuf_r+0xa0>)
 800ff20:	429c      	cmp	r4, r3
 800ff22:	bf08      	it	eq
 800ff24:	68ec      	ldreq	r4, [r5, #12]
 800ff26:	e7ca      	b.n	800febe <__swbuf_r+0x1a>
 800ff28:	4621      	mov	r1, r4
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f000 f81e 	bl	800ff6c <__swsetup_r>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	d0cb      	beq.n	800fecc <__swbuf_r+0x28>
 800ff34:	f04f 37ff 	mov.w	r7, #4294967295
 800ff38:	e7ea      	b.n	800ff10 <__swbuf_r+0x6c>
 800ff3a:	bf00      	nop
 800ff3c:	08012ecc 	.word	0x08012ecc
 800ff40:	08012eec 	.word	0x08012eec
 800ff44:	08012eac 	.word	0x08012eac

0800ff48 <_write_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d07      	ldr	r5, [pc, #28]	; (800ff68 <_write_r+0x20>)
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	4608      	mov	r0, r1
 800ff50:	4611      	mov	r1, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f7f2 fb18 	bl	800258c <_write>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d102      	bne.n	800ff66 <_write_r+0x1e>
 800ff60:	682b      	ldr	r3, [r5, #0]
 800ff62:	b103      	cbz	r3, 800ff66 <_write_r+0x1e>
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	20002cec 	.word	0x20002cec

0800ff6c <__swsetup_r>:
 800ff6c:	4b32      	ldr	r3, [pc, #200]	; (8010038 <__swsetup_r+0xcc>)
 800ff6e:	b570      	push	{r4, r5, r6, lr}
 800ff70:	681d      	ldr	r5, [r3, #0]
 800ff72:	4606      	mov	r6, r0
 800ff74:	460c      	mov	r4, r1
 800ff76:	b125      	cbz	r5, 800ff82 <__swsetup_r+0x16>
 800ff78:	69ab      	ldr	r3, [r5, #24]
 800ff7a:	b913      	cbnz	r3, 800ff82 <__swsetup_r+0x16>
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	f001 f807 	bl	8010f90 <__sinit>
 800ff82:	4b2e      	ldr	r3, [pc, #184]	; (801003c <__swsetup_r+0xd0>)
 800ff84:	429c      	cmp	r4, r3
 800ff86:	d10f      	bne.n	800ffa8 <__swsetup_r+0x3c>
 800ff88:	686c      	ldr	r4, [r5, #4]
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff90:	0719      	lsls	r1, r3, #28
 800ff92:	d42c      	bmi.n	800ffee <__swsetup_r+0x82>
 800ff94:	06dd      	lsls	r5, r3, #27
 800ff96:	d411      	bmi.n	800ffbc <__swsetup_r+0x50>
 800ff98:	2309      	movs	r3, #9
 800ff9a:	6033      	str	r3, [r6, #0]
 800ff9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffa0:	81a3      	strh	r3, [r4, #12]
 800ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffa6:	e03e      	b.n	8010026 <__swsetup_r+0xba>
 800ffa8:	4b25      	ldr	r3, [pc, #148]	; (8010040 <__swsetup_r+0xd4>)
 800ffaa:	429c      	cmp	r4, r3
 800ffac:	d101      	bne.n	800ffb2 <__swsetup_r+0x46>
 800ffae:	68ac      	ldr	r4, [r5, #8]
 800ffb0:	e7eb      	b.n	800ff8a <__swsetup_r+0x1e>
 800ffb2:	4b24      	ldr	r3, [pc, #144]	; (8010044 <__swsetup_r+0xd8>)
 800ffb4:	429c      	cmp	r4, r3
 800ffb6:	bf08      	it	eq
 800ffb8:	68ec      	ldreq	r4, [r5, #12]
 800ffba:	e7e6      	b.n	800ff8a <__swsetup_r+0x1e>
 800ffbc:	0758      	lsls	r0, r3, #29
 800ffbe:	d512      	bpl.n	800ffe6 <__swsetup_r+0x7a>
 800ffc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffc2:	b141      	cbz	r1, 800ffd6 <__swsetup_r+0x6a>
 800ffc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffc8:	4299      	cmp	r1, r3
 800ffca:	d002      	beq.n	800ffd2 <__swsetup_r+0x66>
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f7fe ffdb 	bl	800ef88 <_free_r>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	6363      	str	r3, [r4, #52]	; 0x34
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ffdc:	81a3      	strh	r3, [r4, #12]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	6063      	str	r3, [r4, #4]
 800ffe2:	6923      	ldr	r3, [r4, #16]
 800ffe4:	6023      	str	r3, [r4, #0]
 800ffe6:	89a3      	ldrh	r3, [r4, #12]
 800ffe8:	f043 0308 	orr.w	r3, r3, #8
 800ffec:	81a3      	strh	r3, [r4, #12]
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	b94b      	cbnz	r3, 8010006 <__swsetup_r+0x9a>
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fffc:	d003      	beq.n	8010006 <__swsetup_r+0x9a>
 800fffe:	4621      	mov	r1, r4
 8010000:	4630      	mov	r0, r6
 8010002:	f001 f8a3 	bl	801114c <__smakebuf_r>
 8010006:	89a0      	ldrh	r0, [r4, #12]
 8010008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801000c:	f010 0301 	ands.w	r3, r0, #1
 8010010:	d00a      	beq.n	8010028 <__swsetup_r+0xbc>
 8010012:	2300      	movs	r3, #0
 8010014:	60a3      	str	r3, [r4, #8]
 8010016:	6963      	ldr	r3, [r4, #20]
 8010018:	425b      	negs	r3, r3
 801001a:	61a3      	str	r3, [r4, #24]
 801001c:	6923      	ldr	r3, [r4, #16]
 801001e:	b943      	cbnz	r3, 8010032 <__swsetup_r+0xc6>
 8010020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010024:	d1ba      	bne.n	800ff9c <__swsetup_r+0x30>
 8010026:	bd70      	pop	{r4, r5, r6, pc}
 8010028:	0781      	lsls	r1, r0, #30
 801002a:	bf58      	it	pl
 801002c:	6963      	ldrpl	r3, [r4, #20]
 801002e:	60a3      	str	r3, [r4, #8]
 8010030:	e7f4      	b.n	801001c <__swsetup_r+0xb0>
 8010032:	2000      	movs	r0, #0
 8010034:	e7f7      	b.n	8010026 <__swsetup_r+0xba>
 8010036:	bf00      	nop
 8010038:	20000054 	.word	0x20000054
 801003c:	08012ecc 	.word	0x08012ecc
 8010040:	08012eec 	.word	0x08012eec
 8010044:	08012eac 	.word	0x08012eac

08010048 <_close_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4d06      	ldr	r5, [pc, #24]	; (8010064 <_close_r+0x1c>)
 801004c:	2300      	movs	r3, #0
 801004e:	4604      	mov	r4, r0
 8010050:	4608      	mov	r0, r1
 8010052:	602b      	str	r3, [r5, #0]
 8010054:	f7f3 f9a5 	bl	80033a2 <_close>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	d102      	bne.n	8010062 <_close_r+0x1a>
 801005c:	682b      	ldr	r3, [r5, #0]
 801005e:	b103      	cbz	r3, 8010062 <_close_r+0x1a>
 8010060:	6023      	str	r3, [r4, #0]
 8010062:	bd38      	pop	{r3, r4, r5, pc}
 8010064:	20002cec 	.word	0x20002cec

08010068 <quorem>:
 8010068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801006c:	6903      	ldr	r3, [r0, #16]
 801006e:	690c      	ldr	r4, [r1, #16]
 8010070:	42a3      	cmp	r3, r4
 8010072:	4607      	mov	r7, r0
 8010074:	f2c0 8081 	blt.w	801017a <quorem+0x112>
 8010078:	3c01      	subs	r4, #1
 801007a:	f101 0814 	add.w	r8, r1, #20
 801007e:	f100 0514 	add.w	r5, r0, #20
 8010082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010086:	9301      	str	r3, [sp, #4]
 8010088:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801008c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010090:	3301      	adds	r3, #1
 8010092:	429a      	cmp	r2, r3
 8010094:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010098:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801009c:	fbb2 f6f3 	udiv	r6, r2, r3
 80100a0:	d331      	bcc.n	8010106 <quorem+0x9e>
 80100a2:	f04f 0e00 	mov.w	lr, #0
 80100a6:	4640      	mov	r0, r8
 80100a8:	46ac      	mov	ip, r5
 80100aa:	46f2      	mov	sl, lr
 80100ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80100b0:	b293      	uxth	r3, r2
 80100b2:	fb06 e303 	mla	r3, r6, r3, lr
 80100b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	ebaa 0303 	sub.w	r3, sl, r3
 80100c0:	f8dc a000 	ldr.w	sl, [ip]
 80100c4:	0c12      	lsrs	r2, r2, #16
 80100c6:	fa13 f38a 	uxtah	r3, r3, sl
 80100ca:	fb06 e202 	mla	r2, r6, r2, lr
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	9b00      	ldr	r3, [sp, #0]
 80100d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80100d6:	b292      	uxth	r2, r2
 80100d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80100dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80100e4:	4581      	cmp	r9, r0
 80100e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100ea:	f84c 3b04 	str.w	r3, [ip], #4
 80100ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80100f2:	d2db      	bcs.n	80100ac <quorem+0x44>
 80100f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80100f8:	b92b      	cbnz	r3, 8010106 <quorem+0x9e>
 80100fa:	9b01      	ldr	r3, [sp, #4]
 80100fc:	3b04      	subs	r3, #4
 80100fe:	429d      	cmp	r5, r3
 8010100:	461a      	mov	r2, r3
 8010102:	d32e      	bcc.n	8010162 <quorem+0xfa>
 8010104:	613c      	str	r4, [r7, #16]
 8010106:	4638      	mov	r0, r7
 8010108:	f001 faee 	bl	80116e8 <__mcmp>
 801010c:	2800      	cmp	r0, #0
 801010e:	db24      	blt.n	801015a <quorem+0xf2>
 8010110:	3601      	adds	r6, #1
 8010112:	4628      	mov	r0, r5
 8010114:	f04f 0c00 	mov.w	ip, #0
 8010118:	f858 2b04 	ldr.w	r2, [r8], #4
 801011c:	f8d0 e000 	ldr.w	lr, [r0]
 8010120:	b293      	uxth	r3, r2
 8010122:	ebac 0303 	sub.w	r3, ip, r3
 8010126:	0c12      	lsrs	r2, r2, #16
 8010128:	fa13 f38e 	uxtah	r3, r3, lr
 801012c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010134:	b29b      	uxth	r3, r3
 8010136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801013a:	45c1      	cmp	r9, r8
 801013c:	f840 3b04 	str.w	r3, [r0], #4
 8010140:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010144:	d2e8      	bcs.n	8010118 <quorem+0xb0>
 8010146:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801014a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801014e:	b922      	cbnz	r2, 801015a <quorem+0xf2>
 8010150:	3b04      	subs	r3, #4
 8010152:	429d      	cmp	r5, r3
 8010154:	461a      	mov	r2, r3
 8010156:	d30a      	bcc.n	801016e <quorem+0x106>
 8010158:	613c      	str	r4, [r7, #16]
 801015a:	4630      	mov	r0, r6
 801015c:	b003      	add	sp, #12
 801015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010162:	6812      	ldr	r2, [r2, #0]
 8010164:	3b04      	subs	r3, #4
 8010166:	2a00      	cmp	r2, #0
 8010168:	d1cc      	bne.n	8010104 <quorem+0x9c>
 801016a:	3c01      	subs	r4, #1
 801016c:	e7c7      	b.n	80100fe <quorem+0x96>
 801016e:	6812      	ldr	r2, [r2, #0]
 8010170:	3b04      	subs	r3, #4
 8010172:	2a00      	cmp	r2, #0
 8010174:	d1f0      	bne.n	8010158 <quorem+0xf0>
 8010176:	3c01      	subs	r4, #1
 8010178:	e7eb      	b.n	8010152 <quorem+0xea>
 801017a:	2000      	movs	r0, #0
 801017c:	e7ee      	b.n	801015c <quorem+0xf4>
	...

08010180 <_dtoa_r>:
 8010180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010184:	ed2d 8b04 	vpush	{d8-d9}
 8010188:	ec57 6b10 	vmov	r6, r7, d0
 801018c:	b093      	sub	sp, #76	; 0x4c
 801018e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010194:	9106      	str	r1, [sp, #24]
 8010196:	ee10 aa10 	vmov	sl, s0
 801019a:	4604      	mov	r4, r0
 801019c:	9209      	str	r2, [sp, #36]	; 0x24
 801019e:	930c      	str	r3, [sp, #48]	; 0x30
 80101a0:	46bb      	mov	fp, r7
 80101a2:	b975      	cbnz	r5, 80101c2 <_dtoa_r+0x42>
 80101a4:	2010      	movs	r0, #16
 80101a6:	f7fe fec9 	bl	800ef3c <malloc>
 80101aa:	4602      	mov	r2, r0
 80101ac:	6260      	str	r0, [r4, #36]	; 0x24
 80101ae:	b920      	cbnz	r0, 80101ba <_dtoa_r+0x3a>
 80101b0:	4ba7      	ldr	r3, [pc, #668]	; (8010450 <_dtoa_r+0x2d0>)
 80101b2:	21ea      	movs	r1, #234	; 0xea
 80101b4:	48a7      	ldr	r0, [pc, #668]	; (8010454 <_dtoa_r+0x2d4>)
 80101b6:	f002 fa81 	bl	80126bc <__assert_func>
 80101ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101be:	6005      	str	r5, [r0, #0]
 80101c0:	60c5      	str	r5, [r0, #12]
 80101c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101c4:	6819      	ldr	r1, [r3, #0]
 80101c6:	b151      	cbz	r1, 80101de <_dtoa_r+0x5e>
 80101c8:	685a      	ldr	r2, [r3, #4]
 80101ca:	604a      	str	r2, [r1, #4]
 80101cc:	2301      	movs	r3, #1
 80101ce:	4093      	lsls	r3, r2
 80101d0:	608b      	str	r3, [r1, #8]
 80101d2:	4620      	mov	r0, r4
 80101d4:	f001 f846 	bl	8011264 <_Bfree>
 80101d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]
 80101de:	1e3b      	subs	r3, r7, #0
 80101e0:	bfaa      	itet	ge
 80101e2:	2300      	movge	r3, #0
 80101e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80101e8:	f8c8 3000 	strge.w	r3, [r8]
 80101ec:	4b9a      	ldr	r3, [pc, #616]	; (8010458 <_dtoa_r+0x2d8>)
 80101ee:	bfbc      	itt	lt
 80101f0:	2201      	movlt	r2, #1
 80101f2:	f8c8 2000 	strlt.w	r2, [r8]
 80101f6:	ea33 030b 	bics.w	r3, r3, fp
 80101fa:	d11b      	bne.n	8010234 <_dtoa_r+0xb4>
 80101fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8010202:	6013      	str	r3, [r2, #0]
 8010204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010208:	4333      	orrs	r3, r6
 801020a:	f000 8592 	beq.w	8010d32 <_dtoa_r+0xbb2>
 801020e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010210:	b963      	cbnz	r3, 801022c <_dtoa_r+0xac>
 8010212:	4b92      	ldr	r3, [pc, #584]	; (801045c <_dtoa_r+0x2dc>)
 8010214:	e022      	b.n	801025c <_dtoa_r+0xdc>
 8010216:	4b92      	ldr	r3, [pc, #584]	; (8010460 <_dtoa_r+0x2e0>)
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	3308      	adds	r3, #8
 801021c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	9801      	ldr	r0, [sp, #4]
 8010222:	b013      	add	sp, #76	; 0x4c
 8010224:	ecbd 8b04 	vpop	{d8-d9}
 8010228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022c:	4b8b      	ldr	r3, [pc, #556]	; (801045c <_dtoa_r+0x2dc>)
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	3303      	adds	r3, #3
 8010232:	e7f3      	b.n	801021c <_dtoa_r+0x9c>
 8010234:	2200      	movs	r2, #0
 8010236:	2300      	movs	r3, #0
 8010238:	4650      	mov	r0, sl
 801023a:	4659      	mov	r1, fp
 801023c:	f7f0 fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 8010240:	ec4b ab19 	vmov	d9, sl, fp
 8010244:	4680      	mov	r8, r0
 8010246:	b158      	cbz	r0, 8010260 <_dtoa_r+0xe0>
 8010248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801024a:	2301      	movs	r3, #1
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 856b 	beq.w	8010d2c <_dtoa_r+0xbac>
 8010256:	4883      	ldr	r0, [pc, #524]	; (8010464 <_dtoa_r+0x2e4>)
 8010258:	6018      	str	r0, [r3, #0]
 801025a:	1e43      	subs	r3, r0, #1
 801025c:	9301      	str	r3, [sp, #4]
 801025e:	e7df      	b.n	8010220 <_dtoa_r+0xa0>
 8010260:	ec4b ab10 	vmov	d0, sl, fp
 8010264:	aa10      	add	r2, sp, #64	; 0x40
 8010266:	a911      	add	r1, sp, #68	; 0x44
 8010268:	4620      	mov	r0, r4
 801026a:	f001 fae3 	bl	8011834 <__d2b>
 801026e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010272:	ee08 0a10 	vmov	s16, r0
 8010276:	2d00      	cmp	r5, #0
 8010278:	f000 8084 	beq.w	8010384 <_dtoa_r+0x204>
 801027c:	ee19 3a90 	vmov	r3, s19
 8010280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010284:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010288:	4656      	mov	r6, sl
 801028a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801028e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010292:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010296:	4b74      	ldr	r3, [pc, #464]	; (8010468 <_dtoa_r+0x2e8>)
 8010298:	2200      	movs	r2, #0
 801029a:	4630      	mov	r0, r6
 801029c:	4639      	mov	r1, r7
 801029e:	f7f0 f803 	bl	80002a8 <__aeabi_dsub>
 80102a2:	a365      	add	r3, pc, #404	; (adr r3, 8010438 <_dtoa_r+0x2b8>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 f9b6 	bl	8000618 <__aeabi_dmul>
 80102ac:	a364      	add	r3, pc, #400	; (adr r3, 8010440 <_dtoa_r+0x2c0>)
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f7ef fffb 	bl	80002ac <__adddf3>
 80102b6:	4606      	mov	r6, r0
 80102b8:	4628      	mov	r0, r5
 80102ba:	460f      	mov	r7, r1
 80102bc:	f7f0 f942 	bl	8000544 <__aeabi_i2d>
 80102c0:	a361      	add	r3, pc, #388	; (adr r3, 8010448 <_dtoa_r+0x2c8>)
 80102c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102c6:	f7f0 f9a7 	bl	8000618 <__aeabi_dmul>
 80102ca:	4602      	mov	r2, r0
 80102cc:	460b      	mov	r3, r1
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	f7ef ffeb 	bl	80002ac <__adddf3>
 80102d6:	4606      	mov	r6, r0
 80102d8:	460f      	mov	r7, r1
 80102da:	f7f0 fc4d 	bl	8000b78 <__aeabi_d2iz>
 80102de:	2200      	movs	r2, #0
 80102e0:	9000      	str	r0, [sp, #0]
 80102e2:	2300      	movs	r3, #0
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	f7f0 fc08 	bl	8000afc <__aeabi_dcmplt>
 80102ec:	b150      	cbz	r0, 8010304 <_dtoa_r+0x184>
 80102ee:	9800      	ldr	r0, [sp, #0]
 80102f0:	f7f0 f928 	bl	8000544 <__aeabi_i2d>
 80102f4:	4632      	mov	r2, r6
 80102f6:	463b      	mov	r3, r7
 80102f8:	f7f0 fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80102fc:	b910      	cbnz	r0, 8010304 <_dtoa_r+0x184>
 80102fe:	9b00      	ldr	r3, [sp, #0]
 8010300:	3b01      	subs	r3, #1
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	9b00      	ldr	r3, [sp, #0]
 8010306:	2b16      	cmp	r3, #22
 8010308:	d85a      	bhi.n	80103c0 <_dtoa_r+0x240>
 801030a:	9a00      	ldr	r2, [sp, #0]
 801030c:	4b57      	ldr	r3, [pc, #348]	; (801046c <_dtoa_r+0x2ec>)
 801030e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010316:	ec51 0b19 	vmov	r0, r1, d9
 801031a:	f7f0 fbef 	bl	8000afc <__aeabi_dcmplt>
 801031e:	2800      	cmp	r0, #0
 8010320:	d050      	beq.n	80103c4 <_dtoa_r+0x244>
 8010322:	9b00      	ldr	r3, [sp, #0]
 8010324:	3b01      	subs	r3, #1
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	2300      	movs	r3, #0
 801032a:	930b      	str	r3, [sp, #44]	; 0x2c
 801032c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801032e:	1b5d      	subs	r5, r3, r5
 8010330:	1e6b      	subs	r3, r5, #1
 8010332:	9305      	str	r3, [sp, #20]
 8010334:	bf45      	ittet	mi
 8010336:	f1c5 0301 	rsbmi	r3, r5, #1
 801033a:	9304      	strmi	r3, [sp, #16]
 801033c:	2300      	movpl	r3, #0
 801033e:	2300      	movmi	r3, #0
 8010340:	bf4c      	ite	mi
 8010342:	9305      	strmi	r3, [sp, #20]
 8010344:	9304      	strpl	r3, [sp, #16]
 8010346:	9b00      	ldr	r3, [sp, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	db3d      	blt.n	80103c8 <_dtoa_r+0x248>
 801034c:	9b05      	ldr	r3, [sp, #20]
 801034e:	9a00      	ldr	r2, [sp, #0]
 8010350:	920a      	str	r2, [sp, #40]	; 0x28
 8010352:	4413      	add	r3, r2
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	2300      	movs	r3, #0
 8010358:	9307      	str	r3, [sp, #28]
 801035a:	9b06      	ldr	r3, [sp, #24]
 801035c:	2b09      	cmp	r3, #9
 801035e:	f200 8089 	bhi.w	8010474 <_dtoa_r+0x2f4>
 8010362:	2b05      	cmp	r3, #5
 8010364:	bfc4      	itt	gt
 8010366:	3b04      	subgt	r3, #4
 8010368:	9306      	strgt	r3, [sp, #24]
 801036a:	9b06      	ldr	r3, [sp, #24]
 801036c:	f1a3 0302 	sub.w	r3, r3, #2
 8010370:	bfcc      	ite	gt
 8010372:	2500      	movgt	r5, #0
 8010374:	2501      	movle	r5, #1
 8010376:	2b03      	cmp	r3, #3
 8010378:	f200 8087 	bhi.w	801048a <_dtoa_r+0x30a>
 801037c:	e8df f003 	tbb	[pc, r3]
 8010380:	59383a2d 	.word	0x59383a2d
 8010384:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010388:	441d      	add	r5, r3
 801038a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801038e:	2b20      	cmp	r3, #32
 8010390:	bfc1      	itttt	gt
 8010392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010396:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801039a:	fa0b f303 	lslgt.w	r3, fp, r3
 801039e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80103a2:	bfda      	itte	le
 80103a4:	f1c3 0320 	rsble	r3, r3, #32
 80103a8:	fa06 f003 	lslle.w	r0, r6, r3
 80103ac:	4318      	orrgt	r0, r3
 80103ae:	f7f0 f8b9 	bl	8000524 <__aeabi_ui2d>
 80103b2:	2301      	movs	r3, #1
 80103b4:	4606      	mov	r6, r0
 80103b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80103ba:	3d01      	subs	r5, #1
 80103bc:	930e      	str	r3, [sp, #56]	; 0x38
 80103be:	e76a      	b.n	8010296 <_dtoa_r+0x116>
 80103c0:	2301      	movs	r3, #1
 80103c2:	e7b2      	b.n	801032a <_dtoa_r+0x1aa>
 80103c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80103c6:	e7b1      	b.n	801032c <_dtoa_r+0x1ac>
 80103c8:	9b04      	ldr	r3, [sp, #16]
 80103ca:	9a00      	ldr	r2, [sp, #0]
 80103cc:	1a9b      	subs	r3, r3, r2
 80103ce:	9304      	str	r3, [sp, #16]
 80103d0:	4253      	negs	r3, r2
 80103d2:	9307      	str	r3, [sp, #28]
 80103d4:	2300      	movs	r3, #0
 80103d6:	930a      	str	r3, [sp, #40]	; 0x28
 80103d8:	e7bf      	b.n	801035a <_dtoa_r+0x1da>
 80103da:	2300      	movs	r3, #0
 80103dc:	9308      	str	r3, [sp, #32]
 80103de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	dc55      	bgt.n	8010490 <_dtoa_r+0x310>
 80103e4:	2301      	movs	r3, #1
 80103e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80103ea:	461a      	mov	r2, r3
 80103ec:	9209      	str	r2, [sp, #36]	; 0x24
 80103ee:	e00c      	b.n	801040a <_dtoa_r+0x28a>
 80103f0:	2301      	movs	r3, #1
 80103f2:	e7f3      	b.n	80103dc <_dtoa_r+0x25c>
 80103f4:	2300      	movs	r3, #0
 80103f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103f8:	9308      	str	r3, [sp, #32]
 80103fa:	9b00      	ldr	r3, [sp, #0]
 80103fc:	4413      	add	r3, r2
 80103fe:	9302      	str	r3, [sp, #8]
 8010400:	3301      	adds	r3, #1
 8010402:	2b01      	cmp	r3, #1
 8010404:	9303      	str	r3, [sp, #12]
 8010406:	bfb8      	it	lt
 8010408:	2301      	movlt	r3, #1
 801040a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801040c:	2200      	movs	r2, #0
 801040e:	6042      	str	r2, [r0, #4]
 8010410:	2204      	movs	r2, #4
 8010412:	f102 0614 	add.w	r6, r2, #20
 8010416:	429e      	cmp	r6, r3
 8010418:	6841      	ldr	r1, [r0, #4]
 801041a:	d93d      	bls.n	8010498 <_dtoa_r+0x318>
 801041c:	4620      	mov	r0, r4
 801041e:	f000 fee1 	bl	80111e4 <_Balloc>
 8010422:	9001      	str	r0, [sp, #4]
 8010424:	2800      	cmp	r0, #0
 8010426:	d13b      	bne.n	80104a0 <_dtoa_r+0x320>
 8010428:	4b11      	ldr	r3, [pc, #68]	; (8010470 <_dtoa_r+0x2f0>)
 801042a:	4602      	mov	r2, r0
 801042c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010430:	e6c0      	b.n	80101b4 <_dtoa_r+0x34>
 8010432:	2301      	movs	r3, #1
 8010434:	e7df      	b.n	80103f6 <_dtoa_r+0x276>
 8010436:	bf00      	nop
 8010438:	636f4361 	.word	0x636f4361
 801043c:	3fd287a7 	.word	0x3fd287a7
 8010440:	8b60c8b3 	.word	0x8b60c8b3
 8010444:	3fc68a28 	.word	0x3fc68a28
 8010448:	509f79fb 	.word	0x509f79fb
 801044c:	3fd34413 	.word	0x3fd34413
 8010450:	08012e28 	.word	0x08012e28
 8010454:	08012e3f 	.word	0x08012e3f
 8010458:	7ff00000 	.word	0x7ff00000
 801045c:	08012e24 	.word	0x08012e24
 8010460:	08012e1b 	.word	0x08012e1b
 8010464:	0801307a 	.word	0x0801307a
 8010468:	3ff80000 	.word	0x3ff80000
 801046c:	08012f90 	.word	0x08012f90
 8010470:	08012e9a 	.word	0x08012e9a
 8010474:	2501      	movs	r5, #1
 8010476:	2300      	movs	r3, #0
 8010478:	9306      	str	r3, [sp, #24]
 801047a:	9508      	str	r5, [sp, #32]
 801047c:	f04f 33ff 	mov.w	r3, #4294967295
 8010480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010484:	2200      	movs	r2, #0
 8010486:	2312      	movs	r3, #18
 8010488:	e7b0      	b.n	80103ec <_dtoa_r+0x26c>
 801048a:	2301      	movs	r3, #1
 801048c:	9308      	str	r3, [sp, #32]
 801048e:	e7f5      	b.n	801047c <_dtoa_r+0x2fc>
 8010490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010492:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010496:	e7b8      	b.n	801040a <_dtoa_r+0x28a>
 8010498:	3101      	adds	r1, #1
 801049a:	6041      	str	r1, [r0, #4]
 801049c:	0052      	lsls	r2, r2, #1
 801049e:	e7b8      	b.n	8010412 <_dtoa_r+0x292>
 80104a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104a2:	9a01      	ldr	r2, [sp, #4]
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	9b03      	ldr	r3, [sp, #12]
 80104a8:	2b0e      	cmp	r3, #14
 80104aa:	f200 809d 	bhi.w	80105e8 <_dtoa_r+0x468>
 80104ae:	2d00      	cmp	r5, #0
 80104b0:	f000 809a 	beq.w	80105e8 <_dtoa_r+0x468>
 80104b4:	9b00      	ldr	r3, [sp, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	dd32      	ble.n	8010520 <_dtoa_r+0x3a0>
 80104ba:	4ab7      	ldr	r2, [pc, #732]	; (8010798 <_dtoa_r+0x618>)
 80104bc:	f003 030f 	and.w	r3, r3, #15
 80104c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80104c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80104c8:	9b00      	ldr	r3, [sp, #0]
 80104ca:	05d8      	lsls	r0, r3, #23
 80104cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80104d0:	d516      	bpl.n	8010500 <_dtoa_r+0x380>
 80104d2:	4bb2      	ldr	r3, [pc, #712]	; (801079c <_dtoa_r+0x61c>)
 80104d4:	ec51 0b19 	vmov	r0, r1, d9
 80104d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104dc:	f7f0 f9c6 	bl	800086c <__aeabi_ddiv>
 80104e0:	f007 070f 	and.w	r7, r7, #15
 80104e4:	4682      	mov	sl, r0
 80104e6:	468b      	mov	fp, r1
 80104e8:	2503      	movs	r5, #3
 80104ea:	4eac      	ldr	r6, [pc, #688]	; (801079c <_dtoa_r+0x61c>)
 80104ec:	b957      	cbnz	r7, 8010504 <_dtoa_r+0x384>
 80104ee:	4642      	mov	r2, r8
 80104f0:	464b      	mov	r3, r9
 80104f2:	4650      	mov	r0, sl
 80104f4:	4659      	mov	r1, fp
 80104f6:	f7f0 f9b9 	bl	800086c <__aeabi_ddiv>
 80104fa:	4682      	mov	sl, r0
 80104fc:	468b      	mov	fp, r1
 80104fe:	e028      	b.n	8010552 <_dtoa_r+0x3d2>
 8010500:	2502      	movs	r5, #2
 8010502:	e7f2      	b.n	80104ea <_dtoa_r+0x36a>
 8010504:	07f9      	lsls	r1, r7, #31
 8010506:	d508      	bpl.n	801051a <_dtoa_r+0x39a>
 8010508:	4640      	mov	r0, r8
 801050a:	4649      	mov	r1, r9
 801050c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010510:	f7f0 f882 	bl	8000618 <__aeabi_dmul>
 8010514:	3501      	adds	r5, #1
 8010516:	4680      	mov	r8, r0
 8010518:	4689      	mov	r9, r1
 801051a:	107f      	asrs	r7, r7, #1
 801051c:	3608      	adds	r6, #8
 801051e:	e7e5      	b.n	80104ec <_dtoa_r+0x36c>
 8010520:	f000 809b 	beq.w	801065a <_dtoa_r+0x4da>
 8010524:	9b00      	ldr	r3, [sp, #0]
 8010526:	4f9d      	ldr	r7, [pc, #628]	; (801079c <_dtoa_r+0x61c>)
 8010528:	425e      	negs	r6, r3
 801052a:	4b9b      	ldr	r3, [pc, #620]	; (8010798 <_dtoa_r+0x618>)
 801052c:	f006 020f 	and.w	r2, r6, #15
 8010530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	ec51 0b19 	vmov	r0, r1, d9
 801053c:	f7f0 f86c 	bl	8000618 <__aeabi_dmul>
 8010540:	1136      	asrs	r6, r6, #4
 8010542:	4682      	mov	sl, r0
 8010544:	468b      	mov	fp, r1
 8010546:	2300      	movs	r3, #0
 8010548:	2502      	movs	r5, #2
 801054a:	2e00      	cmp	r6, #0
 801054c:	d17a      	bne.n	8010644 <_dtoa_r+0x4c4>
 801054e:	2b00      	cmp	r3, #0
 8010550:	d1d3      	bne.n	80104fa <_dtoa_r+0x37a>
 8010552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010554:	2b00      	cmp	r3, #0
 8010556:	f000 8082 	beq.w	801065e <_dtoa_r+0x4de>
 801055a:	4b91      	ldr	r3, [pc, #580]	; (80107a0 <_dtoa_r+0x620>)
 801055c:	2200      	movs	r2, #0
 801055e:	4650      	mov	r0, sl
 8010560:	4659      	mov	r1, fp
 8010562:	f7f0 facb 	bl	8000afc <__aeabi_dcmplt>
 8010566:	2800      	cmp	r0, #0
 8010568:	d079      	beq.n	801065e <_dtoa_r+0x4de>
 801056a:	9b03      	ldr	r3, [sp, #12]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d076      	beq.n	801065e <_dtoa_r+0x4de>
 8010570:	9b02      	ldr	r3, [sp, #8]
 8010572:	2b00      	cmp	r3, #0
 8010574:	dd36      	ble.n	80105e4 <_dtoa_r+0x464>
 8010576:	9b00      	ldr	r3, [sp, #0]
 8010578:	4650      	mov	r0, sl
 801057a:	4659      	mov	r1, fp
 801057c:	1e5f      	subs	r7, r3, #1
 801057e:	2200      	movs	r2, #0
 8010580:	4b88      	ldr	r3, [pc, #544]	; (80107a4 <_dtoa_r+0x624>)
 8010582:	f7f0 f849 	bl	8000618 <__aeabi_dmul>
 8010586:	9e02      	ldr	r6, [sp, #8]
 8010588:	4682      	mov	sl, r0
 801058a:	468b      	mov	fp, r1
 801058c:	3501      	adds	r5, #1
 801058e:	4628      	mov	r0, r5
 8010590:	f7ef ffd8 	bl	8000544 <__aeabi_i2d>
 8010594:	4652      	mov	r2, sl
 8010596:	465b      	mov	r3, fp
 8010598:	f7f0 f83e 	bl	8000618 <__aeabi_dmul>
 801059c:	4b82      	ldr	r3, [pc, #520]	; (80107a8 <_dtoa_r+0x628>)
 801059e:	2200      	movs	r2, #0
 80105a0:	f7ef fe84 	bl	80002ac <__adddf3>
 80105a4:	46d0      	mov	r8, sl
 80105a6:	46d9      	mov	r9, fp
 80105a8:	4682      	mov	sl, r0
 80105aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80105ae:	2e00      	cmp	r6, #0
 80105b0:	d158      	bne.n	8010664 <_dtoa_r+0x4e4>
 80105b2:	4b7e      	ldr	r3, [pc, #504]	; (80107ac <_dtoa_r+0x62c>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	4640      	mov	r0, r8
 80105b8:	4649      	mov	r1, r9
 80105ba:	f7ef fe75 	bl	80002a8 <__aeabi_dsub>
 80105be:	4652      	mov	r2, sl
 80105c0:	465b      	mov	r3, fp
 80105c2:	4680      	mov	r8, r0
 80105c4:	4689      	mov	r9, r1
 80105c6:	f7f0 fab7 	bl	8000b38 <__aeabi_dcmpgt>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	f040 8295 	bne.w	8010afa <_dtoa_r+0x97a>
 80105d0:	4652      	mov	r2, sl
 80105d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80105d6:	4640      	mov	r0, r8
 80105d8:	4649      	mov	r1, r9
 80105da:	f7f0 fa8f 	bl	8000afc <__aeabi_dcmplt>
 80105de:	2800      	cmp	r0, #0
 80105e0:	f040 8289 	bne.w	8010af6 <_dtoa_r+0x976>
 80105e4:	ec5b ab19 	vmov	sl, fp, d9
 80105e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f2c0 8148 	blt.w	8010880 <_dtoa_r+0x700>
 80105f0:	9a00      	ldr	r2, [sp, #0]
 80105f2:	2a0e      	cmp	r2, #14
 80105f4:	f300 8144 	bgt.w	8010880 <_dtoa_r+0x700>
 80105f8:	4b67      	ldr	r3, [pc, #412]	; (8010798 <_dtoa_r+0x618>)
 80105fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010604:	2b00      	cmp	r3, #0
 8010606:	f280 80d5 	bge.w	80107b4 <_dtoa_r+0x634>
 801060a:	9b03      	ldr	r3, [sp, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	f300 80d1 	bgt.w	80107b4 <_dtoa_r+0x634>
 8010612:	f040 826f 	bne.w	8010af4 <_dtoa_r+0x974>
 8010616:	4b65      	ldr	r3, [pc, #404]	; (80107ac <_dtoa_r+0x62c>)
 8010618:	2200      	movs	r2, #0
 801061a:	4640      	mov	r0, r8
 801061c:	4649      	mov	r1, r9
 801061e:	f7ef fffb 	bl	8000618 <__aeabi_dmul>
 8010622:	4652      	mov	r2, sl
 8010624:	465b      	mov	r3, fp
 8010626:	f7f0 fa7d 	bl	8000b24 <__aeabi_dcmpge>
 801062a:	9e03      	ldr	r6, [sp, #12]
 801062c:	4637      	mov	r7, r6
 801062e:	2800      	cmp	r0, #0
 8010630:	f040 8245 	bne.w	8010abe <_dtoa_r+0x93e>
 8010634:	9d01      	ldr	r5, [sp, #4]
 8010636:	2331      	movs	r3, #49	; 0x31
 8010638:	f805 3b01 	strb.w	r3, [r5], #1
 801063c:	9b00      	ldr	r3, [sp, #0]
 801063e:	3301      	adds	r3, #1
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	e240      	b.n	8010ac6 <_dtoa_r+0x946>
 8010644:	07f2      	lsls	r2, r6, #31
 8010646:	d505      	bpl.n	8010654 <_dtoa_r+0x4d4>
 8010648:	e9d7 2300 	ldrd	r2, r3, [r7]
 801064c:	f7ef ffe4 	bl	8000618 <__aeabi_dmul>
 8010650:	3501      	adds	r5, #1
 8010652:	2301      	movs	r3, #1
 8010654:	1076      	asrs	r6, r6, #1
 8010656:	3708      	adds	r7, #8
 8010658:	e777      	b.n	801054a <_dtoa_r+0x3ca>
 801065a:	2502      	movs	r5, #2
 801065c:	e779      	b.n	8010552 <_dtoa_r+0x3d2>
 801065e:	9f00      	ldr	r7, [sp, #0]
 8010660:	9e03      	ldr	r6, [sp, #12]
 8010662:	e794      	b.n	801058e <_dtoa_r+0x40e>
 8010664:	9901      	ldr	r1, [sp, #4]
 8010666:	4b4c      	ldr	r3, [pc, #304]	; (8010798 <_dtoa_r+0x618>)
 8010668:	4431      	add	r1, r6
 801066a:	910d      	str	r1, [sp, #52]	; 0x34
 801066c:	9908      	ldr	r1, [sp, #32]
 801066e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010676:	2900      	cmp	r1, #0
 8010678:	d043      	beq.n	8010702 <_dtoa_r+0x582>
 801067a:	494d      	ldr	r1, [pc, #308]	; (80107b0 <_dtoa_r+0x630>)
 801067c:	2000      	movs	r0, #0
 801067e:	f7f0 f8f5 	bl	800086c <__aeabi_ddiv>
 8010682:	4652      	mov	r2, sl
 8010684:	465b      	mov	r3, fp
 8010686:	f7ef fe0f 	bl	80002a8 <__aeabi_dsub>
 801068a:	9d01      	ldr	r5, [sp, #4]
 801068c:	4682      	mov	sl, r0
 801068e:	468b      	mov	fp, r1
 8010690:	4649      	mov	r1, r9
 8010692:	4640      	mov	r0, r8
 8010694:	f7f0 fa70 	bl	8000b78 <__aeabi_d2iz>
 8010698:	4606      	mov	r6, r0
 801069a:	f7ef ff53 	bl	8000544 <__aeabi_i2d>
 801069e:	4602      	mov	r2, r0
 80106a0:	460b      	mov	r3, r1
 80106a2:	4640      	mov	r0, r8
 80106a4:	4649      	mov	r1, r9
 80106a6:	f7ef fdff 	bl	80002a8 <__aeabi_dsub>
 80106aa:	3630      	adds	r6, #48	; 0x30
 80106ac:	f805 6b01 	strb.w	r6, [r5], #1
 80106b0:	4652      	mov	r2, sl
 80106b2:	465b      	mov	r3, fp
 80106b4:	4680      	mov	r8, r0
 80106b6:	4689      	mov	r9, r1
 80106b8:	f7f0 fa20 	bl	8000afc <__aeabi_dcmplt>
 80106bc:	2800      	cmp	r0, #0
 80106be:	d163      	bne.n	8010788 <_dtoa_r+0x608>
 80106c0:	4642      	mov	r2, r8
 80106c2:	464b      	mov	r3, r9
 80106c4:	4936      	ldr	r1, [pc, #216]	; (80107a0 <_dtoa_r+0x620>)
 80106c6:	2000      	movs	r0, #0
 80106c8:	f7ef fdee 	bl	80002a8 <__aeabi_dsub>
 80106cc:	4652      	mov	r2, sl
 80106ce:	465b      	mov	r3, fp
 80106d0:	f7f0 fa14 	bl	8000afc <__aeabi_dcmplt>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	f040 80b5 	bne.w	8010844 <_dtoa_r+0x6c4>
 80106da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106dc:	429d      	cmp	r5, r3
 80106de:	d081      	beq.n	80105e4 <_dtoa_r+0x464>
 80106e0:	4b30      	ldr	r3, [pc, #192]	; (80107a4 <_dtoa_r+0x624>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	4650      	mov	r0, sl
 80106e6:	4659      	mov	r1, fp
 80106e8:	f7ef ff96 	bl	8000618 <__aeabi_dmul>
 80106ec:	4b2d      	ldr	r3, [pc, #180]	; (80107a4 <_dtoa_r+0x624>)
 80106ee:	4682      	mov	sl, r0
 80106f0:	468b      	mov	fp, r1
 80106f2:	4640      	mov	r0, r8
 80106f4:	4649      	mov	r1, r9
 80106f6:	2200      	movs	r2, #0
 80106f8:	f7ef ff8e 	bl	8000618 <__aeabi_dmul>
 80106fc:	4680      	mov	r8, r0
 80106fe:	4689      	mov	r9, r1
 8010700:	e7c6      	b.n	8010690 <_dtoa_r+0x510>
 8010702:	4650      	mov	r0, sl
 8010704:	4659      	mov	r1, fp
 8010706:	f7ef ff87 	bl	8000618 <__aeabi_dmul>
 801070a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801070c:	9d01      	ldr	r5, [sp, #4]
 801070e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010710:	4682      	mov	sl, r0
 8010712:	468b      	mov	fp, r1
 8010714:	4649      	mov	r1, r9
 8010716:	4640      	mov	r0, r8
 8010718:	f7f0 fa2e 	bl	8000b78 <__aeabi_d2iz>
 801071c:	4606      	mov	r6, r0
 801071e:	f7ef ff11 	bl	8000544 <__aeabi_i2d>
 8010722:	3630      	adds	r6, #48	; 0x30
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4640      	mov	r0, r8
 801072a:	4649      	mov	r1, r9
 801072c:	f7ef fdbc 	bl	80002a8 <__aeabi_dsub>
 8010730:	f805 6b01 	strb.w	r6, [r5], #1
 8010734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010736:	429d      	cmp	r5, r3
 8010738:	4680      	mov	r8, r0
 801073a:	4689      	mov	r9, r1
 801073c:	f04f 0200 	mov.w	r2, #0
 8010740:	d124      	bne.n	801078c <_dtoa_r+0x60c>
 8010742:	4b1b      	ldr	r3, [pc, #108]	; (80107b0 <_dtoa_r+0x630>)
 8010744:	4650      	mov	r0, sl
 8010746:	4659      	mov	r1, fp
 8010748:	f7ef fdb0 	bl	80002ac <__adddf3>
 801074c:	4602      	mov	r2, r0
 801074e:	460b      	mov	r3, r1
 8010750:	4640      	mov	r0, r8
 8010752:	4649      	mov	r1, r9
 8010754:	f7f0 f9f0 	bl	8000b38 <__aeabi_dcmpgt>
 8010758:	2800      	cmp	r0, #0
 801075a:	d173      	bne.n	8010844 <_dtoa_r+0x6c4>
 801075c:	4652      	mov	r2, sl
 801075e:	465b      	mov	r3, fp
 8010760:	4913      	ldr	r1, [pc, #76]	; (80107b0 <_dtoa_r+0x630>)
 8010762:	2000      	movs	r0, #0
 8010764:	f7ef fda0 	bl	80002a8 <__aeabi_dsub>
 8010768:	4602      	mov	r2, r0
 801076a:	460b      	mov	r3, r1
 801076c:	4640      	mov	r0, r8
 801076e:	4649      	mov	r1, r9
 8010770:	f7f0 f9c4 	bl	8000afc <__aeabi_dcmplt>
 8010774:	2800      	cmp	r0, #0
 8010776:	f43f af35 	beq.w	80105e4 <_dtoa_r+0x464>
 801077a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801077c:	1e6b      	subs	r3, r5, #1
 801077e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010784:	2b30      	cmp	r3, #48	; 0x30
 8010786:	d0f8      	beq.n	801077a <_dtoa_r+0x5fa>
 8010788:	9700      	str	r7, [sp, #0]
 801078a:	e049      	b.n	8010820 <_dtoa_r+0x6a0>
 801078c:	4b05      	ldr	r3, [pc, #20]	; (80107a4 <_dtoa_r+0x624>)
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	4680      	mov	r8, r0
 8010794:	4689      	mov	r9, r1
 8010796:	e7bd      	b.n	8010714 <_dtoa_r+0x594>
 8010798:	08012f90 	.word	0x08012f90
 801079c:	08012f68 	.word	0x08012f68
 80107a0:	3ff00000 	.word	0x3ff00000
 80107a4:	40240000 	.word	0x40240000
 80107a8:	401c0000 	.word	0x401c0000
 80107ac:	40140000 	.word	0x40140000
 80107b0:	3fe00000 	.word	0x3fe00000
 80107b4:	9d01      	ldr	r5, [sp, #4]
 80107b6:	4656      	mov	r6, sl
 80107b8:	465f      	mov	r7, fp
 80107ba:	4642      	mov	r2, r8
 80107bc:	464b      	mov	r3, r9
 80107be:	4630      	mov	r0, r6
 80107c0:	4639      	mov	r1, r7
 80107c2:	f7f0 f853 	bl	800086c <__aeabi_ddiv>
 80107c6:	f7f0 f9d7 	bl	8000b78 <__aeabi_d2iz>
 80107ca:	4682      	mov	sl, r0
 80107cc:	f7ef feba 	bl	8000544 <__aeabi_i2d>
 80107d0:	4642      	mov	r2, r8
 80107d2:	464b      	mov	r3, r9
 80107d4:	f7ef ff20 	bl	8000618 <__aeabi_dmul>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4630      	mov	r0, r6
 80107de:	4639      	mov	r1, r7
 80107e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80107e4:	f7ef fd60 	bl	80002a8 <__aeabi_dsub>
 80107e8:	f805 6b01 	strb.w	r6, [r5], #1
 80107ec:	9e01      	ldr	r6, [sp, #4]
 80107ee:	9f03      	ldr	r7, [sp, #12]
 80107f0:	1bae      	subs	r6, r5, r6
 80107f2:	42b7      	cmp	r7, r6
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	d135      	bne.n	8010866 <_dtoa_r+0x6e6>
 80107fa:	f7ef fd57 	bl	80002ac <__adddf3>
 80107fe:	4642      	mov	r2, r8
 8010800:	464b      	mov	r3, r9
 8010802:	4606      	mov	r6, r0
 8010804:	460f      	mov	r7, r1
 8010806:	f7f0 f997 	bl	8000b38 <__aeabi_dcmpgt>
 801080a:	b9d0      	cbnz	r0, 8010842 <_dtoa_r+0x6c2>
 801080c:	4642      	mov	r2, r8
 801080e:	464b      	mov	r3, r9
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7f0 f968 	bl	8000ae8 <__aeabi_dcmpeq>
 8010818:	b110      	cbz	r0, 8010820 <_dtoa_r+0x6a0>
 801081a:	f01a 0f01 	tst.w	sl, #1
 801081e:	d110      	bne.n	8010842 <_dtoa_r+0x6c2>
 8010820:	4620      	mov	r0, r4
 8010822:	ee18 1a10 	vmov	r1, s16
 8010826:	f000 fd1d 	bl	8011264 <_Bfree>
 801082a:	2300      	movs	r3, #0
 801082c:	9800      	ldr	r0, [sp, #0]
 801082e:	702b      	strb	r3, [r5, #0]
 8010830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010832:	3001      	adds	r0, #1
 8010834:	6018      	str	r0, [r3, #0]
 8010836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010838:	2b00      	cmp	r3, #0
 801083a:	f43f acf1 	beq.w	8010220 <_dtoa_r+0xa0>
 801083e:	601d      	str	r5, [r3, #0]
 8010840:	e4ee      	b.n	8010220 <_dtoa_r+0xa0>
 8010842:	9f00      	ldr	r7, [sp, #0]
 8010844:	462b      	mov	r3, r5
 8010846:	461d      	mov	r5, r3
 8010848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801084c:	2a39      	cmp	r2, #57	; 0x39
 801084e:	d106      	bne.n	801085e <_dtoa_r+0x6de>
 8010850:	9a01      	ldr	r2, [sp, #4]
 8010852:	429a      	cmp	r2, r3
 8010854:	d1f7      	bne.n	8010846 <_dtoa_r+0x6c6>
 8010856:	9901      	ldr	r1, [sp, #4]
 8010858:	2230      	movs	r2, #48	; 0x30
 801085a:	3701      	adds	r7, #1
 801085c:	700a      	strb	r2, [r1, #0]
 801085e:	781a      	ldrb	r2, [r3, #0]
 8010860:	3201      	adds	r2, #1
 8010862:	701a      	strb	r2, [r3, #0]
 8010864:	e790      	b.n	8010788 <_dtoa_r+0x608>
 8010866:	4ba6      	ldr	r3, [pc, #664]	; (8010b00 <_dtoa_r+0x980>)
 8010868:	2200      	movs	r2, #0
 801086a:	f7ef fed5 	bl	8000618 <__aeabi_dmul>
 801086e:	2200      	movs	r2, #0
 8010870:	2300      	movs	r3, #0
 8010872:	4606      	mov	r6, r0
 8010874:	460f      	mov	r7, r1
 8010876:	f7f0 f937 	bl	8000ae8 <__aeabi_dcmpeq>
 801087a:	2800      	cmp	r0, #0
 801087c:	d09d      	beq.n	80107ba <_dtoa_r+0x63a>
 801087e:	e7cf      	b.n	8010820 <_dtoa_r+0x6a0>
 8010880:	9a08      	ldr	r2, [sp, #32]
 8010882:	2a00      	cmp	r2, #0
 8010884:	f000 80d7 	beq.w	8010a36 <_dtoa_r+0x8b6>
 8010888:	9a06      	ldr	r2, [sp, #24]
 801088a:	2a01      	cmp	r2, #1
 801088c:	f300 80ba 	bgt.w	8010a04 <_dtoa_r+0x884>
 8010890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010892:	2a00      	cmp	r2, #0
 8010894:	f000 80b2 	beq.w	80109fc <_dtoa_r+0x87c>
 8010898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801089c:	9e07      	ldr	r6, [sp, #28]
 801089e:	9d04      	ldr	r5, [sp, #16]
 80108a0:	9a04      	ldr	r2, [sp, #16]
 80108a2:	441a      	add	r2, r3
 80108a4:	9204      	str	r2, [sp, #16]
 80108a6:	9a05      	ldr	r2, [sp, #20]
 80108a8:	2101      	movs	r1, #1
 80108aa:	441a      	add	r2, r3
 80108ac:	4620      	mov	r0, r4
 80108ae:	9205      	str	r2, [sp, #20]
 80108b0:	f000 fd90 	bl	80113d4 <__i2b>
 80108b4:	4607      	mov	r7, r0
 80108b6:	2d00      	cmp	r5, #0
 80108b8:	dd0c      	ble.n	80108d4 <_dtoa_r+0x754>
 80108ba:	9b05      	ldr	r3, [sp, #20]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	dd09      	ble.n	80108d4 <_dtoa_r+0x754>
 80108c0:	42ab      	cmp	r3, r5
 80108c2:	9a04      	ldr	r2, [sp, #16]
 80108c4:	bfa8      	it	ge
 80108c6:	462b      	movge	r3, r5
 80108c8:	1ad2      	subs	r2, r2, r3
 80108ca:	9204      	str	r2, [sp, #16]
 80108cc:	9a05      	ldr	r2, [sp, #20]
 80108ce:	1aed      	subs	r5, r5, r3
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	9305      	str	r3, [sp, #20]
 80108d4:	9b07      	ldr	r3, [sp, #28]
 80108d6:	b31b      	cbz	r3, 8010920 <_dtoa_r+0x7a0>
 80108d8:	9b08      	ldr	r3, [sp, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 80af 	beq.w	8010a3e <_dtoa_r+0x8be>
 80108e0:	2e00      	cmp	r6, #0
 80108e2:	dd13      	ble.n	801090c <_dtoa_r+0x78c>
 80108e4:	4639      	mov	r1, r7
 80108e6:	4632      	mov	r2, r6
 80108e8:	4620      	mov	r0, r4
 80108ea:	f000 fe33 	bl	8011554 <__pow5mult>
 80108ee:	ee18 2a10 	vmov	r2, s16
 80108f2:	4601      	mov	r1, r0
 80108f4:	4607      	mov	r7, r0
 80108f6:	4620      	mov	r0, r4
 80108f8:	f000 fd82 	bl	8011400 <__multiply>
 80108fc:	ee18 1a10 	vmov	r1, s16
 8010900:	4680      	mov	r8, r0
 8010902:	4620      	mov	r0, r4
 8010904:	f000 fcae 	bl	8011264 <_Bfree>
 8010908:	ee08 8a10 	vmov	s16, r8
 801090c:	9b07      	ldr	r3, [sp, #28]
 801090e:	1b9a      	subs	r2, r3, r6
 8010910:	d006      	beq.n	8010920 <_dtoa_r+0x7a0>
 8010912:	ee18 1a10 	vmov	r1, s16
 8010916:	4620      	mov	r0, r4
 8010918:	f000 fe1c 	bl	8011554 <__pow5mult>
 801091c:	ee08 0a10 	vmov	s16, r0
 8010920:	2101      	movs	r1, #1
 8010922:	4620      	mov	r0, r4
 8010924:	f000 fd56 	bl	80113d4 <__i2b>
 8010928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801092a:	2b00      	cmp	r3, #0
 801092c:	4606      	mov	r6, r0
 801092e:	f340 8088 	ble.w	8010a42 <_dtoa_r+0x8c2>
 8010932:	461a      	mov	r2, r3
 8010934:	4601      	mov	r1, r0
 8010936:	4620      	mov	r0, r4
 8010938:	f000 fe0c 	bl	8011554 <__pow5mult>
 801093c:	9b06      	ldr	r3, [sp, #24]
 801093e:	2b01      	cmp	r3, #1
 8010940:	4606      	mov	r6, r0
 8010942:	f340 8081 	ble.w	8010a48 <_dtoa_r+0x8c8>
 8010946:	f04f 0800 	mov.w	r8, #0
 801094a:	6933      	ldr	r3, [r6, #16]
 801094c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010950:	6918      	ldr	r0, [r3, #16]
 8010952:	f000 fcef 	bl	8011334 <__hi0bits>
 8010956:	f1c0 0020 	rsb	r0, r0, #32
 801095a:	9b05      	ldr	r3, [sp, #20]
 801095c:	4418      	add	r0, r3
 801095e:	f010 001f 	ands.w	r0, r0, #31
 8010962:	f000 8092 	beq.w	8010a8a <_dtoa_r+0x90a>
 8010966:	f1c0 0320 	rsb	r3, r0, #32
 801096a:	2b04      	cmp	r3, #4
 801096c:	f340 808a 	ble.w	8010a84 <_dtoa_r+0x904>
 8010970:	f1c0 001c 	rsb	r0, r0, #28
 8010974:	9b04      	ldr	r3, [sp, #16]
 8010976:	4403      	add	r3, r0
 8010978:	9304      	str	r3, [sp, #16]
 801097a:	9b05      	ldr	r3, [sp, #20]
 801097c:	4403      	add	r3, r0
 801097e:	4405      	add	r5, r0
 8010980:	9305      	str	r3, [sp, #20]
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	dd07      	ble.n	8010998 <_dtoa_r+0x818>
 8010988:	ee18 1a10 	vmov	r1, s16
 801098c:	461a      	mov	r2, r3
 801098e:	4620      	mov	r0, r4
 8010990:	f000 fe3a 	bl	8011608 <__lshift>
 8010994:	ee08 0a10 	vmov	s16, r0
 8010998:	9b05      	ldr	r3, [sp, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd05      	ble.n	80109aa <_dtoa_r+0x82a>
 801099e:	4631      	mov	r1, r6
 80109a0:	461a      	mov	r2, r3
 80109a2:	4620      	mov	r0, r4
 80109a4:	f000 fe30 	bl	8011608 <__lshift>
 80109a8:	4606      	mov	r6, r0
 80109aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d06e      	beq.n	8010a8e <_dtoa_r+0x90e>
 80109b0:	ee18 0a10 	vmov	r0, s16
 80109b4:	4631      	mov	r1, r6
 80109b6:	f000 fe97 	bl	80116e8 <__mcmp>
 80109ba:	2800      	cmp	r0, #0
 80109bc:	da67      	bge.n	8010a8e <_dtoa_r+0x90e>
 80109be:	9b00      	ldr	r3, [sp, #0]
 80109c0:	3b01      	subs	r3, #1
 80109c2:	ee18 1a10 	vmov	r1, s16
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	220a      	movs	r2, #10
 80109ca:	2300      	movs	r3, #0
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 fc6b 	bl	80112a8 <__multadd>
 80109d2:	9b08      	ldr	r3, [sp, #32]
 80109d4:	ee08 0a10 	vmov	s16, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 81b1 	beq.w	8010d40 <_dtoa_r+0xbc0>
 80109de:	2300      	movs	r3, #0
 80109e0:	4639      	mov	r1, r7
 80109e2:	220a      	movs	r2, #10
 80109e4:	4620      	mov	r0, r4
 80109e6:	f000 fc5f 	bl	80112a8 <__multadd>
 80109ea:	9b02      	ldr	r3, [sp, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	4607      	mov	r7, r0
 80109f0:	f300 808e 	bgt.w	8010b10 <_dtoa_r+0x990>
 80109f4:	9b06      	ldr	r3, [sp, #24]
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	dc51      	bgt.n	8010a9e <_dtoa_r+0x91e>
 80109fa:	e089      	b.n	8010b10 <_dtoa_r+0x990>
 80109fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010a02:	e74b      	b.n	801089c <_dtoa_r+0x71c>
 8010a04:	9b03      	ldr	r3, [sp, #12]
 8010a06:	1e5e      	subs	r6, r3, #1
 8010a08:	9b07      	ldr	r3, [sp, #28]
 8010a0a:	42b3      	cmp	r3, r6
 8010a0c:	bfbf      	itttt	lt
 8010a0e:	9b07      	ldrlt	r3, [sp, #28]
 8010a10:	9607      	strlt	r6, [sp, #28]
 8010a12:	1af2      	sublt	r2, r6, r3
 8010a14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010a16:	bfb6      	itet	lt
 8010a18:	189b      	addlt	r3, r3, r2
 8010a1a:	1b9e      	subge	r6, r3, r6
 8010a1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010a1e:	9b03      	ldr	r3, [sp, #12]
 8010a20:	bfb8      	it	lt
 8010a22:	2600      	movlt	r6, #0
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	bfb7      	itett	lt
 8010a28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010a2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010a30:	1a9d      	sublt	r5, r3, r2
 8010a32:	2300      	movlt	r3, #0
 8010a34:	e734      	b.n	80108a0 <_dtoa_r+0x720>
 8010a36:	9e07      	ldr	r6, [sp, #28]
 8010a38:	9d04      	ldr	r5, [sp, #16]
 8010a3a:	9f08      	ldr	r7, [sp, #32]
 8010a3c:	e73b      	b.n	80108b6 <_dtoa_r+0x736>
 8010a3e:	9a07      	ldr	r2, [sp, #28]
 8010a40:	e767      	b.n	8010912 <_dtoa_r+0x792>
 8010a42:	9b06      	ldr	r3, [sp, #24]
 8010a44:	2b01      	cmp	r3, #1
 8010a46:	dc18      	bgt.n	8010a7a <_dtoa_r+0x8fa>
 8010a48:	f1ba 0f00 	cmp.w	sl, #0
 8010a4c:	d115      	bne.n	8010a7a <_dtoa_r+0x8fa>
 8010a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a52:	b993      	cbnz	r3, 8010a7a <_dtoa_r+0x8fa>
 8010a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a58:	0d1b      	lsrs	r3, r3, #20
 8010a5a:	051b      	lsls	r3, r3, #20
 8010a5c:	b183      	cbz	r3, 8010a80 <_dtoa_r+0x900>
 8010a5e:	9b04      	ldr	r3, [sp, #16]
 8010a60:	3301      	adds	r3, #1
 8010a62:	9304      	str	r3, [sp, #16]
 8010a64:	9b05      	ldr	r3, [sp, #20]
 8010a66:	3301      	adds	r3, #1
 8010a68:	9305      	str	r3, [sp, #20]
 8010a6a:	f04f 0801 	mov.w	r8, #1
 8010a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	f47f af6a 	bne.w	801094a <_dtoa_r+0x7ca>
 8010a76:	2001      	movs	r0, #1
 8010a78:	e76f      	b.n	801095a <_dtoa_r+0x7da>
 8010a7a:	f04f 0800 	mov.w	r8, #0
 8010a7e:	e7f6      	b.n	8010a6e <_dtoa_r+0x8ee>
 8010a80:	4698      	mov	r8, r3
 8010a82:	e7f4      	b.n	8010a6e <_dtoa_r+0x8ee>
 8010a84:	f43f af7d 	beq.w	8010982 <_dtoa_r+0x802>
 8010a88:	4618      	mov	r0, r3
 8010a8a:	301c      	adds	r0, #28
 8010a8c:	e772      	b.n	8010974 <_dtoa_r+0x7f4>
 8010a8e:	9b03      	ldr	r3, [sp, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	dc37      	bgt.n	8010b04 <_dtoa_r+0x984>
 8010a94:	9b06      	ldr	r3, [sp, #24]
 8010a96:	2b02      	cmp	r3, #2
 8010a98:	dd34      	ble.n	8010b04 <_dtoa_r+0x984>
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	9302      	str	r3, [sp, #8]
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	b96b      	cbnz	r3, 8010abe <_dtoa_r+0x93e>
 8010aa2:	4631      	mov	r1, r6
 8010aa4:	2205      	movs	r2, #5
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 fbfe 	bl	80112a8 <__multadd>
 8010aac:	4601      	mov	r1, r0
 8010aae:	4606      	mov	r6, r0
 8010ab0:	ee18 0a10 	vmov	r0, s16
 8010ab4:	f000 fe18 	bl	80116e8 <__mcmp>
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	f73f adbb 	bgt.w	8010634 <_dtoa_r+0x4b4>
 8010abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac0:	9d01      	ldr	r5, [sp, #4]
 8010ac2:	43db      	mvns	r3, r3
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	f04f 0800 	mov.w	r8, #0
 8010aca:	4631      	mov	r1, r6
 8010acc:	4620      	mov	r0, r4
 8010ace:	f000 fbc9 	bl	8011264 <_Bfree>
 8010ad2:	2f00      	cmp	r7, #0
 8010ad4:	f43f aea4 	beq.w	8010820 <_dtoa_r+0x6a0>
 8010ad8:	f1b8 0f00 	cmp.w	r8, #0
 8010adc:	d005      	beq.n	8010aea <_dtoa_r+0x96a>
 8010ade:	45b8      	cmp	r8, r7
 8010ae0:	d003      	beq.n	8010aea <_dtoa_r+0x96a>
 8010ae2:	4641      	mov	r1, r8
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 fbbd 	bl	8011264 <_Bfree>
 8010aea:	4639      	mov	r1, r7
 8010aec:	4620      	mov	r0, r4
 8010aee:	f000 fbb9 	bl	8011264 <_Bfree>
 8010af2:	e695      	b.n	8010820 <_dtoa_r+0x6a0>
 8010af4:	2600      	movs	r6, #0
 8010af6:	4637      	mov	r7, r6
 8010af8:	e7e1      	b.n	8010abe <_dtoa_r+0x93e>
 8010afa:	9700      	str	r7, [sp, #0]
 8010afc:	4637      	mov	r7, r6
 8010afe:	e599      	b.n	8010634 <_dtoa_r+0x4b4>
 8010b00:	40240000 	.word	0x40240000
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f000 80ca 	beq.w	8010ca0 <_dtoa_r+0xb20>
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	9302      	str	r3, [sp, #8]
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	dd05      	ble.n	8010b20 <_dtoa_r+0x9a0>
 8010b14:	4639      	mov	r1, r7
 8010b16:	462a      	mov	r2, r5
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f000 fd75 	bl	8011608 <__lshift>
 8010b1e:	4607      	mov	r7, r0
 8010b20:	f1b8 0f00 	cmp.w	r8, #0
 8010b24:	d05b      	beq.n	8010bde <_dtoa_r+0xa5e>
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f000 fb5b 	bl	80111e4 <_Balloc>
 8010b2e:	4605      	mov	r5, r0
 8010b30:	b928      	cbnz	r0, 8010b3e <_dtoa_r+0x9be>
 8010b32:	4b87      	ldr	r3, [pc, #540]	; (8010d50 <_dtoa_r+0xbd0>)
 8010b34:	4602      	mov	r2, r0
 8010b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b3a:	f7ff bb3b 	b.w	80101b4 <_dtoa_r+0x34>
 8010b3e:	693a      	ldr	r2, [r7, #16]
 8010b40:	3202      	adds	r2, #2
 8010b42:	0092      	lsls	r2, r2, #2
 8010b44:	f107 010c 	add.w	r1, r7, #12
 8010b48:	300c      	adds	r0, #12
 8010b4a:	f7fe fa07 	bl	800ef5c <memcpy>
 8010b4e:	2201      	movs	r2, #1
 8010b50:	4629      	mov	r1, r5
 8010b52:	4620      	mov	r0, r4
 8010b54:	f000 fd58 	bl	8011608 <__lshift>
 8010b58:	9b01      	ldr	r3, [sp, #4]
 8010b5a:	f103 0901 	add.w	r9, r3, #1
 8010b5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010b62:	4413      	add	r3, r2
 8010b64:	9305      	str	r3, [sp, #20]
 8010b66:	f00a 0301 	and.w	r3, sl, #1
 8010b6a:	46b8      	mov	r8, r7
 8010b6c:	9304      	str	r3, [sp, #16]
 8010b6e:	4607      	mov	r7, r0
 8010b70:	4631      	mov	r1, r6
 8010b72:	ee18 0a10 	vmov	r0, s16
 8010b76:	f7ff fa77 	bl	8010068 <quorem>
 8010b7a:	4641      	mov	r1, r8
 8010b7c:	9002      	str	r0, [sp, #8]
 8010b7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010b82:	ee18 0a10 	vmov	r0, s16
 8010b86:	f000 fdaf 	bl	80116e8 <__mcmp>
 8010b8a:	463a      	mov	r2, r7
 8010b8c:	9003      	str	r0, [sp, #12]
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4620      	mov	r0, r4
 8010b92:	f000 fdc5 	bl	8011720 <__mdiff>
 8010b96:	68c2      	ldr	r2, [r0, #12]
 8010b98:	f109 3bff 	add.w	fp, r9, #4294967295
 8010b9c:	4605      	mov	r5, r0
 8010b9e:	bb02      	cbnz	r2, 8010be2 <_dtoa_r+0xa62>
 8010ba0:	4601      	mov	r1, r0
 8010ba2:	ee18 0a10 	vmov	r0, s16
 8010ba6:	f000 fd9f 	bl	80116e8 <__mcmp>
 8010baa:	4602      	mov	r2, r0
 8010bac:	4629      	mov	r1, r5
 8010bae:	4620      	mov	r0, r4
 8010bb0:	9207      	str	r2, [sp, #28]
 8010bb2:	f000 fb57 	bl	8011264 <_Bfree>
 8010bb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010bba:	ea43 0102 	orr.w	r1, r3, r2
 8010bbe:	9b04      	ldr	r3, [sp, #16]
 8010bc0:	430b      	orrs	r3, r1
 8010bc2:	464d      	mov	r5, r9
 8010bc4:	d10f      	bne.n	8010be6 <_dtoa_r+0xa66>
 8010bc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010bca:	d02a      	beq.n	8010c22 <_dtoa_r+0xaa2>
 8010bcc:	9b03      	ldr	r3, [sp, #12]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	dd02      	ble.n	8010bd8 <_dtoa_r+0xa58>
 8010bd2:	9b02      	ldr	r3, [sp, #8]
 8010bd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010bd8:	f88b a000 	strb.w	sl, [fp]
 8010bdc:	e775      	b.n	8010aca <_dtoa_r+0x94a>
 8010bde:	4638      	mov	r0, r7
 8010be0:	e7ba      	b.n	8010b58 <_dtoa_r+0x9d8>
 8010be2:	2201      	movs	r2, #1
 8010be4:	e7e2      	b.n	8010bac <_dtoa_r+0xa2c>
 8010be6:	9b03      	ldr	r3, [sp, #12]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	db04      	blt.n	8010bf6 <_dtoa_r+0xa76>
 8010bec:	9906      	ldr	r1, [sp, #24]
 8010bee:	430b      	orrs	r3, r1
 8010bf0:	9904      	ldr	r1, [sp, #16]
 8010bf2:	430b      	orrs	r3, r1
 8010bf4:	d122      	bne.n	8010c3c <_dtoa_r+0xabc>
 8010bf6:	2a00      	cmp	r2, #0
 8010bf8:	ddee      	ble.n	8010bd8 <_dtoa_r+0xa58>
 8010bfa:	ee18 1a10 	vmov	r1, s16
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4620      	mov	r0, r4
 8010c02:	f000 fd01 	bl	8011608 <__lshift>
 8010c06:	4631      	mov	r1, r6
 8010c08:	ee08 0a10 	vmov	s16, r0
 8010c0c:	f000 fd6c 	bl	80116e8 <__mcmp>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	dc03      	bgt.n	8010c1c <_dtoa_r+0xa9c>
 8010c14:	d1e0      	bne.n	8010bd8 <_dtoa_r+0xa58>
 8010c16:	f01a 0f01 	tst.w	sl, #1
 8010c1a:	d0dd      	beq.n	8010bd8 <_dtoa_r+0xa58>
 8010c1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c20:	d1d7      	bne.n	8010bd2 <_dtoa_r+0xa52>
 8010c22:	2339      	movs	r3, #57	; 0x39
 8010c24:	f88b 3000 	strb.w	r3, [fp]
 8010c28:	462b      	mov	r3, r5
 8010c2a:	461d      	mov	r5, r3
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010c32:	2a39      	cmp	r2, #57	; 0x39
 8010c34:	d071      	beq.n	8010d1a <_dtoa_r+0xb9a>
 8010c36:	3201      	adds	r2, #1
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	e746      	b.n	8010aca <_dtoa_r+0x94a>
 8010c3c:	2a00      	cmp	r2, #0
 8010c3e:	dd07      	ble.n	8010c50 <_dtoa_r+0xad0>
 8010c40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010c44:	d0ed      	beq.n	8010c22 <_dtoa_r+0xaa2>
 8010c46:	f10a 0301 	add.w	r3, sl, #1
 8010c4a:	f88b 3000 	strb.w	r3, [fp]
 8010c4e:	e73c      	b.n	8010aca <_dtoa_r+0x94a>
 8010c50:	9b05      	ldr	r3, [sp, #20]
 8010c52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010c56:	4599      	cmp	r9, r3
 8010c58:	d047      	beq.n	8010cea <_dtoa_r+0xb6a>
 8010c5a:	ee18 1a10 	vmov	r1, s16
 8010c5e:	2300      	movs	r3, #0
 8010c60:	220a      	movs	r2, #10
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 fb20 	bl	80112a8 <__multadd>
 8010c68:	45b8      	cmp	r8, r7
 8010c6a:	ee08 0a10 	vmov	s16, r0
 8010c6e:	f04f 0300 	mov.w	r3, #0
 8010c72:	f04f 020a 	mov.w	r2, #10
 8010c76:	4641      	mov	r1, r8
 8010c78:	4620      	mov	r0, r4
 8010c7a:	d106      	bne.n	8010c8a <_dtoa_r+0xb0a>
 8010c7c:	f000 fb14 	bl	80112a8 <__multadd>
 8010c80:	4680      	mov	r8, r0
 8010c82:	4607      	mov	r7, r0
 8010c84:	f109 0901 	add.w	r9, r9, #1
 8010c88:	e772      	b.n	8010b70 <_dtoa_r+0x9f0>
 8010c8a:	f000 fb0d 	bl	80112a8 <__multadd>
 8010c8e:	4639      	mov	r1, r7
 8010c90:	4680      	mov	r8, r0
 8010c92:	2300      	movs	r3, #0
 8010c94:	220a      	movs	r2, #10
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 fb06 	bl	80112a8 <__multadd>
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	e7f1      	b.n	8010c84 <_dtoa_r+0xb04>
 8010ca0:	9b03      	ldr	r3, [sp, #12]
 8010ca2:	9302      	str	r3, [sp, #8]
 8010ca4:	9d01      	ldr	r5, [sp, #4]
 8010ca6:	ee18 0a10 	vmov	r0, s16
 8010caa:	4631      	mov	r1, r6
 8010cac:	f7ff f9dc 	bl	8010068 <quorem>
 8010cb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010cb4:	9b01      	ldr	r3, [sp, #4]
 8010cb6:	f805 ab01 	strb.w	sl, [r5], #1
 8010cba:	1aea      	subs	r2, r5, r3
 8010cbc:	9b02      	ldr	r3, [sp, #8]
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	dd09      	ble.n	8010cd6 <_dtoa_r+0xb56>
 8010cc2:	ee18 1a10 	vmov	r1, s16
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	220a      	movs	r2, #10
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f000 faec 	bl	80112a8 <__multadd>
 8010cd0:	ee08 0a10 	vmov	s16, r0
 8010cd4:	e7e7      	b.n	8010ca6 <_dtoa_r+0xb26>
 8010cd6:	9b02      	ldr	r3, [sp, #8]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	bfc8      	it	gt
 8010cdc:	461d      	movgt	r5, r3
 8010cde:	9b01      	ldr	r3, [sp, #4]
 8010ce0:	bfd8      	it	le
 8010ce2:	2501      	movle	r5, #1
 8010ce4:	441d      	add	r5, r3
 8010ce6:	f04f 0800 	mov.w	r8, #0
 8010cea:	ee18 1a10 	vmov	r1, s16
 8010cee:	2201      	movs	r2, #1
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	f000 fc89 	bl	8011608 <__lshift>
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	ee08 0a10 	vmov	s16, r0
 8010cfc:	f000 fcf4 	bl	80116e8 <__mcmp>
 8010d00:	2800      	cmp	r0, #0
 8010d02:	dc91      	bgt.n	8010c28 <_dtoa_r+0xaa8>
 8010d04:	d102      	bne.n	8010d0c <_dtoa_r+0xb8c>
 8010d06:	f01a 0f01 	tst.w	sl, #1
 8010d0a:	d18d      	bne.n	8010c28 <_dtoa_r+0xaa8>
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	461d      	mov	r5, r3
 8010d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d14:	2a30      	cmp	r2, #48	; 0x30
 8010d16:	d0fa      	beq.n	8010d0e <_dtoa_r+0xb8e>
 8010d18:	e6d7      	b.n	8010aca <_dtoa_r+0x94a>
 8010d1a:	9a01      	ldr	r2, [sp, #4]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d184      	bne.n	8010c2a <_dtoa_r+0xaaa>
 8010d20:	9b00      	ldr	r3, [sp, #0]
 8010d22:	3301      	adds	r3, #1
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	2331      	movs	r3, #49	; 0x31
 8010d28:	7013      	strb	r3, [r2, #0]
 8010d2a:	e6ce      	b.n	8010aca <_dtoa_r+0x94a>
 8010d2c:	4b09      	ldr	r3, [pc, #36]	; (8010d54 <_dtoa_r+0xbd4>)
 8010d2e:	f7ff ba95 	b.w	801025c <_dtoa_r+0xdc>
 8010d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f47f aa6e 	bne.w	8010216 <_dtoa_r+0x96>
 8010d3a:	4b07      	ldr	r3, [pc, #28]	; (8010d58 <_dtoa_r+0xbd8>)
 8010d3c:	f7ff ba8e 	b.w	801025c <_dtoa_r+0xdc>
 8010d40:	9b02      	ldr	r3, [sp, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	dcae      	bgt.n	8010ca4 <_dtoa_r+0xb24>
 8010d46:	9b06      	ldr	r3, [sp, #24]
 8010d48:	2b02      	cmp	r3, #2
 8010d4a:	f73f aea8 	bgt.w	8010a9e <_dtoa_r+0x91e>
 8010d4e:	e7a9      	b.n	8010ca4 <_dtoa_r+0xb24>
 8010d50:	08012e9a 	.word	0x08012e9a
 8010d54:	08013079 	.word	0x08013079
 8010d58:	08012e1b 	.word	0x08012e1b

08010d5c <__sflush_r>:
 8010d5c:	898a      	ldrh	r2, [r1, #12]
 8010d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d62:	4605      	mov	r5, r0
 8010d64:	0710      	lsls	r0, r2, #28
 8010d66:	460c      	mov	r4, r1
 8010d68:	d458      	bmi.n	8010e1c <__sflush_r+0xc0>
 8010d6a:	684b      	ldr	r3, [r1, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	dc05      	bgt.n	8010d7c <__sflush_r+0x20>
 8010d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	dc02      	bgt.n	8010d7c <__sflush_r+0x20>
 8010d76:	2000      	movs	r0, #0
 8010d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d7e:	2e00      	cmp	r6, #0
 8010d80:	d0f9      	beq.n	8010d76 <__sflush_r+0x1a>
 8010d82:	2300      	movs	r3, #0
 8010d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d88:	682f      	ldr	r7, [r5, #0]
 8010d8a:	602b      	str	r3, [r5, #0]
 8010d8c:	d032      	beq.n	8010df4 <__sflush_r+0x98>
 8010d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	075a      	lsls	r2, r3, #29
 8010d94:	d505      	bpl.n	8010da2 <__sflush_r+0x46>
 8010d96:	6863      	ldr	r3, [r4, #4]
 8010d98:	1ac0      	subs	r0, r0, r3
 8010d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d9c:	b10b      	cbz	r3, 8010da2 <__sflush_r+0x46>
 8010d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010da0:	1ac0      	subs	r0, r0, r3
 8010da2:	2300      	movs	r3, #0
 8010da4:	4602      	mov	r2, r0
 8010da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010da8:	6a21      	ldr	r1, [r4, #32]
 8010daa:	4628      	mov	r0, r5
 8010dac:	47b0      	blx	r6
 8010dae:	1c43      	adds	r3, r0, #1
 8010db0:	89a3      	ldrh	r3, [r4, #12]
 8010db2:	d106      	bne.n	8010dc2 <__sflush_r+0x66>
 8010db4:	6829      	ldr	r1, [r5, #0]
 8010db6:	291d      	cmp	r1, #29
 8010db8:	d82c      	bhi.n	8010e14 <__sflush_r+0xb8>
 8010dba:	4a2a      	ldr	r2, [pc, #168]	; (8010e64 <__sflush_r+0x108>)
 8010dbc:	40ca      	lsrs	r2, r1
 8010dbe:	07d6      	lsls	r6, r2, #31
 8010dc0:	d528      	bpl.n	8010e14 <__sflush_r+0xb8>
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	6062      	str	r2, [r4, #4]
 8010dc6:	04d9      	lsls	r1, r3, #19
 8010dc8:	6922      	ldr	r2, [r4, #16]
 8010dca:	6022      	str	r2, [r4, #0]
 8010dcc:	d504      	bpl.n	8010dd8 <__sflush_r+0x7c>
 8010dce:	1c42      	adds	r2, r0, #1
 8010dd0:	d101      	bne.n	8010dd6 <__sflush_r+0x7a>
 8010dd2:	682b      	ldr	r3, [r5, #0]
 8010dd4:	b903      	cbnz	r3, 8010dd8 <__sflush_r+0x7c>
 8010dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8010dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dda:	602f      	str	r7, [r5, #0]
 8010ddc:	2900      	cmp	r1, #0
 8010dde:	d0ca      	beq.n	8010d76 <__sflush_r+0x1a>
 8010de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010de4:	4299      	cmp	r1, r3
 8010de6:	d002      	beq.n	8010dee <__sflush_r+0x92>
 8010de8:	4628      	mov	r0, r5
 8010dea:	f7fe f8cd 	bl	800ef88 <_free_r>
 8010dee:	2000      	movs	r0, #0
 8010df0:	6360      	str	r0, [r4, #52]	; 0x34
 8010df2:	e7c1      	b.n	8010d78 <__sflush_r+0x1c>
 8010df4:	6a21      	ldr	r1, [r4, #32]
 8010df6:	2301      	movs	r3, #1
 8010df8:	4628      	mov	r0, r5
 8010dfa:	47b0      	blx	r6
 8010dfc:	1c41      	adds	r1, r0, #1
 8010dfe:	d1c7      	bne.n	8010d90 <__sflush_r+0x34>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d0c4      	beq.n	8010d90 <__sflush_r+0x34>
 8010e06:	2b1d      	cmp	r3, #29
 8010e08:	d001      	beq.n	8010e0e <__sflush_r+0xb2>
 8010e0a:	2b16      	cmp	r3, #22
 8010e0c:	d101      	bne.n	8010e12 <__sflush_r+0xb6>
 8010e0e:	602f      	str	r7, [r5, #0]
 8010e10:	e7b1      	b.n	8010d76 <__sflush_r+0x1a>
 8010e12:	89a3      	ldrh	r3, [r4, #12]
 8010e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e18:	81a3      	strh	r3, [r4, #12]
 8010e1a:	e7ad      	b.n	8010d78 <__sflush_r+0x1c>
 8010e1c:	690f      	ldr	r7, [r1, #16]
 8010e1e:	2f00      	cmp	r7, #0
 8010e20:	d0a9      	beq.n	8010d76 <__sflush_r+0x1a>
 8010e22:	0793      	lsls	r3, r2, #30
 8010e24:	680e      	ldr	r6, [r1, #0]
 8010e26:	bf08      	it	eq
 8010e28:	694b      	ldreq	r3, [r1, #20]
 8010e2a:	600f      	str	r7, [r1, #0]
 8010e2c:	bf18      	it	ne
 8010e2e:	2300      	movne	r3, #0
 8010e30:	eba6 0807 	sub.w	r8, r6, r7
 8010e34:	608b      	str	r3, [r1, #8]
 8010e36:	f1b8 0f00 	cmp.w	r8, #0
 8010e3a:	dd9c      	ble.n	8010d76 <__sflush_r+0x1a>
 8010e3c:	6a21      	ldr	r1, [r4, #32]
 8010e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e40:	4643      	mov	r3, r8
 8010e42:	463a      	mov	r2, r7
 8010e44:	4628      	mov	r0, r5
 8010e46:	47b0      	blx	r6
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	dc06      	bgt.n	8010e5a <__sflush_r+0xfe>
 8010e4c:	89a3      	ldrh	r3, [r4, #12]
 8010e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e52:	81a3      	strh	r3, [r4, #12]
 8010e54:	f04f 30ff 	mov.w	r0, #4294967295
 8010e58:	e78e      	b.n	8010d78 <__sflush_r+0x1c>
 8010e5a:	4407      	add	r7, r0
 8010e5c:	eba8 0800 	sub.w	r8, r8, r0
 8010e60:	e7e9      	b.n	8010e36 <__sflush_r+0xda>
 8010e62:	bf00      	nop
 8010e64:	20400001 	.word	0x20400001

08010e68 <_fflush_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	690b      	ldr	r3, [r1, #16]
 8010e6c:	4605      	mov	r5, r0
 8010e6e:	460c      	mov	r4, r1
 8010e70:	b913      	cbnz	r3, 8010e78 <_fflush_r+0x10>
 8010e72:	2500      	movs	r5, #0
 8010e74:	4628      	mov	r0, r5
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	b118      	cbz	r0, 8010e82 <_fflush_r+0x1a>
 8010e7a:	6983      	ldr	r3, [r0, #24]
 8010e7c:	b90b      	cbnz	r3, 8010e82 <_fflush_r+0x1a>
 8010e7e:	f000 f887 	bl	8010f90 <__sinit>
 8010e82:	4b14      	ldr	r3, [pc, #80]	; (8010ed4 <_fflush_r+0x6c>)
 8010e84:	429c      	cmp	r4, r3
 8010e86:	d11b      	bne.n	8010ec0 <_fflush_r+0x58>
 8010e88:	686c      	ldr	r4, [r5, #4]
 8010e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d0ef      	beq.n	8010e72 <_fflush_r+0xa>
 8010e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e94:	07d0      	lsls	r0, r2, #31
 8010e96:	d404      	bmi.n	8010ea2 <_fflush_r+0x3a>
 8010e98:	0599      	lsls	r1, r3, #22
 8010e9a:	d402      	bmi.n	8010ea2 <_fflush_r+0x3a>
 8010e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e9e:	f000 f91a 	bl	80110d6 <__retarget_lock_acquire_recursive>
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	f7ff ff59 	bl	8010d5c <__sflush_r>
 8010eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eac:	07da      	lsls	r2, r3, #31
 8010eae:	4605      	mov	r5, r0
 8010eb0:	d4e0      	bmi.n	8010e74 <_fflush_r+0xc>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	059b      	lsls	r3, r3, #22
 8010eb6:	d4dd      	bmi.n	8010e74 <_fflush_r+0xc>
 8010eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eba:	f000 f90d 	bl	80110d8 <__retarget_lock_release_recursive>
 8010ebe:	e7d9      	b.n	8010e74 <_fflush_r+0xc>
 8010ec0:	4b05      	ldr	r3, [pc, #20]	; (8010ed8 <_fflush_r+0x70>)
 8010ec2:	429c      	cmp	r4, r3
 8010ec4:	d101      	bne.n	8010eca <_fflush_r+0x62>
 8010ec6:	68ac      	ldr	r4, [r5, #8]
 8010ec8:	e7df      	b.n	8010e8a <_fflush_r+0x22>
 8010eca:	4b04      	ldr	r3, [pc, #16]	; (8010edc <_fflush_r+0x74>)
 8010ecc:	429c      	cmp	r4, r3
 8010ece:	bf08      	it	eq
 8010ed0:	68ec      	ldreq	r4, [r5, #12]
 8010ed2:	e7da      	b.n	8010e8a <_fflush_r+0x22>
 8010ed4:	08012ecc 	.word	0x08012ecc
 8010ed8:	08012eec 	.word	0x08012eec
 8010edc:	08012eac 	.word	0x08012eac

08010ee0 <std>:
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	b510      	push	{r4, lr}
 8010ee4:	4604      	mov	r4, r0
 8010ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8010eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010eee:	6083      	str	r3, [r0, #8]
 8010ef0:	8181      	strh	r1, [r0, #12]
 8010ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8010ef4:	81c2      	strh	r2, [r0, #14]
 8010ef6:	6183      	str	r3, [r0, #24]
 8010ef8:	4619      	mov	r1, r3
 8010efa:	2208      	movs	r2, #8
 8010efc:	305c      	adds	r0, #92	; 0x5c
 8010efe:	f7fe f83b 	bl	800ef78 <memset>
 8010f02:	4b05      	ldr	r3, [pc, #20]	; (8010f18 <std+0x38>)
 8010f04:	6263      	str	r3, [r4, #36]	; 0x24
 8010f06:	4b05      	ldr	r3, [pc, #20]	; (8010f1c <std+0x3c>)
 8010f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f0a:	4b05      	ldr	r3, [pc, #20]	; (8010f20 <std+0x40>)
 8010f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f0e:	4b05      	ldr	r3, [pc, #20]	; (8010f24 <std+0x44>)
 8010f10:	6224      	str	r4, [r4, #32]
 8010f12:	6323      	str	r3, [r4, #48]	; 0x30
 8010f14:	bd10      	pop	{r4, pc}
 8010f16:	bf00      	nop
 8010f18:	0800fc79 	.word	0x0800fc79
 8010f1c:	0800fc9f 	.word	0x0800fc9f
 8010f20:	0800fcd7 	.word	0x0800fcd7
 8010f24:	0800fcfb 	.word	0x0800fcfb

08010f28 <_cleanup_r>:
 8010f28:	4901      	ldr	r1, [pc, #4]	; (8010f30 <_cleanup_r+0x8>)
 8010f2a:	f000 b8af 	b.w	801108c <_fwalk_reent>
 8010f2e:	bf00      	nop
 8010f30:	08010e69 	.word	0x08010e69

08010f34 <__sfmoreglue>:
 8010f34:	b570      	push	{r4, r5, r6, lr}
 8010f36:	2268      	movs	r2, #104	; 0x68
 8010f38:	1e4d      	subs	r5, r1, #1
 8010f3a:	4355      	muls	r5, r2
 8010f3c:	460e      	mov	r6, r1
 8010f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f42:	f7fe f88d 	bl	800f060 <_malloc_r>
 8010f46:	4604      	mov	r4, r0
 8010f48:	b140      	cbz	r0, 8010f5c <__sfmoreglue+0x28>
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8010f50:	300c      	adds	r0, #12
 8010f52:	60a0      	str	r0, [r4, #8]
 8010f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f58:	f7fe f80e 	bl	800ef78 <memset>
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	bd70      	pop	{r4, r5, r6, pc}

08010f60 <__sfp_lock_acquire>:
 8010f60:	4801      	ldr	r0, [pc, #4]	; (8010f68 <__sfp_lock_acquire+0x8>)
 8010f62:	f000 b8b8 	b.w	80110d6 <__retarget_lock_acquire_recursive>
 8010f66:	bf00      	nop
 8010f68:	20002ce9 	.word	0x20002ce9

08010f6c <__sfp_lock_release>:
 8010f6c:	4801      	ldr	r0, [pc, #4]	; (8010f74 <__sfp_lock_release+0x8>)
 8010f6e:	f000 b8b3 	b.w	80110d8 <__retarget_lock_release_recursive>
 8010f72:	bf00      	nop
 8010f74:	20002ce9 	.word	0x20002ce9

08010f78 <__sinit_lock_acquire>:
 8010f78:	4801      	ldr	r0, [pc, #4]	; (8010f80 <__sinit_lock_acquire+0x8>)
 8010f7a:	f000 b8ac 	b.w	80110d6 <__retarget_lock_acquire_recursive>
 8010f7e:	bf00      	nop
 8010f80:	20002cea 	.word	0x20002cea

08010f84 <__sinit_lock_release>:
 8010f84:	4801      	ldr	r0, [pc, #4]	; (8010f8c <__sinit_lock_release+0x8>)
 8010f86:	f000 b8a7 	b.w	80110d8 <__retarget_lock_release_recursive>
 8010f8a:	bf00      	nop
 8010f8c:	20002cea 	.word	0x20002cea

08010f90 <__sinit>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	4604      	mov	r4, r0
 8010f94:	f7ff fff0 	bl	8010f78 <__sinit_lock_acquire>
 8010f98:	69a3      	ldr	r3, [r4, #24]
 8010f9a:	b11b      	cbz	r3, 8010fa4 <__sinit+0x14>
 8010f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fa0:	f7ff bff0 	b.w	8010f84 <__sinit_lock_release>
 8010fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8010faa:	4b13      	ldr	r3, [pc, #76]	; (8010ff8 <__sinit+0x68>)
 8010fac:	4a13      	ldr	r2, [pc, #76]	; (8010ffc <__sinit+0x6c>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8010fb2:	42a3      	cmp	r3, r4
 8010fb4:	bf04      	itt	eq
 8010fb6:	2301      	moveq	r3, #1
 8010fb8:	61a3      	streq	r3, [r4, #24]
 8010fba:	4620      	mov	r0, r4
 8010fbc:	f000 f820 	bl	8011000 <__sfp>
 8010fc0:	6060      	str	r0, [r4, #4]
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 f81c 	bl	8011000 <__sfp>
 8010fc8:	60a0      	str	r0, [r4, #8]
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 f818 	bl	8011000 <__sfp>
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	60e0      	str	r0, [r4, #12]
 8010fd4:	2104      	movs	r1, #4
 8010fd6:	6860      	ldr	r0, [r4, #4]
 8010fd8:	f7ff ff82 	bl	8010ee0 <std>
 8010fdc:	68a0      	ldr	r0, [r4, #8]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	2109      	movs	r1, #9
 8010fe2:	f7ff ff7d 	bl	8010ee0 <std>
 8010fe6:	68e0      	ldr	r0, [r4, #12]
 8010fe8:	2202      	movs	r2, #2
 8010fea:	2112      	movs	r1, #18
 8010fec:	f7ff ff78 	bl	8010ee0 <std>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	61a3      	str	r3, [r4, #24]
 8010ff4:	e7d2      	b.n	8010f9c <__sinit+0xc>
 8010ff6:	bf00      	nop
 8010ff8:	08012ce4 	.word	0x08012ce4
 8010ffc:	08010f29 	.word	0x08010f29

08011000 <__sfp>:
 8011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011002:	4607      	mov	r7, r0
 8011004:	f7ff ffac 	bl	8010f60 <__sfp_lock_acquire>
 8011008:	4b1e      	ldr	r3, [pc, #120]	; (8011084 <__sfp+0x84>)
 801100a:	681e      	ldr	r6, [r3, #0]
 801100c:	69b3      	ldr	r3, [r6, #24]
 801100e:	b913      	cbnz	r3, 8011016 <__sfp+0x16>
 8011010:	4630      	mov	r0, r6
 8011012:	f7ff ffbd 	bl	8010f90 <__sinit>
 8011016:	3648      	adds	r6, #72	; 0x48
 8011018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801101c:	3b01      	subs	r3, #1
 801101e:	d503      	bpl.n	8011028 <__sfp+0x28>
 8011020:	6833      	ldr	r3, [r6, #0]
 8011022:	b30b      	cbz	r3, 8011068 <__sfp+0x68>
 8011024:	6836      	ldr	r6, [r6, #0]
 8011026:	e7f7      	b.n	8011018 <__sfp+0x18>
 8011028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801102c:	b9d5      	cbnz	r5, 8011064 <__sfp+0x64>
 801102e:	4b16      	ldr	r3, [pc, #88]	; (8011088 <__sfp+0x88>)
 8011030:	60e3      	str	r3, [r4, #12]
 8011032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011036:	6665      	str	r5, [r4, #100]	; 0x64
 8011038:	f000 f84c 	bl	80110d4 <__retarget_lock_init_recursive>
 801103c:	f7ff ff96 	bl	8010f6c <__sfp_lock_release>
 8011040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011048:	6025      	str	r5, [r4, #0]
 801104a:	61a5      	str	r5, [r4, #24]
 801104c:	2208      	movs	r2, #8
 801104e:	4629      	mov	r1, r5
 8011050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011054:	f7fd ff90 	bl	800ef78 <memset>
 8011058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801105c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011060:	4620      	mov	r0, r4
 8011062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011064:	3468      	adds	r4, #104	; 0x68
 8011066:	e7d9      	b.n	801101c <__sfp+0x1c>
 8011068:	2104      	movs	r1, #4
 801106a:	4638      	mov	r0, r7
 801106c:	f7ff ff62 	bl	8010f34 <__sfmoreglue>
 8011070:	4604      	mov	r4, r0
 8011072:	6030      	str	r0, [r6, #0]
 8011074:	2800      	cmp	r0, #0
 8011076:	d1d5      	bne.n	8011024 <__sfp+0x24>
 8011078:	f7ff ff78 	bl	8010f6c <__sfp_lock_release>
 801107c:	230c      	movs	r3, #12
 801107e:	603b      	str	r3, [r7, #0]
 8011080:	e7ee      	b.n	8011060 <__sfp+0x60>
 8011082:	bf00      	nop
 8011084:	08012ce4 	.word	0x08012ce4
 8011088:	ffff0001 	.word	0xffff0001

0801108c <_fwalk_reent>:
 801108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011090:	4606      	mov	r6, r0
 8011092:	4688      	mov	r8, r1
 8011094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011098:	2700      	movs	r7, #0
 801109a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801109e:	f1b9 0901 	subs.w	r9, r9, #1
 80110a2:	d505      	bpl.n	80110b0 <_fwalk_reent+0x24>
 80110a4:	6824      	ldr	r4, [r4, #0]
 80110a6:	2c00      	cmp	r4, #0
 80110a8:	d1f7      	bne.n	801109a <_fwalk_reent+0xe>
 80110aa:	4638      	mov	r0, r7
 80110ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110b0:	89ab      	ldrh	r3, [r5, #12]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d907      	bls.n	80110c6 <_fwalk_reent+0x3a>
 80110b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110ba:	3301      	adds	r3, #1
 80110bc:	d003      	beq.n	80110c6 <_fwalk_reent+0x3a>
 80110be:	4629      	mov	r1, r5
 80110c0:	4630      	mov	r0, r6
 80110c2:	47c0      	blx	r8
 80110c4:	4307      	orrs	r7, r0
 80110c6:	3568      	adds	r5, #104	; 0x68
 80110c8:	e7e9      	b.n	801109e <_fwalk_reent+0x12>
	...

080110cc <_localeconv_r>:
 80110cc:	4800      	ldr	r0, [pc, #0]	; (80110d0 <_localeconv_r+0x4>)
 80110ce:	4770      	bx	lr
 80110d0:	200001a8 	.word	0x200001a8

080110d4 <__retarget_lock_init_recursive>:
 80110d4:	4770      	bx	lr

080110d6 <__retarget_lock_acquire_recursive>:
 80110d6:	4770      	bx	lr

080110d8 <__retarget_lock_release_recursive>:
 80110d8:	4770      	bx	lr
	...

080110dc <_lseek_r>:
 80110dc:	b538      	push	{r3, r4, r5, lr}
 80110de:	4d07      	ldr	r5, [pc, #28]	; (80110fc <_lseek_r+0x20>)
 80110e0:	4604      	mov	r4, r0
 80110e2:	4608      	mov	r0, r1
 80110e4:	4611      	mov	r1, r2
 80110e6:	2200      	movs	r2, #0
 80110e8:	602a      	str	r2, [r5, #0]
 80110ea:	461a      	mov	r2, r3
 80110ec:	f7f2 f980 	bl	80033f0 <_lseek>
 80110f0:	1c43      	adds	r3, r0, #1
 80110f2:	d102      	bne.n	80110fa <_lseek_r+0x1e>
 80110f4:	682b      	ldr	r3, [r5, #0]
 80110f6:	b103      	cbz	r3, 80110fa <_lseek_r+0x1e>
 80110f8:	6023      	str	r3, [r4, #0]
 80110fa:	bd38      	pop	{r3, r4, r5, pc}
 80110fc:	20002cec 	.word	0x20002cec

08011100 <__swhatbuf_r>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	460e      	mov	r6, r1
 8011104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011108:	2900      	cmp	r1, #0
 801110a:	b096      	sub	sp, #88	; 0x58
 801110c:	4614      	mov	r4, r2
 801110e:	461d      	mov	r5, r3
 8011110:	da08      	bge.n	8011124 <__swhatbuf_r+0x24>
 8011112:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011116:	2200      	movs	r2, #0
 8011118:	602a      	str	r2, [r5, #0]
 801111a:	061a      	lsls	r2, r3, #24
 801111c:	d410      	bmi.n	8011140 <__swhatbuf_r+0x40>
 801111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011122:	e00e      	b.n	8011142 <__swhatbuf_r+0x42>
 8011124:	466a      	mov	r2, sp
 8011126:	f001 faf9 	bl	801271c <_fstat_r>
 801112a:	2800      	cmp	r0, #0
 801112c:	dbf1      	blt.n	8011112 <__swhatbuf_r+0x12>
 801112e:	9a01      	ldr	r2, [sp, #4]
 8011130:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011134:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011138:	425a      	negs	r2, r3
 801113a:	415a      	adcs	r2, r3
 801113c:	602a      	str	r2, [r5, #0]
 801113e:	e7ee      	b.n	801111e <__swhatbuf_r+0x1e>
 8011140:	2340      	movs	r3, #64	; 0x40
 8011142:	2000      	movs	r0, #0
 8011144:	6023      	str	r3, [r4, #0]
 8011146:	b016      	add	sp, #88	; 0x58
 8011148:	bd70      	pop	{r4, r5, r6, pc}
	...

0801114c <__smakebuf_r>:
 801114c:	898b      	ldrh	r3, [r1, #12]
 801114e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011150:	079d      	lsls	r5, r3, #30
 8011152:	4606      	mov	r6, r0
 8011154:	460c      	mov	r4, r1
 8011156:	d507      	bpl.n	8011168 <__smakebuf_r+0x1c>
 8011158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801115c:	6023      	str	r3, [r4, #0]
 801115e:	6123      	str	r3, [r4, #16]
 8011160:	2301      	movs	r3, #1
 8011162:	6163      	str	r3, [r4, #20]
 8011164:	b002      	add	sp, #8
 8011166:	bd70      	pop	{r4, r5, r6, pc}
 8011168:	ab01      	add	r3, sp, #4
 801116a:	466a      	mov	r2, sp
 801116c:	f7ff ffc8 	bl	8011100 <__swhatbuf_r>
 8011170:	9900      	ldr	r1, [sp, #0]
 8011172:	4605      	mov	r5, r0
 8011174:	4630      	mov	r0, r6
 8011176:	f7fd ff73 	bl	800f060 <_malloc_r>
 801117a:	b948      	cbnz	r0, 8011190 <__smakebuf_r+0x44>
 801117c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011180:	059a      	lsls	r2, r3, #22
 8011182:	d4ef      	bmi.n	8011164 <__smakebuf_r+0x18>
 8011184:	f023 0303 	bic.w	r3, r3, #3
 8011188:	f043 0302 	orr.w	r3, r3, #2
 801118c:	81a3      	strh	r3, [r4, #12]
 801118e:	e7e3      	b.n	8011158 <__smakebuf_r+0xc>
 8011190:	4b0d      	ldr	r3, [pc, #52]	; (80111c8 <__smakebuf_r+0x7c>)
 8011192:	62b3      	str	r3, [r6, #40]	; 0x28
 8011194:	89a3      	ldrh	r3, [r4, #12]
 8011196:	6020      	str	r0, [r4, #0]
 8011198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801119c:	81a3      	strh	r3, [r4, #12]
 801119e:	9b00      	ldr	r3, [sp, #0]
 80111a0:	6163      	str	r3, [r4, #20]
 80111a2:	9b01      	ldr	r3, [sp, #4]
 80111a4:	6120      	str	r0, [r4, #16]
 80111a6:	b15b      	cbz	r3, 80111c0 <__smakebuf_r+0x74>
 80111a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111ac:	4630      	mov	r0, r6
 80111ae:	f001 fac7 	bl	8012740 <_isatty_r>
 80111b2:	b128      	cbz	r0, 80111c0 <__smakebuf_r+0x74>
 80111b4:	89a3      	ldrh	r3, [r4, #12]
 80111b6:	f023 0303 	bic.w	r3, r3, #3
 80111ba:	f043 0301 	orr.w	r3, r3, #1
 80111be:	81a3      	strh	r3, [r4, #12]
 80111c0:	89a0      	ldrh	r0, [r4, #12]
 80111c2:	4305      	orrs	r5, r0
 80111c4:	81a5      	strh	r5, [r4, #12]
 80111c6:	e7cd      	b.n	8011164 <__smakebuf_r+0x18>
 80111c8:	08010f29 	.word	0x08010f29

080111cc <__malloc_lock>:
 80111cc:	4801      	ldr	r0, [pc, #4]	; (80111d4 <__malloc_lock+0x8>)
 80111ce:	f7ff bf82 	b.w	80110d6 <__retarget_lock_acquire_recursive>
 80111d2:	bf00      	nop
 80111d4:	20002ce8 	.word	0x20002ce8

080111d8 <__malloc_unlock>:
 80111d8:	4801      	ldr	r0, [pc, #4]	; (80111e0 <__malloc_unlock+0x8>)
 80111da:	f7ff bf7d 	b.w	80110d8 <__retarget_lock_release_recursive>
 80111de:	bf00      	nop
 80111e0:	20002ce8 	.word	0x20002ce8

080111e4 <_Balloc>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111e8:	4604      	mov	r4, r0
 80111ea:	460d      	mov	r5, r1
 80111ec:	b976      	cbnz	r6, 801120c <_Balloc+0x28>
 80111ee:	2010      	movs	r0, #16
 80111f0:	f7fd fea4 	bl	800ef3c <malloc>
 80111f4:	4602      	mov	r2, r0
 80111f6:	6260      	str	r0, [r4, #36]	; 0x24
 80111f8:	b920      	cbnz	r0, 8011204 <_Balloc+0x20>
 80111fa:	4b18      	ldr	r3, [pc, #96]	; (801125c <_Balloc+0x78>)
 80111fc:	4818      	ldr	r0, [pc, #96]	; (8011260 <_Balloc+0x7c>)
 80111fe:	2166      	movs	r1, #102	; 0x66
 8011200:	f001 fa5c 	bl	80126bc <__assert_func>
 8011204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011208:	6006      	str	r6, [r0, #0]
 801120a:	60c6      	str	r6, [r0, #12]
 801120c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801120e:	68f3      	ldr	r3, [r6, #12]
 8011210:	b183      	cbz	r3, 8011234 <_Balloc+0x50>
 8011212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011214:	68db      	ldr	r3, [r3, #12]
 8011216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801121a:	b9b8      	cbnz	r0, 801124c <_Balloc+0x68>
 801121c:	2101      	movs	r1, #1
 801121e:	fa01 f605 	lsl.w	r6, r1, r5
 8011222:	1d72      	adds	r2, r6, #5
 8011224:	0092      	lsls	r2, r2, #2
 8011226:	4620      	mov	r0, r4
 8011228:	f000 fb60 	bl	80118ec <_calloc_r>
 801122c:	b160      	cbz	r0, 8011248 <_Balloc+0x64>
 801122e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011232:	e00e      	b.n	8011252 <_Balloc+0x6e>
 8011234:	2221      	movs	r2, #33	; 0x21
 8011236:	2104      	movs	r1, #4
 8011238:	4620      	mov	r0, r4
 801123a:	f000 fb57 	bl	80118ec <_calloc_r>
 801123e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011240:	60f0      	str	r0, [r6, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d1e4      	bne.n	8011212 <_Balloc+0x2e>
 8011248:	2000      	movs	r0, #0
 801124a:	bd70      	pop	{r4, r5, r6, pc}
 801124c:	6802      	ldr	r2, [r0, #0]
 801124e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011252:	2300      	movs	r3, #0
 8011254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011258:	e7f7      	b.n	801124a <_Balloc+0x66>
 801125a:	bf00      	nop
 801125c:	08012e28 	.word	0x08012e28
 8011260:	08012f0c 	.word	0x08012f0c

08011264 <_Bfree>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011268:	4605      	mov	r5, r0
 801126a:	460c      	mov	r4, r1
 801126c:	b976      	cbnz	r6, 801128c <_Bfree+0x28>
 801126e:	2010      	movs	r0, #16
 8011270:	f7fd fe64 	bl	800ef3c <malloc>
 8011274:	4602      	mov	r2, r0
 8011276:	6268      	str	r0, [r5, #36]	; 0x24
 8011278:	b920      	cbnz	r0, 8011284 <_Bfree+0x20>
 801127a:	4b09      	ldr	r3, [pc, #36]	; (80112a0 <_Bfree+0x3c>)
 801127c:	4809      	ldr	r0, [pc, #36]	; (80112a4 <_Bfree+0x40>)
 801127e:	218a      	movs	r1, #138	; 0x8a
 8011280:	f001 fa1c 	bl	80126bc <__assert_func>
 8011284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011288:	6006      	str	r6, [r0, #0]
 801128a:	60c6      	str	r6, [r0, #12]
 801128c:	b13c      	cbz	r4, 801129e <_Bfree+0x3a>
 801128e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011298:	6021      	str	r1, [r4, #0]
 801129a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801129e:	bd70      	pop	{r4, r5, r6, pc}
 80112a0:	08012e28 	.word	0x08012e28
 80112a4:	08012f0c 	.word	0x08012f0c

080112a8 <__multadd>:
 80112a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ac:	690d      	ldr	r5, [r1, #16]
 80112ae:	4607      	mov	r7, r0
 80112b0:	460c      	mov	r4, r1
 80112b2:	461e      	mov	r6, r3
 80112b4:	f101 0c14 	add.w	ip, r1, #20
 80112b8:	2000      	movs	r0, #0
 80112ba:	f8dc 3000 	ldr.w	r3, [ip]
 80112be:	b299      	uxth	r1, r3
 80112c0:	fb02 6101 	mla	r1, r2, r1, r6
 80112c4:	0c1e      	lsrs	r6, r3, #16
 80112c6:	0c0b      	lsrs	r3, r1, #16
 80112c8:	fb02 3306 	mla	r3, r2, r6, r3
 80112cc:	b289      	uxth	r1, r1
 80112ce:	3001      	adds	r0, #1
 80112d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80112d4:	4285      	cmp	r5, r0
 80112d6:	f84c 1b04 	str.w	r1, [ip], #4
 80112da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80112de:	dcec      	bgt.n	80112ba <__multadd+0x12>
 80112e0:	b30e      	cbz	r6, 8011326 <__multadd+0x7e>
 80112e2:	68a3      	ldr	r3, [r4, #8]
 80112e4:	42ab      	cmp	r3, r5
 80112e6:	dc19      	bgt.n	801131c <__multadd+0x74>
 80112e8:	6861      	ldr	r1, [r4, #4]
 80112ea:	4638      	mov	r0, r7
 80112ec:	3101      	adds	r1, #1
 80112ee:	f7ff ff79 	bl	80111e4 <_Balloc>
 80112f2:	4680      	mov	r8, r0
 80112f4:	b928      	cbnz	r0, 8011302 <__multadd+0x5a>
 80112f6:	4602      	mov	r2, r0
 80112f8:	4b0c      	ldr	r3, [pc, #48]	; (801132c <__multadd+0x84>)
 80112fa:	480d      	ldr	r0, [pc, #52]	; (8011330 <__multadd+0x88>)
 80112fc:	21b5      	movs	r1, #181	; 0xb5
 80112fe:	f001 f9dd 	bl	80126bc <__assert_func>
 8011302:	6922      	ldr	r2, [r4, #16]
 8011304:	3202      	adds	r2, #2
 8011306:	f104 010c 	add.w	r1, r4, #12
 801130a:	0092      	lsls	r2, r2, #2
 801130c:	300c      	adds	r0, #12
 801130e:	f7fd fe25 	bl	800ef5c <memcpy>
 8011312:	4621      	mov	r1, r4
 8011314:	4638      	mov	r0, r7
 8011316:	f7ff ffa5 	bl	8011264 <_Bfree>
 801131a:	4644      	mov	r4, r8
 801131c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011320:	3501      	adds	r5, #1
 8011322:	615e      	str	r6, [r3, #20]
 8011324:	6125      	str	r5, [r4, #16]
 8011326:	4620      	mov	r0, r4
 8011328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801132c:	08012e9a 	.word	0x08012e9a
 8011330:	08012f0c 	.word	0x08012f0c

08011334 <__hi0bits>:
 8011334:	0c03      	lsrs	r3, r0, #16
 8011336:	041b      	lsls	r3, r3, #16
 8011338:	b9d3      	cbnz	r3, 8011370 <__hi0bits+0x3c>
 801133a:	0400      	lsls	r0, r0, #16
 801133c:	2310      	movs	r3, #16
 801133e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011342:	bf04      	itt	eq
 8011344:	0200      	lsleq	r0, r0, #8
 8011346:	3308      	addeq	r3, #8
 8011348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801134c:	bf04      	itt	eq
 801134e:	0100      	lsleq	r0, r0, #4
 8011350:	3304      	addeq	r3, #4
 8011352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011356:	bf04      	itt	eq
 8011358:	0080      	lsleq	r0, r0, #2
 801135a:	3302      	addeq	r3, #2
 801135c:	2800      	cmp	r0, #0
 801135e:	db05      	blt.n	801136c <__hi0bits+0x38>
 8011360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011364:	f103 0301 	add.w	r3, r3, #1
 8011368:	bf08      	it	eq
 801136a:	2320      	moveq	r3, #32
 801136c:	4618      	mov	r0, r3
 801136e:	4770      	bx	lr
 8011370:	2300      	movs	r3, #0
 8011372:	e7e4      	b.n	801133e <__hi0bits+0xa>

08011374 <__lo0bits>:
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	f013 0207 	ands.w	r2, r3, #7
 801137a:	4601      	mov	r1, r0
 801137c:	d00b      	beq.n	8011396 <__lo0bits+0x22>
 801137e:	07da      	lsls	r2, r3, #31
 8011380:	d423      	bmi.n	80113ca <__lo0bits+0x56>
 8011382:	0798      	lsls	r0, r3, #30
 8011384:	bf49      	itett	mi
 8011386:	085b      	lsrmi	r3, r3, #1
 8011388:	089b      	lsrpl	r3, r3, #2
 801138a:	2001      	movmi	r0, #1
 801138c:	600b      	strmi	r3, [r1, #0]
 801138e:	bf5c      	itt	pl
 8011390:	600b      	strpl	r3, [r1, #0]
 8011392:	2002      	movpl	r0, #2
 8011394:	4770      	bx	lr
 8011396:	b298      	uxth	r0, r3
 8011398:	b9a8      	cbnz	r0, 80113c6 <__lo0bits+0x52>
 801139a:	0c1b      	lsrs	r3, r3, #16
 801139c:	2010      	movs	r0, #16
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	b90a      	cbnz	r2, 80113a6 <__lo0bits+0x32>
 80113a2:	3008      	adds	r0, #8
 80113a4:	0a1b      	lsrs	r3, r3, #8
 80113a6:	071a      	lsls	r2, r3, #28
 80113a8:	bf04      	itt	eq
 80113aa:	091b      	lsreq	r3, r3, #4
 80113ac:	3004      	addeq	r0, #4
 80113ae:	079a      	lsls	r2, r3, #30
 80113b0:	bf04      	itt	eq
 80113b2:	089b      	lsreq	r3, r3, #2
 80113b4:	3002      	addeq	r0, #2
 80113b6:	07da      	lsls	r2, r3, #31
 80113b8:	d403      	bmi.n	80113c2 <__lo0bits+0x4e>
 80113ba:	085b      	lsrs	r3, r3, #1
 80113bc:	f100 0001 	add.w	r0, r0, #1
 80113c0:	d005      	beq.n	80113ce <__lo0bits+0x5a>
 80113c2:	600b      	str	r3, [r1, #0]
 80113c4:	4770      	bx	lr
 80113c6:	4610      	mov	r0, r2
 80113c8:	e7e9      	b.n	801139e <__lo0bits+0x2a>
 80113ca:	2000      	movs	r0, #0
 80113cc:	4770      	bx	lr
 80113ce:	2020      	movs	r0, #32
 80113d0:	4770      	bx	lr
	...

080113d4 <__i2b>:
 80113d4:	b510      	push	{r4, lr}
 80113d6:	460c      	mov	r4, r1
 80113d8:	2101      	movs	r1, #1
 80113da:	f7ff ff03 	bl	80111e4 <_Balloc>
 80113de:	4602      	mov	r2, r0
 80113e0:	b928      	cbnz	r0, 80113ee <__i2b+0x1a>
 80113e2:	4b05      	ldr	r3, [pc, #20]	; (80113f8 <__i2b+0x24>)
 80113e4:	4805      	ldr	r0, [pc, #20]	; (80113fc <__i2b+0x28>)
 80113e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113ea:	f001 f967 	bl	80126bc <__assert_func>
 80113ee:	2301      	movs	r3, #1
 80113f0:	6144      	str	r4, [r0, #20]
 80113f2:	6103      	str	r3, [r0, #16]
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	bf00      	nop
 80113f8:	08012e9a 	.word	0x08012e9a
 80113fc:	08012f0c 	.word	0x08012f0c

08011400 <__multiply>:
 8011400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4691      	mov	r9, r2
 8011406:	690a      	ldr	r2, [r1, #16]
 8011408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801140c:	429a      	cmp	r2, r3
 801140e:	bfb8      	it	lt
 8011410:	460b      	movlt	r3, r1
 8011412:	460c      	mov	r4, r1
 8011414:	bfbc      	itt	lt
 8011416:	464c      	movlt	r4, r9
 8011418:	4699      	movlt	r9, r3
 801141a:	6927      	ldr	r7, [r4, #16]
 801141c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011420:	68a3      	ldr	r3, [r4, #8]
 8011422:	6861      	ldr	r1, [r4, #4]
 8011424:	eb07 060a 	add.w	r6, r7, sl
 8011428:	42b3      	cmp	r3, r6
 801142a:	b085      	sub	sp, #20
 801142c:	bfb8      	it	lt
 801142e:	3101      	addlt	r1, #1
 8011430:	f7ff fed8 	bl	80111e4 <_Balloc>
 8011434:	b930      	cbnz	r0, 8011444 <__multiply+0x44>
 8011436:	4602      	mov	r2, r0
 8011438:	4b44      	ldr	r3, [pc, #272]	; (801154c <__multiply+0x14c>)
 801143a:	4845      	ldr	r0, [pc, #276]	; (8011550 <__multiply+0x150>)
 801143c:	f240 115d 	movw	r1, #349	; 0x15d
 8011440:	f001 f93c 	bl	80126bc <__assert_func>
 8011444:	f100 0514 	add.w	r5, r0, #20
 8011448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801144c:	462b      	mov	r3, r5
 801144e:	2200      	movs	r2, #0
 8011450:	4543      	cmp	r3, r8
 8011452:	d321      	bcc.n	8011498 <__multiply+0x98>
 8011454:	f104 0314 	add.w	r3, r4, #20
 8011458:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801145c:	f109 0314 	add.w	r3, r9, #20
 8011460:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011464:	9202      	str	r2, [sp, #8]
 8011466:	1b3a      	subs	r2, r7, r4
 8011468:	3a15      	subs	r2, #21
 801146a:	f022 0203 	bic.w	r2, r2, #3
 801146e:	3204      	adds	r2, #4
 8011470:	f104 0115 	add.w	r1, r4, #21
 8011474:	428f      	cmp	r7, r1
 8011476:	bf38      	it	cc
 8011478:	2204      	movcc	r2, #4
 801147a:	9201      	str	r2, [sp, #4]
 801147c:	9a02      	ldr	r2, [sp, #8]
 801147e:	9303      	str	r3, [sp, #12]
 8011480:	429a      	cmp	r2, r3
 8011482:	d80c      	bhi.n	801149e <__multiply+0x9e>
 8011484:	2e00      	cmp	r6, #0
 8011486:	dd03      	ble.n	8011490 <__multiply+0x90>
 8011488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801148c:	2b00      	cmp	r3, #0
 801148e:	d05a      	beq.n	8011546 <__multiply+0x146>
 8011490:	6106      	str	r6, [r0, #16]
 8011492:	b005      	add	sp, #20
 8011494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011498:	f843 2b04 	str.w	r2, [r3], #4
 801149c:	e7d8      	b.n	8011450 <__multiply+0x50>
 801149e:	f8b3 a000 	ldrh.w	sl, [r3]
 80114a2:	f1ba 0f00 	cmp.w	sl, #0
 80114a6:	d024      	beq.n	80114f2 <__multiply+0xf2>
 80114a8:	f104 0e14 	add.w	lr, r4, #20
 80114ac:	46a9      	mov	r9, r5
 80114ae:	f04f 0c00 	mov.w	ip, #0
 80114b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80114b6:	f8d9 1000 	ldr.w	r1, [r9]
 80114ba:	fa1f fb82 	uxth.w	fp, r2
 80114be:	b289      	uxth	r1, r1
 80114c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80114c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80114c8:	f8d9 2000 	ldr.w	r2, [r9]
 80114cc:	4461      	add	r1, ip
 80114ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80114d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80114da:	b289      	uxth	r1, r1
 80114dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80114e0:	4577      	cmp	r7, lr
 80114e2:	f849 1b04 	str.w	r1, [r9], #4
 80114e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80114ea:	d8e2      	bhi.n	80114b2 <__multiply+0xb2>
 80114ec:	9a01      	ldr	r2, [sp, #4]
 80114ee:	f845 c002 	str.w	ip, [r5, r2]
 80114f2:	9a03      	ldr	r2, [sp, #12]
 80114f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114f8:	3304      	adds	r3, #4
 80114fa:	f1b9 0f00 	cmp.w	r9, #0
 80114fe:	d020      	beq.n	8011542 <__multiply+0x142>
 8011500:	6829      	ldr	r1, [r5, #0]
 8011502:	f104 0c14 	add.w	ip, r4, #20
 8011506:	46ae      	mov	lr, r5
 8011508:	f04f 0a00 	mov.w	sl, #0
 801150c:	f8bc b000 	ldrh.w	fp, [ip]
 8011510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011514:	fb09 220b 	mla	r2, r9, fp, r2
 8011518:	4492      	add	sl, r2
 801151a:	b289      	uxth	r1, r1
 801151c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011520:	f84e 1b04 	str.w	r1, [lr], #4
 8011524:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011528:	f8be 1000 	ldrh.w	r1, [lr]
 801152c:	0c12      	lsrs	r2, r2, #16
 801152e:	fb09 1102 	mla	r1, r9, r2, r1
 8011532:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011536:	4567      	cmp	r7, ip
 8011538:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801153c:	d8e6      	bhi.n	801150c <__multiply+0x10c>
 801153e:	9a01      	ldr	r2, [sp, #4]
 8011540:	50a9      	str	r1, [r5, r2]
 8011542:	3504      	adds	r5, #4
 8011544:	e79a      	b.n	801147c <__multiply+0x7c>
 8011546:	3e01      	subs	r6, #1
 8011548:	e79c      	b.n	8011484 <__multiply+0x84>
 801154a:	bf00      	nop
 801154c:	08012e9a 	.word	0x08012e9a
 8011550:	08012f0c 	.word	0x08012f0c

08011554 <__pow5mult>:
 8011554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011558:	4615      	mov	r5, r2
 801155a:	f012 0203 	ands.w	r2, r2, #3
 801155e:	4606      	mov	r6, r0
 8011560:	460f      	mov	r7, r1
 8011562:	d007      	beq.n	8011574 <__pow5mult+0x20>
 8011564:	4c25      	ldr	r4, [pc, #148]	; (80115fc <__pow5mult+0xa8>)
 8011566:	3a01      	subs	r2, #1
 8011568:	2300      	movs	r3, #0
 801156a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801156e:	f7ff fe9b 	bl	80112a8 <__multadd>
 8011572:	4607      	mov	r7, r0
 8011574:	10ad      	asrs	r5, r5, #2
 8011576:	d03d      	beq.n	80115f4 <__pow5mult+0xa0>
 8011578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801157a:	b97c      	cbnz	r4, 801159c <__pow5mult+0x48>
 801157c:	2010      	movs	r0, #16
 801157e:	f7fd fcdd 	bl	800ef3c <malloc>
 8011582:	4602      	mov	r2, r0
 8011584:	6270      	str	r0, [r6, #36]	; 0x24
 8011586:	b928      	cbnz	r0, 8011594 <__pow5mult+0x40>
 8011588:	4b1d      	ldr	r3, [pc, #116]	; (8011600 <__pow5mult+0xac>)
 801158a:	481e      	ldr	r0, [pc, #120]	; (8011604 <__pow5mult+0xb0>)
 801158c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011590:	f001 f894 	bl	80126bc <__assert_func>
 8011594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011598:	6004      	str	r4, [r0, #0]
 801159a:	60c4      	str	r4, [r0, #12]
 801159c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115a4:	b94c      	cbnz	r4, 80115ba <__pow5mult+0x66>
 80115a6:	f240 2171 	movw	r1, #625	; 0x271
 80115aa:	4630      	mov	r0, r6
 80115ac:	f7ff ff12 	bl	80113d4 <__i2b>
 80115b0:	2300      	movs	r3, #0
 80115b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80115b6:	4604      	mov	r4, r0
 80115b8:	6003      	str	r3, [r0, #0]
 80115ba:	f04f 0900 	mov.w	r9, #0
 80115be:	07eb      	lsls	r3, r5, #31
 80115c0:	d50a      	bpl.n	80115d8 <__pow5mult+0x84>
 80115c2:	4639      	mov	r1, r7
 80115c4:	4622      	mov	r2, r4
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ff1a 	bl	8011400 <__multiply>
 80115cc:	4639      	mov	r1, r7
 80115ce:	4680      	mov	r8, r0
 80115d0:	4630      	mov	r0, r6
 80115d2:	f7ff fe47 	bl	8011264 <_Bfree>
 80115d6:	4647      	mov	r7, r8
 80115d8:	106d      	asrs	r5, r5, #1
 80115da:	d00b      	beq.n	80115f4 <__pow5mult+0xa0>
 80115dc:	6820      	ldr	r0, [r4, #0]
 80115de:	b938      	cbnz	r0, 80115f0 <__pow5mult+0x9c>
 80115e0:	4622      	mov	r2, r4
 80115e2:	4621      	mov	r1, r4
 80115e4:	4630      	mov	r0, r6
 80115e6:	f7ff ff0b 	bl	8011400 <__multiply>
 80115ea:	6020      	str	r0, [r4, #0]
 80115ec:	f8c0 9000 	str.w	r9, [r0]
 80115f0:	4604      	mov	r4, r0
 80115f2:	e7e4      	b.n	80115be <__pow5mult+0x6a>
 80115f4:	4638      	mov	r0, r7
 80115f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115fa:	bf00      	nop
 80115fc:	08013058 	.word	0x08013058
 8011600:	08012e28 	.word	0x08012e28
 8011604:	08012f0c 	.word	0x08012f0c

08011608 <__lshift>:
 8011608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801160c:	460c      	mov	r4, r1
 801160e:	6849      	ldr	r1, [r1, #4]
 8011610:	6923      	ldr	r3, [r4, #16]
 8011612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011616:	68a3      	ldr	r3, [r4, #8]
 8011618:	4607      	mov	r7, r0
 801161a:	4691      	mov	r9, r2
 801161c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011620:	f108 0601 	add.w	r6, r8, #1
 8011624:	42b3      	cmp	r3, r6
 8011626:	db0b      	blt.n	8011640 <__lshift+0x38>
 8011628:	4638      	mov	r0, r7
 801162a:	f7ff fddb 	bl	80111e4 <_Balloc>
 801162e:	4605      	mov	r5, r0
 8011630:	b948      	cbnz	r0, 8011646 <__lshift+0x3e>
 8011632:	4602      	mov	r2, r0
 8011634:	4b2a      	ldr	r3, [pc, #168]	; (80116e0 <__lshift+0xd8>)
 8011636:	482b      	ldr	r0, [pc, #172]	; (80116e4 <__lshift+0xdc>)
 8011638:	f240 11d9 	movw	r1, #473	; 0x1d9
 801163c:	f001 f83e 	bl	80126bc <__assert_func>
 8011640:	3101      	adds	r1, #1
 8011642:	005b      	lsls	r3, r3, #1
 8011644:	e7ee      	b.n	8011624 <__lshift+0x1c>
 8011646:	2300      	movs	r3, #0
 8011648:	f100 0114 	add.w	r1, r0, #20
 801164c:	f100 0210 	add.w	r2, r0, #16
 8011650:	4618      	mov	r0, r3
 8011652:	4553      	cmp	r3, sl
 8011654:	db37      	blt.n	80116c6 <__lshift+0xbe>
 8011656:	6920      	ldr	r0, [r4, #16]
 8011658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801165c:	f104 0314 	add.w	r3, r4, #20
 8011660:	f019 091f 	ands.w	r9, r9, #31
 8011664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011668:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801166c:	d02f      	beq.n	80116ce <__lshift+0xc6>
 801166e:	f1c9 0e20 	rsb	lr, r9, #32
 8011672:	468a      	mov	sl, r1
 8011674:	f04f 0c00 	mov.w	ip, #0
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	fa02 f209 	lsl.w	r2, r2, r9
 801167e:	ea42 020c 	orr.w	r2, r2, ip
 8011682:	f84a 2b04 	str.w	r2, [sl], #4
 8011686:	f853 2b04 	ldr.w	r2, [r3], #4
 801168a:	4298      	cmp	r0, r3
 801168c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011690:	d8f2      	bhi.n	8011678 <__lshift+0x70>
 8011692:	1b03      	subs	r3, r0, r4
 8011694:	3b15      	subs	r3, #21
 8011696:	f023 0303 	bic.w	r3, r3, #3
 801169a:	3304      	adds	r3, #4
 801169c:	f104 0215 	add.w	r2, r4, #21
 80116a0:	4290      	cmp	r0, r2
 80116a2:	bf38      	it	cc
 80116a4:	2304      	movcc	r3, #4
 80116a6:	f841 c003 	str.w	ip, [r1, r3]
 80116aa:	f1bc 0f00 	cmp.w	ip, #0
 80116ae:	d001      	beq.n	80116b4 <__lshift+0xac>
 80116b0:	f108 0602 	add.w	r6, r8, #2
 80116b4:	3e01      	subs	r6, #1
 80116b6:	4638      	mov	r0, r7
 80116b8:	612e      	str	r6, [r5, #16]
 80116ba:	4621      	mov	r1, r4
 80116bc:	f7ff fdd2 	bl	8011264 <_Bfree>
 80116c0:	4628      	mov	r0, r5
 80116c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ca:	3301      	adds	r3, #1
 80116cc:	e7c1      	b.n	8011652 <__lshift+0x4a>
 80116ce:	3904      	subs	r1, #4
 80116d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80116d8:	4298      	cmp	r0, r3
 80116da:	d8f9      	bhi.n	80116d0 <__lshift+0xc8>
 80116dc:	e7ea      	b.n	80116b4 <__lshift+0xac>
 80116de:	bf00      	nop
 80116e0:	08012e9a 	.word	0x08012e9a
 80116e4:	08012f0c 	.word	0x08012f0c

080116e8 <__mcmp>:
 80116e8:	b530      	push	{r4, r5, lr}
 80116ea:	6902      	ldr	r2, [r0, #16]
 80116ec:	690c      	ldr	r4, [r1, #16]
 80116ee:	1b12      	subs	r2, r2, r4
 80116f0:	d10e      	bne.n	8011710 <__mcmp+0x28>
 80116f2:	f100 0314 	add.w	r3, r0, #20
 80116f6:	3114      	adds	r1, #20
 80116f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011700:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011704:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011708:	42a5      	cmp	r5, r4
 801170a:	d003      	beq.n	8011714 <__mcmp+0x2c>
 801170c:	d305      	bcc.n	801171a <__mcmp+0x32>
 801170e:	2201      	movs	r2, #1
 8011710:	4610      	mov	r0, r2
 8011712:	bd30      	pop	{r4, r5, pc}
 8011714:	4283      	cmp	r3, r0
 8011716:	d3f3      	bcc.n	8011700 <__mcmp+0x18>
 8011718:	e7fa      	b.n	8011710 <__mcmp+0x28>
 801171a:	f04f 32ff 	mov.w	r2, #4294967295
 801171e:	e7f7      	b.n	8011710 <__mcmp+0x28>

08011720 <__mdiff>:
 8011720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011724:	460c      	mov	r4, r1
 8011726:	4606      	mov	r6, r0
 8011728:	4611      	mov	r1, r2
 801172a:	4620      	mov	r0, r4
 801172c:	4690      	mov	r8, r2
 801172e:	f7ff ffdb 	bl	80116e8 <__mcmp>
 8011732:	1e05      	subs	r5, r0, #0
 8011734:	d110      	bne.n	8011758 <__mdiff+0x38>
 8011736:	4629      	mov	r1, r5
 8011738:	4630      	mov	r0, r6
 801173a:	f7ff fd53 	bl	80111e4 <_Balloc>
 801173e:	b930      	cbnz	r0, 801174e <__mdiff+0x2e>
 8011740:	4b3a      	ldr	r3, [pc, #232]	; (801182c <__mdiff+0x10c>)
 8011742:	4602      	mov	r2, r0
 8011744:	f240 2132 	movw	r1, #562	; 0x232
 8011748:	4839      	ldr	r0, [pc, #228]	; (8011830 <__mdiff+0x110>)
 801174a:	f000 ffb7 	bl	80126bc <__assert_func>
 801174e:	2301      	movs	r3, #1
 8011750:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011758:	bfa4      	itt	ge
 801175a:	4643      	movge	r3, r8
 801175c:	46a0      	movge	r8, r4
 801175e:	4630      	mov	r0, r6
 8011760:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011764:	bfa6      	itte	ge
 8011766:	461c      	movge	r4, r3
 8011768:	2500      	movge	r5, #0
 801176a:	2501      	movlt	r5, #1
 801176c:	f7ff fd3a 	bl	80111e4 <_Balloc>
 8011770:	b920      	cbnz	r0, 801177c <__mdiff+0x5c>
 8011772:	4b2e      	ldr	r3, [pc, #184]	; (801182c <__mdiff+0x10c>)
 8011774:	4602      	mov	r2, r0
 8011776:	f44f 7110 	mov.w	r1, #576	; 0x240
 801177a:	e7e5      	b.n	8011748 <__mdiff+0x28>
 801177c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011780:	6926      	ldr	r6, [r4, #16]
 8011782:	60c5      	str	r5, [r0, #12]
 8011784:	f104 0914 	add.w	r9, r4, #20
 8011788:	f108 0514 	add.w	r5, r8, #20
 801178c:	f100 0e14 	add.w	lr, r0, #20
 8011790:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011798:	f108 0210 	add.w	r2, r8, #16
 801179c:	46f2      	mov	sl, lr
 801179e:	2100      	movs	r1, #0
 80117a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80117a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117a8:	fa1f f883 	uxth.w	r8, r3
 80117ac:	fa11 f18b 	uxtah	r1, r1, fp
 80117b0:	0c1b      	lsrs	r3, r3, #16
 80117b2:	eba1 0808 	sub.w	r8, r1, r8
 80117b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117be:	fa1f f888 	uxth.w	r8, r8
 80117c2:	1419      	asrs	r1, r3, #16
 80117c4:	454e      	cmp	r6, r9
 80117c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117ca:	f84a 3b04 	str.w	r3, [sl], #4
 80117ce:	d8e7      	bhi.n	80117a0 <__mdiff+0x80>
 80117d0:	1b33      	subs	r3, r6, r4
 80117d2:	3b15      	subs	r3, #21
 80117d4:	f023 0303 	bic.w	r3, r3, #3
 80117d8:	3304      	adds	r3, #4
 80117da:	3415      	adds	r4, #21
 80117dc:	42a6      	cmp	r6, r4
 80117de:	bf38      	it	cc
 80117e0:	2304      	movcc	r3, #4
 80117e2:	441d      	add	r5, r3
 80117e4:	4473      	add	r3, lr
 80117e6:	469e      	mov	lr, r3
 80117e8:	462e      	mov	r6, r5
 80117ea:	4566      	cmp	r6, ip
 80117ec:	d30e      	bcc.n	801180c <__mdiff+0xec>
 80117ee:	f10c 0203 	add.w	r2, ip, #3
 80117f2:	1b52      	subs	r2, r2, r5
 80117f4:	f022 0203 	bic.w	r2, r2, #3
 80117f8:	3d03      	subs	r5, #3
 80117fa:	45ac      	cmp	ip, r5
 80117fc:	bf38      	it	cc
 80117fe:	2200      	movcc	r2, #0
 8011800:	441a      	add	r2, r3
 8011802:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011806:	b17b      	cbz	r3, 8011828 <__mdiff+0x108>
 8011808:	6107      	str	r7, [r0, #16]
 801180a:	e7a3      	b.n	8011754 <__mdiff+0x34>
 801180c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011810:	fa11 f288 	uxtah	r2, r1, r8
 8011814:	1414      	asrs	r4, r2, #16
 8011816:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801181a:	b292      	uxth	r2, r2
 801181c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011820:	f84e 2b04 	str.w	r2, [lr], #4
 8011824:	1421      	asrs	r1, r4, #16
 8011826:	e7e0      	b.n	80117ea <__mdiff+0xca>
 8011828:	3f01      	subs	r7, #1
 801182a:	e7ea      	b.n	8011802 <__mdiff+0xe2>
 801182c:	08012e9a 	.word	0x08012e9a
 8011830:	08012f0c 	.word	0x08012f0c

08011834 <__d2b>:
 8011834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011838:	4689      	mov	r9, r1
 801183a:	2101      	movs	r1, #1
 801183c:	ec57 6b10 	vmov	r6, r7, d0
 8011840:	4690      	mov	r8, r2
 8011842:	f7ff fccf 	bl	80111e4 <_Balloc>
 8011846:	4604      	mov	r4, r0
 8011848:	b930      	cbnz	r0, 8011858 <__d2b+0x24>
 801184a:	4602      	mov	r2, r0
 801184c:	4b25      	ldr	r3, [pc, #148]	; (80118e4 <__d2b+0xb0>)
 801184e:	4826      	ldr	r0, [pc, #152]	; (80118e8 <__d2b+0xb4>)
 8011850:	f240 310a 	movw	r1, #778	; 0x30a
 8011854:	f000 ff32 	bl	80126bc <__assert_func>
 8011858:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801185c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011860:	bb35      	cbnz	r5, 80118b0 <__d2b+0x7c>
 8011862:	2e00      	cmp	r6, #0
 8011864:	9301      	str	r3, [sp, #4]
 8011866:	d028      	beq.n	80118ba <__d2b+0x86>
 8011868:	4668      	mov	r0, sp
 801186a:	9600      	str	r6, [sp, #0]
 801186c:	f7ff fd82 	bl	8011374 <__lo0bits>
 8011870:	9900      	ldr	r1, [sp, #0]
 8011872:	b300      	cbz	r0, 80118b6 <__d2b+0x82>
 8011874:	9a01      	ldr	r2, [sp, #4]
 8011876:	f1c0 0320 	rsb	r3, r0, #32
 801187a:	fa02 f303 	lsl.w	r3, r2, r3
 801187e:	430b      	orrs	r3, r1
 8011880:	40c2      	lsrs	r2, r0
 8011882:	6163      	str	r3, [r4, #20]
 8011884:	9201      	str	r2, [sp, #4]
 8011886:	9b01      	ldr	r3, [sp, #4]
 8011888:	61a3      	str	r3, [r4, #24]
 801188a:	2b00      	cmp	r3, #0
 801188c:	bf14      	ite	ne
 801188e:	2202      	movne	r2, #2
 8011890:	2201      	moveq	r2, #1
 8011892:	6122      	str	r2, [r4, #16]
 8011894:	b1d5      	cbz	r5, 80118cc <__d2b+0x98>
 8011896:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801189a:	4405      	add	r5, r0
 801189c:	f8c9 5000 	str.w	r5, [r9]
 80118a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118a4:	f8c8 0000 	str.w	r0, [r8]
 80118a8:	4620      	mov	r0, r4
 80118aa:	b003      	add	sp, #12
 80118ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118b4:	e7d5      	b.n	8011862 <__d2b+0x2e>
 80118b6:	6161      	str	r1, [r4, #20]
 80118b8:	e7e5      	b.n	8011886 <__d2b+0x52>
 80118ba:	a801      	add	r0, sp, #4
 80118bc:	f7ff fd5a 	bl	8011374 <__lo0bits>
 80118c0:	9b01      	ldr	r3, [sp, #4]
 80118c2:	6163      	str	r3, [r4, #20]
 80118c4:	2201      	movs	r2, #1
 80118c6:	6122      	str	r2, [r4, #16]
 80118c8:	3020      	adds	r0, #32
 80118ca:	e7e3      	b.n	8011894 <__d2b+0x60>
 80118cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80118d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80118d4:	f8c9 0000 	str.w	r0, [r9]
 80118d8:	6918      	ldr	r0, [r3, #16]
 80118da:	f7ff fd2b 	bl	8011334 <__hi0bits>
 80118de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80118e2:	e7df      	b.n	80118a4 <__d2b+0x70>
 80118e4:	08012e9a 	.word	0x08012e9a
 80118e8:	08012f0c 	.word	0x08012f0c

080118ec <_calloc_r>:
 80118ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118ee:	fba1 2402 	umull	r2, r4, r1, r2
 80118f2:	b94c      	cbnz	r4, 8011908 <_calloc_r+0x1c>
 80118f4:	4611      	mov	r1, r2
 80118f6:	9201      	str	r2, [sp, #4]
 80118f8:	f7fd fbb2 	bl	800f060 <_malloc_r>
 80118fc:	9a01      	ldr	r2, [sp, #4]
 80118fe:	4605      	mov	r5, r0
 8011900:	b930      	cbnz	r0, 8011910 <_calloc_r+0x24>
 8011902:	4628      	mov	r0, r5
 8011904:	b003      	add	sp, #12
 8011906:	bd30      	pop	{r4, r5, pc}
 8011908:	220c      	movs	r2, #12
 801190a:	6002      	str	r2, [r0, #0]
 801190c:	2500      	movs	r5, #0
 801190e:	e7f8      	b.n	8011902 <_calloc_r+0x16>
 8011910:	4621      	mov	r1, r4
 8011912:	f7fd fb31 	bl	800ef78 <memset>
 8011916:	e7f4      	b.n	8011902 <_calloc_r+0x16>

08011918 <__ssputs_r>:
 8011918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801191c:	688e      	ldr	r6, [r1, #8]
 801191e:	429e      	cmp	r6, r3
 8011920:	4682      	mov	sl, r0
 8011922:	460c      	mov	r4, r1
 8011924:	4690      	mov	r8, r2
 8011926:	461f      	mov	r7, r3
 8011928:	d838      	bhi.n	801199c <__ssputs_r+0x84>
 801192a:	898a      	ldrh	r2, [r1, #12]
 801192c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011930:	d032      	beq.n	8011998 <__ssputs_r+0x80>
 8011932:	6825      	ldr	r5, [r4, #0]
 8011934:	6909      	ldr	r1, [r1, #16]
 8011936:	eba5 0901 	sub.w	r9, r5, r1
 801193a:	6965      	ldr	r5, [r4, #20]
 801193c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011944:	3301      	adds	r3, #1
 8011946:	444b      	add	r3, r9
 8011948:	106d      	asrs	r5, r5, #1
 801194a:	429d      	cmp	r5, r3
 801194c:	bf38      	it	cc
 801194e:	461d      	movcc	r5, r3
 8011950:	0553      	lsls	r3, r2, #21
 8011952:	d531      	bpl.n	80119b8 <__ssputs_r+0xa0>
 8011954:	4629      	mov	r1, r5
 8011956:	f7fd fb83 	bl	800f060 <_malloc_r>
 801195a:	4606      	mov	r6, r0
 801195c:	b950      	cbnz	r0, 8011974 <__ssputs_r+0x5c>
 801195e:	230c      	movs	r3, #12
 8011960:	f8ca 3000 	str.w	r3, [sl]
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801196a:	81a3      	strh	r3, [r4, #12]
 801196c:	f04f 30ff 	mov.w	r0, #4294967295
 8011970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011974:	6921      	ldr	r1, [r4, #16]
 8011976:	464a      	mov	r2, r9
 8011978:	f7fd faf0 	bl	800ef5c <memcpy>
 801197c:	89a3      	ldrh	r3, [r4, #12]
 801197e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011986:	81a3      	strh	r3, [r4, #12]
 8011988:	6126      	str	r6, [r4, #16]
 801198a:	6165      	str	r5, [r4, #20]
 801198c:	444e      	add	r6, r9
 801198e:	eba5 0509 	sub.w	r5, r5, r9
 8011992:	6026      	str	r6, [r4, #0]
 8011994:	60a5      	str	r5, [r4, #8]
 8011996:	463e      	mov	r6, r7
 8011998:	42be      	cmp	r6, r7
 801199a:	d900      	bls.n	801199e <__ssputs_r+0x86>
 801199c:	463e      	mov	r6, r7
 801199e:	6820      	ldr	r0, [r4, #0]
 80119a0:	4632      	mov	r2, r6
 80119a2:	4641      	mov	r1, r8
 80119a4:	f000 feee 	bl	8012784 <memmove>
 80119a8:	68a3      	ldr	r3, [r4, #8]
 80119aa:	1b9b      	subs	r3, r3, r6
 80119ac:	60a3      	str	r3, [r4, #8]
 80119ae:	6823      	ldr	r3, [r4, #0]
 80119b0:	4433      	add	r3, r6
 80119b2:	6023      	str	r3, [r4, #0]
 80119b4:	2000      	movs	r0, #0
 80119b6:	e7db      	b.n	8011970 <__ssputs_r+0x58>
 80119b8:	462a      	mov	r2, r5
 80119ba:	f000 fefd 	bl	80127b8 <_realloc_r>
 80119be:	4606      	mov	r6, r0
 80119c0:	2800      	cmp	r0, #0
 80119c2:	d1e1      	bne.n	8011988 <__ssputs_r+0x70>
 80119c4:	6921      	ldr	r1, [r4, #16]
 80119c6:	4650      	mov	r0, sl
 80119c8:	f7fd fade 	bl	800ef88 <_free_r>
 80119cc:	e7c7      	b.n	801195e <__ssputs_r+0x46>
	...

080119d0 <_svfiprintf_r>:
 80119d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	4698      	mov	r8, r3
 80119d6:	898b      	ldrh	r3, [r1, #12]
 80119d8:	061b      	lsls	r3, r3, #24
 80119da:	b09d      	sub	sp, #116	; 0x74
 80119dc:	4607      	mov	r7, r0
 80119de:	460d      	mov	r5, r1
 80119e0:	4614      	mov	r4, r2
 80119e2:	d50e      	bpl.n	8011a02 <_svfiprintf_r+0x32>
 80119e4:	690b      	ldr	r3, [r1, #16]
 80119e6:	b963      	cbnz	r3, 8011a02 <_svfiprintf_r+0x32>
 80119e8:	2140      	movs	r1, #64	; 0x40
 80119ea:	f7fd fb39 	bl	800f060 <_malloc_r>
 80119ee:	6028      	str	r0, [r5, #0]
 80119f0:	6128      	str	r0, [r5, #16]
 80119f2:	b920      	cbnz	r0, 80119fe <_svfiprintf_r+0x2e>
 80119f4:	230c      	movs	r3, #12
 80119f6:	603b      	str	r3, [r7, #0]
 80119f8:	f04f 30ff 	mov.w	r0, #4294967295
 80119fc:	e0d1      	b.n	8011ba2 <_svfiprintf_r+0x1d2>
 80119fe:	2340      	movs	r3, #64	; 0x40
 8011a00:	616b      	str	r3, [r5, #20]
 8011a02:	2300      	movs	r3, #0
 8011a04:	9309      	str	r3, [sp, #36]	; 0x24
 8011a06:	2320      	movs	r3, #32
 8011a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a10:	2330      	movs	r3, #48	; 0x30
 8011a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011bbc <_svfiprintf_r+0x1ec>
 8011a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a1a:	f04f 0901 	mov.w	r9, #1
 8011a1e:	4623      	mov	r3, r4
 8011a20:	469a      	mov	sl, r3
 8011a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a26:	b10a      	cbz	r2, 8011a2c <_svfiprintf_r+0x5c>
 8011a28:	2a25      	cmp	r2, #37	; 0x25
 8011a2a:	d1f9      	bne.n	8011a20 <_svfiprintf_r+0x50>
 8011a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8011a30:	d00b      	beq.n	8011a4a <_svfiprintf_r+0x7a>
 8011a32:	465b      	mov	r3, fp
 8011a34:	4622      	mov	r2, r4
 8011a36:	4629      	mov	r1, r5
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f7ff ff6d 	bl	8011918 <__ssputs_r>
 8011a3e:	3001      	adds	r0, #1
 8011a40:	f000 80aa 	beq.w	8011b98 <_svfiprintf_r+0x1c8>
 8011a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a46:	445a      	add	r2, fp
 8011a48:	9209      	str	r2, [sp, #36]	; 0x24
 8011a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 80a2 	beq.w	8011b98 <_svfiprintf_r+0x1c8>
 8011a54:	2300      	movs	r3, #0
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a5e:	f10a 0a01 	add.w	sl, sl, #1
 8011a62:	9304      	str	r3, [sp, #16]
 8011a64:	9307      	str	r3, [sp, #28]
 8011a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8011a6c:	4654      	mov	r4, sl
 8011a6e:	2205      	movs	r2, #5
 8011a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a74:	4851      	ldr	r0, [pc, #324]	; (8011bbc <_svfiprintf_r+0x1ec>)
 8011a76:	f7ee fbc3 	bl	8000200 <memchr>
 8011a7a:	9a04      	ldr	r2, [sp, #16]
 8011a7c:	b9d8      	cbnz	r0, 8011ab6 <_svfiprintf_r+0xe6>
 8011a7e:	06d0      	lsls	r0, r2, #27
 8011a80:	bf44      	itt	mi
 8011a82:	2320      	movmi	r3, #32
 8011a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a88:	0711      	lsls	r1, r2, #28
 8011a8a:	bf44      	itt	mi
 8011a8c:	232b      	movmi	r3, #43	; 0x2b
 8011a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a92:	f89a 3000 	ldrb.w	r3, [sl]
 8011a96:	2b2a      	cmp	r3, #42	; 0x2a
 8011a98:	d015      	beq.n	8011ac6 <_svfiprintf_r+0xf6>
 8011a9a:	9a07      	ldr	r2, [sp, #28]
 8011a9c:	4654      	mov	r4, sl
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	f04f 0c0a 	mov.w	ip, #10
 8011aa4:	4621      	mov	r1, r4
 8011aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011aaa:	3b30      	subs	r3, #48	; 0x30
 8011aac:	2b09      	cmp	r3, #9
 8011aae:	d94e      	bls.n	8011b4e <_svfiprintf_r+0x17e>
 8011ab0:	b1b0      	cbz	r0, 8011ae0 <_svfiprintf_r+0x110>
 8011ab2:	9207      	str	r2, [sp, #28]
 8011ab4:	e014      	b.n	8011ae0 <_svfiprintf_r+0x110>
 8011ab6:	eba0 0308 	sub.w	r3, r0, r8
 8011aba:	fa09 f303 	lsl.w	r3, r9, r3
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	9304      	str	r3, [sp, #16]
 8011ac2:	46a2      	mov	sl, r4
 8011ac4:	e7d2      	b.n	8011a6c <_svfiprintf_r+0x9c>
 8011ac6:	9b03      	ldr	r3, [sp, #12]
 8011ac8:	1d19      	adds	r1, r3, #4
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	9103      	str	r1, [sp, #12]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	bfbb      	ittet	lt
 8011ad2:	425b      	neglt	r3, r3
 8011ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ad8:	9307      	strge	r3, [sp, #28]
 8011ada:	9307      	strlt	r3, [sp, #28]
 8011adc:	bfb8      	it	lt
 8011ade:	9204      	strlt	r2, [sp, #16]
 8011ae0:	7823      	ldrb	r3, [r4, #0]
 8011ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ae4:	d10c      	bne.n	8011b00 <_svfiprintf_r+0x130>
 8011ae6:	7863      	ldrb	r3, [r4, #1]
 8011ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8011aea:	d135      	bne.n	8011b58 <_svfiprintf_r+0x188>
 8011aec:	9b03      	ldr	r3, [sp, #12]
 8011aee:	1d1a      	adds	r2, r3, #4
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	9203      	str	r2, [sp, #12]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	bfb8      	it	lt
 8011af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011afc:	3402      	adds	r4, #2
 8011afe:	9305      	str	r3, [sp, #20]
 8011b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bcc <_svfiprintf_r+0x1fc>
 8011b04:	7821      	ldrb	r1, [r4, #0]
 8011b06:	2203      	movs	r2, #3
 8011b08:	4650      	mov	r0, sl
 8011b0a:	f7ee fb79 	bl	8000200 <memchr>
 8011b0e:	b140      	cbz	r0, 8011b22 <_svfiprintf_r+0x152>
 8011b10:	2340      	movs	r3, #64	; 0x40
 8011b12:	eba0 000a 	sub.w	r0, r0, sl
 8011b16:	fa03 f000 	lsl.w	r0, r3, r0
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	4303      	orrs	r3, r0
 8011b1e:	3401      	adds	r4, #1
 8011b20:	9304      	str	r3, [sp, #16]
 8011b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b26:	4826      	ldr	r0, [pc, #152]	; (8011bc0 <_svfiprintf_r+0x1f0>)
 8011b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b2c:	2206      	movs	r2, #6
 8011b2e:	f7ee fb67 	bl	8000200 <memchr>
 8011b32:	2800      	cmp	r0, #0
 8011b34:	d038      	beq.n	8011ba8 <_svfiprintf_r+0x1d8>
 8011b36:	4b23      	ldr	r3, [pc, #140]	; (8011bc4 <_svfiprintf_r+0x1f4>)
 8011b38:	bb1b      	cbnz	r3, 8011b82 <_svfiprintf_r+0x1b2>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	3307      	adds	r3, #7
 8011b3e:	f023 0307 	bic.w	r3, r3, #7
 8011b42:	3308      	adds	r3, #8
 8011b44:	9303      	str	r3, [sp, #12]
 8011b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b48:	4433      	add	r3, r6
 8011b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011b4c:	e767      	b.n	8011a1e <_svfiprintf_r+0x4e>
 8011b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b52:	460c      	mov	r4, r1
 8011b54:	2001      	movs	r0, #1
 8011b56:	e7a5      	b.n	8011aa4 <_svfiprintf_r+0xd4>
 8011b58:	2300      	movs	r3, #0
 8011b5a:	3401      	adds	r4, #1
 8011b5c:	9305      	str	r3, [sp, #20]
 8011b5e:	4619      	mov	r1, r3
 8011b60:	f04f 0c0a 	mov.w	ip, #10
 8011b64:	4620      	mov	r0, r4
 8011b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b6a:	3a30      	subs	r2, #48	; 0x30
 8011b6c:	2a09      	cmp	r2, #9
 8011b6e:	d903      	bls.n	8011b78 <_svfiprintf_r+0x1a8>
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d0c5      	beq.n	8011b00 <_svfiprintf_r+0x130>
 8011b74:	9105      	str	r1, [sp, #20]
 8011b76:	e7c3      	b.n	8011b00 <_svfiprintf_r+0x130>
 8011b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	2301      	movs	r3, #1
 8011b80:	e7f0      	b.n	8011b64 <_svfiprintf_r+0x194>
 8011b82:	ab03      	add	r3, sp, #12
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	462a      	mov	r2, r5
 8011b88:	4b0f      	ldr	r3, [pc, #60]	; (8011bc8 <_svfiprintf_r+0x1f8>)
 8011b8a:	a904      	add	r1, sp, #16
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	f7fd fb7b 	bl	800f288 <_printf_float>
 8011b92:	1c42      	adds	r2, r0, #1
 8011b94:	4606      	mov	r6, r0
 8011b96:	d1d6      	bne.n	8011b46 <_svfiprintf_r+0x176>
 8011b98:	89ab      	ldrh	r3, [r5, #12]
 8011b9a:	065b      	lsls	r3, r3, #25
 8011b9c:	f53f af2c 	bmi.w	80119f8 <_svfiprintf_r+0x28>
 8011ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ba2:	b01d      	add	sp, #116	; 0x74
 8011ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba8:	ab03      	add	r3, sp, #12
 8011baa:	9300      	str	r3, [sp, #0]
 8011bac:	462a      	mov	r2, r5
 8011bae:	4b06      	ldr	r3, [pc, #24]	; (8011bc8 <_svfiprintf_r+0x1f8>)
 8011bb0:	a904      	add	r1, sp, #16
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	f7fd fe0c 	bl	800f7d0 <_printf_i>
 8011bb8:	e7eb      	b.n	8011b92 <_svfiprintf_r+0x1c2>
 8011bba:	bf00      	nop
 8011bbc:	08013064 	.word	0x08013064
 8011bc0:	0801306e 	.word	0x0801306e
 8011bc4:	0800f289 	.word	0x0800f289
 8011bc8:	08011919 	.word	0x08011919
 8011bcc:	0801306a 	.word	0x0801306a

08011bd0 <_sungetc_r>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	1c4b      	adds	r3, r1, #1
 8011bd4:	4614      	mov	r4, r2
 8011bd6:	d103      	bne.n	8011be0 <_sungetc_r+0x10>
 8011bd8:	f04f 35ff 	mov.w	r5, #4294967295
 8011bdc:	4628      	mov	r0, r5
 8011bde:	bd38      	pop	{r3, r4, r5, pc}
 8011be0:	8993      	ldrh	r3, [r2, #12]
 8011be2:	f023 0320 	bic.w	r3, r3, #32
 8011be6:	8193      	strh	r3, [r2, #12]
 8011be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bea:	6852      	ldr	r2, [r2, #4]
 8011bec:	b2cd      	uxtb	r5, r1
 8011bee:	b18b      	cbz	r3, 8011c14 <_sungetc_r+0x44>
 8011bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	dd08      	ble.n	8011c08 <_sungetc_r+0x38>
 8011bf6:	6823      	ldr	r3, [r4, #0]
 8011bf8:	1e5a      	subs	r2, r3, #1
 8011bfa:	6022      	str	r2, [r4, #0]
 8011bfc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011c00:	6863      	ldr	r3, [r4, #4]
 8011c02:	3301      	adds	r3, #1
 8011c04:	6063      	str	r3, [r4, #4]
 8011c06:	e7e9      	b.n	8011bdc <_sungetc_r+0xc>
 8011c08:	4621      	mov	r1, r4
 8011c0a:	f000 fd1d 	bl	8012648 <__submore>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d0f1      	beq.n	8011bf6 <_sungetc_r+0x26>
 8011c12:	e7e1      	b.n	8011bd8 <_sungetc_r+0x8>
 8011c14:	6921      	ldr	r1, [r4, #16]
 8011c16:	6823      	ldr	r3, [r4, #0]
 8011c18:	b151      	cbz	r1, 8011c30 <_sungetc_r+0x60>
 8011c1a:	4299      	cmp	r1, r3
 8011c1c:	d208      	bcs.n	8011c30 <_sungetc_r+0x60>
 8011c1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011c22:	42a9      	cmp	r1, r5
 8011c24:	d104      	bne.n	8011c30 <_sungetc_r+0x60>
 8011c26:	3b01      	subs	r3, #1
 8011c28:	3201      	adds	r2, #1
 8011c2a:	6023      	str	r3, [r4, #0]
 8011c2c:	6062      	str	r2, [r4, #4]
 8011c2e:	e7d5      	b.n	8011bdc <_sungetc_r+0xc>
 8011c30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c38:	6363      	str	r3, [r4, #52]	; 0x34
 8011c3a:	2303      	movs	r3, #3
 8011c3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8011c3e:	4623      	mov	r3, r4
 8011c40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011c44:	6023      	str	r3, [r4, #0]
 8011c46:	2301      	movs	r3, #1
 8011c48:	e7dc      	b.n	8011c04 <_sungetc_r+0x34>

08011c4a <__ssrefill_r>:
 8011c4a:	b510      	push	{r4, lr}
 8011c4c:	460c      	mov	r4, r1
 8011c4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011c50:	b169      	cbz	r1, 8011c6e <__ssrefill_r+0x24>
 8011c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c56:	4299      	cmp	r1, r3
 8011c58:	d001      	beq.n	8011c5e <__ssrefill_r+0x14>
 8011c5a:	f7fd f995 	bl	800ef88 <_free_r>
 8011c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c60:	6063      	str	r3, [r4, #4]
 8011c62:	2000      	movs	r0, #0
 8011c64:	6360      	str	r0, [r4, #52]	; 0x34
 8011c66:	b113      	cbz	r3, 8011c6e <__ssrefill_r+0x24>
 8011c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011c6a:	6023      	str	r3, [r4, #0]
 8011c6c:	bd10      	pop	{r4, pc}
 8011c6e:	6923      	ldr	r3, [r4, #16]
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	2300      	movs	r3, #0
 8011c74:	6063      	str	r3, [r4, #4]
 8011c76:	89a3      	ldrh	r3, [r4, #12]
 8011c78:	f043 0320 	orr.w	r3, r3, #32
 8011c7c:	81a3      	strh	r3, [r4, #12]
 8011c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011c82:	e7f3      	b.n	8011c6c <__ssrefill_r+0x22>

08011c84 <__ssvfiscanf_r>:
 8011c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c88:	460c      	mov	r4, r1
 8011c8a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011c8e:	2100      	movs	r1, #0
 8011c90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011c94:	49a6      	ldr	r1, [pc, #664]	; (8011f30 <__ssvfiscanf_r+0x2ac>)
 8011c96:	91a0      	str	r1, [sp, #640]	; 0x280
 8011c98:	f10d 0804 	add.w	r8, sp, #4
 8011c9c:	49a5      	ldr	r1, [pc, #660]	; (8011f34 <__ssvfiscanf_r+0x2b0>)
 8011c9e:	4fa6      	ldr	r7, [pc, #664]	; (8011f38 <__ssvfiscanf_r+0x2b4>)
 8011ca0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011f3c <__ssvfiscanf_r+0x2b8>
 8011ca4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011ca8:	4606      	mov	r6, r0
 8011caa:	91a1      	str	r1, [sp, #644]	; 0x284
 8011cac:	9300      	str	r3, [sp, #0]
 8011cae:	7813      	ldrb	r3, [r2, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f000 815a 	beq.w	8011f6a <__ssvfiscanf_r+0x2e6>
 8011cb6:	5dd9      	ldrb	r1, [r3, r7]
 8011cb8:	f011 0108 	ands.w	r1, r1, #8
 8011cbc:	f102 0501 	add.w	r5, r2, #1
 8011cc0:	d019      	beq.n	8011cf6 <__ssvfiscanf_r+0x72>
 8011cc2:	6863      	ldr	r3, [r4, #4]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dd0f      	ble.n	8011ce8 <__ssvfiscanf_r+0x64>
 8011cc8:	6823      	ldr	r3, [r4, #0]
 8011cca:	781a      	ldrb	r2, [r3, #0]
 8011ccc:	5cba      	ldrb	r2, [r7, r2]
 8011cce:	0712      	lsls	r2, r2, #28
 8011cd0:	d401      	bmi.n	8011cd6 <__ssvfiscanf_r+0x52>
 8011cd2:	462a      	mov	r2, r5
 8011cd4:	e7eb      	b.n	8011cae <__ssvfiscanf_r+0x2a>
 8011cd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011cd8:	3201      	adds	r2, #1
 8011cda:	9245      	str	r2, [sp, #276]	; 0x114
 8011cdc:	6862      	ldr	r2, [r4, #4]
 8011cde:	3301      	adds	r3, #1
 8011ce0:	3a01      	subs	r2, #1
 8011ce2:	6062      	str	r2, [r4, #4]
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	e7ec      	b.n	8011cc2 <__ssvfiscanf_r+0x3e>
 8011ce8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011cea:	4621      	mov	r1, r4
 8011cec:	4630      	mov	r0, r6
 8011cee:	4798      	blx	r3
 8011cf0:	2800      	cmp	r0, #0
 8011cf2:	d0e9      	beq.n	8011cc8 <__ssvfiscanf_r+0x44>
 8011cf4:	e7ed      	b.n	8011cd2 <__ssvfiscanf_r+0x4e>
 8011cf6:	2b25      	cmp	r3, #37	; 0x25
 8011cf8:	d012      	beq.n	8011d20 <__ssvfiscanf_r+0x9c>
 8011cfa:	469a      	mov	sl, r3
 8011cfc:	6863      	ldr	r3, [r4, #4]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f340 8091 	ble.w	8011e26 <__ssvfiscanf_r+0x1a2>
 8011d04:	6822      	ldr	r2, [r4, #0]
 8011d06:	7813      	ldrb	r3, [r2, #0]
 8011d08:	4553      	cmp	r3, sl
 8011d0a:	f040 812e 	bne.w	8011f6a <__ssvfiscanf_r+0x2e6>
 8011d0e:	6863      	ldr	r3, [r4, #4]
 8011d10:	3b01      	subs	r3, #1
 8011d12:	6063      	str	r3, [r4, #4]
 8011d14:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011d16:	3201      	adds	r2, #1
 8011d18:	3301      	adds	r3, #1
 8011d1a:	6022      	str	r2, [r4, #0]
 8011d1c:	9345      	str	r3, [sp, #276]	; 0x114
 8011d1e:	e7d8      	b.n	8011cd2 <__ssvfiscanf_r+0x4e>
 8011d20:	9141      	str	r1, [sp, #260]	; 0x104
 8011d22:	9143      	str	r1, [sp, #268]	; 0x10c
 8011d24:	7853      	ldrb	r3, [r2, #1]
 8011d26:	2b2a      	cmp	r3, #42	; 0x2a
 8011d28:	bf02      	ittt	eq
 8011d2a:	2310      	moveq	r3, #16
 8011d2c:	1c95      	addeq	r5, r2, #2
 8011d2e:	9341      	streq	r3, [sp, #260]	; 0x104
 8011d30:	220a      	movs	r2, #10
 8011d32:	46aa      	mov	sl, r5
 8011d34:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011d38:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011d3c:	2b09      	cmp	r3, #9
 8011d3e:	d91d      	bls.n	8011d7c <__ssvfiscanf_r+0xf8>
 8011d40:	487e      	ldr	r0, [pc, #504]	; (8011f3c <__ssvfiscanf_r+0x2b8>)
 8011d42:	2203      	movs	r2, #3
 8011d44:	f7ee fa5c 	bl	8000200 <memchr>
 8011d48:	b140      	cbz	r0, 8011d5c <__ssvfiscanf_r+0xd8>
 8011d4a:	2301      	movs	r3, #1
 8011d4c:	eba0 0009 	sub.w	r0, r0, r9
 8011d50:	fa03 f000 	lsl.w	r0, r3, r0
 8011d54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011d56:	4318      	orrs	r0, r3
 8011d58:	9041      	str	r0, [sp, #260]	; 0x104
 8011d5a:	4655      	mov	r5, sl
 8011d5c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d60:	2b78      	cmp	r3, #120	; 0x78
 8011d62:	d806      	bhi.n	8011d72 <__ssvfiscanf_r+0xee>
 8011d64:	2b57      	cmp	r3, #87	; 0x57
 8011d66:	d810      	bhi.n	8011d8a <__ssvfiscanf_r+0x106>
 8011d68:	2b25      	cmp	r3, #37	; 0x25
 8011d6a:	d0c6      	beq.n	8011cfa <__ssvfiscanf_r+0x76>
 8011d6c:	d856      	bhi.n	8011e1c <__ssvfiscanf_r+0x198>
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d064      	beq.n	8011e3c <__ssvfiscanf_r+0x1b8>
 8011d72:	2303      	movs	r3, #3
 8011d74:	9347      	str	r3, [sp, #284]	; 0x11c
 8011d76:	230a      	movs	r3, #10
 8011d78:	9342      	str	r3, [sp, #264]	; 0x108
 8011d7a:	e071      	b.n	8011e60 <__ssvfiscanf_r+0x1dc>
 8011d7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011d7e:	fb02 1103 	mla	r1, r2, r3, r1
 8011d82:	3930      	subs	r1, #48	; 0x30
 8011d84:	9143      	str	r1, [sp, #268]	; 0x10c
 8011d86:	4655      	mov	r5, sl
 8011d88:	e7d3      	b.n	8011d32 <__ssvfiscanf_r+0xae>
 8011d8a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8011d8e:	2a20      	cmp	r2, #32
 8011d90:	d8ef      	bhi.n	8011d72 <__ssvfiscanf_r+0xee>
 8011d92:	a101      	add	r1, pc, #4	; (adr r1, 8011d98 <__ssvfiscanf_r+0x114>)
 8011d94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011d98:	08011e4b 	.word	0x08011e4b
 8011d9c:	08011d73 	.word	0x08011d73
 8011da0:	08011d73 	.word	0x08011d73
 8011da4:	08011ea9 	.word	0x08011ea9
 8011da8:	08011d73 	.word	0x08011d73
 8011dac:	08011d73 	.word	0x08011d73
 8011db0:	08011d73 	.word	0x08011d73
 8011db4:	08011d73 	.word	0x08011d73
 8011db8:	08011d73 	.word	0x08011d73
 8011dbc:	08011d73 	.word	0x08011d73
 8011dc0:	08011d73 	.word	0x08011d73
 8011dc4:	08011ebf 	.word	0x08011ebf
 8011dc8:	08011e95 	.word	0x08011e95
 8011dcc:	08011e23 	.word	0x08011e23
 8011dd0:	08011e23 	.word	0x08011e23
 8011dd4:	08011e23 	.word	0x08011e23
 8011dd8:	08011d73 	.word	0x08011d73
 8011ddc:	08011e99 	.word	0x08011e99
 8011de0:	08011d73 	.word	0x08011d73
 8011de4:	08011d73 	.word	0x08011d73
 8011de8:	08011d73 	.word	0x08011d73
 8011dec:	08011d73 	.word	0x08011d73
 8011df0:	08011ecf 	.word	0x08011ecf
 8011df4:	08011ea1 	.word	0x08011ea1
 8011df8:	08011e43 	.word	0x08011e43
 8011dfc:	08011d73 	.word	0x08011d73
 8011e00:	08011d73 	.word	0x08011d73
 8011e04:	08011ecb 	.word	0x08011ecb
 8011e08:	08011d73 	.word	0x08011d73
 8011e0c:	08011e95 	.word	0x08011e95
 8011e10:	08011d73 	.word	0x08011d73
 8011e14:	08011d73 	.word	0x08011d73
 8011e18:	08011e4b 	.word	0x08011e4b
 8011e1c:	3b45      	subs	r3, #69	; 0x45
 8011e1e:	2b02      	cmp	r3, #2
 8011e20:	d8a7      	bhi.n	8011d72 <__ssvfiscanf_r+0xee>
 8011e22:	2305      	movs	r3, #5
 8011e24:	e01b      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011e26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011e28:	4621      	mov	r1, r4
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	4798      	blx	r3
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	f43f af68 	beq.w	8011d04 <__ssvfiscanf_r+0x80>
 8011e34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011e36:	2800      	cmp	r0, #0
 8011e38:	f040 808d 	bne.w	8011f56 <__ssvfiscanf_r+0x2d2>
 8011e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e40:	e08f      	b.n	8011f62 <__ssvfiscanf_r+0x2de>
 8011e42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011e44:	f042 0220 	orr.w	r2, r2, #32
 8011e48:	9241      	str	r2, [sp, #260]	; 0x104
 8011e4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011e50:	9241      	str	r2, [sp, #260]	; 0x104
 8011e52:	2210      	movs	r2, #16
 8011e54:	2b6f      	cmp	r3, #111	; 0x6f
 8011e56:	9242      	str	r2, [sp, #264]	; 0x108
 8011e58:	bf34      	ite	cc
 8011e5a:	2303      	movcc	r3, #3
 8011e5c:	2304      	movcs	r3, #4
 8011e5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8011e60:	6863      	ldr	r3, [r4, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	dd42      	ble.n	8011eec <__ssvfiscanf_r+0x268>
 8011e66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011e68:	0659      	lsls	r1, r3, #25
 8011e6a:	d404      	bmi.n	8011e76 <__ssvfiscanf_r+0x1f2>
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	781a      	ldrb	r2, [r3, #0]
 8011e70:	5cba      	ldrb	r2, [r7, r2]
 8011e72:	0712      	lsls	r2, r2, #28
 8011e74:	d441      	bmi.n	8011efa <__ssvfiscanf_r+0x276>
 8011e76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011e78:	2b02      	cmp	r3, #2
 8011e7a:	dc50      	bgt.n	8011f1e <__ssvfiscanf_r+0x29a>
 8011e7c:	466b      	mov	r3, sp
 8011e7e:	4622      	mov	r2, r4
 8011e80:	a941      	add	r1, sp, #260	; 0x104
 8011e82:	4630      	mov	r0, r6
 8011e84:	f000 f9d0 	bl	8012228 <_scanf_chars>
 8011e88:	2801      	cmp	r0, #1
 8011e8a:	d06e      	beq.n	8011f6a <__ssvfiscanf_r+0x2e6>
 8011e8c:	2802      	cmp	r0, #2
 8011e8e:	f47f af20 	bne.w	8011cd2 <__ssvfiscanf_r+0x4e>
 8011e92:	e7cf      	b.n	8011e34 <__ssvfiscanf_r+0x1b0>
 8011e94:	220a      	movs	r2, #10
 8011e96:	e7dd      	b.n	8011e54 <__ssvfiscanf_r+0x1d0>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	9342      	str	r3, [sp, #264]	; 0x108
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	e7de      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011ea0:	2308      	movs	r3, #8
 8011ea2:	9342      	str	r3, [sp, #264]	; 0x108
 8011ea4:	2304      	movs	r3, #4
 8011ea6:	e7da      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011ea8:	4629      	mov	r1, r5
 8011eaa:	4640      	mov	r0, r8
 8011eac:	f000 fb20 	bl	80124f0 <__sccl>
 8011eb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb6:	9341      	str	r3, [sp, #260]	; 0x104
 8011eb8:	4605      	mov	r5, r0
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e7cf      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011ebe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ec4:	9341      	str	r3, [sp, #260]	; 0x104
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e7c9      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011eca:	2302      	movs	r3, #2
 8011ecc:	e7c7      	b.n	8011e5e <__ssvfiscanf_r+0x1da>
 8011ece:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011ed0:	06c3      	lsls	r3, r0, #27
 8011ed2:	f53f aefe 	bmi.w	8011cd2 <__ssvfiscanf_r+0x4e>
 8011ed6:	9b00      	ldr	r3, [sp, #0]
 8011ed8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011eda:	1d19      	adds	r1, r3, #4
 8011edc:	9100      	str	r1, [sp, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f010 0f01 	tst.w	r0, #1
 8011ee4:	bf14      	ite	ne
 8011ee6:	801a      	strhne	r2, [r3, #0]
 8011ee8:	601a      	streq	r2, [r3, #0]
 8011eea:	e6f2      	b.n	8011cd2 <__ssvfiscanf_r+0x4e>
 8011eec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011eee:	4621      	mov	r1, r4
 8011ef0:	4630      	mov	r0, r6
 8011ef2:	4798      	blx	r3
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d0b6      	beq.n	8011e66 <__ssvfiscanf_r+0x1e2>
 8011ef8:	e79c      	b.n	8011e34 <__ssvfiscanf_r+0x1b0>
 8011efa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011efc:	3201      	adds	r2, #1
 8011efe:	9245      	str	r2, [sp, #276]	; 0x114
 8011f00:	6862      	ldr	r2, [r4, #4]
 8011f02:	3a01      	subs	r2, #1
 8011f04:	2a00      	cmp	r2, #0
 8011f06:	6062      	str	r2, [r4, #4]
 8011f08:	dd02      	ble.n	8011f10 <__ssvfiscanf_r+0x28c>
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	6023      	str	r3, [r4, #0]
 8011f0e:	e7ad      	b.n	8011e6c <__ssvfiscanf_r+0x1e8>
 8011f10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011f12:	4621      	mov	r1, r4
 8011f14:	4630      	mov	r0, r6
 8011f16:	4798      	blx	r3
 8011f18:	2800      	cmp	r0, #0
 8011f1a:	d0a7      	beq.n	8011e6c <__ssvfiscanf_r+0x1e8>
 8011f1c:	e78a      	b.n	8011e34 <__ssvfiscanf_r+0x1b0>
 8011f1e:	2b04      	cmp	r3, #4
 8011f20:	dc0e      	bgt.n	8011f40 <__ssvfiscanf_r+0x2bc>
 8011f22:	466b      	mov	r3, sp
 8011f24:	4622      	mov	r2, r4
 8011f26:	a941      	add	r1, sp, #260	; 0x104
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f000 f9d7 	bl	80122dc <_scanf_i>
 8011f2e:	e7ab      	b.n	8011e88 <__ssvfiscanf_r+0x204>
 8011f30:	08011bd1 	.word	0x08011bd1
 8011f34:	08011c4b 	.word	0x08011c4b
 8011f38:	08012d1b 	.word	0x08012d1b
 8011f3c:	0801306a 	.word	0x0801306a
 8011f40:	4b0b      	ldr	r3, [pc, #44]	; (8011f70 <__ssvfiscanf_r+0x2ec>)
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f43f aec5 	beq.w	8011cd2 <__ssvfiscanf_r+0x4e>
 8011f48:	466b      	mov	r3, sp
 8011f4a:	4622      	mov	r2, r4
 8011f4c:	a941      	add	r1, sp, #260	; 0x104
 8011f4e:	4630      	mov	r0, r6
 8011f50:	f3af 8000 	nop.w
 8011f54:	e798      	b.n	8011e88 <__ssvfiscanf_r+0x204>
 8011f56:	89a3      	ldrh	r3, [r4, #12]
 8011f58:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011f5c:	bf18      	it	ne
 8011f5e:	f04f 30ff 	movne.w	r0, #4294967295
 8011f62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011f6c:	e7f9      	b.n	8011f62 <__ssvfiscanf_r+0x2de>
 8011f6e:	bf00      	nop
 8011f70:	00000000 	.word	0x00000000

08011f74 <__sfputc_r>:
 8011f74:	6893      	ldr	r3, [r2, #8]
 8011f76:	3b01      	subs	r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	b410      	push	{r4}
 8011f7c:	6093      	str	r3, [r2, #8]
 8011f7e:	da08      	bge.n	8011f92 <__sfputc_r+0x1e>
 8011f80:	6994      	ldr	r4, [r2, #24]
 8011f82:	42a3      	cmp	r3, r4
 8011f84:	db01      	blt.n	8011f8a <__sfputc_r+0x16>
 8011f86:	290a      	cmp	r1, #10
 8011f88:	d103      	bne.n	8011f92 <__sfputc_r+0x1e>
 8011f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f8e:	f7fd bf89 	b.w	800fea4 <__swbuf_r>
 8011f92:	6813      	ldr	r3, [r2, #0]
 8011f94:	1c58      	adds	r0, r3, #1
 8011f96:	6010      	str	r0, [r2, #0]
 8011f98:	7019      	strb	r1, [r3, #0]
 8011f9a:	4608      	mov	r0, r1
 8011f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fa0:	4770      	bx	lr

08011fa2 <__sfputs_r>:
 8011fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fa4:	4606      	mov	r6, r0
 8011fa6:	460f      	mov	r7, r1
 8011fa8:	4614      	mov	r4, r2
 8011faa:	18d5      	adds	r5, r2, r3
 8011fac:	42ac      	cmp	r4, r5
 8011fae:	d101      	bne.n	8011fb4 <__sfputs_r+0x12>
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	e007      	b.n	8011fc4 <__sfputs_r+0x22>
 8011fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb8:	463a      	mov	r2, r7
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f7ff ffda 	bl	8011f74 <__sfputc_r>
 8011fc0:	1c43      	adds	r3, r0, #1
 8011fc2:	d1f3      	bne.n	8011fac <__sfputs_r+0xa>
 8011fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fc8 <_vfiprintf_r>:
 8011fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fcc:	460d      	mov	r5, r1
 8011fce:	b09d      	sub	sp, #116	; 0x74
 8011fd0:	4614      	mov	r4, r2
 8011fd2:	4698      	mov	r8, r3
 8011fd4:	4606      	mov	r6, r0
 8011fd6:	b118      	cbz	r0, 8011fe0 <_vfiprintf_r+0x18>
 8011fd8:	6983      	ldr	r3, [r0, #24]
 8011fda:	b90b      	cbnz	r3, 8011fe0 <_vfiprintf_r+0x18>
 8011fdc:	f7fe ffd8 	bl	8010f90 <__sinit>
 8011fe0:	4b89      	ldr	r3, [pc, #548]	; (8012208 <_vfiprintf_r+0x240>)
 8011fe2:	429d      	cmp	r5, r3
 8011fe4:	d11b      	bne.n	801201e <_vfiprintf_r+0x56>
 8011fe6:	6875      	ldr	r5, [r6, #4]
 8011fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fea:	07d9      	lsls	r1, r3, #31
 8011fec:	d405      	bmi.n	8011ffa <_vfiprintf_r+0x32>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	059a      	lsls	r2, r3, #22
 8011ff2:	d402      	bmi.n	8011ffa <_vfiprintf_r+0x32>
 8011ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ff6:	f7ff f86e 	bl	80110d6 <__retarget_lock_acquire_recursive>
 8011ffa:	89ab      	ldrh	r3, [r5, #12]
 8011ffc:	071b      	lsls	r3, r3, #28
 8011ffe:	d501      	bpl.n	8012004 <_vfiprintf_r+0x3c>
 8012000:	692b      	ldr	r3, [r5, #16]
 8012002:	b9eb      	cbnz	r3, 8012040 <_vfiprintf_r+0x78>
 8012004:	4629      	mov	r1, r5
 8012006:	4630      	mov	r0, r6
 8012008:	f7fd ffb0 	bl	800ff6c <__swsetup_r>
 801200c:	b1c0      	cbz	r0, 8012040 <_vfiprintf_r+0x78>
 801200e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012010:	07dc      	lsls	r4, r3, #31
 8012012:	d50e      	bpl.n	8012032 <_vfiprintf_r+0x6a>
 8012014:	f04f 30ff 	mov.w	r0, #4294967295
 8012018:	b01d      	add	sp, #116	; 0x74
 801201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801201e:	4b7b      	ldr	r3, [pc, #492]	; (801220c <_vfiprintf_r+0x244>)
 8012020:	429d      	cmp	r5, r3
 8012022:	d101      	bne.n	8012028 <_vfiprintf_r+0x60>
 8012024:	68b5      	ldr	r5, [r6, #8]
 8012026:	e7df      	b.n	8011fe8 <_vfiprintf_r+0x20>
 8012028:	4b79      	ldr	r3, [pc, #484]	; (8012210 <_vfiprintf_r+0x248>)
 801202a:	429d      	cmp	r5, r3
 801202c:	bf08      	it	eq
 801202e:	68f5      	ldreq	r5, [r6, #12]
 8012030:	e7da      	b.n	8011fe8 <_vfiprintf_r+0x20>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	0598      	lsls	r0, r3, #22
 8012036:	d4ed      	bmi.n	8012014 <_vfiprintf_r+0x4c>
 8012038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801203a:	f7ff f84d 	bl	80110d8 <__retarget_lock_release_recursive>
 801203e:	e7e9      	b.n	8012014 <_vfiprintf_r+0x4c>
 8012040:	2300      	movs	r3, #0
 8012042:	9309      	str	r3, [sp, #36]	; 0x24
 8012044:	2320      	movs	r3, #32
 8012046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801204a:	f8cd 800c 	str.w	r8, [sp, #12]
 801204e:	2330      	movs	r3, #48	; 0x30
 8012050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012214 <_vfiprintf_r+0x24c>
 8012054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012058:	f04f 0901 	mov.w	r9, #1
 801205c:	4623      	mov	r3, r4
 801205e:	469a      	mov	sl, r3
 8012060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012064:	b10a      	cbz	r2, 801206a <_vfiprintf_r+0xa2>
 8012066:	2a25      	cmp	r2, #37	; 0x25
 8012068:	d1f9      	bne.n	801205e <_vfiprintf_r+0x96>
 801206a:	ebba 0b04 	subs.w	fp, sl, r4
 801206e:	d00b      	beq.n	8012088 <_vfiprintf_r+0xc0>
 8012070:	465b      	mov	r3, fp
 8012072:	4622      	mov	r2, r4
 8012074:	4629      	mov	r1, r5
 8012076:	4630      	mov	r0, r6
 8012078:	f7ff ff93 	bl	8011fa2 <__sfputs_r>
 801207c:	3001      	adds	r0, #1
 801207e:	f000 80aa 	beq.w	80121d6 <_vfiprintf_r+0x20e>
 8012082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012084:	445a      	add	r2, fp
 8012086:	9209      	str	r2, [sp, #36]	; 0x24
 8012088:	f89a 3000 	ldrb.w	r3, [sl]
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 80a2 	beq.w	80121d6 <_vfiprintf_r+0x20e>
 8012092:	2300      	movs	r3, #0
 8012094:	f04f 32ff 	mov.w	r2, #4294967295
 8012098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801209c:	f10a 0a01 	add.w	sl, sl, #1
 80120a0:	9304      	str	r3, [sp, #16]
 80120a2:	9307      	str	r3, [sp, #28]
 80120a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120a8:	931a      	str	r3, [sp, #104]	; 0x68
 80120aa:	4654      	mov	r4, sl
 80120ac:	2205      	movs	r2, #5
 80120ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b2:	4858      	ldr	r0, [pc, #352]	; (8012214 <_vfiprintf_r+0x24c>)
 80120b4:	f7ee f8a4 	bl	8000200 <memchr>
 80120b8:	9a04      	ldr	r2, [sp, #16]
 80120ba:	b9d8      	cbnz	r0, 80120f4 <_vfiprintf_r+0x12c>
 80120bc:	06d1      	lsls	r1, r2, #27
 80120be:	bf44      	itt	mi
 80120c0:	2320      	movmi	r3, #32
 80120c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120c6:	0713      	lsls	r3, r2, #28
 80120c8:	bf44      	itt	mi
 80120ca:	232b      	movmi	r3, #43	; 0x2b
 80120cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120d0:	f89a 3000 	ldrb.w	r3, [sl]
 80120d4:	2b2a      	cmp	r3, #42	; 0x2a
 80120d6:	d015      	beq.n	8012104 <_vfiprintf_r+0x13c>
 80120d8:	9a07      	ldr	r2, [sp, #28]
 80120da:	4654      	mov	r4, sl
 80120dc:	2000      	movs	r0, #0
 80120de:	f04f 0c0a 	mov.w	ip, #10
 80120e2:	4621      	mov	r1, r4
 80120e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120e8:	3b30      	subs	r3, #48	; 0x30
 80120ea:	2b09      	cmp	r3, #9
 80120ec:	d94e      	bls.n	801218c <_vfiprintf_r+0x1c4>
 80120ee:	b1b0      	cbz	r0, 801211e <_vfiprintf_r+0x156>
 80120f0:	9207      	str	r2, [sp, #28]
 80120f2:	e014      	b.n	801211e <_vfiprintf_r+0x156>
 80120f4:	eba0 0308 	sub.w	r3, r0, r8
 80120f8:	fa09 f303 	lsl.w	r3, r9, r3
 80120fc:	4313      	orrs	r3, r2
 80120fe:	9304      	str	r3, [sp, #16]
 8012100:	46a2      	mov	sl, r4
 8012102:	e7d2      	b.n	80120aa <_vfiprintf_r+0xe2>
 8012104:	9b03      	ldr	r3, [sp, #12]
 8012106:	1d19      	adds	r1, r3, #4
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	9103      	str	r1, [sp, #12]
 801210c:	2b00      	cmp	r3, #0
 801210e:	bfbb      	ittet	lt
 8012110:	425b      	neglt	r3, r3
 8012112:	f042 0202 	orrlt.w	r2, r2, #2
 8012116:	9307      	strge	r3, [sp, #28]
 8012118:	9307      	strlt	r3, [sp, #28]
 801211a:	bfb8      	it	lt
 801211c:	9204      	strlt	r2, [sp, #16]
 801211e:	7823      	ldrb	r3, [r4, #0]
 8012120:	2b2e      	cmp	r3, #46	; 0x2e
 8012122:	d10c      	bne.n	801213e <_vfiprintf_r+0x176>
 8012124:	7863      	ldrb	r3, [r4, #1]
 8012126:	2b2a      	cmp	r3, #42	; 0x2a
 8012128:	d135      	bne.n	8012196 <_vfiprintf_r+0x1ce>
 801212a:	9b03      	ldr	r3, [sp, #12]
 801212c:	1d1a      	adds	r2, r3, #4
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	9203      	str	r2, [sp, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	bfb8      	it	lt
 8012136:	f04f 33ff 	movlt.w	r3, #4294967295
 801213a:	3402      	adds	r4, #2
 801213c:	9305      	str	r3, [sp, #20]
 801213e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012224 <_vfiprintf_r+0x25c>
 8012142:	7821      	ldrb	r1, [r4, #0]
 8012144:	2203      	movs	r2, #3
 8012146:	4650      	mov	r0, sl
 8012148:	f7ee f85a 	bl	8000200 <memchr>
 801214c:	b140      	cbz	r0, 8012160 <_vfiprintf_r+0x198>
 801214e:	2340      	movs	r3, #64	; 0x40
 8012150:	eba0 000a 	sub.w	r0, r0, sl
 8012154:	fa03 f000 	lsl.w	r0, r3, r0
 8012158:	9b04      	ldr	r3, [sp, #16]
 801215a:	4303      	orrs	r3, r0
 801215c:	3401      	adds	r4, #1
 801215e:	9304      	str	r3, [sp, #16]
 8012160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012164:	482c      	ldr	r0, [pc, #176]	; (8012218 <_vfiprintf_r+0x250>)
 8012166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801216a:	2206      	movs	r2, #6
 801216c:	f7ee f848 	bl	8000200 <memchr>
 8012170:	2800      	cmp	r0, #0
 8012172:	d03f      	beq.n	80121f4 <_vfiprintf_r+0x22c>
 8012174:	4b29      	ldr	r3, [pc, #164]	; (801221c <_vfiprintf_r+0x254>)
 8012176:	bb1b      	cbnz	r3, 80121c0 <_vfiprintf_r+0x1f8>
 8012178:	9b03      	ldr	r3, [sp, #12]
 801217a:	3307      	adds	r3, #7
 801217c:	f023 0307 	bic.w	r3, r3, #7
 8012180:	3308      	adds	r3, #8
 8012182:	9303      	str	r3, [sp, #12]
 8012184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012186:	443b      	add	r3, r7
 8012188:	9309      	str	r3, [sp, #36]	; 0x24
 801218a:	e767      	b.n	801205c <_vfiprintf_r+0x94>
 801218c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012190:	460c      	mov	r4, r1
 8012192:	2001      	movs	r0, #1
 8012194:	e7a5      	b.n	80120e2 <_vfiprintf_r+0x11a>
 8012196:	2300      	movs	r3, #0
 8012198:	3401      	adds	r4, #1
 801219a:	9305      	str	r3, [sp, #20]
 801219c:	4619      	mov	r1, r3
 801219e:	f04f 0c0a 	mov.w	ip, #10
 80121a2:	4620      	mov	r0, r4
 80121a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121a8:	3a30      	subs	r2, #48	; 0x30
 80121aa:	2a09      	cmp	r2, #9
 80121ac:	d903      	bls.n	80121b6 <_vfiprintf_r+0x1ee>
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d0c5      	beq.n	801213e <_vfiprintf_r+0x176>
 80121b2:	9105      	str	r1, [sp, #20]
 80121b4:	e7c3      	b.n	801213e <_vfiprintf_r+0x176>
 80121b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80121ba:	4604      	mov	r4, r0
 80121bc:	2301      	movs	r3, #1
 80121be:	e7f0      	b.n	80121a2 <_vfiprintf_r+0x1da>
 80121c0:	ab03      	add	r3, sp, #12
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	462a      	mov	r2, r5
 80121c6:	4b16      	ldr	r3, [pc, #88]	; (8012220 <_vfiprintf_r+0x258>)
 80121c8:	a904      	add	r1, sp, #16
 80121ca:	4630      	mov	r0, r6
 80121cc:	f7fd f85c 	bl	800f288 <_printf_float>
 80121d0:	4607      	mov	r7, r0
 80121d2:	1c78      	adds	r0, r7, #1
 80121d4:	d1d6      	bne.n	8012184 <_vfiprintf_r+0x1bc>
 80121d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121d8:	07d9      	lsls	r1, r3, #31
 80121da:	d405      	bmi.n	80121e8 <_vfiprintf_r+0x220>
 80121dc:	89ab      	ldrh	r3, [r5, #12]
 80121de:	059a      	lsls	r2, r3, #22
 80121e0:	d402      	bmi.n	80121e8 <_vfiprintf_r+0x220>
 80121e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121e4:	f7fe ff78 	bl	80110d8 <__retarget_lock_release_recursive>
 80121e8:	89ab      	ldrh	r3, [r5, #12]
 80121ea:	065b      	lsls	r3, r3, #25
 80121ec:	f53f af12 	bmi.w	8012014 <_vfiprintf_r+0x4c>
 80121f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121f2:	e711      	b.n	8012018 <_vfiprintf_r+0x50>
 80121f4:	ab03      	add	r3, sp, #12
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	462a      	mov	r2, r5
 80121fa:	4b09      	ldr	r3, [pc, #36]	; (8012220 <_vfiprintf_r+0x258>)
 80121fc:	a904      	add	r1, sp, #16
 80121fe:	4630      	mov	r0, r6
 8012200:	f7fd fae6 	bl	800f7d0 <_printf_i>
 8012204:	e7e4      	b.n	80121d0 <_vfiprintf_r+0x208>
 8012206:	bf00      	nop
 8012208:	08012ecc 	.word	0x08012ecc
 801220c:	08012eec 	.word	0x08012eec
 8012210:	08012eac 	.word	0x08012eac
 8012214:	08013064 	.word	0x08013064
 8012218:	0801306e 	.word	0x0801306e
 801221c:	0800f289 	.word	0x0800f289
 8012220:	08011fa3 	.word	0x08011fa3
 8012224:	0801306a 	.word	0x0801306a

08012228 <_scanf_chars>:
 8012228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801222c:	4615      	mov	r5, r2
 801222e:	688a      	ldr	r2, [r1, #8]
 8012230:	4680      	mov	r8, r0
 8012232:	460c      	mov	r4, r1
 8012234:	b932      	cbnz	r2, 8012244 <_scanf_chars+0x1c>
 8012236:	698a      	ldr	r2, [r1, #24]
 8012238:	2a00      	cmp	r2, #0
 801223a:	bf0c      	ite	eq
 801223c:	2201      	moveq	r2, #1
 801223e:	f04f 32ff 	movne.w	r2, #4294967295
 8012242:	608a      	str	r2, [r1, #8]
 8012244:	6822      	ldr	r2, [r4, #0]
 8012246:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80122d8 <_scanf_chars+0xb0>
 801224a:	06d1      	lsls	r1, r2, #27
 801224c:	bf5f      	itttt	pl
 801224e:	681a      	ldrpl	r2, [r3, #0]
 8012250:	1d11      	addpl	r1, r2, #4
 8012252:	6019      	strpl	r1, [r3, #0]
 8012254:	6816      	ldrpl	r6, [r2, #0]
 8012256:	2700      	movs	r7, #0
 8012258:	69a0      	ldr	r0, [r4, #24]
 801225a:	b188      	cbz	r0, 8012280 <_scanf_chars+0x58>
 801225c:	2801      	cmp	r0, #1
 801225e:	d107      	bne.n	8012270 <_scanf_chars+0x48>
 8012260:	682a      	ldr	r2, [r5, #0]
 8012262:	7811      	ldrb	r1, [r2, #0]
 8012264:	6962      	ldr	r2, [r4, #20]
 8012266:	5c52      	ldrb	r2, [r2, r1]
 8012268:	b952      	cbnz	r2, 8012280 <_scanf_chars+0x58>
 801226a:	2f00      	cmp	r7, #0
 801226c:	d031      	beq.n	80122d2 <_scanf_chars+0xaa>
 801226e:	e022      	b.n	80122b6 <_scanf_chars+0x8e>
 8012270:	2802      	cmp	r0, #2
 8012272:	d120      	bne.n	80122b6 <_scanf_chars+0x8e>
 8012274:	682b      	ldr	r3, [r5, #0]
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	f813 3009 	ldrb.w	r3, [r3, r9]
 801227c:	071b      	lsls	r3, r3, #28
 801227e:	d41a      	bmi.n	80122b6 <_scanf_chars+0x8e>
 8012280:	6823      	ldr	r3, [r4, #0]
 8012282:	06da      	lsls	r2, r3, #27
 8012284:	bf5e      	ittt	pl
 8012286:	682b      	ldrpl	r3, [r5, #0]
 8012288:	781b      	ldrbpl	r3, [r3, #0]
 801228a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801228e:	682a      	ldr	r2, [r5, #0]
 8012290:	686b      	ldr	r3, [r5, #4]
 8012292:	3201      	adds	r2, #1
 8012294:	602a      	str	r2, [r5, #0]
 8012296:	68a2      	ldr	r2, [r4, #8]
 8012298:	3b01      	subs	r3, #1
 801229a:	3a01      	subs	r2, #1
 801229c:	606b      	str	r3, [r5, #4]
 801229e:	3701      	adds	r7, #1
 80122a0:	60a2      	str	r2, [r4, #8]
 80122a2:	b142      	cbz	r2, 80122b6 <_scanf_chars+0x8e>
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	dcd7      	bgt.n	8012258 <_scanf_chars+0x30>
 80122a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80122ac:	4629      	mov	r1, r5
 80122ae:	4640      	mov	r0, r8
 80122b0:	4798      	blx	r3
 80122b2:	2800      	cmp	r0, #0
 80122b4:	d0d0      	beq.n	8012258 <_scanf_chars+0x30>
 80122b6:	6823      	ldr	r3, [r4, #0]
 80122b8:	f013 0310 	ands.w	r3, r3, #16
 80122bc:	d105      	bne.n	80122ca <_scanf_chars+0xa2>
 80122be:	68e2      	ldr	r2, [r4, #12]
 80122c0:	3201      	adds	r2, #1
 80122c2:	60e2      	str	r2, [r4, #12]
 80122c4:	69a2      	ldr	r2, [r4, #24]
 80122c6:	b102      	cbz	r2, 80122ca <_scanf_chars+0xa2>
 80122c8:	7033      	strb	r3, [r6, #0]
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	443b      	add	r3, r7
 80122ce:	6123      	str	r3, [r4, #16]
 80122d0:	2000      	movs	r0, #0
 80122d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122d6:	bf00      	nop
 80122d8:	08012d1b 	.word	0x08012d1b

080122dc <_scanf_i>:
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	4698      	mov	r8, r3
 80122e2:	4b76      	ldr	r3, [pc, #472]	; (80124bc <_scanf_i+0x1e0>)
 80122e4:	460c      	mov	r4, r1
 80122e6:	4682      	mov	sl, r0
 80122e8:	4616      	mov	r6, r2
 80122ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80122ee:	b087      	sub	sp, #28
 80122f0:	ab03      	add	r3, sp, #12
 80122f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122f6:	4b72      	ldr	r3, [pc, #456]	; (80124c0 <_scanf_i+0x1e4>)
 80122f8:	69a1      	ldr	r1, [r4, #24]
 80122fa:	4a72      	ldr	r2, [pc, #456]	; (80124c4 <_scanf_i+0x1e8>)
 80122fc:	2903      	cmp	r1, #3
 80122fe:	bf18      	it	ne
 8012300:	461a      	movne	r2, r3
 8012302:	68a3      	ldr	r3, [r4, #8]
 8012304:	9201      	str	r2, [sp, #4]
 8012306:	1e5a      	subs	r2, r3, #1
 8012308:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801230c:	bf88      	it	hi
 801230e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012312:	4627      	mov	r7, r4
 8012314:	bf82      	ittt	hi
 8012316:	eb03 0905 	addhi.w	r9, r3, r5
 801231a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801231e:	60a3      	strhi	r3, [r4, #8]
 8012320:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012324:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012328:	bf98      	it	ls
 801232a:	f04f 0900 	movls.w	r9, #0
 801232e:	6023      	str	r3, [r4, #0]
 8012330:	463d      	mov	r5, r7
 8012332:	f04f 0b00 	mov.w	fp, #0
 8012336:	6831      	ldr	r1, [r6, #0]
 8012338:	ab03      	add	r3, sp, #12
 801233a:	7809      	ldrb	r1, [r1, #0]
 801233c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012340:	2202      	movs	r2, #2
 8012342:	f7ed ff5d 	bl	8000200 <memchr>
 8012346:	b328      	cbz	r0, 8012394 <_scanf_i+0xb8>
 8012348:	f1bb 0f01 	cmp.w	fp, #1
 801234c:	d159      	bne.n	8012402 <_scanf_i+0x126>
 801234e:	6862      	ldr	r2, [r4, #4]
 8012350:	b92a      	cbnz	r2, 801235e <_scanf_i+0x82>
 8012352:	6822      	ldr	r2, [r4, #0]
 8012354:	2308      	movs	r3, #8
 8012356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801235a:	6063      	str	r3, [r4, #4]
 801235c:	6022      	str	r2, [r4, #0]
 801235e:	6822      	ldr	r2, [r4, #0]
 8012360:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012364:	6022      	str	r2, [r4, #0]
 8012366:	68a2      	ldr	r2, [r4, #8]
 8012368:	1e51      	subs	r1, r2, #1
 801236a:	60a1      	str	r1, [r4, #8]
 801236c:	b192      	cbz	r2, 8012394 <_scanf_i+0xb8>
 801236e:	6832      	ldr	r2, [r6, #0]
 8012370:	1c51      	adds	r1, r2, #1
 8012372:	6031      	str	r1, [r6, #0]
 8012374:	7812      	ldrb	r2, [r2, #0]
 8012376:	f805 2b01 	strb.w	r2, [r5], #1
 801237a:	6872      	ldr	r2, [r6, #4]
 801237c:	3a01      	subs	r2, #1
 801237e:	2a00      	cmp	r2, #0
 8012380:	6072      	str	r2, [r6, #4]
 8012382:	dc07      	bgt.n	8012394 <_scanf_i+0xb8>
 8012384:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012388:	4631      	mov	r1, r6
 801238a:	4650      	mov	r0, sl
 801238c:	4790      	blx	r2
 801238e:	2800      	cmp	r0, #0
 8012390:	f040 8085 	bne.w	801249e <_scanf_i+0x1c2>
 8012394:	f10b 0b01 	add.w	fp, fp, #1
 8012398:	f1bb 0f03 	cmp.w	fp, #3
 801239c:	d1cb      	bne.n	8012336 <_scanf_i+0x5a>
 801239e:	6863      	ldr	r3, [r4, #4]
 80123a0:	b90b      	cbnz	r3, 80123a6 <_scanf_i+0xca>
 80123a2:	230a      	movs	r3, #10
 80123a4:	6063      	str	r3, [r4, #4]
 80123a6:	6863      	ldr	r3, [r4, #4]
 80123a8:	4947      	ldr	r1, [pc, #284]	; (80124c8 <_scanf_i+0x1ec>)
 80123aa:	6960      	ldr	r0, [r4, #20]
 80123ac:	1ac9      	subs	r1, r1, r3
 80123ae:	f000 f89f 	bl	80124f0 <__sccl>
 80123b2:	f04f 0b00 	mov.w	fp, #0
 80123b6:	68a3      	ldr	r3, [r4, #8]
 80123b8:	6822      	ldr	r2, [r4, #0]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d03d      	beq.n	801243a <_scanf_i+0x15e>
 80123be:	6831      	ldr	r1, [r6, #0]
 80123c0:	6960      	ldr	r0, [r4, #20]
 80123c2:	f891 c000 	ldrb.w	ip, [r1]
 80123c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80123ca:	2800      	cmp	r0, #0
 80123cc:	d035      	beq.n	801243a <_scanf_i+0x15e>
 80123ce:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80123d2:	d124      	bne.n	801241e <_scanf_i+0x142>
 80123d4:	0510      	lsls	r0, r2, #20
 80123d6:	d522      	bpl.n	801241e <_scanf_i+0x142>
 80123d8:	f10b 0b01 	add.w	fp, fp, #1
 80123dc:	f1b9 0f00 	cmp.w	r9, #0
 80123e0:	d003      	beq.n	80123ea <_scanf_i+0x10e>
 80123e2:	3301      	adds	r3, #1
 80123e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80123e8:	60a3      	str	r3, [r4, #8]
 80123ea:	6873      	ldr	r3, [r6, #4]
 80123ec:	3b01      	subs	r3, #1
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	6073      	str	r3, [r6, #4]
 80123f2:	dd1b      	ble.n	801242c <_scanf_i+0x150>
 80123f4:	6833      	ldr	r3, [r6, #0]
 80123f6:	3301      	adds	r3, #1
 80123f8:	6033      	str	r3, [r6, #0]
 80123fa:	68a3      	ldr	r3, [r4, #8]
 80123fc:	3b01      	subs	r3, #1
 80123fe:	60a3      	str	r3, [r4, #8]
 8012400:	e7d9      	b.n	80123b6 <_scanf_i+0xda>
 8012402:	f1bb 0f02 	cmp.w	fp, #2
 8012406:	d1ae      	bne.n	8012366 <_scanf_i+0x8a>
 8012408:	6822      	ldr	r2, [r4, #0]
 801240a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801240e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012412:	d1bf      	bne.n	8012394 <_scanf_i+0xb8>
 8012414:	2310      	movs	r3, #16
 8012416:	6063      	str	r3, [r4, #4]
 8012418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801241c:	e7a2      	b.n	8012364 <_scanf_i+0x88>
 801241e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012422:	6022      	str	r2, [r4, #0]
 8012424:	780b      	ldrb	r3, [r1, #0]
 8012426:	f805 3b01 	strb.w	r3, [r5], #1
 801242a:	e7de      	b.n	80123ea <_scanf_i+0x10e>
 801242c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012430:	4631      	mov	r1, r6
 8012432:	4650      	mov	r0, sl
 8012434:	4798      	blx	r3
 8012436:	2800      	cmp	r0, #0
 8012438:	d0df      	beq.n	80123fa <_scanf_i+0x11e>
 801243a:	6823      	ldr	r3, [r4, #0]
 801243c:	05db      	lsls	r3, r3, #23
 801243e:	d50d      	bpl.n	801245c <_scanf_i+0x180>
 8012440:	42bd      	cmp	r5, r7
 8012442:	d909      	bls.n	8012458 <_scanf_i+0x17c>
 8012444:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012448:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801244c:	4632      	mov	r2, r6
 801244e:	4650      	mov	r0, sl
 8012450:	4798      	blx	r3
 8012452:	f105 39ff 	add.w	r9, r5, #4294967295
 8012456:	464d      	mov	r5, r9
 8012458:	42bd      	cmp	r5, r7
 801245a:	d02d      	beq.n	80124b8 <_scanf_i+0x1dc>
 801245c:	6822      	ldr	r2, [r4, #0]
 801245e:	f012 0210 	ands.w	r2, r2, #16
 8012462:	d113      	bne.n	801248c <_scanf_i+0x1b0>
 8012464:	702a      	strb	r2, [r5, #0]
 8012466:	6863      	ldr	r3, [r4, #4]
 8012468:	9e01      	ldr	r6, [sp, #4]
 801246a:	4639      	mov	r1, r7
 801246c:	4650      	mov	r0, sl
 801246e:	47b0      	blx	r6
 8012470:	6821      	ldr	r1, [r4, #0]
 8012472:	f8d8 3000 	ldr.w	r3, [r8]
 8012476:	f011 0f20 	tst.w	r1, #32
 801247a:	d013      	beq.n	80124a4 <_scanf_i+0x1c8>
 801247c:	1d1a      	adds	r2, r3, #4
 801247e:	f8c8 2000 	str.w	r2, [r8]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	6018      	str	r0, [r3, #0]
 8012486:	68e3      	ldr	r3, [r4, #12]
 8012488:	3301      	adds	r3, #1
 801248a:	60e3      	str	r3, [r4, #12]
 801248c:	1bed      	subs	r5, r5, r7
 801248e:	44ab      	add	fp, r5
 8012490:	6925      	ldr	r5, [r4, #16]
 8012492:	445d      	add	r5, fp
 8012494:	6125      	str	r5, [r4, #16]
 8012496:	2000      	movs	r0, #0
 8012498:	b007      	add	sp, #28
 801249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249e:	f04f 0b00 	mov.w	fp, #0
 80124a2:	e7ca      	b.n	801243a <_scanf_i+0x15e>
 80124a4:	1d1a      	adds	r2, r3, #4
 80124a6:	f8c8 2000 	str.w	r2, [r8]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f011 0f01 	tst.w	r1, #1
 80124b0:	bf14      	ite	ne
 80124b2:	8018      	strhne	r0, [r3, #0]
 80124b4:	6018      	streq	r0, [r3, #0]
 80124b6:	e7e6      	b.n	8012486 <_scanf_i+0x1aa>
 80124b8:	2001      	movs	r0, #1
 80124ba:	e7ed      	b.n	8012498 <_scanf_i+0x1bc>
 80124bc:	08012a48 	.word	0x08012a48
 80124c0:	08012645 	.word	0x08012645
 80124c4:	0800fe19 	.word	0x0800fe19
 80124c8:	0801308e 	.word	0x0801308e

080124cc <_read_r>:
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4d07      	ldr	r5, [pc, #28]	; (80124ec <_read_r+0x20>)
 80124d0:	4604      	mov	r4, r0
 80124d2:	4608      	mov	r0, r1
 80124d4:	4611      	mov	r1, r2
 80124d6:	2200      	movs	r2, #0
 80124d8:	602a      	str	r2, [r5, #0]
 80124da:	461a      	mov	r2, r3
 80124dc:	f7f0 ff44 	bl	8003368 <_read>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d102      	bne.n	80124ea <_read_r+0x1e>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	b103      	cbz	r3, 80124ea <_read_r+0x1e>
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	20002cec 	.word	0x20002cec

080124f0 <__sccl>:
 80124f0:	b570      	push	{r4, r5, r6, lr}
 80124f2:	780b      	ldrb	r3, [r1, #0]
 80124f4:	4604      	mov	r4, r0
 80124f6:	2b5e      	cmp	r3, #94	; 0x5e
 80124f8:	bf0b      	itete	eq
 80124fa:	784b      	ldrbeq	r3, [r1, #1]
 80124fc:	1c48      	addne	r0, r1, #1
 80124fe:	1c88      	addeq	r0, r1, #2
 8012500:	2200      	movne	r2, #0
 8012502:	bf08      	it	eq
 8012504:	2201      	moveq	r2, #1
 8012506:	1e61      	subs	r1, r4, #1
 8012508:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801250c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012510:	42a9      	cmp	r1, r5
 8012512:	d1fb      	bne.n	801250c <__sccl+0x1c>
 8012514:	b90b      	cbnz	r3, 801251a <__sccl+0x2a>
 8012516:	3801      	subs	r0, #1
 8012518:	bd70      	pop	{r4, r5, r6, pc}
 801251a:	f082 0201 	eor.w	r2, r2, #1
 801251e:	54e2      	strb	r2, [r4, r3]
 8012520:	4605      	mov	r5, r0
 8012522:	4628      	mov	r0, r5
 8012524:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012528:	292d      	cmp	r1, #45	; 0x2d
 801252a:	d006      	beq.n	801253a <__sccl+0x4a>
 801252c:	295d      	cmp	r1, #93	; 0x5d
 801252e:	d0f3      	beq.n	8012518 <__sccl+0x28>
 8012530:	b909      	cbnz	r1, 8012536 <__sccl+0x46>
 8012532:	4628      	mov	r0, r5
 8012534:	e7f0      	b.n	8012518 <__sccl+0x28>
 8012536:	460b      	mov	r3, r1
 8012538:	e7f1      	b.n	801251e <__sccl+0x2e>
 801253a:	786e      	ldrb	r6, [r5, #1]
 801253c:	2e5d      	cmp	r6, #93	; 0x5d
 801253e:	d0fa      	beq.n	8012536 <__sccl+0x46>
 8012540:	42b3      	cmp	r3, r6
 8012542:	dcf8      	bgt.n	8012536 <__sccl+0x46>
 8012544:	3502      	adds	r5, #2
 8012546:	4619      	mov	r1, r3
 8012548:	3101      	adds	r1, #1
 801254a:	428e      	cmp	r6, r1
 801254c:	5462      	strb	r2, [r4, r1]
 801254e:	dcfb      	bgt.n	8012548 <__sccl+0x58>
 8012550:	1af1      	subs	r1, r6, r3
 8012552:	3901      	subs	r1, #1
 8012554:	1c58      	adds	r0, r3, #1
 8012556:	42b3      	cmp	r3, r6
 8012558:	bfa8      	it	ge
 801255a:	2100      	movge	r1, #0
 801255c:	1843      	adds	r3, r0, r1
 801255e:	e7e0      	b.n	8012522 <__sccl+0x32>

08012560 <_strtoul_l.constprop.0>:
 8012560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012564:	4f36      	ldr	r7, [pc, #216]	; (8012640 <_strtoul_l.constprop.0+0xe0>)
 8012566:	4686      	mov	lr, r0
 8012568:	460d      	mov	r5, r1
 801256a:	4628      	mov	r0, r5
 801256c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012570:	5de6      	ldrb	r6, [r4, r7]
 8012572:	f016 0608 	ands.w	r6, r6, #8
 8012576:	d1f8      	bne.n	801256a <_strtoul_l.constprop.0+0xa>
 8012578:	2c2d      	cmp	r4, #45	; 0x2d
 801257a:	d12f      	bne.n	80125dc <_strtoul_l.constprop.0+0x7c>
 801257c:	782c      	ldrb	r4, [r5, #0]
 801257e:	2601      	movs	r6, #1
 8012580:	1c85      	adds	r5, r0, #2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d057      	beq.n	8012636 <_strtoul_l.constprop.0+0xd6>
 8012586:	2b10      	cmp	r3, #16
 8012588:	d109      	bne.n	801259e <_strtoul_l.constprop.0+0x3e>
 801258a:	2c30      	cmp	r4, #48	; 0x30
 801258c:	d107      	bne.n	801259e <_strtoul_l.constprop.0+0x3e>
 801258e:	7828      	ldrb	r0, [r5, #0]
 8012590:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012594:	2858      	cmp	r0, #88	; 0x58
 8012596:	d149      	bne.n	801262c <_strtoul_l.constprop.0+0xcc>
 8012598:	786c      	ldrb	r4, [r5, #1]
 801259a:	2310      	movs	r3, #16
 801259c:	3502      	adds	r5, #2
 801259e:	f04f 38ff 	mov.w	r8, #4294967295
 80125a2:	2700      	movs	r7, #0
 80125a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80125a8:	fb03 f908 	mul.w	r9, r3, r8
 80125ac:	ea6f 0909 	mvn.w	r9, r9
 80125b0:	4638      	mov	r0, r7
 80125b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80125b6:	f1bc 0f09 	cmp.w	ip, #9
 80125ba:	d814      	bhi.n	80125e6 <_strtoul_l.constprop.0+0x86>
 80125bc:	4664      	mov	r4, ip
 80125be:	42a3      	cmp	r3, r4
 80125c0:	dd22      	ble.n	8012608 <_strtoul_l.constprop.0+0xa8>
 80125c2:	2f00      	cmp	r7, #0
 80125c4:	db1d      	blt.n	8012602 <_strtoul_l.constprop.0+0xa2>
 80125c6:	4580      	cmp	r8, r0
 80125c8:	d31b      	bcc.n	8012602 <_strtoul_l.constprop.0+0xa2>
 80125ca:	d101      	bne.n	80125d0 <_strtoul_l.constprop.0+0x70>
 80125cc:	45a1      	cmp	r9, r4
 80125ce:	db18      	blt.n	8012602 <_strtoul_l.constprop.0+0xa2>
 80125d0:	fb00 4003 	mla	r0, r0, r3, r4
 80125d4:	2701      	movs	r7, #1
 80125d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125da:	e7ea      	b.n	80125b2 <_strtoul_l.constprop.0+0x52>
 80125dc:	2c2b      	cmp	r4, #43	; 0x2b
 80125de:	bf04      	itt	eq
 80125e0:	782c      	ldrbeq	r4, [r5, #0]
 80125e2:	1c85      	addeq	r5, r0, #2
 80125e4:	e7cd      	b.n	8012582 <_strtoul_l.constprop.0+0x22>
 80125e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80125ea:	f1bc 0f19 	cmp.w	ip, #25
 80125ee:	d801      	bhi.n	80125f4 <_strtoul_l.constprop.0+0x94>
 80125f0:	3c37      	subs	r4, #55	; 0x37
 80125f2:	e7e4      	b.n	80125be <_strtoul_l.constprop.0+0x5e>
 80125f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80125f8:	f1bc 0f19 	cmp.w	ip, #25
 80125fc:	d804      	bhi.n	8012608 <_strtoul_l.constprop.0+0xa8>
 80125fe:	3c57      	subs	r4, #87	; 0x57
 8012600:	e7dd      	b.n	80125be <_strtoul_l.constprop.0+0x5e>
 8012602:	f04f 37ff 	mov.w	r7, #4294967295
 8012606:	e7e6      	b.n	80125d6 <_strtoul_l.constprop.0+0x76>
 8012608:	2f00      	cmp	r7, #0
 801260a:	da07      	bge.n	801261c <_strtoul_l.constprop.0+0xbc>
 801260c:	2322      	movs	r3, #34	; 0x22
 801260e:	f8ce 3000 	str.w	r3, [lr]
 8012612:	f04f 30ff 	mov.w	r0, #4294967295
 8012616:	b932      	cbnz	r2, 8012626 <_strtoul_l.constprop.0+0xc6>
 8012618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801261c:	b106      	cbz	r6, 8012620 <_strtoul_l.constprop.0+0xc0>
 801261e:	4240      	negs	r0, r0
 8012620:	2a00      	cmp	r2, #0
 8012622:	d0f9      	beq.n	8012618 <_strtoul_l.constprop.0+0xb8>
 8012624:	b107      	cbz	r7, 8012628 <_strtoul_l.constprop.0+0xc8>
 8012626:	1e69      	subs	r1, r5, #1
 8012628:	6011      	str	r1, [r2, #0]
 801262a:	e7f5      	b.n	8012618 <_strtoul_l.constprop.0+0xb8>
 801262c:	2430      	movs	r4, #48	; 0x30
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1b5      	bne.n	801259e <_strtoul_l.constprop.0+0x3e>
 8012632:	2308      	movs	r3, #8
 8012634:	e7b3      	b.n	801259e <_strtoul_l.constprop.0+0x3e>
 8012636:	2c30      	cmp	r4, #48	; 0x30
 8012638:	d0a9      	beq.n	801258e <_strtoul_l.constprop.0+0x2e>
 801263a:	230a      	movs	r3, #10
 801263c:	e7af      	b.n	801259e <_strtoul_l.constprop.0+0x3e>
 801263e:	bf00      	nop
 8012640:	08012d1b 	.word	0x08012d1b

08012644 <_strtoul_r>:
 8012644:	f7ff bf8c 	b.w	8012560 <_strtoul_l.constprop.0>

08012648 <__submore>:
 8012648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801264c:	460c      	mov	r4, r1
 801264e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012654:	4299      	cmp	r1, r3
 8012656:	d11d      	bne.n	8012694 <__submore+0x4c>
 8012658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801265c:	f7fc fd00 	bl	800f060 <_malloc_r>
 8012660:	b918      	cbnz	r0, 801266a <__submore+0x22>
 8012662:	f04f 30ff 	mov.w	r0, #4294967295
 8012666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801266a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801266e:	63a3      	str	r3, [r4, #56]	; 0x38
 8012670:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012674:	6360      	str	r0, [r4, #52]	; 0x34
 8012676:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801267a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801267e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012682:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012686:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801268a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801268e:	6020      	str	r0, [r4, #0]
 8012690:	2000      	movs	r0, #0
 8012692:	e7e8      	b.n	8012666 <__submore+0x1e>
 8012694:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012696:	0077      	lsls	r7, r6, #1
 8012698:	463a      	mov	r2, r7
 801269a:	f000 f88d 	bl	80127b8 <_realloc_r>
 801269e:	4605      	mov	r5, r0
 80126a0:	2800      	cmp	r0, #0
 80126a2:	d0de      	beq.n	8012662 <__submore+0x1a>
 80126a4:	eb00 0806 	add.w	r8, r0, r6
 80126a8:	4601      	mov	r1, r0
 80126aa:	4632      	mov	r2, r6
 80126ac:	4640      	mov	r0, r8
 80126ae:	f7fc fc55 	bl	800ef5c <memcpy>
 80126b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80126b6:	f8c4 8000 	str.w	r8, [r4]
 80126ba:	e7e9      	b.n	8012690 <__submore+0x48>

080126bc <__assert_func>:
 80126bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80126be:	4614      	mov	r4, r2
 80126c0:	461a      	mov	r2, r3
 80126c2:	4b09      	ldr	r3, [pc, #36]	; (80126e8 <__assert_func+0x2c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	4605      	mov	r5, r0
 80126c8:	68d8      	ldr	r0, [r3, #12]
 80126ca:	b14c      	cbz	r4, 80126e0 <__assert_func+0x24>
 80126cc:	4b07      	ldr	r3, [pc, #28]	; (80126ec <__assert_func+0x30>)
 80126ce:	9100      	str	r1, [sp, #0]
 80126d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126d4:	4906      	ldr	r1, [pc, #24]	; (80126f0 <__assert_func+0x34>)
 80126d6:	462b      	mov	r3, r5
 80126d8:	f000 f80e 	bl	80126f8 <fiprintf>
 80126dc:	f7fc fbf8 	bl	800eed0 <abort>
 80126e0:	4b04      	ldr	r3, [pc, #16]	; (80126f4 <__assert_func+0x38>)
 80126e2:	461c      	mov	r4, r3
 80126e4:	e7f3      	b.n	80126ce <__assert_func+0x12>
 80126e6:	bf00      	nop
 80126e8:	20000054 	.word	0x20000054
 80126ec:	08013090 	.word	0x08013090
 80126f0:	0801309d 	.word	0x0801309d
 80126f4:	080130cb 	.word	0x080130cb

080126f8 <fiprintf>:
 80126f8:	b40e      	push	{r1, r2, r3}
 80126fa:	b503      	push	{r0, r1, lr}
 80126fc:	4601      	mov	r1, r0
 80126fe:	ab03      	add	r3, sp, #12
 8012700:	4805      	ldr	r0, [pc, #20]	; (8012718 <fiprintf+0x20>)
 8012702:	f853 2b04 	ldr.w	r2, [r3], #4
 8012706:	6800      	ldr	r0, [r0, #0]
 8012708:	9301      	str	r3, [sp, #4]
 801270a:	f7ff fc5d 	bl	8011fc8 <_vfiprintf_r>
 801270e:	b002      	add	sp, #8
 8012710:	f85d eb04 	ldr.w	lr, [sp], #4
 8012714:	b003      	add	sp, #12
 8012716:	4770      	bx	lr
 8012718:	20000054 	.word	0x20000054

0801271c <_fstat_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4d07      	ldr	r5, [pc, #28]	; (801273c <_fstat_r+0x20>)
 8012720:	2300      	movs	r3, #0
 8012722:	4604      	mov	r4, r0
 8012724:	4608      	mov	r0, r1
 8012726:	4611      	mov	r1, r2
 8012728:	602b      	str	r3, [r5, #0]
 801272a:	f7f0 fe46 	bl	80033ba <_fstat>
 801272e:	1c43      	adds	r3, r0, #1
 8012730:	d102      	bne.n	8012738 <_fstat_r+0x1c>
 8012732:	682b      	ldr	r3, [r5, #0]
 8012734:	b103      	cbz	r3, 8012738 <_fstat_r+0x1c>
 8012736:	6023      	str	r3, [r4, #0]
 8012738:	bd38      	pop	{r3, r4, r5, pc}
 801273a:	bf00      	nop
 801273c:	20002cec 	.word	0x20002cec

08012740 <_isatty_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4d06      	ldr	r5, [pc, #24]	; (801275c <_isatty_r+0x1c>)
 8012744:	2300      	movs	r3, #0
 8012746:	4604      	mov	r4, r0
 8012748:	4608      	mov	r0, r1
 801274a:	602b      	str	r3, [r5, #0]
 801274c:	f7f0 fe45 	bl	80033da <_isatty>
 8012750:	1c43      	adds	r3, r0, #1
 8012752:	d102      	bne.n	801275a <_isatty_r+0x1a>
 8012754:	682b      	ldr	r3, [r5, #0]
 8012756:	b103      	cbz	r3, 801275a <_isatty_r+0x1a>
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	20002cec 	.word	0x20002cec

08012760 <__ascii_mbtowc>:
 8012760:	b082      	sub	sp, #8
 8012762:	b901      	cbnz	r1, 8012766 <__ascii_mbtowc+0x6>
 8012764:	a901      	add	r1, sp, #4
 8012766:	b142      	cbz	r2, 801277a <__ascii_mbtowc+0x1a>
 8012768:	b14b      	cbz	r3, 801277e <__ascii_mbtowc+0x1e>
 801276a:	7813      	ldrb	r3, [r2, #0]
 801276c:	600b      	str	r3, [r1, #0]
 801276e:	7812      	ldrb	r2, [r2, #0]
 8012770:	1e10      	subs	r0, r2, #0
 8012772:	bf18      	it	ne
 8012774:	2001      	movne	r0, #1
 8012776:	b002      	add	sp, #8
 8012778:	4770      	bx	lr
 801277a:	4610      	mov	r0, r2
 801277c:	e7fb      	b.n	8012776 <__ascii_mbtowc+0x16>
 801277e:	f06f 0001 	mvn.w	r0, #1
 8012782:	e7f8      	b.n	8012776 <__ascii_mbtowc+0x16>

08012784 <memmove>:
 8012784:	4288      	cmp	r0, r1
 8012786:	b510      	push	{r4, lr}
 8012788:	eb01 0402 	add.w	r4, r1, r2
 801278c:	d902      	bls.n	8012794 <memmove+0x10>
 801278e:	4284      	cmp	r4, r0
 8012790:	4623      	mov	r3, r4
 8012792:	d807      	bhi.n	80127a4 <memmove+0x20>
 8012794:	1e43      	subs	r3, r0, #1
 8012796:	42a1      	cmp	r1, r4
 8012798:	d008      	beq.n	80127ac <memmove+0x28>
 801279a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801279e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127a2:	e7f8      	b.n	8012796 <memmove+0x12>
 80127a4:	4402      	add	r2, r0
 80127a6:	4601      	mov	r1, r0
 80127a8:	428a      	cmp	r2, r1
 80127aa:	d100      	bne.n	80127ae <memmove+0x2a>
 80127ac:	bd10      	pop	{r4, pc}
 80127ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127b6:	e7f7      	b.n	80127a8 <memmove+0x24>

080127b8 <_realloc_r>:
 80127b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127bc:	4680      	mov	r8, r0
 80127be:	4614      	mov	r4, r2
 80127c0:	460e      	mov	r6, r1
 80127c2:	b921      	cbnz	r1, 80127ce <_realloc_r+0x16>
 80127c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127c8:	4611      	mov	r1, r2
 80127ca:	f7fc bc49 	b.w	800f060 <_malloc_r>
 80127ce:	b92a      	cbnz	r2, 80127dc <_realloc_r+0x24>
 80127d0:	f7fc fbda 	bl	800ef88 <_free_r>
 80127d4:	4625      	mov	r5, r4
 80127d6:	4628      	mov	r0, r5
 80127d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127dc:	f000 f828 	bl	8012830 <_malloc_usable_size_r>
 80127e0:	4284      	cmp	r4, r0
 80127e2:	4607      	mov	r7, r0
 80127e4:	d802      	bhi.n	80127ec <_realloc_r+0x34>
 80127e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127ea:	d812      	bhi.n	8012812 <_realloc_r+0x5a>
 80127ec:	4621      	mov	r1, r4
 80127ee:	4640      	mov	r0, r8
 80127f0:	f7fc fc36 	bl	800f060 <_malloc_r>
 80127f4:	4605      	mov	r5, r0
 80127f6:	2800      	cmp	r0, #0
 80127f8:	d0ed      	beq.n	80127d6 <_realloc_r+0x1e>
 80127fa:	42bc      	cmp	r4, r7
 80127fc:	4622      	mov	r2, r4
 80127fe:	4631      	mov	r1, r6
 8012800:	bf28      	it	cs
 8012802:	463a      	movcs	r2, r7
 8012804:	f7fc fbaa 	bl	800ef5c <memcpy>
 8012808:	4631      	mov	r1, r6
 801280a:	4640      	mov	r0, r8
 801280c:	f7fc fbbc 	bl	800ef88 <_free_r>
 8012810:	e7e1      	b.n	80127d6 <_realloc_r+0x1e>
 8012812:	4635      	mov	r5, r6
 8012814:	e7df      	b.n	80127d6 <_realloc_r+0x1e>

08012816 <__ascii_wctomb>:
 8012816:	b149      	cbz	r1, 801282c <__ascii_wctomb+0x16>
 8012818:	2aff      	cmp	r2, #255	; 0xff
 801281a:	bf85      	ittet	hi
 801281c:	238a      	movhi	r3, #138	; 0x8a
 801281e:	6003      	strhi	r3, [r0, #0]
 8012820:	700a      	strbls	r2, [r1, #0]
 8012822:	f04f 30ff 	movhi.w	r0, #4294967295
 8012826:	bf98      	it	ls
 8012828:	2001      	movls	r0, #1
 801282a:	4770      	bx	lr
 801282c:	4608      	mov	r0, r1
 801282e:	4770      	bx	lr

08012830 <_malloc_usable_size_r>:
 8012830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012834:	1f18      	subs	r0, r3, #4
 8012836:	2b00      	cmp	r3, #0
 8012838:	bfbc      	itt	lt
 801283a:	580b      	ldrlt	r3, [r1, r0]
 801283c:	18c0      	addlt	r0, r0, r3
 801283e:	4770      	bx	lr

08012840 <_init>:
 8012840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012842:	bf00      	nop
 8012844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012846:	bc08      	pop	{r3}
 8012848:	469e      	mov	lr, r3
 801284a:	4770      	bx	lr

0801284c <_fini>:
 801284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801284e:	bf00      	nop
 8012850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012852:	bc08      	pop	{r3}
 8012854:	469e      	mov	lr, r3
 8012856:	4770      	bx	lr
