
tempartureMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08013ec0  08013ec0  00023ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a04  08014a04  00030224  2**0
                  CONTENTS
  4 .ARM          00000008  08014a04  08014a04  00024a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a0c  08014a0c  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08014a0c  08014a0c  00024a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08014a18  08014a18  00024a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08014a24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e48  20000228  08014c48  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003070  08014c48  00033070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032fb5  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007472  00000000  00000000  00063209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026c8  00000000  00000000  0006a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002400  00000000  00000000  0006cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000308f7  00000000  00000000  0006f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000322ad  00000000  00000000  0009fa3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109d4b  00000000  00000000  000d1cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dba37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b8f8  00000000  00000000  001dba88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013ea4 	.word	0x08013ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08013ea4 	.word	0x08013ea4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>:

extern Button button;
extern Buzzer buzzer;
extern osSemaphoreId_t stopBuzzerHandle;

Button::Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	60da      	str	r2, [r3, #12]
	_GPIO_Pin = GPIO_Pin;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	821a      	strh	r2, [r3, #16]
	_state = BUTTON_STATE_NONE;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <_ZN6Button9interruptEv>:

void Button::interrupt()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 0){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	8a1b      	ldrh	r3, [r3, #16]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4610      	mov	r0, r2
 8000f10:	f003 fc10 	bl	8004734 <HAL_GPIO_ReadPin>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	bf0c      	ite	eq
 8000f1a:	2301      	moveq	r3, #1
 8000f1c:	2300      	movne	r3, #0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d005      	beq.n	8000f30 <_ZN6Button9interruptEv+0x34>
		_timeTickOn = HAL_GetTick();
 8000f24:	f002 fcfa 	bl	800391c <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	605a      	str	r2, [r3, #4]
		else{
			_state = BUTTON_STATE_PRESS;
		}
		osSemaphoreRelease(stopBuzzerHandle);
	}
}
 8000f2e:	e028      	b.n	8000f82 <_ZN6Button9interruptEv+0x86>
	else if(HAL_GPIO_ReadPin(_GPIOx, _GPIO_Pin) == 1){
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	8a1b      	ldrh	r3, [r3, #16]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	f003 fbfa 	bl	8004734 <HAL_GPIO_ReadPin>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d018      	beq.n	8000f82 <_ZN6Button9interruptEv+0x86>
		_timeTickOff = HAL_GetTick();
 8000f50:	f002 fce4 	bl	800391c <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
		if((_timeTickOff - _timeTickOn) > 500){
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f68:	d903      	bls.n	8000f72 <_ZN6Button9interruptEv+0x76>
			_state = BUTTON_LONG_PRESS;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e002      	b.n	8000f78 <_ZN6Button9interruptEv+0x7c>
			_state = BUTTON_STATE_PRESS;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(stopBuzzerHandle);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <_ZN6Button9interruptEv+0x90>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00c f9a5 	bl	800d2cc <osSemaphoreRelease>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000f30 	.word	0x20000f30

08000f90 <StartbuttonTak>:

extern "C" void StartbuttonTak()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartbuttonTak */
  /* Infinite loop */
  while(1)
  {
	osSemaphoreAcquire(stopBuzzerHandle,osWaitForever);
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <StartbuttonTak+0x20>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00c f943 	bl	800d228 <osSemaphoreAcquire>
	buzzer.off();
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <StartbuttonTak+0x24>)
 8000fa4:	f000 f81e 	bl	8000fe4 <_ZN6Buzzer3offEv>
    osDelay(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f00c f899 	bl	800d0e0 <osDelay>
	osSemaphoreAcquire(stopBuzzerHandle,osWaitForever);
 8000fae:	e7f1      	b.n	8000f94 <StartbuttonTak+0x4>
 8000fb0:	20000f30 	.word	0x20000f30
 8000fb4:	20000304 	.word	0x20000304

08000fb8 <_ZN6Buzzer2onEv>:

extern TIM_HandleTypeDef htim3;
extern Buzzer buzzer;


void Buzzer::on(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	_state = MUSIC_ON;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(_timer);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f006 fa32 	bl	8007434 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(_timer, TIM_CHANNEL_1);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f006 fb22 	bl	8007620 <HAL_TIM_PWM_Start_IT>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <_ZN6Buzzer3offEv>:

void Buzzer::off(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	_state = MUSIC_OFF;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(_timer);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f006 fa8c 	bl	8007514 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop_IT(_timer, TIM_CHANNEL_1);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f006 fc60 	bl	80078c8 <HAL_TIM_PWM_Stop_IT>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZN10CliCommandC1EPKc>:
class CliCommand {
private:
	char _name[MAX_NAME_LEN];
public:
	CliCommand(){}
	CliCommand(const char* name){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <_ZN10CliCommandC1EPKc+0x28>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	601a      	str	r2, [r3, #0]
		strcpy(_name, name);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3304      	adds	r3, #4
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f010 f97b 	bl	8011322 <strcpy>
	}
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	080143f8 	.word	0x080143f8

0800103c <_ZN10CliCommandD1Ev>:
	virtual void doCommand(const char* param) = 0;
	virtual ~CliCommand(){}
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <_ZN10CliCommandD1Ev+0x1c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	080143f8 	.word	0x080143f8

0800105c <_ZN10CliCommandD0Ev>:
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffe9 	bl	800103c <_ZN10CliCommandD1Ev>
 800106a:	2118      	movs	r1, #24
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f00f fa0d 	bl	801048c <_ZdlPvj>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN8LedOnCmdC1EPKcP3Led>:
extern File warningFile;

class LedOnCmd : public CliCommand {
	Led *_led;
public:
	LedOnCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68b9      	ldr	r1, [r7, #8]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffbf 	bl	8001010 <_ZN10CliCommandC1EPKc>
 8001092:	4a05      	ldr	r2, [pc, #20]	; (80010a8 <_ZN8LedOnCmdC1EPKcP3Led+0x2c>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	080143e4 	.word	0x080143e4

080010ac <_ZN8LedOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
		_led->on();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fa43 	bl	8002546 <_ZN3Led2onEv>
	}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZN9LedOffCmdC1EPKcP3Led>:
};

class LedOffCmd : public CliCommand {
	Led *_led;
public:
	LedOffCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff99 	bl	8001010 <_ZN10CliCommandC1EPKc>
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_ZN9LedOffCmdC1EPKcP3Led+0x2c>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	080143d0 	.word	0x080143d0

080010f8 <_ZN9LedOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
		_led->off();
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4618      	mov	r0, r3
 8001108:	f001 fa30 	bl	800256c <_ZN3Led3offEv>
	}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN11LedBlinkCmdC1EPKcP3Led>:
};

class LedBlinkCmd : public CliCommand {
	Led *_led;
public:
	LedBlinkCmd (const char * name, Led * led) : CliCommand(name), _led(led) {}
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	68b9      	ldr	r1, [r7, #8]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff73 	bl	8001010 <_ZN10CliCommandC1EPKc>
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_ZN11LedBlinkCmdC1EPKcP3Led+0x2c>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	080143bc 	.word	0x080143bc

08001144 <_ZN11LedBlinkCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
		_led->blink();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fa1d 	bl	8002592 <_ZN3Led5blinkEv>
	}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>:
};

class BuzzerOnCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOnCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff4d 	bl	8001010 <_ZN10CliCommandC1EPKc>
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_ZN11BuzzerOnCmdC1EPKcP6Buzzer+0x2c>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	619a      	str	r2, [r3, #24]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	080143a8 	.word	0x080143a8

08001190 <_ZN11BuzzerOnCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
		_buzzer->on();
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff0a 	bl	8000fb8 <_ZN6Buzzer2onEv>
	}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>:
};

class BuzzerOffCmd : public CliCommand {
	Buzzer *_buzzer;
public:
	BuzzerOffCmd (const char * name, Buzzer* buzzer) : CliCommand(name), _buzzer(buzzer) {}
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	68b9      	ldr	r1, [r7, #8]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff27 	bl	8001010 <_ZN10CliCommandC1EPKc>
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_ZN12BuzzerOffCmdC1EPKcP6Buzzer+0x2c>)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08014394 	.word	0x08014394

080011dc <_ZN12BuzzerOffCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
		_buzzer->off();
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fefa 	bl	8000fe4 <_ZN6Buzzer3offEv>
	}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN14getDataTimeCmdC1EPKcP3Rtc>:
};

class getDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	getDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff01 	bl	8001010 <_ZN10CliCommandC1EPKc>
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <_ZN14getDataTimeCmdC1EPKcP3Rtc+0x2c>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	619a      	str	r2, [r3, #24]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08014380 	.word	0x08014380

08001228 <_ZN14getDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af04      	add	r7, sp, #16
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
		_rtc->getTime(&dateTime);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4910      	ldr	r1, [pc, #64]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fc8b 	bl	8002b54 <_ZN3Rtc7getTimeEP9DateTime_>
		printf("%02d:%02d:%02d-%d-%02d/%02d/%02d\r\n",
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001240:	689c      	ldr	r4, [r3, #8]
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001244:	685d      	ldr	r5, [r3, #4]
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001248:	681e      	ldr	r6, [r3, #0]
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001250:	6912      	ldr	r2, [r2, #16]
 8001252:	4909      	ldr	r1, [pc, #36]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001254:	6949      	ldr	r1, [r1, #20]
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <_ZN14getDataTimeCmd9doCommandEPKc+0x50>)
 8001258:	6980      	ldr	r0, [r0, #24]
 800125a:	9003      	str	r0, [sp, #12]
 800125c:	9102      	str	r1, [sp, #8]
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4633      	mov	r3, r6
 8001264:	462a      	mov	r2, r5
 8001266:	4621      	mov	r1, r4
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <_ZN14getDataTimeCmd9doCommandEPKc+0x54>)
 800126a:	f00f fee7 	bl	801103c <iprintf>
						dateTime.hours, dateTime.min, dateTime.sec,
						dateTime.weekDay,
						dateTime.day, dateTime.month, dateTime.year);
	}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001276:	bf00      	nop
 8001278:	20000368 	.word	0x20000368
 800127c:	08013ec0 	.word	0x08013ec0

08001280 <_ZN14setDataTimeCmdC1EPKcP3Rtc>:
};

class setDataTimeCmd : public CliCommand {
	Rtc *_rtc;
public:
	setDataTimeCmd (const char * name, Rtc* rtc) : CliCommand(name), _rtc(rtc) {}
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff febd 	bl	8001010 <_ZN10CliCommandC1EPKc>
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_ZN14setDataTimeCmdC1EPKcP3Rtc+0x2c>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0801436c 	.word	0x0801436c

080012b0 <_ZN14setDataTimeCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
		const char s[2] = ":";
 80012ba:	233a      	movs	r3, #58	; 0x3a
 80012bc:	813b      	strh	r3, [r7, #8]
		char* date= (char*) param;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
		//day:month:year:hours:min:sec
		//"01:01:22:12:12:12"
		dateTime.day = atoi(strtok(date, s));
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f010 f833 	bl	8011334 <strtok>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f00f f914 	bl	80104fe <atoi>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 80012da:	6113      	str	r3, [r2, #16]
		dateTime.month = atoi(strtok(NULL, s));
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	2000      	movs	r0, #0
 80012e4:	f010 f826 	bl	8011334 <strtok>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00f f907 	bl	80104fe <atoi>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 80012f4:	6153      	str	r3, [r2, #20]
		dateTime.year = atoi(strtok(NULL, s));
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4619      	mov	r1, r3
 80012fc:	2000      	movs	r0, #0
 80012fe:	f010 f819 	bl	8011334 <strtok>
 8001302:	4603      	mov	r3, r0
 8001304:	4618      	mov	r0, r3
 8001306:	f00f f8fa 	bl	80104fe <atoi>
 800130a:	4603      	mov	r3, r0
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 800130e:	6193      	str	r3, [r2, #24]
		dateTime.hours = atoi(strtok(NULL, s));
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4619      	mov	r1, r3
 8001316:	2000      	movs	r0, #0
 8001318:	f010 f80c 	bl	8011334 <strtok>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	f00f f8ed 	bl	80104fe <atoi>
 8001324:	4603      	mov	r3, r0
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001328:	6093      	str	r3, [r2, #8]
		dateTime.min = atoi(strtok(NULL, s));
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4619      	mov	r1, r3
 8001330:	2000      	movs	r0, #0
 8001332:	f00f ffff 	bl	8011334 <strtok>
 8001336:	4603      	mov	r3, r0
 8001338:	4618      	mov	r0, r3
 800133a:	f00f f8e0 	bl	80104fe <atoi>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001342:	6053      	str	r3, [r2, #4]
		dateTime.sec = atoi(strtok(NULL, s));
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	2000      	movs	r0, #0
 800134c:	f00f fff2 	bl	8011334 <strtok>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f00f f8d3 	bl	80104fe <atoi>
 8001358:	4603      	mov	r3, r0
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 800135c:	6013      	str	r3, [r2, #0]
		_rtc->setTime(&dateTime);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4904      	ldr	r1, [pc, #16]	; (8001374 <_ZN14setDataTimeCmd9doCommandEPKc+0xc4>)
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fc48 	bl	8002bfa <_ZN3Rtc7setTimeEP9DateTime_>
	}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000368 	.word	0x20000368

08001378 <_ZN18setCriticalTempCmdC1EPKcP5Flash>:

class setCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	setCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe41 	bl	8001010 <_ZN10CliCommandC1EPKc>
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_ZN18setCriticalTempCmdC1EPKcP5Flash+0x2c>)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	08014358 	.word	0x08014358

080013a8 <_ZN18setCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f00f f8a3 	bl	80104fe <atoi>
 80013b8:	4603      	mov	r3, r0
 80013ba:	81fb      	strh	r3, [r7, #14]
		if(Temprature.warningTemp > val){
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 80013be:	885b      	ldrh	r3, [r3, #2]
 80013c0:	89fa      	ldrh	r2, [r7, #14]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d203      	bcs.n	80013ce <_ZN18setCriticalTempCmd9doCommandEPKc+0x26>
			printf("A critical temperature cannot be more then warning temperature\r\n");
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <_ZN18setCriticalTempCmd9doCommandEPKc+0x44>)
 80013c8:	f00f febe 	bl	8011148 <puts>
			return;
 80013cc:	e008      	b.n	80013e0 <_ZN18setCriticalTempCmd9doCommandEPKc+0x38>
		}
		Temprature.criticalTemp = val;
 80013ce:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	8013      	strh	r3, [r2, #0]
		_flash->writh(&Temprature);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4903      	ldr	r1, [pc, #12]	; (80013e8 <_ZN18setCriticalTempCmd9doCommandEPKc+0x40>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 f829 	bl	8002432 <_ZN5Flash5writhEPv>
	}
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	08013ee4 	.word	0x08013ee4

080013f0 <_ZN17setWarningTempCmdC1EPKcP5Flash>:

class setWarningTempCmd : public CliCommand {
	Flash* _flash;

public:
	setWarningTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe05 	bl	8001010 <_ZN10CliCommandC1EPKc>
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <_ZN17setWarningTempCmdC1EPKcP5Flash+0x2c>)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	08014344 	.word	0x08014344

08001420 <_ZN17setWarningTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
		uint16_t val;
		val = atoi(param);
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f00f f867 	bl	80104fe <atoi>
 8001430:	4603      	mov	r3, r0
 8001432:	81fb      	strh	r3, [r7, #14]
		if(Temprature.criticalTemp < val){
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	89fa      	ldrh	r2, [r7, #14]
 800143a:	429a      	cmp	r2, r3
 800143c:	d903      	bls.n	8001446 <_ZN17setWarningTempCmd9doCommandEPKc+0x26>
			printf("A warning temperature cannot be less then warning temperature\r\n");
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN17setWarningTempCmd9doCommandEPKc+0x44>)
 8001440:	f00f fe82 	bl	8011148 <puts>
			return;
 8001444:	e008      	b.n	8001458 <_ZN17setWarningTempCmd9doCommandEPKc+0x38>
		}
		Temprature.warningTemp = val;
 8001446:	4a06      	ldr	r2, [pc, #24]	; (8001460 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	8053      	strh	r3, [r2, #2]
		_flash->writh(&Temprature);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4903      	ldr	r1, [pc, #12]	; (8001460 <_ZN17setWarningTempCmd9doCommandEPKc+0x40>)
 8001452:	4618      	mov	r0, r3
 8001454:	f000 ffed 	bl	8002432 <_ZN5Flash5writhEPv>
	}
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000000 	.word	0x20000000
 8001464:	08013f24 	.word	0x08013f24

08001468 <_ZN18getCriticalTempCmdC1EPKcP5Flash>:

class getCriticalTempCmd : public CliCommand {
	Flash* _flash;

public:
	getCriticalTempCmd (const char * name, Flash* flash) : CliCommand(name), _flash(flash) {}
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fdc9 	bl	8001010 <_ZN10CliCommandC1EPKc>
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_ZN18getCriticalTempCmdC1EPKcP5Flash+0x2c>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	619a      	str	r2, [r3, #24]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	08014330 	.word	0x08014330

08001498 <_ZN18getCriticalTempCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	{
		_flash->read();
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fff6 	bl	8002498 <_ZN5Flash4readEv>
		printf("Critical temperature = %d\r\nWarning temperature = %d\r\n" ,Temprature.criticalTemp , Temprature.warningTemp);
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <_ZN18getCriticalTempCmd9doCommandEPKc+0x30>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <_ZN18getCriticalTempCmd9doCommandEPKc+0x30>)
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <_ZN18getCriticalTempCmd9doCommandEPKc+0x34>)
 80014ba:	f00f fdbf 	bl	801103c <iprintf>
	}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000000 	.word	0x20000000
 80014cc:	08013f64 	.word	0x08013f64

080014d0 <_ZN12clearFileCmdC1EPKcP4File>:

class clearFileCmd : public CliCommand {
	File* _file;

public:
	clearFileCmd (const char * name, File* file) : CliCommand(name), _file(file) {}
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fd95 	bl	8001010 <_ZN10CliCommandC1EPKc>
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_ZN12clearFileCmdC1EPKcP4File+0x2c>)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	0801431c 	.word	0x0801431c

08001500 <_ZN12clearFileCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
	{
		_file->clear();
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 ff48 	bl	80023a4 <_ZN4File5clearEv>
	}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_ZN12printFileCmdC1EPKcP4File>:

class printFileCmd : public CliCommand {
	File* _file;

public:
	printFileCmd (const char * name, File* file) : CliCommand(name), _file(file) {}
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fd6f 	bl	8001010 <_ZN10CliCommandC1EPKc>
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_ZN12printFileCmdC1EPKcP4File+0x2c>)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08014308 	.word	0x08014308

0800154c <_ZN12printFileCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	{
		_file->read();
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fe50 	bl	8002200 <_ZN4File4readEv>
	}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_ZN7helpCmdC1EPKc>:
};

class helpCmd : public CliCommand {

public:
	helpCmd (const char * name) : CliCommand(name) {}
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fd4a 	bl	8001010 <_ZN10CliCommandC1EPKc>
 800157c:	4a03      	ldr	r2, [pc, #12]	; (800158c <_ZN7helpCmdC1EPKc+0x24>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	080142f4 	.word	0x080142f4

08001590 <_ZN7helpCmd9doCommandEPKc>:
	void doCommand(const char* param) override
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
	{
		printf("1. help\r\n"
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <_ZN7helpCmd9doCommandEPKc+0x18>)
 800159c:	f00f fdd4 	bl	8011148 <puts>
				"4.setCritical param\r\n"
				"5.setWarning param\r\n"
		        "6.clearLog\r\n"
				"7.printLog\r\n"
				"8.printLog\r\n");
	}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08013f9c 	.word	0x08013f9c

080015ac <_Z7CliInitv>:
};



void CliInit()
{
 80015ac:	b598      	push	{r3, r4, r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	//////////////////ledB//////////////////////////////
	CliContainer.add (new LedOnCmd("ledOn", &ledB));
 80015b0:	201c      	movs	r0, #28
 80015b2:	f00e ff6d 	bl	8010490 <_Znwj>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461c      	mov	r4, r3
 80015ba:	4a59      	ldr	r2, [pc, #356]	; (8001720 <_Z7CliInitv+0x174>)
 80015bc:	4959      	ldr	r1, [pc, #356]	; (8001724 <_Z7CliInitv+0x178>)
 80015be:	4620      	mov	r0, r4
 80015c0:	f7ff fd5c 	bl	800107c <_ZN8LedOnCmdC1EPKcP3Led>
 80015c4:	4621      	mov	r1, r4
 80015c6:	4858      	ldr	r0, [pc, #352]	; (8001728 <_Z7CliInitv+0x17c>)
 80015c8:	f000 facd 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedOffCmd("ledOff", &ledB));
 80015cc:	201c      	movs	r0, #28
 80015ce:	f00e ff5f 	bl	8010490 <_Znwj>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461c      	mov	r4, r3
 80015d6:	4a52      	ldr	r2, [pc, #328]	; (8001720 <_Z7CliInitv+0x174>)
 80015d8:	4954      	ldr	r1, [pc, #336]	; (800172c <_Z7CliInitv+0x180>)
 80015da:	4620      	mov	r0, r4
 80015dc:	f7ff fd74 	bl	80010c8 <_ZN9LedOffCmdC1EPKcP3Led>
 80015e0:	4621      	mov	r1, r4
 80015e2:	4851      	ldr	r0, [pc, #324]	; (8001728 <_Z7CliInitv+0x17c>)
 80015e4:	f000 fabf 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new LedBlinkCmd("ledBlink", &ledB));
 80015e8:	201c      	movs	r0, #28
 80015ea:	f00e ff51 	bl	8010490 <_Znwj>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461c      	mov	r4, r3
 80015f2:	4a4b      	ldr	r2, [pc, #300]	; (8001720 <_Z7CliInitv+0x174>)
 80015f4:	494e      	ldr	r1, [pc, #312]	; (8001730 <_Z7CliInitv+0x184>)
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff fd8c 	bl	8001114 <_ZN11LedBlinkCmdC1EPKcP3Led>
 80015fc:	4621      	mov	r1, r4
 80015fe:	484a      	ldr	r0, [pc, #296]	; (8001728 <_Z7CliInitv+0x17c>)
 8001600:	f000 fab1 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	////////////////////buzzer///////////////////////////
	CliContainer.add (new BuzzerOnCmd("BOn", &buzzer));
 8001604:	201c      	movs	r0, #28
 8001606:	f00e ff43 	bl	8010490 <_Znwj>
 800160a:	4603      	mov	r3, r0
 800160c:	461c      	mov	r4, r3
 800160e:	4a49      	ldr	r2, [pc, #292]	; (8001734 <_Z7CliInitv+0x188>)
 8001610:	4949      	ldr	r1, [pc, #292]	; (8001738 <_Z7CliInitv+0x18c>)
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fda4 	bl	8001160 <_ZN11BuzzerOnCmdC1EPKcP6Buzzer>
 8001618:	4621      	mov	r1, r4
 800161a:	4843      	ldr	r0, [pc, #268]	; (8001728 <_Z7CliInitv+0x17c>)
 800161c:	f000 faa3 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new BuzzerOffCmd("BOff", &buzzer));
 8001620:	201c      	movs	r0, #28
 8001622:	f00e ff35 	bl	8010490 <_Znwj>
 8001626:	4603      	mov	r3, r0
 8001628:	461c      	mov	r4, r3
 800162a:	4a42      	ldr	r2, [pc, #264]	; (8001734 <_Z7CliInitv+0x188>)
 800162c:	4943      	ldr	r1, [pc, #268]	; (800173c <_Z7CliInitv+0x190>)
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff fdbc 	bl	80011ac <_ZN12BuzzerOffCmdC1EPKcP6Buzzer>
 8001634:	4621      	mov	r1, r4
 8001636:	483c      	ldr	r0, [pc, #240]	; (8001728 <_Z7CliInitv+0x17c>)
 8001638:	f000 fa95 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>

	/////////////////////RTC//////////////////////////
	CliContainer.add (new getDataTimeCmd("getTime", &rtc));
 800163c:	201c      	movs	r0, #28
 800163e:	f00e ff27 	bl	8010490 <_Znwj>
 8001642:	4603      	mov	r3, r0
 8001644:	461c      	mov	r4, r3
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <_Z7CliInitv+0x194>)
 8001648:	493e      	ldr	r1, [pc, #248]	; (8001744 <_Z7CliInitv+0x198>)
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fdd4 	bl	80011f8 <_ZN14getDataTimeCmdC1EPKcP3Rtc>
 8001650:	4621      	mov	r1, r4
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <_Z7CliInitv+0x17c>)
 8001654:	f000 fa87 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setDataTimeCmd("setTime", &rtc));
 8001658:	201c      	movs	r0, #28
 800165a:	f00e ff19 	bl	8010490 <_Znwj>
 800165e:	4603      	mov	r3, r0
 8001660:	461c      	mov	r4, r3
 8001662:	4a37      	ldr	r2, [pc, #220]	; (8001740 <_Z7CliInitv+0x194>)
 8001664:	4938      	ldr	r1, [pc, #224]	; (8001748 <_Z7CliInitv+0x19c>)
 8001666:	4620      	mov	r0, r4
 8001668:	f7ff fe0a 	bl	8001280 <_ZN14setDataTimeCmdC1EPKcP3Rtc>
 800166c:	4621      	mov	r1, r4
 800166e:	482e      	ldr	r0, [pc, #184]	; (8001728 <_Z7CliInitv+0x17c>)
 8001670:	f000 fa79 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>

	////////////////////flash/////////////////////////
	CliContainer.add (new setCriticalTempCmd("setCritical", &flash));
 8001674:	201c      	movs	r0, #28
 8001676:	f00e ff0b 	bl	8010490 <_Znwj>
 800167a:	4603      	mov	r3, r0
 800167c:	461c      	mov	r4, r3
 800167e:	4a33      	ldr	r2, [pc, #204]	; (800174c <_Z7CliInitv+0x1a0>)
 8001680:	4933      	ldr	r1, [pc, #204]	; (8001750 <_Z7CliInitv+0x1a4>)
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fe78 	bl	8001378 <_ZN18setCriticalTempCmdC1EPKcP5Flash>
 8001688:	4621      	mov	r1, r4
 800168a:	4827      	ldr	r0, [pc, #156]	; (8001728 <_Z7CliInitv+0x17c>)
 800168c:	f000 fa6b 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new setWarningTempCmd("setWarning", &flash));
 8001690:	201c      	movs	r0, #28
 8001692:	f00e fefd 	bl	8010490 <_Znwj>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	4a2c      	ldr	r2, [pc, #176]	; (800174c <_Z7CliInitv+0x1a0>)
 800169c:	492d      	ldr	r1, [pc, #180]	; (8001754 <_Z7CliInitv+0x1a8>)
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff fea6 	bl	80013f0 <_ZN17setWarningTempCmdC1EPKcP5Flash>
 80016a4:	4621      	mov	r1, r4
 80016a6:	4820      	ldr	r0, [pc, #128]	; (8001728 <_Z7CliInitv+0x17c>)
 80016a8:	f000 fa5d 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>

	CliContainer.add (new getCriticalTempCmd("getCritical", &flash));
 80016ac:	201c      	movs	r0, #28
 80016ae:	f00e feef 	bl	8010490 <_Znwj>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461c      	mov	r4, r3
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <_Z7CliInitv+0x1a0>)
 80016b8:	4927      	ldr	r1, [pc, #156]	; (8001758 <_Z7CliInitv+0x1ac>)
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff fed4 	bl	8001468 <_ZN18getCriticalTempCmdC1EPKcP5Flash>
 80016c0:	4621      	mov	r1, r4
 80016c2:	4819      	ldr	r0, [pc, #100]	; (8001728 <_Z7CliInitv+0x17c>)
 80016c4:	f000 fa4f 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>

	/////////////////file///////////////////////////////////////////
	CliContainer.add (new clearFileCmd("clearLog", &logFile));
 80016c8:	201c      	movs	r0, #28
 80016ca:	f00e fee1 	bl	8010490 <_Znwj>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	4a22      	ldr	r2, [pc, #136]	; (800175c <_Z7CliInitv+0x1b0>)
 80016d4:	4922      	ldr	r1, [pc, #136]	; (8001760 <_Z7CliInitv+0x1b4>)
 80016d6:	4620      	mov	r0, r4
 80016d8:	f7ff fefa 	bl	80014d0 <_ZN12clearFileCmdC1EPKcP4File>
 80016dc:	4621      	mov	r1, r4
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <_Z7CliInitv+0x17c>)
 80016e0:	f000 fa41 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>
	CliContainer.add (new printFileCmd("printLog", &warningFile));
 80016e4:	201c      	movs	r0, #28
 80016e6:	f00e fed3 	bl	8010490 <_Znwj>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <_Z7CliInitv+0x1b8>)
 80016f0:	491d      	ldr	r1, [pc, #116]	; (8001768 <_Z7CliInitv+0x1bc>)
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff ff12 	bl	800151c <_ZN12printFileCmdC1EPKcP4File>
 80016f8:	4621      	mov	r1, r4
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <_Z7CliInitv+0x17c>)
 80016fc:	f000 fa33 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>

	////////////////help/////////////////////////////////////////
	CliContainer.add (new helpCmd("help"));
 8001700:	2018      	movs	r0, #24
 8001702:	f00e fec5 	bl	8010490 <_Znwj>
 8001706:	4603      	mov	r3, r0
 8001708:	461c      	mov	r4, r3
 800170a:	4918      	ldr	r1, [pc, #96]	; (800176c <_Z7CliInitv+0x1c0>)
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff2b 	bl	8001568 <_ZN7helpCmdC1EPKc>
 8001712:	4621      	mov	r1, r4
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <_Z7CliInitv+0x17c>)
 8001716:	f000 fa26 	bl	8001b66 <_ZN12CliContainer3addEP10CliCommand>


}
 800171a:	bf00      	nop
 800171c:	bd98      	pop	{r3, r4, r7, pc}
 800171e:	bf00      	nop
 8001720:	20000320 	.word	0x20000320
 8001724:	08014028 	.word	0x08014028
 8001728:	20000244 	.word	0x20000244
 800172c:	08014030 	.word	0x08014030
 8001730:	08014038 	.word	0x08014038
 8001734:	20000304 	.word	0x20000304
 8001738:	08014044 	.word	0x08014044
 800173c:	08014048 	.word	0x08014048
 8001740:	20000360 	.word	0x20000360
 8001744:	08014050 	.word	0x08014050
 8001748:	08014058 	.word	0x08014058
 800174c:	20000358 	.word	0x20000358
 8001750:	08014060 	.word	0x08014060
 8001754:	0801406c 	.word	0x0801406c
 8001758:	08014078 	.word	0x08014078
 800175c:	20000384 	.word	0x20000384
 8001760:	08014084 	.word	0x08014084
 8001764:	2000080c 	.word	0x2000080c
 8001768:	08014090 	.word	0x08014090
 800176c:	0801409c 	.word	0x0801409c

08001770 <_ZN7helpCmdD1Ev>:
class helpCmd : public CliCommand {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4a05      	ldr	r2, [pc, #20]	; (8001790 <_ZN7helpCmdD1Ev+0x20>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fc5b 	bl	800103c <_ZN10CliCommandD1Ev>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	080142f4 	.word	0x080142f4

08001794 <_ZN7helpCmdD0Ev>:
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffe7 	bl	8001770 <_ZN7helpCmdD1Ev>
 80017a2:	2118      	movs	r1, #24
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f00e fe71 	bl	801048c <_ZdlPvj>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN12printFileCmdD1Ev>:
class printFileCmd : public CliCommand {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_ZN12printFileCmdD1Ev+0x20>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc39 	bl	800103c <_ZN10CliCommandD1Ev>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	08014308 	.word	0x08014308

080017d8 <_ZN12printFileCmdD0Ev>:
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffe7 	bl	80017b4 <_ZN12printFileCmdD1Ev>
 80017e6:	211c      	movs	r1, #28
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f00e fe4f 	bl	801048c <_ZdlPvj>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN12clearFileCmdD1Ev>:
class clearFileCmd : public CliCommand {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_ZN12clearFileCmdD1Ev+0x20>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fc17 	bl	800103c <_ZN10CliCommandD1Ev>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	0801431c 	.word	0x0801431c

0800181c <_ZN12clearFileCmdD0Ev>:
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_ZN12clearFileCmdD1Ev>
 800182a:	211c      	movs	r1, #28
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f00e fe2d 	bl	801048c <_ZdlPvj>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN18getCriticalTempCmdD1Ev>:
class getCriticalTempCmd : public CliCommand {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a05      	ldr	r2, [pc, #20]	; (800185c <_ZN18getCriticalTempCmdD1Ev+0x20>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fbf5 	bl	800103c <_ZN10CliCommandD1Ev>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	08014330 	.word	0x08014330

08001860 <_ZN18getCriticalTempCmdD0Ev>:
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ffe7 	bl	800183c <_ZN18getCriticalTempCmdD1Ev>
 800186e:	211c      	movs	r1, #28
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f00e fe0b 	bl	801048c <_ZdlPvj>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN17setWarningTempCmdD1Ev>:
class setWarningTempCmd : public CliCommand {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <_ZN17setWarningTempCmdD1Ev+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbd3 	bl	800103c <_ZN10CliCommandD1Ev>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	08014344 	.word	0x08014344

080018a4 <_ZN17setWarningTempCmdD0Ev>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe7 	bl	8001880 <_ZN17setWarningTempCmdD1Ev>
 80018b2:	211c      	movs	r1, #28
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f00e fde9 	bl	801048c <_ZdlPvj>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_ZN18setCriticalTempCmdD1Ev>:
class setCriticalTempCmd : public CliCommand {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_ZN18setCriticalTempCmdD1Ev+0x20>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fbb1 	bl	800103c <_ZN10CliCommandD1Ev>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08014358 	.word	0x08014358

080018e8 <_ZN18setCriticalTempCmdD0Ev>:
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffe7 	bl	80018c4 <_ZN18setCriticalTempCmdD1Ev>
 80018f6:	211c      	movs	r1, #28
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f00e fdc7 	bl	801048c <_ZdlPvj>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZN14setDataTimeCmdD1Ev>:
class setDataTimeCmd : public CliCommand {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_ZN14setDataTimeCmdD1Ev+0x20>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fb8f 	bl	800103c <_ZN10CliCommandD1Ev>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	0801436c 	.word	0x0801436c

0800192c <_ZN14setDataTimeCmdD0Ev>:
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ffe7 	bl	8001908 <_ZN14setDataTimeCmdD1Ev>
 800193a:	211c      	movs	r1, #28
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f00e fda5 	bl	801048c <_ZdlPvj>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN14getDataTimeCmdD1Ev>:
class getDataTimeCmd : public CliCommand {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <_ZN14getDataTimeCmdD1Ev+0x20>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb6d 	bl	800103c <_ZN10CliCommandD1Ev>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	08014380 	.word	0x08014380

08001970 <_ZN14getDataTimeCmdD0Ev>:
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_ZN14getDataTimeCmdD1Ev>
 800197e:	211c      	movs	r1, #28
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f00e fd83 	bl	801048c <_ZdlPvj>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_ZN12BuzzerOffCmdD1Ev>:
class BuzzerOffCmd : public CliCommand {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <_ZN12BuzzerOffCmdD1Ev+0x20>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fb4b 	bl	800103c <_ZN10CliCommandD1Ev>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	08014394 	.word	0x08014394

080019b4 <_ZN12BuzzerOffCmdD0Ev>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ffe7 	bl	8001990 <_ZN12BuzzerOffCmdD1Ev>
 80019c2:	211c      	movs	r1, #28
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f00e fd61 	bl	801048c <_ZdlPvj>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZN11BuzzerOnCmdD1Ev>:
class BuzzerOnCmd : public CliCommand {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_ZN11BuzzerOnCmdD1Ev+0x20>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fb29 	bl	800103c <_ZN10CliCommandD1Ev>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	080143a8 	.word	0x080143a8

080019f8 <_ZN11BuzzerOnCmdD0Ev>:
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ffe7 	bl	80019d4 <_ZN11BuzzerOnCmdD1Ev>
 8001a06:	211c      	movs	r1, #28
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f00e fd3f 	bl	801048c <_ZdlPvj>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZN11LedBlinkCmdD1Ev>:
class LedBlinkCmd : public CliCommand {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <_ZN11LedBlinkCmdD1Ev+0x20>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fb07 	bl	800103c <_ZN10CliCommandD1Ev>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	080143bc 	.word	0x080143bc

08001a3c <_ZN11LedBlinkCmdD0Ev>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_ZN11LedBlinkCmdD1Ev>
 8001a4a:	211c      	movs	r1, #28
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f00e fd1d 	bl	801048c <_ZdlPvj>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_ZN9LedOffCmdD1Ev>:
class LedOffCmd : public CliCommand {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_ZN9LedOffCmdD1Ev+0x20>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fae5 	bl	800103c <_ZN10CliCommandD1Ev>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	080143d0 	.word	0x080143d0

08001a80 <_ZN9LedOffCmdD0Ev>:
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffe7 	bl	8001a5c <_ZN9LedOffCmdD1Ev>
 8001a8e:	211c      	movs	r1, #28
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f00e fcfb 	bl	801048c <_ZdlPvj>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <_ZN8LedOnCmdD1Ev>:
class LedOnCmd : public CliCommand {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_ZN8LedOnCmdD1Ev+0x20>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fac3 	bl	800103c <_ZN10CliCommandD1Ev>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	080143e4 	.word	0x080143e4

08001ac4 <_ZN8LedOnCmdD0Ev>:
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffe7 	bl	8001aa0 <_ZN8LedOnCmdD1Ev>
 8001ad2:	211c      	movs	r1, #28
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f00e fcd9 	bl	801048c <_ZdlPvj>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_ZNK10CliCommand7getNameEv>:
	const char* getName ()const {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
		return _name;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
	}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_ZN12CliContainerC1Ev>:

#include "CliContainer.h"

CliContainer CliContainer;

CliContainer::CliContainer()
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
{
	_counter = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	651a      	str	r2, [r3, #80]	; 0x50
	memset(_CliCommand, 0, sizeof(CliCommand*) * MAX_CLI);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2250      	movs	r2, #80	; 0x50
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00e fd41 	bl	8010598 <memset>
}
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN12CliContainerD1Ev>:

CliContainer::~CliContainer()
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
{
	for (int i = 0; i < MAX_CLI; i++) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b13      	cmp	r3, #19
 8001b30:	dc14      	bgt.n	8001b5c <_ZN12CliContainerD1Ev+0x3c>
		if (_CliCommand[i] != NULL) {
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <_ZN12CliContainerD1Ev+0x34>
			delete _CliCommand[i];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <_ZN12CliContainerD1Ev+0x34>
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	4790      	blx	r2
	for (int i = 0; i < MAX_CLI; i++) {
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e7e7      	b.n	8001b2c <_ZN12CliContainerD1Ev+0xc>
		}
	}
}
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_ZN12CliContainer3addEP10CliCommand>:

void CliContainer::add(CliCommand* pCliCommand)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
	if (_counter < MAX_CLI) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b74:	2b13      	cmp	r3, #19
 8001b76:	dc0a      	bgt.n	8001b8e <_ZN12CliContainer3addEP10CliCommand+0x28>
		_CliCommand[_counter] = pCliCommand;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6839      	ldr	r1, [r7, #0]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		_counter++;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_ZN12CliContainer4CallEPcS0_>:

int CliContainer::getCounter(){
	return _counter;
}

int CliContainer::Call (char* cmdname, char* param ){
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < _counter; i++){
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	da25      	bge.n	8001c00 <_ZN12CliContainer4CallEPcS0_+0x66>
		if(strcmp(cmdname, _CliCommand[i]->getName())==0){
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff91 	bl	8001ae4 <_ZNK10CliCommand7getNameEv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68b8      	ldr	r0, [r7, #8]
 8001bc8:	f7fe fb02 	bl	80001d0 <strcmp>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <_ZN12CliContainer4CallEPcS0_+0x5e>
			_CliCommand[i]->doCommand(param);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4798      	blx	r3
			return 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e004      	b.n	8001c02 <_ZN12CliContainer4CallEPcS0_+0x68>
	for (int i = 0; i < _counter; i++){
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e7d4      	b.n	8001baa <_ZN12CliContainer4CallEPcS0_+0x10>
		}
	}
	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <_Z41__static_initialization_and_destruction_0ii>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
CliContainer CliContainer;
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c28:	f7ff ff68 	bl	8001afc <_ZN12CliContainerC1Ev>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d107      	bne.n	8001c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d102      	bne.n	8001c42 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001c3c:	4803      	ldr	r0, [pc, #12]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c3e:	f7ff ff6f 	bl	8001b20 <_ZN12CliContainerD1Ev>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000244 	.word	0x20000244

08001c50 <_GLOBAL__sub_I_CliContainer>:
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff ffd7 	bl	8001c0c <_Z41__static_initialization_and_destruction_0ii>
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_GLOBAL__sub_D_CliContainer>:
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff ffcf 	bl	8001c0c <_Z41__static_initialization_and_destruction_0ii>
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_Z22Communication_commTaskv>:
static uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
static int cmdcount = 0;
static int cmdprint = 0;

int Communication_commTask()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8001c76:	1db9      	adds	r1, r7, #6
 8001c78:	230a      	movs	r3, #10
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4839      	ldr	r0, [pc, #228]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001c7e:	f006 fe8b 	bl	8008998 <HAL_UART_Receive>
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d025      	beq.n	8001cd8 <_Z22Communication_commTaskv+0x68>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <_Z22Communication_commTaskv+0x3c>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount)
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	da0d      	bge.n	8001cd4 <_Z22Communication_commTaskv+0x64>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	492a      	ldr	r1, [pc, #168]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001cc0:	600a      	str	r2, [r1, #0]
 8001cc2:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <_Z22Communication_commTaskv+0x100>)
 8001cc4:	1899      	adds	r1, r3, r2
 8001cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4825      	ldr	r0, [pc, #148]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001cce:	f006 fdcf 	bl	8008870 <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 8001cd2:	e7eb      	b.n	8001cac <_Z22Communication_commTaskv+0x3c>
		}

		return 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e040      	b.n	8001d5a <_Z22Communication_commTaskv+0xea>
	}

	if (ch != '\r' && ch != '\n')
 8001cd8:	79bb      	ldrb	r3, [r7, #6]
 8001cda:	2b0d      	cmp	r3, #13
 8001cdc:	d016      	beq.n	8001d0c <_Z22Communication_commTaskv+0x9c>
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	2b0a      	cmp	r3, #10
 8001ce2:	d013      	beq.n	8001d0c <_Z22Communication_commTaskv+0x9c>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH)
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b63      	cmp	r3, #99	; 0x63
 8001cea:	dd05      	ble.n	8001cf8 <_Z22Communication_commTaskv+0x88>
		{
			cmdcount = 0;
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001d00:	600a      	str	r2, [r1, #0]
 8001d02:	79b9      	ldrb	r1, [r7, #6]
 8001d04:	4a1a      	ldr	r2, [pc, #104]	; (8001d70 <_Z22Communication_commTaskv+0x100>)
 8001d06:	54d1      	strb	r1, [r2, r3]
		return 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e026      	b.n	8001d5a <_Z22Communication_commTaskv+0xea>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	da0d      	bge.n	8001d34 <_Z22Communication_commTaskv+0xc4>
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4912      	ldr	r1, [pc, #72]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001d20:	600a      	str	r2, [r1, #0]
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <_Z22Communication_commTaskv+0x100>)
 8001d24:	1899      	adds	r1, r3, r2
 8001d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001d2e:	f006 fd9f 	bl	8008870 <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 8001d32:	e7eb      	b.n	8001d0c <_Z22Communication_commTaskv+0x9c>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8001d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d38:	2202      	movs	r2, #2
 8001d3a:	490e      	ldr	r1, [pc, #56]	; (8001d74 <_Z22Communication_commTaskv+0x104>)
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <_Z22Communication_commTaskv+0xf4>)
 8001d3e:	f006 fd97 	bl	8008870 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <_Z22Communication_commTaskv+0x100>)
 8001d48:	2100      	movs	r1, #0
 8001d4a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_Z22Communication_commTaskv+0xfc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <_Z22Communication_commTaskv+0xf8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
	return 1;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000e94 	.word	0x20000e94
 8001d68:	20000300 	.word	0x20000300
 8001d6c:	200002fc 	.word	0x200002fc
 8001d70:	20000298 	.word	0x20000298
 8001d74:	080140a4 	.word	0x080140a4

08001d78 <_Z27Communication_handleCommandv>:


void Communication_handleCommand()
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
	char cmd[20];
	char param [20];

    int params = sscanf((const char*)cmdbuffer,"%s %s", cmd, param );
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	f107 0218 	add.w	r2, r7, #24
 8001d84:	490f      	ldr	r1, [pc, #60]	; (8001dc4 <_Z27Communication_handleCommandv+0x4c>)
 8001d86:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <_Z27Communication_handleCommandv+0x50>)
 8001d88:	f00f fa5a 	bl	8011240 <siscanf>
 8001d8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (params == 0){
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d012      	beq.n	8001dba <_Z27Communication_handleCommandv+0x42>
	   return;
    }

    if(CliContainer.Call(cmd, param) == 0){
 8001d94:	1d3a      	adds	r2, r7, #4
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480b      	ldr	r0, [pc, #44]	; (8001dcc <_Z27Communication_handleCommandv+0x54>)
 8001d9e:	f7ff fefc 	bl	8001b9a <_ZN12CliContainer4CallEPcS0_>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <_Z27Communication_handleCommandv+0x44>
    printf("Invalid command\r\n");
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <_Z27Communication_handleCommandv+0x58>)
 8001db4:	f00f f9c8 	bl	8011148 <puts>
 8001db8:	e000      	b.n	8001dbc <_Z27Communication_handleCommandv+0x44>
	   return;
 8001dba:	bf00      	nop
    }
}
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	080140a8 	.word	0x080140a8
 8001dc8:	20000298 	.word	0x20000298
 8001dcc:	20000244 	.word	0x20000244
 8001dd0:	080140b0 	.word	0x080140b0

08001dd4 <StartComTask>:

extern "C" void StartComTask()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Entry_comTask */
  /* Infinite loop */
  CliInit();
 8001dd8:	f7ff fbe8 	bl	80015ac <_Z7CliInitv>
  while(1)
  {
	  if (Communication_commTask()){
 8001ddc:	f7ff ff48 	bl	8001c70 <_Z22Communication_commTaskv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <StartComTask+0x20>
		  Communication_handleCommand();
 8001df0:	f7ff ffc2 	bl	8001d78 <_Z27Communication_handleCommandv>
	  }
    osDelay(1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f00b f973 	bl	800d0e0 <osDelay>
	  if (Communication_commTask()){
 8001dfa:	e7ef      	b.n	8001ddc <StartComTask+0x8>

08001dfc <_ZN3Dht14waitWhileEqualEii>:
extern TIM_HandleTypeDef htim16;

extern Dht dht;

int Dht::waitWhileEqual(int value, int expectedTime)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	// set a timeout 20% bigger than the expected time
	uint32_t timeout = expectedTime + (expectedTime) / 5;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <_ZN3Dht14waitWhileEqualEii+0x74>)
 8001e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e10:	1052      	asrs	r2, r2, #1
 8001e12:	17db      	asrs	r3, r3, #31
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(_gpioPort, _gpioPin) == value) {
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	889b      	ldrh	r3, [r3, #4]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f002 fc7f 	bl	8004734 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00d      	beq.n	8001e66 <_ZN3Dht14waitWhileEqualEii+0x6a>
		if (__HAL_TIM_GET_COUNTER(_timer) > timeout) {
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	bf34      	ite	cc
 8001e58:	2301      	movcc	r3, #1
 8001e5a:	2300      	movcs	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0e1      	beq.n	8001e26 <_ZN3Dht14waitWhileEqualEii+0x2a>
			// too much time in the state
			return false;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <_ZN3Dht14waitWhileEqualEii+0x6c>
		}
	}

	return true;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	66666667 	.word	0x66666667

08001e74 <_ZN3Dht13setGpioOutputEv>:

void Dht::setGpioOutput()
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	889b      	ldrh	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f107 020c 	add.w	r2, r7, #12
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fa99 	bl	80043e0 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001eae:	2017      	movs	r0, #23
 8001eb0:	f001 fe8d 	bl	8003bce <HAL_NVIC_DisableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3720      	adds	r7, #32
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZN3Dht12setGpioInputEv>:

void Dht::setGpioInput()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b088      	sub	sp, #32
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]

	gpioStruct.Pin = _gpioPin;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	889b      	ldrh	r3, [r3, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_INPUT;
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(_gpioPort, &gpioStruct);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fa75 	bl	80043e0 <HAL_GPIO_Init>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001ef6:	2017      	movs	r0, #23
 8001ef8:	f001 fe69 	bl	8003bce <HAL_NVIC_DisableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZN3Dht4readEv>:

int Dht::read()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	setGpioOutput();
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ffb1 	bl	8001e74 <_ZN3Dht13setGpioOutputEv>

	HAL_TIM_Base_Start(_timer);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 f9fc 	bl	8007314 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(_timer, 0);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

	// switch the sensor on by putting the line in '0'
	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_RESET);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	f002 fc17 	bl	8004764 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER(_timer) < 19000);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f644 2237 	movw	r2, #18999	; 0x4a37
 8001f42:	4293      	cmp	r3, r2
 8001f44:	bf94      	ite	ls
 8001f46:	2301      	movls	r3, #1
 8001f48:	2300      	movhi	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d000      	beq.n	8001f52 <_ZN3Dht4readEv+0x4e>
 8001f50:	e7f1      	b.n	8001f36 <_ZN3Dht4readEv+0x32>

	HAL_GPIO_WritePin(_gpioPort,_gpioPin, GPIO_PIN_SET);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	889b      	ldrh	r3, [r3, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f002 fc01 	bl	8004764 <HAL_GPIO_WritePin>

	// start listening
	setGpioInput();
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffaa 	bl	8001ebc <_ZN3Dht12setGpioInputEv>

	// wait for response 20-40us
	if (!waitWhileEqual( 1, 40)) {
 8001f68:	2228      	movs	r2, #40	; 0x28
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff45 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <_ZN3Dht4readEv+0x82>
		return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e021      	b.n	8001fca <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in low for 80us
	if (!waitWhileEqual(0, 80)) {
 8001f86:	2250      	movs	r2, #80	; 0x50
 8001f88:	2100      	movs	r1, #0
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff36 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <_ZN3Dht4readEv+0xa0>
		return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e012      	b.n	8001fca <_ZN3Dht4readEv+0xc6>
	}

	// DHT should keep in high for 80us
	if (!waitWhileEqual(1, 80)) {
 8001fa4:	2250      	movs	r2, #80	; 0x50
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff27 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <_ZN3Dht4readEv+0xbe>
		return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e003      	b.n	8001fca <_ZN3Dht4readEv+0xc6>
	}
	reciveData();
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f806 	bl	8001fd4 <_ZN3Dht10reciveDataEv>
	return 1;
 8001fc8:	2301      	movs	r3, #1

}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <_ZN3Dht10reciveDataEv>:

int Dht::reciveData()
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	// DHT start send data bits

	uint8_t data[5] = { 0 };
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	733b      	strb	r3, [r7, #12]
	for (int i = 0; i < 5; i++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	dc50      	bgt.n	8002090 <_ZN3Dht10reciveDataEv+0xbc>
		for (int j = 0; j < 8; j++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b07      	cmp	r3, #7
 8001ff6:	dc47      	bgt.n	8002088 <_ZN3Dht10reciveDataEv+0xb4>

			// DHT keeps in low for 50us before each bit
			if (!waitWhileEqual( 0, 60)) {
 8001ff8:	223c      	movs	r2, #60	; 0x3c
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fefd 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <_ZN3Dht10reciveDataEv+0x42>
				return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e095      	b.n	8002142 <_ZN3Dht10reciveDataEv+0x16e>
			}

			// DHT sends bit keeping line in high maximum 70us
			if (!waitWhileEqual( 1, 70)) {
 8002016:	2246      	movs	r2, #70	; 0x46
 8002018:	2101      	movs	r1, #1
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff feee 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <_ZN3Dht10reciveDataEv+0x60>
				return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e086      	b.n	8002142 <_ZN3Dht10reciveDataEv+0x16e>
			}

			data[i] <<= 1;
 8002034:	f107 0208 	add.w	r2, r7, #8
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	b2d9      	uxtb	r1, r3
 8002042:	f107 0208 	add.w	r2, r7, #8
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]

			// 26-28us for '0' and 70us for '1', so 50us is a good split time
			if (__HAL_TIM_GET_COUNTER(_timer) > 50) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2b32      	cmp	r3, #50	; 0x32
 8002058:	bf8c      	ite	hi
 800205a:	2301      	movhi	r3, #1
 800205c:	2300      	movls	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <_ZN3Dht10reciveDataEv+0xac>
				data[i] |= 1;
 8002064:	f107 0208 	add.w	r2, r7, #8
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	b2d9      	uxtb	r1, r3
 8002074:	f107 0208 	add.w	r2, r7, #8
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4413      	add	r3, r2
 800207c:	460a      	mov	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	3301      	adds	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e7b4      	b.n	8001ff2 <_ZN3Dht10reciveDataEv+0x1e>
	for (int i = 0; i < 5; i++) {
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e7ab      	b.n	8001fe8 <_ZN3Dht10reciveDataEv+0x14>
			}
		}
	}

	uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 8002090:	7a3a      	ldrb	r2, [r7, #8]
 8002092:	7a7b      	ldrb	r3, [r7, #9]
 8002094:	4413      	add	r3, r2
 8002096:	b2da      	uxtb	r2, r3
 8002098:	7abb      	ldrb	r3, [r7, #10]
 800209a:	4413      	add	r3, r2
 800209c:	b2da      	uxtb	r2, r3
 800209e:	7afb      	ldrb	r3, [r7, #11]
 80020a0:	4413      	add	r3, r2
 80020a2:	73fb      	strb	r3, [r7, #15]
	if (checksum != data[4]) {
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <_ZN3Dht10reciveDataEv+0xdc>
		return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e048      	b.n	8002142 <_ZN3Dht10reciveDataEv+0x16e>
	}

	_humidity = (double)data[0] + ((double)data[1]) / 10;
 80020b0:	7a3b      	ldrb	r3, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa36 	bl	8000524 <__aeabi_ui2d>
 80020b8:	4604      	mov	r4, r0
 80020ba:	460d      	mov	r5, r1
 80020bc:	7a7b      	ldrb	r3, [r7, #9]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa30 	bl	8000524 <__aeabi_ui2d>
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <_ZN3Dht10reciveDataEv+0x178>)
 80020ca:	f7fe fbcf 	bl	800086c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4620      	mov	r0, r4
 80020d4:	4629      	mov	r1, r5
 80020d6:	f7fe f8e9 	bl	80002ac <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_temperature = (double)data[2] + ((double)data[3]) / 10;
 80020e4:	7abb      	ldrb	r3, [r7, #10]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa1c 	bl	8000524 <__aeabi_ui2d>
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa16 	bl	8000524 <__aeabi_ui2d>
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <_ZN3Dht10reciveDataEv+0x178>)
 80020fe:	f7fe fbb5 	bl	800086c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe f8cf 	bl	80002ac <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	e9c1 2306 	strd	r2, r3, [r1, #24]

	//printf("Humidity: %d.%d, temp: %d.%d\r\n", (int)data[0], (int)data[1], (int)data[2], (int)data[3]);

	// wait while DHT return to high
	if (!waitWhileEqual( 0, 100)) {
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	2100      	movs	r1, #0
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fe6d 	bl	8001dfc <_ZN3Dht14waitWhileEqualEii>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <_ZN3Dht10reciveDataEv+0x162>
		return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e005      	b.n	8002142 <_ZN3Dht10reciveDataEv+0x16e>
	}

	HAL_TIM_Base_Stop(_timer);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4618      	mov	r0, r3
 800213c:	f005 f952 	bl	80073e4 <HAL_TIM_Base_Stop>

	return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}
 800214a:	bf00      	nop
 800214c:	40240000 	.word	0x40240000

08002150 <_ZN3Dht14getTemperatureEv>:
{
	return _humidity;
}

double Dht::getTemperature()
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	return _temperature;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800215e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002162:	eeb0 0a47 	vmov.f32	s0, s14
 8002166:	eef0 0a67 	vmov.f32	s1, s15
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <StartDhtTask>:


/* USER CODE END Header_StartDhtTask */
extern "C" void StartDhtTask()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StartDhtTask */
  /* Infinite loop */
  while(1)
  {
	dht.read();
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <StartDhtTask+0x14>)
 800217a:	f7ff fec3 	bl	8001f04 <_ZN3Dht4readEv>
    osDelay(1000);
 800217e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002182:	f00a ffad 	bl	800d0e0 <osDelay>
	dht.read();
 8002186:	e7f7      	b.n	8002178 <StartDhtTask+0x4>
 8002188:	20000330 	.word	0x20000330

0800218c <_ZN4FileC1EPKc>:

#include <File.h>

extern UART_HandleTypeDef huart2;

File::File(const char* nameFile) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
	strcpy(_nameFile, nameFile);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f203 4365 	addw	r3, r3, #1125	; 0x465
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f00f f8bf 	bl	8011322 <strcpy>
}
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <_ZN4File10initSDCardEv>:


void File::initSDCard(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	HAL_Delay(1000);
 80021b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021bc:	f001 fbba 	bl	8003934 <HAL_Delay>
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <_ZN4File10initSDCardEv+0x48>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f009 ffa8 	bl	800c11c <f_mount>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if (fres != FR_OK) {
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <_ZN4File10initSDCardEv+0x40>
		printf("f_mount error (%i)\r\n", fres);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80021e6:	4619      	mov	r1, r3
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <_ZN4File10initSDCardEv+0x4c>)
 80021ea:	f00e ff27 	bl	801103c <iprintf>
		return;
 80021ee:	bf00      	nop
	}
}
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	080140c4 	.word	0x080140c4
 80021fc:	080140c8 	.word	0x080140c8

08002200 <_ZN4File4readEv>:

void File::read(){
 8002200:	b580      	push	{r7, lr}
 8002202:	b0c4      	sub	sp, #272	; 0x110
 8002204:	af00      	add	r7, sp, #0
 8002206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800220a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800220e:	6018      	str	r0, [r3, #0]
	fres = f_open(&fil, _nameFile, FA_READ);
 8002210:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002214:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 700d 	add.w	r0, r3, #564	; 0x234
 800221e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f203 4365 	addw	r3, r3, #1125	; 0x465
 800222c:	2201      	movs	r2, #1
 800222e:	4619      	mov	r1, r3
 8002230:	f009 ffd8 	bl	800c1e4 <f_open>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800223c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if (fres != FR_OK) {
 8002246:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <_ZN4File4readEv+0x70>
		printf("f_open error (%i)\r\n", fres);
 8002258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800225c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8002266:	4619      	mov	r1, r3
 8002268:	4825      	ldr	r0, [pc, #148]	; (8002300 <_ZN4File4readEv+0x100>)
 800226a:	f00e fee7 	bl	801103c <iprintf>
 800226e:	e043      	b.n	80022f8 <_ZN4File4readEv+0xf8>
	//Read 250 bytes from "file" on the SD card
	 BYTE readBuf[256];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 256, &fil);
 8002270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002274:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 720d 	add.w	r2, r3, #564	; 0x234
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002286:	4618      	mov	r0, r3
 8002288:	f00a fd3b 	bl	800cd02 <f_gets>
 800228c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	if(rres == 0){
 8002290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <_ZN4File4readEv+0xae>
		printf("f_gets error (%i)\r\n", fres);
 8002298:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800229c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80022a6:	4619      	mov	r1, r3
 80022a8:	4816      	ldr	r0, [pc, #88]	; (8002304 <_ZN4File4readEv+0x104>)
 80022aa:	f00e fec7 	bl	801103c <iprintf>
	}
	while(rres != 0) {
 80022ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <_ZN4File4readEv+0xe4>
		rres = f_gets((TCHAR*)readBuf, 256, &fil);
 80022b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 720d 	add.w	r2, r3, #564	; 0x234
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00a fd18 	bl	800cd02 <f_gets>
 80022d2:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		printf("Read string from file contents: %s\r\n", readBuf);
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	480a      	ldr	r0, [pc, #40]	; (8002308 <_ZN4File4readEv+0x108>)
 80022de:	f00e fead 	bl	801103c <iprintf>
	while(rres != 0) {
 80022e2:	e7e4      	b.n	80022ae <_ZN4File4readEv+0xae>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80022e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00a fcd6 	bl	800cca4 <f_close>


}
 80022f8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	080140e0 	.word	0x080140e0
 8002304:	080140f4 	.word	0x080140f4
 8002308:	08014108 	.word	0x08014108

0800230c <_ZN4File5writeEPKc>:

void File::write(const char* writeBuf){
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	//write a file "write.txt"
	fres = f_open(&fil, _nameFile, FA_WRITE | FA_OPEN_APPEND | FA_OPEN_EXISTING);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f503 700d 	add.w	r0, r3, #564	; 0x234
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f203 4365 	addw	r3, r3, #1125	; 0x465
 8002322:	2232      	movs	r2, #50	; 0x32
 8002324:	4619      	mov	r1, r3
 8002326:	f009 ff5d 	bl	800c1e4 <f_open>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(fres == FR_OK) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <_ZN4File5writeEPKc+0x40>
    	//printf("I was able to open 'write.txt' for writing\r\n");
	} else {
		printf("f_open error (%i)\r\n", fres);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8002344:	4619      	mov	r1, r3
 8002346:	4815      	ldr	r0, [pc, #84]	; (800239c <_ZN4File5writeEPKc+0x90>)
 8002348:	f00e fe78 	bl	801103c <iprintf>
    }

	UINT bytesWrote;
	fres = f_write(&fil, writeBuf, strlen(writeBuf), &bytesWrote);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f503 740d 	add.w	r4, r3, #564	; 0x234
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	f7fd ff46 	bl	80001e4 <strlen>
 8002358:	4602      	mov	r2, r0
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	6839      	ldr	r1, [r7, #0]
 8002360:	4620      	mov	r0, r4
 8002362:	f00a fa72 	bl	800c84a <f_write>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(fres == FR_OK) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <_ZN4File5writeEPKc+0x7c>
		//printf("Wrote %i bytes to '%s'!\r\n", bytesWrote, _nameFile);
	} else {
		printf("f_write error (%i)\r\n", fres);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 8002380:	4619      	mov	r1, r3
 8002382:	4807      	ldr	r0, [pc, #28]	; (80023a0 <_ZN4File5writeEPKc+0x94>)
 8002384:	f00e fe5a 	bl	801103c <iprintf>
	}

	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800238e:	4618      	mov	r0, r3
 8002390:	f00a fc88 	bl	800cca4 <f_close>
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	080140e0 	.word	0x080140e0
 80023a0:	08014130 	.word	0x08014130

080023a4 <_ZN4File5clearEv>:

void File::clear(){
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

	//write a file "write.txt"
	fres = f_open(&fil, _nameFile, FA_CREATE_ALWAYS);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 700d 	add.w	r0, r3, #564	; 0x234
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f203 4365 	addw	r3, r3, #1125	; 0x465
 80023b8:	2208      	movs	r2, #8
 80023ba:	4619      	mov	r1, r3
 80023bc:	f009 ff12 	bl	800c1e4 <f_open>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f883 2464 	strb.w	r2, [r3, #1124]	; 0x464
	if(fres == FR_OK) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <_ZN4File5clearEv+0x3e>
    	//myprintf("I was able to open 'write.txt' for writing\r\n");
	} else {
		printf("f_open error (%i)\r\n", fres);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3464 	ldrb.w	r3, [r3, #1124]	; 0x464
 80023da:	4619      	mov	r1, r3
 80023dc:	4806      	ldr	r0, [pc, #24]	; (80023f8 <_ZN4File5clearEv+0x54>)
 80023de:	f00e fe2d 	bl	801103c <iprintf>
    }
	 //Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00a fc5b 	bl	800cca4 <f_close>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	080140e0 	.word	0x080140e0

080023fc <_ZN5Flash5eraseEv>:

#include "Flash.h"
extern thresholdTemp Temprature;

void Flash::erase()
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	uint32_t pageError;
	FLASH_EraseInitTypeDef basicFlash;

	basicFlash.TypeErase = FLASH_TYPEERASE_PAGES;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
	basicFlash.Banks = FLASH_BANK_2;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
	basicFlash.Page = _page;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	617b      	str	r3, [r7, #20]
	basicFlash.NbPages = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8002416:	f001 fdcb 	bl	8003fb0 <HAL_FLASH_Unlock>

	HAL_FLASHEx_Erase(&basicFlash, &pageError);
 800241a:	f107 021c 	add.w	r2, r7, #28
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fe97 	bl	8004158 <HAL_FLASHEx_Erase>
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_ZN5Flash5writhEPv>:

void Flash::writh(void* data)
{
 8002432:	b5b0      	push	{r4, r5, r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 800243c:	f001 fdb8 	bl	8003fb0 <HAL_FLASH_Unlock>
	erase();
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffdb 	bl	80023fc <_ZN5Flash5eraseEv>
	uint64_t* Data = (uint64_t *)(data);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	60fb      	str	r3, [r7, #12]
	for(uint64_t i = 0; i < 18 ; i ++){
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002456:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800245a:	2a12      	cmp	r2, #18
 800245c:	f173 0300 	sbcs.w	r3, r3, #0
 8002460:	d215      	bcs.n	800248e <_ZN5Flash5writhEPv+0x5c>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)_flashAdd+(i*8), *(Data+i));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	18d1      	adds	r1, r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	2000      	movs	r0, #0
 800247a:	f001 fc41 	bl	8003d00 <HAL_FLASH_Program>
	for(uint64_t i = 0; i < 18 ; i ++){
 800247e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002482:	1c54      	adds	r4, r2, #1
 8002484:	f143 0500 	adc.w	r5, r3, #0
 8002488:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800248c:	e7e3      	b.n	8002456 <_ZN5Flash5writhEPv+0x24>
	}
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002498 <_ZN5Flash4readEv>:

void Flash::read()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 80024a0:	f001 fd86 	bl	8003fb0 <HAL_FLASH_Unlock>
	thresholdTemp * data = (thresholdTemp *)(_flashAdd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
	if(data->magicNum!= 0x5A5A){
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	889b      	ldrh	r3, [r3, #4]
 80024ae:	f645 225a 	movw	r2, #23130	; 0x5a5a
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d106      	bne.n	80024c4 <_ZN5Flash4readEv+0x2c>
		return;
	}
	Temprature = *data;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <_ZN5Flash4readEv+0x34>)
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6811      	ldr	r1, [r2, #0]
 80024bc:	6019      	str	r1, [r3, #0]
 80024be:	8892      	ldrh	r2, [r2, #4]
 80024c0:	809a      	strh	r2, [r3, #4]
 80024c2:	e000      	b.n	80024c6 <_ZN5Flash4readEv+0x2e>
		return;
 80024c4:	bf00      	nop
}
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000

080024d0 <_ZN3Led8getGPIOxEv>:

    void on();
    void off();
    void blink();

    GPIO_TypeDef* getGPIOx(){
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    	return _GPIOx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
   }
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <_ZN3Led11getGPIO_PinEv>:

    uint16_t getGPIO_Pin(){
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
        return _GPIO_Pin;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	891b      	ldrh	r3, [r3, #8]
   }
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_ZN3Led8getStateEv>:

    LedState getState(){
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
    	return _state;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
   }
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_ZN3LedC1EP12GPIO_TypeDeft>:
#include <stdio.h>
#include "cmsis_os.h"

extern Led ledB;

Led::Led(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin)
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4613      	mov	r3, r2
 8002524:	80fb      	strh	r3, [r7, #6]
{
	_GPIOx = GPIOx;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	605a      	str	r2, [r3, #4]
	_GPIO_Pin = GPIO_Pin;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	811a      	strh	r2, [r3, #8]
	_state = STATE_OFF;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
}
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_ZN3Led2onEv>:

void Led::on()
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	_state = STATE_ON,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_SET);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6858      	ldr	r0, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	891b      	ldrh	r3, [r3, #8]
 800255c:	2201      	movs	r2, #1
 800255e:	4619      	mov	r1, r3
 8002560:	f002 f900 	bl	8004764 <HAL_GPIO_WritePin>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_ZN3Led3offEv>:

void Led::off()
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	_state = STATE_OFF,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(_GPIOx, _GPIO_Pin, GPIO_PIN_RESET);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6858      	ldr	r0, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	891b      	ldrh	r3, [r3, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	4619      	mov	r1, r3
 8002586:	f002 f8ed 	bl	8004764 <HAL_GPIO_WritePin>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZN3Led5blinkEv>:
void Led::blink()
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
	_state = STATE_BLINKING;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <startBlinkTask>:


extern "C" void startBlinkTask()
{
 80025ac:	b598      	push	{r3, r4, r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN startBlinkTask */

  /* Infinite loop */
  while(1)
  {
	if(ledB.getState() == STATE_BLINKING){
 80025b0:	480f      	ldr	r0, [pc, #60]	; (80025f0 <startBlinkTask+0x44>)
 80025b2:	f7ff ffa5 	bl	8002500 <_ZN3Led8getStateEv>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00f      	beq.n	80025e6 <startBlinkTask+0x3a>
	HAL_GPIO_TogglePin(ledB.getGPIOx(), ledB.getGPIO_Pin());
 80025c6:	480a      	ldr	r0, [pc, #40]	; (80025f0 <startBlinkTask+0x44>)
 80025c8:	f7ff ff82 	bl	80024d0 <_ZN3Led8getGPIOxEv>
 80025cc:	4604      	mov	r4, r0
 80025ce:	4808      	ldr	r0, [pc, #32]	; (80025f0 <startBlinkTask+0x44>)
 80025d0:	f7ff ff8a 	bl	80024e8 <_ZN3Led11getGPIO_PinEv>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4620      	mov	r0, r4
 80025da:	f002 f8db 	bl	8004794 <HAL_GPIO_TogglePin>
	osDelay(600);
 80025de:	f44f 7016 	mov.w	r0, #600	; 0x258
 80025e2:	f00a fd7d 	bl	800d0e0 <osDelay>
	}
	osDelay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f00a fd7a 	bl	800d0e0 <osDelay>
	if(ledB.getState() == STATE_BLINKING){
 80025ec:	e7e0      	b.n	80025b0 <startBlinkTask+0x4>
 80025ee:	bf00      	nop
 80025f0:	20000320 	.word	0x20000320

080025f4 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>:

	int bcdToInt(uint8_t bcd);
	uint8_t intToBcd(int value, int minVal, int maxVal);

public:
	Rtc(I2C_HandleTypeDef * hi2c, uint32_t devAddr){
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
		_hi2c = hi2c;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	601a      	str	r2, [r3, #0]
		_devAddr = devAddr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	711a      	strb	r2, [r3, #4]
	};
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_ZN3RtcD1Ev>:
	~Rtc(){};
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <_ZN3LedD1Ev>:
    ~Led(){};
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>:
private:
	StateBuzzer _state;
	TIM_HandleTypeDef * _timer;

public:
	Buzzer(TIM_HandleTypeDef * timer){
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	_timer = timer;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	605a      	str	r2, [r3, #4]
	}
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_ZN6BuzzerD1Ev>:
	~Buzzer(){};
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_ZN6ButtonD1Ev>:
	uint16_t _GPIO_Pin;
public:


	Button(GPIO_TypeDef* GPIOx , uint16_t GPIO_Pin);
    ~Button(){};
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>:

	int waitWhileEqual(int value, int expectedTime);
	void setGpioOutput();
	void setGpioInput();
public:
	Dht( GPIO_TypeDef* gpioPort, uint16_t gpioPin, TIM_HandleTypeDef * timer){
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
		_gpioPort = gpioPort;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	601a      	str	r2, [r3, #0]
		_gpioPin = gpioPin;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	809a      	strh	r2, [r3, #4]
		_timer = timer;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	609a      	str	r2, [r3, #8]
//		_counter = 0;
//		_maxCounter = 0;
//		_state = DHT_STATE_NO_DATA;
		_temperature = 0.0;
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9c1 2306 	strd	r2, r3, [r1, #24]
		_humidity = 0.0;
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_ZN3DhtD1Ev>:
	~Dht(){};
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_ZN5FlashC1Ev>:
	uint32_t _flashAdd;
	uint32_t _page;

public:

	Flash(){
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
		_page = 256;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002702:	605a      	str	r2, [r3, #4]
		_flashAdd = 0x08080000;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <_ZN5FlashC1Ev+0x24>)
 8002708:	601a      	str	r2, [r3, #0]
	}
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	08080000 	.word	0x08080000

0800271c <_ZN5FlashD1Ev>:
	~Flash(){};
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_ZN4FileD1Ev>:
	char _nameFile [20];
	DWORD free_clusters, free_sectors, total_sectors;

public:
	File(const char* nameFile);
	~File(){};
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_write>:
File warningFile("warning.txt");
static char logBuffer[100];

//////////////////////////////////////////////////////////////
extern "C" int _write(int fd, char* ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	b29a      	uxth	r2, r3
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <_write+0x28>)
 8002760:	f006 f886 	bl	8008870 <HAL_UART_Transmit>
	return len;
 8002764:	687b      	ldr	r3, [r7, #4]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000e94 	.word	0x20000e94

08002774 <HAL_GPIO_EXTI_Callback>:
//////////////////////////////////////////////////////////////


extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	80fb      	strh	r3, [r7, #6]
	button.interrupt();
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <HAL_GPIO_EXTI_Callback+0x18>)
 8002780:	f7fe fbbc 	bl	8000efc <_ZN6Button9interruptEv>
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2000030c 	.word	0x2000030c

08002790 <_Z11sendWarningPKc>:
				dht.getTemperature() );
	logFile.write(logBuffer);
}


void sendWarning(const char* message){
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	b091      	sub	sp, #68	; 0x44
 8002794:	af0a      	add	r7, sp, #40	; 0x28
 8002796:	6178      	str	r0, [r7, #20]
	rtc.getTime(&dateTime);
 8002798:	491a      	ldr	r1, [pc, #104]	; (8002804 <_Z11sendWarningPKc+0x74>)
 800279a:	481b      	ldr	r0, [pc, #108]	; (8002808 <_Z11sendWarningPKc+0x78>)
 800279c:	f000 f9da 	bl	8002b54 <_ZN3Rtc7getTimeEP9DateTime_>
	sprintf(logBuffer,"date time : %02d:%02d:%02d-%d-%02d/%02d/%02d temperature: %f - %s \r\n",
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	60f9      	str	r1, [r7, #12]
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027ae:	681c      	ldr	r4, [r3, #0]
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027b2:	68dd      	ldr	r5, [r3, #12]
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027b6:	691e      	ldr	r6, [r3, #16]
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027ba:	6958      	ldr	r0, [r3, #20]
 80027bc:	60b8      	str	r0, [r7, #8]
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <_Z11sendWarningPKc+0x74>)
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	4811      	ldr	r0, [pc, #68]	; (800280c <_Z11sendWarningPKc+0x7c>)
 80027c6:	f7ff fcc3 	bl	8002150 <_ZN3Dht14getTemperatureEv>
 80027ca:	eeb0 7a40 	vmov.f32	s14, s0
 80027ce:	eef0 7a60 	vmov.f32	s15, s1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	9308      	str	r3, [sp, #32]
 80027d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	9204      	str	r2, [sp, #16]
 80027de:	68b8      	ldr	r0, [r7, #8]
 80027e0:	9003      	str	r0, [sp, #12]
 80027e2:	9602      	str	r6, [sp, #8]
 80027e4:	9501      	str	r5, [sp, #4]
 80027e6:	9400      	str	r4, [sp, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4908      	ldr	r1, [pc, #32]	; (8002810 <_Z11sendWarningPKc+0x80>)
 80027ee:	4809      	ldr	r0, [pc, #36]	; (8002814 <_Z11sendWarningPKc+0x84>)
 80027f0:	f00e fd06 	bl	8011200 <siprintf>
					dateTime.hours, dateTime.min, dateTime.sec, dateTime.weekDay,
					dateTime.day, dateTime.month, dateTime.year,
					dht.getTemperature() , message );
	warningFile.write(logBuffer);
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <_Z11sendWarningPKc+0x84>)
 80027f6:	4808      	ldr	r0, [pc, #32]	; (8002818 <_Z11sendWarningPKc+0x88>)
 80027f8:	f7ff fd88 	bl	800230c <_ZN4File5writeEPKc>
}
 80027fc:	bf00      	nop
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002804:	20000368 	.word	0x20000368
 8002808:	20000360 	.word	0x20000360
 800280c:	20000330 	.word	0x20000330
 8002810:	08014188 	.word	0x08014188
 8002814:	20000c94 	.word	0x20000c94
 8002818:	2000080c 	.word	0x2000080c

0800281c <StartManagerTask>:



extern "C" void StartManagerTask(void *argument)
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManagerTask */
	logFile.initSDCard();
 8002824:	485b      	ldr	r0, [pc, #364]	; (8002994 <StartManagerTask+0x178>)
 8002826:	f7ff fcc3 	bl	80021b0 <_ZN4File10initSDCardEv>
	flash.read();
 800282a:	485b      	ldr	r0, [pc, #364]	; (8002998 <StartManagerTask+0x17c>)
 800282c:	f7ff fe34 	bl	8002498 <_ZN5Flash4readEv>
	stateTemp stateOfTemp = NORMAL_TEMPRATURE;
 8002830:	2302      	movs	r3, #2
 8002832:	73fb      	strb	r3, [r7, #15]
	uint8_t countMin = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	73bb      	strb	r3, [r7, #14]

	/* Infinite loop */
	while(1)
	{
	// count minutes and send log all secends
	countMin++;
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	3301      	adds	r3, #1
 800283c:	73bb      	strb	r3, [r7, #14]
	if(countMin>=1000){
		sendLog();
		countMin = 0;
	}
	///////////CRITICAL TEMPERATURE/////////////////////
	if(dht.getTemperature() > Temprature.criticalTemp){
 800283e:	4857      	ldr	r0, [pc, #348]	; (800299c <StartManagerTask+0x180>)
 8002840:	f7ff fc86 	bl	8002150 <_ZN3Dht14getTemperatureEv>
 8002844:	ec55 4b10 	vmov	r4, r5, d0
 8002848:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <StartManagerTask+0x184>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe79 	bl	8000544 <__aeabi_i2d>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	2101      	movs	r1, #1
 8002858:	460e      	mov	r6, r1
 800285a:	4620      	mov	r0, r4
 800285c:	4629      	mov	r1, r5
 800285e:	f7fe f96b 	bl	8000b38 <__aeabi_dcmpgt>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <StartManagerTask+0x50>
 8002868:	2300      	movs	r3, #0
 800286a:	461e      	mov	r6, r3
 800286c:	b2f3      	uxtb	r3, r6
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <StartManagerTask+0x76>
		if(stateOfTemp!=CRITICAL_TEMPRATURE){
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8087 	beq.w	8002988 <StartManagerTask+0x16c>
		ledB.blink();
 800287a:	484a      	ldr	r0, [pc, #296]	; (80029a4 <StartManagerTask+0x188>)
 800287c:	f7ff fe89 	bl	8002592 <_ZN3Led5blinkEv>
		buzzer.on();
 8002880:	4849      	ldr	r0, [pc, #292]	; (80029a8 <StartManagerTask+0x18c>)
 8002882:	f7fe fb99 	bl	8000fb8 <_ZN6Buzzer2onEv>
		stateOfTemp = CRITICAL_TEMPRATURE;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
		sendWarning("WARNING! THE TEMPERTURE IS CRITICAL!");
 800288a:	4848      	ldr	r0, [pc, #288]	; (80029ac <StartManagerTask+0x190>)
 800288c:	f7ff ff80 	bl	8002790 <_Z11sendWarningPKc>
 8002890:	e07a      	b.n	8002988 <StartManagerTask+0x16c>
		}
	}
	//////////WARNING TEMPERATURE///////////////////////
	else if(dht.getTemperature() > Temprature.warningTemp){
 8002892:	4842      	ldr	r0, [pc, #264]	; (800299c <StartManagerTask+0x180>)
 8002894:	f7ff fc5c 	bl	8002150 <_ZN3Dht14getTemperatureEv>
 8002898:	ec55 4b10 	vmov	r4, r5, d0
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <StartManagerTask+0x184>)
 800289e:	885b      	ldrh	r3, [r3, #2]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe4f 	bl	8000544 <__aeabi_i2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	2101      	movs	r1, #1
 80028ac:	460e      	mov	r6, r1
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7fe f941 	bl	8000b38 <__aeabi_dcmpgt>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <StartManagerTask+0xa4>
 80028bc:	2300      	movs	r3, #0
 80028be:	461e      	mov	r6, r3
 80028c0:	b2f3      	uxtb	r3, r6
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d033      	beq.n	800292e <StartManagerTask+0x112>

		if(stateOfTemp==NORMAL_TEMPRATURE){
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d108      	bne.n	80028de <StartManagerTask+0xc2>
			ledB.on();
 80028cc:	4835      	ldr	r0, [pc, #212]	; (80029a4 <StartManagerTask+0x188>)
 80028ce:	f7ff fe3a 	bl	8002546 <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
			sendWarning("WARNING! THE TEMPERTURE IS ABOVE NORMAL!");
 80028d6:	4836      	ldr	r0, [pc, #216]	; (80029b0 <StartManagerTask+0x194>)
 80028d8:	f7ff ff5a 	bl	8002790 <_Z11sendWarningPKc>
 80028dc:	e054      	b.n	8002988 <StartManagerTask+0x16c>
		}
		else if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <StartManagerTask+0xf4>
			dht.getTemperature() > (Temprature.criticalTemp-3)){
 80028e4:	482d      	ldr	r0, [pc, #180]	; (800299c <StartManagerTask+0x180>)
 80028e6:	f7ff fc33 	bl	8002150 <_ZN3Dht14getTemperatureEv>
 80028ea:	ec55 4b10 	vmov	r4, r5, d0
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <StartManagerTask+0x184>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	3b03      	subs	r3, #3
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe25 	bl	8000544 <__aeabi_i2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
		else if(stateOfTemp==CRITICAL_TEMPRATURE &&
 80028fe:	4620      	mov	r0, r4
 8002900:	4629      	mov	r1, r5
 8002902:	f7fe f919 	bl	8000b38 <__aeabi_dcmpgt>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <StartManagerTask+0xf4>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <StartManagerTask+0xf6>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d038      	beq.n	8002988 <StartManagerTask+0x16c>
			buzzer.off();
 8002916:	4824      	ldr	r0, [pc, #144]	; (80029a8 <StartManagerTask+0x18c>)
 8002918:	f7fe fb64 	bl	8000fe4 <_ZN6Buzzer3offEv>
			ledB.on();
 800291c:	4821      	ldr	r0, [pc, #132]	; (80029a4 <StartManagerTask+0x188>)
 800291e:	f7ff fe12 	bl	8002546 <_ZN3Led2onEv>
			stateOfTemp = WARNING_TEMPRATURE;
 8002922:	2301      	movs	r3, #1
 8002924:	73fb      	strb	r3, [r7, #15]
			sendWarning("WARNING! THE TEMPERTURE IS ABOVE NORMAL!");
 8002926:	4822      	ldr	r0, [pc, #136]	; (80029b0 <StartManagerTask+0x194>)
 8002928:	f7ff ff32 	bl	8002790 <_Z11sendWarningPKc>
 800292c:	e02c      	b.n	8002988 <StartManagerTask+0x16c>
		}

	}
	//////////NORMAL TEMPERATURE///////////////////////
	else{
		if(stateOfTemp==CRITICAL_TEMPRATURE){
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d108      	bne.n	8002946 <StartManagerTask+0x12a>
					ledB.off();
 8002934:	481b      	ldr	r0, [pc, #108]	; (80029a4 <StartManagerTask+0x188>)
 8002936:	f7ff fe19 	bl	800256c <_ZN3Led3offEv>
					buzzer.off();
 800293a:	481b      	ldr	r0, [pc, #108]	; (80029a8 <StartManagerTask+0x18c>)
 800293c:	f7fe fb52 	bl	8000fe4 <_ZN6Buzzer3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 8002940:	2302      	movs	r3, #2
 8002942:	73fb      	strb	r3, [r7, #15]
 8002944:	e020      	b.n	8002988 <StartManagerTask+0x16c>
		}
		else if(stateOfTemp==WARNING_TEMPRATURE &&
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d115      	bne.n	8002978 <StartManagerTask+0x15c>
					dht.getTemperature() > (Temprature.warningTemp-3)){
 800294c:	4813      	ldr	r0, [pc, #76]	; (800299c <StartManagerTask+0x180>)
 800294e:	f7ff fbff 	bl	8002150 <_ZN3Dht14getTemperatureEv>
 8002952:	ec55 4b10 	vmov	r4, r5, d0
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <StartManagerTask+0x184>)
 8002958:	885b      	ldrh	r3, [r3, #2]
 800295a:	3b03      	subs	r3, #3
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fdf1 	bl	8000544 <__aeabi_i2d>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
		else if(stateOfTemp==WARNING_TEMPRATURE &&
 8002966:	4620      	mov	r0, r4
 8002968:	4629      	mov	r1, r5
 800296a:	f7fe f8e5 	bl	8000b38 <__aeabi_dcmpgt>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <StartManagerTask+0x15c>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <StartManagerTask+0x15e>
 8002978:	2300      	movs	r3, #0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <StartManagerTask+0x16c>
					ledB.off();
 800297e:	4809      	ldr	r0, [pc, #36]	; (80029a4 <StartManagerTask+0x188>)
 8002980:	f7ff fdf4 	bl	800256c <_ZN3Led3offEv>
					stateOfTemp = NORMAL_TEMPRATURE;
 8002984:	2302      	movs	r3, #2
 8002986:	73fb      	strb	r3, [r7, #15]
		}
	}
	osDelay(1000);
 8002988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800298c:	f00a fba8 	bl	800d0e0 <osDelay>
	countMin++;
 8002990:	e752      	b.n	8002838 <StartManagerTask+0x1c>
 8002992:	bf00      	nop
 8002994:	20000384 	.word	0x20000384
 8002998:	20000358 	.word	0x20000358
 800299c:	20000330 	.word	0x20000330
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000320 	.word	0x20000320
 80029a8:	20000304 	.word	0x20000304
 80029ac:	080141d0 	.word	0x080141d0
 80029b0:	080141f8 	.word	0x080141f8

080029b4 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartManagerTask */
}
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d12b      	bne.n	8002a1c <_Z41__static_initialization_and_destruction_0ii+0x68>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d126      	bne.n	8002a1c <_Z41__static_initialization_and_destruction_0ii+0x68>
Buzzer buzzer(&htim3);
 80029ce:	4925      	ldr	r1, [pc, #148]	; (8002a64 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80029d0:	4825      	ldr	r0, [pc, #148]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80029d2:	f7ff fe39 	bl	8002648 <_ZN6BuzzerC1EP17TIM_HandleTypeDef>
Button button(B2_GPIO_Port ,  B2_Pin);
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80029de:	4823      	ldr	r0, [pc, #140]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80029e0:	f7fe fa74 	bl	8000ecc <_ZN6ButtonC1EP12GPIO_TypeDeft>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 80029e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e8:	4921      	ldr	r1, [pc, #132]	; (8002a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80029ea:	4822      	ldr	r0, [pc, #136]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80029ec:	f7ff fd94 	bl	8002518 <_ZN3LedC1EP12GPIO_TypeDeft>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80029f2:	2220      	movs	r2, #32
 80029f4:	491e      	ldr	r1, [pc, #120]	; (8002a70 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80029f6:	4821      	ldr	r0, [pc, #132]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80029f8:	f7ff fe4b 	bl	8002692 <_ZN3DhtC1EP12GPIO_TypeDeftP17TIM_HandleTypeDef>
Flash flash;
 80029fc:	4820      	ldr	r0, [pc, #128]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80029fe:	f7ff fe79 	bl	80026f4 <_ZN5FlashC1Ev>
Rtc rtc(&hi2c1, 0xD0);
 8002a02:	22d0      	movs	r2, #208	; 0xd0
 8002a04:	491f      	ldr	r1, [pc, #124]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002a06:	4820      	ldr	r0, [pc, #128]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002a08:	f7ff fdf4 	bl	80025f4 <_ZN3RtcC1EP19__I2C_HandleTypeDefm>
File logFile("log.txt");
 8002a0c:	491f      	ldr	r1, [pc, #124]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002a0e:	4820      	ldr	r0, [pc, #128]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002a10:	f7ff fbbc 	bl	800218c <_ZN4FileC1EPKc>
File warningFile("warning.txt");
 8002a14:	491f      	ldr	r1, [pc, #124]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002a16:	4820      	ldr	r0, [pc, #128]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002a18:	f7ff fbb8 	bl	800218c <_ZN4FileC1EPKc>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11c      	bne.n	8002a5c <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d117      	bne.n	8002a5c <_Z41__static_initialization_and_destruction_0ii+0xa8>
 8002a2c:	481a      	ldr	r0, [pc, #104]	; (8002a98 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002a2e:	f7ff fe80 	bl	8002732 <_ZN4FileD1Ev>
File logFile("log.txt");
 8002a32:	4817      	ldr	r0, [pc, #92]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002a34:	f7ff fe7d 	bl	8002732 <_ZN4FileD1Ev>
Rtc rtc(&hi2c1, 0xD0);
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002a3a:	f7ff fdef 	bl	800261c <_ZN3RtcD1Ev>
Flash flash;
 8002a3e:	4810      	ldr	r0, [pc, #64]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002a40:	f7ff fe6c 	bl	800271c <_ZN5FlashD1Ev>
Dht dht(DHT11_GPIO_Port , DHT11_Pin, &htim16);
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8002a46:	f7ff fe4a 	bl	80026de <_ZN3DhtD1Ev>
Led ledB(LD2_GPIO_Port , LD2_Pin );
 8002a4a:	480a      	ldr	r0, [pc, #40]	; (8002a74 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002a4c:	f7ff fdf1 	bl	8002632 <_ZN3LedD1Ev>
Button button(B2_GPIO_Port ,  B2_Pin);
 8002a50:	4806      	ldr	r0, [pc, #24]	; (8002a6c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002a52:	f7ff fe13 	bl	800267c <_ZN6ButtonD1Ev>
Buzzer buzzer(&htim3);
 8002a56:	4804      	ldr	r0, [pc, #16]	; (8002a68 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002a58:	f7ff fe05 	bl	8002666 <_ZN6BuzzerD1Ev>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000db0 	.word	0x20000db0
 8002a68:	20000304 	.word	0x20000304
 8002a6c:	2000030c 	.word	0x2000030c
 8002a70:	48000400 	.word	0x48000400
 8002a74:	20000320 	.word	0x20000320
 8002a78:	20000e48 	.word	0x20000e48
 8002a7c:	20000330 	.word	0x20000330
 8002a80:	20000358 	.word	0x20000358
 8002a84:	20000cf8 	.word	0x20000cf8
 8002a88:	20000360 	.word	0x20000360
 8002a8c:	08014224 	.word	0x08014224
 8002a90:	20000384 	.word	0x20000384
 8002a94:	0801422c 	.word	0x0801422c
 8002a98:	2000080c 	.word	0x2000080c

08002a9c <_GLOBAL__sub_I_buzzer>:
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f7ff ff85 	bl	80029b4 <_Z41__static_initialization_and_destruction_0ii>
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_GLOBAL__sub_D_buzzer>:
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff ff7d 	bl	80029b4 <_Z41__static_initialization_and_destruction_0ii>
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN3Rtc8bcdToIntEh>:

extern I2C_HandleTypeDef hi2c1;


int Rtc::bcdToInt(uint8_t bcd)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
	return (bcd >> 4) * 10 + (bcd & 0x0F);
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	461a      	mov	r2, r3
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4413      	add	r3, r2
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_ZN3Rtc8intToBcdEiii>:

uint8_t Rtc::intToBcd(int value, int minVal, int maxVal)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
	if (value < minVal || value > maxVal) {
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	db03      	blt.n	8002b0e <_ZN3Rtc8intToBcdEiii+0x1e>
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	dd01      	ble.n	8002b12 <_ZN3Rtc8intToBcdEiii+0x22>
		return 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e018      	b.n	8002b44 <_ZN3Rtc8intToBcdEiii+0x54>
	}

	return ((value / 10) << 4) | (value % 10);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <_ZN3Rtc8intToBcdEiii+0x60>)
 8002b16:	fb82 1203 	smull	r1, r2, r2, r3
 8002b1a:	1092      	asrs	r2, r2, #2
 8002b1c:	17db      	asrs	r3, r3, #31
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	b258      	sxtb	r0, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <_ZN3Rtc8intToBcdEiii+0x60>)
 8002b28:	fb83 1302 	smull	r1, r3, r3, r2
 8002b2c:	1099      	asrs	r1, r3, #2
 8002b2e:	17d3      	asrs	r3, r2, #31
 8002b30:	1ac9      	subs	r1, r1, r3
 8002b32:	460b      	mov	r3, r1
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	1ad1      	subs	r1, r2, r3
 8002b3c:	b24b      	sxtb	r3, r1
 8002b3e:	4303      	orrs	r3, r0
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	66666667 	.word	0x66666667

08002b54 <_ZN3Rtc7getTimeEP9DateTime_>:


void Rtc::getTime(DateTime* dateTime)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];
	HAL_I2C_Mem_Read(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	791b      	ldrb	r3, [r3, #4]
 8002b66:	b299      	uxth	r1, r3
 8002b68:	23ff      	movs	r3, #255	; 0xff
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2301      	movs	r3, #1
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f001 ffe1 	bl	8004b40 <HAL_I2C_Mem_Read>

	// remove stop bit if set
	buffer[0] &= ~RTC_START_STOP;
 8002b7e:	7a3b      	ldrb	r3, [r7, #8]
 8002b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	723b      	strb	r3, [r7, #8]
	dateTime->sec = bcdToInt(buffer[0]);
 8002b88:	7a3b      	ldrb	r3, [r7, #8]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff95 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002b92:	4602      	mov	r2, r0
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	601a      	str	r2, [r3, #0]
	dateTime->min = bcdToInt(buffer[1]);
 8002b98:	7a7b      	ldrb	r3, [r7, #9]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff8d 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
	dateTime->hours = bcdToInt(buffer[2]);
 8002ba8:	7abb      	ldrb	r3, [r7, #10]
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff85 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	609a      	str	r2, [r3, #8]
	dateTime->weekDay = buffer[3] & 0x07;
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	60da      	str	r2, [r3, #12]
	dateTime->day = bcdToInt(buffer[4]);
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ff78 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	611a      	str	r2, [r3, #16]
	dateTime->month = bcdToInt(buffer[5]);
 8002bd2:	7b7b      	ldrb	r3, [r7, #13]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff70 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	615a      	str	r2, [r3, #20]
	dateTime->year = bcdToInt(buffer[6]);
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	4619      	mov	r1, r3
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff68 	bl	8002abc <_ZN3Rtc8bcdToIntEh>
 8002bec:	4602      	mov	r2, r0
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	619a      	str	r2, [r3, #24]
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_ZN3Rtc7setTimeEP9DateTime_>:



void Rtc::setTime(DateTime* dateTime)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	af04      	add	r7, sp, #16
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
	uint8_t buffer[RTC_DATE_TIME_SIZE];

	buffer[0] = intToBcd(dateTime->sec, 0, 59);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6819      	ldr	r1, [r3, #0]
 8002c08:	233b      	movs	r3, #59	; 0x3b
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff6f 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c12:	4603      	mov	r3, r0
 8002c14:	723b      	strb	r3, [r7, #8]
	buffer[1] = intToBcd(dateTime->min, 0, 59);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	233b      	movs	r3, #59	; 0x3b
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff66 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c24:	4603      	mov	r3, r0
 8002c26:	727b      	strb	r3, [r7, #9]
	buffer[2] = intToBcd(dateTime->hours, 0, 59);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	233b      	movs	r3, #59	; 0x3b
 8002c2e:	2200      	movs	r2, #0
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff5d 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c36:	4603      	mov	r3, r0
 8002c38:	72bb      	strb	r3, [r7, #10]
	buffer[3] = dateTime->weekDay < 1 || dateTime->weekDay > 7 ? 0 : dateTime->weekDay;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	dd07      	ble.n	8002c52 <_ZN3Rtc7setTimeEP9DateTime_+0x58>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b07      	cmp	r3, #7
 8002c48:	dc03      	bgt.n	8002c52 <_ZN3Rtc7setTimeEP9DateTime_+0x58>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e000      	b.n	8002c54 <_ZN3Rtc7setTimeEP9DateTime_+0x5a>
 8002c52:	2300      	movs	r3, #0
 8002c54:	72fb      	strb	r3, [r7, #11]
	buffer[4] = intToBcd(dateTime->day, 1, 31);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	231f      	movs	r3, #31
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff ff46 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c64:	4603      	mov	r3, r0
 8002c66:	733b      	strb	r3, [r7, #12]
	buffer[5] = intToBcd(dateTime->month, 1, 12);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6959      	ldr	r1, [r3, #20]
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	2201      	movs	r2, #1
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff3d 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c76:	4603      	mov	r3, r0
 8002c78:	737b      	strb	r3, [r7, #13]
	buffer[6] = intToBcd(dateTime->year, 1, 99);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	2363      	movs	r3, #99	; 0x63
 8002c80:	2201      	movs	r2, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff34 	bl	8002af0 <_ZN3Rtc8intToBcdEiii>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(_hi2c, _devAddr, 0, 1, buffer, RTC_DATE_TIME_SIZE, 0xFF);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	b299      	uxth	r1, r3
 8002c96:	23ff      	movs	r3, #255	; 0xff
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f001 fe36 	bl	8004918 <HAL_I2C_Mem_Write>
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb8:	f000 fdc0 	bl	800383c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cbc:	f000 f876 	bl	8002dac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc0:	f000 fa2c 	bl	800311c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002cc4:	f000 f9fa 	bl	80030bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002cc8:	f000 f8c2 	bl	8002e50 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002ccc:	f000 f93e 	bl	8002f4c <MX_TIM3_Init>
  MX_TIM6_Init();
 8002cd0:	f000 f996 	bl	8003000 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002cd4:	f000 f9cc 	bl	8003070 <MX_TIM16_Init>
  MX_SPI1_Init();
 8002cd8:	f000 f8fa 	bl	8002ed0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002cdc:	f006 ff44 	bl	8009b68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ce0:	f00a f922 	bl	800cf28 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of stopBuzzer */
  stopBuzzerHandle = osSemaphoreNew(1, 1, &stopBuzzer_attributes);
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <main+0xa8>)
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f00a fa14 	bl	800d116 <osSemaphoreNew>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <main+0xac>)
 8002cf2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <main+0xb0>)
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	481b      	ldr	r0, [pc, #108]	; (8002d68 <main+0xb4>)
 8002cfa:	f00a f95f 	bl	800cfbc <osThreadNew>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <main+0xb8>)
 8002d02:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(startBlinkTask, NULL, &blinkTask_attributes);
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <main+0xbc>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	481a      	ldr	r0, [pc, #104]	; (8002d74 <main+0xc0>)
 8002d0a:	f00a f957 	bl	800cfbc <osThreadNew>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <main+0xc4>)
 8002d12:	6013      	str	r3, [r2, #0]

  /* creation of comTask */
  comTaskHandle = osThreadNew(StartComTask, NULL, &comTask_attributes);
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <main+0xc8>)
 8002d16:	2100      	movs	r1, #0
 8002d18:	4819      	ldr	r0, [pc, #100]	; (8002d80 <main+0xcc>)
 8002d1a:	f00a f94f 	bl	800cfbc <osThreadNew>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <main+0xd0>)
 8002d22:	6013      	str	r3, [r2, #0]

  /* creation of buttonTak */
  buttonTakHandle = osThreadNew(StartbuttonTak, NULL, &buttonTak_attributes);
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <main+0xd4>)
 8002d26:	2100      	movs	r1, #0
 8002d28:	4818      	ldr	r0, [pc, #96]	; (8002d8c <main+0xd8>)
 8002d2a:	f00a f947 	bl	800cfbc <osThreadNew>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <main+0xdc>)
 8002d32:	6013      	str	r3, [r2, #0]

  /* creation of DhtTask */
  DhtTaskHandle = osThreadNew(StartDhtTask, NULL, &DhtTask_attributes);
 8002d34:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <main+0xe0>)
 8002d36:	2100      	movs	r1, #0
 8002d38:	4817      	ldr	r0, [pc, #92]	; (8002d98 <main+0xe4>)
 8002d3a:	f00a f93f 	bl	800cfbc <osThreadNew>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <main+0xe8>)
 8002d42:	6013      	str	r3, [r2, #0]

  /* creation of ManagerTask */
  ManagerTaskHandle = osThreadNew(StartManagerTask, NULL, &ManagerTask_attributes);
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <main+0xec>)
 8002d46:	2100      	movs	r1, #0
 8002d48:	4816      	ldr	r0, [pc, #88]	; (8002da4 <main+0xf0>)
 8002d4a:	f00a f937 	bl	800cfbc <osThreadNew>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <main+0xf4>)
 8002d52:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d54:	f00a f90c 	bl	800cf70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <main+0xa4>
 8002d5a:	bf00      	nop
 8002d5c:	080144dc 	.word	0x080144dc
 8002d60:	20000f30 	.word	0x20000f30
 8002d64:	08014404 	.word	0x08014404
 8002d68:	08003235 	.word	0x08003235
 8002d6c:	20000f18 	.word	0x20000f18
 8002d70:	08014428 	.word	0x08014428
 8002d74:	080025ad 	.word	0x080025ad
 8002d78:	20000f1c 	.word	0x20000f1c
 8002d7c:	0801444c 	.word	0x0801444c
 8002d80:	08001dd5 	.word	0x08001dd5
 8002d84:	20000f20 	.word	0x20000f20
 8002d88:	08014470 	.word	0x08014470
 8002d8c:	08000f91 	.word	0x08000f91
 8002d90:	20000f24 	.word	0x20000f24
 8002d94:	08014494 	.word	0x08014494
 8002d98:	08002175 	.word	0x08002175
 8002d9c:	20000f28 	.word	0x20000f28
 8002da0:	080144b8 	.word	0x080144b8
 8002da4:	0800281d 	.word	0x0800281d
 8002da8:	20000f2c 	.word	0x20000f2c

08002dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b096      	sub	sp, #88	; 0x58
 8002db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	2244      	movs	r2, #68	; 0x44
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00d fbec 	bl	8010598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002dce:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002dd2:	f002 fb1b 	bl	800540c <HAL_PWREx_ControlVoltageScaling>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002ddc:	f000 fa32 	bl	8003244 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002de0:	2302      	movs	r3, #2
 8002de2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dea:	2310      	movs	r3, #16
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dee:	2302      	movs	r3, #2
 8002df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002df2:	2302      	movs	r3, #2
 8002df4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002dfe:	2307      	movs	r3, #7
 8002e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e02:	2302      	movs	r3, #2
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fb52 	bl	80054b8 <HAL_RCC_OscConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002e1a:	f000 fa13 	bl	8003244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1e:	230f      	movs	r3, #15
 8002e20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e22:	2303      	movs	r3, #3
 8002e24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e32:	463b      	mov	r3, r7
 8002e34:	2104      	movs	r1, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 ff1a 	bl	8005c70 <HAL_RCC_ClockConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e42:	f000 f9ff 	bl	8003244 <Error_Handler>
  }
}
 8002e46:	bf00      	nop
 8002e48:	3758      	adds	r7, #88	; 0x58
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <MX_I2C1_Init+0x78>)
 8002e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <MX_I2C1_Init+0x7c>)
 8002e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e8a:	480e      	ldr	r0, [pc, #56]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e8c:	f001 fcb4 	bl	80047f8 <HAL_I2C_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e96:	f000 f9d5 	bl	8003244 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e9e:	f002 fa0f 	bl	80052c0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ea8:	f000 f9cc 	bl	8003244 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eac:	2100      	movs	r1, #0
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002eb0:	f002 fa51 	bl	8005356 <HAL_I2CEx_ConfigDigitalFilter>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002eba:	f000 f9c3 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000cf8 	.word	0x20000cf8
 8002ec8:	40005400 	.word	0x40005400
 8002ecc:	10909cec 	.word	0x10909cec

08002ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <MX_SPI1_Init+0x78>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002edc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002eea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002eee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ef0:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002efc:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f06:	2230      	movs	r2, #48	; 0x30
 8002f08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f1e:	2207      	movs	r2, #7
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f2e:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_SPI1_Init+0x74>)
 8002f30:	f003 fd7e 	bl	8006a30 <HAL_SPI_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002f3a:	f000 f983 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000d4c 	.word	0x20000d4c
 8002f48:	40013000 	.word	0x40013000

08002f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	615a      	str	r2, [r3, #20]
 8002f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f70:	4b21      	ldr	r3, [pc, #132]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f72:	4a22      	ldr	r2, [pc, #136]	; (8002ffc <MX_TIM3_Init+0xb0>)
 8002f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f78:	f240 321f 	movw	r2, #799	; 0x31f
 8002f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002f84:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f86:	2264      	movs	r2, #100	; 0x64
 8002f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b19      	ldr	r3, [pc, #100]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f96:	4818      	ldr	r0, [pc, #96]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002f98:	f004 faeb 	bl	8007572 <HAL_TIM_PWM_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002fa2:	f000 f94f 	bl	8003244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002fb6:	f005 fb67 	bl	8008688 <HAL_TIMEx_MasterConfigSynchronization>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002fc0:	f000 f940 	bl	8003244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc4:	2360      	movs	r3, #96	; 0x60
 8002fc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8002fc8:	2332      	movs	r3, #50	; 0x32
 8002fca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4807      	ldr	r0, [pc, #28]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002fdc:	f004 fe78 	bl	8007cd0 <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002fe6:	f000 f92d 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fea:	4803      	ldr	r0, [pc, #12]	; (8002ff8 <MX_TIM3_Init+0xac>)
 8002fec:	f000 fa5a 	bl	80034a4 <HAL_TIM_MspPostInit>

}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000db0 	.word	0x20000db0
 8002ffc:	40000400 	.word	0x40000400

08003000 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <MX_TIM6_Init+0x68>)
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <MX_TIM6_Init+0x6c>)
 8003014:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <MX_TIM6_Init+0x68>)
 8003018:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800301c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <MX_TIM6_Init+0x68>)
 8003020:	2200      	movs	r2, #0
 8003022:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003024:	4b10      	ldr	r3, [pc, #64]	; (8003068 <MX_TIM6_Init+0x68>)
 8003026:	f240 32e7 	movw	r2, #999	; 0x3e7
 800302a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <MX_TIM6_Init+0x68>)
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003032:	480d      	ldr	r0, [pc, #52]	; (8003068 <MX_TIM6_Init+0x68>)
 8003034:	f004 f916 	bl	8007264 <HAL_TIM_Base_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800303e:	f000 f901 	bl	8003244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4806      	ldr	r0, [pc, #24]	; (8003068 <MX_TIM6_Init+0x68>)
 8003050:	f005 fb1a 	bl	8008688 <HAL_TIMEx_MasterConfigSynchronization>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800305a:	f000 f8f3 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000dfc 	.word	0x20000dfc
 800306c:	40001000 	.word	0x40001000

08003070 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <MX_TIM16_Init+0x44>)
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <MX_TIM16_Init+0x48>)
 8003078:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 80;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <MX_TIM16_Init+0x44>)
 800307c:	2250      	movs	r2, #80	; 0x50
 800307e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <MX_TIM16_Init+0x44>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003086:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <MX_TIM16_Init+0x44>)
 8003088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800308c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <MX_TIM16_Init+0x44>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <MX_TIM16_Init+0x44>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <MX_TIM16_Init+0x44>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80030a0:	4804      	ldr	r0, [pc, #16]	; (80030b4 <MX_TIM16_Init+0x44>)
 80030a2:	f004 f8df 	bl	8007264 <HAL_TIM_Base_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80030ac:	f000 f8ca 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000e48 	.word	0x20000e48
 80030b8:	40014400 	.word	0x40014400

080030bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <MX_USART2_UART_Init+0x5c>)
 80030c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030c6:	4b13      	ldr	r3, [pc, #76]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030e2:	220c      	movs	r2, #12
 80030e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <MX_USART2_UART_Init+0x58>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <MX_USART2_UART_Init+0x58>)
 8003100:	f005 fb68 	bl	80087d4 <HAL_UART_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800310a:	f000 f89b 	bl	8003244 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000e94 	.word	0x20000e94
 8003118:	40004400 	.word	0x40004400

0800311c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <MX_GPIO_Init+0x10c>)
 800314c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314e:	4a36      	ldr	r2, [pc, #216]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <MX_GPIO_Init+0x10c>)
 800317c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317e:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003186:	4b28      	ldr	r3, [pc, #160]	; (8003228 <MX_GPIO_Init+0x10c>)
 8003188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	f246 0140 	movw	r1, #24640	; 0x6040
 8003198:	4824      	ldr	r0, [pc, #144]	; (800322c <MX_GPIO_Init+0x110>)
 800319a:	f001 fae3 	bl	8004764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800319e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	481e      	ldr	r0, [pc, #120]	; (8003230 <MX_GPIO_Init+0x114>)
 80031b6:	f001 f913 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|SD_CS_Pin;
 80031ba:	f246 0340 	movw	r3, #24640	; 0x6040
 80031be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c0:	2301      	movs	r3, #1
 80031c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	2300      	movs	r3, #0
 80031ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031cc:	f107 0314 	add.w	r3, r7, #20
 80031d0:	4619      	mov	r1, r3
 80031d2:	4816      	ldr	r0, [pc, #88]	; (800322c <MX_GPIO_Init+0x110>)
 80031d4:	f001 f904 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 80031d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031de:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80031e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f2:	f001 f8f5 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80031f6:	2320      	movs	r3, #32
 80031f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	4808      	ldr	r0, [pc, #32]	; (800322c <MX_GPIO_Init+0x110>)
 800320c:	f001 f8e8 	bl	80043e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2105      	movs	r1, #5
 8003214:	2028      	movs	r0, #40	; 0x28
 8003216:	f000 fcb0 	bl	8003b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800321a:	2028      	movs	r0, #40	; 0x28
 800321c:	f000 fcc9 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

}
 8003220:	bf00      	nop
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40021000 	.word	0x40021000
 800322c:	48000400 	.word	0x48000400
 8003230:	48000800 	.word	0x48000800

08003234 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800323c:	2001      	movs	r0, #1
 800323e:	f009 ff4f 	bl	800d0e0 <osDelay>
 8003242:	e7fb      	b.n	800323c <StartDefaultTask+0x8>

08003244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003248:	b672      	cpsid	i
}
 800324a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800324c:	e7fe      	b.n	800324c <Error_Handler+0x8>
	...

08003250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_MspInit+0x5c>)
 8003258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325a:	4a14      	ldr	r2, [pc, #80]	; (80032ac <HAL_MspInit+0x5c>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6613      	str	r3, [r2, #96]	; 0x60
 8003262:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_MspInit+0x5c>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_MspInit+0x5c>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <HAL_MspInit+0x5c>)
 8003274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	; 0x58
 800327a:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_MspInit+0x5c>)
 800327c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	210f      	movs	r1, #15
 800328a:	f06f 0001 	mvn.w	r0, #1
 800328e:	f000 fc74 	bl	8003b7a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8003292:	2200      	movs	r2, #0
 8003294:	2105      	movs	r1, #5
 8003296:	2004      	movs	r0, #4
 8003298:	f000 fc6f 	bl	8003b7a <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800329c:	2004      	movs	r0, #4
 800329e:	f000 fc88 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b0ac      	sub	sp, #176	; 0xb0
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2288      	movs	r2, #136	; 0x88
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f00d f961 	bl	8010598 <memset>
  if(hi2c->Instance==I2C1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_I2C_MspInit+0xb0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d13b      	bne.n	8003358 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032e0:	2340      	movs	r3, #64	; 0x40
 80032e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fee3 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032f8:	f7ff ffa4 	bl	8003244 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 80032fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003308:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 800330a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003314:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331c:	2312      	movs	r3, #18
 800331e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800332e:	2304      	movs	r3, #4
 8003330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003334:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003338:	4619      	mov	r1, r3
 800333a:	480b      	ldr	r0, [pc, #44]	; (8003368 <HAL_I2C_MspInit+0xb8>)
 800333c:	f001 f850 	bl	80043e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 8003346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800334a:	6593      	str	r3, [r2, #88]	; 0x58
 800334c:	4b05      	ldr	r3, [pc, #20]	; (8003364 <HAL_I2C_MspInit+0xb4>)
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	37b0      	adds	r7, #176	; 0xb0
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40005400 	.word	0x40005400
 8003364:	40021000 	.word	0x40021000
 8003368:	48000400 	.word	0x48000400

0800336c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_SPI_MspInit+0x7c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d128      	bne.n	80033e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_SPI_MspInit+0x80>)
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_SPI_MspInit+0x80>)
 8003394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003398:	6613      	str	r3, [r2, #96]	; 0x60
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_SPI_MspInit+0x80>)
 800339c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800339e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <HAL_SPI_MspInit+0x80>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <HAL_SPI_MspInit+0x80>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_SPI_MspInit+0x80>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80033be:	23e0      	movs	r3, #224	; 0xe0
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ce:	2305      	movs	r3, #5
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033dc:	f001 f800 	bl	80043e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40013000 	.word	0x40013000
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_TIM_PWM_MspInit+0x38>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10b      	bne.n	800341a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_TIM_PWM_MspInit+0x3c>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_TIM_PWM_MspInit+0x3c>)
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	6593      	str	r3, [r2, #88]	; 0x58
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_TIM_PWM_MspInit+0x3c>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40000400 	.word	0x40000400
 800342c:	40021000 	.word	0x40021000

08003430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <HAL_TIM_Base_MspInit+0x68>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d114      	bne.n	800346c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 8003448:	f043 0310 	orr.w	r3, r3, #16
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2105      	movs	r1, #5
 800345e:	2036      	movs	r0, #54	; 0x36
 8003460:	f000 fb8b 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003464:	2036      	movs	r0, #54	; 0x36
 8003466:	f000 fba4 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800346a:	e010      	b.n	800348e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_TIM_Base_MspInit+0x70>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10b      	bne.n	800348e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6613      	str	r3, [r2, #96]	; 0x60
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_TIM_Base_MspInit+0x6c>)
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40001000 	.word	0x40001000
 800349c:	40021000 	.word	0x40021000
 80034a0:	40014400 	.word	0x40014400

080034a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <HAL_TIM_MspPostInit+0x64>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d11b      	bne.n	80034fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_TIM_MspPostInit+0x68>)
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <HAL_TIM_MspPostInit+0x68>)
 80034cc:	f043 0302 	orr.w	r3, r3, #2
 80034d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_TIM_MspPostInit+0x68>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034de:	2310      	movs	r3, #16
 80034e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ee:	2302      	movs	r3, #2
 80034f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <HAL_TIM_MspPostInit+0x6c>)
 80034fa:	f000 ff71 	bl	80043e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034fe:	bf00      	nop
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40000400 	.word	0x40000400
 800350c:	40021000 	.word	0x40021000
 8003510:	48000400 	.word	0x48000400

08003514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0ac      	sub	sp, #176	; 0xb0
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	2288      	movs	r2, #136	; 0x88
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f00d f82f 	bl	8010598 <memset>
  if(huart->Instance==USART2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_UART_MspInit+0xc0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d143      	bne.n	80035cc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003544:	2302      	movs	r3, #2
 8003546:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003548:	2300      	movs	r3, #0
 800354a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	4618      	mov	r0, r3
 8003552:	f002 fdb1 	bl	80060b8 <HAL_RCCEx_PeriphCLKConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800355c:	f7ff fe72 	bl	8003244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 8003566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356a:	6593      	str	r3, [r2, #88]	; 0x58
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 800357a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003584:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_UART_MspInit+0xc4>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003590:	230c      	movs	r3, #12
 8003592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003596:	2302      	movs	r3, #2
 8003598:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a2:	2303      	movs	r3, #3
 80035a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035a8:	2307      	movs	r3, #7
 80035aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b8:	f000 ff12 	bl	80043e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80035bc:	2200      	movs	r2, #0
 80035be:	2105      	movs	r1, #5
 80035c0:	2026      	movs	r0, #38	; 0x26
 80035c2:	f000 fada 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035c6:	2026      	movs	r0, #38	; 0x26
 80035c8:	f000 faf3 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035cc:	bf00      	nop
 80035ce:	37b0      	adds	r7, #176	; 0xb0
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40021000 	.word	0x40021000

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <NMI_Handler+0x4>

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <MemManage_Handler+0x4>

080035ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <BusFault_Handler+0x4>

080035f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <UsageFault_Handler+0x4>

080035fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800360c:	f000 f972 	bl	80038f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003610:	f00b fdd8 	bl	800f1c4 <xTaskGetSchedulerState>
 8003614:	4603      	mov	r3, r0
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800361a:	f00c fcbd 	bl	800ff98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}

08003622 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003626:	f000 fbd7 	bl	8003dd8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <USART2_IRQHandler+0x10>)
 8003636:	f005 fa81 	bl	8008b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000e94 	.word	0x20000e94

08003644 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003648:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800364c:	f001 f8bc 	bl	80047c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003650:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003654:	f001 f8b8 	bl	80047c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003658:	bf00      	nop
 800365a:	bd80      	pop	{r7, pc}

0800365c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <TIM6_DAC_IRQHandler+0x10>)
 8003662:	f004 fa15 	bl	8007a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000dfc 	.word	0x20000dfc

08003670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	return 1;
 8003674:	2301      	movs	r3, #1
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_kill>:

int _kill(int pid, int sig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800368a:	f00c ff3d 	bl	8010508 <__errno>
 800368e:	4603      	mov	r3, r0
 8003690:	2216      	movs	r2, #22
 8003692:	601a      	str	r2, [r3, #0]
	return -1;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_exit>:

void _exit (int status)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036a8:	f04f 31ff 	mov.w	r1, #4294967295
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ffe7 	bl	8003680 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036b2:	e7fe      	b.n	80036b2 <_exit+0x12>

080036b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e00a      	b.n	80036dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036c6:	f3af 8000 	nop.w
 80036ca:	4601      	mov	r1, r0
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	b2ca      	uxtb	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf0      	blt.n	80036c6 <_read+0x12>
	}

return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
	return -1;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003716:	605a      	str	r2, [r3, #4]
	return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_isatty>:

int _isatty(int file)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	return 1;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
	return 0;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_sbrk+0x5c>)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <_sbrk+0x60>)
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x64>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <_sbrk+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d207      	bcs.n	8003798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003788:	f00c febe 	bl	8010508 <__errno>
 800378c:	4603      	mov	r3, r0
 800378e:	220c      	movs	r2, #12
 8003790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	e009      	b.n	80037ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <_sbrk+0x64>)
 80037a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20018000 	.word	0x20018000
 80037b8:	00000400 	.word	0x00000400
 80037bc:	20000f34 	.word	0x20000f34
 80037c0:	20003070 	.word	0x20003070

080037c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <SystemInit+0x20>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <SystemInit+0x20>)
 80037d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80037e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037ec:	f7ff ffea 	bl	80037c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <LoopForever+0x6>)
  ldr r1, =_edata
 80037f2:	490d      	ldr	r1, [pc, #52]	; (8003828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <LoopForever+0xe>)
  movs r3, #0
 80037f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f8:	e002      	b.n	8003800 <LoopCopyDataInit>

080037fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037fe:	3304      	adds	r3, #4

08003800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003804:	d3f9      	bcc.n	80037fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003808:	4c0a      	ldr	r4, [pc, #40]	; (8003834 <LoopForever+0x16>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800380c:	e001      	b.n	8003812 <LoopFillZerobss>

0800380e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800380e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003810:	3204      	adds	r2, #4

08003812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003814:	d3fb      	bcc.n	800380e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003816:	f00c fe7d 	bl	8010514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800381a:	f7ff fa4b 	bl	8002cb4 <main>

0800381e <LoopForever>:

LoopForever:
    b LoopForever
 800381e:	e7fe      	b.n	800381e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003828:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 800382c:	08014a24 	.word	0x08014a24
  ldr r2, =_sbss
 8003830:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003834:	20003070 	.word	0x20003070

08003838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003838:	e7fe      	b.n	8003838 <ADC1_2_IRQHandler>
	...

0800383c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_Init+0x3c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_Init+0x3c>)
 800384c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003850:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003852:	2003      	movs	r0, #3
 8003854:	f000 f986 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003858:	200f      	movs	r0, #15
 800385a:	f000 f80f 	bl	800387c <HAL_InitTick>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	71fb      	strb	r3, [r7, #7]
 8003868:	e001      	b.n	800386e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800386a:	f7ff fcf1 	bl	8003250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800386e:	79fb      	ldrb	r3, [r7, #7]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40022000 	.word	0x40022000

0800387c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003888:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_InitTick+0x6c>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003890:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_InitTick+0x70>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <HAL_InitTick+0x6c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389e:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f99f 	bl	8003bea <HAL_SYSTICK_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10f      	bne.n	80038d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b0f      	cmp	r3, #15
 80038b6:	d809      	bhi.n	80038cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038b8:	2200      	movs	r2, #0
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f000 f95b 	bl	8003b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_InitTick+0x74>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e007      	b.n	80038dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e004      	b.n	80038dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e001      	b.n	80038dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000010 	.word	0x20000010
 80038ec:	20000008 	.word	0x20000008
 80038f0:	2000000c 	.word	0x2000000c

080038f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_IncTick+0x20>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_IncTick+0x24>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_IncTick+0x24>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000010 	.word	0x20000010
 8003918:	20000f38 	.word	0x20000f38

0800391c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return uwTick;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_GetTick+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000f38 	.word	0x20000f38

08003934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff ffee 	bl	800391c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d005      	beq.n	800395a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <HAL_Delay+0x44>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800395a:	bf00      	nop
 800395c:	f7ff ffde 	bl	800391c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d8f7      	bhi.n	800395c <HAL_Delay+0x28>
  {
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000010 	.word	0x20000010

0800397c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003998:	4013      	ands	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ae:	4a04      	ldr	r2, [pc, #16]	; (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	60d3      	str	r3, [r2, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__NVIC_GetPriorityGrouping+0x18>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 0307 	and.w	r3, r3, #7
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	db0b      	blt.n	8003a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	f003 021f 	and.w	r2, r3, #31
 80039f8:	4907      	ldr	r1, [pc, #28]	; (8003a18 <__NVIC_EnableIRQ+0x38>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2001      	movs	r0, #1
 8003a02:	fa00 f202 	lsl.w	r2, r0, r2
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100

08003a1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	db12      	blt.n	8003a54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	490a      	ldr	r1, [pc, #40]	; (8003a60 <__NVIC_DisableIRQ+0x44>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a42:	3320      	adds	r3, #32
 8003a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a48:	f3bf 8f4f 	dsb	sy
}
 8003a4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a4e:	f3bf 8f6f 	isb	sy
}
 8003a52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff8e 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff05 	bl	800397c <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff1a 	bl	80039c4 <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff8e 	bl	8003ab8 <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5d 	bl	8003a64 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff0d 	bl	80039e0 <__NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff1d 	bl	8003a1c <__NVIC_DisableIRQ>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff94 	bl	8003b20 <SysTick_Config>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d008      	beq.n	8003c2c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e022      	b.n	8003c72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 020e 	bic.w	r2, r2, #14
 8003c3a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	f003 021c 	and.w	r2, r3, #28
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d005      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
 8003ca0:	e029      	b.n	8003cf6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020e 	bic.w	r2, r2, #14
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f003 021c 	and.w	r2, r3, #28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	2101      	movs	r1, #1
 8003cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4798      	blx	r3
    }
  }
  return status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d12:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_FLASH_Program+0x1e>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e053      	b.n	8003dc6 <HAL_FLASH_Program+0xc6>
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d28:	f000 f964 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d143      	bne.n	8003dbe <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_FLASH_Program+0xd4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_FLASH_Program+0xd4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_FLASH_Program+0xd4>)
 8003d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d52:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003d56:	2202      	movs	r2, #2
 8003d58:	771a      	strb	r2, [r3, #28]
 8003d5a:	e002      	b.n	8003d62 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f000 f997 	bl	80040a0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003d72:	2301      	movs	r3, #1
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e010      	b.n	8003d9a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d002      	beq.n	8003d84 <HAL_FLASH_Program+0x84>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10a      	bne.n	8003d9a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	4619      	mov	r1, r3
 8003d88:	68b8      	ldr	r0, [r7, #8]
 8003d8a:	f000 f9af 	bl	80040ec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d102      	bne.n	8003d9a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003d94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d98:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d9e:	f000 f929 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_FLASH_Program+0xd4>)
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	4907      	ldr	r1, [pc, #28]	; (8003dd4 <HAL_FLASH_Program+0xd4>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003dba:	f000 fac7 	bl	800434c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_FLASH_Program+0xd0>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]

  return status;
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000014 	.word	0x20000014
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003dde:	4b68      	ldr	r3, [pc, #416]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	4a67      	ldr	r2, [pc, #412]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003de4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003de8:	f023 0307 	bic.w	r3, r3, #7
 8003dec:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003dee:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4a63      	ldr	r2, [pc, #396]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003df4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df8:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003dfa:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003dfc:	7a1b      	ldrb	r3, [r3, #8]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d105      	bne.n	8003e10 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003e04:	4b5e      	ldr	r3, [pc, #376]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4a5d      	ldr	r2, [pc, #372]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0e:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003e10:	4b5b      	ldr	r3, [pc, #364]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d045      	beq.n	8003eae <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003e22:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e2c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_FLASH_IRQHandler+0x70>
 8003e38:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e42:	494f      	ldr	r1, [pc, #316]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	618b      	str	r3, [r1, #24]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <HAL_FLASH_IRQHandler+0x84>
 8003e52:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e5a:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003e5c:	f000 fa76 	bl	800434c <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003e60:	4b48      	ldr	r3, [pc, #288]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e62:	7a1b      	ldrb	r3, [r3, #8]
 8003e64:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003e6c:	4b45      	ldr	r3, [pc, #276]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f893 	bl	8003f9c <HAL_FLASH_OperationErrorCallback>
 8003e76:	e017      	b.n	8003ea8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8003e78:	7afb      	ldrb	r3, [r7, #11]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d105      	bne.n	8003e8a <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f88a 	bl	8003f9c <HAL_FLASH_OperationErrorCallback>
 8003e88:	e00e      	b.n	8003ea8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8003e8a:	7afb      	ldrb	r3, [r7, #11]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d002      	beq.n	8003e96 <HAL_FLASH_IRQHandler+0xbe>
 8003e90:	7afb      	ldrb	r3, [r7, #11]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d105      	bne.n	8003ea2 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f87e 	bl	8003f9c <HAL_FLASH_OperationErrorCallback>
 8003ea0:	e002      	b.n	8003ea8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f000 f87a 	bl	8003f9c <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ea8:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003eae:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04f      	beq.n	8003f5a <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003ec0:	4b30      	ldr	r3, [pc, #192]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ec2:	7a1b      	ldrb	r3, [r3, #8]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12b      	bne.n	8003f22 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003eca:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ed2:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f851 	bl	8003f88 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003ee6:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eee:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4619      	mov	r1, r3
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f9ef 	bl	80042e0 <FLASH_PageErase>
 8003f02:	e02a      	b.n	8003f5a <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003f04:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f06:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0a:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003f12:	f000 fa1b 	bl	800434c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003f16:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f834 	bl	8003f88 <HAL_FLASH_EndOfOperationCallback>
 8003f20:	e01b      	b.n	8003f5a <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8003f22:	f000 fa13 	bl	800434c <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8003f26:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f28:	7a1b      	ldrb	r3, [r3, #8]
 8003f2a:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8003f2c:	7afb      	ldrb	r3, [r7, #11]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d105      	bne.n	8003f3e <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f826 	bl	8003f88 <HAL_FLASH_EndOfOperationCallback>
 8003f3c:	e00a      	b.n	8003f54 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d002      	beq.n	8003f4a <HAL_FLASH_IRQHandler+0x172>
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d104      	bne.n	8003f54 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003f4a:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f81a 	bl	8003f88 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f5c:	7a1b      	ldrb	r3, [r3, #8]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f6a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003f6e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
  }
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40022000 	.word	0x40022000
 8003f84:	20000014 	.word	0x20000014

08003f88 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_FLASH_Unlock+0x38>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da0b      	bge.n	8003fda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_FLASH_Unlock+0x38>)
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_FLASH_Unlock+0x3c>)
 8003fc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_FLASH_Unlock+0x38>)
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_FLASH_Unlock+0x40>)
 8003fcc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_FLASH_Unlock+0x38>)
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da01      	bge.n	8003fda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fda:	79fb      	ldrb	r3, [r7, #7]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	45670123 	.word	0x45670123
 8003ff0:	cdef89ab 	.word	0xcdef89ab

08003ff4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff fc8e 	bl	800391c <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004002:	e00d      	b.n	8004020 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d009      	beq.n	8004020 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800400c:	f7ff fc86 	bl	800391c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d801      	bhi.n	8004020 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e037      	b.n	8004090 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1eb      	bne.n	8004004 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004034:	4013      	ands	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01e      	beq.n	800407c <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <FLASH_WaitForLastOperation+0xa8>)
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4313      	orrs	r3, r2
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <FLASH_WaitForLastOperation+0xa8>)
 8004048:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <FLASH_WaitForLastOperation+0x70>
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800405e:	490e      	ldr	r1, [pc, #56]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	618b      	str	r3, [r1, #24]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d004      	beq.n	8004078 <FLASH_WaitForLastOperation+0x84>
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004076:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e009      	b.n	8004090 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <FLASH_WaitForLastOperation+0xa4>)
 800408a:	2201      	movs	r2, #1
 800408c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40022000 	.word	0x40022000
 800409c:	20000014 	.word	0x20000014

080040a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <FLASH_Program_DoubleWord+0x48>)
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <FLASH_Program_DoubleWord+0x48>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80040be:	f3bf 8f6f 	isb	sy
}
 80040c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80040c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	000a      	movs	r2, r1
 80040d2:	2300      	movs	r3, #0
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	3104      	adds	r1, #4
 80040d8:	4613      	mov	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40022000 	.word	0x40022000

080040ec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004102:	4b14      	ldr	r3, [pc, #80]	; (8004154 <FLASH_Program_Fast+0x68>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4a13      	ldr	r2, [pc, #76]	; (8004154 <FLASH_Program_Fast+0x68>)
 8004108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800410c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410e:	f3ef 8310 	mrs	r3, PRIMASK
 8004112:	60fb      	str	r3, [r7, #12]
  return(result);
 8004114:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004118:	b672      	cpsid	i
}
 800411a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3304      	adds	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3304      	adds	r3, #4
 800412e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004130:	7ffb      	ldrb	r3, [r7, #31]
 8004132:	3b01      	subs	r3, #1
 8004134:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1ef      	bne.n	800411c <FLASH_Program_Fast+0x30>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004148:	bf00      	nop
 800414a:	3724      	adds	r7, #36	; 0x24
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40022000 	.word	0x40022000

08004158 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004162:	4b49      	ldr	r3, [pc, #292]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_FLASHEx_Erase+0x16>
 800416a:	2302      	movs	r3, #2
 800416c:	e087      	b.n	800427e <HAL_FLASHEx_Erase+0x126>
 800416e:	4b46      	ldr	r3, [pc, #280]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004174:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004178:	f7ff ff3c 	bl	8003ff4 <FLASH_WaitForLastOperation>
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d177      	bne.n	8004276 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004186:	4b40      	ldr	r3, [pc, #256]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 8004188:	2200      	movs	r2, #0
 800418a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800418c:	4b3f      	ldr	r3, [pc, #252]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004198:	4b3c      	ldr	r3, [pc, #240]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d009      	beq.n	80041b8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80041a4:	4b39      	ldr	r3, [pc, #228]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a38      	ldr	r2, [pc, #224]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 80041aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 80041b2:	2203      	movs	r2, #3
 80041b4:	771a      	strb	r2, [r3, #28]
 80041b6:	e016      	b.n	80041e6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80041b8:	4b33      	ldr	r3, [pc, #204]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	771a      	strb	r2, [r3, #28]
 80041be:	e012      	b.n	80041e6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80041c0:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80041cc:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2e      	ldr	r2, [pc, #184]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 80041d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80041d8:	4b2b      	ldr	r3, [pc, #172]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 80041da:	2202      	movs	r2, #2
 80041dc:	771a      	strb	r2, [r3, #28]
 80041de:	e002      	b.n	80041e6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d113      	bne.n	8004216 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f84c 	bl	8004290 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041fc:	f7ff fefa 	bl	8003ff4 <FLASH_WaitForLastOperation>
 8004200:	4603      	mov	r3, r0
 8004202:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 800420a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800420e:	f023 0304 	bic.w	r3, r3, #4
 8004212:	6153      	str	r3, [r2, #20]
 8004214:	e02d      	b.n	8004272 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f04f 32ff 	mov.w	r2, #4294967295
 800421c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	e01d      	b.n	8004262 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4619      	mov	r1, r3
 800422c:	68b8      	ldr	r0, [r7, #8]
 800422e:	f000 f857 	bl	80042e0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004232:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004236:	f7ff fedd 	bl	8003ff4 <FLASH_WaitForLastOperation>
 800423a:	4603      	mov	r3, r0
 800423c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4a12      	ldr	r2, [pc, #72]	; (800428c <HAL_FLASHEx_Erase+0x134>)
 8004244:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004248:	f023 0302 	bic.w	r3, r3, #2
 800424c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	601a      	str	r2, [r3, #0]
          break;
 800425a:	e00a      	b.n	8004272 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3301      	adds	r3, #1
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	4413      	add	r3, r2
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3d9      	bcc.n	8004226 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004272:	f000 f86b 	bl	800434c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004276:	4b04      	ldr	r3, [pc, #16]	; (8004288 <HAL_FLASHEx_Erase+0x130>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]

  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000014 	.word	0x20000014
 800428c:	40022000 	.word	0x40022000

08004290 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <FLASH_MassErase+0x4c>)
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <FLASH_MassErase+0x4c>)
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <FLASH_MassErase+0x4c>)
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <FLASH_MassErase+0x4c>)
 80042be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <FLASH_MassErase+0x4c>)
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <FLASH_MassErase+0x4c>)
 80042ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ce:	6153      	str	r3, [r2, #20]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d006      	beq.n	8004302 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80042f4:	4b14      	ldr	r3, [pc, #80]	; (8004348 <FLASH_PageErase+0x68>)
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <FLASH_PageErase+0x68>)
 80042fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042fe:	6153      	str	r3, [r2, #20]
 8004300:	e005      	b.n	800430e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <FLASH_PageErase+0x68>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <FLASH_PageErase+0x68>)
 8004308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800430c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <FLASH_PageErase+0x68>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800431e:	490a      	ldr	r1, [pc, #40]	; (8004348 <FLASH_PageErase+0x68>)
 8004320:	4313      	orrs	r3, r2
 8004322:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <FLASH_PageErase+0x68>)
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	4a07      	ldr	r2, [pc, #28]	; (8004348 <FLASH_PageErase+0x68>)
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <FLASH_PageErase+0x68>)
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <FLASH_PageErase+0x68>)
 8004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433a:	6153      	str	r3, [r2, #20]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40022000 	.word	0x40022000

0800434c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004352:	4b21      	ldr	r3, [pc, #132]	; (80043d8 <FLASH_FlushCaches+0x8c>)
 8004354:	7f1b      	ldrb	r3, [r3, #28]
 8004356:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d002      	beq.n	8004364 <FLASH_FlushCaches+0x18>
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d117      	bne.n	8004394 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <FLASH_FlushCaches+0x90>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <FLASH_FlushCaches+0x90>)
 800436a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800436e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004370:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <FLASH_FlushCaches+0x90>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a19      	ldr	r2, [pc, #100]	; (80043dc <FLASH_FlushCaches+0x90>)
 8004376:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b17      	ldr	r3, [pc, #92]	; (80043dc <FLASH_FlushCaches+0x90>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	; (80043dc <FLASH_FlushCaches+0x90>)
 8004382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004386:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <FLASH_FlushCaches+0x90>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <FLASH_FlushCaches+0x90>)
 800438e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004392:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d002      	beq.n	80043a0 <FLASH_FlushCaches+0x54>
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d111      	bne.n	80043c4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043a0:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a0d      	ldr	r2, [pc, #52]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a07      	ldr	r2, [pc, #28]	; (80043dc <FLASH_FlushCaches+0x90>)
 80043be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043c4:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <FLASH_FlushCaches+0x8c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	771a      	strb	r2, [r3, #28]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000014 	.word	0x20000014
 80043dc:	40022000 	.word	0x40022000

080043e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ea:	2300      	movs	r3, #0
 80043ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043ee:	e17f      	b.n	80046f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 8171 	beq.w	80046ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d005      	beq.n	8004420 <HAL_GPIO_Init+0x40>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d130      	bne.n	8004482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004456:	2201      	movs	r2, #1
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4013      	ands	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	f003 0201 	and.w	r2, r3, #1
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b03      	cmp	r3, #3
 800448c:	d118      	bne.n	80044c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004494:	2201      	movs	r2, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	43db      	mvns	r3, r3
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f003 0201 	and.w	r2, r3, #1
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d017      	beq.n	80044fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d123      	bne.n	8004550 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004514:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	220f      	movs	r2, #15
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	08da      	lsrs	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3208      	adds	r2, #8
 800454a:	6939      	ldr	r1, [r7, #16]
 800454c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2203      	movs	r2, #3
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4013      	ands	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0203 	and.w	r2, r3, #3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80ac 	beq.w	80046ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004592:	4b5f      	ldr	r3, [pc, #380]	; (8004710 <HAL_GPIO_Init+0x330>)
 8004594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004596:	4a5e      	ldr	r2, [pc, #376]	; (8004710 <HAL_GPIO_Init+0x330>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6613      	str	r3, [r2, #96]	; 0x60
 800459e:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <HAL_GPIO_Init+0x330>)
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
 80045a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80045aa:	4a5a      	ldr	r2, [pc, #360]	; (8004714 <HAL_GPIO_Init+0x334>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	089b      	lsrs	r3, r3, #2
 80045b0:	3302      	adds	r3, #2
 80045b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	220f      	movs	r2, #15
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045d4:	d025      	beq.n	8004622 <HAL_GPIO_Init+0x242>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a4f      	ldr	r2, [pc, #316]	; (8004718 <HAL_GPIO_Init+0x338>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01f      	beq.n	800461e <HAL_GPIO_Init+0x23e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a4e      	ldr	r2, [pc, #312]	; (800471c <HAL_GPIO_Init+0x33c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d019      	beq.n	800461a <HAL_GPIO_Init+0x23a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a4d      	ldr	r2, [pc, #308]	; (8004720 <HAL_GPIO_Init+0x340>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_GPIO_Init+0x236>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a4c      	ldr	r2, [pc, #304]	; (8004724 <HAL_GPIO_Init+0x344>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00d      	beq.n	8004612 <HAL_GPIO_Init+0x232>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a4b      	ldr	r2, [pc, #300]	; (8004728 <HAL_GPIO_Init+0x348>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d007      	beq.n	800460e <HAL_GPIO_Init+0x22e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4a      	ldr	r2, [pc, #296]	; (800472c <HAL_GPIO_Init+0x34c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_GPIO_Init+0x22a>
 8004606:	2306      	movs	r3, #6
 8004608:	e00c      	b.n	8004624 <HAL_GPIO_Init+0x244>
 800460a:	2307      	movs	r3, #7
 800460c:	e00a      	b.n	8004624 <HAL_GPIO_Init+0x244>
 800460e:	2305      	movs	r3, #5
 8004610:	e008      	b.n	8004624 <HAL_GPIO_Init+0x244>
 8004612:	2304      	movs	r3, #4
 8004614:	e006      	b.n	8004624 <HAL_GPIO_Init+0x244>
 8004616:	2303      	movs	r3, #3
 8004618:	e004      	b.n	8004624 <HAL_GPIO_Init+0x244>
 800461a:	2302      	movs	r3, #2
 800461c:	e002      	b.n	8004624 <HAL_GPIO_Init+0x244>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <HAL_GPIO_Init+0x244>
 8004622:	2300      	movs	r3, #0
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	f002 0203 	and.w	r2, r2, #3
 800462a:	0092      	lsls	r2, r2, #2
 800462c:	4093      	lsls	r3, r2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_GPIO_Init+0x334>)
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	089b      	lsrs	r3, r3, #2
 800463a:	3302      	adds	r3, #2
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004642:	4b3b      	ldr	r3, [pc, #236]	; (8004730 <HAL_GPIO_Init+0x350>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004666:	4a32      	ldr	r2, [pc, #200]	; (8004730 <HAL_GPIO_Init+0x350>)
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800466c:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_GPIO_Init+0x350>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	43db      	mvns	r3, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4013      	ands	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004690:	4a27      	ldr	r2, [pc, #156]	; (8004730 <HAL_GPIO_Init+0x350>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_GPIO_Init+0x350>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43db      	mvns	r3, r3
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_GPIO_Init+0x350>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_GPIO_Init+0x350>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d003      	beq.n	80046e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <HAL_GPIO_Init+0x350>)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f47f ae78 	bne.w	80043f0 <HAL_GPIO_Init+0x10>
  }
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	40010000 	.word	0x40010000
 8004718:	48000400 	.word	0x48000400
 800471c:	48000800 	.word	0x48000800
 8004720:	48000c00 	.word	0x48000c00
 8004724:	48001000 	.word	0x48001000
 8004728:	48001400 	.word	0x48001400
 800472c:	48001800 	.word	0x48001800
 8004730:	40010400 	.word	0x40010400

08004734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	887b      	ldrh	r3, [r7, #2]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e001      	b.n	8004756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004756:	7bfb      	ldrb	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
 8004770:	4613      	mov	r3, r2
 8004772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004774:	787b      	ldrb	r3, [r7, #1]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800477a:	887a      	ldrh	r2, [r7, #2]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004780:	e002      	b.n	8004788 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004782:	887a      	ldrh	r2, [r7, #2]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a6:	887a      	ldrh	r2, [r7, #2]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	041a      	lsls	r2, r3, #16
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43d9      	mvns	r1, r3
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	400b      	ands	r3, r1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	619a      	str	r2, [r3, #24]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d006      	beq.n	80047ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047de:	4a05      	ldr	r2, [pc, #20]	; (80047f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd ffc4 	bl	8002774 <HAL_GPIO_EXTI_Callback>
  }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40010400 	.word	0x40010400

080047f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e081      	b.n	800490e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fe fd46 	bl	80032b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004848:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004858:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d107      	bne.n	8004872 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	e006      	b.n	8004880 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800487e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d104      	bne.n	8004892 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004890:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	461a      	mov	r2, r3
 8004926:	4603      	mov	r3, r0
 8004928:	817b      	strh	r3, [r7, #10]
 800492a:	460b      	mov	r3, r1
 800492c:	813b      	strh	r3, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b20      	cmp	r3, #32
 800493c:	f040 80f9 	bne.w	8004b32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_I2C_Mem_Write+0x34>
 8004946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0ed      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_I2C_Mem_Write+0x4e>
 8004962:	2302      	movs	r3, #2
 8004964:	e0e6      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800496e:	f7fe ffd5 	bl	800391c <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2319      	movs	r3, #25
 800497a:	2201      	movs	r2, #1
 800497c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fac3 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0d1      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2221      	movs	r2, #33	; 0x21
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049b8:	88f8      	ldrh	r0, [r7, #6]
 80049ba:	893a      	ldrh	r2, [r7, #8]
 80049bc:	8979      	ldrh	r1, [r7, #10]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4603      	mov	r3, r0
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f9d3 	bl	8004d74 <I2C_RequestMemoryWrite>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a9      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2bff      	cmp	r3, #255	; 0xff
 80049e8:	d90e      	bls.n	8004a08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	8979      	ldrh	r1, [r7, #10]
 80049f8:	2300      	movs	r3, #0
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fc2b 	bl	800525c <I2C_TransferConfig>
 8004a06:	e00f      	b.n	8004a28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	8979      	ldrh	r1, [r7, #10]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fc1a 	bl	800525c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 faad 	bl	8004f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e07b      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d034      	beq.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d130      	bne.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	2180      	movs	r1, #128	; 0x80
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 fa3f 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e04d      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	2bff      	cmp	r3, #255	; 0xff
 8004aa0:	d90e      	bls.n	8004ac0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	22ff      	movs	r2, #255	; 0xff
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fbcf 	bl	800525c <I2C_TransferConfig>
 8004abe:	e00f      	b.n	8004ae0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fbbe 	bl	800525c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d19e      	bne.n	8004a28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fa8c 	bl	800500c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e01a      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2220      	movs	r2, #32
 8004b04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <HAL_I2C_Mem_Write+0x224>)
 8004b12:	400b      	ands	r3, r1
 8004b14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e000      	b.n	8004b34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	fe00e800 	.word	0xfe00e800

08004b40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	817b      	strh	r3, [r7, #10]
 8004b52:	460b      	mov	r3, r1
 8004b54:	813b      	strh	r3, [r7, #8]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	f040 80fd 	bne.w	8004d62 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_I2C_Mem_Read+0x34>
 8004b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e0f1      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Mem_Read+0x4e>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e0ea      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b96:	f7fe fec1 	bl	800391c <HAL_GetTick>
 8004b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2319      	movs	r3, #25
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f9af 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0d5      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	; 0x22
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2240      	movs	r2, #64	; 0x40
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be0:	88f8      	ldrh	r0, [r7, #6]
 8004be2:	893a      	ldrh	r2, [r7, #8]
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f913 	bl	8004e1c <I2C_RequestMemoryRead>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0ad      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2bff      	cmp	r3, #255	; 0xff
 8004c10:	d90e      	bls.n	8004c30 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	8979      	ldrh	r1, [r7, #10]
 8004c20:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <HAL_I2C_Mem_Read+0x22c>)
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fb17 	bl	800525c <I2C_TransferConfig>
 8004c2e:	e00f      	b.n	8004c50 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_I2C_Mem_Read+0x22c>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fb06 	bl	800525c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	2200      	movs	r2, #0
 8004c58:	2104      	movs	r1, #4
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f956 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e07c      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d034      	beq.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d130      	bne.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2180      	movs	r1, #128	; 0x80
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f927 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e04d      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2bff      	cmp	r3, #255	; 0xff
 8004cd0:	d90e      	bls.n	8004cf0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	22ff      	movs	r2, #255	; 0xff
 8004cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	8979      	ldrh	r1, [r7, #10]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fab7 	bl	800525c <I2C_TransferConfig>
 8004cee:	e00f      	b.n	8004d10 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	8979      	ldrh	r1, [r7, #10]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 faa6 	bl	800525c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d19a      	bne.n	8004c50 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f974 	bl	800500c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01a      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2220      	movs	r2, #32
 8004d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_I2C_Mem_Read+0x230>)
 8004d42:	400b      	ands	r3, r1
 8004d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	80002400 	.word	0x80002400
 8004d70:	fe00e800 	.word	0xfe00e800

08004d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	4b20      	ldr	r3, [pc, #128]	; (8004e18 <I2C_RequestMemoryWrite+0xa4>)
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fa5d 	bl	800525c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8f0 	bl	8004f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02c      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc6:	e015      	b.n	8004df4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f8d6 	bl	8004f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e012      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004dea:	893b      	ldrh	r3, [r7, #8]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f884 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	80002000 	.word	0x80002000

08004e1c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	817b      	strh	r3, [r7, #10]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	813b      	strh	r3, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	8979      	ldrh	r1, [r7, #10]
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <I2C_RequestMemoryRead+0xa4>)
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fa0a 	bl	800525c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f89d 	bl	8004f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e02c      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e62:	893b      	ldrh	r3, [r7, #8]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e6c:	e015      	b.n	8004e9a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e6e:	893b      	ldrh	r3, [r7, #8]
 8004e70:	0a1b      	lsrs	r3, r3, #8
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	69b9      	ldr	r1, [r7, #24]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f883 	bl	8004f8c <I2C_WaitOnTXISFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e012      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2140      	movs	r1, #64	; 0x40
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f831 	bl	8004f0c <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	80002000 	.word	0x80002000

08004ec4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d103      	bne.n	8004ee2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d007      	beq.n	8004f00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	619a      	str	r2, [r3, #24]
  }
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f1c:	e022      	b.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d01e      	beq.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f26:	f7fe fcf9 	bl	800391c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d113      	bne.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e00f      	b.n	8004f84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d0cd      	beq.n	8004f1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f98:	e02c      	b.n	8004ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	68b9      	ldr	r1, [r7, #8]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f870 	bl	8005084 <I2C_IsErrorOccurred>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e02a      	b.n	8005004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d01e      	beq.n	8004ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb6:	f7fe fcb1 	bl	800391c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d302      	bcc.n	8004fcc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d113      	bne.n	8004ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd0:	f043 0220 	orr.w	r2, r3, #32
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e007      	b.n	8005004 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d1cb      	bne.n	8004f9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005018:	e028      	b.n	800506c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f830 	bl	8005084 <I2C_IsErrorOccurred>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e026      	b.n	800507c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fe fc75 	bl	800391c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d113      	bne.n	800506c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e007      	b.n	800507c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b20      	cmp	r3, #32
 8005078:	d1cf      	bne.n	800501a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	; 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d075      	beq.n	800519c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2210      	movs	r2, #16
 80050b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050b8:	e056      	b.n	8005168 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d052      	beq.n	8005168 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050c2:	f7fe fc2b 	bl	800391c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <I2C_IsErrorOccurred+0x54>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d147      	bne.n	8005168 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050fa:	d12e      	bne.n	800515a <I2C_IsErrorOccurred+0xd6>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005102:	d02a      	beq.n	800515a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b20      	cmp	r3, #32
 8005108:	d027      	beq.n	800515a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005118:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800511a:	f7fe fbff 	bl	800391c <HAL_GetTick>
 800511e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005120:	e01b      	b.n	800515a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005122:	f7fe fbfb 	bl	800391c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b19      	cmp	r3, #25
 800512e:	d914      	bls.n	800515a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f003 0320 	and.w	r3, r3, #32
 8005164:	2b20      	cmp	r3, #32
 8005166:	d1dc      	bne.n	8005122 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d003      	beq.n	800517e <I2C_IsErrorOccurred+0xfa>
 8005176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800517a:	2b00      	cmp	r3, #0
 800517c:	d09d      	beq.n	80050ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800517e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2220      	movs	r2, #32
 800518c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f043 0304 	orr.w	r3, r3, #4
 8005194:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f043 0301 	orr.w	r3, r3, #1
 80051b4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	f043 0308 	orr.w	r3, r3, #8
 80051d6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005202:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800520a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01c      	beq.n	800524c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff fe56 	bl	8004ec4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6859      	ldr	r1, [r3, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <I2C_IsErrorOccurred+0x1d4>)
 8005224:	400b      	ands	r3, r1
 8005226:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800524c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005250:	4618      	mov	r0, r3
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	fe00e800 	.word	0xfe00e800

0800525c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	817b      	strh	r3, [r7, #10]
 800526a:	4613      	mov	r3, r2
 800526c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005274:	7a7b      	ldrb	r3, [r7, #9]
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800527c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	4313      	orrs	r3, r2
 8005286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800528a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	0d5b      	lsrs	r3, r3, #21
 8005296:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <I2C_TransferConfig+0x60>)
 800529c:	430b      	orrs	r3, r1
 800529e:	43db      	mvns	r3, r3
 80052a0:	ea02 0103 	and.w	r1, r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	03ff63ff 	.word	0x03ff63ff

080052c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d138      	bne.n	8005348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e032      	b.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d139      	bne.n	80053e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005376:	2302      	movs	r3, #2
 8005378:	e033      	b.n	80053e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	; 0x24
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0201 	bic.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <HAL_PWREx_GetVoltageRange+0x18>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000

0800540c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541a:	d130      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d038      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543a:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2232      	movs	r2, #50	; 0x32
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005450:	e002      	b.n	8005458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d102      	bne.n	800546c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f2      	bne.n	8005452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d110      	bne.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e00f      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d007      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005494:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000
 80054b0:	20000008 	.word	0x20000008
 80054b4:	431bde83 	.word	0x431bde83

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e3ca      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ca:	4b97      	ldr	r3, [pc, #604]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d4:	4b94      	ldr	r3, [pc, #592]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80e4 	beq.w	80056b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <HAL_RCC_OscConfig+0x4a>
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	f040 808b 	bne.w	8005610 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	f040 8087 	bne.w	8005610 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005502:	4b89      	ldr	r3, [pc, #548]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e3a2      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	4b82      	ldr	r3, [pc, #520]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <HAL_RCC_OscConfig+0x7c>
 800552a:	4b7f      	ldr	r3, [pc, #508]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005532:	e005      	b.n	8005540 <HAL_RCC_OscConfig+0x88>
 8005534:	4b7c      	ldr	r3, [pc, #496]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	4293      	cmp	r3, r2
 8005542:	d223      	bcs.n	800558c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fd55 	bl	8005ff8 <RCC_SetFlashLatencyFromMSIRange>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e383      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005558:	4b73      	ldr	r3, [pc, #460]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a72      	ldr	r2, [pc, #456]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800555e:	f043 0308 	orr.w	r3, r3, #8
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	496d      	ldr	r1, [pc, #436]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005576:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	4968      	ldr	r1, [pc, #416]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005586:	4313      	orrs	r3, r2
 8005588:	604b      	str	r3, [r1, #4]
 800558a:	e025      	b.n	80055d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558c:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005592:	f043 0308 	orr.w	r3, r3, #8
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	4960      	ldr	r1, [pc, #384]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055aa:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	495b      	ldr	r1, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fd15 	bl	8005ff8 <RCC_SetFlashLatencyFromMSIRange>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e343      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d8:	f000 fc4a 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b52      	ldr	r3, [pc, #328]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	091b      	lsrs	r3, r3, #4
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	4950      	ldr	r1, [pc, #320]	; (800572c <HAL_RCC_OscConfig+0x274>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	fa22 f303 	lsr.w	r3, r2, r3
 80055f4:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <HAL_RCC_OscConfig+0x278>)
 80055f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055f8:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <HAL_RCC_OscConfig+0x27c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe f93d 	bl	800387c <HAL_InitTick>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d052      	beq.n	80056b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	e327      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d032      	beq.n	800567e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005618:	4b43      	ldr	r3, [pc, #268]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a42      	ldr	r2, [pc, #264]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800561e:	f043 0301 	orr.w	r3, r3, #1
 8005622:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005624:	f7fe f97a 	bl	800391c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800562c:	f7fe f976 	bl	800391c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e310      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563e:	4b3a      	ldr	r3, [pc, #232]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a36      	ldr	r2, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4931      	ldr	r1, [pc, #196]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005664:	4313      	orrs	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005668:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	492c      	ldr	r1, [pc, #176]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
 800567c:	e01a      	b.n	80056b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a29      	ldr	r2, [pc, #164]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005684:	f023 0301 	bic.w	r3, r3, #1
 8005688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800568a:	f7fe f947 	bl	800391c <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005692:	f7fe f943 	bl	800391c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e2dd      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056a4:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCC_OscConfig+0x1da>
 80056b0:	e000      	b.n	80056b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d074      	beq.n	80057aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b08      	cmp	r3, #8
 80056c4:	d005      	beq.n	80056d2 <HAL_RCC_OscConfig+0x21a>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d10e      	bne.n	80056ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d10b      	bne.n	80056ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d064      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d160      	bne.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e2ba      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f2:	d106      	bne.n	8005702 <HAL_RCC_OscConfig+0x24a>
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e026      	b.n	8005750 <HAL_RCC_OscConfig+0x298>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570a:	d115      	bne.n	8005738 <HAL_RCC_OscConfig+0x280>
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a05      	ldr	r2, [pc, #20]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a02      	ldr	r2, [pc, #8]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800571e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e014      	b.n	8005750 <HAL_RCC_OscConfig+0x298>
 8005726:	bf00      	nop
 8005728:	40021000 	.word	0x40021000
 800572c:	080144ec 	.word	0x080144ec
 8005730:	20000008 	.word	0x20000008
 8005734:	2000000c 	.word	0x2000000c
 8005738:	4ba0      	ldr	r3, [pc, #640]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a9f      	ldr	r2, [pc, #636]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4b9d      	ldr	r3, [pc, #628]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a9c      	ldr	r2, [pc, #624]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fe f8e0 	bl	800391c <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fe f8dc 	bl	800391c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e276      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005772:	4b92      	ldr	r3, [pc, #584]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x2a8>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fe f8cc 	bl	800391c <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fe f8c8 	bl	800391c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e262      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579a:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x2d0>
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d060      	beq.n	8005878 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_OscConfig+0x310>
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d119      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d116      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x328>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e23f      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e0:	4b76      	ldr	r3, [pc, #472]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	4973      	ldr	r1, [pc, #460]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f4:	e040      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d023      	beq.n	8005846 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fe:	4b6f      	ldr	r3, [pc, #444]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6e      	ldr	r2, [pc, #440]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fe f887 	bl	800391c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005812:	f7fe f883 	bl	800391c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e21d      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005830:	4b62      	ldr	r3, [pc, #392]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	495f      	ldr	r1, [pc, #380]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	e018      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a5c      	ldr	r2, [pc, #368]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fe f863 	bl	800391c <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fe f85f 	bl	800391c <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e1f9      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03c      	beq.n	80058fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01c      	beq.n	80058c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800588e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005892:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fe f83e 	bl	800391c <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a4:	f7fe f83a 	bl	800391c <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1d4      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HAL_RCC_OscConfig+0x3ec>
 80058c4:	e01b      	b.n	80058fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058cc:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d6:	f7fe f821 	bl	800391c <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058de:	f7fe f81d 	bl	800391c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e1b7      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058f0:	4b32      	ldr	r3, [pc, #200]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a6 	beq.w	8005a58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	6593      	str	r3, [r2, #88]	; 0x58
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d118      	bne.n	8005976 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005950:	f7fd ffe4 	bl	800391c <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fd ffe0 	bl	800391c <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e17a      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_RCC_OscConfig+0x4d8>
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598e:	e029      	b.n	80059e4 <HAL_RCC_OscConfig+0x52c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b05      	cmp	r3, #5
 8005996:	d115      	bne.n	80059c4 <HAL_RCC_OscConfig+0x50c>
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059a0:	f043 0304 	orr.w	r3, r3, #4
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	4a03      	ldr	r2, [pc, #12]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b8:	e014      	b.n	80059e4 <HAL_RCC_OscConfig+0x52c>
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40007000 	.word	0x40007000
 80059c4:	4b9c      	ldr	r3, [pc, #624]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	4a9b      	ldr	r2, [pc, #620]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d4:	4b98      	ldr	r3, [pc, #608]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a97      	ldr	r2, [pc, #604]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d016      	beq.n	8005a1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fd ff96 	bl	800391c <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fd ff92 	bl	800391c <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e12a      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	4b8b      	ldr	r3, [pc, #556]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ed      	beq.n	80059f4 <HAL_RCC_OscConfig+0x53c>
 8005a18:	e015      	b.n	8005a46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fd ff7f 	bl	800391c <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a20:	e00a      	b.n	8005a38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fd ff7b 	bl	800391c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e113      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a38:	4b7f      	ldr	r3, [pc, #508]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ed      	bne.n	8005a22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d105      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4c:	4b7a      	ldr	r3, [pc, #488]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	4a79      	ldr	r2, [pc, #484]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80fe 	beq.w	8005c5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	f040 80d0 	bne.w	8005c0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a6c:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 0203 	and.w	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d130      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d127      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d11f      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aac:	2a07      	cmp	r2, #7
 8005aae:	bf14      	ite	ne
 8005ab0:	2201      	movne	r2, #1
 8005ab2:	2200      	moveq	r2, #0
 8005ab4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d113      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d109      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	3b01      	subs	r3, #1
 8005adc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d06e      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d069      	beq.n	8005bbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ae8:	4b53      	ldr	r3, [pc, #332]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005af4:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0ad      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b04:	4b4c      	ldr	r3, [pc, #304]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4b      	ldr	r2, [pc, #300]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b10:	f7fd ff04 	bl	800391c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fd ff00 	bl	800391c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e09a      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2a:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b36:	4b40      	ldr	r3, [pc, #256]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b40      	ldr	r3, [pc, #256]	; (8005c3c <HAL_RCC_OscConfig+0x784>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b46:	3a01      	subs	r2, #1
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	4311      	orrs	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b50:	0212      	lsls	r2, r2, #8
 8005b52:	4311      	orrs	r1, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b58:	0852      	lsrs	r2, r2, #1
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0552      	lsls	r2, r2, #21
 8005b5e:	4311      	orrs	r1, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b64:	0852      	lsrs	r2, r2, #1
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0652      	lsls	r2, r2, #25
 8005b6a:	4311      	orrs	r1, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b70:	0912      	lsrs	r2, r2, #4
 8005b72:	0452      	lsls	r2, r2, #17
 8005b74:	430a      	orrs	r2, r1
 8005b76:	4930      	ldr	r1, [pc, #192]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b88:	4b2b      	ldr	r3, [pc, #172]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	4a2a      	ldr	r2, [pc, #168]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b94:	f7fd fec2 	bl	800391c <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd febe 	bl	800391c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e058      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bae:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bba:	e050      	b.n	8005c5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e04f      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d148      	bne.n	8005c5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005be4:	f7fd fe9a 	bl	800391c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fd fe96 	bl	800391c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e030      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x734>
 8005c0a:	e028      	b.n	8005c5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	d023      	beq.n	8005c5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <HAL_RCC_OscConfig+0x780>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd fe7d 	bl	800391c <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c24:	e00c      	b.n	8005c40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fd fe79 	bl	800391c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d905      	bls.n	8005c40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e013      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_OscConfig+0x7b0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ec      	bne.n	8005c26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCC_OscConfig+0x7b0>)
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	4905      	ldr	r1, [pc, #20]	; (8005c68 <HAL_RCC_OscConfig+0x7b0>)
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <HAL_RCC_OscConfig+0x7b4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60cb      	str	r3, [r1, #12]
 8005c58:	e001      	b.n	8005c5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3720      	adds	r7, #32
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	feeefffc 	.word	0xfeeefffc

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0e7      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b75      	ldr	r3, [pc, #468]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d910      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b72      	ldr	r3, [pc, #456]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f023 0207 	bic.w	r2, r3, #7
 8005c9a:	4970      	ldr	r1, [pc, #448]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	4b6e      	ldr	r3, [pc, #440]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d001      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cf      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d010      	beq.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	4b66      	ldr	r3, [pc, #408]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d908      	bls.n	8005ce2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd0:	4b63      	ldr	r3, [pc, #396]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4960      	ldr	r1, [pc, #384]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d04c      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d107      	bne.n	8005d06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf6:	4b5a      	ldr	r3, [pc, #360]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d121      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e0a6      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0e:	4b54      	ldr	r3, [pc, #336]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e09a      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d26:	4b4e      	ldr	r3, [pc, #312]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e08e      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d36:	4b4a      	ldr	r3, [pc, #296]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e086      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4943      	ldr	r1, [pc, #268]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d58:	f7fd fde0 	bl	800391c <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fd fddc 	bl	800391c <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e06e      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b3a      	ldr	r3, [pc, #232]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d010      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d208      	bcs.n	8005db6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	492b      	ldr	r1, [pc, #172]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db6:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d210      	bcs.n	8005de6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc4:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 0207 	bic.w	r2, r3, #7
 8005dcc:	4923      	ldr	r1, [pc, #140]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd4:	4b21      	ldr	r3, [pc, #132]	; (8005e5c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e036      	b.n	8005e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	4918      	ldr	r1, [pc, #96]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4910      	ldr	r1, [pc, #64]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e24:	f000 f824 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <HAL_RCC_ClockConfig+0x1f0>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	490b      	ldr	r1, [pc, #44]	; (8005e64 <HAL_RCC_ClockConfig+0x1f4>)
 8005e36:	5ccb      	ldrb	r3, [r1, r3]
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	4a09      	ldr	r2, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1f8>)
 8005e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCC_ClockConfig+0x1fc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fd fd17 	bl	800387c <HAL_InitTick>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e52:	7afb      	ldrb	r3, [r7, #11]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40022000 	.word	0x40022000
 8005e60:	40021000 	.word	0x40021000
 8005e64:	080144ec 	.word	0x080144ec
 8005e68:	20000008 	.word	0x20000008
 8005e6c:	2000000c 	.word	0x2000000c

08005e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b089      	sub	sp, #36	; 0x24
 8005e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e88:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d121      	bne.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d11e      	bne.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ea4:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005eb0:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 030f 	and.w	r3, r3, #15
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e005      	b.n	8005ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d102      	bne.n	8005eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	e004      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d134      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d003      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0xac>
 8005f14:	e005      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f18:	617b      	str	r3, [r7, #20]
      break;
 8005f1a:	e005      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f1e:	617b      	str	r3, [r7, #20]
      break;
 8005f20:	e002      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	617b      	str	r3, [r7, #20]
      break;
 8005f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	3301      	adds	r3, #1
 8005f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f36:	4b10      	ldr	r3, [pc, #64]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	fb03 f202 	mul.w	r2, r3, r2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	0e5b      	lsrs	r3, r3, #25
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	3301      	adds	r3, #1
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f68:	69bb      	ldr	r3, [r7, #24]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3724      	adds	r7, #36	; 0x24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	08014504 	.word	0x08014504
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	007a1200 	.word	0x007a1200

08005f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000008 	.word	0x20000008

08005fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fa4:	f7ff fff0 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0a1b      	lsrs	r3, r3, #8
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40021000 	.word	0x40021000
 8005fc8:	080144fc 	.word	0x080144fc

08005fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fd0:	f7ff ffda 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0adb      	lsrs	r3, r3, #11
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	080144fc 	.word	0x080144fc

08005ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006004:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006010:	f7ff f9ee 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 8006014:	6178      	str	r0, [r7, #20]
 8006016:	e014      	b.n	8006042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	4a24      	ldr	r2, [pc, #144]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006022:	6593      	str	r3, [r2, #88]	; 0x58
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006030:	f7ff f9de 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 8006034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006036:	4b1e      	ldr	r3, [pc, #120]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	4a1d      	ldr	r2, [pc, #116]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006048:	d10b      	bne.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d919      	bls.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2ba0      	cmp	r3, #160	; 0xa0
 8006054:	d902      	bls.n	800605c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006056:	2302      	movs	r3, #2
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	e013      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800605c:	2301      	movs	r3, #1
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	e010      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b80      	cmp	r3, #128	; 0x80
 8006066:	d902      	bls.n	800606e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006068:	2303      	movs	r3, #3
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	e00a      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b80      	cmp	r3, #128	; 0x80
 8006072:	d102      	bne.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006074:	2302      	movs	r3, #2
 8006076:	613b      	str	r3, [r7, #16]
 8006078:	e004      	b.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b70      	cmp	r3, #112	; 0x70
 800607e:	d101      	bne.n	8006084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006080:	2301      	movs	r3, #1
 8006082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006084:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f023 0207 	bic.w	r2, r3, #7
 800608c:	4909      	ldr	r1, [pc, #36]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d001      	beq.n	80060a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40022000 	.word	0x40022000

080060b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c4:	2300      	movs	r3, #0
 80060c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d041      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060dc:	d02a      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060e2:	d824      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e8:	d008      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ee:	d81e      	bhi.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00a      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f8:	d010      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060fa:	e018      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060fc:	4b86      	ldr	r3, [pc, #536]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a85      	ldr	r2, [pc, #532]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006106:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006108:	e015      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2100      	movs	r1, #0
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fabb 	bl	800668c <RCCEx_PLLSAI1_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800611a:	e00c      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3320      	adds	r3, #32
 8006120:	2100      	movs	r1, #0
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fba6 	bl	8006874 <RCCEx_PLLSAI2_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	74fb      	strb	r3, [r7, #19]
      break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006136:	7cfb      	ldrb	r3, [r7, #19]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800613c:	4b76      	ldr	r3, [pc, #472]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800614a:	4973      	ldr	r1, [pc, #460]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006152:	e001      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7cfb      	ldrb	r3, [r7, #19]
 8006156:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d041      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800616c:	d02a      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800616e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006172:	d824      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006178:	d008      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800617e:	d81e      	bhi.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00a      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006188:	d010      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800618a:	e018      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800618c:	4b62      	ldr	r3, [pc, #392]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	4a61      	ldr	r2, [pc, #388]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006198:	e015      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3304      	adds	r3, #4
 800619e:	2100      	movs	r1, #0
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fa73 	bl	800668c <RCCEx_PLLSAI1_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061aa:	e00c      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3320      	adds	r3, #32
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fb5e 	bl	8006874 <RCCEx_PLLSAI2_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061bc:	e003      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	74fb      	strb	r3, [r7, #19]
      break;
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061cc:	4b52      	ldr	r3, [pc, #328]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061da:	494f      	ldr	r1, [pc, #316]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061e2:	e001      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	7cfb      	ldrb	r3, [r7, #19]
 80061e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a0 	beq.w	8006336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800620a:	2300      	movs	r3, #0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00d      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006210:	4b41      	ldr	r3, [pc, #260]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	4a40      	ldr	r2, [pc, #256]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621a:	6593      	str	r3, [r2, #88]	; 0x58
 800621c:	4b3e      	ldr	r3, [pc, #248]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006228:	2301      	movs	r3, #1
 800622a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800622c:	4b3b      	ldr	r3, [pc, #236]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3a      	ldr	r2, [pc, #232]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006236:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006238:	f7fd fb70 	bl	800391c <HAL_GetTick>
 800623c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800623e:	e009      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006240:	f7fd fb6c 	bl	800391c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d902      	bls.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	74fb      	strb	r3, [r7, #19]
        break;
 8006252:	e005      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006254:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ef      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d15c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006266:	4b2c      	ldr	r3, [pc, #176]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006270:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01f      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	429a      	cmp	r2, r3
 8006282:	d019      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006284:	4b24      	ldr	r3, [pc, #144]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062a0:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062b0:	4a19      	ldr	r2, [pc, #100]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c2:	f7fd fb2b 	bl	800391c <HAL_GetTick>
 80062c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c8:	e00b      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ca:	f7fd fb27 	bl	800391c <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d8:	4293      	cmp	r3, r2
 80062da:	d902      	bls.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	74fb      	strb	r3, [r7, #19]
            break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ec      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10c      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006306:	4904      	ldr	r1, [pc, #16]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006308:	4313      	orrs	r3, r2
 800630a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	74bb      	strb	r3, [r7, #18]
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006316:	bf00      	nop
 8006318:	40021000 	.word	0x40021000
 800631c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006324:	7c7b      	ldrb	r3, [r7, #17]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d105      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800632a:	4b9e      	ldr	r3, [pc, #632]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	4a9d      	ldr	r2, [pc, #628]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006342:	4b98      	ldr	r3, [pc, #608]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f023 0203 	bic.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006350:	4994      	ldr	r1, [pc, #592]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006364:	4b8f      	ldr	r3, [pc, #572]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	f023 020c 	bic.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	498c      	ldr	r1, [pc, #560]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006386:	4b87      	ldr	r3, [pc, #540]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	4983      	ldr	r1, [pc, #524]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063a8:	4b7e      	ldr	r3, [pc, #504]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	497b      	ldr	r1, [pc, #492]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0310 	and.w	r3, r3, #16
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063ca:	4b76      	ldr	r3, [pc, #472]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	4972      	ldr	r1, [pc, #456]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063ec:	4b6d      	ldr	r3, [pc, #436]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fa:	496a      	ldr	r1, [pc, #424]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800640e:	4b65      	ldr	r3, [pc, #404]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641c:	4961      	ldr	r1, [pc, #388]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006430:	4b5c      	ldr	r3, [pc, #368]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	4959      	ldr	r1, [pc, #356]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006452:	4b54      	ldr	r3, [pc, #336]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006460:	4950      	ldr	r1, [pc, #320]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006474:	4b4b      	ldr	r3, [pc, #300]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	4948      	ldr	r1, [pc, #288]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a4:	493f      	ldr	r1, [pc, #252]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d028      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064b8:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c6:	4937      	ldr	r1, [pc, #220]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d6:	d106      	bne.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d8:	4b32      	ldr	r3, [pc, #200]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e2:	60d3      	str	r3, [r2, #12]
 80064e4:	e011      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ee:	d10c      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f8c8 	bl	800668c <RCCEx_PLLSAI1_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006500:	7cfb      	ldrb	r3, [r7, #19]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006506:	7cfb      	ldrb	r3, [r7, #19]
 8006508:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d028      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	491f      	ldr	r1, [pc, #124]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006534:	d106      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800653c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006540:	60d3      	str	r3, [r2, #12]
 8006542:	e011      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800654c:	d10c      	bne.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	2101      	movs	r1, #1
 8006554:	4618      	mov	r0, r3
 8006556:	f000 f899 	bl	800668c <RCCEx_PLLSAI1_Config>
 800655a:	4603      	mov	r3, r0
 800655c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d02b      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006574:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006582:	4908      	ldr	r1, [pc, #32]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006594:	4b03      	ldr	r3, [pc, #12]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a02      	ldr	r2, [pc, #8]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659e:	60d3      	str	r3, [r2, #12]
 80065a0:	e014      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b0:	d10c      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3304      	adds	r3, #4
 80065b6:	2101      	movs	r1, #1
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f867 	bl	800668c <RCCEx_PLLSAI1_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065c2:	7cfb      	ldrb	r3, [r7, #19]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02f      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e6:	4928      	ldr	r1, [pc, #160]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f6:	d10d      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f844 	bl	800668c <RCCEx_PLLSAI1_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006608:	7cfb      	ldrb	r3, [r7, #19]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d014      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800660e:	7cfb      	ldrb	r3, [r7, #19]
 8006610:	74bb      	strb	r3, [r7, #18]
 8006612:	e011      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661c:	d10c      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3320      	adds	r3, #32
 8006622:	2102      	movs	r1, #2
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f925 	bl	8006874 <RCCEx_PLLSAI2_Config>
 800662a:	4603      	mov	r3, r0
 800662c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800662e:	7cfb      	ldrb	r3, [r7, #19]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006652:	490d      	ldr	r1, [pc, #52]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006676:	4904      	ldr	r1, [pc, #16]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800667e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	40021000 	.word	0x40021000

0800668c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800669a:	4b75      	ldr	r3, [pc, #468]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d018      	beq.n	80066d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066a6:	4b72      	ldr	r3, [pc, #456]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0203 	and.w	r2, r3, #3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d10d      	bne.n	80066d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
       ||
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d009      	beq.n	80066d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066be:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
       ||
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d047      	beq.n	8006762 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e044      	b.n	8006762 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d018      	beq.n	8006712 <RCCEx_PLLSAI1_Config+0x86>
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d825      	bhi.n	8006730 <RCCEx_PLLSAI1_Config+0xa4>
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d002      	beq.n	80066ee <RCCEx_PLLSAI1_Config+0x62>
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d009      	beq.n	8006700 <RCCEx_PLLSAI1_Config+0x74>
 80066ec:	e020      	b.n	8006730 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066ee:	4b60      	ldr	r3, [pc, #384]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11d      	bne.n	8006736 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066fe:	e01a      	b.n	8006736 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006700:	4b5b      	ldr	r3, [pc, #364]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d116      	bne.n	800673a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006710:	e013      	b.n	800673a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006712:	4b57      	ldr	r3, [pc, #348]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10f      	bne.n	800673e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800671e:	4b54      	ldr	r3, [pc, #336]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800672e:	e006      	b.n	800673e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	e004      	b.n	8006740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006736:	bf00      	nop
 8006738:	e002      	b.n	8006740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800673a:	bf00      	nop
 800673c:	e000      	b.n	8006740 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800673e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006746:	4b4a      	ldr	r3, [pc, #296]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	3b01      	subs	r3, #1
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	430b      	orrs	r3, r1
 800675c:	4944      	ldr	r1, [pc, #272]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800675e:	4313      	orrs	r3, r2
 8006760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d17d      	bne.n	8006864 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006768:	4b41      	ldr	r3, [pc, #260]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a40      	ldr	r2, [pc, #256]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006774:	f7fd f8d2 	bl	800391c <HAL_GetTick>
 8006778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800677a:	e009      	b.n	8006790 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800677c:	f7fd f8ce 	bl	800391c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d902      	bls.n	8006790 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	73fb      	strb	r3, [r7, #15]
        break;
 800678e:	e005      	b.n	800679c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006790:	4b37      	ldr	r3, [pc, #220]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ef      	bne.n	800677c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d160      	bne.n	8006864 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d111      	bne.n	80067cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067a8:	4b31      	ldr	r3, [pc, #196]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	6892      	ldr	r2, [r2, #8]
 80067b8:	0211      	lsls	r1, r2, #8
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68d2      	ldr	r2, [r2, #12]
 80067be:	0912      	lsrs	r2, r2, #4
 80067c0:	0452      	lsls	r2, r2, #17
 80067c2:	430a      	orrs	r2, r1
 80067c4:	492a      	ldr	r1, [pc, #168]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	610b      	str	r3, [r1, #16]
 80067ca:	e027      	b.n	800681c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d112      	bne.n	80067f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067d2:	4b27      	ldr	r3, [pc, #156]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	6892      	ldr	r2, [r2, #8]
 80067e2:	0211      	lsls	r1, r2, #8
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6912      	ldr	r2, [r2, #16]
 80067e8:	0852      	lsrs	r2, r2, #1
 80067ea:	3a01      	subs	r2, #1
 80067ec:	0552      	lsls	r2, r2, #21
 80067ee:	430a      	orrs	r2, r1
 80067f0:	491f      	ldr	r1, [pc, #124]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	610b      	str	r3, [r1, #16]
 80067f6:	e011      	b.n	800681c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006800:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6892      	ldr	r2, [r2, #8]
 8006808:	0211      	lsls	r1, r2, #8
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	6952      	ldr	r2, [r2, #20]
 800680e:	0852      	lsrs	r2, r2, #1
 8006810:	3a01      	subs	r2, #1
 8006812:	0652      	lsls	r2, r2, #25
 8006814:	430a      	orrs	r2, r1
 8006816:	4916      	ldr	r1, [pc, #88]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006818:	4313      	orrs	r3, r2
 800681a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800681c:	4b14      	ldr	r3, [pc, #80]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006822:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006826:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006828:	f7fd f878 	bl	800391c <HAL_GetTick>
 800682c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800682e:	e009      	b.n	8006844 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006830:	f7fd f874 	bl	800391c <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d902      	bls.n	8006844 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
          break;
 8006842:	e005      	b.n	8006850 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0ef      	beq.n	8006830 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4904      	ldr	r1, [pc, #16]	; (8006870 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006860:	4313      	orrs	r3, r2
 8006862:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000

08006874 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006882:	4b6a      	ldr	r3, [pc, #424]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800688e:	4b67      	ldr	r3, [pc, #412]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f003 0203 	and.w	r2, r3, #3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d10d      	bne.n	80068ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
       ||
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068a6:	4b61      	ldr	r3, [pc, #388]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
       ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d047      	beq.n	800694a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	e044      	b.n	800694a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d018      	beq.n	80068fa <RCCEx_PLLSAI2_Config+0x86>
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d825      	bhi.n	8006918 <RCCEx_PLLSAI2_Config+0xa4>
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d002      	beq.n	80068d6 <RCCEx_PLLSAI2_Config+0x62>
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d009      	beq.n	80068e8 <RCCEx_PLLSAI2_Config+0x74>
 80068d4:	e020      	b.n	8006918 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068d6:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11d      	bne.n	800691e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e6:	e01a      	b.n	800691e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068e8:	4b50      	ldr	r3, [pc, #320]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d116      	bne.n	8006922 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f8:	e013      	b.n	8006922 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068fa:	4b4c      	ldr	r3, [pc, #304]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006906:	4b49      	ldr	r3, [pc, #292]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006916:	e006      	b.n	8006926 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
      break;
 800691c:	e004      	b.n	8006928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800691e:	bf00      	nop
 8006920:	e002      	b.n	8006928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006926:	bf00      	nop
    }

    if(status == HAL_OK)
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10d      	bne.n	800694a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800692e:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6819      	ldr	r1, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	3b01      	subs	r3, #1
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	430b      	orrs	r3, r1
 8006944:	4939      	ldr	r1, [pc, #228]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006946:	4313      	orrs	r3, r2
 8006948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d167      	bne.n	8006a20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006950:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a35      	ldr	r2, [pc, #212]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fc ffde 	bl	800391c <HAL_GetTick>
 8006960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006962:	e009      	b.n	8006978 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006964:	f7fc ffda 	bl	800391c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d902      	bls.n	8006978 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	73fb      	strb	r3, [r7, #15]
        break;
 8006976:	e005      	b.n	8006984 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006978:	4b2c      	ldr	r3, [pc, #176]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1ef      	bne.n	8006964 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d14a      	bne.n	8006a20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d111      	bne.n	80069b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006990:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6892      	ldr	r2, [r2, #8]
 80069a0:	0211      	lsls	r1, r2, #8
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68d2      	ldr	r2, [r2, #12]
 80069a6:	0912      	lsrs	r2, r2, #4
 80069a8:	0452      	lsls	r2, r2, #17
 80069aa:	430a      	orrs	r2, r1
 80069ac:	491f      	ldr	r1, [pc, #124]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	614b      	str	r3, [r1, #20]
 80069b2:	e011      	b.n	80069d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069b4:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6892      	ldr	r2, [r2, #8]
 80069c4:	0211      	lsls	r1, r2, #8
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6912      	ldr	r2, [r2, #16]
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	430a      	orrs	r2, r1
 80069d2:	4916      	ldr	r1, [pc, #88]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069d8:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fc ff9a 	bl	800391c <HAL_GetTick>
 80069e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069ea:	e009      	b.n	8006a00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069ec:	f7fc ff96 	bl	800391c <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d902      	bls.n	8006a00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	73fb      	strb	r3, [r7, #15]
          break;
 80069fe:	e005      	b.n	8006a0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ef      	beq.n	80069ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a14:	695a      	ldr	r2, [r3, #20]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	4904      	ldr	r1, [pc, #16]	; (8006a2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000

08006a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e095      	b.n	8006b6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d108      	bne.n	8006a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a52:	d009      	beq.n	8006a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	61da      	str	r2, [r3, #28]
 8006a5a:	e005      	b.n	8006a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fc fc72 	bl	800336c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aa8:	d902      	bls.n	8006ab0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e002      	b.n	8006ab6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ab4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006abe:	d007      	beq.n	8006ad0 <HAL_SPI_Init+0xa0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ac8:	d002      	beq.n	8006ad0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b12:	ea42 0103 	orr.w	r1, r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	0c1b      	lsrs	r3, r3, #16
 8006b2c:	f003 0204 	and.w	r2, r3, #4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b4c:	ea42 0103 	orr.w	r1, r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b08a      	sub	sp, #40	; 0x28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b84:	2301      	movs	r3, #1
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_SPI_TransmitReceive+0x26>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e1fb      	b.n	8006f94 <HAL_SPI_TransmitReceive+0x41e>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ba4:	f7fc feba 	bl	800391c <HAL_GetTick>
 8006ba8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bb0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006bb8:	887b      	ldrh	r3, [r7, #2]
 8006bba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006bbc:	887b      	ldrh	r3, [r7, #2]
 8006bbe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bc0:	7efb      	ldrb	r3, [r7, #27]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d00e      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x6e>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bcc:	d106      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x66>
 8006bd6:	7efb      	ldrb	r3, [r7, #27]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d003      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006be2:	e1cd      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0x80>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0x80>
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006bfc:	e1c0      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d003      	beq.n	8006c12 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	887a      	ldrh	r2, [r7, #2]
 8006c22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	887a      	ldrh	r2, [r7, #2]
 8006c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	887a      	ldrh	r2, [r7, #2]
 8006c3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c54:	d802      	bhi.n	8006c5c <HAL_SPI_TransmitReceive+0xe6>
 8006c56:	8a3b      	ldrh	r3, [r7, #16]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d908      	bls.n	8006c6e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c6a:	605a      	str	r2, [r3, #4]
 8006c6c:	e007      	b.n	8006c7e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d007      	beq.n	8006c9c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ca4:	d97c      	bls.n	8006da0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x13e>
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d169      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	881a      	ldrh	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	1c9a      	adds	r2, r3, #2
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd8:	e056      	b.n	8006d88 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d11b      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x1aa>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d016      	beq.n	8006d20 <HAL_SPI_TransmitReceive+0x1aa>
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d113      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	1c9a      	adds	r2, r3, #2
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d11c      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x1f2>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d016      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d44:	b292      	uxth	r2, r2
 8006d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	1c9a      	adds	r2, r3, #2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d64:	2301      	movs	r3, #1
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d68:	f7fc fdd8 	bl	800391c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d807      	bhi.n	8006d88 <HAL_SPI_TransmitReceive+0x212>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d003      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d86:	e0fb      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1a3      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x164>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d19d      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x164>
 8006d9e:	e0df      	b.n	8006f60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_SPI_TransmitReceive+0x23a>
 8006da8:	8a7b      	ldrh	r3, [r7, #18]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	f040 80cb 	bne.w	8006f46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d912      	bls.n	8006de0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	1c9a      	adds	r2, r3, #2
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b02      	subs	r3, #2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dde:	e0b2      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e06:	e09e      	b.n	8006f46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d134      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x30a>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d02f      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x30a>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d12c      	bne.n	8006e80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d912      	bls.n	8006e56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b02      	subs	r3, #2
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e54:	e012      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	330c      	adds	r3, #12
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d148      	bne.n	8006f20 <HAL_SPI_TransmitReceive+0x3aa>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d042      	beq.n	8006f20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d923      	bls.n	8006eee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	1c9a      	adds	r2, r3, #2
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b02      	subs	r3, #2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d81f      	bhi.n	8006f1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	e016      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f103 020c 	add.w	r2, r3, #12
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f20:	f7fc fcfc 	bl	800391c <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d803      	bhi.n	8006f38 <HAL_SPI_TransmitReceive+0x3c2>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0x3c8>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f44:	e01c      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f47f af5b 	bne.w	8006e08 <HAL_SPI_TransmitReceive+0x292>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f47f af54 	bne.w	8006e08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f937 	bl	80071d8 <SPI_EndRxTxTransaction>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d006      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	661a      	str	r2, [r3, #96]	; 0x60
 8006f7c:	e000      	b.n	8006f80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3728      	adds	r7, #40	; 0x28
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fac:	f7fc fcb6 	bl	800391c <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	4413      	add	r3, r2
 8006fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fbc:	f7fc fcae 	bl	800391c <HAL_GetTick>
 8006fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	015b      	lsls	r3, r3, #5
 8006fc8:	0d1b      	lsrs	r3, r3, #20
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd2:	e054      	b.n	800707e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fda:	d050      	beq.n	800707e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fdc:	f7fc fc9e 	bl	800391c <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d902      	bls.n	8006ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d13d      	bne.n	800706e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700a:	d111      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007014:	d004      	beq.n	8007020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800701e:	d107      	bne.n	8007030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007038:	d10f      	bne.n	800705a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e017      	b.n	800709e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	3b01      	subs	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d19b      	bne.n	8006fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3720      	adds	r7, #32
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000008 	.word	0x20000008

080070ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	; 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80070be:	f7fc fc2d 	bl	800391c <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	4413      	add	r3, r2
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80070ce:	f7fc fc25 	bl	800391c <HAL_GetTick>
 80070d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	330c      	adds	r3, #12
 80070da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070dc:	4b3d      	ldr	r3, [pc, #244]	; (80071d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	4613      	mov	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	00da      	lsls	r2, r3, #3
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	0d1b      	lsrs	r3, r3, #20
 80070ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070f4:	e060      	b.n	80071b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070fc:	d107      	bne.n	800710e <SPI_WaitFifoStateUntilTimeout+0x62>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800710c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d050      	beq.n	80071b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007116:	f7fc fc01 	bl	800391c <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007122:	429a      	cmp	r2, r3
 8007124:	d902      	bls.n	800712c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d13d      	bne.n	80071a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800713a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007144:	d111      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714e:	d004      	beq.n	800715a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007158:	d107      	bne.n	800716a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007168:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007172:	d10f      	bne.n	8007194 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007192:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e010      	b.n	80071ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	4013      	ands	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d196      	bne.n	80070f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3728      	adds	r7, #40	; 0x28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000008 	.word	0x20000008

080071d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff ff5b 	bl	80070ac <SPI_WaitFifoStateUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d007      	beq.n	800720c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	f043 0220 	orr.w	r2, r3, #32
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e027      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	2180      	movs	r1, #128	; 0x80
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff fec0 	bl	8006f9c <SPI_WaitFlagStateUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e014      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f7ff ff34 	bl	80070ac <SPI_WaitFifoStateUntilTimeout>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d007      	beq.n	800725a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800724e:	f043 0220 	orr.w	r2, r3, #32
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e000      	b.n	800725c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e049      	b.n	800730a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fc f8d0 	bl	8003430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3304      	adds	r3, #4
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f000 fe5a 	bl	8007f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
	...

08007314 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	d001      	beq.n	800732c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e047      	b.n	80073bc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a23      	ldr	r2, [pc, #140]	; (80073c8 <HAL_TIM_Base_Start+0xb4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01d      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007346:	d018      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1f      	ldr	r2, [pc, #124]	; (80073cc <HAL_TIM_Base_Start+0xb8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a1e      	ldr	r2, [pc, #120]	; (80073d0 <HAL_TIM_Base_Start+0xbc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00e      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1c      	ldr	r2, [pc, #112]	; (80073d4 <HAL_TIM_Base_Start+0xc0>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d009      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1b      	ldr	r2, [pc, #108]	; (80073d8 <HAL_TIM_Base_Start+0xc4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d004      	beq.n	800737a <HAL_TIM_Base_Start+0x66>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <HAL_TIM_Base_Start+0xc8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d115      	bne.n	80073a6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <HAL_TIM_Base_Start+0xcc>)
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b06      	cmp	r3, #6
 800738a:	d015      	beq.n	80073b8 <HAL_TIM_Base_Start+0xa4>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007392:	d011      	beq.n	80073b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a4:	e008      	b.n	80073b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f042 0201 	orr.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e000      	b.n	80073ba <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	40012c00 	.word	0x40012c00
 80073cc:	40000400 	.word	0x40000400
 80073d0:	40000800 	.word	0x40000800
 80073d4:	40000c00 	.word	0x40000c00
 80073d8:	40013400 	.word	0x40013400
 80073dc:	40014000 	.word	0x40014000
 80073e0:	00010007 	.word	0x00010007

080073e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <HAL_TIM_Base_Stop+0x38>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	f240 4344 	movw	r3, #1092	; 0x444
 8007406:	4013      	ands	r3, r2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d107      	bne.n	800741c <HAL_TIM_Base_Stop+0x38>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d001      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e04f      	b.n	80074ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a23      	ldr	r2, [pc, #140]	; (80074f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d01d      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d018      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <HAL_TIM_Base_Start_IT+0xc8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <HAL_TIM_Base_Start_IT+0xcc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00e      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <HAL_TIM_Base_Start_IT+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d009      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1b      	ldr	r2, [pc, #108]	; (8007508 <HAL_TIM_Base_Start_IT+0xd4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d004      	beq.n	80074aa <HAL_TIM_Base_Start_IT+0x76>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a19      	ldr	r2, [pc, #100]	; (800750c <HAL_TIM_Base_Start_IT+0xd8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d115      	bne.n	80074d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	4b17      	ldr	r3, [pc, #92]	; (8007510 <HAL_TIM_Base_Start_IT+0xdc>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d015      	beq.n	80074e8 <HAL_TIM_Base_Start_IT+0xb4>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c2:	d011      	beq.n	80074e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d4:	e008      	b.n	80074e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	e000      	b.n	80074ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40013400 	.word	0x40013400
 800750c:	40014000 	.word	0x40014000
 8007510:	00010007 	.word	0x00010007

08007514 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0201 	bic.w	r2, r2, #1
 800752a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a1a      	ldr	r2, [r3, #32]
 8007532:	f241 1311 	movw	r3, #4369	; 0x1111
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10f      	bne.n	800755c <HAL_TIM_Base_Stop_IT+0x48>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a1a      	ldr	r2, [r3, #32]
 8007542:	f240 4344 	movw	r3, #1092	; 0x444
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d107      	bne.n	800755c <HAL_TIM_Base_Stop_IT+0x48>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e049      	b.n	8007618 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fb ff29 	bl	80033f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f000 fcd3 	bl	8007f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <HAL_TIM_PWM_Start_IT+0x28>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	bf14      	ite	ne
 8007640:	2301      	movne	r3, #1
 8007642:	2300      	moveq	r3, #0
 8007644:	b2db      	uxtb	r3, r3
 8007646:	e03c      	b.n	80076c2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d109      	bne.n	8007662 <HAL_TIM_PWM_Start_IT+0x42>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b01      	cmp	r3, #1
 8007658:	bf14      	ite	ne
 800765a:	2301      	movne	r3, #1
 800765c:	2300      	moveq	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e02f      	b.n	80076c2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d109      	bne.n	800767c <HAL_TIM_PWM_Start_IT+0x5c>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e022      	b.n	80076c2 <HAL_TIM_PWM_Start_IT+0xa2>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b0c      	cmp	r3, #12
 8007680:	d109      	bne.n	8007696 <HAL_TIM_PWM_Start_IT+0x76>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b01      	cmp	r3, #1
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	e015      	b.n	80076c2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b10      	cmp	r3, #16
 800769a:	d109      	bne.n	80076b0 <HAL_TIM_PWM_Start_IT+0x90>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	bf14      	ite	ne
 80076a8:	2301      	movne	r3, #1
 80076aa:	2300      	moveq	r3, #0
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	e008      	b.n	80076c2 <HAL_TIM_PWM_Start_IT+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	bf14      	ite	ne
 80076bc:	2301      	movne	r3, #1
 80076be:	2300      	moveq	r3, #0
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e0e7      	b.n	800789a <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Start_IT+0xba>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d8:	e023      	b.n	8007722 <HAL_TIM_PWM_Start_IT+0x102>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Start_IT+0xca>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e8:	e01b      	b.n	8007722 <HAL_TIM_PWM_Start_IT+0x102>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Start_IT+0xda>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	e013      	b.n	8007722 <HAL_TIM_PWM_Start_IT+0x102>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b0c      	cmp	r3, #12
 80076fe:	d104      	bne.n	800770a <HAL_TIM_PWM_Start_IT+0xea>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007708:	e00b      	b.n	8007722 <HAL_TIM_PWM_Start_IT+0x102>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b10      	cmp	r3, #16
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start_IT+0xfa>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007718:	e003      	b.n	8007722 <HAL_TIM_PWM_Start_IT+0x102>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b0c      	cmp	r3, #12
 8007726:	d841      	bhi.n	80077ac <HAL_TIM_PWM_Start_IT+0x18c>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <HAL_TIM_PWM_Start_IT+0x110>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007765 	.word	0x08007765
 8007734:	080077ad 	.word	0x080077ad
 8007738:	080077ad 	.word	0x080077ad
 800773c:	080077ad 	.word	0x080077ad
 8007740:	08007777 	.word	0x08007777
 8007744:	080077ad 	.word	0x080077ad
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	08007789 	.word	0x08007789
 8007754:	080077ad 	.word	0x080077ad
 8007758:	080077ad 	.word	0x080077ad
 800775c:	080077ad 	.word	0x080077ad
 8007760:	0800779b 	.word	0x0800779b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0202 	orr.w	r2, r2, #2
 8007772:	60da      	str	r2, [r3, #12]
      break;
 8007774:	e01d      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0204 	orr.w	r2, r2, #4
 8007784:	60da      	str	r2, [r3, #12]
      break;
 8007786:	e014      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0208 	orr.w	r2, r2, #8
 8007796:	60da      	str	r2, [r3, #12]
      break;
 8007798:	e00b      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0210 	orr.w	r2, r2, #16
 80077a8:	60da      	str	r2, [r3, #12]
      break;
 80077aa:	e002      	b.n	80077b2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      break;
 80077b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d16f      	bne.n	8007898 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2201      	movs	r2, #1
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 ff3b 	bl	800863c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a36      	ldr	r2, [pc, #216]	; (80078a4 <HAL_TIM_PWM_Start_IT+0x284>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a34      	ldr	r2, [pc, #208]	; (80078a8 <HAL_TIM_PWM_Start_IT+0x288>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00e      	beq.n	80077f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a33      	ldr	r2, [pc, #204]	; (80078ac <HAL_TIM_PWM_Start_IT+0x28c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a31      	ldr	r2, [pc, #196]	; (80078b0 <HAL_TIM_PWM_Start_IT+0x290>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_TIM_PWM_Start_IT+0x1d8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a30      	ldr	r2, [pc, #192]	; (80078b4 <HAL_TIM_PWM_Start_IT+0x294>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d101      	bne.n	80077fc <HAL_TIM_PWM_Start_IT+0x1dc>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_TIM_PWM_Start_IT+0x1de>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a23      	ldr	r2, [pc, #140]	; (80078a4 <HAL_TIM_PWM_Start_IT+0x284>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d01d      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007824:	d018      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a23      	ldr	r2, [pc, #140]	; (80078b8 <HAL_TIM_PWM_Start_IT+0x298>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_TIM_PWM_Start_IT+0x29c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <HAL_TIM_PWM_Start_IT+0x288>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIM_PWM_Start_IT+0x238>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a16      	ldr	r2, [pc, #88]	; (80078ac <HAL_TIM_PWM_Start_IT+0x28c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d115      	bne.n	8007884 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007860:	4013      	ands	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b06      	cmp	r3, #6
 8007868:	d015      	beq.n	8007896 <HAL_TIM_PWM_Start_IT+0x276>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007870:	d011      	beq.n	8007896 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	e008      	b.n	8007896 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e000      	b.n	8007898 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007896:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40014400 	.word	0x40014400
 80078b4:	40014800 	.word	0x40014800
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	00010007 	.word	0x00010007

080078c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b0c      	cmp	r3, #12
 80078da:	d841      	bhi.n	8007960 <HAL_TIM_PWM_Stop_IT+0x98>
 80078dc:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80078de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007919 	.word	0x08007919
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007961 	.word	0x08007961
 80078f0:	08007961 	.word	0x08007961
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	0800793d 	.word	0x0800793d
 8007908:	08007961 	.word	0x08007961
 800790c:	08007961 	.word	0x08007961
 8007910:	08007961 	.word	0x08007961
 8007914:	0800794f 	.word	0x0800794f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0202 	bic.w	r2, r2, #2
 8007926:	60da      	str	r2, [r3, #12]
      break;
 8007928:	e01d      	b.n	8007966 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0204 	bic.w	r2, r2, #4
 8007938:	60da      	str	r2, [r3, #12]
      break;
 800793a:	e014      	b.n	8007966 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0208 	bic.w	r2, r2, #8
 800794a:	60da      	str	r2, [r3, #12]
      break;
 800794c:	e00b      	b.n	8007966 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0210 	bic.w	r2, r2, #16
 800795c:	60da      	str	r2, [r3, #12]
      break;
 800795e:	e002      	b.n	8007966 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	bf00      	nop
  }

  if (status == HAL_OK)
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	2b00      	cmp	r3, #0
 800796a:	f040 8081 	bne.w	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fe60 	bl	800863c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <HAL_TIM_PWM_Stop_IT+0x1b4>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_TIM_PWM_Stop_IT+0xe6>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3d      	ldr	r2, [pc, #244]	; (8007a80 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_TIM_PWM_Stop_IT+0xe6>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_TIM_PWM_Stop_IT+0xe6>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_TIM_PWM_Stop_IT+0xe6>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a38      	ldr	r2, [pc, #224]	; (8007a8c <HAL_TIM_PWM_Stop_IT+0x1c4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d101      	bne.n	80079b2 <HAL_TIM_PWM_Stop_IT+0xea>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_PWM_Stop_IT+0xec>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	f241 1311 	movw	r3, #4369	; 0x1111
 80079c2:	4013      	ands	r3, r2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10f      	bne.n	80079e8 <HAL_TIM_PWM_Stop_IT+0x120>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6a1a      	ldr	r2, [r3, #32]
 80079ce:	f240 4344 	movw	r3, #1092	; 0x444
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d107      	bne.n	80079e8 <HAL_TIM_PWM_Stop_IT+0x120>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a1a      	ldr	r2, [r3, #32]
 80079ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80079f2:	4013      	ands	r3, r2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10f      	bne.n	8007a18 <HAL_TIM_PWM_Stop_IT+0x150>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a1a      	ldr	r2, [r3, #32]
 80079fe:	f240 4344 	movw	r3, #1092	; 0x444
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d107      	bne.n	8007a18 <HAL_TIM_PWM_Stop_IT+0x150>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <HAL_TIM_PWM_Stop_IT+0x160>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a26:	e023      	b.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d104      	bne.n	8007a38 <HAL_TIM_PWM_Stop_IT+0x170>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a36:	e01b      	b.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b08      	cmp	r3, #8
 8007a3c:	d104      	bne.n	8007a48 <HAL_TIM_PWM_Stop_IT+0x180>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a46:	e013      	b.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b0c      	cmp	r3, #12
 8007a4c:	d104      	bne.n	8007a58 <HAL_TIM_PWM_Stop_IT+0x190>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a56:	e00b      	b.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d104      	bne.n	8007a68 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a66:	e003      	b.n	8007a70 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40013400 	.word	0x40013400
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40014400 	.word	0x40014400
 8007a8c:	40014800 	.word	0x40014800

08007a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d122      	bne.n	8007aec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d11b      	bne.n	8007aec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0202 	mvn.w	r2, #2
 8007abc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa24 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa16 	bl	8007f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa27 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d122      	bne.n	8007b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d11b      	bne.n	8007b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0204 	mvn.w	r2, #4
 8007b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2202      	movs	r2, #2
 8007b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f9fa 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007b2c:	e005      	b.n	8007b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9ec 	bl	8007f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9fd 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d122      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d11b      	bne.n	8007b94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0208 	mvn.w	r2, #8
 8007b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f9d0 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007b80:	e005      	b.n	8007b8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9c2 	bl	8007f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9d3 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d122      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d11b      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0210 	mvn.w	r2, #16
 8007bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2208      	movs	r2, #8
 8007bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f9a6 	bl	8007f20 <HAL_TIM_IC_CaptureCallback>
 8007bd4:	e005      	b.n	8007be2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f998 	bl	8007f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9a9 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d10e      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d107      	bne.n	8007c14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f06f 0201 	mvn.w	r2, #1
 8007c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f972 	bl	8007ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c1e:	2b80      	cmp	r3, #128	; 0x80
 8007c20:	d10e      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c2c:	2b80      	cmp	r3, #128	; 0x80
 8007c2e:	d107      	bne.n	8007c40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fdb6 	bl	80087ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d10e      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5a:	2b80      	cmp	r3, #128	; 0x80
 8007c5c:	d107      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fda9 	bl	80087c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d10e      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d107      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f957 	bl	8007f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0320 	and.w	r3, r3, #32
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d107      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f06f 0220 	mvn.w	r2, #32
 8007cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fd69 	bl	8008798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3708      	adds	r7, #8
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e0ff      	b.n	8007eee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b14      	cmp	r3, #20
 8007cfa:	f200 80f0 	bhi.w	8007ede <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d59 	.word	0x08007d59
 8007d08:	08007edf 	.word	0x08007edf
 8007d0c:	08007edf 	.word	0x08007edf
 8007d10:	08007edf 	.word	0x08007edf
 8007d14:	08007d99 	.word	0x08007d99
 8007d18:	08007edf 	.word	0x08007edf
 8007d1c:	08007edf 	.word	0x08007edf
 8007d20:	08007edf 	.word	0x08007edf
 8007d24:	08007ddb 	.word	0x08007ddb
 8007d28:	08007edf 	.word	0x08007edf
 8007d2c:	08007edf 	.word	0x08007edf
 8007d30:	08007edf 	.word	0x08007edf
 8007d34:	08007e1b 	.word	0x08007e1b
 8007d38:	08007edf 	.word	0x08007edf
 8007d3c:	08007edf 	.word	0x08007edf
 8007d40:	08007edf 	.word	0x08007edf
 8007d44:	08007e5d 	.word	0x08007e5d
 8007d48:	08007edf 	.word	0x08007edf
 8007d4c:	08007edf 	.word	0x08007edf
 8007d50:	08007edf 	.word	0x08007edf
 8007d54:	08007e9d 	.word	0x08007e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f996 	bl	8008090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0208 	orr.w	r2, r2, #8
 8007d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0204 	bic.w	r2, r2, #4
 8007d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6999      	ldr	r1, [r3, #24]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	691a      	ldr	r2, [r3, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	619a      	str	r2, [r3, #24]
      break;
 8007d96:	e0a5      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fa06 	bl	80081b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6999      	ldr	r1, [r3, #24]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	021a      	lsls	r2, r3, #8
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	619a      	str	r2, [r3, #24]
      break;
 8007dd8:	e084      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fa6f 	bl	80082c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0208 	orr.w	r2, r2, #8
 8007df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0204 	bic.w	r2, r2, #4
 8007e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	61da      	str	r2, [r3, #28]
      break;
 8007e18:	e064      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fad7 	bl	80083d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69d9      	ldr	r1, [r3, #28]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	021a      	lsls	r2, r3, #8
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	61da      	str	r2, [r3, #28]
      break;
 8007e5a:	e043      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fb20 	bl	80084a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0208 	orr.w	r2, r2, #8
 8007e76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0204 	bic.w	r2, r2, #4
 8007e86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e9a:	e023      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fb64 	bl	8008570 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	021a      	lsls	r2, r3, #8
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007edc:	e002      	b.n	8007ee4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop

08007ef8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a40      	ldr	r2, [pc, #256]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d013      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7a:	d00f      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a3d      	ldr	r2, [pc, #244]	; (8008074 <TIM_Base_SetConfig+0x118>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00b      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a3c      	ldr	r2, [pc, #240]	; (8008078 <TIM_Base_SetConfig+0x11c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d007      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a3b      	ldr	r2, [pc, #236]	; (800807c <TIM_Base_SetConfig+0x120>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_Base_SetConfig+0x40>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a3a      	ldr	r2, [pc, #232]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d108      	bne.n	8007fae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a2f      	ldr	r2, [pc, #188]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01f      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbc:	d01b      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a2c      	ldr	r2, [pc, #176]	; (8008074 <TIM_Base_SetConfig+0x118>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d017      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2b      	ldr	r2, [pc, #172]	; (8008078 <TIM_Base_SetConfig+0x11c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2a      	ldr	r2, [pc, #168]	; (800807c <TIM_Base_SetConfig+0x120>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00f      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a29      	ldr	r2, [pc, #164]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00b      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a28      	ldr	r2, [pc, #160]	; (8008084 <TIM_Base_SetConfig+0x128>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d007      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a27      	ldr	r2, [pc, #156]	; (8008088 <TIM_Base_SetConfig+0x12c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_Base_SetConfig+0x9a>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a26      	ldr	r2, [pc, #152]	; (800808c <TIM_Base_SetConfig+0x130>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689a      	ldr	r2, [r3, #8]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a10      	ldr	r2, [pc, #64]	; (8008070 <TIM_Base_SetConfig+0x114>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00f      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a12      	ldr	r2, [pc, #72]	; (8008080 <TIM_Base_SetConfig+0x124>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a11      	ldr	r2, [pc, #68]	; (8008084 <TIM_Base_SetConfig+0x128>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a10      	ldr	r2, [pc, #64]	; (8008088 <TIM_Base_SetConfig+0x12c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_Base_SetConfig+0xf8>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a0f      	ldr	r2, [pc, #60]	; (800808c <TIM_Base_SetConfig+0x130>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d103      	bne.n	800805c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	615a      	str	r2, [r3, #20]
}
 8008062:	bf00      	nop
 8008064:	3714      	adds	r7, #20
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	40012c00 	.word	0x40012c00
 8008074:	40000400 	.word	0x40000400
 8008078:	40000800 	.word	0x40000800
 800807c:	40000c00 	.word	0x40000c00
 8008080:	40013400 	.word	0x40013400
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400
 800808c:	40014800 	.word	0x40014800

08008090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	f023 0201 	bic.w	r2, r3, #1
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 0302 	bic.w	r3, r3, #2
 80080dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <TIM_OC1_SetConfig+0x10c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d00f      	beq.n	8008110 <TIM_OC1_SetConfig+0x80>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a2b      	ldr	r2, [pc, #172]	; (80081a0 <TIM_OC1_SetConfig+0x110>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_OC1_SetConfig+0x80>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a2a      	ldr	r2, [pc, #168]	; (80081a4 <TIM_OC1_SetConfig+0x114>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_OC1_SetConfig+0x80>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a29      	ldr	r2, [pc, #164]	; (80081a8 <TIM_OC1_SetConfig+0x118>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC1_SetConfig+0x80>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a28      	ldr	r2, [pc, #160]	; (80081ac <TIM_OC1_SetConfig+0x11c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10c      	bne.n	800812a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0308 	bic.w	r3, r3, #8
 8008116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 0304 	bic.w	r3, r3, #4
 8008128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a1b      	ldr	r2, [pc, #108]	; (800819c <TIM_OC1_SetConfig+0x10c>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00f      	beq.n	8008152 <TIM_OC1_SetConfig+0xc2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <TIM_OC1_SetConfig+0x110>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00b      	beq.n	8008152 <TIM_OC1_SetConfig+0xc2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <TIM_OC1_SetConfig+0x114>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d007      	beq.n	8008152 <TIM_OC1_SetConfig+0xc2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <TIM_OC1_SetConfig+0x118>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d003      	beq.n	8008152 <TIM_OC1_SetConfig+0xc2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a17      	ldr	r2, [pc, #92]	; (80081ac <TIM_OC1_SetConfig+0x11c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d111      	bne.n	8008176 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	621a      	str	r2, [r3, #32]
}
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	40013400 	.word	0x40013400
 80081a4:	40014000 	.word	0x40014000
 80081a8:	40014400 	.word	0x40014400
 80081ac:	40014800 	.word	0x40014800

080081b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f023 0210 	bic.w	r2, r3, #16
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f023 0320 	bic.w	r3, r3, #32
 80081fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <TIM_OC2_SetConfig+0x100>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_OC2_SetConfig+0x6c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a27      	ldr	r2, [pc, #156]	; (80082b4 <TIM_OC2_SetConfig+0x104>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d10d      	bne.n	8008238 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a1d      	ldr	r2, [pc, #116]	; (80082b0 <TIM_OC2_SetConfig+0x100>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00f      	beq.n	8008260 <TIM_OC2_SetConfig+0xb0>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a1c      	ldr	r2, [pc, #112]	; (80082b4 <TIM_OC2_SetConfig+0x104>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00b      	beq.n	8008260 <TIM_OC2_SetConfig+0xb0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a1b      	ldr	r2, [pc, #108]	; (80082b8 <TIM_OC2_SetConfig+0x108>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d007      	beq.n	8008260 <TIM_OC2_SetConfig+0xb0>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <TIM_OC2_SetConfig+0x10c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d003      	beq.n	8008260 <TIM_OC2_SetConfig+0xb0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a19      	ldr	r2, [pc, #100]	; (80082c0 <TIM_OC2_SetConfig+0x110>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d113      	bne.n	8008288 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800826e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	695b      	ldr	r3, [r3, #20]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	4313      	orrs	r3, r2
 800827a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4313      	orrs	r3, r2
 8008286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	621a      	str	r2, [r3, #32]
}
 80082a2:	bf00      	nop
 80082a4:	371c      	adds	r7, #28
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	40012c00 	.word	0x40012c00
 80082b4:	40013400 	.word	0x40013400
 80082b8:	40014000 	.word	0x40014000
 80082bc:	40014400 	.word	0x40014400
 80082c0:	40014800 	.word	0x40014800

080082c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a27      	ldr	r2, [pc, #156]	; (80083c0 <TIM_OC3_SetConfig+0xfc>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_OC3_SetConfig+0x6a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a26      	ldr	r2, [pc, #152]	; (80083c4 <TIM_OC3_SetConfig+0x100>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10d      	bne.n	800834a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <TIM_OC3_SetConfig+0xfc>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00f      	beq.n	8008372 <TIM_OC3_SetConfig+0xae>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <TIM_OC3_SetConfig+0x100>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00b      	beq.n	8008372 <TIM_OC3_SetConfig+0xae>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1a      	ldr	r2, [pc, #104]	; (80083c8 <TIM_OC3_SetConfig+0x104>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d007      	beq.n	8008372 <TIM_OC3_SetConfig+0xae>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <TIM_OC3_SetConfig+0x108>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d003      	beq.n	8008372 <TIM_OC3_SetConfig+0xae>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <TIM_OC3_SetConfig+0x10c>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d113      	bne.n	800839a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	4313      	orrs	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	621a      	str	r2, [r3, #32]
}
 80083b4:	bf00      	nop
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	40012c00 	.word	0x40012c00
 80083c4:	40013400 	.word	0x40013400
 80083c8:	40014000 	.word	0x40014000
 80083cc:	40014400 	.word	0x40014400
 80083d0:	40014800 	.word	0x40014800

080083d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	021b      	lsls	r3, r3, #8
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	031b      	lsls	r3, r3, #12
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a18      	ldr	r2, [pc, #96]	; (8008494 <TIM_OC4_SetConfig+0xc0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00f      	beq.n	8008458 <TIM_OC4_SetConfig+0x84>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <TIM_OC4_SetConfig+0xc4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00b      	beq.n	8008458 <TIM_OC4_SetConfig+0x84>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a16      	ldr	r2, [pc, #88]	; (800849c <TIM_OC4_SetConfig+0xc8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d007      	beq.n	8008458 <TIM_OC4_SetConfig+0x84>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <TIM_OC4_SetConfig+0xcc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_OC4_SetConfig+0x84>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <TIM_OC4_SetConfig+0xd0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d109      	bne.n	800846c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800845e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	019b      	lsls	r3, r3, #6
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	621a      	str	r2, [r3, #32]
}
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40012c00 	.word	0x40012c00
 8008498:	40013400 	.word	0x40013400
 800849c:	40014000 	.word	0x40014000
 80084a0:	40014400 	.word	0x40014400
 80084a4:	40014800 	.word	0x40014800

080084a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	041b      	lsls	r3, r3, #16
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a17      	ldr	r2, [pc, #92]	; (800855c <TIM_OC5_SetConfig+0xb4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00f      	beq.n	8008522 <TIM_OC5_SetConfig+0x7a>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a16      	ldr	r2, [pc, #88]	; (8008560 <TIM_OC5_SetConfig+0xb8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d00b      	beq.n	8008522 <TIM_OC5_SetConfig+0x7a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a15      	ldr	r2, [pc, #84]	; (8008564 <TIM_OC5_SetConfig+0xbc>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d007      	beq.n	8008522 <TIM_OC5_SetConfig+0x7a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a14      	ldr	r2, [pc, #80]	; (8008568 <TIM_OC5_SetConfig+0xc0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d003      	beq.n	8008522 <TIM_OC5_SetConfig+0x7a>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <TIM_OC5_SetConfig+0xc4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d109      	bne.n	8008536 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008528:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	021b      	lsls	r3, r3, #8
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	4313      	orrs	r3, r2
 8008534:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	621a      	str	r2, [r3, #32]
}
 8008550:	bf00      	nop
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	40012c00 	.word	0x40012c00
 8008560:	40013400 	.word	0x40013400
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800859e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	051b      	lsls	r3, r3, #20
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a18      	ldr	r2, [pc, #96]	; (8008628 <TIM_OC6_SetConfig+0xb8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00f      	beq.n	80085ec <TIM_OC6_SetConfig+0x7c>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a17      	ldr	r2, [pc, #92]	; (800862c <TIM_OC6_SetConfig+0xbc>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d00b      	beq.n	80085ec <TIM_OC6_SetConfig+0x7c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a16      	ldr	r2, [pc, #88]	; (8008630 <TIM_OC6_SetConfig+0xc0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d007      	beq.n	80085ec <TIM_OC6_SetConfig+0x7c>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a15      	ldr	r2, [pc, #84]	; (8008634 <TIM_OC6_SetConfig+0xc4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d003      	beq.n	80085ec <TIM_OC6_SetConfig+0x7c>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a14      	ldr	r2, [pc, #80]	; (8008638 <TIM_OC6_SetConfig+0xc8>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d109      	bne.n	8008600 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	40012c00 	.word	0x40012c00
 800862c:	40013400 	.word	0x40013400
 8008630:	40014000 	.word	0x40014000
 8008634:	40014400 	.word	0x40014400
 8008638:	40014800 	.word	0x40014800

0800863c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 031f 	and.w	r3, r3, #31
 800864e:	2201      	movs	r2, #1
 8008650:	fa02 f303 	lsl.w	r3, r2, r3
 8008654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a1a      	ldr	r2, [r3, #32]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	43db      	mvns	r3, r3
 800865e:	401a      	ands	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6a1a      	ldr	r2, [r3, #32]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f003 031f 	and.w	r3, r3, #31
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	fa01 f303 	lsl.w	r3, r1, r3
 8008674:	431a      	orrs	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
	...

08008688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008698:	2b01      	cmp	r3, #1
 800869a:	d101      	bne.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800869c:	2302      	movs	r3, #2
 800869e:	e068      	b.n	8008772 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a2e      	ldr	r2, [pc, #184]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d004      	beq.n	80086d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d108      	bne.n	80086e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008712:	d018      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a1a      	ldr	r2, [pc, #104]	; (800878c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a18      	ldr	r2, [pc, #96]	; (8008790 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a13      	ldr	r2, [pc, #76]	; (8008784 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a14      	ldr	r2, [pc, #80]	; (8008794 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10c      	bne.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	4313      	orrs	r3, r2
 8008756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	40012c00 	.word	0x40012c00
 8008784:	40013400 	.word	0x40013400
 8008788:	40000400 	.word	0x40000400
 800878c:	40000800 	.word	0x40000800
 8008790:	40000c00 	.word	0x40000c00
 8008794:	40014000 	.word	0x40014000

08008798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e040      	b.n	8008868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d106      	bne.n	80087fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fa fe8c 	bl	8003514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2224      	movs	r2, #36	; 0x24
 8008800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fc94 	bl	8009140 <UART_SetConfig>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d101      	bne.n	8008822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e022      	b.n	8008868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 ff40 	bl	80096b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800883e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800884e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 ffc7 	bl	80097f4 <UART_CheckIdleState>
 8008866:	4603      	mov	r3, r0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08a      	sub	sp, #40	; 0x28
 8008874:	af02      	add	r7, sp, #8
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	4613      	mov	r3, r2
 800887e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008884:	2b20      	cmp	r3, #32
 8008886:	f040 8082 	bne.w	800898e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <HAL_UART_Transmit+0x26>
 8008890:	88fb      	ldrh	r3, [r7, #6]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e07a      	b.n	8008990 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_UART_Transmit+0x38>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e073      	b.n	8008990 <HAL_UART_Transmit+0x120>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2221      	movs	r2, #33	; 0x21
 80088bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088be:	f7fb f82d 	bl	800391c <HAL_GetTick>
 80088c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	88fa      	ldrh	r2, [r7, #6]
 80088d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088dc:	d108      	bne.n	80088f0 <HAL_UART_Transmit+0x80>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d104      	bne.n	80088f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	e003      	b.n	80088f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008900:	e02d      	b.n	800895e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	2200      	movs	r2, #0
 800890a:	2180      	movs	r1, #128	; 0x80
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f000 ffba 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e039      	b.n	8008990 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	881a      	ldrh	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800892e:	b292      	uxth	r2, r2
 8008930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	3302      	adds	r3, #2
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	e008      	b.n	800894c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	b292      	uxth	r2, r2
 8008944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	3301      	adds	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1cb      	bne.n	8008902 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	2140      	movs	r1, #64	; 0x40
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 ff86 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e005      	b.n	8008990 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2220      	movs	r2, #32
 8008988:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	e000      	b.n	8008990 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800898e:	2302      	movs	r3, #2
  }
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af02      	add	r7, sp, #8
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	603b      	str	r3, [r7, #0]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	f040 80bf 	bne.w	8008b30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_UART_Receive+0x26>
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e0b7      	b.n	8008b32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Receive+0x38>
 80089cc:	2302      	movs	r3, #2
 80089ce:	e0b0      	b.n	8008b32 <HAL_UART_Receive+0x19a>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2222      	movs	r2, #34	; 0x22
 80089e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ec:	f7fa ff96 	bl	800391c <HAL_GetTick>
 80089f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0a:	d10e      	bne.n	8008a2a <HAL_UART_Receive+0x92>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <HAL_UART_Receive+0x88>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a1e:	e02d      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	22ff      	movs	r2, #255	; 0xff
 8008a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a28:	e028      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10d      	bne.n	8008a4e <HAL_UART_Receive+0xb6>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <HAL_UART_Receive+0xac>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	22ff      	movs	r2, #255	; 0xff
 8008a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a42:	e01b      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	227f      	movs	r2, #127	; 0x7f
 8008a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a4c:	e016      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a56:	d10d      	bne.n	8008a74 <HAL_UART_Receive+0xdc>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_UART_Receive+0xd2>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	227f      	movs	r2, #127	; 0x7f
 8008a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a68:	e008      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	223f      	movs	r2, #63	; 0x3f
 8008a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a72:	e003      	b.n	8008a7c <HAL_UART_Receive+0xe4>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8c:	d108      	bne.n	8008aa0 <HAL_UART_Receive+0x108>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e003      	b.n	8008aa8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008ab0:	e033      	b.n	8008b1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2120      	movs	r1, #32
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 fee2 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e032      	b.n	8008b32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10c      	bne.n	8008aec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	8a7b      	ldrh	r3, [r7, #18]
 8008adc:	4013      	ands	r3, r2
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	61bb      	str	r3, [r7, #24]
 8008aea:	e00d      	b.n	8008b08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	8a7b      	ldrh	r3, [r7, #18]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	4013      	ands	r3, r2
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1c5      	bne.n	8008ab2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e000      	b.n	8008b32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
  }
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b0ba      	sub	sp, #232	; 0xe8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008b66:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008b70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d115      	bne.n	8008ba4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b7c:	f003 0320 	and.w	r3, r3, #32
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00f      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 82a6 	beq.w	80090e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
      }
      return;
 8008ba2:	e2a0      	b.n	80090e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 8117 	beq.w	8008ddc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008bbe:	4b85      	ldr	r3, [pc, #532]	; (8008dd4 <HAL_UART_IRQHandler+0x298>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 810a 	beq.w	8008ddc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d011      	beq.n	8008bf8 <HAL_UART_IRQHandler+0xbc>
 8008bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bee:	f043 0201 	orr.w	r2, r3, #1
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d011      	beq.n	8008c28 <HAL_UART_IRQHandler+0xec>
 8008c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2202      	movs	r2, #2
 8008c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c1e:	f043 0204 	orr.w	r2, r3, #4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d011      	beq.n	8008c58 <HAL_UART_IRQHandler+0x11c>
 8008c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2204      	movs	r2, #4
 8008c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c4e:	f043 0202 	orr.w	r2, r3, #2
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5c:	f003 0308 	and.w	r3, r3, #8
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d017      	beq.n	8008c94 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d105      	bne.n	8008c7c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c74:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2208      	movs	r2, #8
 8008c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c8a:	f043 0208 	orr.w	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d012      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x18a>
 8008ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00c      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cbc:	f043 0220 	orr.w	r2, r3, #32
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 820c 	beq.w	80090ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00d      	beq.n	8008cfa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce2:	f003 0320 	and.w	r3, r3, #32
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d007      	beq.n	8008cfa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d005      	beq.n	8008d1e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d04f      	beq.n	8008dbe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fe75 	bl	8009a0e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d141      	bne.n	8008db6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1d9      	bne.n	8008d32 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d013      	beq.n	8008dae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	4a13      	ldr	r2, [pc, #76]	; (8008dd8 <HAL_UART_IRQHandler+0x29c>)
 8008d8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fa ff73 	bl	8003c7e <HAL_DMA_Abort_IT>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d017      	beq.n	8008dce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dac:	e00f      	b.n	8008dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f9b0 	bl	8009114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db4:	e00b      	b.n	8008dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f9ac 	bl	8009114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dbc:	e007      	b.n	8008dce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f9a8 	bl	8009114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008dcc:	e18d      	b.n	80090ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dce:	bf00      	nop
    return;
 8008dd0:	e18b      	b.n	80090ea <HAL_UART_IRQHandler+0x5ae>
 8008dd2:	bf00      	nop
 8008dd4:	04000120 	.word	0x04000120
 8008dd8:	08009ad5 	.word	0x08009ad5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	f040 8146 	bne.w	8009072 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 813f 	beq.w	8009072 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8138 	beq.w	8009072 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2210      	movs	r2, #16
 8008e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	f040 80b4 	bne.w	8008f82 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e26:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 815f 	beq.w	80090ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	f080 8157 	bcs.w	80090ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 8085 	bne.w	8008f66 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1da      	bne.n	8008e5c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e1      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3308      	adds	r3, #8
 8008f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f36:	f023 0310 	bic.w	r3, r3, #16
 8008f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f4a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e4      	bne.n	8008f26 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fa fe4e 	bl	8003c02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f8d4 	bl	8009128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f80:	e0b5      	b.n	80090ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 80a7 	beq.w	80090f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 80a2 	beq.w	80090f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e4      	bne.n	8008fae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	3308      	adds	r3, #8
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	f023 0301 	bic.w	r3, r3, #1
 8008ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009008:	633a      	str	r2, [r7, #48]	; 0x30
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800900e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e3      	bne.n	8008fe4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	60fb      	str	r3, [r7, #12]
   return(result);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0310 	bic.w	r3, r3, #16
 8009042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009050:	61fb      	str	r3, [r7, #28]
 8009052:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	69b9      	ldr	r1, [r7, #24]
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	617b      	str	r3, [r7, #20]
   return(result);
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e4      	bne.n	800902e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f85c 	bl	8009128 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009070:	e03f      	b.n	80090f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00e      	beq.n	800909c <HAL_UART_IRQHandler+0x560>
 800907e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d008      	beq.n	800909c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009092:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fd5d 	bl	8009b54 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800909a:	e02d      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800909c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01c      	beq.n	80090f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3
    }
    return;
 80090c4:	e017      	b.n	80090f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d012      	beq.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
 80090d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00c      	beq.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fd0e 	bl	8009b00 <UART_EndTransmit_IT>
    return;
 80090e4:	e008      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80090e6:	bf00      	nop
 80090e8:	e006      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80090ea:	bf00      	nop
 80090ec:	e004      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80090ee:	bf00      	nop
 80090f0:	e002      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80090f2:	bf00      	nop
 80090f4:	e000      	b.n	80090f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80090f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80090f8:	37e8      	adds	r7, #232	; 0xe8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop

08009100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009144:	b08a      	sub	sp, #40	; 0x28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	431a      	orrs	r2, r3
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	431a      	orrs	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	4313      	orrs	r3, r2
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4ba4      	ldr	r3, [pc, #656]	; (8009400 <UART_SetConfig+0x2c0>)
 8009170:	4013      	ands	r3, r2
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009178:	430b      	orrs	r3, r1
 800917a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a99      	ldr	r2, [pc, #612]	; (8009404 <UART_SetConfig+0x2c4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d004      	beq.n	80091ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a8:	4313      	orrs	r3, r2
 80091aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091bc:	430a      	orrs	r2, r1
 80091be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a90      	ldr	r2, [pc, #576]	; (8009408 <UART_SetConfig+0x2c8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d126      	bne.n	8009218 <UART_SetConfig+0xd8>
 80091ca:	4b90      	ldr	r3, [pc, #576]	; (800940c <UART_SetConfig+0x2cc>)
 80091cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091d0:	f003 0303 	and.w	r3, r3, #3
 80091d4:	2b03      	cmp	r3, #3
 80091d6:	d81b      	bhi.n	8009210 <UART_SetConfig+0xd0>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <UART_SetConfig+0xa0>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	080091f1 	.word	0x080091f1
 80091e4:	08009201 	.word	0x08009201
 80091e8:	080091f9 	.word	0x080091f9
 80091ec:	08009209 	.word	0x08009209
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091f6:	e116      	b.n	8009426 <UART_SetConfig+0x2e6>
 80091f8:	2302      	movs	r3, #2
 80091fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80091fe:	e112      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009200:	2304      	movs	r3, #4
 8009202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009206:	e10e      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009208:	2308      	movs	r3, #8
 800920a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800920e:	e10a      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009210:	2310      	movs	r3, #16
 8009212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009216:	e106      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a7c      	ldr	r2, [pc, #496]	; (8009410 <UART_SetConfig+0x2d0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d138      	bne.n	8009294 <UART_SetConfig+0x154>
 8009222:	4b7a      	ldr	r3, [pc, #488]	; (800940c <UART_SetConfig+0x2cc>)
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009228:	f003 030c 	and.w	r3, r3, #12
 800922c:	2b0c      	cmp	r3, #12
 800922e:	d82d      	bhi.n	800928c <UART_SetConfig+0x14c>
 8009230:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <UART_SetConfig+0xf8>)
 8009232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009236:	bf00      	nop
 8009238:	0800926d 	.word	0x0800926d
 800923c:	0800928d 	.word	0x0800928d
 8009240:	0800928d 	.word	0x0800928d
 8009244:	0800928d 	.word	0x0800928d
 8009248:	0800927d 	.word	0x0800927d
 800924c:	0800928d 	.word	0x0800928d
 8009250:	0800928d 	.word	0x0800928d
 8009254:	0800928d 	.word	0x0800928d
 8009258:	08009275 	.word	0x08009275
 800925c:	0800928d 	.word	0x0800928d
 8009260:	0800928d 	.word	0x0800928d
 8009264:	0800928d 	.word	0x0800928d
 8009268:	08009285 	.word	0x08009285
 800926c:	2300      	movs	r3, #0
 800926e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009272:	e0d8      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009274:	2302      	movs	r3, #2
 8009276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800927a:	e0d4      	b.n	8009426 <UART_SetConfig+0x2e6>
 800927c:	2304      	movs	r3, #4
 800927e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009282:	e0d0      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009284:	2308      	movs	r3, #8
 8009286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800928a:	e0cc      	b.n	8009426 <UART_SetConfig+0x2e6>
 800928c:	2310      	movs	r3, #16
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009292:	e0c8      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a5e      	ldr	r2, [pc, #376]	; (8009414 <UART_SetConfig+0x2d4>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d125      	bne.n	80092ea <UART_SetConfig+0x1aa>
 800929e:	4b5b      	ldr	r3, [pc, #364]	; (800940c <UART_SetConfig+0x2cc>)
 80092a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092a8:	2b30      	cmp	r3, #48	; 0x30
 80092aa:	d016      	beq.n	80092da <UART_SetConfig+0x19a>
 80092ac:	2b30      	cmp	r3, #48	; 0x30
 80092ae:	d818      	bhi.n	80092e2 <UART_SetConfig+0x1a2>
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d00a      	beq.n	80092ca <UART_SetConfig+0x18a>
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	d814      	bhi.n	80092e2 <UART_SetConfig+0x1a2>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <UART_SetConfig+0x182>
 80092bc:	2b10      	cmp	r3, #16
 80092be:	d008      	beq.n	80092d2 <UART_SetConfig+0x192>
 80092c0:	e00f      	b.n	80092e2 <UART_SetConfig+0x1a2>
 80092c2:	2300      	movs	r3, #0
 80092c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092c8:	e0ad      	b.n	8009426 <UART_SetConfig+0x2e6>
 80092ca:	2302      	movs	r3, #2
 80092cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092d0:	e0a9      	b.n	8009426 <UART_SetConfig+0x2e6>
 80092d2:	2304      	movs	r3, #4
 80092d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092d8:	e0a5      	b.n	8009426 <UART_SetConfig+0x2e6>
 80092da:	2308      	movs	r3, #8
 80092dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092e0:	e0a1      	b.n	8009426 <UART_SetConfig+0x2e6>
 80092e2:	2310      	movs	r3, #16
 80092e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80092e8:	e09d      	b.n	8009426 <UART_SetConfig+0x2e6>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a4a      	ldr	r2, [pc, #296]	; (8009418 <UART_SetConfig+0x2d8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d125      	bne.n	8009340 <UART_SetConfig+0x200>
 80092f4:	4b45      	ldr	r3, [pc, #276]	; (800940c <UART_SetConfig+0x2cc>)
 80092f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092fe:	2bc0      	cmp	r3, #192	; 0xc0
 8009300:	d016      	beq.n	8009330 <UART_SetConfig+0x1f0>
 8009302:	2bc0      	cmp	r3, #192	; 0xc0
 8009304:	d818      	bhi.n	8009338 <UART_SetConfig+0x1f8>
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d00a      	beq.n	8009320 <UART_SetConfig+0x1e0>
 800930a:	2b80      	cmp	r3, #128	; 0x80
 800930c:	d814      	bhi.n	8009338 <UART_SetConfig+0x1f8>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <UART_SetConfig+0x1d8>
 8009312:	2b40      	cmp	r3, #64	; 0x40
 8009314:	d008      	beq.n	8009328 <UART_SetConfig+0x1e8>
 8009316:	e00f      	b.n	8009338 <UART_SetConfig+0x1f8>
 8009318:	2300      	movs	r3, #0
 800931a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800931e:	e082      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009320:	2302      	movs	r3, #2
 8009322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009326:	e07e      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009328:	2304      	movs	r3, #4
 800932a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800932e:	e07a      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009330:	2308      	movs	r3, #8
 8009332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009336:	e076      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009338:	2310      	movs	r3, #16
 800933a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800933e:	e072      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a35      	ldr	r2, [pc, #212]	; (800941c <UART_SetConfig+0x2dc>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d12a      	bne.n	80093a0 <UART_SetConfig+0x260>
 800934a:	4b30      	ldr	r3, [pc, #192]	; (800940c <UART_SetConfig+0x2cc>)
 800934c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009358:	d01a      	beq.n	8009390 <UART_SetConfig+0x250>
 800935a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800935e:	d81b      	bhi.n	8009398 <UART_SetConfig+0x258>
 8009360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009364:	d00c      	beq.n	8009380 <UART_SetConfig+0x240>
 8009366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800936a:	d815      	bhi.n	8009398 <UART_SetConfig+0x258>
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <UART_SetConfig+0x238>
 8009370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009374:	d008      	beq.n	8009388 <UART_SetConfig+0x248>
 8009376:	e00f      	b.n	8009398 <UART_SetConfig+0x258>
 8009378:	2300      	movs	r3, #0
 800937a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800937e:	e052      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009380:	2302      	movs	r3, #2
 8009382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009386:	e04e      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009388:	2304      	movs	r3, #4
 800938a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800938e:	e04a      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009390:	2308      	movs	r3, #8
 8009392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009396:	e046      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009398:	2310      	movs	r3, #16
 800939a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800939e:	e042      	b.n	8009426 <UART_SetConfig+0x2e6>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a17      	ldr	r2, [pc, #92]	; (8009404 <UART_SetConfig+0x2c4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d13a      	bne.n	8009420 <UART_SetConfig+0x2e0>
 80093aa:	4b18      	ldr	r3, [pc, #96]	; (800940c <UART_SetConfig+0x2cc>)
 80093ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093b8:	d01a      	beq.n	80093f0 <UART_SetConfig+0x2b0>
 80093ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093be:	d81b      	bhi.n	80093f8 <UART_SetConfig+0x2b8>
 80093c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093c4:	d00c      	beq.n	80093e0 <UART_SetConfig+0x2a0>
 80093c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ca:	d815      	bhi.n	80093f8 <UART_SetConfig+0x2b8>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <UART_SetConfig+0x298>
 80093d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d4:	d008      	beq.n	80093e8 <UART_SetConfig+0x2a8>
 80093d6:	e00f      	b.n	80093f8 <UART_SetConfig+0x2b8>
 80093d8:	2300      	movs	r3, #0
 80093da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093de:	e022      	b.n	8009426 <UART_SetConfig+0x2e6>
 80093e0:	2302      	movs	r3, #2
 80093e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093e6:	e01e      	b.n	8009426 <UART_SetConfig+0x2e6>
 80093e8:	2304      	movs	r3, #4
 80093ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093ee:	e01a      	b.n	8009426 <UART_SetConfig+0x2e6>
 80093f0:	2308      	movs	r3, #8
 80093f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093f6:	e016      	b.n	8009426 <UART_SetConfig+0x2e6>
 80093f8:	2310      	movs	r3, #16
 80093fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80093fe:	e012      	b.n	8009426 <UART_SetConfig+0x2e6>
 8009400:	efff69f3 	.word	0xefff69f3
 8009404:	40008000 	.word	0x40008000
 8009408:	40013800 	.word	0x40013800
 800940c:	40021000 	.word	0x40021000
 8009410:	40004400 	.word	0x40004400
 8009414:	40004800 	.word	0x40004800
 8009418:	40004c00 	.word	0x40004c00
 800941c:	40005000 	.word	0x40005000
 8009420:	2310      	movs	r3, #16
 8009422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a9f      	ldr	r2, [pc, #636]	; (80096a8 <UART_SetConfig+0x568>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d17a      	bne.n	8009526 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009434:	2b08      	cmp	r3, #8
 8009436:	d824      	bhi.n	8009482 <UART_SetConfig+0x342>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <UART_SetConfig+0x300>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	08009465 	.word	0x08009465
 8009444:	08009483 	.word	0x08009483
 8009448:	0800946d 	.word	0x0800946d
 800944c:	08009483 	.word	0x08009483
 8009450:	08009473 	.word	0x08009473
 8009454:	08009483 	.word	0x08009483
 8009458:	08009483 	.word	0x08009483
 800945c:	08009483 	.word	0x08009483
 8009460:	0800947b 	.word	0x0800947b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009464:	f7fc fd9c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009468:	61f8      	str	r0, [r7, #28]
        break;
 800946a:	e010      	b.n	800948e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800946c:	4b8f      	ldr	r3, [pc, #572]	; (80096ac <UART_SetConfig+0x56c>)
 800946e:	61fb      	str	r3, [r7, #28]
        break;
 8009470:	e00d      	b.n	800948e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009472:	f7fc fcfd 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8009476:	61f8      	str	r0, [r7, #28]
        break;
 8009478:	e009      	b.n	800948e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947e:	61fb      	str	r3, [r7, #28]
        break;
 8009480:	e005      	b.n	800948e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800948c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 80fb 	beq.w	800968c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	4613      	mov	r3, r2
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	4413      	add	r3, r2
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d305      	bcc.n	80094b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d903      	bls.n	80094ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80094b8:	e0e8      	b.n	800968c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	2200      	movs	r2, #0
 80094be:	461c      	mov	r4, r3
 80094c0:	4615      	mov	r5, r2
 80094c2:	f04f 0200 	mov.w	r2, #0
 80094c6:	f04f 0300 	mov.w	r3, #0
 80094ca:	022b      	lsls	r3, r5, #8
 80094cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80094d0:	0222      	lsls	r2, r4, #8
 80094d2:	68f9      	ldr	r1, [r7, #12]
 80094d4:	6849      	ldr	r1, [r1, #4]
 80094d6:	0849      	lsrs	r1, r1, #1
 80094d8:	2000      	movs	r0, #0
 80094da:	4688      	mov	r8, r1
 80094dc:	4681      	mov	r9, r0
 80094de:	eb12 0a08 	adds.w	sl, r2, r8
 80094e2:	eb43 0b09 	adc.w	fp, r3, r9
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	603b      	str	r3, [r7, #0]
 80094ee:	607a      	str	r2, [r7, #4]
 80094f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f4:	4650      	mov	r0, sl
 80094f6:	4659      	mov	r1, fp
 80094f8:	f7f7 fb66 	bl	8000bc8 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4613      	mov	r3, r2
 8009502:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800950a:	d308      	bcc.n	800951e <UART_SetConfig+0x3de>
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009512:	d204      	bcs.n	800951e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	60da      	str	r2, [r3, #12]
 800951c:	e0b6      	b.n	800968c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009524:	e0b2      	b.n	800968c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800952e:	d15e      	bne.n	80095ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009534:	2b08      	cmp	r3, #8
 8009536:	d828      	bhi.n	800958a <UART_SetConfig+0x44a>
 8009538:	a201      	add	r2, pc, #4	; (adr r2, 8009540 <UART_SetConfig+0x400>)
 800953a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953e:	bf00      	nop
 8009540:	08009565 	.word	0x08009565
 8009544:	0800956d 	.word	0x0800956d
 8009548:	08009575 	.word	0x08009575
 800954c:	0800958b 	.word	0x0800958b
 8009550:	0800957b 	.word	0x0800957b
 8009554:	0800958b 	.word	0x0800958b
 8009558:	0800958b 	.word	0x0800958b
 800955c:	0800958b 	.word	0x0800958b
 8009560:	08009583 	.word	0x08009583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009564:	f7fc fd1c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009568:	61f8      	str	r0, [r7, #28]
        break;
 800956a:	e014      	b.n	8009596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800956c:	f7fc fd2e 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 8009570:	61f8      	str	r0, [r7, #28]
        break;
 8009572:	e010      	b.n	8009596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009574:	4b4d      	ldr	r3, [pc, #308]	; (80096ac <UART_SetConfig+0x56c>)
 8009576:	61fb      	str	r3, [r7, #28]
        break;
 8009578:	e00d      	b.n	8009596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800957a:	f7fc fc79 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 800957e:	61f8      	str	r0, [r7, #28]
        break;
 8009580:	e009      	b.n	8009596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009586:	61fb      	str	r3, [r7, #28]
        break;
 8009588:	e005      	b.n	8009596 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d077      	beq.n	800968c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	005a      	lsls	r2, r3, #1
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	085b      	lsrs	r3, r3, #1
 80095a6:	441a      	add	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	d916      	bls.n	80095e6 <UART_SetConfig+0x4a6>
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095be:	d212      	bcs.n	80095e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f023 030f 	bic.w	r3, r3, #15
 80095c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f003 0307 	and.w	r3, r3, #7
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	8afb      	ldrh	r3, [r7, #22]
 80095d8:	4313      	orrs	r3, r2
 80095da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	8afa      	ldrh	r2, [r7, #22]
 80095e2:	60da      	str	r2, [r3, #12]
 80095e4:	e052      	b.n	800968c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80095ec:	e04e      	b.n	800968c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80095ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095f2:	2b08      	cmp	r3, #8
 80095f4:	d827      	bhi.n	8009646 <UART_SetConfig+0x506>
 80095f6:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <UART_SetConfig+0x4bc>)
 80095f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fc:	08009621 	.word	0x08009621
 8009600:	08009629 	.word	0x08009629
 8009604:	08009631 	.word	0x08009631
 8009608:	08009647 	.word	0x08009647
 800960c:	08009637 	.word	0x08009637
 8009610:	08009647 	.word	0x08009647
 8009614:	08009647 	.word	0x08009647
 8009618:	08009647 	.word	0x08009647
 800961c:	0800963f 	.word	0x0800963f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009620:	f7fc fcbe 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009624:	61f8      	str	r0, [r7, #28]
        break;
 8009626:	e014      	b.n	8009652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009628:	f7fc fcd0 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 800962c:	61f8      	str	r0, [r7, #28]
        break;
 800962e:	e010      	b.n	8009652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009630:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <UART_SetConfig+0x56c>)
 8009632:	61fb      	str	r3, [r7, #28]
        break;
 8009634:	e00d      	b.n	8009652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009636:	f7fc fc1b 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 800963a:	61f8      	str	r0, [r7, #28]
        break;
 800963c:	e009      	b.n	8009652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800963e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009642:	61fb      	str	r3, [r7, #28]
        break;
 8009644:	e005      	b.n	8009652 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009650:	bf00      	nop
    }

    if (pclk != 0U)
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d019      	beq.n	800968c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	085a      	lsrs	r2, r3, #1
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	441a      	add	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	fbb2 f3f3 	udiv	r3, r2, r3
 800966a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	2b0f      	cmp	r3, #15
 8009670:	d909      	bls.n	8009686 <UART_SetConfig+0x546>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009678:	d205      	bcs.n	8009686 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60da      	str	r2, [r3, #12]
 8009684:	e002      	b.n	800968c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009698:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800969c:	4618      	mov	r0, r3
 800969e:	3728      	adds	r7, #40	; 0x28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096a6:	bf00      	nop
 80096a8:	40008000 	.word	0x40008000
 80096ac:	00f42400 	.word	0x00f42400

080096b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00a      	beq.n	800971e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	430a      	orrs	r2, r1
 800973e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01a      	beq.n	80097c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	430a      	orrs	r2, r1
 80097a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097ae:	d10a      	bne.n	80097c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00a      	beq.n	80097e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	605a      	str	r2, [r3, #4]
  }
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009804:	f7fa f88a 	bl	800391c <HAL_GetTick>
 8009808:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b08      	cmp	r3, #8
 8009816:	d10e      	bne.n	8009836 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f82d 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	e023      	b.n	800987e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b04      	cmp	r3, #4
 8009842:	d10e      	bne.n	8009862 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009844:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f817 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e00d      	b.n	800987e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b09c      	sub	sp, #112	; 0x70
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009896:	e0a5      	b.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	f000 80a1 	beq.w	80099e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a2:	f7fa f83b 	bl	800391c <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80098b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d13e      	bne.n	8009936 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098cc:	667b      	str	r3, [r7, #100]	; 0x64
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80098e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e6      	bne.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	663b      	str	r3, [r7, #96]	; 0x60
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800990a:	64ba      	str	r2, [r7, #72]	; 0x48
 800990c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2220      	movs	r2, #32
 8009928:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e067      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d04f      	beq.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800994e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009952:	d147      	bne.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800995c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800996c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
 800997e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e6      	bne.n	800995e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3308      	adds	r3, #8
 8009996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	613b      	str	r3, [r7, #16]
   return(result);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f023 0301 	bic.w	r3, r3, #1
 80099a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099b0:	623a      	str	r2, [r7, #32]
 80099b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	69f9      	ldr	r1, [r7, #28]
 80099b6:	6a3a      	ldr	r2, [r7, #32]
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e5      	bne.n	8009990 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2220      	movs	r2, #32
 80099c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2220      	movs	r2, #32
 80099ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e010      	b.n	8009a06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	69da      	ldr	r2, [r3, #28]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4013      	ands	r3, r2
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	bf0c      	ite	eq
 80099f4:	2301      	moveq	r3, #1
 80099f6:	2300      	movne	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	f43f af4a 	beq.w	8009898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3770      	adds	r7, #112	; 0x70
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b095      	sub	sp, #84	; 0x54
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1e:	e853 3f00 	ldrex	r3, [r3]
 8009a22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	461a      	mov	r2, r3
 8009a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a34:	643b      	str	r3, [r7, #64]	; 0x40
 8009a36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a3c:	e841 2300 	strex	r3, r2, [r1]
 8009a40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d1e6      	bne.n	8009a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3308      	adds	r3, #8
 8009a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	f023 0301 	bic.w	r3, r3, #1
 8009a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3308      	adds	r3, #8
 8009a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d118      	bne.n	8009ab6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	f023 0310 	bic.w	r3, r3, #16
 8009a98:	647b      	str	r3, [r7, #68]	; 0x44
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aa2:	61bb      	str	r3, [r7, #24]
 8009aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	6979      	ldr	r1, [r7, #20]
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e6      	bne.n	8009a84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009ac8:	bf00      	nop
 8009aca:	3754      	adds	r7, #84	; 0x54
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff fb0e 	bl	8009114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	61bb      	str	r3, [r7, #24]
 8009b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6979      	ldr	r1, [r7, #20]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e6      	bne.n	8009b08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff fada 	bl	8009100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b4c:	bf00      	nop
 8009b4e:	3720      	adds	r7, #32
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009b6c:	4904      	ldr	r1, [pc, #16]	; (8009b80 <MX_FATFS_Init+0x18>)
 8009b6e:	4805      	ldr	r0, [pc, #20]	; (8009b84 <MX_FATFS_Init+0x1c>)
 8009b70:	f003 f950 	bl	800ce14 <FATFS_LinkDriver>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <MX_FATFS_Init+0x20>)
 8009b7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b7c:	bf00      	nop
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20000f40 	.word	0x20000f40
 8009b84:	20000034 	.word	0x20000034
 8009b88:	20000f3c 	.word	0x20000f3c

08009b8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009b90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADDED THIS LINE
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 f9d9 	bl	8009f60 <USER_SPI_initialize>
 8009bae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADDED THIS LINE
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 fab7 	bl	800a138 <USER_SPI_status>
 8009bca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	4603      	mov	r3, r0
 8009be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADDED THIS LINE
 8009be4:	7bf8      	ldrb	r0, [r7, #15]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	f000 faba 	bl	800a164 <USER_SPI_read>
 8009bf0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b084      	sub	sp, #16
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	4603      	mov	r3, r0
 8009c08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADDED THIS LINE
 8009c0a:	7bf8      	ldrb	r0, [r7, #15]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	f000 fb0d 	bl	800a230 <USER_SPI_write>
 8009c16:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	603a      	str	r2, [r7, #0]
 8009c2a:	71fb      	strb	r3, [r7, #7]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADDED THIS LINE
 8009c30:	79b9      	ldrb	r1, [r7, #6]
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fb76 	bl	800a328 <USER_SPI_ioctl>
 8009c3c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009c50:	f7f9 fe64 	bl	800391c <HAL_GetTick>
 8009c54:	4603      	mov	r3, r0
 8009c56:	4a04      	ldr	r2, [pc, #16]	; (8009c68 <SPI_Timer_On+0x20>)
 8009c58:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009c5a:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <SPI_Timer_On+0x24>)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6013      	str	r3, [r2, #0]
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000f48 	.word	0x20000f48
 8009c6c:	20000f4c 	.word	0x20000f4c

08009c70 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009c74:	f7f9 fe52 	bl	800391c <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <SPI_Timer_Status+0x24>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <SPI_Timer_Status+0x28>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bf34      	ite	cc
 8009c88:	2301      	movcc	r3, #1
 8009c8a:	2300      	movcs	r3, #0
 8009c8c:	b2db      	uxtb	r3, r3
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000f48 	.word	0x20000f48
 8009c98:	20000f4c 	.word	0x20000f4c

08009c9c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009ca6:	f107 020f 	add.w	r2, r7, #15
 8009caa:	1df9      	adds	r1, r7, #7
 8009cac:	2332      	movs	r3, #50	; 0x32
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4804      	ldr	r0, [pc, #16]	; (8009cc4 <xchg_spi+0x28>)
 8009cb4:	f7fc ff5f 	bl	8006b76 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000d4c 	.word	0x20000d4c

08009cc8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	e00a      	b.n	8009cee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	18d4      	adds	r4, r2, r3
 8009cde:	20ff      	movs	r0, #255	; 0xff
 8009ce0:	f7ff ffdc 	bl	8009c9c <xchg_spi>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d3f0      	bcc.n	8009cd8 <rcvr_spi_multi+0x10>
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}

08009d00 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60fb      	str	r3, [r7, #12]
 8009d0e:	e009      	b.n	8009d24 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	4413      	add	r3, r2
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7ff ffbf 	bl	8009c9c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d3f1      	bcc.n	8009d10 <xmit_spi_multi+0x10>
	}
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b086      	sub	sp, #24
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009d3e:	f7f9 fded 	bl	800391c <HAL_GetTick>
 8009d42:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009d48:	20ff      	movs	r0, #255	; 0xff
 8009d4a:	f7ff ffa7 	bl	8009c9c <xchg_spi>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	2bff      	cmp	r3, #255	; 0xff
 8009d56:	d007      	beq.n	8009d68 <wait_ready+0x32>
 8009d58:	f7f9 fde0 	bl	800391c <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d8ef      	bhi.n	8009d48 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2bff      	cmp	r3, #255	; 0xff
 8009d6c:	bf0c      	ite	eq
 8009d6e:	2301      	moveq	r3, #1
 8009d70:	2300      	movne	r3, #0
 8009d72:	b2db      	uxtb	r3, r3
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009d80:	2201      	movs	r2, #1
 8009d82:	2140      	movs	r1, #64	; 0x40
 8009d84:	4803      	ldr	r0, [pc, #12]	; (8009d94 <despiselect+0x18>)
 8009d86:	f7fa fced 	bl	8004764 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009d8a:	20ff      	movs	r0, #255	; 0xff
 8009d8c:	f7ff ff86 	bl	8009c9c <xchg_spi>

}
 8009d90:	bf00      	nop
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	48000400 	.word	0x48000400

08009d98 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2140      	movs	r1, #64	; 0x40
 8009da0:	4809      	ldr	r0, [pc, #36]	; (8009dc8 <spiselect+0x30>)
 8009da2:	f7fa fcdf 	bl	8004764 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009da6:	20ff      	movs	r0, #255	; 0xff
 8009da8:	f7ff ff78 	bl	8009c9c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009db0:	f7ff ffc1 	bl	8009d36 <wait_ready>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <spiselect+0x26>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e002      	b.n	8009dc4 <spiselect+0x2c>

	despiselect();
 8009dbe:	f7ff ffdd 	bl	8009d7c <despiselect>
	return 0;	/* Timeout */
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	48000400 	.word	0x48000400

08009dcc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009dd6:	20c8      	movs	r0, #200	; 0xc8
 8009dd8:	f7ff ff36 	bl	8009c48 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009ddc:	20ff      	movs	r0, #255	; 0xff
 8009dde:	f7ff ff5d 	bl	8009c9c <xchg_spi>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2bff      	cmp	r3, #255	; 0xff
 8009dea:	d104      	bne.n	8009df6 <rcvr_datablock+0x2a>
 8009dec:	f7ff ff40 	bl	8009c70 <SPI_Timer_Status>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1f2      	bne.n	8009ddc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2bfe      	cmp	r3, #254	; 0xfe
 8009dfa:	d001      	beq.n	8009e00 <rcvr_datablock+0x34>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	e00a      	b.n	8009e16 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff ff60 	bl	8009cc8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009e08:	20ff      	movs	r0, #255	; 0xff
 8009e0a:	f7ff ff47 	bl	8009c9c <xchg_spi>
 8009e0e:	20ff      	movs	r0, #255	; 0xff
 8009e10:	f7ff ff44 	bl	8009c9c <xchg_spi>

	return 1;						/* Function succeeded */
 8009e14:	2301      	movs	r3, #1
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009e2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e2e:	f7ff ff82 	bl	8009d36 <wait_ready>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <xmit_datablock+0x1e>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e01e      	b.n	8009e7a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff ff2c 	bl	8009c9c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	2bfd      	cmp	r3, #253	; 0xfd
 8009e48:	d016      	beq.n	8009e78 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7ff ff56 	bl	8009d00 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009e54:	20ff      	movs	r0, #255	; 0xff
 8009e56:	f7ff ff21 	bl	8009c9c <xchg_spi>
 8009e5a:	20ff      	movs	r0, #255	; 0xff
 8009e5c:	f7ff ff1e 	bl	8009c9c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009e60:	20ff      	movs	r0, #255	; 0xff
 8009e62:	f7ff ff1b 	bl	8009c9c <xchg_spi>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	2b05      	cmp	r3, #5
 8009e72:	d001      	beq.n	8009e78 <xmit_datablock+0x5a>
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <xmit_datablock+0x5c>
	}
	return 1;
 8009e78:	2301      	movs	r3, #1
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3710      	adds	r7, #16
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b084      	sub	sp, #16
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	4603      	mov	r3, r0
 8009e8a:	6039      	str	r1, [r7, #0]
 8009e8c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	da0e      	bge.n	8009eb4 <send_cmd+0x32>
		cmd &= 0x7F;
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	2037      	movs	r0, #55	; 0x37
 8009ea2:	f7ff ffee 	bl	8009e82 <send_cmd>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d901      	bls.n	8009eb4 <send_cmd+0x32>
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	e051      	b.n	8009f58 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	2b0c      	cmp	r3, #12
 8009eb8:	d008      	beq.n	8009ecc <send_cmd+0x4a>
		despiselect();
 8009eba:	f7ff ff5f 	bl	8009d7c <despiselect>
		if (!spiselect()) return 0xFF;
 8009ebe:	f7ff ff6b 	bl	8009d98 <spiselect>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <send_cmd+0x4a>
 8009ec8:	23ff      	movs	r3, #255	; 0xff
 8009eca:	e045      	b.n	8009f58 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7ff fee1 	bl	8009c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	0e1b      	lsrs	r3, r3, #24
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff fedb 	bl	8009c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	0c1b      	lsrs	r3, r3, #16
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fed5 	bl	8009c9c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	0a1b      	lsrs	r3, r3, #8
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fecf 	bl	8009c9c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7ff feca 	bl	8009c9c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <send_cmd+0x94>
 8009f12:	2395      	movs	r3, #149	; 0x95
 8009f14:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d101      	bne.n	8009f20 <send_cmd+0x9e>
 8009f1c:	2387      	movs	r3, #135	; 0x87
 8009f1e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff feba 	bl	8009c9c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	2b0c      	cmp	r3, #12
 8009f2c:	d102      	bne.n	8009f34 <send_cmd+0xb2>
 8009f2e:	20ff      	movs	r0, #255	; 0xff
 8009f30:	f7ff feb4 	bl	8009c9c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009f34:	230a      	movs	r3, #10
 8009f36:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009f38:	20ff      	movs	r0, #255	; 0xff
 8009f3a:	f7ff feaf 	bl	8009c9c <xchg_spi>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	da05      	bge.n	8009f56 <send_cmd+0xd4>
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1f0      	bne.n	8009f38 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	4603      	mov	r3, r0
 8009f68:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <USER_SPI_initialize+0x14>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e0d6      	b.n	800a122 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009f74:	4b6d      	ldr	r3, [pc, #436]	; (800a12c <USER_SPI_initialize+0x1cc>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <USER_SPI_initialize+0x2a>
 8009f82:	4b6a      	ldr	r3, [pc, #424]	; (800a12c <USER_SPI_initialize+0x1cc>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	e0cb      	b.n	800a122 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8009f8a:	4b69      	ldr	r3, [pc, #420]	; (800a130 <USER_SPI_initialize+0x1d0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009f94:	4b66      	ldr	r3, [pc, #408]	; (800a130 <USER_SPI_initialize+0x1d0>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8009f9c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009f9e:	230a      	movs	r3, #10
 8009fa0:	73fb      	strb	r3, [r7, #15]
 8009fa2:	e005      	b.n	8009fb0 <USER_SPI_initialize+0x50>
 8009fa4:	20ff      	movs	r0, #255	; 0xff
 8009fa6:	f7ff fe79 	bl	8009c9c <xchg_spi>
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1f6      	bne.n	8009fa4 <USER_SPI_initialize+0x44>

	ty = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009fba:	2100      	movs	r1, #0
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	f7ff ff60 	bl	8009e82 <send_cmd>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	f040 808b 	bne.w	800a0e0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009fce:	f7ff fe3b 	bl	8009c48 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8009fd2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009fd6:	2008      	movs	r0, #8
 8009fd8:	f7ff ff53 	bl	8009e82 <send_cmd>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d151      	bne.n	800a086 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]
 8009fe6:	e00d      	b.n	800a004 <USER_SPI_initialize+0xa4>
 8009fe8:	7bfc      	ldrb	r4, [r7, #15]
 8009fea:	20ff      	movs	r0, #255	; 0xff
 8009fec:	f7ff fe56 	bl	8009c9c <xchg_spi>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f104 0310 	add.w	r3, r4, #16
 8009ff8:	443b      	add	r3, r7
 8009ffa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	3301      	adds	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	2b03      	cmp	r3, #3
 800a008:	d9ee      	bls.n	8009fe8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a00a:	7abb      	ldrb	r3, [r7, #10]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d167      	bne.n	800a0e0 <USER_SPI_initialize+0x180>
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	2baa      	cmp	r3, #170	; 0xaa
 800a014:	d164      	bne.n	800a0e0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a016:	bf00      	nop
 800a018:	f7ff fe2a 	bl	8009c70 <SPI_Timer_Status>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <USER_SPI_initialize+0xd2>
 800a022:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a026:	20a9      	movs	r0, #169	; 0xa9
 800a028:	f7ff ff2b 	bl	8009e82 <send_cmd>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f2      	bne.n	800a018 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a032:	f7ff fe1d 	bl	8009c70 <SPI_Timer_Status>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d051      	beq.n	800a0e0 <USER_SPI_initialize+0x180>
 800a03c:	2100      	movs	r1, #0
 800a03e:	203a      	movs	r0, #58	; 0x3a
 800a040:	f7ff ff1f 	bl	8009e82 <send_cmd>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d14a      	bne.n	800a0e0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
 800a04e:	e00d      	b.n	800a06c <USER_SPI_initialize+0x10c>
 800a050:	7bfc      	ldrb	r4, [r7, #15]
 800a052:	20ff      	movs	r0, #255	; 0xff
 800a054:	f7ff fe22 	bl	8009c9c <xchg_spi>
 800a058:	4603      	mov	r3, r0
 800a05a:	461a      	mov	r2, r3
 800a05c:	f104 0310 	add.w	r3, r4, #16
 800a060:	443b      	add	r3, r7
 800a062:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	3301      	adds	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d9ee      	bls.n	800a050 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a072:	7a3b      	ldrb	r3, [r7, #8]
 800a074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <USER_SPI_initialize+0x120>
 800a07c:	230c      	movs	r3, #12
 800a07e:	e000      	b.n	800a082 <USER_SPI_initialize+0x122>
 800a080:	2304      	movs	r3, #4
 800a082:	737b      	strb	r3, [r7, #13]
 800a084:	e02c      	b.n	800a0e0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a086:	2100      	movs	r1, #0
 800a088:	20a9      	movs	r0, #169	; 0xa9
 800a08a:	f7ff fefa 	bl	8009e82 <send_cmd>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d804      	bhi.n	800a09e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a094:	2302      	movs	r3, #2
 800a096:	737b      	strb	r3, [r7, #13]
 800a098:	23a9      	movs	r3, #169	; 0xa9
 800a09a:	73bb      	strb	r3, [r7, #14]
 800a09c:	e003      	b.n	800a0a6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a09e:	2301      	movs	r3, #1
 800a0a0:	737b      	strb	r3, [r7, #13]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a0a6:	bf00      	nop
 800a0a8:	f7ff fde2 	bl	8009c70 <SPI_Timer_Status>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d007      	beq.n	800a0c2 <USER_SPI_initialize+0x162>
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fee3 	bl	8009e82 <send_cmd>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f2      	bne.n	800a0a8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a0c2:	f7ff fdd5 	bl	8009c70 <SPI_Timer_Status>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <USER_SPI_initialize+0x17c>
 800a0cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0d0:	2010      	movs	r0, #16
 800a0d2:	f7ff fed6 	bl	8009e82 <send_cmd>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <USER_SPI_initialize+0x180>
				ty = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800a0e0:	4a14      	ldr	r2, [pc, #80]	; (800a134 <USER_SPI_initialize+0x1d4>)
 800a0e2:	7b7b      	ldrb	r3, [r7, #13]
 800a0e4:	7013      	strb	r3, [r2, #0]
	despiselect();
 800a0e6:	f7ff fe49 	bl	8009d7c <despiselect>

	if (ty) {			/* OK */
 800a0ea:	7b7b      	ldrb	r3, [r7, #13]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d012      	beq.n	800a116 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	; (800a130 <USER_SPI_initialize+0x1d0>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <USER_SPI_initialize+0x1d0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0210 	orr.w	r2, r2, #16
 800a102:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a104:	4b09      	ldr	r3, [pc, #36]	; (800a12c <USER_SPI_initialize+0x1cc>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	f023 0301 	bic.w	r3, r3, #1
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	4b06      	ldr	r3, [pc, #24]	; (800a12c <USER_SPI_initialize+0x1cc>)
 800a112:	701a      	strb	r2, [r3, #0]
 800a114:	e002      	b.n	800a11c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <USER_SPI_initialize+0x1cc>)
 800a118:	2201      	movs	r2, #1
 800a11a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800a11c:	4b03      	ldr	r3, [pc, #12]	; (800a12c <USER_SPI_initialize+0x1cc>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	bd90      	pop	{r4, r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000048 	.word	0x20000048
 800a130:	20000d4c 	.word	0x20000d4c
 800a134:	20000f44 	.word	0x20000f44

0800a138 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a142:	79fb      	ldrb	r3, [r7, #7]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <USER_SPI_status+0x14>
 800a148:	2301      	movs	r3, #1
 800a14a:	e002      	b.n	800a152 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <USER_SPI_status+0x28>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	20000048 	.word	0x20000048

0800a164 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <USER_SPI_read+0x1c>
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <USER_SPI_read+0x20>
 800a180:	2304      	movs	r3, #4
 800a182:	e04d      	b.n	800a220 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a184:	4b28      	ldr	r3, [pc, #160]	; (800a228 <USER_SPI_read+0xc4>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	f003 0301 	and.w	r3, r3, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <USER_SPI_read+0x32>
 800a192:	2303      	movs	r3, #3
 800a194:	e044      	b.n	800a220 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a196:	4b25      	ldr	r3, [pc, #148]	; (800a22c <USER_SPI_read+0xc8>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	f003 0308 	and.w	r3, r3, #8
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <USER_SPI_read+0x44>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	025b      	lsls	r3, r3, #9
 800a1a6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d111      	bne.n	800a1d2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a1ae:	6879      	ldr	r1, [r7, #4]
 800a1b0:	2011      	movs	r0, #17
 800a1b2:	f7ff fe66 	bl	8009e82 <send_cmd>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d129      	bne.n	800a210 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800a1bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f7ff fe03 	bl	8009dcc <rcvr_datablock>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d021      	beq.n	800a210 <USER_SPI_read+0xac>
			count = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	e01e      	b.n	800a210 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a1d2:	6879      	ldr	r1, [r7, #4]
 800a1d4:	2012      	movs	r0, #18
 800a1d6:	f7ff fe54 	bl	8009e82 <send_cmd>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d117      	bne.n	800a210 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a1e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1e4:	68b8      	ldr	r0, [r7, #8]
 800a1e6:	f7ff fdf1 	bl	8009dcc <rcvr_datablock>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00a      	beq.n	800a206 <USER_SPI_read+0xa2>
				buff += 512;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a1f6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	603b      	str	r3, [r7, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1ed      	bne.n	800a1e0 <USER_SPI_read+0x7c>
 800a204:	e000      	b.n	800a208 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800a206:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a208:	2100      	movs	r1, #0
 800a20a:	200c      	movs	r0, #12
 800a20c:	f7ff fe39 	bl	8009e82 <send_cmd>
		}
	}
	despiselect();
 800a210:	f7ff fdb4 	bl	8009d7c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	bf14      	ite	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	2300      	moveq	r3, #0
 800a21e:	b2db      	uxtb	r3, r3
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000048 	.word	0x20000048
 800a22c:	20000f44 	.word	0x20000f44

0800a230 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <USER_SPI_write+0x1c>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <USER_SPI_write+0x20>
 800a24c:	2304      	movs	r3, #4
 800a24e:	e063      	b.n	800a318 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a250:	4b33      	ldr	r3, [pc, #204]	; (800a320 <USER_SPI_write+0xf0>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <USER_SPI_write+0x32>
 800a25e:	2303      	movs	r3, #3
 800a260:	e05a      	b.n	800a318 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a262:	4b2f      	ldr	r3, [pc, #188]	; (800a320 <USER_SPI_write+0xf0>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0304 	and.w	r3, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <USER_SPI_write+0x44>
 800a270:	2302      	movs	r3, #2
 800a272:	e051      	b.n	800a318 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a274:	4b2b      	ldr	r3, [pc, #172]	; (800a324 <USER_SPI_write+0xf4>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	f003 0308 	and.w	r3, r3, #8
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d102      	bne.n	800a286 <USER_SPI_write+0x56>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	025b      	lsls	r3, r3, #9
 800a284:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d110      	bne.n	800a2ae <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	2018      	movs	r0, #24
 800a290:	f7ff fdf7 	bl	8009e82 <send_cmd>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d136      	bne.n	800a308 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800a29a:	21fe      	movs	r1, #254	; 0xfe
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	f7ff fdbe 	bl	8009e1e <xmit_datablock>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d02f      	beq.n	800a308 <USER_SPI_write+0xd8>
			count = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	e02c      	b.n	800a308 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a2ae:	4b1d      	ldr	r3, [pc, #116]	; (800a324 <USER_SPI_write+0xf4>)
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	f003 0306 	and.w	r3, r3, #6
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <USER_SPI_write+0x92>
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	2097      	movs	r0, #151	; 0x97
 800a2be:	f7ff fde0 	bl	8009e82 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	2019      	movs	r0, #25
 800a2c6:	f7ff fddc 	bl	8009e82 <send_cmd>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d11b      	bne.n	800a308 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a2d0:	21fc      	movs	r1, #252	; 0xfc
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f7ff fda3 	bl	8009e1e <xmit_datablock>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00a      	beq.n	800a2f4 <USER_SPI_write+0xc4>
				buff += 512;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a2e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	603b      	str	r3, [r7, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1ee      	bne.n	800a2d0 <USER_SPI_write+0xa0>
 800a2f2:	e000      	b.n	800a2f6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800a2f4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a2f6:	21fd      	movs	r1, #253	; 0xfd
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	f7ff fd90 	bl	8009e1e <xmit_datablock>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USER_SPI_write+0xd8>
 800a304:	2301      	movs	r3, #1
 800a306:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800a308:	f7ff fd38 	bl	8009d7c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	bf14      	ite	ne
 800a312:	2301      	movne	r3, #1
 800a314:	2300      	moveq	r3, #0
 800a316:	b2db      	uxtb	r3, r3
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000048 	.word	0x20000048
 800a324:	20000f44 	.word	0x20000f44

0800a328 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08c      	sub	sp, #48	; 0x30
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	603a      	str	r2, [r7, #0]
 800a332:	71fb      	strb	r3, [r7, #7]
 800a334:	460b      	mov	r3, r1
 800a336:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <USER_SPI_ioctl+0x1a>
 800a33e:	2304      	movs	r3, #4
 800a340:	e15a      	b.n	800a5f8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a342:	4baf      	ldr	r3, [pc, #700]	; (800a600 <USER_SPI_ioctl+0x2d8>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d001      	beq.n	800a354 <USER_SPI_ioctl+0x2c>
 800a350:	2303      	movs	r3, #3
 800a352:	e151      	b.n	800a5f8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800a35a:	79bb      	ldrb	r3, [r7, #6]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	f200 8136 	bhi.w	800a5ce <USER_SPI_ioctl+0x2a6>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <USER_SPI_ioctl+0x40>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a37d 	.word	0x0800a37d
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a5cf 	.word	0x0800a5cf
 800a374:	0800a43d 	.word	0x0800a43d
 800a378:	0800a533 	.word	0x0800a533
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a37c:	f7ff fd0c 	bl	8009d98 <spiselect>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8127 	beq.w	800a5d6 <USER_SPI_ioctl+0x2ae>
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a38e:	e122      	b.n	800a5d6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a390:	2100      	movs	r1, #0
 800a392:	2009      	movs	r0, #9
 800a394:	f7ff fd75 	bl	8009e82 <send_cmd>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f040 811d 	bne.w	800a5da <USER_SPI_ioctl+0x2b2>
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	2110      	movs	r1, #16
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fd10 	bl	8009dcc <rcvr_datablock>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 8113 	beq.w	800a5da <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a3b4:	7b3b      	ldrb	r3, [r7, #12]
 800a3b6:	099b      	lsrs	r3, r3, #6
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d111      	bne.n	800a3e2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a3be:	7d7b      	ldrb	r3, [r7, #21]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	7d3b      	ldrb	r3, [r7, #20]
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	4413      	add	r3, r2
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	7cfb      	ldrb	r3, [r7, #19]
 800a3cc:	041b      	lsls	r3, r3, #16
 800a3ce:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a3d2:	4413      	add	r3, r2
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	029a      	lsls	r2, r3, #10
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e028      	b.n	800a434 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a3e2:	7c7b      	ldrb	r3, [r7, #17]
 800a3e4:	f003 030f 	and.w	r3, r3, #15
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	09db      	lsrs	r3, r3, #7
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	7d7b      	ldrb	r3, [r7, #21]
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	f003 0306 	and.w	r3, r3, #6
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	4413      	add	r3, r2
 800a402:	b2db      	uxtb	r3, r3
 800a404:	3302      	adds	r3, #2
 800a406:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a40a:	7d3b      	ldrb	r3, [r7, #20]
 800a40c:	099b      	lsrs	r3, r3, #6
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	461a      	mov	r2, r3
 800a412:	7cfb      	ldrb	r3, [r7, #19]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	441a      	add	r2, r3
 800a418:	7cbb      	ldrb	r3, [r7, #18]
 800a41a:	029b      	lsls	r3, r3, #10
 800a41c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a420:	4413      	add	r3, r2
 800a422:	3301      	adds	r3, #1
 800a424:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800a426:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a42a:	3b09      	subs	r3, #9
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	409a      	lsls	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a43a:	e0ce      	b.n	800a5da <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a43c:	4b71      	ldr	r3, [pc, #452]	; (800a604 <USER_SPI_ioctl+0x2dc>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d031      	beq.n	800a4ac <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a448:	2100      	movs	r1, #0
 800a44a:	208d      	movs	r0, #141	; 0x8d
 800a44c:	f7ff fd19 	bl	8009e82 <send_cmd>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	f040 80c3 	bne.w	800a5de <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800a458:	20ff      	movs	r0, #255	; 0xff
 800a45a:	f7ff fc1f 	bl	8009c9c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a45e:	f107 030c 	add.w	r3, r7, #12
 800a462:	2110      	movs	r1, #16
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fcb1 	bl	8009dcc <rcvr_datablock>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80b6 	beq.w	800a5de <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a472:	2330      	movs	r3, #48	; 0x30
 800a474:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a478:	e007      	b.n	800a48a <USER_SPI_ioctl+0x162>
 800a47a:	20ff      	movs	r0, #255	; 0xff
 800a47c:	f7ff fc0e 	bl	8009c9c <xchg_spi>
 800a480:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a484:	3b01      	subs	r3, #1
 800a486:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800a48a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1f3      	bne.n	800a47a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a492:	7dbb      	ldrb	r3, [r7, #22]
 800a494:	091b      	lsrs	r3, r3, #4
 800a496:	b2db      	uxtb	r3, r3
 800a498:	461a      	mov	r2, r3
 800a49a:	2310      	movs	r3, #16
 800a49c:	fa03 f202 	lsl.w	r2, r3, r2
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800a4aa:	e098      	b.n	800a5de <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	2009      	movs	r0, #9
 800a4b0:	f7ff fce7 	bl	8009e82 <send_cmd>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f040 8091 	bne.w	800a5de <USER_SPI_ioctl+0x2b6>
 800a4bc:	f107 030c 	add.w	r3, r7, #12
 800a4c0:	2110      	movs	r1, #16
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff fc82 	bl	8009dcc <rcvr_datablock>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8087 	beq.w	800a5de <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a4d0:	4b4c      	ldr	r3, [pc, #304]	; (800a604 <USER_SPI_ioctl+0x2dc>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d012      	beq.n	800a502 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a4e4:	7dfa      	ldrb	r2, [r7, #23]
 800a4e6:	09d2      	lsrs	r2, r2, #7
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	7e7b      	ldrb	r3, [r7, #25]
 800a4f0:	099b      	lsrs	r3, r3, #6
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e013      	b.n	800a52a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a502:	7dbb      	ldrb	r3, [r7, #22]
 800a504:	109b      	asrs	r3, r3, #2
 800a506:	b29b      	uxth	r3, r3
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	3301      	adds	r3, #1
 800a50e:	7dfa      	ldrb	r2, [r7, #23]
 800a510:	00d2      	lsls	r2, r2, #3
 800a512:	f002 0218 	and.w	r2, r2, #24
 800a516:	7df9      	ldrb	r1, [r7, #23]
 800a518:	0949      	lsrs	r1, r1, #5
 800a51a:	b2c9      	uxtb	r1, r1
 800a51c:	440a      	add	r2, r1
 800a51e:	3201      	adds	r2, #1
 800a520:	fb02 f303 	mul.w	r3, r2, r3
 800a524:	461a      	mov	r2, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800a530:	e055      	b.n	800a5de <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a532:	4b34      	ldr	r3, [pc, #208]	; (800a604 <USER_SPI_ioctl+0x2dc>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 0306 	and.w	r3, r3, #6
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d051      	beq.n	800a5e2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a53e:	f107 020c 	add.w	r2, r7, #12
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	210b      	movs	r1, #11
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff feee 	bl	800a328 <USER_SPI_ioctl>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d149      	bne.n	800a5e6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a552:	7b3b      	ldrb	r3, [r7, #12]
 800a554:	099b      	lsrs	r3, r3, #6
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <USER_SPI_ioctl+0x23e>
 800a55c:	7dbb      	ldrb	r3, [r7, #22]
 800a55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d041      	beq.n	800a5ea <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	623b      	str	r3, [r7, #32]
 800a56a:	6a3b      	ldr	r3, [r7, #32]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800a576:	4b23      	ldr	r3, [pc, #140]	; (800a604 <USER_SPI_ioctl+0x2dc>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	f003 0308 	and.w	r3, r3, #8
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d105      	bne.n	800a58e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	025b      	lsls	r3, r3, #9
 800a586:	62bb      	str	r3, [r7, #40]	; 0x28
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	025b      	lsls	r3, r3, #9
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a58e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a590:	2020      	movs	r0, #32
 800a592:	f7ff fc76 	bl	8009e82 <send_cmd>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d128      	bne.n	800a5ee <USER_SPI_ioctl+0x2c6>
 800a59c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a59e:	2021      	movs	r0, #33	; 0x21
 800a5a0:	f7ff fc6f 	bl	8009e82 <send_cmd>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d121      	bne.n	800a5ee <USER_SPI_ioctl+0x2c6>
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2026      	movs	r0, #38	; 0x26
 800a5ae:	f7ff fc68 	bl	8009e82 <send_cmd>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11a      	bne.n	800a5ee <USER_SPI_ioctl+0x2c6>
 800a5b8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a5bc:	f7ff fbbb 	bl	8009d36 <wait_ready>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d013      	beq.n	800a5ee <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800a5cc:	e00f      	b.n	800a5ee <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800a5ce:	2304      	movs	r3, #4
 800a5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a5d4:	e00c      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		break;
 800a5d6:	bf00      	nop
 800a5d8:	e00a      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		break;
 800a5da:	bf00      	nop
 800a5dc:	e008      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		break;
 800a5de:	bf00      	nop
 800a5e0:	e006      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a5e2:	bf00      	nop
 800a5e4:	e004      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a5e6:	bf00      	nop
 800a5e8:	e002      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a5ea:	bf00      	nop
 800a5ec:	e000      	b.n	800a5f0 <USER_SPI_ioctl+0x2c8>
		break;
 800a5ee:	bf00      	nop
	}

	despiselect();
 800a5f0:	f7ff fbc4 	bl	8009d7c <despiselect>

	return res;
 800a5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3730      	adds	r7, #48	; 0x30
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20000048 	.word	0x20000048
 800a604:	20000f44 	.word	0x20000f44

0800a608 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	4a08      	ldr	r2, [pc, #32]	; (800a638 <disk_status+0x30>)
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	4413      	add	r3, r2
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	79fa      	ldrb	r2, [r7, #7]
 800a620:	4905      	ldr	r1, [pc, #20]	; (800a638 <disk_status+0x30>)
 800a622:	440a      	add	r2, r1
 800a624:	7a12      	ldrb	r2, [r2, #8]
 800a626:	4610      	mov	r0, r2
 800a628:	4798      	blx	r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000f78 	.word	0x20000f78

0800a63c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	4a0d      	ldr	r2, [pc, #52]	; (800a684 <disk_initialize+0x48>)
 800a64e:	5cd3      	ldrb	r3, [r2, r3]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d111      	bne.n	800a678 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	4a0b      	ldr	r2, [pc, #44]	; (800a684 <disk_initialize+0x48>)
 800a658:	2101      	movs	r1, #1
 800a65a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	4a09      	ldr	r2, [pc, #36]	; (800a684 <disk_initialize+0x48>)
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	79fa      	ldrb	r2, [r7, #7]
 800a66a:	4906      	ldr	r1, [pc, #24]	; (800a684 <disk_initialize+0x48>)
 800a66c:	440a      	add	r2, r1
 800a66e:	7a12      	ldrb	r2, [r2, #8]
 800a670:	4610      	mov	r0, r2
 800a672:	4798      	blx	r3
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20000f78 	.word	0x20000f78

0800a688 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a688:	b590      	push	{r4, r7, lr}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60b9      	str	r1, [r7, #8]
 800a690:	607a      	str	r2, [r7, #4]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4603      	mov	r3, r0
 800a696:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4a0a      	ldr	r2, [pc, #40]	; (800a6c4 <disk_read+0x3c>)
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	689c      	ldr	r4, [r3, #8]
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	4a07      	ldr	r2, [pc, #28]	; (800a6c4 <disk_read+0x3c>)
 800a6a8:	4413      	add	r3, r2
 800a6aa:	7a18      	ldrb	r0, [r3, #8]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	47a0      	blx	r4
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd90      	pop	{r4, r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000f78 	.word	0x20000f78

0800a6c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	4a0a      	ldr	r2, [pc, #40]	; (800a704 <disk_write+0x3c>)
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	68dc      	ldr	r4, [r3, #12]
 800a6e4:	7bfb      	ldrb	r3, [r7, #15]
 800a6e6:	4a07      	ldr	r2, [pc, #28]	; (800a704 <disk_write+0x3c>)
 800a6e8:	4413      	add	r3, r2
 800a6ea:	7a18      	ldrb	r0, [r3, #8]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	47a0      	blx	r4
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	371c      	adds	r7, #28
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd90      	pop	{r4, r7, pc}
 800a702:	bf00      	nop
 800a704:	20000f78 	.word	0x20000f78

0800a708 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	603a      	str	r2, [r7, #0]
 800a712:	71fb      	strb	r3, [r7, #7]
 800a714:	460b      	mov	r3, r1
 800a716:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	4a09      	ldr	r2, [pc, #36]	; (800a740 <disk_ioctl+0x38>)
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	79fa      	ldrb	r2, [r7, #7]
 800a726:	4906      	ldr	r1, [pc, #24]	; (800a740 <disk_ioctl+0x38>)
 800a728:	440a      	add	r2, r1
 800a72a:	7a10      	ldrb	r0, [r2, #8]
 800a72c:	79b9      	ldrb	r1, [r7, #6]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	4798      	blx	r3
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
  return res;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	20000f78 	.word	0x20000f78

0800a744 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3301      	adds	r3, #1
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a754:	89fb      	ldrh	r3, [r7, #14]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	b21a      	sxth	r2, r3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	b21b      	sxth	r3, r3
 800a760:	4313      	orrs	r3, r2
 800a762:	b21b      	sxth	r3, r3
 800a764:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a766:	89fb      	ldrh	r3, [r7, #14]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3714      	adds	r7, #20
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	3303      	adds	r3, #3
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	3202      	adds	r2, #2
 800a78c:	7812      	ldrb	r2, [r2, #0]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	3201      	adds	r2, #1
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	021b      	lsls	r3, r3, #8
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7812      	ldrb	r2, [r2, #0]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr

0800a7ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	607a      	str	r2, [r7, #4]
 800a7cc:	887a      	ldrh	r2, [r7, #2]
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	887b      	ldrh	r3, [r7, #2]
 800a7d4:	0a1b      	lsrs	r3, r3, #8
 800a7d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	1c5a      	adds	r2, r3, #1
 800a7dc:	607a      	str	r2, [r7, #4]
 800a7de:	887a      	ldrh	r2, [r7, #2]
 800a7e0:	b2d2      	uxtb	r2, r2
 800a7e2:	701a      	strb	r2, [r3, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	607a      	str	r2, [r7, #4]
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	0a1b      	lsrs	r3, r3, #8
 800a80a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	1c5a      	adds	r2, r3, #1
 800a810:	607a      	str	r2, [r7, #4]
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	b2d2      	uxtb	r2, r2
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	607a      	str	r2, [r7, #4]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	b2d2      	uxtb	r2, r2
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	0a1b      	lsrs	r3, r3, #8
 800a82e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00d      	beq.n	800a87e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	1c53      	adds	r3, r2, #1
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	1c59      	adds	r1, r3, #1
 800a86c:	6179      	str	r1, [r7, #20]
 800a86e:	7812      	ldrb	r2, [r2, #0]
 800a870:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	3b01      	subs	r3, #1
 800a876:	607b      	str	r3, [r7, #4]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f1      	bne.n	800a862 <mem_cpy+0x1a>
	}
}
 800a87e:	bf00      	nop
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a88a:	b480      	push	{r7}
 800a88c:	b087      	sub	sp, #28
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	1c5a      	adds	r2, r3, #1
 800a89e:	617a      	str	r2, [r7, #20]
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	b2d2      	uxtb	r2, r2
 800a8a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	607b      	str	r3, [r7, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f3      	bne.n	800a89a <mem_set+0x10>
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a8c0:	b480      	push	{r7}
 800a8c2:	b089      	sub	sp, #36	; 0x24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	61fa      	str	r2, [r7, #28]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	61ba      	str	r2, [r7, #24]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	1acb      	subs	r3, r1, r3
 800a8ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	607b      	str	r3, [r7, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <mem_cmp+0x40>
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0eb      	beq.n	800a8d8 <mem_cmp+0x18>

	return r;
 800a900:	697b      	ldr	r3, [r7, #20]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3724      	adds	r7, #36	; 0x24
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a918:	e002      	b.n	800a920 <chk_chr+0x12>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3301      	adds	r3, #1
 800a91e:	607b      	str	r3, [r7, #4]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d005      	beq.n	800a934 <chk_chr+0x26>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	4293      	cmp	r3, r2
 800a932:	d1f2      	bne.n	800a91a <chk_chr+0xc>
	return *str;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	781b      	ldrb	r3, [r3, #0]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d009      	beq.n	800a966 <lock_fs+0x22>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	4618      	mov	r0, r3
 800a958:	f002 fa92 	bl	800ce80 <ff_req_grant>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <lock_fs+0x22>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <lock_fs+0x24>
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00d      	beq.n	800a99e <unlock_fs+0x2e>
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	2b0c      	cmp	r3, #12
 800a986:	d00a      	beq.n	800a99e <unlock_fs+0x2e>
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2b0b      	cmp	r3, #11
 800a98c:	d007      	beq.n	800a99e <unlock_fs+0x2e>
 800a98e:	78fb      	ldrb	r3, [r7, #3]
 800a990:	2b0f      	cmp	r3, #15
 800a992:	d004      	beq.n	800a99e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	4618      	mov	r0, r3
 800a99a:	f002 fa86 	bl	800ceaa <ff_rel_grant>
	}
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60bb      	str	r3, [r7, #8]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	e029      	b.n	800aa10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a9bc:	4a27      	ldr	r2, [pc, #156]	; (800aa5c <chk_lock+0xb4>)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	4413      	add	r3, r2
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d01d      	beq.n	800aa06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a9ca:	4a24      	ldr	r2, [pc, #144]	; (800aa5c <chk_lock+0xb4>)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	4413      	add	r3, r2
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d116      	bne.n	800aa0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a9dc:	4a1f      	ldr	r2, [pc, #124]	; (800aa5c <chk_lock+0xb4>)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	4413      	add	r3, r2
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d10c      	bne.n	800aa0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a9f0:	4a1a      	ldr	r2, [pc, #104]	; (800aa5c <chk_lock+0xb4>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	4413      	add	r3, r2
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d102      	bne.n	800aa0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aa04:	e007      	b.n	800aa16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aa06:	2301      	movs	r3, #1
 800aa08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	60fb      	str	r3, [r7, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d9d2      	bls.n	800a9bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d109      	bne.n	800aa30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d102      	bne.n	800aa28 <chk_lock+0x80>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	d101      	bne.n	800aa2c <chk_lock+0x84>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e010      	b.n	800aa4e <chk_lock+0xa6>
 800aa2c:	2312      	movs	r3, #18
 800aa2e:	e00e      	b.n	800aa4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d108      	bne.n	800aa48 <chk_lock+0xa0>
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <chk_lock+0xb4>)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	4413      	add	r3, r2
 800aa3e:	330c      	adds	r3, #12
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa46:	d101      	bne.n	800aa4c <chk_lock+0xa4>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	e000      	b.n	800aa4e <chk_lock+0xa6>
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20000f58 	.word	0x20000f58

0800aa60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa66:	2300      	movs	r3, #0
 800aa68:	607b      	str	r3, [r7, #4]
 800aa6a:	e002      	b.n	800aa72 <enq_lock+0x12>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	607b      	str	r3, [r7, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d806      	bhi.n	800aa86 <enq_lock+0x26>
 800aa78:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <enq_lock+0x40>)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	011b      	lsls	r3, r3, #4
 800aa7e:	4413      	add	r3, r2
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f2      	bne.n	800aa6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	bf14      	ite	ne
 800aa8c:	2301      	movne	r3, #1
 800aa8e:	2300      	moveq	r3, #0
 800aa90:	b2db      	uxtb	r3, r3
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	370c      	adds	r7, #12
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	20000f58 	.word	0x20000f58

0800aaa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	e01f      	b.n	800aaf4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aab4:	4a41      	ldr	r2, [pc, #260]	; (800abbc <inc_lock+0x118>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	011b      	lsls	r3, r3, #4
 800aaba:	4413      	add	r3, r2
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d113      	bne.n	800aaee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aac6:	4a3d      	ldr	r2, [pc, #244]	; (800abbc <inc_lock+0x118>)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	4413      	add	r3, r2
 800aace:	3304      	adds	r3, #4
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d109      	bne.n	800aaee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aada:	4a38      	ldr	r2, [pc, #224]	; (800abbc <inc_lock+0x118>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	011b      	lsls	r3, r3, #4
 800aae0:	4413      	add	r3, r2
 800aae2:	3308      	adds	r3, #8
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d006      	beq.n	800aafc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d9dc      	bls.n	800aab4 <inc_lock+0x10>
 800aafa:	e000      	b.n	800aafe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aafc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d132      	bne.n	800ab6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	e002      	b.n	800ab10 <inc_lock+0x6c>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d806      	bhi.n	800ab24 <inc_lock+0x80>
 800ab16:	4a29      	ldr	r2, [pc, #164]	; (800abbc <inc_lock+0x118>)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	011b      	lsls	r3, r3, #4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f2      	bne.n	800ab0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d101      	bne.n	800ab2e <inc_lock+0x8a>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	e040      	b.n	800abb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4922      	ldr	r1, [pc, #136]	; (800abbc <inc_lock+0x118>)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	440b      	add	r3, r1
 800ab3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689a      	ldr	r2, [r3, #8]
 800ab40:	491e      	ldr	r1, [pc, #120]	; (800abbc <inc_lock+0x118>)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	440b      	add	r3, r1
 800ab48:	3304      	adds	r3, #4
 800ab4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	695a      	ldr	r2, [r3, #20]
 800ab50:	491a      	ldr	r1, [pc, #104]	; (800abbc <inc_lock+0x118>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	440b      	add	r3, r1
 800ab58:	3308      	adds	r3, #8
 800ab5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ab5c:	4a17      	ldr	r2, [pc, #92]	; (800abbc <inc_lock+0x118>)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	011b      	lsls	r3, r3, #4
 800ab62:	4413      	add	r3, r2
 800ab64:	330c      	adds	r3, #12
 800ab66:	2200      	movs	r2, #0
 800ab68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d009      	beq.n	800ab84 <inc_lock+0xe0>
 800ab70:	4a12      	ldr	r2, [pc, #72]	; (800abbc <inc_lock+0x118>)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	4413      	add	r3, r2
 800ab78:	330c      	adds	r3, #12
 800ab7a:	881b      	ldrh	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <inc_lock+0xe0>
 800ab80:	2300      	movs	r3, #0
 800ab82:	e015      	b.n	800abb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d108      	bne.n	800ab9c <inc_lock+0xf8>
 800ab8a:	4a0c      	ldr	r2, [pc, #48]	; (800abbc <inc_lock+0x118>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	4413      	add	r3, r2
 800ab92:	330c      	adds	r3, #12
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	3301      	adds	r3, #1
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	e001      	b.n	800aba0 <inc_lock+0xfc>
 800ab9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aba0:	4906      	ldr	r1, [pc, #24]	; (800abbc <inc_lock+0x118>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	011b      	lsls	r3, r3, #4
 800aba6:	440b      	add	r3, r1
 800aba8:	330c      	adds	r3, #12
 800abaa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3301      	adds	r3, #1
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	20000f58 	.word	0x20000f58

0800abc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	3b01      	subs	r3, #1
 800abcc:	607b      	str	r3, [r7, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d825      	bhi.n	800ac20 <dec_lock+0x60>
		n = Files[i].ctr;
 800abd4:	4a17      	ldr	r2, [pc, #92]	; (800ac34 <dec_lock+0x74>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	011b      	lsls	r3, r3, #4
 800abda:	4413      	add	r3, r2
 800abdc:	330c      	adds	r3, #12
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800abe2:	89fb      	ldrh	r3, [r7, #14]
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe8:	d101      	bne.n	800abee <dec_lock+0x2e>
 800abea:	2300      	movs	r3, #0
 800abec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800abee:	89fb      	ldrh	r3, [r7, #14]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <dec_lock+0x3a>
 800abf4:	89fb      	ldrh	r3, [r7, #14]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800abfa:	4a0e      	ldr	r2, [pc, #56]	; (800ac34 <dec_lock+0x74>)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	4413      	add	r3, r2
 800ac02:	330c      	adds	r3, #12
 800ac04:	89fa      	ldrh	r2, [r7, #14]
 800ac06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ac08:	89fb      	ldrh	r3, [r7, #14]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d105      	bne.n	800ac1a <dec_lock+0x5a>
 800ac0e:	4a09      	ldr	r2, [pc, #36]	; (800ac34 <dec_lock+0x74>)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	4413      	add	r3, r2
 800ac16:	2200      	movs	r2, #0
 800ac18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	737b      	strb	r3, [r7, #13]
 800ac1e:	e001      	b.n	800ac24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ac20:	2302      	movs	r3, #2
 800ac22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ac24:	7b7b      	ldrb	r3, [r7, #13]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20000f58 	.word	0x20000f58

0800ac38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	e010      	b.n	800ac68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ac46:	4a0d      	ldr	r2, [pc, #52]	; (800ac7c <clear_lock+0x44>)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	4413      	add	r3, r2
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d105      	bne.n	800ac62 <clear_lock+0x2a>
 800ac56:	4a09      	ldr	r2, [pc, #36]	; (800ac7c <clear_lock+0x44>)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	60fb      	str	r3, [r7, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d9eb      	bls.n	800ac46 <clear_lock+0xe>
	}
}
 800ac6e:	bf00      	nop
 800ac70:	bf00      	nop
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	20000f58 	.word	0x20000f58

0800ac80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	78db      	ldrb	r3, [r3, #3]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d034      	beq.n	800acfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7858      	ldrb	r0, [r3, #1]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800aca4:	2301      	movs	r3, #1
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	f7ff fd0e 	bl	800a6c8 <disk_write>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	73fb      	strb	r3, [r7, #15]
 800acb6:	e022      	b.n	800acfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	1ad2      	subs	r2, r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	429a      	cmp	r2, r3
 800accc:	d217      	bcs.n	800acfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	789b      	ldrb	r3, [r3, #2]
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	e010      	b.n	800acf8 <sync_window+0x78>
					wsect += fs->fsize;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	697a      	ldr	r2, [r7, #20]
 800acdc:	4413      	add	r3, r2
 800acde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7858      	ldrb	r0, [r3, #1]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acea:	2301      	movs	r3, #1
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	f7ff fceb 	bl	800a6c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	3b01      	subs	r3, #1
 800acf6:	613b      	str	r3, [r7, #16]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d8eb      	bhi.n	800acd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d01b      	beq.n	800ad58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7ff ffad 	bl	800ac80 <sync_window>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ad2a:	7bfb      	ldrb	r3, [r7, #15]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d113      	bne.n	800ad58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7858      	ldrb	r0, [r3, #1]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	f7ff fca3 	bl	800a688 <disk_read>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d004      	beq.n	800ad52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f7ff ff87 	bl	800ac80 <sync_window>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d158      	bne.n	800ae2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d148      	bne.n	800ae16 <sync_fs+0xb2>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	791b      	ldrb	r3, [r3, #4]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d144      	bne.n	800ae16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	3334      	adds	r3, #52	; 0x34
 800ad90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff fd77 	bl	800a88a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	3334      	adds	r3, #52	; 0x34
 800ada0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ada4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fd06 	bl	800a7ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3334      	adds	r3, #52	; 0x34
 800adb2:	4921      	ldr	r1, [pc, #132]	; (800ae38 <sync_fs+0xd4>)
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7ff fd1b 	bl	800a7f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3334      	adds	r3, #52	; 0x34
 800adbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800adc2:	491e      	ldr	r1, [pc, #120]	; (800ae3c <sync_fs+0xd8>)
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fd13 	bl	800a7f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3334      	adds	r3, #52	; 0x34
 800adce:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	695b      	ldr	r3, [r3, #20]
 800add6:	4619      	mov	r1, r3
 800add8:	4610      	mov	r0, r2
 800adda:	f7ff fd09 	bl	800a7f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3334      	adds	r3, #52	; 0x34
 800ade2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fcff 	bl	800a7f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7858      	ldrb	r0, [r3, #1]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	f7ff fc5c 	bl	800a6c8 <disk_write>
			fs->fsi_flag = 0;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fc72 	bl	800a708 <disk_ioctl>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <sync_fs+0xca>
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	41615252 	.word	0x41615252
 800ae3c:	61417272 	.word	0x61417272

0800ae40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	3b02      	subs	r3, #2
 800ae4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	3b02      	subs	r3, #2
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d301      	bcc.n	800ae60 <clust2sect+0x20>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e008      	b.n	800ae72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	895b      	ldrh	r3, [r3, #10]
 800ae64:	461a      	mov	r2, r3
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	fb03 f202 	mul.w	r2, r3, r2
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	4413      	add	r3, r2
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b086      	sub	sp, #24
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d904      	bls.n	800ae9e <get_fat+0x20>
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d302      	bcc.n	800aea4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ae9e:	2301      	movs	r3, #1
 800aea0:	617b      	str	r3, [r7, #20]
 800aea2:	e08f      	b.n	800afc4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aea4:	f04f 33ff 	mov.w	r3, #4294967295
 800aea8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d062      	beq.n	800af78 <get_fat+0xfa>
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	dc7c      	bgt.n	800afb0 <get_fat+0x132>
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d002      	beq.n	800aec0 <get_fat+0x42>
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d042      	beq.n	800af44 <get_fat+0xc6>
 800aebe:	e077      	b.n	800afb0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	085b      	lsrs	r3, r3, #1
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	4413      	add	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	0a5b      	lsrs	r3, r3, #9
 800aed6:	4413      	add	r3, r2
 800aed8:	4619      	mov	r1, r3
 800aeda:	6938      	ldr	r0, [r7, #16]
 800aedc:	f7ff ff14 	bl	800ad08 <move_window>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d167      	bne.n	800afb6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	60fa      	str	r2, [r7, #12]
 800aeec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4413      	add	r3, r2
 800aef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aef8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	0a5b      	lsrs	r3, r3, #9
 800af02:	4413      	add	r3, r2
 800af04:	4619      	mov	r1, r3
 800af06:	6938      	ldr	r0, [r7, #16]
 800af08:	f7ff fefe 	bl	800ad08 <move_window>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d153      	bne.n	800afba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	4413      	add	r3, r2
 800af1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af20:	021b      	lsls	r3, r3, #8
 800af22:	461a      	mov	r2, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	4313      	orrs	r3, r2
 800af28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	2b00      	cmp	r3, #0
 800af32:	d002      	beq.n	800af3a <get_fat+0xbc>
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	091b      	lsrs	r3, r3, #4
 800af38:	e002      	b.n	800af40 <get_fat+0xc2>
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af40:	617b      	str	r3, [r7, #20]
			break;
 800af42:	e03f      	b.n	800afc4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	0a1b      	lsrs	r3, r3, #8
 800af4c:	4413      	add	r3, r2
 800af4e:	4619      	mov	r1, r3
 800af50:	6938      	ldr	r0, [r7, #16]
 800af52:	f7ff fed9 	bl	800ad08 <move_window>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d130      	bne.n	800afbe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	005b      	lsls	r3, r3, #1
 800af66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af6a:	4413      	add	r3, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fbe9 	bl	800a744 <ld_word>
 800af72:	4603      	mov	r3, r0
 800af74:	617b      	str	r3, [r7, #20]
			break;
 800af76:	e025      	b.n	800afc4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	09db      	lsrs	r3, r3, #7
 800af80:	4413      	add	r3, r2
 800af82:	4619      	mov	r1, r3
 800af84:	6938      	ldr	r0, [r7, #16]
 800af86:	f7ff febf 	bl	800ad08 <move_window>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d118      	bne.n	800afc2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af9e:	4413      	add	r3, r2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff fbe7 	bl	800a774 <ld_dword>
 800afa6:	4603      	mov	r3, r0
 800afa8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800afac:	617b      	str	r3, [r7, #20]
			break;
 800afae:	e009      	b.n	800afc4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800afb0:	2301      	movs	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	e006      	b.n	800afc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afb6:	bf00      	nop
 800afb8:	e004      	b.n	800afc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800afba:	bf00      	nop
 800afbc:	e002      	b.n	800afc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800afbe:	bf00      	nop
 800afc0:	e000      	b.n	800afc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800afc2:	bf00      	nop
		}
	}

	return val;
 800afc4:	697b      	ldr	r3, [r7, #20]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3718      	adds	r7, #24
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800afce:	b590      	push	{r4, r7, lr}
 800afd0:	b089      	sub	sp, #36	; 0x24
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800afda:	2302      	movs	r3, #2
 800afdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	f240 80d2 	bls.w	800b18a <put_fat+0x1bc>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	429a      	cmp	r2, r3
 800afee:	f080 80cc 	bcs.w	800b18a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	f000 8096 	beq.w	800b128 <put_fat+0x15a>
 800affc:	2b03      	cmp	r3, #3
 800affe:	f300 80cd 	bgt.w	800b19c <put_fat+0x1ce>
 800b002:	2b01      	cmp	r3, #1
 800b004:	d002      	beq.n	800b00c <put_fat+0x3e>
 800b006:	2b02      	cmp	r3, #2
 800b008:	d06e      	beq.n	800b0e8 <put_fat+0x11a>
 800b00a:	e0c7      	b.n	800b19c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	085b      	lsrs	r3, r3, #1
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	4413      	add	r3, r2
 800b018:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	0a5b      	lsrs	r3, r3, #9
 800b022:	4413      	add	r3, r2
 800b024:	4619      	mov	r1, r3
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7ff fe6e 	bl	800ad08 <move_window>
 800b02c:	4603      	mov	r3, r0
 800b02e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b030:	7ffb      	ldrb	r3, [r7, #31]
 800b032:	2b00      	cmp	r3, #0
 800b034:	f040 80ab 	bne.w	800b18e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	1c59      	adds	r1, r3, #1
 800b042:	61b9      	str	r1, [r7, #24]
 800b044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b048:	4413      	add	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00d      	beq.n	800b072 <put_fat+0xa4>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	b25b      	sxtb	r3, r3
 800b05c:	f003 030f 	and.w	r3, r3, #15
 800b060:	b25a      	sxtb	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	b2db      	uxtb	r3, r3
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	b25b      	sxtb	r3, r3
 800b06a:	4313      	orrs	r3, r2
 800b06c:	b25b      	sxtb	r3, r3
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	e001      	b.n	800b076 <put_fat+0xa8>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2201      	movs	r2, #1
 800b07e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	0a5b      	lsrs	r3, r3, #9
 800b088:	4413      	add	r3, r2
 800b08a:	4619      	mov	r1, r3
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7ff fe3b 	bl	800ad08 <move_window>
 800b092:	4603      	mov	r3, r0
 800b094:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b096:	7ffb      	ldrb	r3, [r7, #31]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d17a      	bne.n	800b192 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a8:	4413      	add	r3, r2
 800b0aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d003      	beq.n	800b0be <put_fat+0xf0>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	091b      	lsrs	r3, r3, #4
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	e00e      	b.n	800b0dc <put_fat+0x10e>
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b25b      	sxtb	r3, r3
 800b0c4:	f023 030f 	bic.w	r3, r3, #15
 800b0c8:	b25a      	sxtb	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	0a1b      	lsrs	r3, r3, #8
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	f003 030f 	and.w	r3, r3, #15
 800b0d4:	b25b      	sxtb	r3, r3
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	70da      	strb	r2, [r3, #3]
			break;
 800b0e6:	e059      	b.n	800b19c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	0a1b      	lsrs	r3, r3, #8
 800b0f0:	4413      	add	r3, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff fe07 	bl	800ad08 <move_window>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0fe:	7ffb      	ldrb	r3, [r7, #31]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d148      	bne.n	800b196 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b112:	4413      	add	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	b292      	uxth	r2, r2
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff fb4d 	bl	800a7ba <st_word>
			fs->wflag = 1;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2201      	movs	r2, #1
 800b124:	70da      	strb	r2, [r3, #3]
			break;
 800b126:	e039      	b.n	800b19c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	09db      	lsrs	r3, r3, #7
 800b130:	4413      	add	r3, r2
 800b132:	4619      	mov	r1, r3
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fde7 	bl	800ad08 <move_window>
 800b13a:	4603      	mov	r3, r0
 800b13c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b13e:	7ffb      	ldrb	r3, [r7, #31]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d12a      	bne.n	800b19a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b158:	4413      	add	r3, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff fb0a 	bl	800a774 <ld_dword>
 800b160:	4603      	mov	r3, r0
 800b162:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b166:	4323      	orrs	r3, r4
 800b168:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b178:	4413      	add	r3, r2
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fb37 	bl	800a7f0 <st_dword>
			fs->wflag = 1;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	70da      	strb	r2, [r3, #3]
			break;
 800b188:	e008      	b.n	800b19c <put_fat+0x1ce>
		}
	}
 800b18a:	bf00      	nop
 800b18c:	e006      	b.n	800b19c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b18e:	bf00      	nop
 800b190:	e004      	b.n	800b19c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b192:	bf00      	nop
 800b194:	e002      	b.n	800b19c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b196:	bf00      	nop
 800b198:	e000      	b.n	800b19c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b19a:	bf00      	nop
	return res;
 800b19c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3724      	adds	r7, #36	; 0x24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd90      	pop	{r4, r7, pc}

0800b1a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d904      	bls.n	800b1cc <remove_chain+0x26>
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d301      	bcc.n	800b1d0 <remove_chain+0x2a>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e04b      	b.n	800b268 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00c      	beq.n	800b1f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	69b8      	ldr	r0, [r7, #24]
 800b1de:	f7ff fef6 	bl	800afce <put_fat>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b1e6:	7ffb      	ldrb	r3, [r7, #31]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <remove_chain+0x4a>
 800b1ec:	7ffb      	ldrb	r3, [r7, #31]
 800b1ee:	e03b      	b.n	800b268 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b1f0:	68b9      	ldr	r1, [r7, #8]
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fe43 	bl	800ae7e <get_fat>
 800b1f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d031      	beq.n	800b264 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <remove_chain+0x64>
 800b206:	2302      	movs	r3, #2
 800b208:	e02e      	b.n	800b268 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d101      	bne.n	800b216 <remove_chain+0x70>
 800b212:	2301      	movs	r3, #1
 800b214:	e028      	b.n	800b268 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b216:	2200      	movs	r2, #0
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	69b8      	ldr	r0, [r7, #24]
 800b21c:	f7ff fed7 	bl	800afce <put_fat>
 800b220:	4603      	mov	r3, r0
 800b222:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b224:	7ffb      	ldrb	r3, [r7, #31]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <remove_chain+0x88>
 800b22a:	7ffb      	ldrb	r3, [r7, #31]
 800b22c:	e01c      	b.n	800b268 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	3b02      	subs	r3, #2
 800b238:	429a      	cmp	r2, r3
 800b23a:	d20b      	bcs.n	800b254 <remove_chain+0xae>
			fs->free_clst++;
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	791b      	ldrb	r3, [r3, #4]
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	699b      	ldr	r3, [r3, #24]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d3c6      	bcc.n	800b1f0 <remove_chain+0x4a>
 800b262:	e000      	b.n	800b266 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b264:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3720      	adds	r7, #32
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d10d      	bne.n	800b2a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <create_chain+0x2c>
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d31b      	bcc.n	800b2d4 <create_chain+0x64>
 800b29c:	2301      	movs	r3, #1
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	e018      	b.n	800b2d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7ff fdea 	bl	800ae7e <get_fat>
 800b2aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d801      	bhi.n	800b2b6 <create_chain+0x46>
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e070      	b.n	800b398 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2bc:	d101      	bne.n	800b2c2 <create_chain+0x52>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	e06a      	b.n	800b398 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d201      	bcs.n	800b2d0 <create_chain+0x60>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	e063      	b.n	800b398 <create_chain+0x128>
		scl = clst;
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	69fa      	ldr	r2, [r7, #28]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d307      	bcc.n	800b2f8 <create_chain+0x88>
				ncl = 2;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d901      	bls.n	800b2f8 <create_chain+0x88>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e04f      	b.n	800b398 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b2f8:	69f9      	ldr	r1, [r7, #28]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff fdbf 	bl	800ae7e <get_fat>
 800b300:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00e      	beq.n	800b326 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d003      	beq.n	800b316 <create_chain+0xa6>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b314:	d101      	bne.n	800b31a <create_chain+0xaa>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	e03e      	b.n	800b398 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b31a:	69fa      	ldr	r2, [r7, #28]
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d1da      	bne.n	800b2d8 <create_chain+0x68>
 800b322:	2300      	movs	r3, #0
 800b324:	e038      	b.n	800b398 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b326:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b328:	f04f 32ff 	mov.w	r2, #4294967295
 800b32c:	69f9      	ldr	r1, [r7, #28]
 800b32e:	6938      	ldr	r0, [r7, #16]
 800b330:	f7ff fe4d 	bl	800afce <put_fat>
 800b334:	4603      	mov	r3, r0
 800b336:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d109      	bne.n	800b352 <create_chain+0xe2>
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d006      	beq.n	800b352 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6938      	ldr	r0, [r7, #16]
 800b34a:	f7ff fe40 	bl	800afce <put_fat>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d116      	bne.n	800b386 <create_chain+0x116>
		fs->last_clst = ncl;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	695a      	ldr	r2, [r3, #20]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	3b02      	subs	r3, #2
 800b368:	429a      	cmp	r2, r3
 800b36a:	d804      	bhi.n	800b376 <create_chain+0x106>
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	1e5a      	subs	r2, r3, #1
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	791b      	ldrb	r3, [r3, #4]
 800b37a:	f043 0301 	orr.w	r3, r3, #1
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	711a      	strb	r2, [r3, #4]
 800b384:	e007      	b.n	800b396 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d102      	bne.n	800b392 <create_chain+0x122>
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295
 800b390:	e000      	b.n	800b394 <create_chain+0x124>
 800b392:	2301      	movs	r3, #1
 800b394:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b396:	69fb      	ldr	r3, [r7, #28]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3720      	adds	r7, #32
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	0a5b      	lsrs	r3, r3, #9
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	8952      	ldrh	r2, [r2, #10]
 800b3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	1d1a      	adds	r2, r3, #4
 800b3ca:	613a      	str	r2, [r7, #16]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d101      	bne.n	800b3da <clmt_clust+0x3a>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e010      	b.n	800b3fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d307      	bcc.n	800b3f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	617b      	str	r3, [r7, #20]
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3f0:	e7e9      	b.n	800b3c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b3f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	4413      	add	r3, r2
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b086      	sub	sp, #24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b41e:	d204      	bcs.n	800b42a <dir_sdi+0x22>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <dir_sdi+0x26>
		return FR_INT_ERR;
 800b42a:	2302      	movs	r3, #2
 800b42c:	e063      	b.n	800b4f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d106      	bne.n	800b44e <dir_sdi+0x46>
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d902      	bls.n	800b44e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10c      	bne.n	800b46e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	095b      	lsrs	r3, r3, #5
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	8912      	ldrh	r2, [r2, #8]
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d301      	bcc.n	800b464 <dir_sdi+0x5c>
 800b460:	2302      	movs	r3, #2
 800b462:	e048      	b.n	800b4f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	61da      	str	r2, [r3, #28]
 800b46c:	e029      	b.n	800b4c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	895b      	ldrh	r3, [r3, #10]
 800b472:	025b      	lsls	r3, r3, #9
 800b474:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b476:	e019      	b.n	800b4ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6979      	ldr	r1, [r7, #20]
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7ff fcfe 	bl	800ae7e <get_fat>
 800b482:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	d101      	bne.n	800b490 <dir_sdi+0x88>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e032      	b.n	800b4f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b01      	cmp	r3, #1
 800b494:	d904      	bls.n	800b4a0 <dir_sdi+0x98>
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	699b      	ldr	r3, [r3, #24]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d301      	bcc.n	800b4a4 <dir_sdi+0x9c>
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	e028      	b.n	800b4f6 <dir_sdi+0xee>
			ofs -= csz;
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d2e1      	bcs.n	800b478 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b4b4:	6979      	ldr	r1, [r7, #20]
 800b4b6:	6938      	ldr	r0, [r7, #16]
 800b4b8:	f7ff fcc2 	bl	800ae40 <clust2sect>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d101      	bne.n	800b4d4 <dir_sdi+0xcc>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e010      	b.n	800b4f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	69da      	ldr	r2, [r3, #28]
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	0a5b      	lsrs	r3, r3, #9
 800b4dc:	441a      	add	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ee:	441a      	add	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b086      	sub	sp, #24
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	3320      	adds	r3, #32
 800b514:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <dir_next+0x28>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b524:	d301      	bcc.n	800b52a <dir_next+0x2c>
 800b526:	2304      	movs	r3, #4
 800b528:	e0aa      	b.n	800b680 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	2b00      	cmp	r3, #0
 800b532:	f040 8098 	bne.w	800b666 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10b      	bne.n	800b560 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	095b      	lsrs	r3, r3, #5
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	8912      	ldrh	r2, [r2, #8]
 800b550:	4293      	cmp	r3, r2
 800b552:	f0c0 8088 	bcc.w	800b666 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	61da      	str	r2, [r3, #28]
 800b55c:	2304      	movs	r3, #4
 800b55e:	e08f      	b.n	800b680 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	0a5b      	lsrs	r3, r3, #9
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	8952      	ldrh	r2, [r2, #10]
 800b568:	3a01      	subs	r2, #1
 800b56a:	4013      	ands	r3, r2
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d17a      	bne.n	800b666 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7ff fc80 	bl	800ae7e <get_fat>
 800b57e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d801      	bhi.n	800b58a <dir_next+0x8c>
 800b586:	2302      	movs	r3, #2
 800b588:	e07a      	b.n	800b680 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d101      	bne.n	800b596 <dir_next+0x98>
 800b592:	2301      	movs	r3, #1
 800b594:	e074      	b.n	800b680 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d358      	bcc.n	800b652 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d104      	bne.n	800b5b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	61da      	str	r2, [r3, #28]
 800b5ac:	2304      	movs	r3, #4
 800b5ae:	e067      	b.n	800b680 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f7ff fe59 	bl	800b270 <create_chain>
 800b5be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <dir_next+0xcc>
 800b5c6:	2307      	movs	r3, #7
 800b5c8:	e05a      	b.n	800b680 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d101      	bne.n	800b5d4 <dir_next+0xd6>
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e055      	b.n	800b680 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5da:	d101      	bne.n	800b5e0 <dir_next+0xe2>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e04f      	b.n	800b680 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff fb4d 	bl	800ac80 <sync_window>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d001      	beq.n	800b5f0 <dir_next+0xf2>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e047      	b.n	800b680 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3334      	adds	r3, #52	; 0x34
 800b5f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7ff f945 	bl	800a88a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	6979      	ldr	r1, [r7, #20]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7ff fc1a 	bl	800ae40 <clust2sect>
 800b60c:	4602      	mov	r2, r0
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	631a      	str	r2, [r3, #48]	; 0x30
 800b612:	e012      	b.n	800b63a <dir_next+0x13c>
						fs->wflag = 1;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2201      	movs	r2, #1
 800b618:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff fb30 	bl	800ac80 <sync_window>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <dir_next+0x12c>
 800b626:	2301      	movs	r3, #1
 800b628:	e02a      	b.n	800b680 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3301      	adds	r3, #1
 800b62e:	613b      	str	r3, [r7, #16]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b634:	1c5a      	adds	r2, r3, #1
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	631a      	str	r2, [r3, #48]	; 0x30
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	895b      	ldrh	r3, [r3, #10]
 800b63e:	461a      	mov	r2, r3
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	4293      	cmp	r3, r2
 800b644:	d3e6      	bcc.n	800b614 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	1ad2      	subs	r2, r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b658:	6979      	ldr	r1, [r7, #20]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fbf0 	bl	800ae40 <clust2sect>
 800b660:	4602      	mov	r2, r0
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	441a      	add	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b698:	2100      	movs	r1, #0
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff feb4 	bl	800b408 <dir_sdi>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d12b      	bne.n	800b702 <dir_alloc+0x7a>
		n = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	69db      	ldr	r3, [r3, #28]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f7ff fb27 	bl	800ad08 <move_window>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d11d      	bne.n	800b700 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2be5      	cmp	r3, #229	; 0xe5
 800b6cc:	d004      	beq.n	800b6d8 <dir_alloc+0x50>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d107      	bne.n	800b6e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	3301      	adds	r3, #1
 800b6dc:	613b      	str	r3, [r7, #16]
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d102      	bne.n	800b6ec <dir_alloc+0x64>
 800b6e6:	e00c      	b.n	800b702 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff ff05 	bl	800b4fe <dir_next>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0d7      	beq.n	800b6ae <dir_alloc+0x26>
 800b6fe:	e000      	b.n	800b702 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b700:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	2b04      	cmp	r3, #4
 800b706:	d101      	bne.n	800b70c <dir_alloc+0x84>
 800b708:	2307      	movs	r3, #7
 800b70a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
 800b71e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	331a      	adds	r3, #26
 800b724:	4618      	mov	r0, r3
 800b726:	f7ff f80d 	bl	800a744 <ld_word>
 800b72a:	4603      	mov	r3, r0
 800b72c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b03      	cmp	r3, #3
 800b734:	d109      	bne.n	800b74a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	3314      	adds	r3, #20
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff f802 	bl	800a744 <ld_word>
 800b740:	4603      	mov	r3, r0
 800b742:	041b      	lsls	r3, r3, #16
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	4313      	orrs	r3, r2
 800b748:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b74a:	68fb      	ldr	r3, [r7, #12]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	331a      	adds	r3, #26
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	b292      	uxth	r2, r2
 800b768:	4611      	mov	r1, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff f825 	bl	800a7ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b03      	cmp	r3, #3
 800b776:	d109      	bne.n	800b78c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f103 0214 	add.w	r2, r3, #20
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	0c1b      	lsrs	r3, r3, #16
 800b782:	b29b      	uxth	r3, r3
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f7ff f817 	bl	800a7ba <st_word>
	}
}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff fe2f 	bl	800b408 <dir_sdi>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <dir_find+0x24>
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	e03e      	b.n	800b836 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6938      	ldr	r0, [r7, #16]
 800b7c0:	f7ff faa2 	bl	800ad08 <move_window>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b7c8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d12f      	bne.n	800b82e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <dir_find+0x4e>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	75fb      	strb	r3, [r7, #23]
 800b7e0:	e028      	b.n	800b834 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	330b      	adds	r3, #11
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	330b      	adds	r3, #11
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	f003 0308 	and.w	r3, r3, #8
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10a      	bne.n	800b81a <dir_find+0x86>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a18      	ldr	r0, [r3, #32]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3324      	adds	r3, #36	; 0x24
 800b80c:	220b      	movs	r2, #11
 800b80e:	4619      	mov	r1, r3
 800b810:	f7ff f856 	bl	800a8c0 <mem_cmp>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00b      	beq.n	800b832 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b81a:	2100      	movs	r1, #0
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f7ff fe6e 	bl	800b4fe <dir_next>
 800b822:	4603      	mov	r3, r0
 800b824:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0c5      	beq.n	800b7b8 <dir_find+0x24>
 800b82c:	e002      	b.n	800b834 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b82e:	bf00      	nop
 800b830:	e000      	b.n	800b834 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b832:	bf00      	nop

	return res;
 800b834:	7dfb      	ldrb	r3, [r7, #23]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3718      	adds	r7, #24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b84c:	2101      	movs	r1, #1
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff ff1a 	bl	800b688 <dir_alloc>
 800b854:	4603      	mov	r3, r0
 800b856:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b858:	7bfb      	ldrb	r3, [r7, #15]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d11c      	bne.n	800b898 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	4619      	mov	r1, r3
 800b864:	68b8      	ldr	r0, [r7, #8]
 800b866:	f7ff fa4f 	bl	800ad08 <move_window>
 800b86a:	4603      	mov	r3, r0
 800b86c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d111      	bne.n	800b898 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	2220      	movs	r2, #32
 800b87a:	2100      	movs	r1, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff f804 	bl	800a88a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a18      	ldr	r0, [r3, #32]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	3324      	adds	r3, #36	; 0x24
 800b88a:	220b      	movs	r2, #11
 800b88c:	4619      	mov	r1, r3
 800b88e:	f7fe ffdb 	bl	800a848 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	2201      	movs	r2, #1
 800b896:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3324      	adds	r3, #36	; 0x24
 800b8b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b8ba:	220b      	movs	r2, #11
 800b8bc:	2120      	movs	r1, #32
 800b8be:	68b8      	ldr	r0, [r7, #8]
 800b8c0:	f7fe ffe3 	bl	800a88a <mem_set>
	si = i = 0; ni = 8;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	613b      	str	r3, [r7, #16]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	61fb      	str	r3, [r7, #28]
 800b8cc:	2308      	movs	r3, #8
 800b8ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	61fa      	str	r2, [r7, #28]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	4413      	add	r3, r2
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8de:	7efb      	ldrb	r3, [r7, #27]
 800b8e0:	2b20      	cmp	r3, #32
 800b8e2:	d94e      	bls.n	800b982 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b8e4:	7efb      	ldrb	r3, [r7, #27]
 800b8e6:	2b2f      	cmp	r3, #47	; 0x2f
 800b8e8:	d006      	beq.n	800b8f8 <create_name+0x54>
 800b8ea:	7efb      	ldrb	r3, [r7, #27]
 800b8ec:	2b5c      	cmp	r3, #92	; 0x5c
 800b8ee:	d110      	bne.n	800b912 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b8f0:	e002      	b.n	800b8f8 <create_name+0x54>
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	61fb      	str	r3, [r7, #28]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	2b2f      	cmp	r3, #47	; 0x2f
 800b902:	d0f6      	beq.n	800b8f2 <create_name+0x4e>
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	4413      	add	r3, r2
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2b5c      	cmp	r3, #92	; 0x5c
 800b90e:	d0f0      	beq.n	800b8f2 <create_name+0x4e>
			break;
 800b910:	e038      	b.n	800b984 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b912:	7efb      	ldrb	r3, [r7, #27]
 800b914:	2b2e      	cmp	r3, #46	; 0x2e
 800b916:	d003      	beq.n	800b920 <create_name+0x7c>
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d30c      	bcc.n	800b93a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2b0b      	cmp	r3, #11
 800b924:	d002      	beq.n	800b92c <create_name+0x88>
 800b926:	7efb      	ldrb	r3, [r7, #27]
 800b928:	2b2e      	cmp	r3, #46	; 0x2e
 800b92a:	d001      	beq.n	800b930 <create_name+0x8c>
 800b92c:	2306      	movs	r3, #6
 800b92e:	e044      	b.n	800b9ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b930:	2308      	movs	r3, #8
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	230b      	movs	r3, #11
 800b936:	617b      	str	r3, [r7, #20]
			continue;
 800b938:	e022      	b.n	800b980 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b93a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	da04      	bge.n	800b94c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b942:	7efb      	ldrb	r3, [r7, #27]
 800b944:	3b80      	subs	r3, #128	; 0x80
 800b946:	4a1f      	ldr	r2, [pc, #124]	; (800b9c4 <create_name+0x120>)
 800b948:	5cd3      	ldrb	r3, [r2, r3]
 800b94a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b94c:	7efb      	ldrb	r3, [r7, #27]
 800b94e:	4619      	mov	r1, r3
 800b950:	481d      	ldr	r0, [pc, #116]	; (800b9c8 <create_name+0x124>)
 800b952:	f7fe ffdc 	bl	800a90e <chk_chr>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <create_name+0xbc>
 800b95c:	2306      	movs	r3, #6
 800b95e:	e02c      	b.n	800b9ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b960:	7efb      	ldrb	r3, [r7, #27]
 800b962:	2b60      	cmp	r3, #96	; 0x60
 800b964:	d905      	bls.n	800b972 <create_name+0xce>
 800b966:	7efb      	ldrb	r3, [r7, #27]
 800b968:	2b7a      	cmp	r3, #122	; 0x7a
 800b96a:	d802      	bhi.n	800b972 <create_name+0xce>
 800b96c:	7efb      	ldrb	r3, [r7, #27]
 800b96e:	3b20      	subs	r3, #32
 800b970:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	1c5a      	adds	r2, r3, #1
 800b976:	613a      	str	r2, [r7, #16]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	4413      	add	r3, r2
 800b97c:	7efa      	ldrb	r2, [r7, #27]
 800b97e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b980:	e7a6      	b.n	800b8d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b982:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	441a      	add	r2, r3
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <create_name+0xf4>
 800b994:	2306      	movs	r3, #6
 800b996:	e010      	b.n	800b9ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2be5      	cmp	r3, #229	; 0xe5
 800b99e:	d102      	bne.n	800b9a6 <create_name+0x102>
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2205      	movs	r2, #5
 800b9a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9a6:	7efb      	ldrb	r3, [r7, #27]
 800b9a8:	2b20      	cmp	r3, #32
 800b9aa:	d801      	bhi.n	800b9b0 <create_name+0x10c>
 800b9ac:	2204      	movs	r2, #4
 800b9ae:	e000      	b.n	800b9b2 <create_name+0x10e>
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	330b      	adds	r3, #11
 800b9b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b9b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3720      	adds	r7, #32
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	08014534 	.word	0x08014534
 800b9c8:	08014284 	.word	0x08014284

0800b9cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b9e0:	e002      	b.n	800b9e8 <follow_path+0x1c>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	603b      	str	r3, [r7, #0]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b2f      	cmp	r3, #47	; 0x2f
 800b9ee:	d0f8      	beq.n	800b9e2 <follow_path+0x16>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b9f6:	d0f4      	beq.n	800b9e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b1f      	cmp	r3, #31
 800ba04:	d80a      	bhi.n	800ba1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2280      	movs	r2, #128	; 0x80
 800ba0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ba0e:	2100      	movs	r1, #0
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff fcf9 	bl	800b408 <dir_sdi>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]
 800ba1a:	e043      	b.n	800baa4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7ff ff3f 	bl	800b8a4 <create_name>
 800ba26:	4603      	mov	r3, r0
 800ba28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d134      	bne.n	800ba9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f7ff feaf 	bl	800b794 <dir_find>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00a      	beq.n	800ba5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	2b04      	cmp	r3, #4
 800ba4c:	d127      	bne.n	800ba9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba4e:	7afb      	ldrb	r3, [r7, #11]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d122      	bne.n	800ba9e <follow_path+0xd2>
 800ba58:	2305      	movs	r3, #5
 800ba5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba5c:	e01f      	b.n	800ba9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba5e:	7afb      	ldrb	r3, [r7, #11]
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d11c      	bne.n	800baa2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	799b      	ldrb	r3, [r3, #6]
 800ba6c:	f003 0310 	and.w	r3, r3, #16
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d102      	bne.n	800ba7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ba74:	2305      	movs	r3, #5
 800ba76:	75fb      	strb	r3, [r7, #23]
 800ba78:	e014      	b.n	800baa4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba88:	4413      	add	r3, r2
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f7ff fe42 	bl	800b716 <ld_clust>
 800ba92:	4602      	mov	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba98:	e7c0      	b.n	800ba1c <follow_path+0x50>
			if (res != FR_OK) break;
 800ba9a:	bf00      	nop
 800ba9c:	e002      	b.n	800baa4 <follow_path+0xd8>
				break;
 800ba9e:	bf00      	nop
 800baa0:	e000      	b.n	800baa4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800baa2:	bf00      	nop
			}
		}
	}

	return res;
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800baae:	b480      	push	{r7}
 800bab0:	b087      	sub	sp, #28
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295
 800baba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d031      	beq.n	800bb28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	617b      	str	r3, [r7, #20]
 800baca:	e002      	b.n	800bad2 <get_ldnumber+0x24>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	3301      	adds	r3, #1
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b20      	cmp	r3, #32
 800bad8:	d903      	bls.n	800bae2 <get_ldnumber+0x34>
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b3a      	cmp	r3, #58	; 0x3a
 800bae0:	d1f4      	bne.n	800bacc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b3a      	cmp	r3, #58	; 0x3a
 800bae8:	d11c      	bne.n	800bb24 <get_ldnumber+0x76>
			tp = *path;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	1c5a      	adds	r2, r3, #1
 800baf4:	60fa      	str	r2, [r7, #12]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	3b30      	subs	r3, #48	; 0x30
 800bafa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b09      	cmp	r3, #9
 800bb00:	d80e      	bhi.n	800bb20 <get_ldnumber+0x72>
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d10a      	bne.n	800bb20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d107      	bne.n	800bb20 <get_ldnumber+0x72>
					vol = (int)i;
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	3301      	adds	r3, #1
 800bb18:	617b      	str	r3, [r7, #20]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	e002      	b.n	800bb2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb24:	2300      	movs	r3, #0
 800bb26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb28:	693b      	ldr	r3, [r7, #16]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
	...

0800bb38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	70da      	strb	r2, [r3, #3]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff f8d8 	bl	800ad08 <move_window>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <check_fs+0x2a>
 800bb5e:	2304      	movs	r3, #4
 800bb60:	e038      	b.n	800bbd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3334      	adds	r3, #52	; 0x34
 800bb66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7fe fdea 	bl	800a744 <ld_word>
 800bb70:	4603      	mov	r3, r0
 800bb72:	461a      	mov	r2, r3
 800bb74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d001      	beq.n	800bb80 <check_fs+0x48>
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e029      	b.n	800bbd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb86:	2be9      	cmp	r3, #233	; 0xe9
 800bb88:	d009      	beq.n	800bb9e <check_fs+0x66>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb90:	2beb      	cmp	r3, #235	; 0xeb
 800bb92:	d11e      	bne.n	800bbd2 <check_fs+0x9a>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bb9a:	2b90      	cmp	r3, #144	; 0x90
 800bb9c:	d119      	bne.n	800bbd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	3334      	adds	r3, #52	; 0x34
 800bba2:	3336      	adds	r3, #54	; 0x36
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe fde5 	bl	800a774 <ld_dword>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbb0:	4a0a      	ldr	r2, [pc, #40]	; (800bbdc <check_fs+0xa4>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d101      	bne.n	800bbba <check_fs+0x82>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e00c      	b.n	800bbd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3334      	adds	r3, #52	; 0x34
 800bbbe:	3352      	adds	r3, #82	; 0x52
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fdd7 	bl	800a774 <ld_dword>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <check_fs+0xa8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d101      	bne.n	800bbd2 <check_fs+0x9a>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e000      	b.n	800bbd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bbd2:	2302      	movs	r3, #2
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	00544146 	.word	0x00544146
 800bbe0:	33544146 	.word	0x33544146

0800bbe4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b096      	sub	sp, #88	; 0x58
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f7ff ff58 	bl	800baae <get_ldnumber>
 800bbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da01      	bge.n	800bc0a <find_volume+0x26>
 800bc06:	230b      	movs	r3, #11
 800bc08:	e235      	b.n	800c076 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bc0a:	4aa5      	ldr	r2, [pc, #660]	; (800bea0 <find_volume+0x2bc>)
 800bc0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <find_volume+0x3a>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	e22b      	b.n	800c076 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800bc1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc20:	f7fe fe90 	bl	800a944 <lock_fs>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <find_volume+0x4a>
 800bc2a:	230f      	movs	r3, #15
 800bc2c:	e223      	b.n	800c076 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc34:	79fb      	ldrb	r3, [r7, #7]
 800bc36:	f023 0301 	bic.w	r3, r3, #1
 800bc3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d01a      	beq.n	800bc7a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	785b      	ldrb	r3, [r3, #1]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fe fcdd 	bl	800a608 <disk_status>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10c      	bne.n	800bc7a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <find_volume+0x92>
 800bc66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc6a:	f003 0304 	and.w	r3, r3, #4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800bc72:	230a      	movs	r3, #10
 800bc74:	e1ff      	b.n	800c076 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800bc76:	2300      	movs	r3, #0
 800bc78:	e1fd      	b.n	800c076 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc82:	b2da      	uxtb	r2, r3
 800bc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8a:	785b      	ldrb	r3, [r3, #1]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe fcd5 	bl	800a63c <disk_initialize>
 800bc92:	4603      	mov	r3, r0
 800bc94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bc98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bca4:	2303      	movs	r3, #3
 800bca6:	e1e6      	b.n	800c076 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <find_volume+0xda>
 800bcae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcb2:	f003 0304 	and.w	r3, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800bcba:	230a      	movs	r3, #10
 800bcbc:	e1db      	b.n	800c076 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bcc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcc6:	f7ff ff37 	bl	800bb38 <check_fs>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bcd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d149      	bne.n	800bd6c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bcd8:	2300      	movs	r3, #0
 800bcda:	643b      	str	r3, [r7, #64]	; 0x40
 800bcdc:	e01e      	b.n	800bd1c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bcec:	4413      	add	r3, r2
 800bcee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	3304      	adds	r3, #4
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d006      	beq.n	800bd08 <find_volume+0x124>
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fe fd38 	bl	800a774 <ld_dword>
 800bd04:	4602      	mov	r2, r0
 800bd06:	e000      	b.n	800bd0a <find_volume+0x126>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	3358      	adds	r3, #88	; 0x58
 800bd10:	443b      	add	r3, r7
 800bd12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	3301      	adds	r3, #1
 800bd1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d9dd      	bls.n	800bcde <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bd22:	2300      	movs	r3, #0
 800bd24:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <find_volume+0x14e>
 800bd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	3358      	adds	r3, #88	; 0x58
 800bd38:	443b      	add	r3, r7
 800bd3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd3e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <find_volume+0x16e>
 800bd46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd4a:	f7ff fef5 	bl	800bb38 <check_fs>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	e000      	b.n	800bd54 <find_volume+0x170>
 800bd52:	2303      	movs	r3, #3
 800bd54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d905      	bls.n	800bd6c <find_volume+0x188>
 800bd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd62:	3301      	adds	r3, #1
 800bd64:	643b      	str	r3, [r7, #64]	; 0x40
 800bd66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d9e2      	bls.n	800bd32 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd70:	2b04      	cmp	r3, #4
 800bd72:	d101      	bne.n	800bd78 <find_volume+0x194>
 800bd74:	2301      	movs	r3, #1
 800bd76:	e17e      	b.n	800c076 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bd78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d901      	bls.n	800bd84 <find_volume+0x1a0>
 800bd80:	230d      	movs	r3, #13
 800bd82:	e178      	b.n	800c076 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	3334      	adds	r3, #52	; 0x34
 800bd88:	330b      	adds	r3, #11
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fcda 	bl	800a744 <ld_word>
 800bd90:	4603      	mov	r3, r0
 800bd92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd96:	d001      	beq.n	800bd9c <find_volume+0x1b8>
 800bd98:	230d      	movs	r3, #13
 800bd9a:	e16c      	b.n	800c076 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	3334      	adds	r3, #52	; 0x34
 800bda0:	3316      	adds	r3, #22
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fcce 	bl	800a744 <ld_word>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bdac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d106      	bne.n	800bdc0 <find_volume+0x1dc>
 800bdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb4:	3334      	adds	r3, #52	; 0x34
 800bdb6:	3324      	adds	r3, #36	; 0x24
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fe fcdb 	bl	800a774 <ld_dword>
 800bdbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdc4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd2:	789b      	ldrb	r3, [r3, #2]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d005      	beq.n	800bde4 <find_volume+0x200>
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	789b      	ldrb	r3, [r3, #2]
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d001      	beq.n	800bde4 <find_volume+0x200>
 800bde0:	230d      	movs	r3, #13
 800bde2:	e148      	b.n	800c076 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	789b      	ldrb	r3, [r3, #2]
 800bde8:	461a      	mov	r2, r3
 800bdea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdec:	fb02 f303 	mul.w	r3, r2, r3
 800bdf0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	895b      	ldrh	r3, [r3, #10]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d008      	beq.n	800be18 <find_volume+0x234>
 800be06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be08:	895b      	ldrh	r3, [r3, #10]
 800be0a:	461a      	mov	r2, r3
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	895b      	ldrh	r3, [r3, #10]
 800be10:	3b01      	subs	r3, #1
 800be12:	4013      	ands	r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <find_volume+0x238>
 800be18:	230d      	movs	r3, #13
 800be1a:	e12c      	b.n	800c076 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	3334      	adds	r3, #52	; 0x34
 800be20:	3311      	adds	r3, #17
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fc8e 	bl	800a744 <ld_word>
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	891b      	ldrh	r3, [r3, #8]
 800be34:	f003 030f 	and.w	r3, r3, #15
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <find_volume+0x25e>
 800be3e:	230d      	movs	r3, #13
 800be40:	e119      	b.n	800c076 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	3334      	adds	r3, #52	; 0x34
 800be46:	3313      	adds	r3, #19
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fc7b 	bl	800a744 <ld_word>
 800be4e:	4603      	mov	r3, r0
 800be50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be54:	2b00      	cmp	r3, #0
 800be56:	d106      	bne.n	800be66 <find_volume+0x282>
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	3334      	adds	r3, #52	; 0x34
 800be5c:	3320      	adds	r3, #32
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fe fc88 	bl	800a774 <ld_dword>
 800be64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be68:	3334      	adds	r3, #52	; 0x34
 800be6a:	330e      	adds	r3, #14
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fc69 	bl	800a744 <ld_word>
 800be72:	4603      	mov	r3, r0
 800be74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d101      	bne.n	800be80 <find_volume+0x29c>
 800be7c:	230d      	movs	r3, #13
 800be7e:	e0fa      	b.n	800c076 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be84:	4413      	add	r3, r2
 800be86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be88:	8912      	ldrh	r2, [r2, #8]
 800be8a:	0912      	lsrs	r2, r2, #4
 800be8c:	b292      	uxth	r2, r2
 800be8e:	4413      	add	r3, r2
 800be90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	429a      	cmp	r2, r3
 800be98:	d204      	bcs.n	800bea4 <find_volume+0x2c0>
 800be9a:	230d      	movs	r3, #13
 800be9c:	e0eb      	b.n	800c076 <find_volume+0x492>
 800be9e:	bf00      	nop
 800bea0:	20000f50 	.word	0x20000f50
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beac:	8952      	ldrh	r2, [r2, #10]
 800beae:	fbb3 f3f2 	udiv	r3, r3, r2
 800beb2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <find_volume+0x2da>
 800beba:	230d      	movs	r3, #13
 800bebc:	e0db      	b.n	800c076 <find_volume+0x492>
		fmt = FS_FAT32;
 800bebe:	2303      	movs	r3, #3
 800bec0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800beca:	4293      	cmp	r3, r2
 800becc:	d802      	bhi.n	800bed4 <find_volume+0x2f0>
 800bece:	2302      	movs	r3, #2
 800bed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	f640 72f5 	movw	r2, #4085	; 0xff5
 800beda:	4293      	cmp	r3, r2
 800bedc:	d802      	bhi.n	800bee4 <find_volume+0x300>
 800bede:	2301      	movs	r3, #1
 800bee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	1c9a      	adds	r2, r3, #2
 800bee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beea:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bef0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bef2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef6:	441a      	add	r2, r3
 800bef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800befc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	441a      	add	r2, r3
 800bf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf04:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bf06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d11e      	bne.n	800bf4c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf10:	3334      	adds	r3, #52	; 0x34
 800bf12:	332a      	adds	r3, #42	; 0x2a
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fe fc15 	bl	800a744 <ld_word>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <find_volume+0x340>
 800bf20:	230d      	movs	r3, #13
 800bf22:	e0a8      	b.n	800c076 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	891b      	ldrh	r3, [r3, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d001      	beq.n	800bf30 <find_volume+0x34c>
 800bf2c:	230d      	movs	r3, #13
 800bf2e:	e0a2      	b.n	800c076 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf32:	3334      	adds	r3, #52	; 0x34
 800bf34:	332c      	adds	r3, #44	; 0x2c
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fc1c 	bl	800a774 <ld_dword>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf40:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	647b      	str	r3, [r7, #68]	; 0x44
 800bf4a:	e01f      	b.n	800bf8c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	891b      	ldrh	r3, [r3, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d101      	bne.n	800bf58 <find_volume+0x374>
 800bf54:	230d      	movs	r3, #13
 800bf56:	e08e      	b.n	800c076 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5e:	441a      	add	r2, r3
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d103      	bne.n	800bf74 <find_volume+0x390>
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	e00a      	b.n	800bf8a <find_volume+0x3a6>
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	699a      	ldr	r2, [r3, #24]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	4413      	add	r3, r2
 800bf7e:	085a      	lsrs	r2, r3, #1
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8e:	69da      	ldr	r2, [r3, #28]
 800bf90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf96:	0a5b      	lsrs	r3, r3, #9
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d201      	bcs.n	800bfa0 <find_volume+0x3bc>
 800bf9c:	230d      	movs	r3, #13
 800bf9e:	e06a      	b.n	800c076 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa6:	615a      	str	r2, [r3, #20]
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfaa:	695a      	ldr	r2, [r3, #20]
 800bfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	2280      	movs	r2, #128	; 0x80
 800bfb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bfb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d149      	bne.n	800c052 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc0:	3334      	adds	r3, #52	; 0x34
 800bfc2:	3330      	adds	r3, #48	; 0x30
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fbbd 	bl	800a744 <ld_word>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d140      	bne.n	800c052 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfd8:	f7fe fe96 	bl	800ad08 <move_window>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d137      	bne.n	800c052 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	3334      	adds	r3, #52	; 0x34
 800bfec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe fba7 	bl	800a744 <ld_word>
 800bff6:	4603      	mov	r3, r0
 800bff8:	461a      	mov	r2, r3
 800bffa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bffe:	429a      	cmp	r2, r3
 800c000:	d127      	bne.n	800c052 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	3334      	adds	r3, #52	; 0x34
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe fbb4 	bl	800a774 <ld_dword>
 800c00c:	4603      	mov	r3, r0
 800c00e:	4a1c      	ldr	r2, [pc, #112]	; (800c080 <find_volume+0x49c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d11e      	bne.n	800c052 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	3334      	adds	r3, #52	; 0x34
 800c018:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fba9 	bl	800a774 <ld_dword>
 800c022:	4603      	mov	r3, r0
 800c024:	4a17      	ldr	r2, [pc, #92]	; (800c084 <find_volume+0x4a0>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d113      	bne.n	800c052 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	3334      	adds	r3, #52	; 0x34
 800c02e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fb9e 	bl	800a774 <ld_dword>
 800c038:	4602      	mov	r2, r0
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	3334      	adds	r3, #52	; 0x34
 800c042:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fb94 	bl	800a774 <ld_dword>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c050:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c054:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c058:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c05a:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <find_volume+0x4a4>)
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	3301      	adds	r3, #1
 800c060:	b29a      	uxth	r2, r3
 800c062:	4b09      	ldr	r3, [pc, #36]	; (800c088 <find_volume+0x4a4>)
 800c064:	801a      	strh	r2, [r3, #0]
 800c066:	4b08      	ldr	r3, [pc, #32]	; (800c088 <find_volume+0x4a4>)
 800c068:	881a      	ldrh	r2, [r3, #0]
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c06e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c070:	f7fe fde2 	bl	800ac38 <clear_lock>
#endif
	return FR_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3758      	adds	r7, #88	; 0x58
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	41615252 	.word	0x41615252
 800c084:	61417272 	.word	0x61417272
 800c088:	20000f54 	.word	0x20000f54

0800c08c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c096:	2309      	movs	r3, #9
 800c098:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d02e      	beq.n	800c0fe <validate+0x72>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d02a      	beq.n	800c0fe <validate+0x72>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d025      	beq.n	800c0fe <validate+0x72>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	889a      	ldrh	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	88db      	ldrh	r3, [r3, #6]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d11e      	bne.n	800c0fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe fc3d 	bl	800a944 <lock_fs>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d014      	beq.n	800c0fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	785b      	ldrb	r3, [r3, #1]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fa96 	bl	800a608 <disk_status>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <validate+0x60>
				res = FR_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]
 800c0ea:	e008      	b.n	800c0fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2100      	movs	r1, #0
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fc3c 	bl	800a970 <unlock_fs>
 800c0f8:	e001      	b.n	800c0fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800c0fa:	230f      	movs	r3, #15
 800c0fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d102      	bne.n	800c10a <validate+0x7e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	e000      	b.n	800c10c <validate+0x80>
 800c10a:	2300      	movs	r3, #0
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	6013      	str	r3, [r2, #0]
	return res;
 800c110:	7bfb      	ldrb	r3, [r7, #15]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4613      	mov	r3, r2
 800c128:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c12e:	f107 0310 	add.w	r3, r7, #16
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff fcbb 	bl	800baae <get_ldnumber>
 800c138:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	da01      	bge.n	800c144 <f_mount+0x28>
 800c140:	230b      	movs	r3, #11
 800c142:	e048      	b.n	800c1d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c144:	4a26      	ldr	r2, [pc, #152]	; (800c1e0 <f_mount+0xc4>)
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c14c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00f      	beq.n	800c174 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c154:	69b8      	ldr	r0, [r7, #24]
 800c156:	f7fe fd6f 	bl	800ac38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fe82 	bl	800ce68 <ff_del_syncobj>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <f_mount+0x52>
 800c16a:	2302      	movs	r3, #2
 800c16c:	e033      	b.n	800c1d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00f      	beq.n	800c19a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	b2da      	uxtb	r2, r3
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	330c      	adds	r3, #12
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f000 fe51 	bl	800ce32 <ff_cre_syncobj>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <f_mount+0x7e>
 800c196:	2302      	movs	r3, #2
 800c198:	e01d      	b.n	800c1d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c19a:	68fa      	ldr	r2, [r7, #12]
 800c19c:	4910      	ldr	r1, [pc, #64]	; (800c1e0 <f_mount+0xc4>)
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d002      	beq.n	800c1b0 <f_mount+0x94>
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d001      	beq.n	800c1b4 <f_mount+0x98>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e010      	b.n	800c1d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c1b4:	f107 010c 	add.w	r1, r7, #12
 800c1b8:	f107 0308 	add.w	r3, r7, #8
 800c1bc:	2200      	movs	r2, #0
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7ff fd10 	bl	800bbe4 <find_volume>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7dfa      	ldrb	r2, [r7, #23]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fe fbce 	bl	800a970 <unlock_fs>
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	20000f50 	.word	0x20000f50

0800c1e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b098      	sub	sp, #96	; 0x60
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d101      	bne.n	800c1fc <f_open+0x18>
 800c1f8:	2309      	movs	r3, #9
 800c1fa:	e1b4      	b.n	800c566 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c202:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c204:	79fa      	ldrb	r2, [r7, #7]
 800c206:	f107 0110 	add.w	r1, r7, #16
 800c20a:	f107 0308 	add.w	r3, r7, #8
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fce8 	bl	800bbe4 <find_volume>
 800c214:	4603      	mov	r3, r0
 800c216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c21a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f040 8191 	bne.w	800c546 <f_open+0x362>
		dj.obj.fs = fs;
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	f107 0314 	add.w	r3, r7, #20
 800c22e:	4611      	mov	r1, r2
 800c230:	4618      	mov	r0, r3
 800c232:	f7ff fbcb 	bl	800b9cc <follow_path>
 800c236:	4603      	mov	r3, r0
 800c238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c23c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c240:	2b00      	cmp	r3, #0
 800c242:	d11a      	bne.n	800c27a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c244:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	da03      	bge.n	800c256 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c24e:	2306      	movs	r3, #6
 800c250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c254:	e011      	b.n	800c27a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bf14      	ite	ne
 800c260:	2301      	movne	r3, #1
 800c262:	2300      	moveq	r3, #0
 800c264:	b2db      	uxtb	r3, r3
 800c266:	461a      	mov	r2, r3
 800c268:	f107 0314 	add.w	r3, r7, #20
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fb9a 	bl	800a9a8 <chk_lock>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c27a:	79fb      	ldrb	r3, [r7, #7]
 800c27c:	f003 031c 	and.w	r3, r3, #28
 800c280:	2b00      	cmp	r3, #0
 800c282:	d07f      	beq.n	800c384 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d017      	beq.n	800c2bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c28c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c290:	2b04      	cmp	r3, #4
 800c292:	d10e      	bne.n	800c2b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c294:	f7fe fbe4 	bl	800aa60 <enq_lock>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d006      	beq.n	800c2ac <f_open+0xc8>
 800c29e:	f107 0314 	add.w	r3, r7, #20
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7ff facb 	bl	800b83e <dir_register>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	e000      	b.n	800c2ae <f_open+0xca>
 800c2ac:	2312      	movs	r3, #18
 800c2ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c2b2:	79fb      	ldrb	r3, [r7, #7]
 800c2b4:	f043 0308 	orr.w	r3, r3, #8
 800c2b8:	71fb      	strb	r3, [r7, #7]
 800c2ba:	e010      	b.n	800c2de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c2bc:	7ebb      	ldrb	r3, [r7, #26]
 800c2be:	f003 0311 	and.w	r3, r3, #17
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <f_open+0xea>
					res = FR_DENIED;
 800c2c6:	2307      	movs	r3, #7
 800c2c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c2cc:	e007      	b.n	800c2de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c2ce:	79fb      	ldrb	r3, [r7, #7]
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d002      	beq.n	800c2de <f_open+0xfa>
 800c2d8:	2308      	movs	r3, #8
 800c2da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d168      	bne.n	800c3b8 <f_open+0x1d4>
 800c2e6:	79fb      	ldrb	r3, [r7, #7]
 800c2e8:	f003 0308 	and.w	r3, r3, #8
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d063      	beq.n	800c3b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c2f0:	f7fd fc4c 	bl	8009b8c <get_fattime>
 800c2f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f8:	330e      	adds	r3, #14
 800c2fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe fa77 	bl	800a7f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	3316      	adds	r3, #22
 800c306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fe fa71 	bl	800a7f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	330b      	adds	r3, #11
 800c312:	2220      	movs	r2, #32
 800c314:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c31a:	4611      	mov	r1, r2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f9fa 	bl	800b716 <ld_clust>
 800c322:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c328:	2200      	movs	r2, #0
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7ff fa12 	bl	800b754 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c332:	331c      	adds	r3, #28
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe fa5a 	bl	800a7f0 <st_dword>
					fs->wflag = 1;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2201      	movs	r2, #1
 800c340:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d037      	beq.n	800c3b8 <f_open+0x1d4>
						dw = fs->winsect;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c34c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c34e:	f107 0314 	add.w	r3, r7, #20
 800c352:	2200      	movs	r2, #0
 800c354:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe ff25 	bl	800b1a6 <remove_chain>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c362:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c366:	2b00      	cmp	r3, #0
 800c368:	d126      	bne.n	800c3b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fe fcca 	bl	800ad08 <move_window>
 800c374:	4603      	mov	r3, r0
 800c376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c37e:	3a01      	subs	r2, #1
 800c380:	611a      	str	r2, [r3, #16]
 800c382:	e019      	b.n	800c3b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d115      	bne.n	800c3b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c38c:	7ebb      	ldrb	r3, [r7, #26]
 800c38e:	f003 0310 	and.w	r3, r3, #16
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <f_open+0x1ba>
					res = FR_NO_FILE;
 800c396:	2304      	movs	r3, #4
 800c398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c39c:	e00c      	b.n	800c3b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <f_open+0x1d4>
 800c3a8:	7ebb      	ldrb	r3, [r7, #26]
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <f_open+0x1d4>
						res = FR_DENIED;
 800c3b2:	2307      	movs	r3, #7
 800c3b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c3b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d128      	bne.n	800c412 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c3c0:	79fb      	ldrb	r3, [r7, #7]
 800c3c2:	f003 0308 	and.w	r3, r3, #8
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c3ca:	79fb      	ldrb	r3, [r7, #7]
 800c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c3da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	f023 0301 	bic.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	bf14      	ite	ne
 800c3ea:	2301      	movne	r3, #1
 800c3ec:	2300      	moveq	r3, #0
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	f107 0314 	add.w	r3, r7, #20
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fe fb53 	bl	800aaa4 <inc_lock>
 800c3fe:	4602      	mov	r2, r0
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <f_open+0x22e>
 800c40c:	2302      	movs	r3, #2
 800c40e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c412:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c416:	2b00      	cmp	r3, #0
 800c418:	f040 8095 	bne.w	800c546 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c420:	4611      	mov	r1, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f7ff f977 	bl	800b716 <ld_clust>
 800c428:	4602      	mov	r2, r0
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c430:	331c      	adds	r3, #28
 800c432:	4618      	mov	r0, r3
 800c434:	f7fe f99e 	bl	800a774 <ld_dword>
 800c438:	4602      	mov	r2, r0
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	88da      	ldrh	r2, [r3, #6]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	79fa      	ldrb	r2, [r7, #7]
 800c456:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3330      	adds	r3, #48	; 0x30
 800c46e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c472:	2100      	movs	r1, #0
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fa08 	bl	800a88a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c47a:	79fb      	ldrb	r3, [r7, #7]
 800c47c:	f003 0320 	and.w	r3, r3, #32
 800c480:	2b00      	cmp	r3, #0
 800c482:	d060      	beq.n	800c546 <f_open+0x362>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d05c      	beq.n	800c546 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	68da      	ldr	r2, [r3, #12]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	895b      	ldrh	r3, [r3, #10]
 800c498:	025b      	lsls	r3, r3, #9
 800c49a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c4a8:	e016      	b.n	800c4d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe fce5 	bl	800ae7e <get_fat>
 800c4b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c4b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d802      	bhi.n	800c4c2 <f_open+0x2de>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c4c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c8:	d102      	bne.n	800c4d0 <f_open+0x2ec>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c4d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	657b      	str	r3, [r7, #84]	; 0x54
 800c4d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <f_open+0x304>
 800c4e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d8e0      	bhi.n	800c4aa <f_open+0x2c6>
				}
				fp->clust = clst;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d127      	bne.n	800c546 <f_open+0x362>
 800c4f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d022      	beq.n	800c546 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fc9b 	bl	800ae40 <clust2sect>
 800c50a:	6478      	str	r0, [r7, #68]	; 0x44
 800c50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d103      	bne.n	800c51a <f_open+0x336>
						res = FR_INT_ERR;
 800c512:	2302      	movs	r3, #2
 800c514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c518:	e015      	b.n	800c546 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c51a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c51c:	0a5a      	lsrs	r2, r3, #9
 800c51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c520:	441a      	add	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	7858      	ldrb	r0, [r3, #1]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6a1a      	ldr	r2, [r3, #32]
 800c534:	2301      	movs	r3, #1
 800c536:	f7fe f8a7 	bl	800a688 <disk_read>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <f_open+0x362>
 800c540:	2301      	movs	r3, #1
 800c542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <f_open+0x370>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c55a:	4611      	mov	r1, r2
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fa07 	bl	800a970 <unlock_fs>
 800c562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c566:	4618      	mov	r0, r3
 800c568:	3760      	adds	r7, #96	; 0x60
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b08e      	sub	sp, #56	; 0x38
 800c572:	af00      	add	r7, sp, #0
 800c574:	60f8      	str	r0, [r7, #12]
 800c576:	60b9      	str	r1, [r7, #8]
 800c578:	607a      	str	r2, [r7, #4]
 800c57a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f107 0214 	add.w	r2, r7, #20
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff fd7c 	bl	800c08c <validate>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c59a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d107      	bne.n	800c5b2 <f_read+0x44>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	7d5b      	ldrb	r3, [r3, #21]
 800c5a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c5aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <f_read+0x58>
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe f9d8 	bl	800a970 <unlock_fs>
 800c5c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5c4:	e13d      	b.n	800c842 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ca:	f003 0301 	and.w	r3, r3, #1
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <f_read+0x72>
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	2107      	movs	r1, #7
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fe f9ca 	bl	800a970 <unlock_fs>
 800c5dc:	2307      	movs	r3, #7
 800c5de:	e130      	b.n	800c842 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	1ad3      	subs	r3, r2, r3
 800c5ea:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	f240 811c 	bls.w	800c82e <f_read+0x2c0>
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c5fa:	e118      	b.n	800c82e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 80e4 	bne.w	800c7d2 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	699b      	ldr	r3, [r3, #24]
 800c60e:	0a5b      	lsrs	r3, r3, #9
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	8952      	ldrh	r2, [r2, #10]
 800c614:	3a01      	subs	r2, #1
 800c616:	4013      	ands	r3, r2
 800c618:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d139      	bne.n	800c694 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d103      	bne.n	800c630 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	633b      	str	r3, [r7, #48]	; 0x30
 800c62e:	e013      	b.n	800c658 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c634:	2b00      	cmp	r3, #0
 800c636:	d007      	beq.n	800c648 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	4619      	mov	r1, r3
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f7fe feae 	bl	800b3a0 <clmt_clust>
 800c644:	6338      	str	r0, [r7, #48]	; 0x30
 800c646:	e007      	b.n	800c658 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fe fc14 	bl	800ae7e <get_fat>
 800c656:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d809      	bhi.n	800c672 <f_read+0x104>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2202      	movs	r2, #2
 800c662:	755a      	strb	r2, [r3, #21]
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2102      	movs	r1, #2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fe f981 	bl	800a970 <unlock_fs>
 800c66e:	2302      	movs	r3, #2
 800c670:	e0e7      	b.n	800c842 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c678:	d109      	bne.n	800c68e <f_read+0x120>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2201      	movs	r2, #1
 800c67e:	755a      	strb	r2, [r3, #21]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	2101      	movs	r1, #1
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe f973 	bl	800a970 <unlock_fs>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e0d9      	b.n	800c842 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c692:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7fe fbcf 	bl	800ae40 <clust2sect>
 800c6a2:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d109      	bne.n	800c6be <f_read+0x150>
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	755a      	strb	r2, [r3, #21]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2102      	movs	r1, #2
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe f95b 	bl	800a970 <unlock_fs>
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	e0c1      	b.n	800c842 <f_read+0x2d4>
			sect += csect;
 800c6be:	69ba      	ldr	r2, [r7, #24]
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	0a5b      	lsrs	r3, r3, #9
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d03e      	beq.n	800c750 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	4413      	add	r3, r2
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	8952      	ldrh	r2, [r2, #10]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d905      	bls.n	800c6ec <f_read+0x17e>
					cc = fs->csize - csect;
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	895b      	ldrh	r3, [r3, #10]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	7858      	ldrb	r0, [r3, #1]
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6f6:	f7fd ffc7 	bl	800a688 <disk_read>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d009      	beq.n	800c714 <f_read+0x1a6>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2201      	movs	r2, #1
 800c704:	755a      	strb	r2, [r3, #21]
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2101      	movs	r1, #1
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe f930 	bl	800a970 <unlock_fs>
 800c710:	2301      	movs	r3, #1
 800c712:	e096      	b.n	800c842 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	7d1b      	ldrb	r3, [r3, #20]
 800c718:	b25b      	sxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	da14      	bge.n	800c748 <f_read+0x1da>
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	6a1a      	ldr	r2, [r3, #32]
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c728:	429a      	cmp	r2, r3
 800c72a:	d90d      	bls.n	800c748 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6a1a      	ldr	r2, [r3, #32]
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	025b      	lsls	r3, r3, #9
 800c736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c738:	18d0      	adds	r0, r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	3330      	adds	r3, #48	; 0x30
 800c73e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c742:	4619      	mov	r1, r3
 800c744:	f7fe f880 	bl	800a848 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74a:	025b      	lsls	r3, r3, #9
 800c74c:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c74e:	e05a      	b.n	800c806 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	69ba      	ldr	r2, [r7, #24]
 800c756:	429a      	cmp	r2, r3
 800c758:	d038      	beq.n	800c7cc <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	7d1b      	ldrb	r3, [r3, #20]
 800c75e:	b25b      	sxtb	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	da1d      	bge.n	800c7a0 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	7858      	ldrb	r0, [r3, #1]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6a1a      	ldr	r2, [r3, #32]
 800c772:	2301      	movs	r3, #1
 800c774:	f7fd ffa8 	bl	800a6c8 <disk_write>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d009      	beq.n	800c792 <f_read+0x224>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	755a      	strb	r2, [r3, #21]
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	2101      	movs	r1, #1
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fe f8f1 	bl	800a970 <unlock_fs>
 800c78e:	2301      	movs	r3, #1
 800c790:	e057      	b.n	800c842 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	7d1b      	ldrb	r3, [r3, #20]
 800c796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	7858      	ldrb	r0, [r3, #1]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	69ba      	ldr	r2, [r7, #24]
 800c7ae:	f7fd ff6b 	bl	800a688 <disk_read>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d009      	beq.n	800c7cc <f_read+0x25e>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	755a      	strb	r2, [r3, #21]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2101      	movs	r1, #1
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe f8d4 	bl	800a970 <unlock_fs>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e03a      	b.n	800c842 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7da:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c7de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c7e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d901      	bls.n	800c7ec <f_read+0x27e>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	699b      	ldr	r3, [r3, #24]
 800c7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fa:	4413      	add	r3, r2
 800c7fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7fe:	4619      	mov	r1, r3
 800c800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c802:	f7fe f821 	bl	800a848 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80a:	4413      	add	r3, r2
 800c80c:	627b      	str	r3, [r7, #36]	; 0x24
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	699a      	ldr	r2, [r3, #24]
 800c812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c814:	441a      	add	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	619a      	str	r2, [r3, #24]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	441a      	add	r2, r3
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	f47f aee3 	bne.w	800c5fc <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2100      	movs	r1, #0
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe f898 	bl	800a970 <unlock_fs>
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3738      	adds	r7, #56	; 0x38
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b08c      	sub	sp, #48	; 0x30
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
 800c856:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2200      	movs	r2, #0
 800c860:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f107 0210 	add.w	r2, r7, #16
 800c868:	4611      	mov	r1, r2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fc0e 	bl	800c08c <validate>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d107      	bne.n	800c88e <f_write+0x44>
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	7d5b      	ldrb	r3, [r3, #21]
 800c882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d009      	beq.n	800c8a2 <f_write+0x58>
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f7fe f86a 	bl	800a970 <unlock_fs>
 800c89c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8a0:	e173      	b.n	800cb8a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	7d1b      	ldrb	r3, [r3, #20]
 800c8a6:	f003 0302 	and.w	r3, r3, #2
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <f_write+0x72>
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	2107      	movs	r1, #7
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7fe f85c 	bl	800a970 <unlock_fs>
 800c8b8:	2307      	movs	r3, #7
 800c8ba:	e166      	b.n	800cb8a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	699a      	ldr	r2, [r3, #24]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	441a      	add	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	f080 814b 	bcs.w	800cb64 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	43db      	mvns	r3, r3
 800c8d4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c8d6:	e145      	b.n	800cb64 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 8101 	bne.w	800cae8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	0a5b      	lsrs	r3, r3, #9
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	8952      	ldrh	r2, [r2, #10]
 800c8f0:	3a01      	subs	r2, #1
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d14d      	bne.n	800c998 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10c      	bne.n	800c91e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d11a      	bne.n	800c946 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2100      	movs	r1, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fcab 	bl	800b270 <create_chain>
 800c91a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c91c:	e013      	b.n	800c946 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d007      	beq.n	800c936 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	699b      	ldr	r3, [r3, #24]
 800c92a:	4619      	mov	r1, r3
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7fe fd37 	bl	800b3a0 <clmt_clust>
 800c932:	62b8      	str	r0, [r7, #40]	; 0x28
 800c934:	e007      	b.n	800c946 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	4619      	mov	r1, r3
 800c93e:	4610      	mov	r0, r2
 800c940:	f7fe fc96 	bl	800b270 <create_chain>
 800c944:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 8110 	beq.w	800cb6e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	2b01      	cmp	r3, #1
 800c952:	d109      	bne.n	800c968 <f_write+0x11e>
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2202      	movs	r2, #2
 800c958:	755a      	strb	r2, [r3, #21]
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	2102      	movs	r1, #2
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe f806 	bl	800a970 <unlock_fs>
 800c964:	2302      	movs	r3, #2
 800c966:	e110      	b.n	800cb8a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96e:	d109      	bne.n	800c984 <f_write+0x13a>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	2201      	movs	r2, #1
 800c974:	755a      	strb	r2, [r3, #21]
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2101      	movs	r1, #1
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fd fff8 	bl	800a970 <unlock_fs>
 800c980:	2301      	movs	r3, #1
 800c982:	e102      	b.n	800cb8a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c988:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <f_write+0x14e>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c996:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
 800c99c:	b25b      	sxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	da1d      	bge.n	800c9de <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	7858      	ldrb	r0, [r3, #1]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6a1a      	ldr	r2, [r3, #32]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f7fd fe89 	bl	800a6c8 <disk_write>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d009      	beq.n	800c9d0 <f_write+0x186>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	755a      	strb	r2, [r3, #21]
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	2101      	movs	r1, #1
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fd ffd2 	bl	800a970 <unlock_fs>
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e0dc      	b.n	800cb8a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	7d1b      	ldrb	r3, [r3, #20]
 800c9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	f7fe fa2a 	bl	800ae40 <clust2sect>
 800c9ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d109      	bne.n	800ca08 <f_write+0x1be>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2202      	movs	r2, #2
 800c9f8:	755a      	strb	r2, [r3, #21]
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd ffb6 	bl	800a970 <unlock_fs>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e0c0      	b.n	800cb8a <f_write+0x340>
			sect += csect;
 800ca08:	697a      	ldr	r2, [r7, #20]
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	0a5b      	lsrs	r3, r3, #9
 800ca14:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d041      	beq.n	800caa0 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	4413      	add	r3, r2
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	8952      	ldrh	r2, [r2, #10]
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d905      	bls.n	800ca36 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	895b      	ldrh	r3, [r3, #10]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	1ad3      	subs	r3, r2, r3
 800ca34:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	7858      	ldrb	r0, [r3, #1]
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	69f9      	ldr	r1, [r7, #28]
 800ca40:	f7fd fe42 	bl	800a6c8 <disk_write>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d009      	beq.n	800ca5e <f_write+0x214>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	755a      	strb	r2, [r3, #21]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	2101      	movs	r1, #1
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fd ff8b 	bl	800a970 <unlock_fs>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e095      	b.n	800cb8a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6a1a      	ldr	r2, [r3, #32]
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	6a3a      	ldr	r2, [r7, #32]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d915      	bls.n	800ca98 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6a1a      	ldr	r2, [r3, #32]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	025b      	lsls	r3, r3, #9
 800ca7c:	69fa      	ldr	r2, [r7, #28]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca84:	4619      	mov	r1, r3
 800ca86:	f7fd fedf 	bl	800a848 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	7d1b      	ldrb	r3, [r3, #20]
 800ca8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	025b      	lsls	r3, r3, #9
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ca9e:	e044      	b.n	800cb2a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6a1b      	ldr	r3, [r3, #32]
 800caa4:	697a      	ldr	r2, [r7, #20]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d01b      	beq.n	800cae2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	699a      	ldr	r2, [r3, #24]
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d215      	bcs.n	800cae2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	7858      	ldrb	r0, [r3, #1]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cac0:	2301      	movs	r3, #1
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	f7fd fde0 	bl	800a688 <disk_read>
 800cac8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d009      	beq.n	800cae2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2201      	movs	r2, #1
 800cad2:	755a      	strb	r2, [r3, #21]
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	2101      	movs	r1, #1
 800cad8:	4618      	mov	r0, r3
 800cada:	f7fd ff49 	bl	800a970 <unlock_fs>
 800cade:	2301      	movs	r3, #1
 800cae0:	e053      	b.n	800cb8a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800caf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800caf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d901      	bls.n	800cb02 <f_write+0x2b8>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb10:	4413      	add	r3, r2
 800cb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb14:	69f9      	ldr	r1, [r7, #28]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fd fe96 	bl	800a848 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	7d1b      	ldrb	r3, [r3, #20]
 800cb20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	4413      	add	r3, r2
 800cb30:	61fb      	str	r3, [r7, #28]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699a      	ldr	r2, [r3, #24]
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	441a      	add	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	619a      	str	r2, [r3, #24]
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	bf38      	it	cc
 800cb4a:	461a      	movcc	r2, r3
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	60da      	str	r2, [r3, #12]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb56:	441a      	add	r2, r3
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	601a      	str	r2, [r3, #0]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f47f aeb6 	bne.w	800c8d8 <f_write+0x8e>
 800cb6c:	e000      	b.n	800cb70 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	7d1b      	ldrb	r3, [r3, #20]
 800cb74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	2100      	movs	r1, #0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fd fef4 	bl	800a970 <unlock_fs>
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3730      	adds	r7, #48	; 0x30
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b086      	sub	sp, #24
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f107 0208 	add.w	r2, r7, #8
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff fa72 	bl	800c08c <validate>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cbac:	7dfb      	ldrb	r3, [r7, #23]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d16d      	bne.n	800cc8e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	7d1b      	ldrb	r3, [r3, #20]
 800cbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d067      	beq.n	800cc8e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7d1b      	ldrb	r3, [r3, #20]
 800cbc2:	b25b      	sxtb	r3, r3
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	da1a      	bge.n	800cbfe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	7858      	ldrb	r0, [r3, #1]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a1a      	ldr	r2, [r3, #32]
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f7fd fd76 	bl	800a6c8 <disk_write>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d006      	beq.n	800cbf0 <f_sync+0x5e>
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fd fec2 	bl	800a970 <unlock_fs>
 800cbec:	2301      	movs	r3, #1
 800cbee:	e055      	b.n	800cc9c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
 800cbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cbfe:	f7fc ffc5 	bl	8009b8c <get_fattime>
 800cc02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	f7fe f87b 	bl	800ad08 <move_window>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d138      	bne.n	800cc8e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	330b      	adds	r3, #11
 800cc26:	781a      	ldrb	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	330b      	adds	r3, #11
 800cc2c:	f042 0220 	orr.w	r2, r2, #32
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6818      	ldr	r0, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	68f9      	ldr	r1, [r7, #12]
 800cc40:	f7fe fd88 	bl	800b754 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f103 021c 	add.w	r2, r3, #28
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fd fdcd 	bl	800a7f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	3316      	adds	r3, #22
 800cc5a:	6939      	ldr	r1, [r7, #16]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fd fdc7 	bl	800a7f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3312      	adds	r3, #18
 800cc66:	2100      	movs	r1, #0
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fd fda6 	bl	800a7ba <st_word>
					fs->wflag = 1;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2201      	movs	r2, #1
 800cc72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe f874 	bl	800ad64 <sync_fs>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7d1b      	ldrb	r3, [r3, #20]
 800cc84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	7dfa      	ldrb	r2, [r7, #23]
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fd fe6b 	bl	800a970 <unlock_fs>
 800cc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff ff70 	bl	800cb92 <f_sync>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d11d      	bne.n	800ccf8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f107 0208 	add.w	r2, r7, #8
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff f9e1 	bl	800c08c <validate>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ccce:	7bfb      	ldrb	r3, [r7, #15]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d111      	bne.n	800ccf8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fd ff71 	bl	800abc0 <dec_lock>
 800ccde:	4603      	mov	r3, r0
 800cce0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cce2:	7bfb      	ldrb	r3, [r7, #15]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d102      	bne.n	800ccee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fd fe3c 	bl	800a970 <unlock_fs>
#endif
		}
	}
	return res;
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b088      	sub	sp, #32
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	60f8      	str	r0, [r7, #12]
 800cd0a:	60b9      	str	r1, [r7, #8]
 800cd0c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cd16:	e01b      	b.n	800cd50 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cd18:	f107 0310 	add.w	r3, r7, #16
 800cd1c:	f107 0114 	add.w	r1, r7, #20
 800cd20:	2201      	movs	r2, #1
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7ff fc23 	bl	800c56e <f_read>
		if (rc != 1) break;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d116      	bne.n	800cd5c <f_gets+0x5a>
		c = s[0];
 800cd2e:	7d3b      	ldrb	r3, [r7, #20]
 800cd30:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	2b0d      	cmp	r3, #13
 800cd36:	d100      	bne.n	800cd3a <f_gets+0x38>
 800cd38:	e00a      	b.n	800cd50 <f_gets+0x4e>
		*p++ = c;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	1c5a      	adds	r2, r3, #1
 800cd3e:	61ba      	str	r2, [r7, #24]
 800cd40:	7dfa      	ldrb	r2, [r7, #23]
 800cd42:	701a      	strb	r2, [r3, #0]
		n++;
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	3301      	adds	r3, #1
 800cd48:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	2b0a      	cmp	r3, #10
 800cd4e:	d007      	beq.n	800cd60 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	69fa      	ldr	r2, [r7, #28]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	dbde      	blt.n	800cd18 <f_gets+0x16>
 800cd5a:	e002      	b.n	800cd62 <f_gets+0x60>
		if (rc != 1) break;
 800cd5c:	bf00      	nop
 800cd5e:	e000      	b.n	800cd62 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800cd60:	bf00      	nop
	}
	*p = 0;
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <f_gets+0x70>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	e000      	b.n	800cd74 <f_gets+0x72>
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b087      	sub	sp, #28
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cd92:	4b1f      	ldr	r3, [pc, #124]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cd94:	7a5b      	ldrb	r3, [r3, #9]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d131      	bne.n	800ce00 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cd9c:	4b1c      	ldr	r3, [pc, #112]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cd9e:	7a5b      	ldrb	r3, [r3, #9]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	461a      	mov	r2, r3
 800cda4:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cda6:	2100      	movs	r1, #0
 800cda8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cdaa:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdac:	7a5b      	ldrb	r3, [r3, #9]
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	4a17      	ldr	r2, [pc, #92]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdba:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdbc:	7a5b      	ldrb	r3, [r3, #9]
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	4b13      	ldr	r3, [pc, #76]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdc4:	4413      	add	r3, r2
 800cdc6:	79fa      	ldrb	r2, [r7, #7]
 800cdc8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cdca:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdcc:	7a5b      	ldrb	r3, [r3, #9]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	b2d1      	uxtb	r1, r2
 800cdd4:	4a0e      	ldr	r2, [pc, #56]	; (800ce10 <FATFS_LinkDriverEx+0x94>)
 800cdd6:	7251      	strb	r1, [r2, #9]
 800cdd8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cdda:	7dbb      	ldrb	r3, [r7, #22]
 800cddc:	3330      	adds	r3, #48	; 0x30
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	3301      	adds	r3, #1
 800cde8:	223a      	movs	r2, #58	; 0x3a
 800cdea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	3302      	adds	r3, #2
 800cdf0:	222f      	movs	r2, #47	; 0x2f
 800cdf2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	3303      	adds	r3, #3
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	371c      	adds	r7, #28
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr
 800ce0e:	bf00      	nop
 800ce10:	20000f78 	.word	0x20000f78

0800ce14 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce1e:	2200      	movs	r2, #0
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff ffaa 	bl	800cd7c <FATFS_LinkDriverEx>
 800ce28:	4603      	mov	r3, r0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	4603      	mov	r3, r0
 800ce3a:	6039      	str	r1, [r7, #0]
 800ce3c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800ce3e:	2200      	movs	r2, #0
 800ce40:	2101      	movs	r1, #1
 800ce42:	2001      	movs	r0, #1
 800ce44:	f000 f967 	bl	800d116 <osSemaphoreNew>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	bf14      	ite	ne
 800ce56:	2301      	movne	r3, #1
 800ce58:	2300      	moveq	r3, #0
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	60fb      	str	r3, [r7, #12]

    return ret;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fa6f 	bl	800d354 <osSemaphoreDelete>
#endif
    return 1;
 800ce76:	2301      	movs	r3, #1
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800ce8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 f9c9 	bl	800d228 <osSemaphoreAcquire>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cea0:	68fb      	ldr	r3, [r7, #12]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fa0a 	bl	800d2cc <osSemaphoreRelease>
#endif
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <__NVIC_SetPriority>:
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	db0a      	blt.n	800ceea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	490c      	ldr	r1, [pc, #48]	; (800cf0c <__NVIC_SetPriority+0x4c>)
 800ceda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cede:	0112      	lsls	r2, r2, #4
 800cee0:	b2d2      	uxtb	r2, r2
 800cee2:	440b      	add	r3, r1
 800cee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cee8:	e00a      	b.n	800cf00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	4908      	ldr	r1, [pc, #32]	; (800cf10 <__NVIC_SetPriority+0x50>)
 800cef0:	79fb      	ldrb	r3, [r7, #7]
 800cef2:	f003 030f 	and.w	r3, r3, #15
 800cef6:	3b04      	subs	r3, #4
 800cef8:	0112      	lsls	r2, r2, #4
 800cefa:	b2d2      	uxtb	r2, r2
 800cefc:	440b      	add	r3, r1
 800cefe:	761a      	strb	r2, [r3, #24]
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr
 800cf0c:	e000e100 	.word	0xe000e100
 800cf10:	e000ed00 	.word	0xe000ed00

0800cf14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cf14:	b580      	push	{r7, lr}
 800cf16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cf18:	2100      	movs	r1, #0
 800cf1a:	f06f 0004 	mvn.w	r0, #4
 800cf1e:	f7ff ffcf 	bl	800cec0 <__NVIC_SetPriority>
#endif
}
 800cf22:	bf00      	nop
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf2e:	f3ef 8305 	mrs	r3, IPSR
 800cf32:	603b      	str	r3, [r7, #0]
  return(result);
 800cf34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf3a:	f06f 0305 	mvn.w	r3, #5
 800cf3e:	607b      	str	r3, [r7, #4]
 800cf40:	e00c      	b.n	800cf5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf42:	4b0a      	ldr	r3, [pc, #40]	; (800cf6c <osKernelInitialize+0x44>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d105      	bne.n	800cf56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf4a:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <osKernelInitialize+0x44>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	607b      	str	r3, [r7, #4]
 800cf54:	e002      	b.n	800cf5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf56:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf5c:	687b      	ldr	r3, [r7, #4]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	370c      	adds	r7, #12
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	20000f84 	.word	0x20000f84

0800cf70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf76:	f3ef 8305 	mrs	r3, IPSR
 800cf7a:	603b      	str	r3, [r7, #0]
  return(result);
 800cf7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf82:	f06f 0305 	mvn.w	r3, #5
 800cf86:	607b      	str	r3, [r7, #4]
 800cf88:	e010      	b.n	800cfac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	; (800cfb8 <osKernelStart+0x48>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d109      	bne.n	800cfa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf92:	f7ff ffbf 	bl	800cf14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf96:	4b08      	ldr	r3, [pc, #32]	; (800cfb8 <osKernelStart+0x48>)
 800cf98:	2202      	movs	r2, #2
 800cf9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf9c:	f001 fcca 	bl	800e934 <vTaskStartScheduler>
      stat = osOK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	607b      	str	r3, [r7, #4]
 800cfa4:	e002      	b.n	800cfac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cfac:	687b      	ldr	r3, [r7, #4]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20000f84 	.word	0x20000f84

0800cfbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b08e      	sub	sp, #56	; 0x38
 800cfc0:	af04      	add	r7, sp, #16
 800cfc2:	60f8      	str	r0, [r7, #12]
 800cfc4:	60b9      	str	r1, [r7, #8]
 800cfc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfcc:	f3ef 8305 	mrs	r3, IPSR
 800cfd0:	617b      	str	r3, [r7, #20]
  return(result);
 800cfd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d17e      	bne.n	800d0d6 <osThreadNew+0x11a>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d07b      	beq.n	800d0d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cfde:	2380      	movs	r3, #128	; 0x80
 800cfe0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cfe2:	2318      	movs	r3, #24
 800cfe4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295
 800cfee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d045      	beq.n	800d082 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <osThreadNew+0x48>
        name = attr->name;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	699b      	ldr	r3, [r3, #24]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d008      	beq.n	800d02a <osThreadNew+0x6e>
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	2b38      	cmp	r3, #56	; 0x38
 800d01c:	d805      	bhi.n	800d02a <osThreadNew+0x6e>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d001      	beq.n	800d02e <osThreadNew+0x72>
        return (NULL);
 800d02a:	2300      	movs	r3, #0
 800d02c:	e054      	b.n	800d0d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	695b      	ldr	r3, [r3, #20]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	089b      	lsrs	r3, r3, #2
 800d03c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00e      	beq.n	800d064 <osThreadNew+0xa8>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b5b      	cmp	r3, #91	; 0x5b
 800d04c:	d90a      	bls.n	800d064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d052:	2b00      	cmp	r3, #0
 800d054:	d006      	beq.n	800d064 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <osThreadNew+0xa8>
        mem = 1;
 800d05e:	2301      	movs	r3, #1
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	e010      	b.n	800d086 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10c      	bne.n	800d086 <osThreadNew+0xca>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d108      	bne.n	800d086 <osThreadNew+0xca>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d104      	bne.n	800d086 <osThreadNew+0xca>
          mem = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61bb      	str	r3, [r7, #24]
 800d080:	e001      	b.n	800d086 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d086:	69bb      	ldr	r3, [r7, #24]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d110      	bne.n	800d0ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d094:	9202      	str	r2, [sp, #8]
 800d096:	9301      	str	r3, [sp, #4]
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	6a3a      	ldr	r2, [r7, #32]
 800d0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f001 fa70 	bl	800e588 <xTaskCreateStatic>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	e013      	b.n	800d0d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d110      	bne.n	800d0d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	f107 0310 	add.w	r3, r7, #16
 800d0bc:	9301      	str	r3, [sp, #4]
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f001 fabb 	bl	800e642 <xTaskCreate>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d001      	beq.n	800d0d6 <osThreadNew+0x11a>
            hTask = NULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0d6:	693b      	ldr	r3, [r7, #16]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3728      	adds	r7, #40	; 0x28
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0e8:	f3ef 8305 	mrs	r3, IPSR
 800d0ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d003      	beq.n	800d0fc <osDelay+0x1c>
    stat = osErrorISR;
 800d0f4:	f06f 0305 	mvn.w	r3, #5
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e007      	b.n	800d10c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f001 fbe0 	bl	800e8cc <vTaskDelay>
    }
  }

  return (stat);
 800d10c:	68fb      	ldr	r3, [r7, #12]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d116:	b580      	push	{r7, lr}
 800d118:	b08a      	sub	sp, #40	; 0x28
 800d11a:	af02      	add	r7, sp, #8
 800d11c:	60f8      	str	r0, [r7, #12]
 800d11e:	60b9      	str	r1, [r7, #8]
 800d120:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d126:	f3ef 8305 	mrs	r3, IPSR
 800d12a:	613b      	str	r3, [r7, #16]
  return(result);
 800d12c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d175      	bne.n	800d21e <osSemaphoreNew+0x108>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d072      	beq.n	800d21e <osSemaphoreNew+0x108>
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d86e      	bhi.n	800d21e <osSemaphoreNew+0x108>
    mem = -1;
 800d140:	f04f 33ff 	mov.w	r3, #4294967295
 800d144:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d015      	beq.n	800d178 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d006      	beq.n	800d162 <osSemaphoreNew+0x4c>
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	2b4f      	cmp	r3, #79	; 0x4f
 800d15a:	d902      	bls.n	800d162 <osSemaphoreNew+0x4c>
        mem = 1;
 800d15c:	2301      	movs	r3, #1
 800d15e:	61bb      	str	r3, [r7, #24]
 800d160:	e00c      	b.n	800d17c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d108      	bne.n	800d17c <osSemaphoreNew+0x66>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d104      	bne.n	800d17c <osSemaphoreNew+0x66>
          mem = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	61bb      	str	r3, [r7, #24]
 800d176:	e001      	b.n	800d17c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d04c      	beq.n	800d21e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d128      	bne.n	800d1dc <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d10a      	bne.n	800d1a6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	2203      	movs	r2, #3
 800d196:	9200      	str	r2, [sp, #0]
 800d198:	2200      	movs	r2, #0
 800d19a:	2100      	movs	r1, #0
 800d19c:	2001      	movs	r0, #1
 800d19e:	f000 fa4d 	bl	800d63c <xQueueGenericCreateStatic>
 800d1a2:	61f8      	str	r0, [r7, #28]
 800d1a4:	e005      	b.n	800d1b2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d1a6:	2203      	movs	r2, #3
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	f000 fabe 	bl	800d72c <xQueueGenericCreate>
 800d1b0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d022      	beq.n	800d1fe <osSemaphoreNew+0xe8>
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d01f      	beq.n	800d1fe <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d1be:	2300      	movs	r3, #0
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	69f8      	ldr	r0, [r7, #28]
 800d1c6:	f000 fb79 	bl	800d8bc <xQueueGenericSend>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d016      	beq.n	800d1fe <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d1d0:	69f8      	ldr	r0, [r7, #28]
 800d1d2:	f001 f805 	bl	800e1e0 <vQueueDelete>
            hSemaphore = NULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	61fb      	str	r3, [r7, #28]
 800d1da:	e010      	b.n	800d1fe <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d108      	bne.n	800d1f4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	68b9      	ldr	r1, [r7, #8]
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f000 fafb 	bl	800d7e6 <xQueueCreateCountingSemaphoreStatic>
 800d1f0:	61f8      	str	r0, [r7, #28]
 800d1f2:	e004      	b.n	800d1fe <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d1f4:	68b9      	ldr	r1, [r7, #8]
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f000 fb2c 	bl	800d854 <xQueueCreateCountingSemaphore>
 800d1fc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00c      	beq.n	800d21e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d003      	beq.n	800d212 <osSemaphoreNew+0xfc>
          name = attr->name;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	617b      	str	r3, [r7, #20]
 800d210:	e001      	b.n	800d216 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d212:	2300      	movs	r3, #0
 800d214:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d216:	6979      	ldr	r1, [r7, #20]
 800d218:	69f8      	ldr	r0, [r7, #28]
 800d21a:	f001 f92d 	bl	800e478 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d21e:	69fb      	ldr	r3, [r7, #28]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3720      	adds	r7, #32
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d240:	f06f 0303 	mvn.w	r3, #3
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	e039      	b.n	800d2bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d248:	f3ef 8305 	mrs	r3, IPSR
 800d24c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d24e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d250:	2b00      	cmp	r3, #0
 800d252:	d022      	beq.n	800d29a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d25a:	f06f 0303 	mvn.w	r3, #3
 800d25e:	617b      	str	r3, [r7, #20]
 800d260:	e02c      	b.n	800d2bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d262:	2300      	movs	r3, #0
 800d264:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d266:	f107 0308 	add.w	r3, r7, #8
 800d26a:	461a      	mov	r2, r3
 800d26c:	2100      	movs	r1, #0
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f000 ff36 	bl	800e0e0 <xQueueReceiveFromISR>
 800d274:	4603      	mov	r3, r0
 800d276:	2b01      	cmp	r3, #1
 800d278:	d003      	beq.n	800d282 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d27a:	f06f 0302 	mvn.w	r3, #2
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e01c      	b.n	800d2bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d019      	beq.n	800d2bc <osSemaphoreAcquire+0x94>
 800d288:	4b0f      	ldr	r3, [pc, #60]	; (800d2c8 <osSemaphoreAcquire+0xa0>)
 800d28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	f3bf 8f6f 	isb	sy
 800d298:	e010      	b.n	800d2bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6938      	ldr	r0, [r7, #16]
 800d29e:	f000 fe13 	bl	800dec8 <xQueueSemaphoreTake>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d009      	beq.n	800d2bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d2ae:	f06f 0301 	mvn.w	r3, #1
 800d2b2:	617b      	str	r3, [r7, #20]
 800d2b4:	e002      	b.n	800d2bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d2b6:	f06f 0302 	mvn.w	r3, #2
 800d2ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d2bc:	697b      	ldr	r3, [r7, #20]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	e000ed04 	.word	0xe000ed04

0800d2cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d103      	bne.n	800d2ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d2e2:	f06f 0303 	mvn.w	r3, #3
 800d2e6:	617b      	str	r3, [r7, #20]
 800d2e8:	e02c      	b.n	800d344 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2ea:	f3ef 8305 	mrs	r3, IPSR
 800d2ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d01a      	beq.n	800d32c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2fa:	f107 0308 	add.w	r3, r7, #8
 800d2fe:	4619      	mov	r1, r3
 800d300:	6938      	ldr	r0, [r7, #16]
 800d302:	f000 fc74 	bl	800dbee <xQueueGiveFromISR>
 800d306:	4603      	mov	r3, r0
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d003      	beq.n	800d314 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d30c:	f06f 0302 	mvn.w	r3, #2
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	e017      	b.n	800d344 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d014      	beq.n	800d344 <osSemaphoreRelease+0x78>
 800d31a:	4b0d      	ldr	r3, [pc, #52]	; (800d350 <osSemaphoreRelease+0x84>)
 800d31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	e00b      	b.n	800d344 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d32c:	2300      	movs	r3, #0
 800d32e:	2200      	movs	r2, #0
 800d330:	2100      	movs	r1, #0
 800d332:	6938      	ldr	r0, [r7, #16]
 800d334:	f000 fac2 	bl	800d8bc <xQueueGenericSend>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d002      	beq.n	800d344 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d33e:	f06f 0302 	mvn.w	r3, #2
 800d342:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d344:	697b      	ldr	r3, [r7, #20]
}
 800d346:	4618      	mov	r0, r3
 800d348:	3718      	adds	r7, #24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	e000ed04 	.word	0xe000ed04

0800d354 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d360:	f3ef 8305 	mrs	r3, IPSR
 800d364:	60fb      	str	r3, [r7, #12]
  return(result);
 800d366:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800d36c:	f06f 0305 	mvn.w	r3, #5
 800d370:	617b      	str	r3, [r7, #20]
 800d372:	e00e      	b.n	800d392 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d103      	bne.n	800d382 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800d37a:	f06f 0303 	mvn.w	r3, #3
 800d37e:	617b      	str	r3, [r7, #20]
 800d380:	e007      	b.n	800d392 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d382:	6938      	ldr	r0, [r7, #16]
 800d384:	f001 f8a2 	bl	800e4cc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d388:	2300      	movs	r3, #0
 800d38a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800d38c:	6938      	ldr	r0, [r7, #16]
 800d38e:	f000 ff27 	bl	800e1e0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d392:	697b      	ldr	r3, [r7, #20]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3718      	adds	r7, #24
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	4a07      	ldr	r2, [pc, #28]	; (800d3c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d3ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	4a06      	ldr	r2, [pc, #24]	; (800d3cc <vApplicationGetIdleTaskMemory+0x30>)
 800d3b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2280      	movs	r2, #128	; 0x80
 800d3b8:	601a      	str	r2, [r3, #0]
}
 800d3ba:	bf00      	nop
 800d3bc:	3714      	adds	r7, #20
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20000f88 	.word	0x20000f88
 800d3cc:	20000fe4 	.word	0x20000fe4

0800d3d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	4a07      	ldr	r2, [pc, #28]	; (800d3fc <vApplicationGetTimerTaskMemory+0x2c>)
 800d3e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	4a06      	ldr	r2, [pc, #24]	; (800d400 <vApplicationGetTimerTaskMemory+0x30>)
 800d3e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3ee:	601a      	str	r2, [r3, #0]
}
 800d3f0:	bf00      	nop
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	200011e4 	.word	0x200011e4
 800d400:	20001240 	.word	0x20001240

0800d404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f103 0208 	add.w	r2, r3, #8
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f04f 32ff 	mov.w	r2, #4294967295
 800d41c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f103 0208 	add.w	r2, r3, #8
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f103 0208 	add.w	r2, r3, #8
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d452:	bf00      	nop
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr

0800d45e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d45e:	b480      	push	{r7}
 800d460:	b085      	sub	sp, #20
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	689a      	ldr	r2, [r3, #8]
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	683a      	ldr	r2, [r7, #0]
 800d482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	683a      	ldr	r2, [r7, #0]
 800d488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	601a      	str	r2, [r3, #0]
}
 800d49a:	bf00      	nop
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b085      	sub	sp, #20
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d103      	bne.n	800d4c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	e00c      	b.n	800d4e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	e002      	b.n	800d4d4 <vListInsert+0x2e>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	60fb      	str	r3, [r7, #12]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68ba      	ldr	r2, [r7, #8]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d2f6      	bcs.n	800d4ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	683a      	ldr	r2, [r7, #0]
 800d4ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	601a      	str	r2, [r3, #0]
}
 800d50c:	bf00      	nop
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	6892      	ldr	r2, [r2, #8]
 800d52e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	6852      	ldr	r2, [r2, #4]
 800d538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d103      	bne.n	800d54c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	689a      	ldr	r2, [r3, #8]
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	1e5a      	subs	r2, r3, #1
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d10a      	bne.n	800d596 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d584:	f383 8811 	msr	BASEPRI, r3
 800d588:	f3bf 8f6f 	isb	sy
 800d58c:	f3bf 8f4f 	dsb	sy
 800d590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d592:	bf00      	nop
 800d594:	e7fe      	b.n	800d594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d596:	f002 fc6d 	bl	800fe74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681a      	ldr	r2, [r3, #0]
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5a6:	fb01 f303 	mul.w	r3, r1, r3
 800d5aa:	441a      	add	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	68f9      	ldr	r1, [r7, #12]
 800d5ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d5cc:	fb01 f303 	mul.w	r3, r1, r3
 800d5d0:	441a      	add	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	22ff      	movs	r2, #255	; 0xff
 800d5da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	22ff      	movs	r2, #255	; 0xff
 800d5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d114      	bne.n	800d616 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d01a      	beq.n	800d62a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3310      	adds	r3, #16
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f001 fc25 	bl	800ee48 <xTaskRemoveFromEventList>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d012      	beq.n	800d62a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d604:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <xQueueGenericReset+0xcc>)
 800d606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	e009      	b.n	800d62a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3310      	adds	r3, #16
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7ff fef2 	bl	800d404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3324      	adds	r3, #36	; 0x24
 800d624:	4618      	mov	r0, r3
 800d626:	f7ff feed 	bl	800d404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d62a:	f002 fc53 	bl	800fed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d62e:	2301      	movs	r3, #1
}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08e      	sub	sp, #56	; 0x38
 800d640:	af02      	add	r7, sp, #8
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d10a      	bne.n	800d666 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d654:	f383 8811 	msr	BASEPRI, r3
 800d658:	f3bf 8f6f 	isb	sy
 800d65c:	f3bf 8f4f 	dsb	sy
 800d660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d662:	bf00      	nop
 800d664:	e7fe      	b.n	800d664 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10a      	bne.n	800d682 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d67e:	bf00      	nop
 800d680:	e7fe      	b.n	800d680 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <xQueueGenericCreateStatic+0x52>
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <xQueueGenericCreateStatic+0x56>
 800d68e:	2301      	movs	r3, #1
 800d690:	e000      	b.n	800d694 <xQueueGenericCreateStatic+0x58>
 800d692:	2300      	movs	r3, #0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d10a      	bne.n	800d6ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	623b      	str	r3, [r7, #32]
}
 800d6aa:	bf00      	nop
 800d6ac:	e7fe      	b.n	800d6ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d102      	bne.n	800d6ba <xQueueGenericCreateStatic+0x7e>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <xQueueGenericCreateStatic+0x82>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e000      	b.n	800d6c0 <xQueueGenericCreateStatic+0x84>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10a      	bne.n	800d6da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	61fb      	str	r3, [r7, #28]
}
 800d6d6:	bf00      	nop
 800d6d8:	e7fe      	b.n	800d6d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d6da:	2350      	movs	r3, #80	; 0x50
 800d6dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	2b50      	cmp	r3, #80	; 0x50
 800d6e2:	d00a      	beq.n	800d6fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	61bb      	str	r3, [r7, #24]
}
 800d6f6:	bf00      	nop
 800d6f8:	e7fe      	b.n	800d6f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d6fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00d      	beq.n	800d722 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d70e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	4613      	mov	r3, r2
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 f83f 	bl	800d7a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d724:	4618      	mov	r0, r3
 800d726:	3730      	adds	r7, #48	; 0x30
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08a      	sub	sp, #40	; 0x28
 800d730:	af02      	add	r7, sp, #8
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	4613      	mov	r3, r2
 800d738:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10a      	bne.n	800d756 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	613b      	str	r3, [r7, #16]
}
 800d752:	bf00      	nop
 800d754:	e7fe      	b.n	800d754 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	68ba      	ldr	r2, [r7, #8]
 800d75a:	fb02 f303 	mul.w	r3, r2, r3
 800d75e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	3350      	adds	r3, #80	; 0x50
 800d764:	4618      	mov	r0, r3
 800d766:	f002 fca7 	bl	80100b8 <pvPortMalloc>
 800d76a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d011      	beq.n	800d796 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	3350      	adds	r3, #80	; 0x50
 800d77a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d784:	79fa      	ldrb	r2, [r7, #7]
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	4613      	mov	r3, r2
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	68b9      	ldr	r1, [r7, #8]
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f000 f805 	bl	800d7a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d796:	69bb      	ldr	r3, [r7, #24]
	}
 800d798:	4618      	mov	r0, r3
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	60b9      	str	r1, [r7, #8]
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d103      	bne.n	800d7bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	e002      	b.n	800d7c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d7ce:	2101      	movs	r1, #1
 800d7d0:	69b8      	ldr	r0, [r7, #24]
 800d7d2:	f7ff fecb 	bl	800d56c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d7d6:	69bb      	ldr	r3, [r7, #24]
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d7de:	bf00      	nop
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b08a      	sub	sp, #40	; 0x28
 800d7ea:	af02      	add	r7, sp, #8
 800d7ec:	60f8      	str	r0, [r7, #12]
 800d7ee:	60b9      	str	r1, [r7, #8]
 800d7f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	61bb      	str	r3, [r7, #24]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d90a      	bls.n	800d82c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	617b      	str	r3, [r7, #20]
}
 800d828:	bf00      	nop
 800d82a:	e7fe      	b.n	800d82a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d82c:	2302      	movs	r3, #2
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	2100      	movs	r1, #0
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7ff ff00 	bl	800d63c <xQueueGenericCreateStatic>
 800d83c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d002      	beq.n	800d84a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d84a:	69fb      	ldr	r3, [r7, #28]
	}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3720      	adds	r7, #32
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d10a      	bne.n	800d87a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	613b      	str	r3, [r7, #16]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d90a      	bls.n	800d898 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	60fb      	str	r3, [r7, #12]
}
 800d894:	bf00      	nop
 800d896:	e7fe      	b.n	800d896 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d898:	2202      	movs	r2, #2
 800d89a:	2100      	movs	r1, #0
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff ff45 	bl	800d72c <xQueueGenericCreate>
 800d8a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d002      	beq.n	800d8b0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d8b0:	697b      	ldr	r3, [r7, #20]
	}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
	...

0800d8bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b08e      	sub	sp, #56	; 0x38
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10a      	bne.n	800d8ee <xQueueGenericSend+0x32>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8ea:	bf00      	nop
 800d8ec:	e7fe      	b.n	800d8ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d103      	bne.n	800d8fc <xQueueGenericSend+0x40>
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <xQueueGenericSend+0x44>
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e000      	b.n	800d902 <xQueueGenericSend+0x46>
 800d900:	2300      	movs	r3, #0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10a      	bne.n	800d91c <xQueueGenericSend+0x60>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d918:	bf00      	nop
 800d91a:	e7fe      	b.n	800d91a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d103      	bne.n	800d92a <xQueueGenericSend+0x6e>
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d926:	2b01      	cmp	r3, #1
 800d928:	d101      	bne.n	800d92e <xQueueGenericSend+0x72>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e000      	b.n	800d930 <xQueueGenericSend+0x74>
 800d92e:	2300      	movs	r3, #0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10a      	bne.n	800d94a <xQueueGenericSend+0x8e>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	623b      	str	r3, [r7, #32]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d94a:	f001 fc3b 	bl	800f1c4 <xTaskGetSchedulerState>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d102      	bne.n	800d95a <xQueueGenericSend+0x9e>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <xQueueGenericSend+0xa2>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <xQueueGenericSend+0xa4>
 800d95e:	2300      	movs	r3, #0
 800d960:	2b00      	cmp	r3, #0
 800d962:	d10a      	bne.n	800d97a <xQueueGenericSend+0xbe>
	__asm volatile
 800d964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	61fb      	str	r3, [r7, #28]
}
 800d976:	bf00      	nop
 800d978:	e7fe      	b.n	800d978 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d97a:	f002 fa7b 	bl	800fe74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d986:	429a      	cmp	r2, r3
 800d988:	d302      	bcc.n	800d990 <xQueueGenericSend+0xd4>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d129      	bne.n	800d9e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	68b9      	ldr	r1, [r7, #8]
 800d994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d996:	f000 fc5e 	bl	800e256 <prvCopyDataToQueue>
 800d99a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d010      	beq.n	800d9c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	3324      	adds	r3, #36	; 0x24
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f001 fa4d 	bl	800ee48 <xTaskRemoveFromEventList>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d013      	beq.n	800d9dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9b4:	4b3f      	ldr	r3, [pc, #252]	; (800dab4 <xQueueGenericSend+0x1f8>)
 800d9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ba:	601a      	str	r2, [r3, #0]
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	e00a      	b.n	800d9dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d007      	beq.n	800d9dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9cc:	4b39      	ldr	r3, [pc, #228]	; (800dab4 <xQueueGenericSend+0x1f8>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9dc:	f002 fa7a 	bl	800fed4 <vPortExitCritical>
				return pdPASS;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e063      	b.n	800daac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d103      	bne.n	800d9f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9ea:	f002 fa73 	bl	800fed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e05c      	b.n	800daac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d106      	bne.n	800da06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9f8:	f107 0314 	add.w	r3, r7, #20
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f001 fa87 	bl	800ef10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da02:	2301      	movs	r3, #1
 800da04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da06:	f002 fa65 	bl	800fed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da0a:	f000 fff9 	bl	800ea00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da0e:	f002 fa31 	bl	800fe74 <vPortEnterCritical>
 800da12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da18:	b25b      	sxtb	r3, r3
 800da1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1e:	d103      	bne.n	800da28 <xQueueGenericSend+0x16c>
 800da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da2e:	b25b      	sxtb	r3, r3
 800da30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da34:	d103      	bne.n	800da3e <xQueueGenericSend+0x182>
 800da36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da38:	2200      	movs	r2, #0
 800da3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da3e:	f002 fa49 	bl	800fed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da42:	1d3a      	adds	r2, r7, #4
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f001 fa76 	bl	800ef3c <xTaskCheckForTimeOut>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d124      	bne.n	800daa0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da58:	f000 fcf5 	bl	800e446 <prvIsQueueFull>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d018      	beq.n	800da94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	3310      	adds	r3, #16
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f001 f99c 	bl	800eda8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da72:	f000 fc80 	bl	800e376 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da76:	f000 ffd1 	bl	800ea1c <xTaskResumeAll>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f47f af7c 	bne.w	800d97a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da82:	4b0c      	ldr	r3, [pc, #48]	; (800dab4 <xQueueGenericSend+0x1f8>)
 800da84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	e772      	b.n	800d97a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da96:	f000 fc6e 	bl	800e376 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da9a:	f000 ffbf 	bl	800ea1c <xTaskResumeAll>
 800da9e:	e76c      	b.n	800d97a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800daa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daa2:	f000 fc68 	bl	800e376 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daa6:	f000 ffb9 	bl	800ea1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800daaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800daac:	4618      	mov	r0, r3
 800daae:	3738      	adds	r7, #56	; 0x38
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	e000ed04 	.word	0xe000ed04

0800dab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b090      	sub	sp, #64	; 0x40
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10a      	bne.n	800dae6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dae2:	bf00      	nop
 800dae4:	e7fe      	b.n	800dae4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d103      	bne.n	800daf4 <xQueueGenericSendFromISR+0x3c>
 800daec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d101      	bne.n	800daf8 <xQueueGenericSendFromISR+0x40>
 800daf4:	2301      	movs	r3, #1
 800daf6:	e000      	b.n	800dafa <xQueueGenericSendFromISR+0x42>
 800daf8:	2300      	movs	r3, #0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10a      	bne.n	800db14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b02      	cmp	r3, #2
 800db18:	d103      	bne.n	800db22 <xQueueGenericSendFromISR+0x6a>
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <xQueueGenericSendFromISR+0x6e>
 800db22:	2301      	movs	r3, #1
 800db24:	e000      	b.n	800db28 <xQueueGenericSendFromISR+0x70>
 800db26:	2300      	movs	r3, #0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d10a      	bne.n	800db42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800db2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	623b      	str	r3, [r7, #32]
}
 800db3e:	bf00      	nop
 800db40:	e7fe      	b.n	800db40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db42:	f002 fa79 	bl	8010038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db46:	f3ef 8211 	mrs	r2, BASEPRI
 800db4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4e:	f383 8811 	msr	BASEPRI, r3
 800db52:	f3bf 8f6f 	isb	sy
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	61fa      	str	r2, [r7, #28]
 800db5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d302      	bcc.n	800db74 <xQueueGenericSendFromISR+0xbc>
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d12f      	bne.n	800dbd4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	68b9      	ldr	r1, [r7, #8]
 800db88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db8a:	f000 fb64 	bl	800e256 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800db92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db96:	d112      	bne.n	800dbbe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d016      	beq.n	800dbce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	3324      	adds	r3, #36	; 0x24
 800dba4:	4618      	mov	r0, r3
 800dba6:	f001 f94f 	bl	800ee48 <xTaskRemoveFromEventList>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00e      	beq.n	800dbce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00b      	beq.n	800dbce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2201      	movs	r2, #1
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	e007      	b.n	800dbce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	b25a      	sxtb	r2, r3
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dbd2:	e001      	b.n	800dbd8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbe2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3740      	adds	r7, #64	; 0x40
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b08e      	sub	sp, #56	; 0x38
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	623b      	str	r3, [r7, #32]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00a      	beq.n	800dc36 <xQueueGiveFromISR+0x48>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	61fb      	str	r3, [r7, #28]
}
 800dc32:	bf00      	nop
 800dc34:	e7fe      	b.n	800dc34 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d103      	bne.n	800dc46 <xQueueGiveFromISR+0x58>
 800dc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <xQueueGiveFromISR+0x5c>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <xQueueGiveFromISR+0x5e>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10a      	bne.n	800dc66 <xQueueGiveFromISR+0x78>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	61bb      	str	r3, [r7, #24]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc66:	f002 f9e7 	bl	8010038 <vPortValidateInterruptPriority>
	__asm volatile
 800dc6a:	f3ef 8211 	mrs	r2, BASEPRI
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	617a      	str	r2, [r7, #20]
 800dc80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dc82:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dc84:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d22b      	bcs.n	800dcee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb0:	d112      	bne.n	800dcd8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d016      	beq.n	800dce8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbc:	3324      	adds	r3, #36	; 0x24
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f001 f8c2 	bl	800ee48 <xTaskRemoveFromEventList>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00e      	beq.n	800dce8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00b      	beq.n	800dce8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	e007      	b.n	800dce8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcdc:	3301      	adds	r3, #1
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	b25a      	sxtb	r2, r3
 800dce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dce8:	2301      	movs	r3, #1
 800dcea:	637b      	str	r3, [r7, #52]	; 0x34
 800dcec:	e001      	b.n	800dcf2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
 800dcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f383 8811 	msr	BASEPRI, r3
}
 800dcfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3738      	adds	r7, #56	; 0x38
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08c      	sub	sp, #48	; 0x30
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd14:	2300      	movs	r3, #0
 800dd16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d10a      	bne.n	800dd38 <xQueueReceive+0x30>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	623b      	str	r3, [r7, #32]
}
 800dd34:	bf00      	nop
 800dd36:	e7fe      	b.n	800dd36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d103      	bne.n	800dd46 <xQueueReceive+0x3e>
 800dd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <xQueueReceive+0x42>
 800dd46:	2301      	movs	r3, #1
 800dd48:	e000      	b.n	800dd4c <xQueueReceive+0x44>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10a      	bne.n	800dd66 <xQueueReceive+0x5e>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	61fb      	str	r3, [r7, #28]
}
 800dd62:	bf00      	nop
 800dd64:	e7fe      	b.n	800dd64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd66:	f001 fa2d 	bl	800f1c4 <xTaskGetSchedulerState>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d102      	bne.n	800dd76 <xQueueReceive+0x6e>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <xQueueReceive+0x72>
 800dd76:	2301      	movs	r3, #1
 800dd78:	e000      	b.n	800dd7c <xQueueReceive+0x74>
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d10a      	bne.n	800dd96 <xQueueReceive+0x8e>
	__asm volatile
 800dd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd84:	f383 8811 	msr	BASEPRI, r3
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	f3bf 8f4f 	dsb	sy
 800dd90:	61bb      	str	r3, [r7, #24]
}
 800dd92:	bf00      	nop
 800dd94:	e7fe      	b.n	800dd94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dd96:	f002 f86d 	bl	800fe74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d01f      	beq.n	800dde6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dda6:	68b9      	ldr	r1, [r7, #8]
 800dda8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddaa:	f000 fabe 	bl	800e32a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb0:	1e5a      	subs	r2, r3, #1
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00f      	beq.n	800ddde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	3310      	adds	r3, #16
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 f840 	bl	800ee48 <xTaskRemoveFromEventList>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d007      	beq.n	800ddde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ddce:	4b3d      	ldr	r3, [pc, #244]	; (800dec4 <xQueueReceive+0x1bc>)
 800ddd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ddde:	f002 f879 	bl	800fed4 <vPortExitCritical>
				return pdPASS;
 800dde2:	2301      	movs	r3, #1
 800dde4:	e069      	b.n	800deba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d103      	bne.n	800ddf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ddec:	f002 f872 	bl	800fed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e062      	b.n	800deba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ddf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d106      	bne.n	800de08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ddfa:	f107 0310 	add.w	r3, r7, #16
 800ddfe:	4618      	mov	r0, r3
 800de00:	f001 f886 	bl	800ef10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de04:	2301      	movs	r3, #1
 800de06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de08:	f002 f864 	bl	800fed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de0c:	f000 fdf8 	bl	800ea00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de10:	f002 f830 	bl	800fe74 <vPortEnterCritical>
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de1a:	b25b      	sxtb	r3, r3
 800de1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de20:	d103      	bne.n	800de2a <xQueueReceive+0x122>
 800de22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de24:	2200      	movs	r2, #0
 800de26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de30:	b25b      	sxtb	r3, r3
 800de32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de36:	d103      	bne.n	800de40 <xQueueReceive+0x138>
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	2200      	movs	r2, #0
 800de3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de40:	f002 f848 	bl	800fed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de44:	1d3a      	adds	r2, r7, #4
 800de46:	f107 0310 	add.w	r3, r7, #16
 800de4a:	4611      	mov	r1, r2
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 f875 	bl	800ef3c <xTaskCheckForTimeOut>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d123      	bne.n	800dea0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de5a:	f000 fade 	bl	800e41a <prvIsQueueEmpty>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d017      	beq.n	800de94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	3324      	adds	r3, #36	; 0x24
 800de68:	687a      	ldr	r2, [r7, #4]
 800de6a:	4611      	mov	r1, r2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f000 ff9b 	bl	800eda8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800de72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de74:	f000 fa7f 	bl	800e376 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800de78:	f000 fdd0 	bl	800ea1c <xTaskResumeAll>
 800de7c:	4603      	mov	r3, r0
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d189      	bne.n	800dd96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800de82:	4b10      	ldr	r3, [pc, #64]	; (800dec4 <xQueueReceive+0x1bc>)
 800de84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de88:	601a      	str	r2, [r3, #0]
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	f3bf 8f6f 	isb	sy
 800de92:	e780      	b.n	800dd96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800de94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de96:	f000 fa6e 	bl	800e376 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de9a:	f000 fdbf 	bl	800ea1c <xTaskResumeAll>
 800de9e:	e77a      	b.n	800dd96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dea2:	f000 fa68 	bl	800e376 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dea6:	f000 fdb9 	bl	800ea1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800deaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deac:	f000 fab5 	bl	800e41a <prvIsQueueEmpty>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f43f af6f 	beq.w	800dd96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800deb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800deba:	4618      	mov	r0, r3
 800debc:	3730      	adds	r7, #48	; 0x30
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	e000ed04 	.word	0xe000ed04

0800dec8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08e      	sub	sp, #56	; 0x38
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ded2:	2300      	movs	r3, #0
 800ded4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800deda:	2300      	movs	r3, #0
 800dedc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10a      	bne.n	800defa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	623b      	str	r3, [r7, #32]
}
 800def6:	bf00      	nop
 800def8:	e7fe      	b.n	800def8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00a      	beq.n	800df18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800df02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df06:	f383 8811 	msr	BASEPRI, r3
 800df0a:	f3bf 8f6f 	isb	sy
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	61fb      	str	r3, [r7, #28]
}
 800df14:	bf00      	nop
 800df16:	e7fe      	b.n	800df16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df18:	f001 f954 	bl	800f1c4 <xTaskGetSchedulerState>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d102      	bne.n	800df28 <xQueueSemaphoreTake+0x60>
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <xQueueSemaphoreTake+0x64>
 800df28:	2301      	movs	r3, #1
 800df2a:	e000      	b.n	800df2e <xQueueSemaphoreTake+0x66>
 800df2c:	2300      	movs	r3, #0
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d10a      	bne.n	800df48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800df32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df36:	f383 8811 	msr	BASEPRI, r3
 800df3a:	f3bf 8f6f 	isb	sy
 800df3e:	f3bf 8f4f 	dsb	sy
 800df42:	61bb      	str	r3, [r7, #24]
}
 800df44:	bf00      	nop
 800df46:	e7fe      	b.n	800df46 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df48:	f001 ff94 	bl	800fe74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df54:	2b00      	cmp	r3, #0
 800df56:	d024      	beq.n	800dfa2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	1e5a      	subs	r2, r3, #1
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d104      	bne.n	800df72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800df68:	f001 faa2 	bl	800f4b0 <pvTaskIncrementMutexHeldCount>
 800df6c:	4602      	mov	r2, r0
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00f      	beq.n	800df9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	3310      	adds	r3, #16
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 ff62 	bl	800ee48 <xTaskRemoveFromEventList>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d007      	beq.n	800df9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df8a:	4b54      	ldr	r3, [pc, #336]	; (800e0dc <xQueueSemaphoreTake+0x214>)
 800df8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df90:	601a      	str	r2, [r3, #0]
 800df92:	f3bf 8f4f 	dsb	sy
 800df96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df9a:	f001 ff9b 	bl	800fed4 <vPortExitCritical>
				return pdPASS;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e097      	b.n	800e0d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d111      	bne.n	800dfcc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00a      	beq.n	800dfc4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	617b      	str	r3, [r7, #20]
}
 800dfc0:	bf00      	nop
 800dfc2:	e7fe      	b.n	800dfc2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dfc4:	f001 ff86 	bl	800fed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	e082      	b.n	800e0d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d106      	bne.n	800dfe0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfd2:	f107 030c 	add.w	r3, r7, #12
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f000 ff9a 	bl	800ef10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfdc:	2301      	movs	r3, #1
 800dfde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfe0:	f001 ff78 	bl	800fed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfe4:	f000 fd0c 	bl	800ea00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfe8:	f001 ff44 	bl	800fe74 <vPortEnterCritical>
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dff2:	b25b      	sxtb	r3, r3
 800dff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff8:	d103      	bne.n	800e002 <xQueueSemaphoreTake+0x13a>
 800dffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e008:	b25b      	sxtb	r3, r3
 800e00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e00e:	d103      	bne.n	800e018 <xQueueSemaphoreTake+0x150>
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	2200      	movs	r2, #0
 800e014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e018:	f001 ff5c 	bl	800fed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e01c:	463a      	mov	r2, r7
 800e01e:	f107 030c 	add.w	r3, r7, #12
 800e022:	4611      	mov	r1, r2
 800e024:	4618      	mov	r0, r3
 800e026:	f000 ff89 	bl	800ef3c <xTaskCheckForTimeOut>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d132      	bne.n	800e096 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e032:	f000 f9f2 	bl	800e41a <prvIsQueueEmpty>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d026      	beq.n	800e08a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d109      	bne.n	800e058 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e044:	f001 ff16 	bl	800fe74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f001 f8d7 	bl	800f200 <xTaskPriorityInherit>
 800e052:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e054:	f001 ff3e 	bl	800fed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	3324      	adds	r3, #36	; 0x24
 800e05c:	683a      	ldr	r2, [r7, #0]
 800e05e:	4611      	mov	r1, r2
 800e060:	4618      	mov	r0, r3
 800e062:	f000 fea1 	bl	800eda8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e068:	f000 f985 	bl	800e376 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e06c:	f000 fcd6 	bl	800ea1c <xTaskResumeAll>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	f47f af68 	bne.w	800df48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e078:	4b18      	ldr	r3, [pc, #96]	; (800e0dc <xQueueSemaphoreTake+0x214>)
 800e07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e07e:	601a      	str	r2, [r3, #0]
 800e080:	f3bf 8f4f 	dsb	sy
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	e75e      	b.n	800df48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e08c:	f000 f973 	bl	800e376 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e090:	f000 fcc4 	bl	800ea1c <xTaskResumeAll>
 800e094:	e758      	b.n	800df48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e098:	f000 f96d 	bl	800e376 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e09c:	f000 fcbe 	bl	800ea1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0a2:	f000 f9ba 	bl	800e41a <prvIsQueueEmpty>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f43f af4d 	beq.w	800df48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00d      	beq.n	800e0d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e0b4:	f001 fede 	bl	800fe74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0ba:	f000 f8b4 	bl	800e226 <prvGetDisinheritPriorityAfterTimeout>
 800e0be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f001 f970 	bl	800f3ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e0cc:	f001 ff02 	bl	800fed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3738      	adds	r7, #56	; 0x38
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	e000ed04 	.word	0xe000ed04

0800e0e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08e      	sub	sp, #56	; 0x38
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d10a      	bne.n	800e10c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fa:	f383 8811 	msr	BASEPRI, r3
 800e0fe:	f3bf 8f6f 	isb	sy
 800e102:	f3bf 8f4f 	dsb	sy
 800e106:	623b      	str	r3, [r7, #32]
}
 800e108:	bf00      	nop
 800e10a:	e7fe      	b.n	800e10a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d103      	bne.n	800e11a <xQueueReceiveFromISR+0x3a>
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e116:	2b00      	cmp	r3, #0
 800e118:	d101      	bne.n	800e11e <xQueueReceiveFromISR+0x3e>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e000      	b.n	800e120 <xQueueReceiveFromISR+0x40>
 800e11e:	2300      	movs	r3, #0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d10a      	bne.n	800e13a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	61fb      	str	r3, [r7, #28]
}
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e13a:	f001 ff7d 	bl	8010038 <vPortValidateInterruptPriority>
	__asm volatile
 800e13e:	f3ef 8211 	mrs	r2, BASEPRI
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	61ba      	str	r2, [r7, #24]
 800e154:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e156:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e158:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e162:	2b00      	cmp	r3, #0
 800e164:	d02f      	beq.n	800e1c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e16c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e174:	f000 f8d9 	bl	800e32a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e17a:	1e5a      	subs	r2, r3, #1
 800e17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e180:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e188:	d112      	bne.n	800e1b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18c:	691b      	ldr	r3, [r3, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d016      	beq.n	800e1c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	3310      	adds	r3, #16
 800e196:	4618      	mov	r0, r3
 800e198:	f000 fe56 	bl	800ee48 <xTaskRemoveFromEventList>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00e      	beq.n	800e1c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00b      	beq.n	800e1c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e007      	b.n	800e1c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e1b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	b25a      	sxtb	r2, r3
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c4:	e001      	b.n	800e1ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	f383 8811 	msr	BASEPRI, r3
}
 800e1d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3738      	adds	r7, #56	; 0x38
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d10a      	bne.n	800e208 <vQueueDelete+0x28>
	__asm volatile
 800e1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f6:	f383 8811 	msr	BASEPRI, r3
 800e1fa:	f3bf 8f6f 	isb	sy
 800e1fe:	f3bf 8f4f 	dsb	sy
 800e202:	60bb      	str	r3, [r7, #8]
}
 800e204:	bf00      	nop
 800e206:	e7fe      	b.n	800e206 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f000 f95f 	bl	800e4cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f002 f819 	bl	8010250 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e21e:	bf00      	nop
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e226:	b480      	push	{r7}
 800e228:	b085      	sub	sp, #20
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e232:	2b00      	cmp	r3, #0
 800e234:	d006      	beq.n	800e244 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	e001      	b.n	800e248 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e244:	2300      	movs	r3, #0
 800e246:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e248:	68fb      	ldr	r3, [r7, #12]
	}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3714      	adds	r7, #20
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b086      	sub	sp, #24
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e26a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10d      	bne.n	800e290 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d14d      	bne.n	800e318 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	4618      	mov	r0, r3
 800e282:	f001 f825 	bl	800f2d0 <xTaskPriorityDisinherit>
 800e286:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	609a      	str	r2, [r3, #8]
 800e28e:	e043      	b.n	800e318 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d119      	bne.n	800e2ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	6858      	ldr	r0, [r3, #4]
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e29e:	461a      	mov	r2, r3
 800e2a0:	68b9      	ldr	r1, [r7, #8]
 800e2a2:	f002 f96b 	bl	801057c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ae:	441a      	add	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d32b      	bcc.n	800e318 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	605a      	str	r2, [r3, #4]
 800e2c8:	e026      	b.n	800e318 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	68d8      	ldr	r0, [r3, #12]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	68b9      	ldr	r1, [r7, #8]
 800e2d6:	f002 f951 	bl	801057c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	68da      	ldr	r2, [r3, #12]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e2:	425b      	negs	r3, r3
 800e2e4:	441a      	add	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68da      	ldr	r2, [r3, #12]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d207      	bcs.n	800e306 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	689a      	ldr	r2, [r3, #8]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2fe:	425b      	negs	r3, r3
 800e300:	441a      	add	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b02      	cmp	r3, #2
 800e30a:	d105      	bne.n	800e318 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d002      	beq.n	800e318 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	3b01      	subs	r3, #1
 800e316:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e320:	697b      	ldr	r3, [r7, #20]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3718      	adds	r7, #24
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b082      	sub	sp, #8
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d018      	beq.n	800e36e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68da      	ldr	r2, [r3, #12]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e344:	441a      	add	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	68da      	ldr	r2, [r3, #12]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	429a      	cmp	r2, r3
 800e354:	d303      	bcc.n	800e35e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	68d9      	ldr	r1, [r3, #12]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e366:	461a      	mov	r2, r3
 800e368:	6838      	ldr	r0, [r7, #0]
 800e36a:	f002 f907 	bl	801057c <memcpy>
	}
}
 800e36e:	bf00      	nop
 800e370:	3708      	adds	r7, #8
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b084      	sub	sp, #16
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e37e:	f001 fd79 	bl	800fe74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e388:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e38a:	e011      	b.n	800e3b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	2b00      	cmp	r3, #0
 800e392:	d012      	beq.n	800e3ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3324      	adds	r3, #36	; 0x24
 800e398:	4618      	mov	r0, r3
 800e39a:	f000 fd55 	bl	800ee48 <xTaskRemoveFromEventList>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d001      	beq.n	800e3a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3a4:	f000 fe2c 	bl	800f000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3a8:	7bfb      	ldrb	r3, [r7, #15]
 800e3aa:	3b01      	subs	r3, #1
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	dce9      	bgt.n	800e38c <prvUnlockQueue+0x16>
 800e3b8:	e000      	b.n	800e3bc <prvUnlockQueue+0x46>
					break;
 800e3ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	22ff      	movs	r2, #255	; 0xff
 800e3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e3c4:	f001 fd86 	bl	800fed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3c8:	f001 fd54 	bl	800fe74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3d4:	e011      	b.n	800e3fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d012      	beq.n	800e404 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3310      	adds	r3, #16
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 fd30 	bl	800ee48 <xTaskRemoveFromEventList>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e3ee:	f000 fe07 	bl	800f000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
 800e3f4:	3b01      	subs	r3, #1
 800e3f6:	b2db      	uxtb	r3, r3
 800e3f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	dce9      	bgt.n	800e3d6 <prvUnlockQueue+0x60>
 800e402:	e000      	b.n	800e406 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e404:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	22ff      	movs	r2, #255	; 0xff
 800e40a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e40e:	f001 fd61 	bl	800fed4 <vPortExitCritical>
}
 800e412:	bf00      	nop
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b084      	sub	sp, #16
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e422:	f001 fd27 	bl	800fe74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e42e:	2301      	movs	r3, #1
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	e001      	b.n	800e438 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e434:	2300      	movs	r3, #0
 800e436:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e438:	f001 fd4c 	bl	800fed4 <vPortExitCritical>

	return xReturn;
 800e43c:	68fb      	ldr	r3, [r7, #12]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e44e:	f001 fd11 	bl	800fe74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d102      	bne.n	800e464 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e45e:	2301      	movs	r3, #1
 800e460:	60fb      	str	r3, [r7, #12]
 800e462:	e001      	b.n	800e468 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e468:	f001 fd34 	bl	800fed4 <vPortExitCritical>

	return xReturn;
 800e46c:	68fb      	ldr	r3, [r7, #12]
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3710      	adds	r7, #16
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
	...

0800e478 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e482:	2300      	movs	r3, #0
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	e014      	b.n	800e4b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e488:	4a0f      	ldr	r2, [pc, #60]	; (800e4c8 <vQueueAddToRegistry+0x50>)
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10b      	bne.n	800e4ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e494:	490c      	ldr	r1, [pc, #48]	; (800e4c8 <vQueueAddToRegistry+0x50>)
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e49e:	4a0a      	ldr	r2, [pc, #40]	; (800e4c8 <vQueueAddToRegistry+0x50>)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	00db      	lsls	r3, r3, #3
 800e4a4:	4413      	add	r3, r2
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e4aa:	e006      	b.n	800e4ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b07      	cmp	r3, #7
 800e4b6:	d9e7      	bls.n	800e488 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e4b8:	bf00      	nop
 800e4ba:	bf00      	nop
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	20001640 	.word	0x20001640

0800e4cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	60fb      	str	r3, [r7, #12]
 800e4d8:	e016      	b.n	800e508 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e4da:	4a10      	ldr	r2, [pc, #64]	; (800e51c <vQueueUnregisterQueue+0x50>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	4413      	add	r3, r2
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d10b      	bne.n	800e502 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e4ea:	4a0c      	ldr	r2, [pc, #48]	; (800e51c <vQueueUnregisterQueue+0x50>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e4f4:	4a09      	ldr	r2, [pc, #36]	; (800e51c <vQueueUnregisterQueue+0x50>)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	00db      	lsls	r3, r3, #3
 800e4fa:	4413      	add	r3, r2
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	605a      	str	r2, [r3, #4]
				break;
 800e500:	e006      	b.n	800e510 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	3301      	adds	r3, #1
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b07      	cmp	r3, #7
 800e50c:	d9e5      	bls.n	800e4da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e50e:	bf00      	nop
 800e510:	bf00      	nop
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr
 800e51c:	20001640 	.word	0x20001640

0800e520 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e530:	f001 fca0 	bl	800fe74 <vPortEnterCritical>
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e53a:	b25b      	sxtb	r3, r3
 800e53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e540:	d103      	bne.n	800e54a <vQueueWaitForMessageRestricted+0x2a>
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e550:	b25b      	sxtb	r3, r3
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d103      	bne.n	800e560 <vQueueWaitForMessageRestricted+0x40>
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e560:	f001 fcb8 	bl	800fed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d106      	bne.n	800e57a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	3324      	adds	r3, #36	; 0x24
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	68b9      	ldr	r1, [r7, #8]
 800e574:	4618      	mov	r0, r3
 800e576:	f000 fc3b 	bl	800edf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e57a:	6978      	ldr	r0, [r7, #20]
 800e57c:	f7ff fefb 	bl	800e376 <prvUnlockQueue>
	}
 800e580:	bf00      	nop
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	; 0x38
 800e58c:	af04      	add	r7, sp, #16
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	623b      	str	r3, [r7, #32]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10a      	bne.n	800e5ce <xTaskCreateStatic+0x46>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	61fb      	str	r3, [r7, #28]
}
 800e5ca:	bf00      	nop
 800e5cc:	e7fe      	b.n	800e5cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e5ce:	235c      	movs	r3, #92	; 0x5c
 800e5d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e5d6:	d00a      	beq.n	800e5ee <xTaskCreateStatic+0x66>
	__asm volatile
 800e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	61bb      	str	r3, [r7, #24]
}
 800e5ea:	bf00      	nop
 800e5ec:	e7fe      	b.n	800e5ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e5ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d01e      	beq.n	800e634 <xTaskCreateStatic+0xac>
 800e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d01b      	beq.n	800e634 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e604:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	2202      	movs	r2, #2
 800e60a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e60e:	2300      	movs	r3, #0
 800e610:	9303      	str	r3, [sp, #12]
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	9302      	str	r3, [sp, #8]
 800e616:	f107 0314 	add.w	r3, r7, #20
 800e61a:	9301      	str	r3, [sp, #4]
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	68b9      	ldr	r1, [r7, #8]
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f850 	bl	800e6cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e62c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e62e:	f000 f8dd 	bl	800e7ec <prvAddNewTaskToReadyList>
 800e632:	e001      	b.n	800e638 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e634:	2300      	movs	r3, #0
 800e636:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e638:	697b      	ldr	r3, [r7, #20]
	}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3728      	adds	r7, #40	; 0x28
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e642:	b580      	push	{r7, lr}
 800e644:	b08c      	sub	sp, #48	; 0x30
 800e646:	af04      	add	r7, sp, #16
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	60b9      	str	r1, [r7, #8]
 800e64c:	603b      	str	r3, [r7, #0]
 800e64e:	4613      	mov	r3, r2
 800e650:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e652:	88fb      	ldrh	r3, [r7, #6]
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4618      	mov	r0, r3
 800e658:	f001 fd2e 	bl	80100b8 <pvPortMalloc>
 800e65c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00e      	beq.n	800e682 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e664:	205c      	movs	r0, #92	; 0x5c
 800e666:	f001 fd27 	bl	80100b8 <pvPortMalloc>
 800e66a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d003      	beq.n	800e67a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e672:	69fb      	ldr	r3, [r7, #28]
 800e674:	697a      	ldr	r2, [r7, #20]
 800e676:	631a      	str	r2, [r3, #48]	; 0x30
 800e678:	e005      	b.n	800e686 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e67a:	6978      	ldr	r0, [r7, #20]
 800e67c:	f001 fde8 	bl	8010250 <vPortFree>
 800e680:	e001      	b.n	800e686 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e682:	2300      	movs	r3, #0
 800e684:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d017      	beq.n	800e6bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	2200      	movs	r2, #0
 800e690:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e694:	88fa      	ldrh	r2, [r7, #6]
 800e696:	2300      	movs	r3, #0
 800e698:	9303      	str	r3, [sp, #12]
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	9302      	str	r3, [sp, #8]
 800e69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	68b9      	ldr	r1, [r7, #8]
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 f80e 	bl	800e6cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e6b0:	69f8      	ldr	r0, [r7, #28]
 800e6b2:	f000 f89b 	bl	800e7ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	61bb      	str	r3, [r7, #24]
 800e6ba:	e002      	b.n	800e6c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e6c2:	69bb      	ldr	r3, [r7, #24]
	}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3720      	adds	r7, #32
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b088      	sub	sp, #32
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
 800e6d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	21a5      	movs	r1, #165	; 0xa5
 800e6e6:	f001 ff57 	bl	8010598 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	f023 0307 	bic.w	r3, r3, #7
 800e702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	f003 0307 	and.w	r3, r3, #7
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00a      	beq.n	800e724 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	617b      	str	r3, [r7, #20]
}
 800e720:	bf00      	nop
 800e722:	e7fe      	b.n	800e722 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d01f      	beq.n	800e76a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e72a:	2300      	movs	r3, #0
 800e72c:	61fb      	str	r3, [r7, #28]
 800e72e:	e012      	b.n	800e756 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	4413      	add	r3, r2
 800e736:	7819      	ldrb	r1, [r3, #0]
 800e738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	4413      	add	r3, r2
 800e73e:	3334      	adds	r3, #52	; 0x34
 800e740:	460a      	mov	r2, r1
 800e742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	4413      	add	r3, r2
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d006      	beq.n	800e75e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	3301      	adds	r3, #1
 800e754:	61fb      	str	r3, [r7, #28]
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	2b0f      	cmp	r3, #15
 800e75a:	d9e9      	bls.n	800e730 <prvInitialiseNewTask+0x64>
 800e75c:	e000      	b.n	800e760 <prvInitialiseNewTask+0x94>
			{
				break;
 800e75e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	2200      	movs	r2, #0
 800e764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e768:	e003      	b.n	800e772 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e774:	2b37      	cmp	r3, #55	; 0x37
 800e776:	d901      	bls.n	800e77c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e778:	2337      	movs	r3, #55	; 0x37
 800e77a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e786:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78a:	2200      	movs	r2, #0
 800e78c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e790:	3304      	adds	r3, #4
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe fe56 	bl	800d444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	3318      	adds	r3, #24
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7fe fe51 	bl	800d444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	68f9      	ldr	r1, [r7, #12]
 800e7ca:	69b8      	ldr	r0, [r7, #24]
 800e7cc:	f001 fa26 	bl	800fc1c <pxPortInitialiseStack>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d002      	beq.n	800e7e2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7e2:	bf00      	nop
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
	...

0800e7ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e7f4:	f001 fb3e 	bl	800fe74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e7f8:	4b2d      	ldr	r3, [pc, #180]	; (800e8b0 <prvAddNewTaskToReadyList+0xc4>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	4a2c      	ldr	r2, [pc, #176]	; (800e8b0 <prvAddNewTaskToReadyList+0xc4>)
 800e800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e802:	4b2c      	ldr	r3, [pc, #176]	; (800e8b4 <prvAddNewTaskToReadyList+0xc8>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d109      	bne.n	800e81e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e80a:	4a2a      	ldr	r2, [pc, #168]	; (800e8b4 <prvAddNewTaskToReadyList+0xc8>)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e810:	4b27      	ldr	r3, [pc, #156]	; (800e8b0 <prvAddNewTaskToReadyList+0xc4>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d110      	bne.n	800e83a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e818:	f000 fc16 	bl	800f048 <prvInitialiseTaskLists>
 800e81c:	e00d      	b.n	800e83a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e81e:	4b26      	ldr	r3, [pc, #152]	; (800e8b8 <prvAddNewTaskToReadyList+0xcc>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d109      	bne.n	800e83a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <prvAddNewTaskToReadyList+0xc8>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e830:	429a      	cmp	r2, r3
 800e832:	d802      	bhi.n	800e83a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e834:	4a1f      	ldr	r2, [pc, #124]	; (800e8b4 <prvAddNewTaskToReadyList+0xc8>)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e83a:	4b20      	ldr	r3, [pc, #128]	; (800e8bc <prvAddNewTaskToReadyList+0xd0>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3301      	adds	r3, #1
 800e840:	4a1e      	ldr	r2, [pc, #120]	; (800e8bc <prvAddNewTaskToReadyList+0xd0>)
 800e842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e844:	4b1d      	ldr	r3, [pc, #116]	; (800e8bc <prvAddNewTaskToReadyList+0xd0>)
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e850:	4b1b      	ldr	r3, [pc, #108]	; (800e8c0 <prvAddNewTaskToReadyList+0xd4>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	429a      	cmp	r2, r3
 800e856:	d903      	bls.n	800e860 <prvAddNewTaskToReadyList+0x74>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e85c:	4a18      	ldr	r2, [pc, #96]	; (800e8c0 <prvAddNewTaskToReadyList+0xd4>)
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e864:	4613      	mov	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	4413      	add	r3, r2
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	4a15      	ldr	r2, [pc, #84]	; (800e8c4 <prvAddNewTaskToReadyList+0xd8>)
 800e86e:	441a      	add	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	3304      	adds	r3, #4
 800e874:	4619      	mov	r1, r3
 800e876:	4610      	mov	r0, r2
 800e878:	f7fe fdf1 	bl	800d45e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e87c:	f001 fb2a 	bl	800fed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e880:	4b0d      	ldr	r3, [pc, #52]	; (800e8b8 <prvAddNewTaskToReadyList+0xcc>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00e      	beq.n	800e8a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e888:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <prvAddNewTaskToReadyList+0xc8>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e892:	429a      	cmp	r2, r3
 800e894:	d207      	bcs.n	800e8a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e896:	4b0c      	ldr	r3, [pc, #48]	; (800e8c8 <prvAddNewTaskToReadyList+0xdc>)
 800e898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e89c:	601a      	str	r2, [r3, #0]
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e8a6:	bf00      	nop
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20001b54 	.word	0x20001b54
 800e8b4:	20001680 	.word	0x20001680
 800e8b8:	20001b60 	.word	0x20001b60
 800e8bc:	20001b70 	.word	0x20001b70
 800e8c0:	20001b5c 	.word	0x20001b5c
 800e8c4:	20001684 	.word	0x20001684
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d017      	beq.n	800e90e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e8de:	4b13      	ldr	r3, [pc, #76]	; (800e92c <vTaskDelay+0x60>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00a      	beq.n	800e8fc <vTaskDelay+0x30>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	60bb      	str	r3, [r7, #8]
}
 800e8f8:	bf00      	nop
 800e8fa:	e7fe      	b.n	800e8fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e8fc:	f000 f880 	bl	800ea00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e900:	2100      	movs	r1, #0
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 fde8 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e908:	f000 f888 	bl	800ea1c <xTaskResumeAll>
 800e90c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d107      	bne.n	800e924 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e914:	4b06      	ldr	r3, [pc, #24]	; (800e930 <vTaskDelay+0x64>)
 800e916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e924:	bf00      	nop
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20001b7c 	.word	0x20001b7c
 800e930:	e000ed04 	.word	0xe000ed04

0800e934 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b08a      	sub	sp, #40	; 0x28
 800e938:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e93a:	2300      	movs	r3, #0
 800e93c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e93e:	2300      	movs	r3, #0
 800e940:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e942:	463a      	mov	r2, r7
 800e944:	1d39      	adds	r1, r7, #4
 800e946:	f107 0308 	add.w	r3, r7, #8
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe fd26 	bl	800d39c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	9202      	str	r2, [sp, #8]
 800e958:	9301      	str	r3, [sp, #4]
 800e95a:	2300      	movs	r3, #0
 800e95c:	9300      	str	r3, [sp, #0]
 800e95e:	2300      	movs	r3, #0
 800e960:	460a      	mov	r2, r1
 800e962:	4921      	ldr	r1, [pc, #132]	; (800e9e8 <vTaskStartScheduler+0xb4>)
 800e964:	4821      	ldr	r0, [pc, #132]	; (800e9ec <vTaskStartScheduler+0xb8>)
 800e966:	f7ff fe0f 	bl	800e588 <xTaskCreateStatic>
 800e96a:	4603      	mov	r3, r0
 800e96c:	4a20      	ldr	r2, [pc, #128]	; (800e9f0 <vTaskStartScheduler+0xbc>)
 800e96e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e970:	4b1f      	ldr	r3, [pc, #124]	; (800e9f0 <vTaskStartScheduler+0xbc>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e978:	2301      	movs	r3, #1
 800e97a:	617b      	str	r3, [r7, #20]
 800e97c:	e001      	b.n	800e982 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e97e:	2300      	movs	r3, #0
 800e980:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d102      	bne.n	800e98e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e988:	f000 fdfa 	bl	800f580 <xTimerCreateTimerTask>
 800e98c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2b01      	cmp	r3, #1
 800e992:	d116      	bne.n	800e9c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	613b      	str	r3, [r7, #16]
}
 800e9a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9a8:	4b12      	ldr	r3, [pc, #72]	; (800e9f4 <vTaskStartScheduler+0xc0>)
 800e9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9b0:	4b11      	ldr	r3, [pc, #68]	; (800e9f8 <vTaskStartScheduler+0xc4>)
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9b6:	4b11      	ldr	r3, [pc, #68]	; (800e9fc <vTaskStartScheduler+0xc8>)
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e9bc:	f001 f9b8 	bl	800fd30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e9c0:	e00e      	b.n	800e9e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d10a      	bne.n	800e9e0 <vTaskStartScheduler+0xac>
	__asm volatile
 800e9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ce:	f383 8811 	msr	BASEPRI, r3
 800e9d2:	f3bf 8f6f 	isb	sy
 800e9d6:	f3bf 8f4f 	dsb	sy
 800e9da:	60fb      	str	r3, [r7, #12]
}
 800e9dc:	bf00      	nop
 800e9de:	e7fe      	b.n	800e9de <vTaskStartScheduler+0xaa>
}
 800e9e0:	bf00      	nop
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	080142c8 	.word	0x080142c8
 800e9ec:	0800f019 	.word	0x0800f019
 800e9f0:	20001b78 	.word	0x20001b78
 800e9f4:	20001b74 	.word	0x20001b74
 800e9f8:	20001b60 	.word	0x20001b60
 800e9fc:	20001b58 	.word	0x20001b58

0800ea00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea00:	b480      	push	{r7}
 800ea02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <vTaskSuspendAll+0x18>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	4a03      	ldr	r2, [pc, #12]	; (800ea18 <vTaskSuspendAll+0x18>)
 800ea0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ea0e:	bf00      	nop
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	20001b7c 	.word	0x20001b7c

0800ea1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea26:	2300      	movs	r3, #0
 800ea28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea2a:	4b42      	ldr	r3, [pc, #264]	; (800eb34 <xTaskResumeAll+0x118>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10a      	bne.n	800ea48 <xTaskResumeAll+0x2c>
	__asm volatile
 800ea32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea36:	f383 8811 	msr	BASEPRI, r3
 800ea3a:	f3bf 8f6f 	isb	sy
 800ea3e:	f3bf 8f4f 	dsb	sy
 800ea42:	603b      	str	r3, [r7, #0]
}
 800ea44:	bf00      	nop
 800ea46:	e7fe      	b.n	800ea46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ea48:	f001 fa14 	bl	800fe74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ea4c:	4b39      	ldr	r3, [pc, #228]	; (800eb34 <xTaskResumeAll+0x118>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3b01      	subs	r3, #1
 800ea52:	4a38      	ldr	r2, [pc, #224]	; (800eb34 <xTaskResumeAll+0x118>)
 800ea54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea56:	4b37      	ldr	r3, [pc, #220]	; (800eb34 <xTaskResumeAll+0x118>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d162      	bne.n	800eb24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ea5e:	4b36      	ldr	r3, [pc, #216]	; (800eb38 <xTaskResumeAll+0x11c>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d05e      	beq.n	800eb24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea66:	e02f      	b.n	800eac8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea68:	4b34      	ldr	r3, [pc, #208]	; (800eb3c <xTaskResumeAll+0x120>)
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	3318      	adds	r3, #24
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe fd4f 	bl	800d518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fe fd4a 	bl	800d518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea88:	4b2d      	ldr	r3, [pc, #180]	; (800eb40 <xTaskResumeAll+0x124>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d903      	bls.n	800ea98 <xTaskResumeAll+0x7c>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea94:	4a2a      	ldr	r2, [pc, #168]	; (800eb40 <xTaskResumeAll+0x124>)
 800ea96:	6013      	str	r3, [r2, #0]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9c:	4613      	mov	r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	4413      	add	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4a27      	ldr	r2, [pc, #156]	; (800eb44 <xTaskResumeAll+0x128>)
 800eaa6:	441a      	add	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	3304      	adds	r3, #4
 800eaac:	4619      	mov	r1, r3
 800eaae:	4610      	mov	r0, r2
 800eab0:	f7fe fcd5 	bl	800d45e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab8:	4b23      	ldr	r3, [pc, #140]	; (800eb48 <xTaskResumeAll+0x12c>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d302      	bcc.n	800eac8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eac2:	4b22      	ldr	r3, [pc, #136]	; (800eb4c <xTaskResumeAll+0x130>)
 800eac4:	2201      	movs	r2, #1
 800eac6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eac8:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <xTaskResumeAll+0x120>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1cb      	bne.n	800ea68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d001      	beq.n	800eada <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ead6:	f000 fb55 	bl	800f184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eada:	4b1d      	ldr	r3, [pc, #116]	; (800eb50 <xTaskResumeAll+0x134>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d010      	beq.n	800eb08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eae6:	f000 f847 	bl	800eb78 <xTaskIncrementTick>
 800eaea:	4603      	mov	r3, r0
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d002      	beq.n	800eaf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eaf0:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <xTaskResumeAll+0x130>)
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d1f1      	bne.n	800eae6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eb02:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <xTaskResumeAll+0x134>)
 800eb04:	2200      	movs	r2, #0
 800eb06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb08:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <xTaskResumeAll+0x130>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d009      	beq.n	800eb24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb10:	2301      	movs	r3, #1
 800eb12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb14:	4b0f      	ldr	r3, [pc, #60]	; (800eb54 <xTaskResumeAll+0x138>)
 800eb16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb1a:	601a      	str	r2, [r3, #0]
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb24:	f001 f9d6 	bl	800fed4 <vPortExitCritical>

	return xAlreadyYielded;
 800eb28:	68bb      	ldr	r3, [r7, #8]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3710      	adds	r7, #16
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	20001b7c 	.word	0x20001b7c
 800eb38:	20001b54 	.word	0x20001b54
 800eb3c:	20001b14 	.word	0x20001b14
 800eb40:	20001b5c 	.word	0x20001b5c
 800eb44:	20001684 	.word	0x20001684
 800eb48:	20001680 	.word	0x20001680
 800eb4c:	20001b68 	.word	0x20001b68
 800eb50:	20001b64 	.word	0x20001b64
 800eb54:	e000ed04 	.word	0xe000ed04

0800eb58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eb5e:	4b05      	ldr	r3, [pc, #20]	; (800eb74 <xTaskGetTickCount+0x1c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eb64:	687b      	ldr	r3, [r7, #4]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	20001b58 	.word	0x20001b58

0800eb78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb82:	4b4f      	ldr	r3, [pc, #316]	; (800ecc0 <xTaskIncrementTick+0x148>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f040 808f 	bne.w	800ecaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eb8c:	4b4d      	ldr	r3, [pc, #308]	; (800ecc4 <xTaskIncrementTick+0x14c>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	3301      	adds	r3, #1
 800eb92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eb94:	4a4b      	ldr	r2, [pc, #300]	; (800ecc4 <xTaskIncrementTick+0x14c>)
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d120      	bne.n	800ebe2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800eba0:	4b49      	ldr	r3, [pc, #292]	; (800ecc8 <xTaskIncrementTick+0x150>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d00a      	beq.n	800ebc0 <xTaskIncrementTick+0x48>
	__asm volatile
 800ebaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebae:	f383 8811 	msr	BASEPRI, r3
 800ebb2:	f3bf 8f6f 	isb	sy
 800ebb6:	f3bf 8f4f 	dsb	sy
 800ebba:	603b      	str	r3, [r7, #0]
}
 800ebbc:	bf00      	nop
 800ebbe:	e7fe      	b.n	800ebbe <xTaskIncrementTick+0x46>
 800ebc0:	4b41      	ldr	r3, [pc, #260]	; (800ecc8 <xTaskIncrementTick+0x150>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60fb      	str	r3, [r7, #12]
 800ebc6:	4b41      	ldr	r3, [pc, #260]	; (800eccc <xTaskIncrementTick+0x154>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a3f      	ldr	r2, [pc, #252]	; (800ecc8 <xTaskIncrementTick+0x150>)
 800ebcc:	6013      	str	r3, [r2, #0]
 800ebce:	4a3f      	ldr	r2, [pc, #252]	; (800eccc <xTaskIncrementTick+0x154>)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	4b3e      	ldr	r3, [pc, #248]	; (800ecd0 <xTaskIncrementTick+0x158>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	4a3d      	ldr	r2, [pc, #244]	; (800ecd0 <xTaskIncrementTick+0x158>)
 800ebdc:	6013      	str	r3, [r2, #0]
 800ebde:	f000 fad1 	bl	800f184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ebe2:	4b3c      	ldr	r3, [pc, #240]	; (800ecd4 <xTaskIncrementTick+0x15c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d349      	bcc.n	800ec80 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebec:	4b36      	ldr	r3, [pc, #216]	; (800ecc8 <xTaskIncrementTick+0x150>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d104      	bne.n	800ec00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebf6:	4b37      	ldr	r3, [pc, #220]	; (800ecd4 <xTaskIncrementTick+0x15c>)
 800ebf8:	f04f 32ff 	mov.w	r2, #4294967295
 800ebfc:	601a      	str	r2, [r3, #0]
					break;
 800ebfe:	e03f      	b.n	800ec80 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec00:	4b31      	ldr	r3, [pc, #196]	; (800ecc8 <xTaskIncrementTick+0x150>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d203      	bcs.n	800ec20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec18:	4a2e      	ldr	r2, [pc, #184]	; (800ecd4 <xTaskIncrementTick+0x15c>)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ec1e:	e02f      	b.n	800ec80 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	3304      	adds	r3, #4
 800ec24:	4618      	mov	r0, r3
 800ec26:	f7fe fc77 	bl	800d518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d004      	beq.n	800ec3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	3318      	adds	r3, #24
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fe fc6e 	bl	800d518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec40:	4b25      	ldr	r3, [pc, #148]	; (800ecd8 <xTaskIncrementTick+0x160>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d903      	bls.n	800ec50 <xTaskIncrementTick+0xd8>
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4c:	4a22      	ldr	r2, [pc, #136]	; (800ecd8 <xTaskIncrementTick+0x160>)
 800ec4e:	6013      	str	r3, [r2, #0]
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec54:	4613      	mov	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	4413      	add	r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	4a1f      	ldr	r2, [pc, #124]	; (800ecdc <xTaskIncrementTick+0x164>)
 800ec5e:	441a      	add	r2, r3
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3304      	adds	r3, #4
 800ec64:	4619      	mov	r1, r3
 800ec66:	4610      	mov	r0, r2
 800ec68:	f7fe fbf9 	bl	800d45e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	4b1b      	ldr	r3, [pc, #108]	; (800ece0 <xTaskIncrementTick+0x168>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d3b8      	bcc.n	800ebec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec7e:	e7b5      	b.n	800ebec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ec80:	4b17      	ldr	r3, [pc, #92]	; (800ece0 <xTaskIncrementTick+0x168>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec86:	4915      	ldr	r1, [pc, #84]	; (800ecdc <xTaskIncrementTick+0x164>)
 800ec88:	4613      	mov	r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	4413      	add	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	440b      	add	r3, r1
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d901      	bls.n	800ec9c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ec9c:	4b11      	ldr	r3, [pc, #68]	; (800ece4 <xTaskIncrementTick+0x16c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eca4:	2301      	movs	r3, #1
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	e004      	b.n	800ecb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ecaa:	4b0f      	ldr	r3, [pc, #60]	; (800ece8 <xTaskIncrementTick+0x170>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	4a0d      	ldr	r2, [pc, #52]	; (800ece8 <xTaskIncrementTick+0x170>)
 800ecb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ecb4:	697b      	ldr	r3, [r7, #20]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3718      	adds	r7, #24
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20001b7c 	.word	0x20001b7c
 800ecc4:	20001b58 	.word	0x20001b58
 800ecc8:	20001b0c 	.word	0x20001b0c
 800eccc:	20001b10 	.word	0x20001b10
 800ecd0:	20001b6c 	.word	0x20001b6c
 800ecd4:	20001b74 	.word	0x20001b74
 800ecd8:	20001b5c 	.word	0x20001b5c
 800ecdc:	20001684 	.word	0x20001684
 800ece0:	20001680 	.word	0x20001680
 800ece4:	20001b68 	.word	0x20001b68
 800ece8:	20001b64 	.word	0x20001b64

0800ecec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ecf2:	4b28      	ldr	r3, [pc, #160]	; (800ed94 <vTaskSwitchContext+0xa8>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d003      	beq.n	800ed02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ecfa:	4b27      	ldr	r3, [pc, #156]	; (800ed98 <vTaskSwitchContext+0xac>)
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed00:	e041      	b.n	800ed86 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ed02:	4b25      	ldr	r3, [pc, #148]	; (800ed98 <vTaskSwitchContext+0xac>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed08:	4b24      	ldr	r3, [pc, #144]	; (800ed9c <vTaskSwitchContext+0xb0>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	60fb      	str	r3, [r7, #12]
 800ed0e:	e010      	b.n	800ed32 <vTaskSwitchContext+0x46>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d10a      	bne.n	800ed2c <vTaskSwitchContext+0x40>
	__asm volatile
 800ed16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1a:	f383 8811 	msr	BASEPRI, r3
 800ed1e:	f3bf 8f6f 	isb	sy
 800ed22:	f3bf 8f4f 	dsb	sy
 800ed26:	607b      	str	r3, [r7, #4]
}
 800ed28:	bf00      	nop
 800ed2a:	e7fe      	b.n	800ed2a <vTaskSwitchContext+0x3e>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	60fb      	str	r3, [r7, #12]
 800ed32:	491b      	ldr	r1, [pc, #108]	; (800eda0 <vTaskSwitchContext+0xb4>)
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	4613      	mov	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	440b      	add	r3, r1
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d0e4      	beq.n	800ed10 <vTaskSwitchContext+0x24>
 800ed46:	68fa      	ldr	r2, [r7, #12]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4a13      	ldr	r2, [pc, #76]	; (800eda0 <vTaskSwitchContext+0xb4>)
 800ed52:	4413      	add	r3, r2
 800ed54:	60bb      	str	r3, [r7, #8]
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	685a      	ldr	r2, [r3, #4]
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	605a      	str	r2, [r3, #4]
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	685a      	ldr	r2, [r3, #4]
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	3308      	adds	r3, #8
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d104      	bne.n	800ed76 <vTaskSwitchContext+0x8a>
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	685a      	ldr	r2, [r3, #4]
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	605a      	str	r2, [r3, #4]
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	4a09      	ldr	r2, [pc, #36]	; (800eda4 <vTaskSwitchContext+0xb8>)
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	4a06      	ldr	r2, [pc, #24]	; (800ed9c <vTaskSwitchContext+0xb0>)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6013      	str	r3, [r2, #0]
}
 800ed86:	bf00      	nop
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	20001b7c 	.word	0x20001b7c
 800ed98:	20001b68 	.word	0x20001b68
 800ed9c:	20001b5c 	.word	0x20001b5c
 800eda0:	20001684 	.word	0x20001684
 800eda4:	20001680 	.word	0x20001680

0800eda8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10a      	bne.n	800edce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	60fb      	str	r3, [r7, #12]
}
 800edca:	bf00      	nop
 800edcc:	e7fe      	b.n	800edcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800edce:	4b07      	ldr	r3, [pc, #28]	; (800edec <vTaskPlaceOnEventList+0x44>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3318      	adds	r3, #24
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7fe fb65 	bl	800d4a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eddc:	2101      	movs	r1, #1
 800edde:	6838      	ldr	r0, [r7, #0]
 800ede0:	f000 fb7a 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
}
 800ede4:	bf00      	nop
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	20001680 	.word	0x20001680

0800edf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10a      	bne.n	800ee18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	617b      	str	r3, [r7, #20]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee18:	4b0a      	ldr	r3, [pc, #40]	; (800ee44 <vTaskPlaceOnEventListRestricted+0x54>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	3318      	adds	r3, #24
 800ee1e:	4619      	mov	r1, r3
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f7fe fb1c 	bl	800d45e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d002      	beq.n	800ee32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	68b8      	ldr	r0, [r7, #8]
 800ee36:	f000 fb4f 	bl	800f4d8 <prvAddCurrentTaskToDelayedList>
	}
 800ee3a:	bf00      	nop
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	20001680 	.word	0x20001680

0800ee48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b086      	sub	sp, #24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10a      	bne.n	800ee74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	60fb      	str	r3, [r7, #12]
}
 800ee70:	bf00      	nop
 800ee72:	e7fe      	b.n	800ee72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	3318      	adds	r3, #24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fb4d 	bl	800d518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee7e:	4b1e      	ldr	r3, [pc, #120]	; (800eef8 <xTaskRemoveFromEventList+0xb0>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d11d      	bne.n	800eec2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	3304      	adds	r3, #4
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fe fb44 	bl	800d518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee94:	4b19      	ldr	r3, [pc, #100]	; (800eefc <xTaskRemoveFromEventList+0xb4>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d903      	bls.n	800eea4 <xTaskRemoveFromEventList+0x5c>
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea0:	4a16      	ldr	r2, [pc, #88]	; (800eefc <xTaskRemoveFromEventList+0xb4>)
 800eea2:	6013      	str	r3, [r2, #0]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4a13      	ldr	r2, [pc, #76]	; (800ef00 <xTaskRemoveFromEventList+0xb8>)
 800eeb2:	441a      	add	r2, r3
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	3304      	adds	r3, #4
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4610      	mov	r0, r2
 800eebc:	f7fe facf 	bl	800d45e <vListInsertEnd>
 800eec0:	e005      	b.n	800eece <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	3318      	adds	r3, #24
 800eec6:	4619      	mov	r1, r3
 800eec8:	480e      	ldr	r0, [pc, #56]	; (800ef04 <xTaskRemoveFromEventList+0xbc>)
 800eeca:	f7fe fac8 	bl	800d45e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed2:	4b0d      	ldr	r3, [pc, #52]	; (800ef08 <xTaskRemoveFromEventList+0xc0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d905      	bls.n	800eee8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eedc:	2301      	movs	r3, #1
 800eede:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eee0:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <xTaskRemoveFromEventList+0xc4>)
 800eee2:	2201      	movs	r2, #1
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	e001      	b.n	800eeec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eee8:	2300      	movs	r3, #0
 800eeea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eeec:	697b      	ldr	r3, [r7, #20]
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3718      	adds	r7, #24
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	20001b7c 	.word	0x20001b7c
 800eefc:	20001b5c 	.word	0x20001b5c
 800ef00:	20001684 	.word	0x20001684
 800ef04:	20001b14 	.word	0x20001b14
 800ef08:	20001680 	.word	0x20001680
 800ef0c:	20001b68 	.word	0x20001b68

0800ef10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef10:	b480      	push	{r7}
 800ef12:	b083      	sub	sp, #12
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef18:	4b06      	ldr	r3, [pc, #24]	; (800ef34 <vTaskInternalSetTimeOutState+0x24>)
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef20:	4b05      	ldr	r3, [pc, #20]	; (800ef38 <vTaskInternalSetTimeOutState+0x28>)
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	605a      	str	r2, [r3, #4]
}
 800ef28:	bf00      	nop
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	20001b6c 	.word	0x20001b6c
 800ef38:	20001b58 	.word	0x20001b58

0800ef3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b088      	sub	sp, #32
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10a      	bne.n	800ef62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ef4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	613b      	str	r3, [r7, #16]
}
 800ef5e:	bf00      	nop
 800ef60:	e7fe      	b.n	800ef60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10a      	bne.n	800ef7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	60fb      	str	r3, [r7, #12]
}
 800ef7a:	bf00      	nop
 800ef7c:	e7fe      	b.n	800ef7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ef7e:	f000 ff79 	bl	800fe74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ef82:	4b1d      	ldr	r3, [pc, #116]	; (800eff8 <xTaskCheckForTimeOut+0xbc>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	1ad3      	subs	r3, r2, r3
 800ef90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9a:	d102      	bne.n	800efa2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	61fb      	str	r3, [r7, #28]
 800efa0:	e023      	b.n	800efea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	4b15      	ldr	r3, [pc, #84]	; (800effc <xTaskCheckForTimeOut+0xc0>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d007      	beq.n	800efbe <xTaskCheckForTimeOut+0x82>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d302      	bcc.n	800efbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800efb8:	2301      	movs	r3, #1
 800efba:	61fb      	str	r3, [r7, #28]
 800efbc:	e015      	b.n	800efea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d20b      	bcs.n	800efe0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	1ad2      	subs	r2, r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff ff9b 	bl	800ef10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800efda:	2300      	movs	r3, #0
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	e004      	b.n	800efea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	2200      	movs	r2, #0
 800efe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800efe6:	2301      	movs	r3, #1
 800efe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800efea:	f000 ff73 	bl	800fed4 <vPortExitCritical>

	return xReturn;
 800efee:	69fb      	ldr	r3, [r7, #28]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3720      	adds	r7, #32
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20001b58 	.word	0x20001b58
 800effc:	20001b6c 	.word	0x20001b6c

0800f000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f000:	b480      	push	{r7}
 800f002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f004:	4b03      	ldr	r3, [pc, #12]	; (800f014 <vTaskMissedYield+0x14>)
 800f006:	2201      	movs	r2, #1
 800f008:	601a      	str	r2, [r3, #0]
}
 800f00a:	bf00      	nop
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	20001b68 	.word	0x20001b68

0800f018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f020:	f000 f852 	bl	800f0c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f024:	4b06      	ldr	r3, [pc, #24]	; (800f040 <prvIdleTask+0x28>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d9f9      	bls.n	800f020 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f02c:	4b05      	ldr	r3, [pc, #20]	; (800f044 <prvIdleTask+0x2c>)
 800f02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	f3bf 8f4f 	dsb	sy
 800f038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f03c:	e7f0      	b.n	800f020 <prvIdleTask+0x8>
 800f03e:	bf00      	nop
 800f040:	20001684 	.word	0x20001684
 800f044:	e000ed04 	.word	0xe000ed04

0800f048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b082      	sub	sp, #8
 800f04c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f04e:	2300      	movs	r3, #0
 800f050:	607b      	str	r3, [r7, #4]
 800f052:	e00c      	b.n	800f06e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	4613      	mov	r3, r2
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	4413      	add	r3, r2
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4a12      	ldr	r2, [pc, #72]	; (800f0a8 <prvInitialiseTaskLists+0x60>)
 800f060:	4413      	add	r3, r2
 800f062:	4618      	mov	r0, r3
 800f064:	f7fe f9ce 	bl	800d404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3301      	adds	r3, #1
 800f06c:	607b      	str	r3, [r7, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b37      	cmp	r3, #55	; 0x37
 800f072:	d9ef      	bls.n	800f054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f074:	480d      	ldr	r0, [pc, #52]	; (800f0ac <prvInitialiseTaskLists+0x64>)
 800f076:	f7fe f9c5 	bl	800d404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f07a:	480d      	ldr	r0, [pc, #52]	; (800f0b0 <prvInitialiseTaskLists+0x68>)
 800f07c:	f7fe f9c2 	bl	800d404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f080:	480c      	ldr	r0, [pc, #48]	; (800f0b4 <prvInitialiseTaskLists+0x6c>)
 800f082:	f7fe f9bf 	bl	800d404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f086:	480c      	ldr	r0, [pc, #48]	; (800f0b8 <prvInitialiseTaskLists+0x70>)
 800f088:	f7fe f9bc 	bl	800d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f08c:	480b      	ldr	r0, [pc, #44]	; (800f0bc <prvInitialiseTaskLists+0x74>)
 800f08e:	f7fe f9b9 	bl	800d404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f092:	4b0b      	ldr	r3, [pc, #44]	; (800f0c0 <prvInitialiseTaskLists+0x78>)
 800f094:	4a05      	ldr	r2, [pc, #20]	; (800f0ac <prvInitialiseTaskLists+0x64>)
 800f096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f098:	4b0a      	ldr	r3, [pc, #40]	; (800f0c4 <prvInitialiseTaskLists+0x7c>)
 800f09a:	4a05      	ldr	r2, [pc, #20]	; (800f0b0 <prvInitialiseTaskLists+0x68>)
 800f09c:	601a      	str	r2, [r3, #0]
}
 800f09e:	bf00      	nop
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20001684 	.word	0x20001684
 800f0ac:	20001ae4 	.word	0x20001ae4
 800f0b0:	20001af8 	.word	0x20001af8
 800f0b4:	20001b14 	.word	0x20001b14
 800f0b8:	20001b28 	.word	0x20001b28
 800f0bc:	20001b40 	.word	0x20001b40
 800f0c0:	20001b0c 	.word	0x20001b0c
 800f0c4:	20001b10 	.word	0x20001b10

0800f0c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0ce:	e019      	b.n	800f104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f0d0:	f000 fed0 	bl	800fe74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d4:	4b10      	ldr	r3, [pc, #64]	; (800f118 <prvCheckTasksWaitingTermination+0x50>)
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	3304      	adds	r3, #4
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fe fa19 	bl	800d518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f0e6:	4b0d      	ldr	r3, [pc, #52]	; (800f11c <prvCheckTasksWaitingTermination+0x54>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	4a0b      	ldr	r2, [pc, #44]	; (800f11c <prvCheckTasksWaitingTermination+0x54>)
 800f0ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f0f0:	4b0b      	ldr	r3, [pc, #44]	; (800f120 <prvCheckTasksWaitingTermination+0x58>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	4a0a      	ldr	r2, [pc, #40]	; (800f120 <prvCheckTasksWaitingTermination+0x58>)
 800f0f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f0fa:	f000 feeb 	bl	800fed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f0fe:	6878      	ldr	r0, [r7, #4]
 800f100:	f000 f810 	bl	800f124 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f104:	4b06      	ldr	r3, [pc, #24]	; (800f120 <prvCheckTasksWaitingTermination+0x58>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d1e1      	bne.n	800f0d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f10c:	bf00      	nop
 800f10e:	bf00      	nop
 800f110:	3708      	adds	r7, #8
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20001b28 	.word	0x20001b28
 800f11c:	20001b54 	.word	0x20001b54
 800f120:	20001b3c 	.word	0x20001b3c

0800f124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f132:	2b00      	cmp	r3, #0
 800f134:	d108      	bne.n	800f148 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13a:	4618      	mov	r0, r3
 800f13c:	f001 f888 	bl	8010250 <vPortFree>
				vPortFree( pxTCB );
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f001 f885 	bl	8010250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f146:	e018      	b.n	800f17a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d103      	bne.n	800f15a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f001 f87c 	bl	8010250 <vPortFree>
	}
 800f158:	e00f      	b.n	800f17a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f160:	2b02      	cmp	r3, #2
 800f162:	d00a      	beq.n	800f17a <prvDeleteTCB+0x56>
	__asm volatile
 800f164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f168:	f383 8811 	msr	BASEPRI, r3
 800f16c:	f3bf 8f6f 	isb	sy
 800f170:	f3bf 8f4f 	dsb	sy
 800f174:	60fb      	str	r3, [r7, #12]
}
 800f176:	bf00      	nop
 800f178:	e7fe      	b.n	800f178 <prvDeleteTCB+0x54>
	}
 800f17a:	bf00      	nop
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
	...

0800f184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f18a:	4b0c      	ldr	r3, [pc, #48]	; (800f1bc <prvResetNextTaskUnblockTime+0x38>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f194:	4b0a      	ldr	r3, [pc, #40]	; (800f1c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f196:	f04f 32ff 	mov.w	r2, #4294967295
 800f19a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f19c:	e008      	b.n	800f1b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f19e:	4b07      	ldr	r3, [pc, #28]	; (800f1bc <prvResetNextTaskUnblockTime+0x38>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	4a04      	ldr	r2, [pc, #16]	; (800f1c0 <prvResetNextTaskUnblockTime+0x3c>)
 800f1ae:	6013      	str	r3, [r2, #0]
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	20001b0c 	.word	0x20001b0c
 800f1c0:	20001b74 	.word	0x20001b74

0800f1c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f1ca:	4b0b      	ldr	r3, [pc, #44]	; (800f1f8 <xTaskGetSchedulerState+0x34>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d102      	bne.n	800f1d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	607b      	str	r3, [r7, #4]
 800f1d6:	e008      	b.n	800f1ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1d8:	4b08      	ldr	r3, [pc, #32]	; (800f1fc <xTaskGetSchedulerState+0x38>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d102      	bne.n	800f1e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f1e0:	2302      	movs	r3, #2
 800f1e2:	607b      	str	r3, [r7, #4]
 800f1e4:	e001      	b.n	800f1ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f1ea:	687b      	ldr	r3, [r7, #4]
	}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	370c      	adds	r7, #12
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	20001b60 	.word	0x20001b60
 800f1fc:	20001b7c 	.word	0x20001b7c

0800f200 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f200:	b580      	push	{r7, lr}
 800f202:	b084      	sub	sp, #16
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f20c:	2300      	movs	r3, #0
 800f20e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d051      	beq.n	800f2ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f21a:	4b2a      	ldr	r3, [pc, #168]	; (800f2c4 <xTaskPriorityInherit+0xc4>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f220:	429a      	cmp	r2, r3
 800f222:	d241      	bcs.n	800f2a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	db06      	blt.n	800f23a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f22c:	4b25      	ldr	r3, [pc, #148]	; (800f2c4 <xTaskPriorityInherit+0xc4>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6959      	ldr	r1, [r3, #20]
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f242:	4613      	mov	r3, r2
 800f244:	009b      	lsls	r3, r3, #2
 800f246:	4413      	add	r3, r2
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4a1f      	ldr	r2, [pc, #124]	; (800f2c8 <xTaskPriorityInherit+0xc8>)
 800f24c:	4413      	add	r3, r2
 800f24e:	4299      	cmp	r1, r3
 800f250:	d122      	bne.n	800f298 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	3304      	adds	r3, #4
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe f95e 	bl	800d518 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f25c:	4b19      	ldr	r3, [pc, #100]	; (800f2c4 <xTaskPriorityInherit+0xc4>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26a:	4b18      	ldr	r3, [pc, #96]	; (800f2cc <xTaskPriorityInherit+0xcc>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d903      	bls.n	800f27a <xTaskPriorityInherit+0x7a>
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f276:	4a15      	ldr	r2, [pc, #84]	; (800f2cc <xTaskPriorityInherit+0xcc>)
 800f278:	6013      	str	r3, [r2, #0]
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27e:	4613      	mov	r3, r2
 800f280:	009b      	lsls	r3, r3, #2
 800f282:	4413      	add	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4a10      	ldr	r2, [pc, #64]	; (800f2c8 <xTaskPriorityInherit+0xc8>)
 800f288:	441a      	add	r2, r3
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	3304      	adds	r3, #4
 800f28e:	4619      	mov	r1, r3
 800f290:	4610      	mov	r0, r2
 800f292:	f7fe f8e4 	bl	800d45e <vListInsertEnd>
 800f296:	e004      	b.n	800f2a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f298:	4b0a      	ldr	r3, [pc, #40]	; (800f2c4 <xTaskPriorityInherit+0xc4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	60fb      	str	r3, [r7, #12]
 800f2a6:	e008      	b.n	800f2ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f2ac:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <xTaskPriorityInherit+0xc4>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d201      	bcs.n	800f2ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
	}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3710      	adds	r7, #16
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	20001680 	.word	0x20001680
 800f2c8:	20001684 	.word	0x20001684
 800f2cc:	20001b5c 	.word	0x20001b5c

0800f2d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d056      	beq.n	800f394 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2e6:	4b2e      	ldr	r3, [pc, #184]	; (800f3a0 <xTaskPriorityDisinherit+0xd0>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d00a      	beq.n	800f306 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	60fb      	str	r3, [r7, #12]
}
 800f302:	bf00      	nop
 800f304:	e7fe      	b.n	800f304 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d10a      	bne.n	800f324 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	60bb      	str	r3, [r7, #8]
}
 800f320:	bf00      	nop
 800f322:	e7fe      	b.n	800f322 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f328:	1e5a      	subs	r2, r3, #1
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f336:	429a      	cmp	r2, r3
 800f338:	d02c      	beq.n	800f394 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d128      	bne.n	800f394 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	3304      	adds	r3, #4
 800f346:	4618      	mov	r0, r3
 800f348:	f7fe f8e6 	bl	800d518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f358:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f364:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <xTaskPriorityDisinherit+0xd4>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d903      	bls.n	800f374 <xTaskPriorityDisinherit+0xa4>
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f370:	4a0c      	ldr	r2, [pc, #48]	; (800f3a4 <xTaskPriorityDisinherit+0xd4>)
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f378:	4613      	mov	r3, r2
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	4a09      	ldr	r2, [pc, #36]	; (800f3a8 <xTaskPriorityDisinherit+0xd8>)
 800f382:	441a      	add	r2, r3
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	3304      	adds	r3, #4
 800f388:	4619      	mov	r1, r3
 800f38a:	4610      	mov	r0, r2
 800f38c:	f7fe f867 	bl	800d45e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f390:	2301      	movs	r3, #1
 800f392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f394:	697b      	ldr	r3, [r7, #20]
	}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	20001680 	.word	0x20001680
 800f3a4:	20001b5c 	.word	0x20001b5c
 800f3a8:	20001684 	.word	0x20001684

0800f3ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b088      	sub	sp, #32
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d06a      	beq.n	800f49a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10a      	bne.n	800f3e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	60fb      	str	r3, [r7, #12]
}
 800f3de:	bf00      	nop
 800f3e0:	e7fe      	b.n	800f3e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d902      	bls.n	800f3f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	61fb      	str	r3, [r7, #28]
 800f3f0:	e002      	b.n	800f3f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fc:	69fa      	ldr	r2, [r7, #28]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d04b      	beq.n	800f49a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f406:	697a      	ldr	r2, [r7, #20]
 800f408:	429a      	cmp	r2, r3
 800f40a:	d146      	bne.n	800f49a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f40c:	4b25      	ldr	r3, [pc, #148]	; (800f4a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	69ba      	ldr	r2, [r7, #24]
 800f412:	429a      	cmp	r2, r3
 800f414:	d10a      	bne.n	800f42c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	60bb      	str	r3, [r7, #8]
}
 800f428:	bf00      	nop
 800f42a:	e7fe      	b.n	800f42a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f42c:	69bb      	ldr	r3, [r7, #24]
 800f42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f430:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f432:	69bb      	ldr	r3, [r7, #24]
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	db04      	blt.n	800f44a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f440:	69fb      	ldr	r3, [r7, #28]
 800f442:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	6959      	ldr	r1, [r3, #20]
 800f44e:	693a      	ldr	r2, [r7, #16]
 800f450:	4613      	mov	r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4a13      	ldr	r2, [pc, #76]	; (800f4a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f45a:	4413      	add	r3, r2
 800f45c:	4299      	cmp	r1, r3
 800f45e:	d11c      	bne.n	800f49a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	3304      	adds	r3, #4
 800f464:	4618      	mov	r0, r3
 800f466:	f7fe f857 	bl	800d518 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f46e:	4b0f      	ldr	r3, [pc, #60]	; (800f4ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	429a      	cmp	r2, r3
 800f474:	d903      	bls.n	800f47e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f47a:	4a0c      	ldr	r2, [pc, #48]	; (800f4ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f47c:	6013      	str	r3, [r2, #0]
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f482:	4613      	mov	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	4413      	add	r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	4a07      	ldr	r2, [pc, #28]	; (800f4a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f48c:	441a      	add	r2, r3
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	3304      	adds	r3, #4
 800f492:	4619      	mov	r1, r3
 800f494:	4610      	mov	r0, r2
 800f496:	f7fd ffe2 	bl	800d45e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f49a:	bf00      	nop
 800f49c:	3720      	adds	r7, #32
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}
 800f4a2:	bf00      	nop
 800f4a4:	20001680 	.word	0x20001680
 800f4a8:	20001684 	.word	0x20001684
 800f4ac:	20001b5c 	.word	0x20001b5c

0800f4b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f4b0:	b480      	push	{r7}
 800f4b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f4b4:	4b07      	ldr	r3, [pc, #28]	; (800f4d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d004      	beq.n	800f4c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f4bc:	4b05      	ldr	r3, [pc, #20]	; (800f4d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4c2:	3201      	adds	r2, #1
 800f4c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f4c6:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
	}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	20001680 	.word	0x20001680

0800f4d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4e2:	4b21      	ldr	r3, [pc, #132]	; (800f568 <prvAddCurrentTaskToDelayedList+0x90>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4e8:	4b20      	ldr	r3, [pc, #128]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fe f812 	bl	800d518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fa:	d10a      	bne.n	800f512 <prvAddCurrentTaskToDelayedList+0x3a>
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d007      	beq.n	800f512 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f502:	4b1a      	ldr	r3, [pc, #104]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3304      	adds	r3, #4
 800f508:	4619      	mov	r1, r3
 800f50a:	4819      	ldr	r0, [pc, #100]	; (800f570 <prvAddCurrentTaskToDelayedList+0x98>)
 800f50c:	f7fd ffa7 	bl	800d45e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f510:	e026      	b.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4413      	add	r3, r2
 800f518:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f51a:	4b14      	ldr	r3, [pc, #80]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	429a      	cmp	r2, r3
 800f528:	d209      	bcs.n	800f53e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f52a:	4b12      	ldr	r3, [pc, #72]	; (800f574 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	3304      	adds	r3, #4
 800f534:	4619      	mov	r1, r3
 800f536:	4610      	mov	r0, r2
 800f538:	f7fd ffb5 	bl	800d4a6 <vListInsert>
}
 800f53c:	e010      	b.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f53e:	4b0e      	ldr	r3, [pc, #56]	; (800f578 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <prvAddCurrentTaskToDelayedList+0x94>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3304      	adds	r3, #4
 800f548:	4619      	mov	r1, r3
 800f54a:	4610      	mov	r0, r2
 800f54c:	f7fd ffab 	bl	800d4a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f550:	4b0a      	ldr	r3, [pc, #40]	; (800f57c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	429a      	cmp	r2, r3
 800f558:	d202      	bcs.n	800f560 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f55a:	4a08      	ldr	r2, [pc, #32]	; (800f57c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	6013      	str	r3, [r2, #0]
}
 800f560:	bf00      	nop
 800f562:	3710      	adds	r7, #16
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	20001b58 	.word	0x20001b58
 800f56c:	20001680 	.word	0x20001680
 800f570:	20001b40 	.word	0x20001b40
 800f574:	20001b10 	.word	0x20001b10
 800f578:	20001b0c 	.word	0x20001b0c
 800f57c:	20001b74 	.word	0x20001b74

0800f580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b08a      	sub	sp, #40	; 0x28
 800f584:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f586:	2300      	movs	r3, #0
 800f588:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f58a:	f000 fb07 	bl	800fb9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f58e:	4b1c      	ldr	r3, [pc, #112]	; (800f600 <xTimerCreateTimerTask+0x80>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d021      	beq.n	800f5da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f59a:	2300      	movs	r3, #0
 800f59c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f59e:	1d3a      	adds	r2, r7, #4
 800f5a0:	f107 0108 	add.w	r1, r7, #8
 800f5a4:	f107 030c 	add.w	r3, r7, #12
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fd ff11 	bl	800d3d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	9202      	str	r2, [sp, #8]
 800f5b6:	9301      	str	r3, [sp, #4]
 800f5b8:	2302      	movs	r3, #2
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2300      	movs	r3, #0
 800f5be:	460a      	mov	r2, r1
 800f5c0:	4910      	ldr	r1, [pc, #64]	; (800f604 <xTimerCreateTimerTask+0x84>)
 800f5c2:	4811      	ldr	r0, [pc, #68]	; (800f608 <xTimerCreateTimerTask+0x88>)
 800f5c4:	f7fe ffe0 	bl	800e588 <xTaskCreateStatic>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	4a10      	ldr	r2, [pc, #64]	; (800f60c <xTimerCreateTimerTask+0x8c>)
 800f5cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <xTimerCreateTimerTask+0x8c>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d001      	beq.n	800f5da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10a      	bne.n	800f5f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e4:	f383 8811 	msr	BASEPRI, r3
 800f5e8:	f3bf 8f6f 	isb	sy
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	613b      	str	r3, [r7, #16]
}
 800f5f2:	bf00      	nop
 800f5f4:	e7fe      	b.n	800f5f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f5f6:	697b      	ldr	r3, [r7, #20]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	20001bb0 	.word	0x20001bb0
 800f604:	080142d0 	.word	0x080142d0
 800f608:	0800f745 	.word	0x0800f745
 800f60c:	20001bb4 	.word	0x20001bb4

0800f610 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b08a      	sub	sp, #40	; 0x28
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f61e:	2300      	movs	r3, #0
 800f620:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10a      	bne.n	800f63e <xTimerGenericCommand+0x2e>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	623b      	str	r3, [r7, #32]
}
 800f63a:	bf00      	nop
 800f63c:	e7fe      	b.n	800f63c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f63e:	4b1a      	ldr	r3, [pc, #104]	; (800f6a8 <xTimerGenericCommand+0x98>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d02a      	beq.n	800f69c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	2b05      	cmp	r3, #5
 800f656:	dc18      	bgt.n	800f68a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f658:	f7ff fdb4 	bl	800f1c4 <xTaskGetSchedulerState>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b02      	cmp	r3, #2
 800f660:	d109      	bne.n	800f676 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f662:	4b11      	ldr	r3, [pc, #68]	; (800f6a8 <xTimerGenericCommand+0x98>)
 800f664:	6818      	ldr	r0, [r3, #0]
 800f666:	f107 0110 	add.w	r1, r7, #16
 800f66a:	2300      	movs	r3, #0
 800f66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f66e:	f7fe f925 	bl	800d8bc <xQueueGenericSend>
 800f672:	6278      	str	r0, [r7, #36]	; 0x24
 800f674:	e012      	b.n	800f69c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f676:	4b0c      	ldr	r3, [pc, #48]	; (800f6a8 <xTimerGenericCommand+0x98>)
 800f678:	6818      	ldr	r0, [r3, #0]
 800f67a:	f107 0110 	add.w	r1, r7, #16
 800f67e:	2300      	movs	r3, #0
 800f680:	2200      	movs	r2, #0
 800f682:	f7fe f91b 	bl	800d8bc <xQueueGenericSend>
 800f686:	6278      	str	r0, [r7, #36]	; 0x24
 800f688:	e008      	b.n	800f69c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f68a:	4b07      	ldr	r3, [pc, #28]	; (800f6a8 <xTimerGenericCommand+0x98>)
 800f68c:	6818      	ldr	r0, [r3, #0]
 800f68e:	f107 0110 	add.w	r1, r7, #16
 800f692:	2300      	movs	r3, #0
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	f7fe fa0f 	bl	800dab8 <xQueueGenericSendFromISR>
 800f69a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3728      	adds	r7, #40	; 0x28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20001bb0 	.word	0x20001bb0

0800f6ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b088      	sub	sp, #32
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b6:	4b22      	ldr	r3, [pc, #136]	; (800f740 <prvProcessExpiredTimer+0x94>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	68db      	ldr	r3, [r3, #12]
 800f6be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7fd ff27 	bl	800d518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6d0:	f003 0304 	and.w	r3, r3, #4
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d022      	beq.n	800f71e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	699a      	ldr	r2, [r3, #24]
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	18d1      	adds	r1, r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	683a      	ldr	r2, [r7, #0]
 800f6e4:	6978      	ldr	r0, [r7, #20]
 800f6e6:	f000 f8d1 	bl	800f88c <prvInsertTimerInActiveList>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d01f      	beq.n	800f730 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9300      	str	r3, [sp, #0]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	687a      	ldr	r2, [r7, #4]
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	6978      	ldr	r0, [r7, #20]
 800f6fc:	f7ff ff88 	bl	800f610 <xTimerGenericCommand>
 800f700:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d113      	bne.n	800f730 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	60fb      	str	r3, [r7, #12]
}
 800f71a:	bf00      	nop
 800f71c:	e7fe      	b.n	800f71c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f724:	f023 0301 	bic.w	r3, r3, #1
 800f728:	b2da      	uxtb	r2, r3
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	6a1b      	ldr	r3, [r3, #32]
 800f734:	6978      	ldr	r0, [r7, #20]
 800f736:	4798      	blx	r3
}
 800f738:	bf00      	nop
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20001ba8 	.word	0x20001ba8

0800f744 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f74c:	f107 0308 	add.w	r3, r7, #8
 800f750:	4618      	mov	r0, r3
 800f752:	f000 f857 	bl	800f804 <prvGetNextExpireTime>
 800f756:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	4619      	mov	r1, r3
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f000 f803 	bl	800f768 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f762:	f000 f8d5 	bl	800f910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f766:	e7f1      	b.n	800f74c <prvTimerTask+0x8>

0800f768 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f772:	f7ff f945 	bl	800ea00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f776:	f107 0308 	add.w	r3, r7, #8
 800f77a:	4618      	mov	r0, r3
 800f77c:	f000 f866 	bl	800f84c <prvSampleTimeNow>
 800f780:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d130      	bne.n	800f7ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10a      	bne.n	800f7a4 <prvProcessTimerOrBlockTask+0x3c>
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	429a      	cmp	r2, r3
 800f794:	d806      	bhi.n	800f7a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f796:	f7ff f941 	bl	800ea1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f79a:	68f9      	ldr	r1, [r7, #12]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff ff85 	bl	800f6ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7a2:	e024      	b.n	800f7ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d008      	beq.n	800f7bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7aa:	4b13      	ldr	r3, [pc, #76]	; (800f7f8 <prvProcessTimerOrBlockTask+0x90>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <prvProcessTimerOrBlockTask+0x50>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <prvProcessTimerOrBlockTask+0x52>
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f7bc:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <prvProcessTimerOrBlockTask+0x94>)
 800f7be:	6818      	ldr	r0, [r3, #0]
 800f7c0:	687a      	ldr	r2, [r7, #4]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	1ad3      	subs	r3, r2, r3
 800f7c6:	683a      	ldr	r2, [r7, #0]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	f7fe fea9 	bl	800e520 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7ce:	f7ff f925 	bl	800ea1c <xTaskResumeAll>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d10a      	bne.n	800f7ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f7d8:	4b09      	ldr	r3, [pc, #36]	; (800f800 <prvProcessTimerOrBlockTask+0x98>)
 800f7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7de:	601a      	str	r2, [r3, #0]
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	f3bf 8f6f 	isb	sy
}
 800f7e8:	e001      	b.n	800f7ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f7ea:	f7ff f917 	bl	800ea1c <xTaskResumeAll>
}
 800f7ee:	bf00      	nop
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	20001bac 	.word	0x20001bac
 800f7fc:	20001bb0 	.word	0x20001bb0
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f80c:	4b0e      	ldr	r3, [pc, #56]	; (800f848 <prvGetNextExpireTime+0x44>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d101      	bne.n	800f81a <prvGetNextExpireTime+0x16>
 800f816:	2201      	movs	r2, #1
 800f818:	e000      	b.n	800f81c <prvGetNextExpireTime+0x18>
 800f81a:	2200      	movs	r2, #0
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d105      	bne.n	800f834 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f828:	4b07      	ldr	r3, [pc, #28]	; (800f848 <prvGetNextExpireTime+0x44>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	60fb      	str	r3, [r7, #12]
 800f832:	e001      	b.n	800f838 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f834:	2300      	movs	r3, #0
 800f836:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f838:	68fb      	ldr	r3, [r7, #12]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3714      	adds	r7, #20
 800f83e:	46bd      	mov	sp, r7
 800f840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f844:	4770      	bx	lr
 800f846:	bf00      	nop
 800f848:	20001ba8 	.word	0x20001ba8

0800f84c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f854:	f7ff f980 	bl	800eb58 <xTaskGetTickCount>
 800f858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f85a:	4b0b      	ldr	r3, [pc, #44]	; (800f888 <prvSampleTimeNow+0x3c>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	429a      	cmp	r2, r3
 800f862:	d205      	bcs.n	800f870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f864:	f000 f936 	bl	800fad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	e002      	b.n	800f876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f876:	4a04      	ldr	r2, [pc, #16]	; (800f888 <prvSampleTimeNow+0x3c>)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f87c:	68fb      	ldr	r3, [r7, #12]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	20001bb8 	.word	0x20001bb8

0800f88c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
 800f898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f89a:	2300      	movs	r3, #0
 800f89c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d812      	bhi.n	800f8d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	1ad2      	subs	r2, r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d302      	bcc.n	800f8c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	617b      	str	r3, [r7, #20]
 800f8c4:	e01b      	b.n	800f8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8c6:	4b10      	ldr	r3, [pc, #64]	; (800f908 <prvInsertTimerInActiveList+0x7c>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	3304      	adds	r3, #4
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	4610      	mov	r0, r2
 800f8d2:	f7fd fde8 	bl	800d4a6 <vListInsert>
 800f8d6:	e012      	b.n	800f8fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d206      	bcs.n	800f8ee <prvInsertTimerInActiveList+0x62>
 800f8e0:	68ba      	ldr	r2, [r7, #8]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d302      	bcc.n	800f8ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	e007      	b.n	800f8fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8ee:	4b07      	ldr	r3, [pc, #28]	; (800f90c <prvInsertTimerInActiveList+0x80>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	3304      	adds	r3, #4
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	f7fd fdd4 	bl	800d4a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f8fe:	697b      	ldr	r3, [r7, #20]
}
 800f900:	4618      	mov	r0, r3
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	20001bac 	.word	0x20001bac
 800f90c:	20001ba8 	.word	0x20001ba8

0800f910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08e      	sub	sp, #56	; 0x38
 800f914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f916:	e0ca      	b.n	800faae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da18      	bge.n	800f950 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f91e:	1d3b      	adds	r3, r7, #4
 800f920:	3304      	adds	r3, #4
 800f922:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f926:	2b00      	cmp	r3, #0
 800f928:	d10a      	bne.n	800f940 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	61fb      	str	r3, [r7, #28]
}
 800f93c:	bf00      	nop
 800f93e:	e7fe      	b.n	800f93e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f946:	6850      	ldr	r0, [r2, #4]
 800f948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f94a:	6892      	ldr	r2, [r2, #8]
 800f94c:	4611      	mov	r1, r2
 800f94e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	f2c0 80aa 	blt.w	800faac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d004      	beq.n	800f96e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f966:	3304      	adds	r3, #4
 800f968:	4618      	mov	r0, r3
 800f96a:	f7fd fdd5 	bl	800d518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f96e:	463b      	mov	r3, r7
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff ff6b 	bl	800f84c <prvSampleTimeNow>
 800f976:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b09      	cmp	r3, #9
 800f97c:	f200 8097 	bhi.w	800faae <prvProcessReceivedCommands+0x19e>
 800f980:	a201      	add	r2, pc, #4	; (adr r2, 800f988 <prvProcessReceivedCommands+0x78>)
 800f982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f986:	bf00      	nop
 800f988:	0800f9b1 	.word	0x0800f9b1
 800f98c:	0800f9b1 	.word	0x0800f9b1
 800f990:	0800f9b1 	.word	0x0800f9b1
 800f994:	0800fa25 	.word	0x0800fa25
 800f998:	0800fa39 	.word	0x0800fa39
 800f99c:	0800fa83 	.word	0x0800fa83
 800f9a0:	0800f9b1 	.word	0x0800f9b1
 800f9a4:	0800f9b1 	.word	0x0800f9b1
 800f9a8:	0800fa25 	.word	0x0800fa25
 800f9ac:	0800fa39 	.word	0x0800fa39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9b6:	f043 0301 	orr.w	r3, r3, #1
 800f9ba:	b2da      	uxtb	r2, r3
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f9c2:	68ba      	ldr	r2, [r7, #8]
 800f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	18d1      	adds	r1, r2, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9d0:	f7ff ff5c 	bl	800f88c <prvInsertTimerInActiveList>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d069      	beq.n	800faae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	6a1b      	ldr	r3, [r3, #32]
 800f9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9e8:	f003 0304 	and.w	r3, r3, #4
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d05e      	beq.n	800faae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f9f0:	68ba      	ldr	r2, [r7, #8]
 800f9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f4:	699b      	ldr	r3, [r3, #24]
 800f9f6:	441a      	add	r2, r3
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	2100      	movs	r1, #0
 800fa00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa02:	f7ff fe05 	bl	800f610 <xTimerGenericCommand>
 800fa06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d14f      	bne.n	800faae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	61bb      	str	r3, [r7, #24]
}
 800fa20:	bf00      	nop
 800fa22:	e7fe      	b.n	800fa22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa2a:	f023 0301 	bic.w	r3, r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa36:	e03a      	b.n	800faae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa3e:	f043 0301 	orr.w	r3, r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa4a:	68ba      	ldr	r2, [r7, #8]
 800fa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10a      	bne.n	800fa6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	617b      	str	r3, [r7, #20]
}
 800fa6a:	bf00      	nop
 800fa6c:	e7fe      	b.n	800fa6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa74:	18d1      	adds	r1, r2, r3
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa7c:	f7ff ff06 	bl	800f88c <prvInsertTimerInActiveList>
					break;
 800fa80:	e015      	b.n	800faae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa88:	f003 0302 	and.w	r3, r3, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fa90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa92:	f000 fbdd 	bl	8010250 <vPortFree>
 800fa96:	e00a      	b.n	800faae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9e:	f023 0301 	bic.w	r3, r3, #1
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800faaa:	e000      	b.n	800faae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800faac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faae:	4b08      	ldr	r3, [pc, #32]	; (800fad0 <prvProcessReceivedCommands+0x1c0>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	1d39      	adds	r1, r7, #4
 800fab4:	2200      	movs	r2, #0
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe f926 	bl	800dd08 <xQueueReceive>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f47f af2a 	bne.w	800f918 <prvProcessReceivedCommands+0x8>
	}
}
 800fac4:	bf00      	nop
 800fac6:	bf00      	nop
 800fac8:	3730      	adds	r7, #48	; 0x30
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	20001bb0 	.word	0x20001bb0

0800fad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b088      	sub	sp, #32
 800fad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fada:	e048      	b.n	800fb6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fadc:	4b2d      	ldr	r3, [pc, #180]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fae6:	4b2b      	ldr	r3, [pc, #172]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3304      	adds	r3, #4
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fd fd0f 	bl	800d518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6a1b      	ldr	r3, [r3, #32]
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb08:	f003 0304 	and.w	r3, r3, #4
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d02e      	beq.n	800fb6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	693a      	ldr	r2, [r7, #16]
 800fb16:	4413      	add	r3, r2
 800fb18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d90e      	bls.n	800fb40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb2e:	4b19      	ldr	r3, [pc, #100]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3304      	adds	r3, #4
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7fd fcb4 	bl	800d4a6 <vListInsert>
 800fb3e:	e016      	b.n	800fb6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb40:	2300      	movs	r3, #0
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	2300      	movs	r3, #0
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fd60 	bl	800f610 <xTimerGenericCommand>
 800fb50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10a      	bne.n	800fb6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	603b      	str	r3, [r7, #0]
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb6e:	4b09      	ldr	r3, [pc, #36]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1b1      	bne.n	800fadc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb78:	4b06      	ldr	r3, [pc, #24]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb7e:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4a04      	ldr	r2, [pc, #16]	; (800fb94 <prvSwitchTimerLists+0xc0>)
 800fb84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fb86:	4a04      	ldr	r2, [pc, #16]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	6013      	str	r3, [r2, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20001ba8 	.word	0x20001ba8
 800fb98:	20001bac 	.word	0x20001bac

0800fb9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fba2:	f000 f967 	bl	800fe74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fba6:	4b15      	ldr	r3, [pc, #84]	; (800fbfc <prvCheckForValidListAndQueue+0x60>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d120      	bne.n	800fbf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbae:	4814      	ldr	r0, [pc, #80]	; (800fc00 <prvCheckForValidListAndQueue+0x64>)
 800fbb0:	f7fd fc28 	bl	800d404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbb4:	4813      	ldr	r0, [pc, #76]	; (800fc04 <prvCheckForValidListAndQueue+0x68>)
 800fbb6:	f7fd fc25 	bl	800d404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fbba:	4b13      	ldr	r3, [pc, #76]	; (800fc08 <prvCheckForValidListAndQueue+0x6c>)
 800fbbc:	4a10      	ldr	r2, [pc, #64]	; (800fc00 <prvCheckForValidListAndQueue+0x64>)
 800fbbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fbc0:	4b12      	ldr	r3, [pc, #72]	; (800fc0c <prvCheckForValidListAndQueue+0x70>)
 800fbc2:	4a10      	ldr	r2, [pc, #64]	; (800fc04 <prvCheckForValidListAndQueue+0x68>)
 800fbc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	4b11      	ldr	r3, [pc, #68]	; (800fc10 <prvCheckForValidListAndQueue+0x74>)
 800fbcc:	4a11      	ldr	r2, [pc, #68]	; (800fc14 <prvCheckForValidListAndQueue+0x78>)
 800fbce:	2110      	movs	r1, #16
 800fbd0:	200a      	movs	r0, #10
 800fbd2:	f7fd fd33 	bl	800d63c <xQueueGenericCreateStatic>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	4a08      	ldr	r2, [pc, #32]	; (800fbfc <prvCheckForValidListAndQueue+0x60>)
 800fbda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fbdc:	4b07      	ldr	r3, [pc, #28]	; (800fbfc <prvCheckForValidListAndQueue+0x60>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d005      	beq.n	800fbf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fbe4:	4b05      	ldr	r3, [pc, #20]	; (800fbfc <prvCheckForValidListAndQueue+0x60>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	490b      	ldr	r1, [pc, #44]	; (800fc18 <prvCheckForValidListAndQueue+0x7c>)
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fe fc44 	bl	800e478 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbf0:	f000 f970 	bl	800fed4 <vPortExitCritical>
}
 800fbf4:	bf00      	nop
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20001bb0 	.word	0x20001bb0
 800fc00:	20001b80 	.word	0x20001b80
 800fc04:	20001b94 	.word	0x20001b94
 800fc08:	20001ba8 	.word	0x20001ba8
 800fc0c:	20001bac 	.word	0x20001bac
 800fc10:	20001c5c 	.word	0x20001c5c
 800fc14:	20001bbc 	.word	0x20001bbc
 800fc18:	080142d8 	.word	0x080142d8

0800fc1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	60f8      	str	r0, [r7, #12]
 800fc24:	60b9      	str	r1, [r7, #8]
 800fc26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	3b04      	subs	r3, #4
 800fc2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	3b04      	subs	r3, #4
 800fc3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	f023 0201 	bic.w	r2, r3, #1
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	3b04      	subs	r3, #4
 800fc4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc4c:	4a0c      	ldr	r2, [pc, #48]	; (800fc80 <pxPortInitialiseStack+0x64>)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3b14      	subs	r3, #20
 800fc56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3b04      	subs	r3, #4
 800fc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f06f 0202 	mvn.w	r2, #2
 800fc6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	3b20      	subs	r3, #32
 800fc70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc72:	68fb      	ldr	r3, [r7, #12]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3714      	adds	r7, #20
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7e:	4770      	bx	lr
 800fc80:	0800fc85 	.word	0x0800fc85

0800fc84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc84:	b480      	push	{r7}
 800fc86:	b085      	sub	sp, #20
 800fc88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc8e:	4b12      	ldr	r3, [pc, #72]	; (800fcd8 <prvTaskExitError+0x54>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc96:	d00a      	beq.n	800fcae <prvTaskExitError+0x2a>
	__asm volatile
 800fc98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	60fb      	str	r3, [r7, #12]
}
 800fcaa:	bf00      	nop
 800fcac:	e7fe      	b.n	800fcac <prvTaskExitError+0x28>
	__asm volatile
 800fcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb2:	f383 8811 	msr	BASEPRI, r3
 800fcb6:	f3bf 8f6f 	isb	sy
 800fcba:	f3bf 8f4f 	dsb	sy
 800fcbe:	60bb      	str	r3, [r7, #8]
}
 800fcc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcc2:	bf00      	nop
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d0fc      	beq.n	800fcc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fcca:	bf00      	nop
 800fccc:	bf00      	nop
 800fcce:	3714      	adds	r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	2000004c 	.word	0x2000004c
 800fcdc:	00000000 	.word	0x00000000

0800fce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fce0:	4b07      	ldr	r3, [pc, #28]	; (800fd00 <pxCurrentTCBConst2>)
 800fce2:	6819      	ldr	r1, [r3, #0]
 800fce4:	6808      	ldr	r0, [r1, #0]
 800fce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcea:	f380 8809 	msr	PSP, r0
 800fcee:	f3bf 8f6f 	isb	sy
 800fcf2:	f04f 0000 	mov.w	r0, #0
 800fcf6:	f380 8811 	msr	BASEPRI, r0
 800fcfa:	4770      	bx	lr
 800fcfc:	f3af 8000 	nop.w

0800fd00 <pxCurrentTCBConst2>:
 800fd00:	20001680 	.word	0x20001680
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd04:	bf00      	nop
 800fd06:	bf00      	nop

0800fd08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd08:	4808      	ldr	r0, [pc, #32]	; (800fd2c <prvPortStartFirstTask+0x24>)
 800fd0a:	6800      	ldr	r0, [r0, #0]
 800fd0c:	6800      	ldr	r0, [r0, #0]
 800fd0e:	f380 8808 	msr	MSP, r0
 800fd12:	f04f 0000 	mov.w	r0, #0
 800fd16:	f380 8814 	msr	CONTROL, r0
 800fd1a:	b662      	cpsie	i
 800fd1c:	b661      	cpsie	f
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	df00      	svc	0
 800fd28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd2a:	bf00      	nop
 800fd2c:	e000ed08 	.word	0xe000ed08

0800fd30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b086      	sub	sp, #24
 800fd34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd36:	4b46      	ldr	r3, [pc, #280]	; (800fe50 <xPortStartScheduler+0x120>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4a46      	ldr	r2, [pc, #280]	; (800fe54 <xPortStartScheduler+0x124>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d10a      	bne.n	800fd56 <xPortStartScheduler+0x26>
	__asm volatile
 800fd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	613b      	str	r3, [r7, #16]
}
 800fd52:	bf00      	nop
 800fd54:	e7fe      	b.n	800fd54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd56:	4b3e      	ldr	r3, [pc, #248]	; (800fe50 <xPortStartScheduler+0x120>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a3f      	ldr	r2, [pc, #252]	; (800fe58 <xPortStartScheduler+0x128>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d10a      	bne.n	800fd76 <xPortStartScheduler+0x46>
	__asm volatile
 800fd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	60fb      	str	r3, [r7, #12]
}
 800fd72:	bf00      	nop
 800fd74:	e7fe      	b.n	800fd74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd76:	4b39      	ldr	r3, [pc, #228]	; (800fe5c <xPortStartScheduler+0x12c>)
 800fd78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	22ff      	movs	r2, #255	; 0xff
 800fd86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd90:	78fb      	ldrb	r3, [r7, #3]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	4b31      	ldr	r3, [pc, #196]	; (800fe60 <xPortStartScheduler+0x130>)
 800fd9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd9e:	4b31      	ldr	r3, [pc, #196]	; (800fe64 <xPortStartScheduler+0x134>)
 800fda0:	2207      	movs	r2, #7
 800fda2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fda4:	e009      	b.n	800fdba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fda6:	4b2f      	ldr	r3, [pc, #188]	; (800fe64 <xPortStartScheduler+0x134>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	4a2d      	ldr	r2, [pc, #180]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdb0:	78fb      	ldrb	r3, [r7, #3]
 800fdb2:	b2db      	uxtb	r3, r3
 800fdb4:	005b      	lsls	r3, r3, #1
 800fdb6:	b2db      	uxtb	r3, r3
 800fdb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdba:	78fb      	ldrb	r3, [r7, #3]
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdc2:	2b80      	cmp	r3, #128	; 0x80
 800fdc4:	d0ef      	beq.n	800fda6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdc6:	4b27      	ldr	r3, [pc, #156]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f1c3 0307 	rsb	r3, r3, #7
 800fdce:	2b04      	cmp	r3, #4
 800fdd0:	d00a      	beq.n	800fde8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd6:	f383 8811 	msr	BASEPRI, r3
 800fdda:	f3bf 8f6f 	isb	sy
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	60bb      	str	r3, [r7, #8]
}
 800fde4:	bf00      	nop
 800fde6:	e7fe      	b.n	800fde6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fde8:	4b1e      	ldr	r3, [pc, #120]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	021b      	lsls	r3, r3, #8
 800fdee:	4a1d      	ldr	r2, [pc, #116]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fdf2:	4b1c      	ldr	r3, [pc, #112]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fdfa:	4a1a      	ldr	r2, [pc, #104]	; (800fe64 <xPortStartScheduler+0x134>)
 800fdfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe06:	4b18      	ldr	r3, [pc, #96]	; (800fe68 <xPortStartScheduler+0x138>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a17      	ldr	r2, [pc, #92]	; (800fe68 <xPortStartScheduler+0x138>)
 800fe0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe12:	4b15      	ldr	r3, [pc, #84]	; (800fe68 <xPortStartScheduler+0x138>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4a14      	ldr	r2, [pc, #80]	; (800fe68 <xPortStartScheduler+0x138>)
 800fe18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe1e:	f000 f8dd 	bl	800ffdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe22:	4b12      	ldr	r3, [pc, #72]	; (800fe6c <xPortStartScheduler+0x13c>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe28:	f000 f8fc 	bl	8010024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe2c:	4b10      	ldr	r3, [pc, #64]	; (800fe70 <xPortStartScheduler+0x140>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	4a0f      	ldr	r2, [pc, #60]	; (800fe70 <xPortStartScheduler+0x140>)
 800fe32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe38:	f7ff ff66 	bl	800fd08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe3c:	f7fe ff56 	bl	800ecec <vTaskSwitchContext>
	prvTaskExitError();
 800fe40:	f7ff ff20 	bl	800fc84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3718      	adds	r7, #24
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	e000ed00 	.word	0xe000ed00
 800fe54:	410fc271 	.word	0x410fc271
 800fe58:	410fc270 	.word	0x410fc270
 800fe5c:	e000e400 	.word	0xe000e400
 800fe60:	20001cac 	.word	0x20001cac
 800fe64:	20001cb0 	.word	0x20001cb0
 800fe68:	e000ed20 	.word	0xe000ed20
 800fe6c:	2000004c 	.word	0x2000004c
 800fe70:	e000ef34 	.word	0xe000ef34

0800fe74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
	__asm volatile
 800fe7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7e:	f383 8811 	msr	BASEPRI, r3
 800fe82:	f3bf 8f6f 	isb	sy
 800fe86:	f3bf 8f4f 	dsb	sy
 800fe8a:	607b      	str	r3, [r7, #4]
}
 800fe8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe8e:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <vPortEnterCritical+0x58>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	3301      	adds	r3, #1
 800fe94:	4a0d      	ldr	r2, [pc, #52]	; (800fecc <vPortEnterCritical+0x58>)
 800fe96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe98:	4b0c      	ldr	r3, [pc, #48]	; (800fecc <vPortEnterCritical+0x58>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d10f      	bne.n	800fec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fea0:	4b0b      	ldr	r3, [pc, #44]	; (800fed0 <vPortEnterCritical+0x5c>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00a      	beq.n	800fec0 <vPortEnterCritical+0x4c>
	__asm volatile
 800feaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feae:	f383 8811 	msr	BASEPRI, r3
 800feb2:	f3bf 8f6f 	isb	sy
 800feb6:	f3bf 8f4f 	dsb	sy
 800feba:	603b      	str	r3, [r7, #0]
}
 800febc:	bf00      	nop
 800febe:	e7fe      	b.n	800febe <vPortEnterCritical+0x4a>
	}
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	2000004c 	.word	0x2000004c
 800fed0:	e000ed04 	.word	0xe000ed04

0800fed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fed4:	b480      	push	{r7}
 800fed6:	b083      	sub	sp, #12
 800fed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800feda:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <vPortExitCritical+0x50>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10a      	bne.n	800fef8 <vPortExitCritical+0x24>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	607b      	str	r3, [r7, #4]
}
 800fef4:	bf00      	nop
 800fef6:	e7fe      	b.n	800fef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fef8:	4b0a      	ldr	r3, [pc, #40]	; (800ff24 <vPortExitCritical+0x50>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	3b01      	subs	r3, #1
 800fefe:	4a09      	ldr	r2, [pc, #36]	; (800ff24 <vPortExitCritical+0x50>)
 800ff00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <vPortExitCritical+0x50>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d105      	bne.n	800ff16 <vPortExitCritical+0x42>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	f383 8811 	msr	BASEPRI, r3
}
 800ff14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff16:	bf00      	nop
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	2000004c 	.word	0x2000004c
	...

0800ff30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff30:	f3ef 8009 	mrs	r0, PSP
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	4b15      	ldr	r3, [pc, #84]	; (800ff90 <pxCurrentTCBConst>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	f01e 0f10 	tst.w	lr, #16
 800ff40:	bf08      	it	eq
 800ff42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4a:	6010      	str	r0, [r2, #0]
 800ff4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ff54:	f380 8811 	msr	BASEPRI, r0
 800ff58:	f3bf 8f4f 	dsb	sy
 800ff5c:	f3bf 8f6f 	isb	sy
 800ff60:	f7fe fec4 	bl	800ecec <vTaskSwitchContext>
 800ff64:	f04f 0000 	mov.w	r0, #0
 800ff68:	f380 8811 	msr	BASEPRI, r0
 800ff6c:	bc09      	pop	{r0, r3}
 800ff6e:	6819      	ldr	r1, [r3, #0]
 800ff70:	6808      	ldr	r0, [r1, #0]
 800ff72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff76:	f01e 0f10 	tst.w	lr, #16
 800ff7a:	bf08      	it	eq
 800ff7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff80:	f380 8809 	msr	PSP, r0
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	f3af 8000 	nop.w

0800ff90 <pxCurrentTCBConst>:
 800ff90:	20001680 	.word	0x20001680
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff94:	bf00      	nop
 800ff96:	bf00      	nop

0800ff98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa2:	f383 8811 	msr	BASEPRI, r3
 800ffa6:	f3bf 8f6f 	isb	sy
 800ffaa:	f3bf 8f4f 	dsb	sy
 800ffae:	607b      	str	r3, [r7, #4]
}
 800ffb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffb2:	f7fe fde1 	bl	800eb78 <xTaskIncrementTick>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d003      	beq.n	800ffc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffbc:	4b06      	ldr	r3, [pc, #24]	; (800ffd8 <xPortSysTickHandler+0x40>)
 800ffbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffc2:	601a      	str	r2, [r3, #0]
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	f383 8811 	msr	BASEPRI, r3
}
 800ffce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffd0:	bf00      	nop
 800ffd2:	3708      	adds	r7, #8
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	e000ed04 	.word	0xe000ed04

0800ffdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffdc:	b480      	push	{r7}
 800ffde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ffe0:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <vPortSetupTimerInterrupt+0x34>)
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ffe6:	4b0b      	ldr	r3, [pc, #44]	; (8010014 <vPortSetupTimerInterrupt+0x38>)
 800ffe8:	2200      	movs	r2, #0
 800ffea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ffec:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <vPortSetupTimerInterrupt+0x3c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4a0a      	ldr	r2, [pc, #40]	; (801001c <vPortSetupTimerInterrupt+0x40>)
 800fff2:	fba2 2303 	umull	r2, r3, r2, r3
 800fff6:	099b      	lsrs	r3, r3, #6
 800fff8:	4a09      	ldr	r2, [pc, #36]	; (8010020 <vPortSetupTimerInterrupt+0x44>)
 800fffa:	3b01      	subs	r3, #1
 800fffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fffe:	4b04      	ldr	r3, [pc, #16]	; (8010010 <vPortSetupTimerInterrupt+0x34>)
 8010000:	2207      	movs	r2, #7
 8010002:	601a      	str	r2, [r3, #0]
}
 8010004:	bf00      	nop
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	e000e010 	.word	0xe000e010
 8010014:	e000e018 	.word	0xe000e018
 8010018:	20000008 	.word	0x20000008
 801001c:	10624dd3 	.word	0x10624dd3
 8010020:	e000e014 	.word	0xe000e014

08010024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010034 <vPortEnableVFP+0x10>
 8010028:	6801      	ldr	r1, [r0, #0]
 801002a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801002e:	6001      	str	r1, [r0, #0]
 8010030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010032:	bf00      	nop
 8010034:	e000ed88 	.word	0xe000ed88

08010038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801003e:	f3ef 8305 	mrs	r3, IPSR
 8010042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b0f      	cmp	r3, #15
 8010048:	d914      	bls.n	8010074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801004a:	4a17      	ldr	r2, [pc, #92]	; (80100a8 <vPortValidateInterruptPriority+0x70>)
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	4413      	add	r3, r2
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010054:	4b15      	ldr	r3, [pc, #84]	; (80100ac <vPortValidateInterruptPriority+0x74>)
 8010056:	781b      	ldrb	r3, [r3, #0]
 8010058:	7afa      	ldrb	r2, [r7, #11]
 801005a:	429a      	cmp	r2, r3
 801005c:	d20a      	bcs.n	8010074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	607b      	str	r3, [r7, #4]
}
 8010070:	bf00      	nop
 8010072:	e7fe      	b.n	8010072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010074:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <vPortValidateInterruptPriority+0x78>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801007c:	4b0d      	ldr	r3, [pc, #52]	; (80100b4 <vPortValidateInterruptPriority+0x7c>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d90a      	bls.n	801009a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010088:	f383 8811 	msr	BASEPRI, r3
 801008c:	f3bf 8f6f 	isb	sy
 8010090:	f3bf 8f4f 	dsb	sy
 8010094:	603b      	str	r3, [r7, #0]
}
 8010096:	bf00      	nop
 8010098:	e7fe      	b.n	8010098 <vPortValidateInterruptPriority+0x60>
	}
 801009a:	bf00      	nop
 801009c:	3714      	adds	r7, #20
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	e000e3f0 	.word	0xe000e3f0
 80100ac:	20001cac 	.word	0x20001cac
 80100b0:	e000ed0c 	.word	0xe000ed0c
 80100b4:	20001cb0 	.word	0x20001cb0

080100b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b08a      	sub	sp, #40	; 0x28
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80100c0:	2300      	movs	r3, #0
 80100c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100c4:	f7fe fc9c 	bl	800ea00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100c8:	4b5b      	ldr	r3, [pc, #364]	; (8010238 <pvPortMalloc+0x180>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d101      	bne.n	80100d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100d0:	f000 f920 	bl	8010314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100d4:	4b59      	ldr	r3, [pc, #356]	; (801023c <pvPortMalloc+0x184>)
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	4013      	ands	r3, r2
 80100dc:	2b00      	cmp	r3, #0
 80100de:	f040 8093 	bne.w	8010208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d01d      	beq.n	8010124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80100e8:	2208      	movs	r2, #8
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4413      	add	r3, r2
 80100ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f003 0307 	and.w	r3, r3, #7
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d014      	beq.n	8010124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f023 0307 	bic.w	r3, r3, #7
 8010100:	3308      	adds	r3, #8
 8010102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f003 0307 	and.w	r3, r3, #7
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00a      	beq.n	8010124 <pvPortMalloc+0x6c>
	__asm volatile
 801010e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010112:	f383 8811 	msr	BASEPRI, r3
 8010116:	f3bf 8f6f 	isb	sy
 801011a:	f3bf 8f4f 	dsb	sy
 801011e:	617b      	str	r3, [r7, #20]
}
 8010120:	bf00      	nop
 8010122:	e7fe      	b.n	8010122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d06e      	beq.n	8010208 <pvPortMalloc+0x150>
 801012a:	4b45      	ldr	r3, [pc, #276]	; (8010240 <pvPortMalloc+0x188>)
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	d869      	bhi.n	8010208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010134:	4b43      	ldr	r3, [pc, #268]	; (8010244 <pvPortMalloc+0x18c>)
 8010136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010138:	4b42      	ldr	r3, [pc, #264]	; (8010244 <pvPortMalloc+0x18c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801013e:	e004      	b.n	801014a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d903      	bls.n	801015c <pvPortMalloc+0xa4>
 8010154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d1f1      	bne.n	8010140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801015c:	4b36      	ldr	r3, [pc, #216]	; (8010238 <pvPortMalloc+0x180>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010162:	429a      	cmp	r2, r3
 8010164:	d050      	beq.n	8010208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2208      	movs	r2, #8
 801016c:	4413      	add	r3, r2
 801016e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	6a3b      	ldr	r3, [r7, #32]
 8010176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	1ad2      	subs	r2, r2, r3
 8010180:	2308      	movs	r3, #8
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	429a      	cmp	r2, r3
 8010186:	d91f      	bls.n	80101c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4413      	add	r3, r2
 801018e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	f003 0307 	and.w	r3, r3, #7
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00a      	beq.n	80101b0 <pvPortMalloc+0xf8>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	613b      	str	r3, [r7, #16]
}
 80101ac:	bf00      	nop
 80101ae:	e7fe      	b.n	80101ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	685a      	ldr	r2, [r3, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	1ad2      	subs	r2, r2, r3
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101c2:	69b8      	ldr	r0, [r7, #24]
 80101c4:	f000 f908 	bl	80103d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101c8:	4b1d      	ldr	r3, [pc, #116]	; (8010240 <pvPortMalloc+0x188>)
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	4a1b      	ldr	r2, [pc, #108]	; (8010240 <pvPortMalloc+0x188>)
 80101d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101d6:	4b1a      	ldr	r3, [pc, #104]	; (8010240 <pvPortMalloc+0x188>)
 80101d8:	681a      	ldr	r2, [r3, #0]
 80101da:	4b1b      	ldr	r3, [pc, #108]	; (8010248 <pvPortMalloc+0x190>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d203      	bcs.n	80101ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80101e2:	4b17      	ldr	r3, [pc, #92]	; (8010240 <pvPortMalloc+0x188>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	4a18      	ldr	r2, [pc, #96]	; (8010248 <pvPortMalloc+0x190>)
 80101e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80101ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ec:	685a      	ldr	r2, [r3, #4]
 80101ee:	4b13      	ldr	r3, [pc, #76]	; (801023c <pvPortMalloc+0x184>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	431a      	orrs	r2, r3
 80101f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	2200      	movs	r2, #0
 80101fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80101fe:	4b13      	ldr	r3, [pc, #76]	; (801024c <pvPortMalloc+0x194>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	4a11      	ldr	r2, [pc, #68]	; (801024c <pvPortMalloc+0x194>)
 8010206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010208:	f7fe fc08 	bl	800ea1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	f003 0307 	and.w	r3, r3, #7
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <pvPortMalloc+0x174>
	__asm volatile
 8010216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021a:	f383 8811 	msr	BASEPRI, r3
 801021e:	f3bf 8f6f 	isb	sy
 8010222:	f3bf 8f4f 	dsb	sy
 8010226:	60fb      	str	r3, [r7, #12]
}
 8010228:	bf00      	nop
 801022a:	e7fe      	b.n	801022a <pvPortMalloc+0x172>
	return pvReturn;
 801022c:	69fb      	ldr	r3, [r7, #28]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3728      	adds	r7, #40	; 0x28
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	20003044 	.word	0x20003044
 801023c:	20003058 	.word	0x20003058
 8010240:	20003048 	.word	0x20003048
 8010244:	2000303c 	.word	0x2000303c
 8010248:	2000304c 	.word	0x2000304c
 801024c:	20003050 	.word	0x20003050

08010250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d04d      	beq.n	80102fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010262:	2308      	movs	r3, #8
 8010264:	425b      	negs	r3, r3
 8010266:	697a      	ldr	r2, [r7, #20]
 8010268:	4413      	add	r3, r2
 801026a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	685a      	ldr	r2, [r3, #4]
 8010274:	4b24      	ldr	r3, [pc, #144]	; (8010308 <vPortFree+0xb8>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	4013      	ands	r3, r2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d10a      	bne.n	8010294 <vPortFree+0x44>
	__asm volatile
 801027e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010282:	f383 8811 	msr	BASEPRI, r3
 8010286:	f3bf 8f6f 	isb	sy
 801028a:	f3bf 8f4f 	dsb	sy
 801028e:	60fb      	str	r3, [r7, #12]
}
 8010290:	bf00      	nop
 8010292:	e7fe      	b.n	8010292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d00a      	beq.n	80102b2 <vPortFree+0x62>
	__asm volatile
 801029c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	60bb      	str	r3, [r7, #8]
}
 80102ae:	bf00      	nop
 80102b0:	e7fe      	b.n	80102b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	4b14      	ldr	r3, [pc, #80]	; (8010308 <vPortFree+0xb8>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4013      	ands	r3, r2
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d01e      	beq.n	80102fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d11a      	bne.n	80102fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	685a      	ldr	r2, [r3, #4]
 80102cc:	4b0e      	ldr	r3, [pc, #56]	; (8010308 <vPortFree+0xb8>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	43db      	mvns	r3, r3
 80102d2:	401a      	ands	r2, r3
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80102d8:	f7fe fb92 	bl	800ea00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	685a      	ldr	r2, [r3, #4]
 80102e0:	4b0a      	ldr	r3, [pc, #40]	; (801030c <vPortFree+0xbc>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4413      	add	r3, r2
 80102e6:	4a09      	ldr	r2, [pc, #36]	; (801030c <vPortFree+0xbc>)
 80102e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80102ea:	6938      	ldr	r0, [r7, #16]
 80102ec:	f000 f874 	bl	80103d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80102f0:	4b07      	ldr	r3, [pc, #28]	; (8010310 <vPortFree+0xc0>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	3301      	adds	r3, #1
 80102f6:	4a06      	ldr	r2, [pc, #24]	; (8010310 <vPortFree+0xc0>)
 80102f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80102fa:	f7fe fb8f 	bl	800ea1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80102fe:	bf00      	nop
 8010300:	3718      	adds	r7, #24
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}
 8010306:	bf00      	nop
 8010308:	20003058 	.word	0x20003058
 801030c:	20003048 	.word	0x20003048
 8010310:	20003054 	.word	0x20003054

08010314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801031a:	f241 3388 	movw	r3, #5000	; 0x1388
 801031e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010320:	4b27      	ldr	r3, [pc, #156]	; (80103c0 <prvHeapInit+0xac>)
 8010322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f003 0307 	and.w	r3, r3, #7
 801032a:	2b00      	cmp	r3, #0
 801032c:	d00c      	beq.n	8010348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	3307      	adds	r3, #7
 8010332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f023 0307 	bic.w	r3, r3, #7
 801033a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	4a1f      	ldr	r2, [pc, #124]	; (80103c0 <prvHeapInit+0xac>)
 8010344:	4413      	add	r3, r2
 8010346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801034c:	4a1d      	ldr	r2, [pc, #116]	; (80103c4 <prvHeapInit+0xb0>)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010352:	4b1c      	ldr	r3, [pc, #112]	; (80103c4 <prvHeapInit+0xb0>)
 8010354:	2200      	movs	r2, #0
 8010356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	68ba      	ldr	r2, [r7, #8]
 801035c:	4413      	add	r3, r2
 801035e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010360:	2208      	movs	r2, #8
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	1a9b      	subs	r3, r3, r2
 8010366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f023 0307 	bic.w	r3, r3, #7
 801036e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	4a15      	ldr	r2, [pc, #84]	; (80103c8 <prvHeapInit+0xb4>)
 8010374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010376:	4b14      	ldr	r3, [pc, #80]	; (80103c8 <prvHeapInit+0xb4>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2200      	movs	r2, #0
 801037c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801037e:	4b12      	ldr	r3, [pc, #72]	; (80103c8 <prvHeapInit+0xb4>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2200      	movs	r2, #0
 8010384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	1ad2      	subs	r2, r2, r3
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010394:	4b0c      	ldr	r3, [pc, #48]	; (80103c8 <prvHeapInit+0xb4>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	4a0a      	ldr	r2, [pc, #40]	; (80103cc <prvHeapInit+0xb8>)
 80103a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	4a09      	ldr	r2, [pc, #36]	; (80103d0 <prvHeapInit+0xbc>)
 80103aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103ac:	4b09      	ldr	r3, [pc, #36]	; (80103d4 <prvHeapInit+0xc0>)
 80103ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80103b2:	601a      	str	r2, [r3, #0]
}
 80103b4:	bf00      	nop
 80103b6:	3714      	adds	r7, #20
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr
 80103c0:	20001cb4 	.word	0x20001cb4
 80103c4:	2000303c 	.word	0x2000303c
 80103c8:	20003044 	.word	0x20003044
 80103cc:	2000304c 	.word	0x2000304c
 80103d0:	20003048 	.word	0x20003048
 80103d4:	20003058 	.word	0x20003058

080103d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80103e0:	4b28      	ldr	r3, [pc, #160]	; (8010484 <prvInsertBlockIntoFreeList+0xac>)
 80103e2:	60fb      	str	r3, [r7, #12]
 80103e4:	e002      	b.n	80103ec <prvInsertBlockIntoFreeList+0x14>
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	60fb      	str	r3, [r7, #12]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d8f7      	bhi.n	80103e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	4413      	add	r3, r2
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	429a      	cmp	r2, r3
 8010406:	d108      	bne.n	801041a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	441a      	add	r2, r3
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	68ba      	ldr	r2, [r7, #8]
 8010424:	441a      	add	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	d118      	bne.n	8010460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	4b15      	ldr	r3, [pc, #84]	; (8010488 <prvInsertBlockIntoFreeList+0xb0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	429a      	cmp	r2, r3
 8010438:	d00d      	beq.n	8010456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	441a      	add	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	e008      	b.n	8010468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010456:	4b0c      	ldr	r3, [pc, #48]	; (8010488 <prvInsertBlockIntoFreeList+0xb0>)
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	e003      	b.n	8010468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010468:	68fa      	ldr	r2, [r7, #12]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	429a      	cmp	r2, r3
 801046e:	d002      	beq.n	8010476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010476:	bf00      	nop
 8010478:	3714      	adds	r7, #20
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop
 8010484:	2000303c 	.word	0x2000303c
 8010488:	20003044 	.word	0x20003044

0801048c <_ZdlPvj>:
 801048c:	f000 b814 	b.w	80104b8 <_ZdlPv>

08010490 <_Znwj>:
 8010490:	2801      	cmp	r0, #1
 8010492:	bf38      	it	cc
 8010494:	2001      	movcc	r0, #1
 8010496:	b510      	push	{r4, lr}
 8010498:	4604      	mov	r4, r0
 801049a:	4620      	mov	r0, r4
 801049c:	f000 f85e 	bl	801055c <malloc>
 80104a0:	b930      	cbnz	r0, 80104b0 <_Znwj+0x20>
 80104a2:	f000 f81d 	bl	80104e0 <_ZSt15get_new_handlerv>
 80104a6:	b908      	cbnz	r0, 80104ac <_Znwj+0x1c>
 80104a8:	f000 f822 	bl	80104f0 <abort>
 80104ac:	4780      	blx	r0
 80104ae:	e7f4      	b.n	801049a <_Znwj+0xa>
 80104b0:	bd10      	pop	{r4, pc}

080104b2 <__cxa_pure_virtual>:
 80104b2:	b508      	push	{r3, lr}
 80104b4:	f000 f80e 	bl	80104d4 <_ZSt9terminatev>

080104b8 <_ZdlPv>:
 80104b8:	f000 b858 	b.w	801056c <free>

080104bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80104bc:	b508      	push	{r3, lr}
 80104be:	4780      	blx	r0
 80104c0:	f000 f816 	bl	80104f0 <abort>

080104c4 <_ZSt13get_terminatev>:
 80104c4:	4b02      	ldr	r3, [pc, #8]	; (80104d0 <_ZSt13get_terminatev+0xc>)
 80104c6:	6818      	ldr	r0, [r3, #0]
 80104c8:	f3bf 8f5b 	dmb	ish
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	20000050 	.word	0x20000050

080104d4 <_ZSt9terminatev>:
 80104d4:	b508      	push	{r3, lr}
 80104d6:	f7ff fff5 	bl	80104c4 <_ZSt13get_terminatev>
 80104da:	f7ff ffef 	bl	80104bc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080104e0 <_ZSt15get_new_handlerv>:
 80104e0:	4b02      	ldr	r3, [pc, #8]	; (80104ec <_ZSt15get_new_handlerv+0xc>)
 80104e2:	6818      	ldr	r0, [r3, #0]
 80104e4:	f3bf 8f5b 	dmb	ish
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	2000305c 	.word	0x2000305c

080104f0 <abort>:
 80104f0:	b508      	push	{r3, lr}
 80104f2:	2006      	movs	r0, #6
 80104f4:	f000 fe68 	bl	80111c8 <raise>
 80104f8:	2001      	movs	r0, #1
 80104fa:	f7f3 f8d1 	bl	80036a0 <_exit>

080104fe <atoi>:
 80104fe:	220a      	movs	r2, #10
 8010500:	2100      	movs	r1, #0
 8010502:	f000 bff7 	b.w	80114f4 <strtol>
	...

08010508 <__errno>:
 8010508:	4b01      	ldr	r3, [pc, #4]	; (8010510 <__errno+0x8>)
 801050a:	6818      	ldr	r0, [r3, #0]
 801050c:	4770      	bx	lr
 801050e:	bf00      	nop
 8010510:	20000054 	.word	0x20000054

08010514 <__libc_init_array>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	4d0d      	ldr	r5, [pc, #52]	; (801054c <__libc_init_array+0x38>)
 8010518:	4c0d      	ldr	r4, [pc, #52]	; (8010550 <__libc_init_array+0x3c>)
 801051a:	1b64      	subs	r4, r4, r5
 801051c:	10a4      	asrs	r4, r4, #2
 801051e:	2600      	movs	r6, #0
 8010520:	42a6      	cmp	r6, r4
 8010522:	d109      	bne.n	8010538 <__libc_init_array+0x24>
 8010524:	4d0b      	ldr	r5, [pc, #44]	; (8010554 <__libc_init_array+0x40>)
 8010526:	4c0c      	ldr	r4, [pc, #48]	; (8010558 <__libc_init_array+0x44>)
 8010528:	f003 fcbc 	bl	8013ea4 <_init>
 801052c:	1b64      	subs	r4, r4, r5
 801052e:	10a4      	asrs	r4, r4, #2
 8010530:	2600      	movs	r6, #0
 8010532:	42a6      	cmp	r6, r4
 8010534:	d105      	bne.n	8010542 <__libc_init_array+0x2e>
 8010536:	bd70      	pop	{r4, r5, r6, pc}
 8010538:	f855 3b04 	ldr.w	r3, [r5], #4
 801053c:	4798      	blx	r3
 801053e:	3601      	adds	r6, #1
 8010540:	e7ee      	b.n	8010520 <__libc_init_array+0xc>
 8010542:	f855 3b04 	ldr.w	r3, [r5], #4
 8010546:	4798      	blx	r3
 8010548:	3601      	adds	r6, #1
 801054a:	e7f2      	b.n	8010532 <__libc_init_array+0x1e>
 801054c:	08014a0c 	.word	0x08014a0c
 8010550:	08014a0c 	.word	0x08014a0c
 8010554:	08014a0c 	.word	0x08014a0c
 8010558:	08014a18 	.word	0x08014a18

0801055c <malloc>:
 801055c:	4b02      	ldr	r3, [pc, #8]	; (8010568 <malloc+0xc>)
 801055e:	4601      	mov	r1, r0
 8010560:	6818      	ldr	r0, [r3, #0]
 8010562:	f000 b88d 	b.w	8010680 <_malloc_r>
 8010566:	bf00      	nop
 8010568:	20000054 	.word	0x20000054

0801056c <free>:
 801056c:	4b02      	ldr	r3, [pc, #8]	; (8010578 <free+0xc>)
 801056e:	4601      	mov	r1, r0
 8010570:	6818      	ldr	r0, [r3, #0]
 8010572:	f000 b819 	b.w	80105a8 <_free_r>
 8010576:	bf00      	nop
 8010578:	20000054 	.word	0x20000054

0801057c <memcpy>:
 801057c:	440a      	add	r2, r1
 801057e:	4291      	cmp	r1, r2
 8010580:	f100 33ff 	add.w	r3, r0, #4294967295
 8010584:	d100      	bne.n	8010588 <memcpy+0xc>
 8010586:	4770      	bx	lr
 8010588:	b510      	push	{r4, lr}
 801058a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801058e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010592:	4291      	cmp	r1, r2
 8010594:	d1f9      	bne.n	801058a <memcpy+0xe>
 8010596:	bd10      	pop	{r4, pc}

08010598 <memset>:
 8010598:	4402      	add	r2, r0
 801059a:	4603      	mov	r3, r0
 801059c:	4293      	cmp	r3, r2
 801059e:	d100      	bne.n	80105a2 <memset+0xa>
 80105a0:	4770      	bx	lr
 80105a2:	f803 1b01 	strb.w	r1, [r3], #1
 80105a6:	e7f9      	b.n	801059c <memset+0x4>

080105a8 <_free_r>:
 80105a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105aa:	2900      	cmp	r1, #0
 80105ac:	d044      	beq.n	8010638 <_free_r+0x90>
 80105ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105b2:	9001      	str	r0, [sp, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f1a1 0404 	sub.w	r4, r1, #4
 80105ba:	bfb8      	it	lt
 80105bc:	18e4      	addlt	r4, r4, r3
 80105be:	f002 f967 	bl	8012890 <__malloc_lock>
 80105c2:	4a1e      	ldr	r2, [pc, #120]	; (801063c <_free_r+0x94>)
 80105c4:	9801      	ldr	r0, [sp, #4]
 80105c6:	6813      	ldr	r3, [r2, #0]
 80105c8:	b933      	cbnz	r3, 80105d8 <_free_r+0x30>
 80105ca:	6063      	str	r3, [r4, #4]
 80105cc:	6014      	str	r4, [r2, #0]
 80105ce:	b003      	add	sp, #12
 80105d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105d4:	f002 b962 	b.w	801289c <__malloc_unlock>
 80105d8:	42a3      	cmp	r3, r4
 80105da:	d908      	bls.n	80105ee <_free_r+0x46>
 80105dc:	6825      	ldr	r5, [r4, #0]
 80105de:	1961      	adds	r1, r4, r5
 80105e0:	428b      	cmp	r3, r1
 80105e2:	bf01      	itttt	eq
 80105e4:	6819      	ldreq	r1, [r3, #0]
 80105e6:	685b      	ldreq	r3, [r3, #4]
 80105e8:	1949      	addeq	r1, r1, r5
 80105ea:	6021      	streq	r1, [r4, #0]
 80105ec:	e7ed      	b.n	80105ca <_free_r+0x22>
 80105ee:	461a      	mov	r2, r3
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	b10b      	cbz	r3, 80105f8 <_free_r+0x50>
 80105f4:	42a3      	cmp	r3, r4
 80105f6:	d9fa      	bls.n	80105ee <_free_r+0x46>
 80105f8:	6811      	ldr	r1, [r2, #0]
 80105fa:	1855      	adds	r5, r2, r1
 80105fc:	42a5      	cmp	r5, r4
 80105fe:	d10b      	bne.n	8010618 <_free_r+0x70>
 8010600:	6824      	ldr	r4, [r4, #0]
 8010602:	4421      	add	r1, r4
 8010604:	1854      	adds	r4, r2, r1
 8010606:	42a3      	cmp	r3, r4
 8010608:	6011      	str	r1, [r2, #0]
 801060a:	d1e0      	bne.n	80105ce <_free_r+0x26>
 801060c:	681c      	ldr	r4, [r3, #0]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	6053      	str	r3, [r2, #4]
 8010612:	4421      	add	r1, r4
 8010614:	6011      	str	r1, [r2, #0]
 8010616:	e7da      	b.n	80105ce <_free_r+0x26>
 8010618:	d902      	bls.n	8010620 <_free_r+0x78>
 801061a:	230c      	movs	r3, #12
 801061c:	6003      	str	r3, [r0, #0]
 801061e:	e7d6      	b.n	80105ce <_free_r+0x26>
 8010620:	6825      	ldr	r5, [r4, #0]
 8010622:	1961      	adds	r1, r4, r5
 8010624:	428b      	cmp	r3, r1
 8010626:	bf04      	itt	eq
 8010628:	6819      	ldreq	r1, [r3, #0]
 801062a:	685b      	ldreq	r3, [r3, #4]
 801062c:	6063      	str	r3, [r4, #4]
 801062e:	bf04      	itt	eq
 8010630:	1949      	addeq	r1, r1, r5
 8010632:	6021      	streq	r1, [r4, #0]
 8010634:	6054      	str	r4, [r2, #4]
 8010636:	e7ca      	b.n	80105ce <_free_r+0x26>
 8010638:	b003      	add	sp, #12
 801063a:	bd30      	pop	{r4, r5, pc}
 801063c:	20003060 	.word	0x20003060

08010640 <sbrk_aligned>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	4e0e      	ldr	r6, [pc, #56]	; (801067c <sbrk_aligned+0x3c>)
 8010644:	460c      	mov	r4, r1
 8010646:	6831      	ldr	r1, [r6, #0]
 8010648:	4605      	mov	r5, r0
 801064a:	b911      	cbnz	r1, 8010652 <sbrk_aligned+0x12>
 801064c:	f000 fd84 	bl	8011158 <_sbrk_r>
 8010650:	6030      	str	r0, [r6, #0]
 8010652:	4621      	mov	r1, r4
 8010654:	4628      	mov	r0, r5
 8010656:	f000 fd7f 	bl	8011158 <_sbrk_r>
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	d00a      	beq.n	8010674 <sbrk_aligned+0x34>
 801065e:	1cc4      	adds	r4, r0, #3
 8010660:	f024 0403 	bic.w	r4, r4, #3
 8010664:	42a0      	cmp	r0, r4
 8010666:	d007      	beq.n	8010678 <sbrk_aligned+0x38>
 8010668:	1a21      	subs	r1, r4, r0
 801066a:	4628      	mov	r0, r5
 801066c:	f000 fd74 	bl	8011158 <_sbrk_r>
 8010670:	3001      	adds	r0, #1
 8010672:	d101      	bne.n	8010678 <sbrk_aligned+0x38>
 8010674:	f04f 34ff 	mov.w	r4, #4294967295
 8010678:	4620      	mov	r0, r4
 801067a:	bd70      	pop	{r4, r5, r6, pc}
 801067c:	20003064 	.word	0x20003064

08010680 <_malloc_r>:
 8010680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010684:	1ccd      	adds	r5, r1, #3
 8010686:	f025 0503 	bic.w	r5, r5, #3
 801068a:	3508      	adds	r5, #8
 801068c:	2d0c      	cmp	r5, #12
 801068e:	bf38      	it	cc
 8010690:	250c      	movcc	r5, #12
 8010692:	2d00      	cmp	r5, #0
 8010694:	4607      	mov	r7, r0
 8010696:	db01      	blt.n	801069c <_malloc_r+0x1c>
 8010698:	42a9      	cmp	r1, r5
 801069a:	d905      	bls.n	80106a8 <_malloc_r+0x28>
 801069c:	230c      	movs	r3, #12
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	2600      	movs	r6, #0
 80106a2:	4630      	mov	r0, r6
 80106a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a8:	4e2e      	ldr	r6, [pc, #184]	; (8010764 <_malloc_r+0xe4>)
 80106aa:	f002 f8f1 	bl	8012890 <__malloc_lock>
 80106ae:	6833      	ldr	r3, [r6, #0]
 80106b0:	461c      	mov	r4, r3
 80106b2:	bb34      	cbnz	r4, 8010702 <_malloc_r+0x82>
 80106b4:	4629      	mov	r1, r5
 80106b6:	4638      	mov	r0, r7
 80106b8:	f7ff ffc2 	bl	8010640 <sbrk_aligned>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	4604      	mov	r4, r0
 80106c0:	d14d      	bne.n	801075e <_malloc_r+0xde>
 80106c2:	6834      	ldr	r4, [r6, #0]
 80106c4:	4626      	mov	r6, r4
 80106c6:	2e00      	cmp	r6, #0
 80106c8:	d140      	bne.n	801074c <_malloc_r+0xcc>
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	4631      	mov	r1, r6
 80106ce:	4638      	mov	r0, r7
 80106d0:	eb04 0803 	add.w	r8, r4, r3
 80106d4:	f000 fd40 	bl	8011158 <_sbrk_r>
 80106d8:	4580      	cmp	r8, r0
 80106da:	d13a      	bne.n	8010752 <_malloc_r+0xd2>
 80106dc:	6821      	ldr	r1, [r4, #0]
 80106de:	3503      	adds	r5, #3
 80106e0:	1a6d      	subs	r5, r5, r1
 80106e2:	f025 0503 	bic.w	r5, r5, #3
 80106e6:	3508      	adds	r5, #8
 80106e8:	2d0c      	cmp	r5, #12
 80106ea:	bf38      	it	cc
 80106ec:	250c      	movcc	r5, #12
 80106ee:	4629      	mov	r1, r5
 80106f0:	4638      	mov	r0, r7
 80106f2:	f7ff ffa5 	bl	8010640 <sbrk_aligned>
 80106f6:	3001      	adds	r0, #1
 80106f8:	d02b      	beq.n	8010752 <_malloc_r+0xd2>
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	442b      	add	r3, r5
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	e00e      	b.n	8010720 <_malloc_r+0xa0>
 8010702:	6822      	ldr	r2, [r4, #0]
 8010704:	1b52      	subs	r2, r2, r5
 8010706:	d41e      	bmi.n	8010746 <_malloc_r+0xc6>
 8010708:	2a0b      	cmp	r2, #11
 801070a:	d916      	bls.n	801073a <_malloc_r+0xba>
 801070c:	1961      	adds	r1, r4, r5
 801070e:	42a3      	cmp	r3, r4
 8010710:	6025      	str	r5, [r4, #0]
 8010712:	bf18      	it	ne
 8010714:	6059      	strne	r1, [r3, #4]
 8010716:	6863      	ldr	r3, [r4, #4]
 8010718:	bf08      	it	eq
 801071a:	6031      	streq	r1, [r6, #0]
 801071c:	5162      	str	r2, [r4, r5]
 801071e:	604b      	str	r3, [r1, #4]
 8010720:	4638      	mov	r0, r7
 8010722:	f104 060b 	add.w	r6, r4, #11
 8010726:	f002 f8b9 	bl	801289c <__malloc_unlock>
 801072a:	f026 0607 	bic.w	r6, r6, #7
 801072e:	1d23      	adds	r3, r4, #4
 8010730:	1af2      	subs	r2, r6, r3
 8010732:	d0b6      	beq.n	80106a2 <_malloc_r+0x22>
 8010734:	1b9b      	subs	r3, r3, r6
 8010736:	50a3      	str	r3, [r4, r2]
 8010738:	e7b3      	b.n	80106a2 <_malloc_r+0x22>
 801073a:	6862      	ldr	r2, [r4, #4]
 801073c:	42a3      	cmp	r3, r4
 801073e:	bf0c      	ite	eq
 8010740:	6032      	streq	r2, [r6, #0]
 8010742:	605a      	strne	r2, [r3, #4]
 8010744:	e7ec      	b.n	8010720 <_malloc_r+0xa0>
 8010746:	4623      	mov	r3, r4
 8010748:	6864      	ldr	r4, [r4, #4]
 801074a:	e7b2      	b.n	80106b2 <_malloc_r+0x32>
 801074c:	4634      	mov	r4, r6
 801074e:	6876      	ldr	r6, [r6, #4]
 8010750:	e7b9      	b.n	80106c6 <_malloc_r+0x46>
 8010752:	230c      	movs	r3, #12
 8010754:	603b      	str	r3, [r7, #0]
 8010756:	4638      	mov	r0, r7
 8010758:	f002 f8a0 	bl	801289c <__malloc_unlock>
 801075c:	e7a1      	b.n	80106a2 <_malloc_r+0x22>
 801075e:	6025      	str	r5, [r4, #0]
 8010760:	e7de      	b.n	8010720 <_malloc_r+0xa0>
 8010762:	bf00      	nop
 8010764:	20003060 	.word	0x20003060

08010768 <__cvt>:
 8010768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801076c:	ec55 4b10 	vmov	r4, r5, d0
 8010770:	2d00      	cmp	r5, #0
 8010772:	460e      	mov	r6, r1
 8010774:	4619      	mov	r1, r3
 8010776:	462b      	mov	r3, r5
 8010778:	bfbb      	ittet	lt
 801077a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801077e:	461d      	movlt	r5, r3
 8010780:	2300      	movge	r3, #0
 8010782:	232d      	movlt	r3, #45	; 0x2d
 8010784:	700b      	strb	r3, [r1, #0]
 8010786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801078c:	4691      	mov	r9, r2
 801078e:	f023 0820 	bic.w	r8, r3, #32
 8010792:	bfbc      	itt	lt
 8010794:	4622      	movlt	r2, r4
 8010796:	4614      	movlt	r4, r2
 8010798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801079c:	d005      	beq.n	80107aa <__cvt+0x42>
 801079e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80107a2:	d100      	bne.n	80107a6 <__cvt+0x3e>
 80107a4:	3601      	adds	r6, #1
 80107a6:	2102      	movs	r1, #2
 80107a8:	e000      	b.n	80107ac <__cvt+0x44>
 80107aa:	2103      	movs	r1, #3
 80107ac:	ab03      	add	r3, sp, #12
 80107ae:	9301      	str	r3, [sp, #4]
 80107b0:	ab02      	add	r3, sp, #8
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	ec45 4b10 	vmov	d0, r4, r5
 80107b8:	4653      	mov	r3, sl
 80107ba:	4632      	mov	r2, r6
 80107bc:	f001 f830 	bl	8011820 <_dtoa_r>
 80107c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80107c4:	4607      	mov	r7, r0
 80107c6:	d102      	bne.n	80107ce <__cvt+0x66>
 80107c8:	f019 0f01 	tst.w	r9, #1
 80107cc:	d022      	beq.n	8010814 <__cvt+0xac>
 80107ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80107d2:	eb07 0906 	add.w	r9, r7, r6
 80107d6:	d110      	bne.n	80107fa <__cvt+0x92>
 80107d8:	783b      	ldrb	r3, [r7, #0]
 80107da:	2b30      	cmp	r3, #48	; 0x30
 80107dc:	d10a      	bne.n	80107f4 <__cvt+0x8c>
 80107de:	2200      	movs	r2, #0
 80107e0:	2300      	movs	r3, #0
 80107e2:	4620      	mov	r0, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7f0 f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80107ea:	b918      	cbnz	r0, 80107f4 <__cvt+0x8c>
 80107ec:	f1c6 0601 	rsb	r6, r6, #1
 80107f0:	f8ca 6000 	str.w	r6, [sl]
 80107f4:	f8da 3000 	ldr.w	r3, [sl]
 80107f8:	4499      	add	r9, r3
 80107fa:	2200      	movs	r2, #0
 80107fc:	2300      	movs	r3, #0
 80107fe:	4620      	mov	r0, r4
 8010800:	4629      	mov	r1, r5
 8010802:	f7f0 f971 	bl	8000ae8 <__aeabi_dcmpeq>
 8010806:	b108      	cbz	r0, 801080c <__cvt+0xa4>
 8010808:	f8cd 900c 	str.w	r9, [sp, #12]
 801080c:	2230      	movs	r2, #48	; 0x30
 801080e:	9b03      	ldr	r3, [sp, #12]
 8010810:	454b      	cmp	r3, r9
 8010812:	d307      	bcc.n	8010824 <__cvt+0xbc>
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010818:	1bdb      	subs	r3, r3, r7
 801081a:	4638      	mov	r0, r7
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	b004      	add	sp, #16
 8010820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010824:	1c59      	adds	r1, r3, #1
 8010826:	9103      	str	r1, [sp, #12]
 8010828:	701a      	strb	r2, [r3, #0]
 801082a:	e7f0      	b.n	801080e <__cvt+0xa6>

0801082c <__exponent>:
 801082c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801082e:	4603      	mov	r3, r0
 8010830:	2900      	cmp	r1, #0
 8010832:	bfb8      	it	lt
 8010834:	4249      	neglt	r1, r1
 8010836:	f803 2b02 	strb.w	r2, [r3], #2
 801083a:	bfb4      	ite	lt
 801083c:	222d      	movlt	r2, #45	; 0x2d
 801083e:	222b      	movge	r2, #43	; 0x2b
 8010840:	2909      	cmp	r1, #9
 8010842:	7042      	strb	r2, [r0, #1]
 8010844:	dd2a      	ble.n	801089c <__exponent+0x70>
 8010846:	f10d 0407 	add.w	r4, sp, #7
 801084a:	46a4      	mov	ip, r4
 801084c:	270a      	movs	r7, #10
 801084e:	46a6      	mov	lr, r4
 8010850:	460a      	mov	r2, r1
 8010852:	fb91 f6f7 	sdiv	r6, r1, r7
 8010856:	fb07 1516 	mls	r5, r7, r6, r1
 801085a:	3530      	adds	r5, #48	; 0x30
 801085c:	2a63      	cmp	r2, #99	; 0x63
 801085e:	f104 34ff 	add.w	r4, r4, #4294967295
 8010862:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010866:	4631      	mov	r1, r6
 8010868:	dcf1      	bgt.n	801084e <__exponent+0x22>
 801086a:	3130      	adds	r1, #48	; 0x30
 801086c:	f1ae 0502 	sub.w	r5, lr, #2
 8010870:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010874:	1c44      	adds	r4, r0, #1
 8010876:	4629      	mov	r1, r5
 8010878:	4561      	cmp	r1, ip
 801087a:	d30a      	bcc.n	8010892 <__exponent+0x66>
 801087c:	f10d 0209 	add.w	r2, sp, #9
 8010880:	eba2 020e 	sub.w	r2, r2, lr
 8010884:	4565      	cmp	r5, ip
 8010886:	bf88      	it	hi
 8010888:	2200      	movhi	r2, #0
 801088a:	4413      	add	r3, r2
 801088c:	1a18      	subs	r0, r3, r0
 801088e:	b003      	add	sp, #12
 8010890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010896:	f804 2f01 	strb.w	r2, [r4, #1]!
 801089a:	e7ed      	b.n	8010878 <__exponent+0x4c>
 801089c:	2330      	movs	r3, #48	; 0x30
 801089e:	3130      	adds	r1, #48	; 0x30
 80108a0:	7083      	strb	r3, [r0, #2]
 80108a2:	70c1      	strb	r1, [r0, #3]
 80108a4:	1d03      	adds	r3, r0, #4
 80108a6:	e7f1      	b.n	801088c <__exponent+0x60>

080108a8 <_printf_float>:
 80108a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ac:	ed2d 8b02 	vpush	{d8}
 80108b0:	b08d      	sub	sp, #52	; 0x34
 80108b2:	460c      	mov	r4, r1
 80108b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80108b8:	4616      	mov	r6, r2
 80108ba:	461f      	mov	r7, r3
 80108bc:	4605      	mov	r5, r0
 80108be:	f001 ff67 	bl	8012790 <_localeconv_r>
 80108c2:	f8d0 a000 	ldr.w	sl, [r0]
 80108c6:	4650      	mov	r0, sl
 80108c8:	f7ef fc8c 	bl	80001e4 <strlen>
 80108cc:	2300      	movs	r3, #0
 80108ce:	930a      	str	r3, [sp, #40]	; 0x28
 80108d0:	6823      	ldr	r3, [r4, #0]
 80108d2:	9305      	str	r3, [sp, #20]
 80108d4:	f8d8 3000 	ldr.w	r3, [r8]
 80108d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80108dc:	3307      	adds	r3, #7
 80108de:	f023 0307 	bic.w	r3, r3, #7
 80108e2:	f103 0208 	add.w	r2, r3, #8
 80108e6:	f8c8 2000 	str.w	r2, [r8]
 80108ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80108f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80108f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80108fa:	9307      	str	r3, [sp, #28]
 80108fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8010900:	ee08 0a10 	vmov	s16, r0
 8010904:	4b9f      	ldr	r3, [pc, #636]	; (8010b84 <_printf_float+0x2dc>)
 8010906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801090a:	f04f 32ff 	mov.w	r2, #4294967295
 801090e:	f7f0 f91d 	bl	8000b4c <__aeabi_dcmpun>
 8010912:	bb88      	cbnz	r0, 8010978 <_printf_float+0xd0>
 8010914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010918:	4b9a      	ldr	r3, [pc, #616]	; (8010b84 <_printf_float+0x2dc>)
 801091a:	f04f 32ff 	mov.w	r2, #4294967295
 801091e:	f7f0 f8f7 	bl	8000b10 <__aeabi_dcmple>
 8010922:	bb48      	cbnz	r0, 8010978 <_printf_float+0xd0>
 8010924:	2200      	movs	r2, #0
 8010926:	2300      	movs	r3, #0
 8010928:	4640      	mov	r0, r8
 801092a:	4649      	mov	r1, r9
 801092c:	f7f0 f8e6 	bl	8000afc <__aeabi_dcmplt>
 8010930:	b110      	cbz	r0, 8010938 <_printf_float+0x90>
 8010932:	232d      	movs	r3, #45	; 0x2d
 8010934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010938:	4b93      	ldr	r3, [pc, #588]	; (8010b88 <_printf_float+0x2e0>)
 801093a:	4894      	ldr	r0, [pc, #592]	; (8010b8c <_printf_float+0x2e4>)
 801093c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010940:	bf94      	ite	ls
 8010942:	4698      	movls	r8, r3
 8010944:	4680      	movhi	r8, r0
 8010946:	2303      	movs	r3, #3
 8010948:	6123      	str	r3, [r4, #16]
 801094a:	9b05      	ldr	r3, [sp, #20]
 801094c:	f023 0204 	bic.w	r2, r3, #4
 8010950:	6022      	str	r2, [r4, #0]
 8010952:	f04f 0900 	mov.w	r9, #0
 8010956:	9700      	str	r7, [sp, #0]
 8010958:	4633      	mov	r3, r6
 801095a:	aa0b      	add	r2, sp, #44	; 0x2c
 801095c:	4621      	mov	r1, r4
 801095e:	4628      	mov	r0, r5
 8010960:	f000 f9d8 	bl	8010d14 <_printf_common>
 8010964:	3001      	adds	r0, #1
 8010966:	f040 8090 	bne.w	8010a8a <_printf_float+0x1e2>
 801096a:	f04f 30ff 	mov.w	r0, #4294967295
 801096e:	b00d      	add	sp, #52	; 0x34
 8010970:	ecbd 8b02 	vpop	{d8}
 8010974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010978:	4642      	mov	r2, r8
 801097a:	464b      	mov	r3, r9
 801097c:	4640      	mov	r0, r8
 801097e:	4649      	mov	r1, r9
 8010980:	f7f0 f8e4 	bl	8000b4c <__aeabi_dcmpun>
 8010984:	b140      	cbz	r0, 8010998 <_printf_float+0xf0>
 8010986:	464b      	mov	r3, r9
 8010988:	2b00      	cmp	r3, #0
 801098a:	bfbc      	itt	lt
 801098c:	232d      	movlt	r3, #45	; 0x2d
 801098e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010992:	487f      	ldr	r0, [pc, #508]	; (8010b90 <_printf_float+0x2e8>)
 8010994:	4b7f      	ldr	r3, [pc, #508]	; (8010b94 <_printf_float+0x2ec>)
 8010996:	e7d1      	b.n	801093c <_printf_float+0x94>
 8010998:	6863      	ldr	r3, [r4, #4]
 801099a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801099e:	9206      	str	r2, [sp, #24]
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	d13f      	bne.n	8010a24 <_printf_float+0x17c>
 80109a4:	2306      	movs	r3, #6
 80109a6:	6063      	str	r3, [r4, #4]
 80109a8:	9b05      	ldr	r3, [sp, #20]
 80109aa:	6861      	ldr	r1, [r4, #4]
 80109ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80109b0:	2300      	movs	r3, #0
 80109b2:	9303      	str	r3, [sp, #12]
 80109b4:	ab0a      	add	r3, sp, #40	; 0x28
 80109b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80109ba:	ab09      	add	r3, sp, #36	; 0x24
 80109bc:	ec49 8b10 	vmov	d0, r8, r9
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	6022      	str	r2, [r4, #0]
 80109c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80109c8:	4628      	mov	r0, r5
 80109ca:	f7ff fecd 	bl	8010768 <__cvt>
 80109ce:	9b06      	ldr	r3, [sp, #24]
 80109d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109d2:	2b47      	cmp	r3, #71	; 0x47
 80109d4:	4680      	mov	r8, r0
 80109d6:	d108      	bne.n	80109ea <_printf_float+0x142>
 80109d8:	1cc8      	adds	r0, r1, #3
 80109da:	db02      	blt.n	80109e2 <_printf_float+0x13a>
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	4299      	cmp	r1, r3
 80109e0:	dd41      	ble.n	8010a66 <_printf_float+0x1be>
 80109e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80109e6:	fa5f fb8b 	uxtb.w	fp, fp
 80109ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80109ee:	d820      	bhi.n	8010a32 <_printf_float+0x18a>
 80109f0:	3901      	subs	r1, #1
 80109f2:	465a      	mov	r2, fp
 80109f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80109f8:	9109      	str	r1, [sp, #36]	; 0x24
 80109fa:	f7ff ff17 	bl	801082c <__exponent>
 80109fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a00:	1813      	adds	r3, r2, r0
 8010a02:	2a01      	cmp	r2, #1
 8010a04:	4681      	mov	r9, r0
 8010a06:	6123      	str	r3, [r4, #16]
 8010a08:	dc02      	bgt.n	8010a10 <_printf_float+0x168>
 8010a0a:	6822      	ldr	r2, [r4, #0]
 8010a0c:	07d2      	lsls	r2, r2, #31
 8010a0e:	d501      	bpl.n	8010a14 <_printf_float+0x16c>
 8010a10:	3301      	adds	r3, #1
 8010a12:	6123      	str	r3, [r4, #16]
 8010a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d09c      	beq.n	8010956 <_printf_float+0xae>
 8010a1c:	232d      	movs	r3, #45	; 0x2d
 8010a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a22:	e798      	b.n	8010956 <_printf_float+0xae>
 8010a24:	9a06      	ldr	r2, [sp, #24]
 8010a26:	2a47      	cmp	r2, #71	; 0x47
 8010a28:	d1be      	bne.n	80109a8 <_printf_float+0x100>
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d1bc      	bne.n	80109a8 <_printf_float+0x100>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e7b9      	b.n	80109a6 <_printf_float+0xfe>
 8010a32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010a36:	d118      	bne.n	8010a6a <_printf_float+0x1c2>
 8010a38:	2900      	cmp	r1, #0
 8010a3a:	6863      	ldr	r3, [r4, #4]
 8010a3c:	dd0b      	ble.n	8010a56 <_printf_float+0x1ae>
 8010a3e:	6121      	str	r1, [r4, #16]
 8010a40:	b913      	cbnz	r3, 8010a48 <_printf_float+0x1a0>
 8010a42:	6822      	ldr	r2, [r4, #0]
 8010a44:	07d0      	lsls	r0, r2, #31
 8010a46:	d502      	bpl.n	8010a4e <_printf_float+0x1a6>
 8010a48:	3301      	adds	r3, #1
 8010a4a:	440b      	add	r3, r1
 8010a4c:	6123      	str	r3, [r4, #16]
 8010a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010a50:	f04f 0900 	mov.w	r9, #0
 8010a54:	e7de      	b.n	8010a14 <_printf_float+0x16c>
 8010a56:	b913      	cbnz	r3, 8010a5e <_printf_float+0x1b6>
 8010a58:	6822      	ldr	r2, [r4, #0]
 8010a5a:	07d2      	lsls	r2, r2, #31
 8010a5c:	d501      	bpl.n	8010a62 <_printf_float+0x1ba>
 8010a5e:	3302      	adds	r3, #2
 8010a60:	e7f4      	b.n	8010a4c <_printf_float+0x1a4>
 8010a62:	2301      	movs	r3, #1
 8010a64:	e7f2      	b.n	8010a4c <_printf_float+0x1a4>
 8010a66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a6c:	4299      	cmp	r1, r3
 8010a6e:	db05      	blt.n	8010a7c <_printf_float+0x1d4>
 8010a70:	6823      	ldr	r3, [r4, #0]
 8010a72:	6121      	str	r1, [r4, #16]
 8010a74:	07d8      	lsls	r0, r3, #31
 8010a76:	d5ea      	bpl.n	8010a4e <_printf_float+0x1a6>
 8010a78:	1c4b      	adds	r3, r1, #1
 8010a7a:	e7e7      	b.n	8010a4c <_printf_float+0x1a4>
 8010a7c:	2900      	cmp	r1, #0
 8010a7e:	bfd4      	ite	le
 8010a80:	f1c1 0202 	rsble	r2, r1, #2
 8010a84:	2201      	movgt	r2, #1
 8010a86:	4413      	add	r3, r2
 8010a88:	e7e0      	b.n	8010a4c <_printf_float+0x1a4>
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	055a      	lsls	r2, r3, #21
 8010a8e:	d407      	bmi.n	8010aa0 <_printf_float+0x1f8>
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	4642      	mov	r2, r8
 8010a94:	4631      	mov	r1, r6
 8010a96:	4628      	mov	r0, r5
 8010a98:	47b8      	blx	r7
 8010a9a:	3001      	adds	r0, #1
 8010a9c:	d12c      	bne.n	8010af8 <_printf_float+0x250>
 8010a9e:	e764      	b.n	801096a <_printf_float+0xc2>
 8010aa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010aa4:	f240 80e0 	bls.w	8010c68 <_printf_float+0x3c0>
 8010aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010aac:	2200      	movs	r2, #0
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f7f0 f81a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d034      	beq.n	8010b22 <_printf_float+0x27a>
 8010ab8:	4a37      	ldr	r2, [pc, #220]	; (8010b98 <_printf_float+0x2f0>)
 8010aba:	2301      	movs	r3, #1
 8010abc:	4631      	mov	r1, r6
 8010abe:	4628      	mov	r0, r5
 8010ac0:	47b8      	blx	r7
 8010ac2:	3001      	adds	r0, #1
 8010ac4:	f43f af51 	beq.w	801096a <_printf_float+0xc2>
 8010ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010acc:	429a      	cmp	r2, r3
 8010ace:	db02      	blt.n	8010ad6 <_printf_float+0x22e>
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	07d8      	lsls	r0, r3, #31
 8010ad4:	d510      	bpl.n	8010af8 <_printf_float+0x250>
 8010ad6:	ee18 3a10 	vmov	r3, s16
 8010ada:	4652      	mov	r2, sl
 8010adc:	4631      	mov	r1, r6
 8010ade:	4628      	mov	r0, r5
 8010ae0:	47b8      	blx	r7
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	f43f af41 	beq.w	801096a <_printf_float+0xc2>
 8010ae8:	f04f 0800 	mov.w	r8, #0
 8010aec:	f104 091a 	add.w	r9, r4, #26
 8010af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af2:	3b01      	subs	r3, #1
 8010af4:	4543      	cmp	r3, r8
 8010af6:	dc09      	bgt.n	8010b0c <_printf_float+0x264>
 8010af8:	6823      	ldr	r3, [r4, #0]
 8010afa:	079b      	lsls	r3, r3, #30
 8010afc:	f100 8105 	bmi.w	8010d0a <_printf_float+0x462>
 8010b00:	68e0      	ldr	r0, [r4, #12]
 8010b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b04:	4298      	cmp	r0, r3
 8010b06:	bfb8      	it	lt
 8010b08:	4618      	movlt	r0, r3
 8010b0a:	e730      	b.n	801096e <_printf_float+0xc6>
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	464a      	mov	r2, r9
 8010b10:	4631      	mov	r1, r6
 8010b12:	4628      	mov	r0, r5
 8010b14:	47b8      	blx	r7
 8010b16:	3001      	adds	r0, #1
 8010b18:	f43f af27 	beq.w	801096a <_printf_float+0xc2>
 8010b1c:	f108 0801 	add.w	r8, r8, #1
 8010b20:	e7e6      	b.n	8010af0 <_printf_float+0x248>
 8010b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	dc39      	bgt.n	8010b9c <_printf_float+0x2f4>
 8010b28:	4a1b      	ldr	r2, [pc, #108]	; (8010b98 <_printf_float+0x2f0>)
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	4631      	mov	r1, r6
 8010b2e:	4628      	mov	r0, r5
 8010b30:	47b8      	blx	r7
 8010b32:	3001      	adds	r0, #1
 8010b34:	f43f af19 	beq.w	801096a <_printf_float+0xc2>
 8010b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	d102      	bne.n	8010b46 <_printf_float+0x29e>
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	07d9      	lsls	r1, r3, #31
 8010b44:	d5d8      	bpl.n	8010af8 <_printf_float+0x250>
 8010b46:	ee18 3a10 	vmov	r3, s16
 8010b4a:	4652      	mov	r2, sl
 8010b4c:	4631      	mov	r1, r6
 8010b4e:	4628      	mov	r0, r5
 8010b50:	47b8      	blx	r7
 8010b52:	3001      	adds	r0, #1
 8010b54:	f43f af09 	beq.w	801096a <_printf_float+0xc2>
 8010b58:	f04f 0900 	mov.w	r9, #0
 8010b5c:	f104 0a1a 	add.w	sl, r4, #26
 8010b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b62:	425b      	negs	r3, r3
 8010b64:	454b      	cmp	r3, r9
 8010b66:	dc01      	bgt.n	8010b6c <_printf_float+0x2c4>
 8010b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b6a:	e792      	b.n	8010a92 <_printf_float+0x1ea>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	4652      	mov	r2, sl
 8010b70:	4631      	mov	r1, r6
 8010b72:	4628      	mov	r0, r5
 8010b74:	47b8      	blx	r7
 8010b76:	3001      	adds	r0, #1
 8010b78:	f43f aef7 	beq.w	801096a <_printf_float+0xc2>
 8010b7c:	f109 0901 	add.w	r9, r9, #1
 8010b80:	e7ee      	b.n	8010b60 <_printf_float+0x2b8>
 8010b82:	bf00      	nop
 8010b84:	7fefffff 	.word	0x7fefffff
 8010b88:	080145b8 	.word	0x080145b8
 8010b8c:	080145bc 	.word	0x080145bc
 8010b90:	080145c4 	.word	0x080145c4
 8010b94:	080145c0 	.word	0x080145c0
 8010b98:	080149e1 	.word	0x080149e1
 8010b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	bfa8      	it	ge
 8010ba4:	461a      	movge	r2, r3
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	4691      	mov	r9, r2
 8010baa:	dc37      	bgt.n	8010c1c <_printf_float+0x374>
 8010bac:	f04f 0b00 	mov.w	fp, #0
 8010bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bb4:	f104 021a 	add.w	r2, r4, #26
 8010bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010bba:	9305      	str	r3, [sp, #20]
 8010bbc:	eba3 0309 	sub.w	r3, r3, r9
 8010bc0:	455b      	cmp	r3, fp
 8010bc2:	dc33      	bgt.n	8010c2c <_printf_float+0x384>
 8010bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	db3b      	blt.n	8010c44 <_printf_float+0x39c>
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	07da      	lsls	r2, r3, #31
 8010bd0:	d438      	bmi.n	8010c44 <_printf_float+0x39c>
 8010bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bd4:	9a05      	ldr	r2, [sp, #20]
 8010bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010bd8:	1a9a      	subs	r2, r3, r2
 8010bda:	eba3 0901 	sub.w	r9, r3, r1
 8010bde:	4591      	cmp	r9, r2
 8010be0:	bfa8      	it	ge
 8010be2:	4691      	movge	r9, r2
 8010be4:	f1b9 0f00 	cmp.w	r9, #0
 8010be8:	dc35      	bgt.n	8010c56 <_printf_float+0x3ae>
 8010bea:	f04f 0800 	mov.w	r8, #0
 8010bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010bf2:	f104 0a1a 	add.w	sl, r4, #26
 8010bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bfa:	1a9b      	subs	r3, r3, r2
 8010bfc:	eba3 0309 	sub.w	r3, r3, r9
 8010c00:	4543      	cmp	r3, r8
 8010c02:	f77f af79 	ble.w	8010af8 <_printf_float+0x250>
 8010c06:	2301      	movs	r3, #1
 8010c08:	4652      	mov	r2, sl
 8010c0a:	4631      	mov	r1, r6
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	47b8      	blx	r7
 8010c10:	3001      	adds	r0, #1
 8010c12:	f43f aeaa 	beq.w	801096a <_printf_float+0xc2>
 8010c16:	f108 0801 	add.w	r8, r8, #1
 8010c1a:	e7ec      	b.n	8010bf6 <_printf_float+0x34e>
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	4631      	mov	r1, r6
 8010c20:	4642      	mov	r2, r8
 8010c22:	4628      	mov	r0, r5
 8010c24:	47b8      	blx	r7
 8010c26:	3001      	adds	r0, #1
 8010c28:	d1c0      	bne.n	8010bac <_printf_float+0x304>
 8010c2a:	e69e      	b.n	801096a <_printf_float+0xc2>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	4631      	mov	r1, r6
 8010c30:	4628      	mov	r0, r5
 8010c32:	9205      	str	r2, [sp, #20]
 8010c34:	47b8      	blx	r7
 8010c36:	3001      	adds	r0, #1
 8010c38:	f43f ae97 	beq.w	801096a <_printf_float+0xc2>
 8010c3c:	9a05      	ldr	r2, [sp, #20]
 8010c3e:	f10b 0b01 	add.w	fp, fp, #1
 8010c42:	e7b9      	b.n	8010bb8 <_printf_float+0x310>
 8010c44:	ee18 3a10 	vmov	r3, s16
 8010c48:	4652      	mov	r2, sl
 8010c4a:	4631      	mov	r1, r6
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	47b8      	blx	r7
 8010c50:	3001      	adds	r0, #1
 8010c52:	d1be      	bne.n	8010bd2 <_printf_float+0x32a>
 8010c54:	e689      	b.n	801096a <_printf_float+0xc2>
 8010c56:	9a05      	ldr	r2, [sp, #20]
 8010c58:	464b      	mov	r3, r9
 8010c5a:	4442      	add	r2, r8
 8010c5c:	4631      	mov	r1, r6
 8010c5e:	4628      	mov	r0, r5
 8010c60:	47b8      	blx	r7
 8010c62:	3001      	adds	r0, #1
 8010c64:	d1c1      	bne.n	8010bea <_printf_float+0x342>
 8010c66:	e680      	b.n	801096a <_printf_float+0xc2>
 8010c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c6a:	2a01      	cmp	r2, #1
 8010c6c:	dc01      	bgt.n	8010c72 <_printf_float+0x3ca>
 8010c6e:	07db      	lsls	r3, r3, #31
 8010c70:	d538      	bpl.n	8010ce4 <_printf_float+0x43c>
 8010c72:	2301      	movs	r3, #1
 8010c74:	4642      	mov	r2, r8
 8010c76:	4631      	mov	r1, r6
 8010c78:	4628      	mov	r0, r5
 8010c7a:	47b8      	blx	r7
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	f43f ae74 	beq.w	801096a <_printf_float+0xc2>
 8010c82:	ee18 3a10 	vmov	r3, s16
 8010c86:	4652      	mov	r2, sl
 8010c88:	4631      	mov	r1, r6
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	47b8      	blx	r7
 8010c8e:	3001      	adds	r0, #1
 8010c90:	f43f ae6b 	beq.w	801096a <_printf_float+0xc2>
 8010c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c98:	2200      	movs	r2, #0
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	f7ef ff24 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ca0:	b9d8      	cbnz	r0, 8010cda <_printf_float+0x432>
 8010ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ca4:	f108 0201 	add.w	r2, r8, #1
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	4631      	mov	r1, r6
 8010cac:	4628      	mov	r0, r5
 8010cae:	47b8      	blx	r7
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d10e      	bne.n	8010cd2 <_printf_float+0x42a>
 8010cb4:	e659      	b.n	801096a <_printf_float+0xc2>
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	4652      	mov	r2, sl
 8010cba:	4631      	mov	r1, r6
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	47b8      	blx	r7
 8010cc0:	3001      	adds	r0, #1
 8010cc2:	f43f ae52 	beq.w	801096a <_printf_float+0xc2>
 8010cc6:	f108 0801 	add.w	r8, r8, #1
 8010cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	4543      	cmp	r3, r8
 8010cd0:	dcf1      	bgt.n	8010cb6 <_printf_float+0x40e>
 8010cd2:	464b      	mov	r3, r9
 8010cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010cd8:	e6dc      	b.n	8010a94 <_printf_float+0x1ec>
 8010cda:	f04f 0800 	mov.w	r8, #0
 8010cde:	f104 0a1a 	add.w	sl, r4, #26
 8010ce2:	e7f2      	b.n	8010cca <_printf_float+0x422>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	4642      	mov	r2, r8
 8010ce8:	e7df      	b.n	8010caa <_printf_float+0x402>
 8010cea:	2301      	movs	r3, #1
 8010cec:	464a      	mov	r2, r9
 8010cee:	4631      	mov	r1, r6
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	47b8      	blx	r7
 8010cf4:	3001      	adds	r0, #1
 8010cf6:	f43f ae38 	beq.w	801096a <_printf_float+0xc2>
 8010cfa:	f108 0801 	add.w	r8, r8, #1
 8010cfe:	68e3      	ldr	r3, [r4, #12]
 8010d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010d02:	1a5b      	subs	r3, r3, r1
 8010d04:	4543      	cmp	r3, r8
 8010d06:	dcf0      	bgt.n	8010cea <_printf_float+0x442>
 8010d08:	e6fa      	b.n	8010b00 <_printf_float+0x258>
 8010d0a:	f04f 0800 	mov.w	r8, #0
 8010d0e:	f104 0919 	add.w	r9, r4, #25
 8010d12:	e7f4      	b.n	8010cfe <_printf_float+0x456>

08010d14 <_printf_common>:
 8010d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	4616      	mov	r6, r2
 8010d1a:	4699      	mov	r9, r3
 8010d1c:	688a      	ldr	r2, [r1, #8]
 8010d1e:	690b      	ldr	r3, [r1, #16]
 8010d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d24:	4293      	cmp	r3, r2
 8010d26:	bfb8      	it	lt
 8010d28:	4613      	movlt	r3, r2
 8010d2a:	6033      	str	r3, [r6, #0]
 8010d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d30:	4607      	mov	r7, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b10a      	cbz	r2, 8010d3a <_printf_common+0x26>
 8010d36:	3301      	adds	r3, #1
 8010d38:	6033      	str	r3, [r6, #0]
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	0699      	lsls	r1, r3, #26
 8010d3e:	bf42      	ittt	mi
 8010d40:	6833      	ldrmi	r3, [r6, #0]
 8010d42:	3302      	addmi	r3, #2
 8010d44:	6033      	strmi	r3, [r6, #0]
 8010d46:	6825      	ldr	r5, [r4, #0]
 8010d48:	f015 0506 	ands.w	r5, r5, #6
 8010d4c:	d106      	bne.n	8010d5c <_printf_common+0x48>
 8010d4e:	f104 0a19 	add.w	sl, r4, #25
 8010d52:	68e3      	ldr	r3, [r4, #12]
 8010d54:	6832      	ldr	r2, [r6, #0]
 8010d56:	1a9b      	subs	r3, r3, r2
 8010d58:	42ab      	cmp	r3, r5
 8010d5a:	dc26      	bgt.n	8010daa <_printf_common+0x96>
 8010d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d60:	1e13      	subs	r3, r2, #0
 8010d62:	6822      	ldr	r2, [r4, #0]
 8010d64:	bf18      	it	ne
 8010d66:	2301      	movne	r3, #1
 8010d68:	0692      	lsls	r2, r2, #26
 8010d6a:	d42b      	bmi.n	8010dc4 <_printf_common+0xb0>
 8010d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d70:	4649      	mov	r1, r9
 8010d72:	4638      	mov	r0, r7
 8010d74:	47c0      	blx	r8
 8010d76:	3001      	adds	r0, #1
 8010d78:	d01e      	beq.n	8010db8 <_printf_common+0xa4>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	68e5      	ldr	r5, [r4, #12]
 8010d7e:	6832      	ldr	r2, [r6, #0]
 8010d80:	f003 0306 	and.w	r3, r3, #6
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	bf08      	it	eq
 8010d88:	1aad      	subeq	r5, r5, r2
 8010d8a:	68a3      	ldr	r3, [r4, #8]
 8010d8c:	6922      	ldr	r2, [r4, #16]
 8010d8e:	bf0c      	ite	eq
 8010d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d94:	2500      	movne	r5, #0
 8010d96:	4293      	cmp	r3, r2
 8010d98:	bfc4      	itt	gt
 8010d9a:	1a9b      	subgt	r3, r3, r2
 8010d9c:	18ed      	addgt	r5, r5, r3
 8010d9e:	2600      	movs	r6, #0
 8010da0:	341a      	adds	r4, #26
 8010da2:	42b5      	cmp	r5, r6
 8010da4:	d11a      	bne.n	8010ddc <_printf_common+0xc8>
 8010da6:	2000      	movs	r0, #0
 8010da8:	e008      	b.n	8010dbc <_printf_common+0xa8>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4649      	mov	r1, r9
 8010db0:	4638      	mov	r0, r7
 8010db2:	47c0      	blx	r8
 8010db4:	3001      	adds	r0, #1
 8010db6:	d103      	bne.n	8010dc0 <_printf_common+0xac>
 8010db8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc0:	3501      	adds	r5, #1
 8010dc2:	e7c6      	b.n	8010d52 <_printf_common+0x3e>
 8010dc4:	18e1      	adds	r1, r4, r3
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	2030      	movs	r0, #48	; 0x30
 8010dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dce:	4422      	add	r2, r4
 8010dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dd8:	3302      	adds	r3, #2
 8010dda:	e7c7      	b.n	8010d6c <_printf_common+0x58>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	4622      	mov	r2, r4
 8010de0:	4649      	mov	r1, r9
 8010de2:	4638      	mov	r0, r7
 8010de4:	47c0      	blx	r8
 8010de6:	3001      	adds	r0, #1
 8010de8:	d0e6      	beq.n	8010db8 <_printf_common+0xa4>
 8010dea:	3601      	adds	r6, #1
 8010dec:	e7d9      	b.n	8010da2 <_printf_common+0x8e>
	...

08010df0 <_printf_i>:
 8010df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010df4:	7e0f      	ldrb	r7, [r1, #24]
 8010df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df8:	2f78      	cmp	r7, #120	; 0x78
 8010dfa:	4691      	mov	r9, r2
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	460c      	mov	r4, r1
 8010e00:	469a      	mov	sl, r3
 8010e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010e06:	d807      	bhi.n	8010e18 <_printf_i+0x28>
 8010e08:	2f62      	cmp	r7, #98	; 0x62
 8010e0a:	d80a      	bhi.n	8010e22 <_printf_i+0x32>
 8010e0c:	2f00      	cmp	r7, #0
 8010e0e:	f000 80d8 	beq.w	8010fc2 <_printf_i+0x1d2>
 8010e12:	2f58      	cmp	r7, #88	; 0x58
 8010e14:	f000 80a3 	beq.w	8010f5e <_printf_i+0x16e>
 8010e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e20:	e03a      	b.n	8010e98 <_printf_i+0xa8>
 8010e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e26:	2b15      	cmp	r3, #21
 8010e28:	d8f6      	bhi.n	8010e18 <_printf_i+0x28>
 8010e2a:	a101      	add	r1, pc, #4	; (adr r1, 8010e30 <_printf_i+0x40>)
 8010e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e30:	08010e89 	.word	0x08010e89
 8010e34:	08010e9d 	.word	0x08010e9d
 8010e38:	08010e19 	.word	0x08010e19
 8010e3c:	08010e19 	.word	0x08010e19
 8010e40:	08010e19 	.word	0x08010e19
 8010e44:	08010e19 	.word	0x08010e19
 8010e48:	08010e9d 	.word	0x08010e9d
 8010e4c:	08010e19 	.word	0x08010e19
 8010e50:	08010e19 	.word	0x08010e19
 8010e54:	08010e19 	.word	0x08010e19
 8010e58:	08010e19 	.word	0x08010e19
 8010e5c:	08010fa9 	.word	0x08010fa9
 8010e60:	08010ecd 	.word	0x08010ecd
 8010e64:	08010f8b 	.word	0x08010f8b
 8010e68:	08010e19 	.word	0x08010e19
 8010e6c:	08010e19 	.word	0x08010e19
 8010e70:	08010fcb 	.word	0x08010fcb
 8010e74:	08010e19 	.word	0x08010e19
 8010e78:	08010ecd 	.word	0x08010ecd
 8010e7c:	08010e19 	.word	0x08010e19
 8010e80:	08010e19 	.word	0x08010e19
 8010e84:	08010f93 	.word	0x08010f93
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	1d1a      	adds	r2, r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	602a      	str	r2, [r5, #0]
 8010e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e98:	2301      	movs	r3, #1
 8010e9a:	e0a3      	b.n	8010fe4 <_printf_i+0x1f4>
 8010e9c:	6820      	ldr	r0, [r4, #0]
 8010e9e:	6829      	ldr	r1, [r5, #0]
 8010ea0:	0606      	lsls	r6, r0, #24
 8010ea2:	f101 0304 	add.w	r3, r1, #4
 8010ea6:	d50a      	bpl.n	8010ebe <_printf_i+0xce>
 8010ea8:	680e      	ldr	r6, [r1, #0]
 8010eaa:	602b      	str	r3, [r5, #0]
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	da03      	bge.n	8010eb8 <_printf_i+0xc8>
 8010eb0:	232d      	movs	r3, #45	; 0x2d
 8010eb2:	4276      	negs	r6, r6
 8010eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eb8:	485e      	ldr	r0, [pc, #376]	; (8011034 <_printf_i+0x244>)
 8010eba:	230a      	movs	r3, #10
 8010ebc:	e019      	b.n	8010ef2 <_printf_i+0x102>
 8010ebe:	680e      	ldr	r6, [r1, #0]
 8010ec0:	602b      	str	r3, [r5, #0]
 8010ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ec6:	bf18      	it	ne
 8010ec8:	b236      	sxthne	r6, r6
 8010eca:	e7ef      	b.n	8010eac <_printf_i+0xbc>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	6820      	ldr	r0, [r4, #0]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	6029      	str	r1, [r5, #0]
 8010ed4:	0601      	lsls	r1, r0, #24
 8010ed6:	d501      	bpl.n	8010edc <_printf_i+0xec>
 8010ed8:	681e      	ldr	r6, [r3, #0]
 8010eda:	e002      	b.n	8010ee2 <_printf_i+0xf2>
 8010edc:	0646      	lsls	r6, r0, #25
 8010ede:	d5fb      	bpl.n	8010ed8 <_printf_i+0xe8>
 8010ee0:	881e      	ldrh	r6, [r3, #0]
 8010ee2:	4854      	ldr	r0, [pc, #336]	; (8011034 <_printf_i+0x244>)
 8010ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8010ee6:	bf0c      	ite	eq
 8010ee8:	2308      	moveq	r3, #8
 8010eea:	230a      	movne	r3, #10
 8010eec:	2100      	movs	r1, #0
 8010eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ef2:	6865      	ldr	r5, [r4, #4]
 8010ef4:	60a5      	str	r5, [r4, #8]
 8010ef6:	2d00      	cmp	r5, #0
 8010ef8:	bfa2      	ittt	ge
 8010efa:	6821      	ldrge	r1, [r4, #0]
 8010efc:	f021 0104 	bicge.w	r1, r1, #4
 8010f00:	6021      	strge	r1, [r4, #0]
 8010f02:	b90e      	cbnz	r6, 8010f08 <_printf_i+0x118>
 8010f04:	2d00      	cmp	r5, #0
 8010f06:	d04d      	beq.n	8010fa4 <_printf_i+0x1b4>
 8010f08:	4615      	mov	r5, r2
 8010f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8010f12:	5dc7      	ldrb	r7, [r0, r7]
 8010f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f18:	4637      	mov	r7, r6
 8010f1a:	42bb      	cmp	r3, r7
 8010f1c:	460e      	mov	r6, r1
 8010f1e:	d9f4      	bls.n	8010f0a <_printf_i+0x11a>
 8010f20:	2b08      	cmp	r3, #8
 8010f22:	d10b      	bne.n	8010f3c <_printf_i+0x14c>
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	07de      	lsls	r6, r3, #31
 8010f28:	d508      	bpl.n	8010f3c <_printf_i+0x14c>
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6861      	ldr	r1, [r4, #4]
 8010f2e:	4299      	cmp	r1, r3
 8010f30:	bfde      	ittt	le
 8010f32:	2330      	movle	r3, #48	; 0x30
 8010f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f3c:	1b52      	subs	r2, r2, r5
 8010f3e:	6122      	str	r2, [r4, #16]
 8010f40:	f8cd a000 	str.w	sl, [sp]
 8010f44:	464b      	mov	r3, r9
 8010f46:	aa03      	add	r2, sp, #12
 8010f48:	4621      	mov	r1, r4
 8010f4a:	4640      	mov	r0, r8
 8010f4c:	f7ff fee2 	bl	8010d14 <_printf_common>
 8010f50:	3001      	adds	r0, #1
 8010f52:	d14c      	bne.n	8010fee <_printf_i+0x1fe>
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	b004      	add	sp, #16
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	4835      	ldr	r0, [pc, #212]	; (8011034 <_printf_i+0x244>)
 8010f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f64:	6829      	ldr	r1, [r5, #0]
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f6c:	6029      	str	r1, [r5, #0]
 8010f6e:	061d      	lsls	r5, r3, #24
 8010f70:	d514      	bpl.n	8010f9c <_printf_i+0x1ac>
 8010f72:	07df      	lsls	r7, r3, #31
 8010f74:	bf44      	itt	mi
 8010f76:	f043 0320 	orrmi.w	r3, r3, #32
 8010f7a:	6023      	strmi	r3, [r4, #0]
 8010f7c:	b91e      	cbnz	r6, 8010f86 <_printf_i+0x196>
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	f023 0320 	bic.w	r3, r3, #32
 8010f84:	6023      	str	r3, [r4, #0]
 8010f86:	2310      	movs	r3, #16
 8010f88:	e7b0      	b.n	8010eec <_printf_i+0xfc>
 8010f8a:	6823      	ldr	r3, [r4, #0]
 8010f8c:	f043 0320 	orr.w	r3, r3, #32
 8010f90:	6023      	str	r3, [r4, #0]
 8010f92:	2378      	movs	r3, #120	; 0x78
 8010f94:	4828      	ldr	r0, [pc, #160]	; (8011038 <_printf_i+0x248>)
 8010f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f9a:	e7e3      	b.n	8010f64 <_printf_i+0x174>
 8010f9c:	0659      	lsls	r1, r3, #25
 8010f9e:	bf48      	it	mi
 8010fa0:	b2b6      	uxthmi	r6, r6
 8010fa2:	e7e6      	b.n	8010f72 <_printf_i+0x182>
 8010fa4:	4615      	mov	r5, r2
 8010fa6:	e7bb      	b.n	8010f20 <_printf_i+0x130>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	6826      	ldr	r6, [r4, #0]
 8010fac:	6961      	ldr	r1, [r4, #20]
 8010fae:	1d18      	adds	r0, r3, #4
 8010fb0:	6028      	str	r0, [r5, #0]
 8010fb2:	0635      	lsls	r5, r6, #24
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	d501      	bpl.n	8010fbc <_printf_i+0x1cc>
 8010fb8:	6019      	str	r1, [r3, #0]
 8010fba:	e002      	b.n	8010fc2 <_printf_i+0x1d2>
 8010fbc:	0670      	lsls	r0, r6, #25
 8010fbe:	d5fb      	bpl.n	8010fb8 <_printf_i+0x1c8>
 8010fc0:	8019      	strh	r1, [r3, #0]
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	4615      	mov	r5, r2
 8010fc8:	e7ba      	b.n	8010f40 <_printf_i+0x150>
 8010fca:	682b      	ldr	r3, [r5, #0]
 8010fcc:	1d1a      	adds	r2, r3, #4
 8010fce:	602a      	str	r2, [r5, #0]
 8010fd0:	681d      	ldr	r5, [r3, #0]
 8010fd2:	6862      	ldr	r2, [r4, #4]
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	f7ef f912 	bl	8000200 <memchr>
 8010fdc:	b108      	cbz	r0, 8010fe2 <_printf_i+0x1f2>
 8010fde:	1b40      	subs	r0, r0, r5
 8010fe0:	6060      	str	r0, [r4, #4]
 8010fe2:	6863      	ldr	r3, [r4, #4]
 8010fe4:	6123      	str	r3, [r4, #16]
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fec:	e7a8      	b.n	8010f40 <_printf_i+0x150>
 8010fee:	6923      	ldr	r3, [r4, #16]
 8010ff0:	462a      	mov	r2, r5
 8010ff2:	4649      	mov	r1, r9
 8010ff4:	4640      	mov	r0, r8
 8010ff6:	47d0      	blx	sl
 8010ff8:	3001      	adds	r0, #1
 8010ffa:	d0ab      	beq.n	8010f54 <_printf_i+0x164>
 8010ffc:	6823      	ldr	r3, [r4, #0]
 8010ffe:	079b      	lsls	r3, r3, #30
 8011000:	d413      	bmi.n	801102a <_printf_i+0x23a>
 8011002:	68e0      	ldr	r0, [r4, #12]
 8011004:	9b03      	ldr	r3, [sp, #12]
 8011006:	4298      	cmp	r0, r3
 8011008:	bfb8      	it	lt
 801100a:	4618      	movlt	r0, r3
 801100c:	e7a4      	b.n	8010f58 <_printf_i+0x168>
 801100e:	2301      	movs	r3, #1
 8011010:	4632      	mov	r2, r6
 8011012:	4649      	mov	r1, r9
 8011014:	4640      	mov	r0, r8
 8011016:	47d0      	blx	sl
 8011018:	3001      	adds	r0, #1
 801101a:	d09b      	beq.n	8010f54 <_printf_i+0x164>
 801101c:	3501      	adds	r5, #1
 801101e:	68e3      	ldr	r3, [r4, #12]
 8011020:	9903      	ldr	r1, [sp, #12]
 8011022:	1a5b      	subs	r3, r3, r1
 8011024:	42ab      	cmp	r3, r5
 8011026:	dcf2      	bgt.n	801100e <_printf_i+0x21e>
 8011028:	e7eb      	b.n	8011002 <_printf_i+0x212>
 801102a:	2500      	movs	r5, #0
 801102c:	f104 0619 	add.w	r6, r4, #25
 8011030:	e7f5      	b.n	801101e <_printf_i+0x22e>
 8011032:	bf00      	nop
 8011034:	080145c8 	.word	0x080145c8
 8011038:	080145d9 	.word	0x080145d9

0801103c <iprintf>:
 801103c:	b40f      	push	{r0, r1, r2, r3}
 801103e:	4b0a      	ldr	r3, [pc, #40]	; (8011068 <iprintf+0x2c>)
 8011040:	b513      	push	{r0, r1, r4, lr}
 8011042:	681c      	ldr	r4, [r3, #0]
 8011044:	b124      	cbz	r4, 8011050 <iprintf+0x14>
 8011046:	69a3      	ldr	r3, [r4, #24]
 8011048:	b913      	cbnz	r3, 8011050 <iprintf+0x14>
 801104a:	4620      	mov	r0, r4
 801104c:	f001 faf0 	bl	8012630 <__sinit>
 8011050:	ab05      	add	r3, sp, #20
 8011052:	9a04      	ldr	r2, [sp, #16]
 8011054:	68a1      	ldr	r1, [r4, #8]
 8011056:	9301      	str	r3, [sp, #4]
 8011058:	4620      	mov	r0, r4
 801105a:	f002 fb17 	bl	801368c <_vfiprintf_r>
 801105e:	b002      	add	sp, #8
 8011060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011064:	b004      	add	sp, #16
 8011066:	4770      	bx	lr
 8011068:	20000054 	.word	0x20000054

0801106c <_puts_r>:
 801106c:	b570      	push	{r4, r5, r6, lr}
 801106e:	460e      	mov	r6, r1
 8011070:	4605      	mov	r5, r0
 8011072:	b118      	cbz	r0, 801107c <_puts_r+0x10>
 8011074:	6983      	ldr	r3, [r0, #24]
 8011076:	b90b      	cbnz	r3, 801107c <_puts_r+0x10>
 8011078:	f001 fada 	bl	8012630 <__sinit>
 801107c:	69ab      	ldr	r3, [r5, #24]
 801107e:	68ac      	ldr	r4, [r5, #8]
 8011080:	b913      	cbnz	r3, 8011088 <_puts_r+0x1c>
 8011082:	4628      	mov	r0, r5
 8011084:	f001 fad4 	bl	8012630 <__sinit>
 8011088:	4b2c      	ldr	r3, [pc, #176]	; (801113c <_puts_r+0xd0>)
 801108a:	429c      	cmp	r4, r3
 801108c:	d120      	bne.n	80110d0 <_puts_r+0x64>
 801108e:	686c      	ldr	r4, [r5, #4]
 8011090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011092:	07db      	lsls	r3, r3, #31
 8011094:	d405      	bmi.n	80110a2 <_puts_r+0x36>
 8011096:	89a3      	ldrh	r3, [r4, #12]
 8011098:	0598      	lsls	r0, r3, #22
 801109a:	d402      	bmi.n	80110a2 <_puts_r+0x36>
 801109c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801109e:	f001 fb7c 	bl	801279a <__retarget_lock_acquire_recursive>
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	0719      	lsls	r1, r3, #28
 80110a6:	d51d      	bpl.n	80110e4 <_puts_r+0x78>
 80110a8:	6923      	ldr	r3, [r4, #16]
 80110aa:	b1db      	cbz	r3, 80110e4 <_puts_r+0x78>
 80110ac:	3e01      	subs	r6, #1
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80110b4:	3b01      	subs	r3, #1
 80110b6:	60a3      	str	r3, [r4, #8]
 80110b8:	bb39      	cbnz	r1, 801110a <_puts_r+0x9e>
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	da38      	bge.n	8011130 <_puts_r+0xc4>
 80110be:	4622      	mov	r2, r4
 80110c0:	210a      	movs	r1, #10
 80110c2:	4628      	mov	r0, r5
 80110c4:	f000 fa20 	bl	8011508 <__swbuf_r>
 80110c8:	3001      	adds	r0, #1
 80110ca:	d011      	beq.n	80110f0 <_puts_r+0x84>
 80110cc:	250a      	movs	r5, #10
 80110ce:	e011      	b.n	80110f4 <_puts_r+0x88>
 80110d0:	4b1b      	ldr	r3, [pc, #108]	; (8011140 <_puts_r+0xd4>)
 80110d2:	429c      	cmp	r4, r3
 80110d4:	d101      	bne.n	80110da <_puts_r+0x6e>
 80110d6:	68ac      	ldr	r4, [r5, #8]
 80110d8:	e7da      	b.n	8011090 <_puts_r+0x24>
 80110da:	4b1a      	ldr	r3, [pc, #104]	; (8011144 <_puts_r+0xd8>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	bf08      	it	eq
 80110e0:	68ec      	ldreq	r4, [r5, #12]
 80110e2:	e7d5      	b.n	8011090 <_puts_r+0x24>
 80110e4:	4621      	mov	r1, r4
 80110e6:	4628      	mov	r0, r5
 80110e8:	f000 fa72 	bl	80115d0 <__swsetup_r>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d0dd      	beq.n	80110ac <_puts_r+0x40>
 80110f0:	f04f 35ff 	mov.w	r5, #4294967295
 80110f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110f6:	07da      	lsls	r2, r3, #31
 80110f8:	d405      	bmi.n	8011106 <_puts_r+0x9a>
 80110fa:	89a3      	ldrh	r3, [r4, #12]
 80110fc:	059b      	lsls	r3, r3, #22
 80110fe:	d402      	bmi.n	8011106 <_puts_r+0x9a>
 8011100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011102:	f001 fb4b 	bl	801279c <__retarget_lock_release_recursive>
 8011106:	4628      	mov	r0, r5
 8011108:	bd70      	pop	{r4, r5, r6, pc}
 801110a:	2b00      	cmp	r3, #0
 801110c:	da04      	bge.n	8011118 <_puts_r+0xac>
 801110e:	69a2      	ldr	r2, [r4, #24]
 8011110:	429a      	cmp	r2, r3
 8011112:	dc06      	bgt.n	8011122 <_puts_r+0xb6>
 8011114:	290a      	cmp	r1, #10
 8011116:	d004      	beq.n	8011122 <_puts_r+0xb6>
 8011118:	6823      	ldr	r3, [r4, #0]
 801111a:	1c5a      	adds	r2, r3, #1
 801111c:	6022      	str	r2, [r4, #0]
 801111e:	7019      	strb	r1, [r3, #0]
 8011120:	e7c5      	b.n	80110ae <_puts_r+0x42>
 8011122:	4622      	mov	r2, r4
 8011124:	4628      	mov	r0, r5
 8011126:	f000 f9ef 	bl	8011508 <__swbuf_r>
 801112a:	3001      	adds	r0, #1
 801112c:	d1bf      	bne.n	80110ae <_puts_r+0x42>
 801112e:	e7df      	b.n	80110f0 <_puts_r+0x84>
 8011130:	6823      	ldr	r3, [r4, #0]
 8011132:	250a      	movs	r5, #10
 8011134:	1c5a      	adds	r2, r3, #1
 8011136:	6022      	str	r2, [r4, #0]
 8011138:	701d      	strb	r5, [r3, #0]
 801113a:	e7db      	b.n	80110f4 <_puts_r+0x88>
 801113c:	08014834 	.word	0x08014834
 8011140:	08014854 	.word	0x08014854
 8011144:	08014814 	.word	0x08014814

08011148 <puts>:
 8011148:	4b02      	ldr	r3, [pc, #8]	; (8011154 <puts+0xc>)
 801114a:	4601      	mov	r1, r0
 801114c:	6818      	ldr	r0, [r3, #0]
 801114e:	f7ff bf8d 	b.w	801106c <_puts_r>
 8011152:	bf00      	nop
 8011154:	20000054 	.word	0x20000054

08011158 <_sbrk_r>:
 8011158:	b538      	push	{r3, r4, r5, lr}
 801115a:	4d06      	ldr	r5, [pc, #24]	; (8011174 <_sbrk_r+0x1c>)
 801115c:	2300      	movs	r3, #0
 801115e:	4604      	mov	r4, r0
 8011160:	4608      	mov	r0, r1
 8011162:	602b      	str	r3, [r5, #0]
 8011164:	f7f2 faf8 	bl	8003758 <_sbrk>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d102      	bne.n	8011172 <_sbrk_r+0x1a>
 801116c:	682b      	ldr	r3, [r5, #0]
 801116e:	b103      	cbz	r3, 8011172 <_sbrk_r+0x1a>
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	2000306c 	.word	0x2000306c

08011178 <_raise_r>:
 8011178:	291f      	cmp	r1, #31
 801117a:	b538      	push	{r3, r4, r5, lr}
 801117c:	4604      	mov	r4, r0
 801117e:	460d      	mov	r5, r1
 8011180:	d904      	bls.n	801118c <_raise_r+0x14>
 8011182:	2316      	movs	r3, #22
 8011184:	6003      	str	r3, [r0, #0]
 8011186:	f04f 30ff 	mov.w	r0, #4294967295
 801118a:	bd38      	pop	{r3, r4, r5, pc}
 801118c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801118e:	b112      	cbz	r2, 8011196 <_raise_r+0x1e>
 8011190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011194:	b94b      	cbnz	r3, 80111aa <_raise_r+0x32>
 8011196:	4620      	mov	r0, r4
 8011198:	f000 f830 	bl	80111fc <_getpid_r>
 801119c:	462a      	mov	r2, r5
 801119e:	4601      	mov	r1, r0
 80111a0:	4620      	mov	r0, r4
 80111a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111a6:	f000 b817 	b.w	80111d8 <_kill_r>
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d00a      	beq.n	80111c4 <_raise_r+0x4c>
 80111ae:	1c59      	adds	r1, r3, #1
 80111b0:	d103      	bne.n	80111ba <_raise_r+0x42>
 80111b2:	2316      	movs	r3, #22
 80111b4:	6003      	str	r3, [r0, #0]
 80111b6:	2001      	movs	r0, #1
 80111b8:	e7e7      	b.n	801118a <_raise_r+0x12>
 80111ba:	2400      	movs	r4, #0
 80111bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80111c0:	4628      	mov	r0, r5
 80111c2:	4798      	blx	r3
 80111c4:	2000      	movs	r0, #0
 80111c6:	e7e0      	b.n	801118a <_raise_r+0x12>

080111c8 <raise>:
 80111c8:	4b02      	ldr	r3, [pc, #8]	; (80111d4 <raise+0xc>)
 80111ca:	4601      	mov	r1, r0
 80111cc:	6818      	ldr	r0, [r3, #0]
 80111ce:	f7ff bfd3 	b.w	8011178 <_raise_r>
 80111d2:	bf00      	nop
 80111d4:	20000054 	.word	0x20000054

080111d8 <_kill_r>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4d07      	ldr	r5, [pc, #28]	; (80111f8 <_kill_r+0x20>)
 80111dc:	2300      	movs	r3, #0
 80111de:	4604      	mov	r4, r0
 80111e0:	4608      	mov	r0, r1
 80111e2:	4611      	mov	r1, r2
 80111e4:	602b      	str	r3, [r5, #0]
 80111e6:	f7f2 fa4b 	bl	8003680 <_kill>
 80111ea:	1c43      	adds	r3, r0, #1
 80111ec:	d102      	bne.n	80111f4 <_kill_r+0x1c>
 80111ee:	682b      	ldr	r3, [r5, #0]
 80111f0:	b103      	cbz	r3, 80111f4 <_kill_r+0x1c>
 80111f2:	6023      	str	r3, [r4, #0]
 80111f4:	bd38      	pop	{r3, r4, r5, pc}
 80111f6:	bf00      	nop
 80111f8:	2000306c 	.word	0x2000306c

080111fc <_getpid_r>:
 80111fc:	f7f2 ba38 	b.w	8003670 <_getpid>

08011200 <siprintf>:
 8011200:	b40e      	push	{r1, r2, r3}
 8011202:	b500      	push	{lr}
 8011204:	b09c      	sub	sp, #112	; 0x70
 8011206:	ab1d      	add	r3, sp, #116	; 0x74
 8011208:	9002      	str	r0, [sp, #8]
 801120a:	9006      	str	r0, [sp, #24]
 801120c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011210:	4809      	ldr	r0, [pc, #36]	; (8011238 <siprintf+0x38>)
 8011212:	9107      	str	r1, [sp, #28]
 8011214:	9104      	str	r1, [sp, #16]
 8011216:	4909      	ldr	r1, [pc, #36]	; (801123c <siprintf+0x3c>)
 8011218:	f853 2b04 	ldr.w	r2, [r3], #4
 801121c:	9105      	str	r1, [sp, #20]
 801121e:	6800      	ldr	r0, [r0, #0]
 8011220:	9301      	str	r3, [sp, #4]
 8011222:	a902      	add	r1, sp, #8
 8011224:	f001 ff36 	bl	8013094 <_svfiprintf_r>
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	2200      	movs	r2, #0
 801122c:	701a      	strb	r2, [r3, #0]
 801122e:	b01c      	add	sp, #112	; 0x70
 8011230:	f85d eb04 	ldr.w	lr, [sp], #4
 8011234:	b003      	add	sp, #12
 8011236:	4770      	bx	lr
 8011238:	20000054 	.word	0x20000054
 801123c:	ffff0208 	.word	0xffff0208

08011240 <siscanf>:
 8011240:	b40e      	push	{r1, r2, r3}
 8011242:	b510      	push	{r4, lr}
 8011244:	b09f      	sub	sp, #124	; 0x7c
 8011246:	ac21      	add	r4, sp, #132	; 0x84
 8011248:	f44f 7101 	mov.w	r1, #516	; 0x204
 801124c:	f854 2b04 	ldr.w	r2, [r4], #4
 8011250:	9201      	str	r2, [sp, #4]
 8011252:	f8ad 101c 	strh.w	r1, [sp, #28]
 8011256:	9004      	str	r0, [sp, #16]
 8011258:	9008      	str	r0, [sp, #32]
 801125a:	f7ee ffc3 	bl	80001e4 <strlen>
 801125e:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <siscanf+0x50>)
 8011260:	9005      	str	r0, [sp, #20]
 8011262:	9009      	str	r0, [sp, #36]	; 0x24
 8011264:	930d      	str	r3, [sp, #52]	; 0x34
 8011266:	480b      	ldr	r0, [pc, #44]	; (8011294 <siscanf+0x54>)
 8011268:	9a01      	ldr	r2, [sp, #4]
 801126a:	6800      	ldr	r0, [r0, #0]
 801126c:	9403      	str	r4, [sp, #12]
 801126e:	2300      	movs	r3, #0
 8011270:	9311      	str	r3, [sp, #68]	; 0x44
 8011272:	9316      	str	r3, [sp, #88]	; 0x58
 8011274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011278:	f8ad 301e 	strh.w	r3, [sp, #30]
 801127c:	a904      	add	r1, sp, #16
 801127e:	4623      	mov	r3, r4
 8011280:	f002 f862 	bl	8013348 <__ssvfiscanf_r>
 8011284:	b01f      	add	sp, #124	; 0x7c
 8011286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801128a:	b003      	add	sp, #12
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop
 8011290:	080112bb 	.word	0x080112bb
 8011294:	20000054 	.word	0x20000054

08011298 <__sread>:
 8011298:	b510      	push	{r4, lr}
 801129a:	460c      	mov	r4, r1
 801129c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112a0:	f002 fc76 	bl	8013b90 <_read_r>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	bfab      	itete	ge
 80112a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80112aa:	89a3      	ldrhlt	r3, [r4, #12]
 80112ac:	181b      	addge	r3, r3, r0
 80112ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80112b2:	bfac      	ite	ge
 80112b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80112b6:	81a3      	strhlt	r3, [r4, #12]
 80112b8:	bd10      	pop	{r4, pc}

080112ba <__seofread>:
 80112ba:	2000      	movs	r0, #0
 80112bc:	4770      	bx	lr

080112be <__swrite>:
 80112be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c2:	461f      	mov	r7, r3
 80112c4:	898b      	ldrh	r3, [r1, #12]
 80112c6:	05db      	lsls	r3, r3, #23
 80112c8:	4605      	mov	r5, r0
 80112ca:	460c      	mov	r4, r1
 80112cc:	4616      	mov	r6, r2
 80112ce:	d505      	bpl.n	80112dc <__swrite+0x1e>
 80112d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112d4:	2302      	movs	r3, #2
 80112d6:	2200      	movs	r2, #0
 80112d8:	f001 fa62 	bl	80127a0 <_lseek_r>
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80112e6:	81a3      	strh	r3, [r4, #12]
 80112e8:	4632      	mov	r2, r6
 80112ea:	463b      	mov	r3, r7
 80112ec:	4628      	mov	r0, r5
 80112ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112f2:	f000 b95b 	b.w	80115ac <_write_r>

080112f6 <__sseek>:
 80112f6:	b510      	push	{r4, lr}
 80112f8:	460c      	mov	r4, r1
 80112fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112fe:	f001 fa4f 	bl	80127a0 <_lseek_r>
 8011302:	1c43      	adds	r3, r0, #1
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	bf15      	itete	ne
 8011308:	6560      	strne	r0, [r4, #84]	; 0x54
 801130a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801130e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011312:	81a3      	strheq	r3, [r4, #12]
 8011314:	bf18      	it	ne
 8011316:	81a3      	strhne	r3, [r4, #12]
 8011318:	bd10      	pop	{r4, pc}

0801131a <__sclose>:
 801131a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801131e:	f000 b9e3 	b.w	80116e8 <_close_r>

08011322 <strcpy>:
 8011322:	4603      	mov	r3, r0
 8011324:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011328:	f803 2b01 	strb.w	r2, [r3], #1
 801132c:	2a00      	cmp	r2, #0
 801132e:	d1f9      	bne.n	8011324 <strcpy+0x2>
 8011330:	4770      	bx	lr
	...

08011334 <strtok>:
 8011334:	4b16      	ldr	r3, [pc, #88]	; (8011390 <strtok+0x5c>)
 8011336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011338:	681e      	ldr	r6, [r3, #0]
 801133a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 801133c:	4605      	mov	r5, r0
 801133e:	b9fc      	cbnz	r4, 8011380 <strtok+0x4c>
 8011340:	2050      	movs	r0, #80	; 0x50
 8011342:	9101      	str	r1, [sp, #4]
 8011344:	f7ff f90a 	bl	801055c <malloc>
 8011348:	9901      	ldr	r1, [sp, #4]
 801134a:	65b0      	str	r0, [r6, #88]	; 0x58
 801134c:	4602      	mov	r2, r0
 801134e:	b920      	cbnz	r0, 801135a <strtok+0x26>
 8011350:	4b10      	ldr	r3, [pc, #64]	; (8011394 <strtok+0x60>)
 8011352:	4811      	ldr	r0, [pc, #68]	; (8011398 <strtok+0x64>)
 8011354:	2157      	movs	r1, #87	; 0x57
 8011356:	f000 f9a9 	bl	80116ac <__assert_func>
 801135a:	e9c0 4400 	strd	r4, r4, [r0]
 801135e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8011362:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8011366:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801136a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801136e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8011372:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8011376:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801137a:	6184      	str	r4, [r0, #24]
 801137c:	7704      	strb	r4, [r0, #28]
 801137e:	6244      	str	r4, [r0, #36]	; 0x24
 8011380:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8011382:	2301      	movs	r3, #1
 8011384:	4628      	mov	r0, r5
 8011386:	b002      	add	sp, #8
 8011388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801138c:	f000 b806 	b.w	801139c <__strtok_r>
 8011390:	20000054 	.word	0x20000054
 8011394:	080145ea 	.word	0x080145ea
 8011398:	08014601 	.word	0x08014601

0801139c <__strtok_r>:
 801139c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801139e:	b908      	cbnz	r0, 80113a4 <__strtok_r+0x8>
 80113a0:	6810      	ldr	r0, [r2, #0]
 80113a2:	b188      	cbz	r0, 80113c8 <__strtok_r+0x2c>
 80113a4:	4604      	mov	r4, r0
 80113a6:	4620      	mov	r0, r4
 80113a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80113ac:	460f      	mov	r7, r1
 80113ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80113b2:	b91e      	cbnz	r6, 80113bc <__strtok_r+0x20>
 80113b4:	b965      	cbnz	r5, 80113d0 <__strtok_r+0x34>
 80113b6:	6015      	str	r5, [r2, #0]
 80113b8:	4628      	mov	r0, r5
 80113ba:	e005      	b.n	80113c8 <__strtok_r+0x2c>
 80113bc:	42b5      	cmp	r5, r6
 80113be:	d1f6      	bne.n	80113ae <__strtok_r+0x12>
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d1f0      	bne.n	80113a6 <__strtok_r+0xa>
 80113c4:	6014      	str	r4, [r2, #0]
 80113c6:	7003      	strb	r3, [r0, #0]
 80113c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113ca:	461c      	mov	r4, r3
 80113cc:	e00c      	b.n	80113e8 <__strtok_r+0x4c>
 80113ce:	b915      	cbnz	r5, 80113d6 <__strtok_r+0x3a>
 80113d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80113d4:	460e      	mov	r6, r1
 80113d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80113da:	42ab      	cmp	r3, r5
 80113dc:	d1f7      	bne.n	80113ce <__strtok_r+0x32>
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d0f3      	beq.n	80113ca <__strtok_r+0x2e>
 80113e2:	2300      	movs	r3, #0
 80113e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80113e8:	6014      	str	r4, [r2, #0]
 80113ea:	e7ed      	b.n	80113c8 <__strtok_r+0x2c>

080113ec <_strtol_l.constprop.0>:
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f2:	d001      	beq.n	80113f8 <_strtol_l.constprop.0+0xc>
 80113f4:	2b24      	cmp	r3, #36	; 0x24
 80113f6:	d906      	bls.n	8011406 <_strtol_l.constprop.0+0x1a>
 80113f8:	f7ff f886 	bl	8010508 <__errno>
 80113fc:	2316      	movs	r3, #22
 80113fe:	6003      	str	r3, [r0, #0]
 8011400:	2000      	movs	r0, #0
 8011402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011406:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80114ec <_strtol_l.constprop.0+0x100>
 801140a:	460d      	mov	r5, r1
 801140c:	462e      	mov	r6, r5
 801140e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011412:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011416:	f017 0708 	ands.w	r7, r7, #8
 801141a:	d1f7      	bne.n	801140c <_strtol_l.constprop.0+0x20>
 801141c:	2c2d      	cmp	r4, #45	; 0x2d
 801141e:	d132      	bne.n	8011486 <_strtol_l.constprop.0+0x9a>
 8011420:	782c      	ldrb	r4, [r5, #0]
 8011422:	2701      	movs	r7, #1
 8011424:	1cb5      	adds	r5, r6, #2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d05b      	beq.n	80114e2 <_strtol_l.constprop.0+0xf6>
 801142a:	2b10      	cmp	r3, #16
 801142c:	d109      	bne.n	8011442 <_strtol_l.constprop.0+0x56>
 801142e:	2c30      	cmp	r4, #48	; 0x30
 8011430:	d107      	bne.n	8011442 <_strtol_l.constprop.0+0x56>
 8011432:	782c      	ldrb	r4, [r5, #0]
 8011434:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011438:	2c58      	cmp	r4, #88	; 0x58
 801143a:	d14d      	bne.n	80114d8 <_strtol_l.constprop.0+0xec>
 801143c:	786c      	ldrb	r4, [r5, #1]
 801143e:	2310      	movs	r3, #16
 8011440:	3502      	adds	r5, #2
 8011442:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011446:	f108 38ff 	add.w	r8, r8, #4294967295
 801144a:	f04f 0c00 	mov.w	ip, #0
 801144e:	fbb8 f9f3 	udiv	r9, r8, r3
 8011452:	4666      	mov	r6, ip
 8011454:	fb03 8a19 	mls	sl, r3, r9, r8
 8011458:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801145c:	f1be 0f09 	cmp.w	lr, #9
 8011460:	d816      	bhi.n	8011490 <_strtol_l.constprop.0+0xa4>
 8011462:	4674      	mov	r4, lr
 8011464:	42a3      	cmp	r3, r4
 8011466:	dd24      	ble.n	80114b2 <_strtol_l.constprop.0+0xc6>
 8011468:	f1bc 0f00 	cmp.w	ip, #0
 801146c:	db1e      	blt.n	80114ac <_strtol_l.constprop.0+0xc0>
 801146e:	45b1      	cmp	r9, r6
 8011470:	d31c      	bcc.n	80114ac <_strtol_l.constprop.0+0xc0>
 8011472:	d101      	bne.n	8011478 <_strtol_l.constprop.0+0x8c>
 8011474:	45a2      	cmp	sl, r4
 8011476:	db19      	blt.n	80114ac <_strtol_l.constprop.0+0xc0>
 8011478:	fb06 4603 	mla	r6, r6, r3, r4
 801147c:	f04f 0c01 	mov.w	ip, #1
 8011480:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011484:	e7e8      	b.n	8011458 <_strtol_l.constprop.0+0x6c>
 8011486:	2c2b      	cmp	r4, #43	; 0x2b
 8011488:	bf04      	itt	eq
 801148a:	782c      	ldrbeq	r4, [r5, #0]
 801148c:	1cb5      	addeq	r5, r6, #2
 801148e:	e7ca      	b.n	8011426 <_strtol_l.constprop.0+0x3a>
 8011490:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011494:	f1be 0f19 	cmp.w	lr, #25
 8011498:	d801      	bhi.n	801149e <_strtol_l.constprop.0+0xb2>
 801149a:	3c37      	subs	r4, #55	; 0x37
 801149c:	e7e2      	b.n	8011464 <_strtol_l.constprop.0+0x78>
 801149e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80114a2:	f1be 0f19 	cmp.w	lr, #25
 80114a6:	d804      	bhi.n	80114b2 <_strtol_l.constprop.0+0xc6>
 80114a8:	3c57      	subs	r4, #87	; 0x57
 80114aa:	e7db      	b.n	8011464 <_strtol_l.constprop.0+0x78>
 80114ac:	f04f 3cff 	mov.w	ip, #4294967295
 80114b0:	e7e6      	b.n	8011480 <_strtol_l.constprop.0+0x94>
 80114b2:	f1bc 0f00 	cmp.w	ip, #0
 80114b6:	da05      	bge.n	80114c4 <_strtol_l.constprop.0+0xd8>
 80114b8:	2322      	movs	r3, #34	; 0x22
 80114ba:	6003      	str	r3, [r0, #0]
 80114bc:	4646      	mov	r6, r8
 80114be:	b942      	cbnz	r2, 80114d2 <_strtol_l.constprop.0+0xe6>
 80114c0:	4630      	mov	r0, r6
 80114c2:	e79e      	b.n	8011402 <_strtol_l.constprop.0+0x16>
 80114c4:	b107      	cbz	r7, 80114c8 <_strtol_l.constprop.0+0xdc>
 80114c6:	4276      	negs	r6, r6
 80114c8:	2a00      	cmp	r2, #0
 80114ca:	d0f9      	beq.n	80114c0 <_strtol_l.constprop.0+0xd4>
 80114cc:	f1bc 0f00 	cmp.w	ip, #0
 80114d0:	d000      	beq.n	80114d4 <_strtol_l.constprop.0+0xe8>
 80114d2:	1e69      	subs	r1, r5, #1
 80114d4:	6011      	str	r1, [r2, #0]
 80114d6:	e7f3      	b.n	80114c0 <_strtol_l.constprop.0+0xd4>
 80114d8:	2430      	movs	r4, #48	; 0x30
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d1b1      	bne.n	8011442 <_strtol_l.constprop.0+0x56>
 80114de:	2308      	movs	r3, #8
 80114e0:	e7af      	b.n	8011442 <_strtol_l.constprop.0+0x56>
 80114e2:	2c30      	cmp	r4, #48	; 0x30
 80114e4:	d0a5      	beq.n	8011432 <_strtol_l.constprop.0+0x46>
 80114e6:	230a      	movs	r3, #10
 80114e8:	e7ab      	b.n	8011442 <_strtol_l.constprop.0+0x56>
 80114ea:	bf00      	nop
 80114ec:	0801469b 	.word	0x0801469b

080114f0 <_strtol_r>:
 80114f0:	f7ff bf7c 	b.w	80113ec <_strtol_l.constprop.0>

080114f4 <strtol>:
 80114f4:	4613      	mov	r3, r2
 80114f6:	460a      	mov	r2, r1
 80114f8:	4601      	mov	r1, r0
 80114fa:	4802      	ldr	r0, [pc, #8]	; (8011504 <strtol+0x10>)
 80114fc:	6800      	ldr	r0, [r0, #0]
 80114fe:	f7ff bf75 	b.w	80113ec <_strtol_l.constprop.0>
 8011502:	bf00      	nop
 8011504:	20000054 	.word	0x20000054

08011508 <__swbuf_r>:
 8011508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801150a:	460e      	mov	r6, r1
 801150c:	4614      	mov	r4, r2
 801150e:	4605      	mov	r5, r0
 8011510:	b118      	cbz	r0, 801151a <__swbuf_r+0x12>
 8011512:	6983      	ldr	r3, [r0, #24]
 8011514:	b90b      	cbnz	r3, 801151a <__swbuf_r+0x12>
 8011516:	f001 f88b 	bl	8012630 <__sinit>
 801151a:	4b21      	ldr	r3, [pc, #132]	; (80115a0 <__swbuf_r+0x98>)
 801151c:	429c      	cmp	r4, r3
 801151e:	d12b      	bne.n	8011578 <__swbuf_r+0x70>
 8011520:	686c      	ldr	r4, [r5, #4]
 8011522:	69a3      	ldr	r3, [r4, #24]
 8011524:	60a3      	str	r3, [r4, #8]
 8011526:	89a3      	ldrh	r3, [r4, #12]
 8011528:	071a      	lsls	r2, r3, #28
 801152a:	d52f      	bpl.n	801158c <__swbuf_r+0x84>
 801152c:	6923      	ldr	r3, [r4, #16]
 801152e:	b36b      	cbz	r3, 801158c <__swbuf_r+0x84>
 8011530:	6923      	ldr	r3, [r4, #16]
 8011532:	6820      	ldr	r0, [r4, #0]
 8011534:	1ac0      	subs	r0, r0, r3
 8011536:	6963      	ldr	r3, [r4, #20]
 8011538:	b2f6      	uxtb	r6, r6
 801153a:	4283      	cmp	r3, r0
 801153c:	4637      	mov	r7, r6
 801153e:	dc04      	bgt.n	801154a <__swbuf_r+0x42>
 8011540:	4621      	mov	r1, r4
 8011542:	4628      	mov	r0, r5
 8011544:	f000 ffe0 	bl	8012508 <_fflush_r>
 8011548:	bb30      	cbnz	r0, 8011598 <__swbuf_r+0x90>
 801154a:	68a3      	ldr	r3, [r4, #8]
 801154c:	3b01      	subs	r3, #1
 801154e:	60a3      	str	r3, [r4, #8]
 8011550:	6823      	ldr	r3, [r4, #0]
 8011552:	1c5a      	adds	r2, r3, #1
 8011554:	6022      	str	r2, [r4, #0]
 8011556:	701e      	strb	r6, [r3, #0]
 8011558:	6963      	ldr	r3, [r4, #20]
 801155a:	3001      	adds	r0, #1
 801155c:	4283      	cmp	r3, r0
 801155e:	d004      	beq.n	801156a <__swbuf_r+0x62>
 8011560:	89a3      	ldrh	r3, [r4, #12]
 8011562:	07db      	lsls	r3, r3, #31
 8011564:	d506      	bpl.n	8011574 <__swbuf_r+0x6c>
 8011566:	2e0a      	cmp	r6, #10
 8011568:	d104      	bne.n	8011574 <__swbuf_r+0x6c>
 801156a:	4621      	mov	r1, r4
 801156c:	4628      	mov	r0, r5
 801156e:	f000 ffcb 	bl	8012508 <_fflush_r>
 8011572:	b988      	cbnz	r0, 8011598 <__swbuf_r+0x90>
 8011574:	4638      	mov	r0, r7
 8011576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011578:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <__swbuf_r+0x9c>)
 801157a:	429c      	cmp	r4, r3
 801157c:	d101      	bne.n	8011582 <__swbuf_r+0x7a>
 801157e:	68ac      	ldr	r4, [r5, #8]
 8011580:	e7cf      	b.n	8011522 <__swbuf_r+0x1a>
 8011582:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <__swbuf_r+0xa0>)
 8011584:	429c      	cmp	r4, r3
 8011586:	bf08      	it	eq
 8011588:	68ec      	ldreq	r4, [r5, #12]
 801158a:	e7ca      	b.n	8011522 <__swbuf_r+0x1a>
 801158c:	4621      	mov	r1, r4
 801158e:	4628      	mov	r0, r5
 8011590:	f000 f81e 	bl	80115d0 <__swsetup_r>
 8011594:	2800      	cmp	r0, #0
 8011596:	d0cb      	beq.n	8011530 <__swbuf_r+0x28>
 8011598:	f04f 37ff 	mov.w	r7, #4294967295
 801159c:	e7ea      	b.n	8011574 <__swbuf_r+0x6c>
 801159e:	bf00      	nop
 80115a0:	08014834 	.word	0x08014834
 80115a4:	08014854 	.word	0x08014854
 80115a8:	08014814 	.word	0x08014814

080115ac <_write_r>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4d07      	ldr	r5, [pc, #28]	; (80115cc <_write_r+0x20>)
 80115b0:	4604      	mov	r4, r0
 80115b2:	4608      	mov	r0, r1
 80115b4:	4611      	mov	r1, r2
 80115b6:	2200      	movs	r2, #0
 80115b8:	602a      	str	r2, [r5, #0]
 80115ba:	461a      	mov	r2, r3
 80115bc:	f7f1 f8c4 	bl	8002748 <_write>
 80115c0:	1c43      	adds	r3, r0, #1
 80115c2:	d102      	bne.n	80115ca <_write_r+0x1e>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	b103      	cbz	r3, 80115ca <_write_r+0x1e>
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	bd38      	pop	{r3, r4, r5, pc}
 80115cc:	2000306c 	.word	0x2000306c

080115d0 <__swsetup_r>:
 80115d0:	4b32      	ldr	r3, [pc, #200]	; (801169c <__swsetup_r+0xcc>)
 80115d2:	b570      	push	{r4, r5, r6, lr}
 80115d4:	681d      	ldr	r5, [r3, #0]
 80115d6:	4606      	mov	r6, r0
 80115d8:	460c      	mov	r4, r1
 80115da:	b125      	cbz	r5, 80115e6 <__swsetup_r+0x16>
 80115dc:	69ab      	ldr	r3, [r5, #24]
 80115de:	b913      	cbnz	r3, 80115e6 <__swsetup_r+0x16>
 80115e0:	4628      	mov	r0, r5
 80115e2:	f001 f825 	bl	8012630 <__sinit>
 80115e6:	4b2e      	ldr	r3, [pc, #184]	; (80116a0 <__swsetup_r+0xd0>)
 80115e8:	429c      	cmp	r4, r3
 80115ea:	d10f      	bne.n	801160c <__swsetup_r+0x3c>
 80115ec:	686c      	ldr	r4, [r5, #4]
 80115ee:	89a3      	ldrh	r3, [r4, #12]
 80115f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115f4:	0719      	lsls	r1, r3, #28
 80115f6:	d42c      	bmi.n	8011652 <__swsetup_r+0x82>
 80115f8:	06dd      	lsls	r5, r3, #27
 80115fa:	d411      	bmi.n	8011620 <__swsetup_r+0x50>
 80115fc:	2309      	movs	r3, #9
 80115fe:	6033      	str	r3, [r6, #0]
 8011600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011604:	81a3      	strh	r3, [r4, #12]
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	e03e      	b.n	801168a <__swsetup_r+0xba>
 801160c:	4b25      	ldr	r3, [pc, #148]	; (80116a4 <__swsetup_r+0xd4>)
 801160e:	429c      	cmp	r4, r3
 8011610:	d101      	bne.n	8011616 <__swsetup_r+0x46>
 8011612:	68ac      	ldr	r4, [r5, #8]
 8011614:	e7eb      	b.n	80115ee <__swsetup_r+0x1e>
 8011616:	4b24      	ldr	r3, [pc, #144]	; (80116a8 <__swsetup_r+0xd8>)
 8011618:	429c      	cmp	r4, r3
 801161a:	bf08      	it	eq
 801161c:	68ec      	ldreq	r4, [r5, #12]
 801161e:	e7e6      	b.n	80115ee <__swsetup_r+0x1e>
 8011620:	0758      	lsls	r0, r3, #29
 8011622:	d512      	bpl.n	801164a <__swsetup_r+0x7a>
 8011624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011626:	b141      	cbz	r1, 801163a <__swsetup_r+0x6a>
 8011628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801162c:	4299      	cmp	r1, r3
 801162e:	d002      	beq.n	8011636 <__swsetup_r+0x66>
 8011630:	4630      	mov	r0, r6
 8011632:	f7fe ffb9 	bl	80105a8 <_free_r>
 8011636:	2300      	movs	r3, #0
 8011638:	6363      	str	r3, [r4, #52]	; 0x34
 801163a:	89a3      	ldrh	r3, [r4, #12]
 801163c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011640:	81a3      	strh	r3, [r4, #12]
 8011642:	2300      	movs	r3, #0
 8011644:	6063      	str	r3, [r4, #4]
 8011646:	6923      	ldr	r3, [r4, #16]
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	89a3      	ldrh	r3, [r4, #12]
 801164c:	f043 0308 	orr.w	r3, r3, #8
 8011650:	81a3      	strh	r3, [r4, #12]
 8011652:	6923      	ldr	r3, [r4, #16]
 8011654:	b94b      	cbnz	r3, 801166a <__swsetup_r+0x9a>
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801165c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011660:	d003      	beq.n	801166a <__swsetup_r+0x9a>
 8011662:	4621      	mov	r1, r4
 8011664:	4630      	mov	r0, r6
 8011666:	f001 f8d3 	bl	8012810 <__smakebuf_r>
 801166a:	89a0      	ldrh	r0, [r4, #12]
 801166c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011670:	f010 0301 	ands.w	r3, r0, #1
 8011674:	d00a      	beq.n	801168c <__swsetup_r+0xbc>
 8011676:	2300      	movs	r3, #0
 8011678:	60a3      	str	r3, [r4, #8]
 801167a:	6963      	ldr	r3, [r4, #20]
 801167c:	425b      	negs	r3, r3
 801167e:	61a3      	str	r3, [r4, #24]
 8011680:	6923      	ldr	r3, [r4, #16]
 8011682:	b943      	cbnz	r3, 8011696 <__swsetup_r+0xc6>
 8011684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011688:	d1ba      	bne.n	8011600 <__swsetup_r+0x30>
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	0781      	lsls	r1, r0, #30
 801168e:	bf58      	it	pl
 8011690:	6963      	ldrpl	r3, [r4, #20]
 8011692:	60a3      	str	r3, [r4, #8]
 8011694:	e7f4      	b.n	8011680 <__swsetup_r+0xb0>
 8011696:	2000      	movs	r0, #0
 8011698:	e7f7      	b.n	801168a <__swsetup_r+0xba>
 801169a:	bf00      	nop
 801169c:	20000054 	.word	0x20000054
 80116a0:	08014834 	.word	0x08014834
 80116a4:	08014854 	.word	0x08014854
 80116a8:	08014814 	.word	0x08014814

080116ac <__assert_func>:
 80116ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116ae:	4614      	mov	r4, r2
 80116b0:	461a      	mov	r2, r3
 80116b2:	4b09      	ldr	r3, [pc, #36]	; (80116d8 <__assert_func+0x2c>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	4605      	mov	r5, r0
 80116b8:	68d8      	ldr	r0, [r3, #12]
 80116ba:	b14c      	cbz	r4, 80116d0 <__assert_func+0x24>
 80116bc:	4b07      	ldr	r3, [pc, #28]	; (80116dc <__assert_func+0x30>)
 80116be:	9100      	str	r1, [sp, #0]
 80116c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116c4:	4906      	ldr	r1, [pc, #24]	; (80116e0 <__assert_func+0x34>)
 80116c6:	462b      	mov	r3, r5
 80116c8:	f001 f830 	bl	801272c <fiprintf>
 80116cc:	f7fe ff10 	bl	80104f0 <abort>
 80116d0:	4b04      	ldr	r3, [pc, #16]	; (80116e4 <__assert_func+0x38>)
 80116d2:	461c      	mov	r4, r3
 80116d4:	e7f3      	b.n	80116be <__assert_func+0x12>
 80116d6:	bf00      	nop
 80116d8:	20000054 	.word	0x20000054
 80116dc:	0801465e 	.word	0x0801465e
 80116e0:	0801466b 	.word	0x0801466b
 80116e4:	08014699 	.word	0x08014699

080116e8 <_close_r>:
 80116e8:	b538      	push	{r3, r4, r5, lr}
 80116ea:	4d06      	ldr	r5, [pc, #24]	; (8011704 <_close_r+0x1c>)
 80116ec:	2300      	movs	r3, #0
 80116ee:	4604      	mov	r4, r0
 80116f0:	4608      	mov	r0, r1
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	f7f1 fffb 	bl	80036ee <_close>
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d102      	bne.n	8011702 <_close_r+0x1a>
 80116fc:	682b      	ldr	r3, [r5, #0]
 80116fe:	b103      	cbz	r3, 8011702 <_close_r+0x1a>
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	bd38      	pop	{r3, r4, r5, pc}
 8011704:	2000306c 	.word	0x2000306c

08011708 <quorem>:
 8011708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	6903      	ldr	r3, [r0, #16]
 801170e:	690c      	ldr	r4, [r1, #16]
 8011710:	42a3      	cmp	r3, r4
 8011712:	4607      	mov	r7, r0
 8011714:	f2c0 8081 	blt.w	801181a <quorem+0x112>
 8011718:	3c01      	subs	r4, #1
 801171a:	f101 0814 	add.w	r8, r1, #20
 801171e:	f100 0514 	add.w	r5, r0, #20
 8011722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801172c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011730:	3301      	adds	r3, #1
 8011732:	429a      	cmp	r2, r3
 8011734:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801173c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011740:	d331      	bcc.n	80117a6 <quorem+0x9e>
 8011742:	f04f 0e00 	mov.w	lr, #0
 8011746:	4640      	mov	r0, r8
 8011748:	46ac      	mov	ip, r5
 801174a:	46f2      	mov	sl, lr
 801174c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011750:	b293      	uxth	r3, r2
 8011752:	fb06 e303 	mla	r3, r6, r3, lr
 8011756:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801175a:	b29b      	uxth	r3, r3
 801175c:	ebaa 0303 	sub.w	r3, sl, r3
 8011760:	f8dc a000 	ldr.w	sl, [ip]
 8011764:	0c12      	lsrs	r2, r2, #16
 8011766:	fa13 f38a 	uxtah	r3, r3, sl
 801176a:	fb06 e202 	mla	r2, r6, r2, lr
 801176e:	9300      	str	r3, [sp, #0]
 8011770:	9b00      	ldr	r3, [sp, #0]
 8011772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011776:	b292      	uxth	r2, r2
 8011778:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801177c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011780:	f8bd 3000 	ldrh.w	r3, [sp]
 8011784:	4581      	cmp	r9, r0
 8011786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801178a:	f84c 3b04 	str.w	r3, [ip], #4
 801178e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011792:	d2db      	bcs.n	801174c <quorem+0x44>
 8011794:	f855 300b 	ldr.w	r3, [r5, fp]
 8011798:	b92b      	cbnz	r3, 80117a6 <quorem+0x9e>
 801179a:	9b01      	ldr	r3, [sp, #4]
 801179c:	3b04      	subs	r3, #4
 801179e:	429d      	cmp	r5, r3
 80117a0:	461a      	mov	r2, r3
 80117a2:	d32e      	bcc.n	8011802 <quorem+0xfa>
 80117a4:	613c      	str	r4, [r7, #16]
 80117a6:	4638      	mov	r0, r7
 80117a8:	f001 fb00 	bl	8012dac <__mcmp>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	db24      	blt.n	80117fa <quorem+0xf2>
 80117b0:	3601      	adds	r6, #1
 80117b2:	4628      	mov	r0, r5
 80117b4:	f04f 0c00 	mov.w	ip, #0
 80117b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80117bc:	f8d0 e000 	ldr.w	lr, [r0]
 80117c0:	b293      	uxth	r3, r2
 80117c2:	ebac 0303 	sub.w	r3, ip, r3
 80117c6:	0c12      	lsrs	r2, r2, #16
 80117c8:	fa13 f38e 	uxtah	r3, r3, lr
 80117cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80117d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117da:	45c1      	cmp	r9, r8
 80117dc:	f840 3b04 	str.w	r3, [r0], #4
 80117e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80117e4:	d2e8      	bcs.n	80117b8 <quorem+0xb0>
 80117e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117ee:	b922      	cbnz	r2, 80117fa <quorem+0xf2>
 80117f0:	3b04      	subs	r3, #4
 80117f2:	429d      	cmp	r5, r3
 80117f4:	461a      	mov	r2, r3
 80117f6:	d30a      	bcc.n	801180e <quorem+0x106>
 80117f8:	613c      	str	r4, [r7, #16]
 80117fa:	4630      	mov	r0, r6
 80117fc:	b003      	add	sp, #12
 80117fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011802:	6812      	ldr	r2, [r2, #0]
 8011804:	3b04      	subs	r3, #4
 8011806:	2a00      	cmp	r2, #0
 8011808:	d1cc      	bne.n	80117a4 <quorem+0x9c>
 801180a:	3c01      	subs	r4, #1
 801180c:	e7c7      	b.n	801179e <quorem+0x96>
 801180e:	6812      	ldr	r2, [r2, #0]
 8011810:	3b04      	subs	r3, #4
 8011812:	2a00      	cmp	r2, #0
 8011814:	d1f0      	bne.n	80117f8 <quorem+0xf0>
 8011816:	3c01      	subs	r4, #1
 8011818:	e7eb      	b.n	80117f2 <quorem+0xea>
 801181a:	2000      	movs	r0, #0
 801181c:	e7ee      	b.n	80117fc <quorem+0xf4>
	...

08011820 <_dtoa_r>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	ed2d 8b04 	vpush	{d8-d9}
 8011828:	ec57 6b10 	vmov	r6, r7, d0
 801182c:	b093      	sub	sp, #76	; 0x4c
 801182e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011834:	9106      	str	r1, [sp, #24]
 8011836:	ee10 aa10 	vmov	sl, s0
 801183a:	4604      	mov	r4, r0
 801183c:	9209      	str	r2, [sp, #36]	; 0x24
 801183e:	930c      	str	r3, [sp, #48]	; 0x30
 8011840:	46bb      	mov	fp, r7
 8011842:	b975      	cbnz	r5, 8011862 <_dtoa_r+0x42>
 8011844:	2010      	movs	r0, #16
 8011846:	f7fe fe89 	bl	801055c <malloc>
 801184a:	4602      	mov	r2, r0
 801184c:	6260      	str	r0, [r4, #36]	; 0x24
 801184e:	b920      	cbnz	r0, 801185a <_dtoa_r+0x3a>
 8011850:	4ba7      	ldr	r3, [pc, #668]	; (8011af0 <_dtoa_r+0x2d0>)
 8011852:	21ea      	movs	r1, #234	; 0xea
 8011854:	48a7      	ldr	r0, [pc, #668]	; (8011af4 <_dtoa_r+0x2d4>)
 8011856:	f7ff ff29 	bl	80116ac <__assert_func>
 801185a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801185e:	6005      	str	r5, [r0, #0]
 8011860:	60c5      	str	r5, [r0, #12]
 8011862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011864:	6819      	ldr	r1, [r3, #0]
 8011866:	b151      	cbz	r1, 801187e <_dtoa_r+0x5e>
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	604a      	str	r2, [r1, #4]
 801186c:	2301      	movs	r3, #1
 801186e:	4093      	lsls	r3, r2
 8011870:	608b      	str	r3, [r1, #8]
 8011872:	4620      	mov	r0, r4
 8011874:	f001 f858 	bl	8012928 <_Bfree>
 8011878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801187a:	2200      	movs	r2, #0
 801187c:	601a      	str	r2, [r3, #0]
 801187e:	1e3b      	subs	r3, r7, #0
 8011880:	bfaa      	itet	ge
 8011882:	2300      	movge	r3, #0
 8011884:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011888:	f8c8 3000 	strge.w	r3, [r8]
 801188c:	4b9a      	ldr	r3, [pc, #616]	; (8011af8 <_dtoa_r+0x2d8>)
 801188e:	bfbc      	itt	lt
 8011890:	2201      	movlt	r2, #1
 8011892:	f8c8 2000 	strlt.w	r2, [r8]
 8011896:	ea33 030b 	bics.w	r3, r3, fp
 801189a:	d11b      	bne.n	80118d4 <_dtoa_r+0xb4>
 801189c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801189e:	f242 730f 	movw	r3, #9999	; 0x270f
 80118a2:	6013      	str	r3, [r2, #0]
 80118a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118a8:	4333      	orrs	r3, r6
 80118aa:	f000 8592 	beq.w	80123d2 <_dtoa_r+0xbb2>
 80118ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118b0:	b963      	cbnz	r3, 80118cc <_dtoa_r+0xac>
 80118b2:	4b92      	ldr	r3, [pc, #584]	; (8011afc <_dtoa_r+0x2dc>)
 80118b4:	e022      	b.n	80118fc <_dtoa_r+0xdc>
 80118b6:	4b92      	ldr	r3, [pc, #584]	; (8011b00 <_dtoa_r+0x2e0>)
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	3308      	adds	r3, #8
 80118bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	9801      	ldr	r0, [sp, #4]
 80118c2:	b013      	add	sp, #76	; 0x4c
 80118c4:	ecbd 8b04 	vpop	{d8-d9}
 80118c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118cc:	4b8b      	ldr	r3, [pc, #556]	; (8011afc <_dtoa_r+0x2dc>)
 80118ce:	9301      	str	r3, [sp, #4]
 80118d0:	3303      	adds	r3, #3
 80118d2:	e7f3      	b.n	80118bc <_dtoa_r+0x9c>
 80118d4:	2200      	movs	r2, #0
 80118d6:	2300      	movs	r3, #0
 80118d8:	4650      	mov	r0, sl
 80118da:	4659      	mov	r1, fp
 80118dc:	f7ef f904 	bl	8000ae8 <__aeabi_dcmpeq>
 80118e0:	ec4b ab19 	vmov	d9, sl, fp
 80118e4:	4680      	mov	r8, r0
 80118e6:	b158      	cbz	r0, 8011900 <_dtoa_r+0xe0>
 80118e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118ea:	2301      	movs	r3, #1
 80118ec:	6013      	str	r3, [r2, #0]
 80118ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f000 856b 	beq.w	80123cc <_dtoa_r+0xbac>
 80118f6:	4883      	ldr	r0, [pc, #524]	; (8011b04 <_dtoa_r+0x2e4>)
 80118f8:	6018      	str	r0, [r3, #0]
 80118fa:	1e43      	subs	r3, r0, #1
 80118fc:	9301      	str	r3, [sp, #4]
 80118fe:	e7df      	b.n	80118c0 <_dtoa_r+0xa0>
 8011900:	ec4b ab10 	vmov	d0, sl, fp
 8011904:	aa10      	add	r2, sp, #64	; 0x40
 8011906:	a911      	add	r1, sp, #68	; 0x44
 8011908:	4620      	mov	r0, r4
 801190a:	f001 faf5 	bl	8012ef8 <__d2b>
 801190e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011912:	ee08 0a10 	vmov	s16, r0
 8011916:	2d00      	cmp	r5, #0
 8011918:	f000 8084 	beq.w	8011a24 <_dtoa_r+0x204>
 801191c:	ee19 3a90 	vmov	r3, s19
 8011920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011924:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011928:	4656      	mov	r6, sl
 801192a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801192e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011932:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011936:	4b74      	ldr	r3, [pc, #464]	; (8011b08 <_dtoa_r+0x2e8>)
 8011938:	2200      	movs	r2, #0
 801193a:	4630      	mov	r0, r6
 801193c:	4639      	mov	r1, r7
 801193e:	f7ee fcb3 	bl	80002a8 <__aeabi_dsub>
 8011942:	a365      	add	r3, pc, #404	; (adr r3, 8011ad8 <_dtoa_r+0x2b8>)
 8011944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011948:	f7ee fe66 	bl	8000618 <__aeabi_dmul>
 801194c:	a364      	add	r3, pc, #400	; (adr r3, 8011ae0 <_dtoa_r+0x2c0>)
 801194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011952:	f7ee fcab 	bl	80002ac <__adddf3>
 8011956:	4606      	mov	r6, r0
 8011958:	4628      	mov	r0, r5
 801195a:	460f      	mov	r7, r1
 801195c:	f7ee fdf2 	bl	8000544 <__aeabi_i2d>
 8011960:	a361      	add	r3, pc, #388	; (adr r3, 8011ae8 <_dtoa_r+0x2c8>)
 8011962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011966:	f7ee fe57 	bl	8000618 <__aeabi_dmul>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	4630      	mov	r0, r6
 8011970:	4639      	mov	r1, r7
 8011972:	f7ee fc9b 	bl	80002ac <__adddf3>
 8011976:	4606      	mov	r6, r0
 8011978:	460f      	mov	r7, r1
 801197a:	f7ef f8fd 	bl	8000b78 <__aeabi_d2iz>
 801197e:	2200      	movs	r2, #0
 8011980:	9000      	str	r0, [sp, #0]
 8011982:	2300      	movs	r3, #0
 8011984:	4630      	mov	r0, r6
 8011986:	4639      	mov	r1, r7
 8011988:	f7ef f8b8 	bl	8000afc <__aeabi_dcmplt>
 801198c:	b150      	cbz	r0, 80119a4 <_dtoa_r+0x184>
 801198e:	9800      	ldr	r0, [sp, #0]
 8011990:	f7ee fdd8 	bl	8000544 <__aeabi_i2d>
 8011994:	4632      	mov	r2, r6
 8011996:	463b      	mov	r3, r7
 8011998:	f7ef f8a6 	bl	8000ae8 <__aeabi_dcmpeq>
 801199c:	b910      	cbnz	r0, 80119a4 <_dtoa_r+0x184>
 801199e:	9b00      	ldr	r3, [sp, #0]
 80119a0:	3b01      	subs	r3, #1
 80119a2:	9300      	str	r3, [sp, #0]
 80119a4:	9b00      	ldr	r3, [sp, #0]
 80119a6:	2b16      	cmp	r3, #22
 80119a8:	d85a      	bhi.n	8011a60 <_dtoa_r+0x240>
 80119aa:	9a00      	ldr	r2, [sp, #0]
 80119ac:	4b57      	ldr	r3, [pc, #348]	; (8011b0c <_dtoa_r+0x2ec>)
 80119ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	ec51 0b19 	vmov	r0, r1, d9
 80119ba:	f7ef f89f 	bl	8000afc <__aeabi_dcmplt>
 80119be:	2800      	cmp	r0, #0
 80119c0:	d050      	beq.n	8011a64 <_dtoa_r+0x244>
 80119c2:	9b00      	ldr	r3, [sp, #0]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	9300      	str	r3, [sp, #0]
 80119c8:	2300      	movs	r3, #0
 80119ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80119cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119ce:	1b5d      	subs	r5, r3, r5
 80119d0:	1e6b      	subs	r3, r5, #1
 80119d2:	9305      	str	r3, [sp, #20]
 80119d4:	bf45      	ittet	mi
 80119d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80119da:	9304      	strmi	r3, [sp, #16]
 80119dc:	2300      	movpl	r3, #0
 80119de:	2300      	movmi	r3, #0
 80119e0:	bf4c      	ite	mi
 80119e2:	9305      	strmi	r3, [sp, #20]
 80119e4:	9304      	strpl	r3, [sp, #16]
 80119e6:	9b00      	ldr	r3, [sp, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	db3d      	blt.n	8011a68 <_dtoa_r+0x248>
 80119ec:	9b05      	ldr	r3, [sp, #20]
 80119ee:	9a00      	ldr	r2, [sp, #0]
 80119f0:	920a      	str	r2, [sp, #40]	; 0x28
 80119f2:	4413      	add	r3, r2
 80119f4:	9305      	str	r3, [sp, #20]
 80119f6:	2300      	movs	r3, #0
 80119f8:	9307      	str	r3, [sp, #28]
 80119fa:	9b06      	ldr	r3, [sp, #24]
 80119fc:	2b09      	cmp	r3, #9
 80119fe:	f200 8089 	bhi.w	8011b14 <_dtoa_r+0x2f4>
 8011a02:	2b05      	cmp	r3, #5
 8011a04:	bfc4      	itt	gt
 8011a06:	3b04      	subgt	r3, #4
 8011a08:	9306      	strgt	r3, [sp, #24]
 8011a0a:	9b06      	ldr	r3, [sp, #24]
 8011a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8011a10:	bfcc      	ite	gt
 8011a12:	2500      	movgt	r5, #0
 8011a14:	2501      	movle	r5, #1
 8011a16:	2b03      	cmp	r3, #3
 8011a18:	f200 8087 	bhi.w	8011b2a <_dtoa_r+0x30a>
 8011a1c:	e8df f003 	tbb	[pc, r3]
 8011a20:	59383a2d 	.word	0x59383a2d
 8011a24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011a28:	441d      	add	r5, r3
 8011a2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011a2e:	2b20      	cmp	r3, #32
 8011a30:	bfc1      	itttt	gt
 8011a32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011a36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011a3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8011a3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011a42:	bfda      	itte	le
 8011a44:	f1c3 0320 	rsble	r3, r3, #32
 8011a48:	fa06 f003 	lslle.w	r0, r6, r3
 8011a4c:	4318      	orrgt	r0, r3
 8011a4e:	f7ee fd69 	bl	8000524 <__aeabi_ui2d>
 8011a52:	2301      	movs	r3, #1
 8011a54:	4606      	mov	r6, r0
 8011a56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011a5a:	3d01      	subs	r5, #1
 8011a5c:	930e      	str	r3, [sp, #56]	; 0x38
 8011a5e:	e76a      	b.n	8011936 <_dtoa_r+0x116>
 8011a60:	2301      	movs	r3, #1
 8011a62:	e7b2      	b.n	80119ca <_dtoa_r+0x1aa>
 8011a64:	900b      	str	r0, [sp, #44]	; 0x2c
 8011a66:	e7b1      	b.n	80119cc <_dtoa_r+0x1ac>
 8011a68:	9b04      	ldr	r3, [sp, #16]
 8011a6a:	9a00      	ldr	r2, [sp, #0]
 8011a6c:	1a9b      	subs	r3, r3, r2
 8011a6e:	9304      	str	r3, [sp, #16]
 8011a70:	4253      	negs	r3, r2
 8011a72:	9307      	str	r3, [sp, #28]
 8011a74:	2300      	movs	r3, #0
 8011a76:	930a      	str	r3, [sp, #40]	; 0x28
 8011a78:	e7bf      	b.n	80119fa <_dtoa_r+0x1da>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	9308      	str	r3, [sp, #32]
 8011a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dc55      	bgt.n	8011b30 <_dtoa_r+0x310>
 8011a84:	2301      	movs	r3, #1
 8011a86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a8e:	e00c      	b.n	8011aaa <_dtoa_r+0x28a>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e7f3      	b.n	8011a7c <_dtoa_r+0x25c>
 8011a94:	2300      	movs	r3, #0
 8011a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a98:	9308      	str	r3, [sp, #32]
 8011a9a:	9b00      	ldr	r3, [sp, #0]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	9302      	str	r3, [sp, #8]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	9303      	str	r3, [sp, #12]
 8011aa6:	bfb8      	it	lt
 8011aa8:	2301      	movlt	r3, #1
 8011aaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011aac:	2200      	movs	r2, #0
 8011aae:	6042      	str	r2, [r0, #4]
 8011ab0:	2204      	movs	r2, #4
 8011ab2:	f102 0614 	add.w	r6, r2, #20
 8011ab6:	429e      	cmp	r6, r3
 8011ab8:	6841      	ldr	r1, [r0, #4]
 8011aba:	d93d      	bls.n	8011b38 <_dtoa_r+0x318>
 8011abc:	4620      	mov	r0, r4
 8011abe:	f000 fef3 	bl	80128a8 <_Balloc>
 8011ac2:	9001      	str	r0, [sp, #4]
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d13b      	bne.n	8011b40 <_dtoa_r+0x320>
 8011ac8:	4b11      	ldr	r3, [pc, #68]	; (8011b10 <_dtoa_r+0x2f0>)
 8011aca:	4602      	mov	r2, r0
 8011acc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011ad0:	e6c0      	b.n	8011854 <_dtoa_r+0x34>
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	e7df      	b.n	8011a96 <_dtoa_r+0x276>
 8011ad6:	bf00      	nop
 8011ad8:	636f4361 	.word	0x636f4361
 8011adc:	3fd287a7 	.word	0x3fd287a7
 8011ae0:	8b60c8b3 	.word	0x8b60c8b3
 8011ae4:	3fc68a28 	.word	0x3fc68a28
 8011ae8:	509f79fb 	.word	0x509f79fb
 8011aec:	3fd34413 	.word	0x3fd34413
 8011af0:	080145ea 	.word	0x080145ea
 8011af4:	080147a8 	.word	0x080147a8
 8011af8:	7ff00000 	.word	0x7ff00000
 8011afc:	080147a4 	.word	0x080147a4
 8011b00:	0801479b 	.word	0x0801479b
 8011b04:	080149e2 	.word	0x080149e2
 8011b08:	3ff80000 	.word	0x3ff80000
 8011b0c:	080148f8 	.word	0x080148f8
 8011b10:	08014803 	.word	0x08014803
 8011b14:	2501      	movs	r5, #1
 8011b16:	2300      	movs	r3, #0
 8011b18:	9306      	str	r3, [sp, #24]
 8011b1a:	9508      	str	r5, [sp, #32]
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011b24:	2200      	movs	r2, #0
 8011b26:	2312      	movs	r3, #18
 8011b28:	e7b0      	b.n	8011a8c <_dtoa_r+0x26c>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	9308      	str	r3, [sp, #32]
 8011b2e:	e7f5      	b.n	8011b1c <_dtoa_r+0x2fc>
 8011b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011b36:	e7b8      	b.n	8011aaa <_dtoa_r+0x28a>
 8011b38:	3101      	adds	r1, #1
 8011b3a:	6041      	str	r1, [r0, #4]
 8011b3c:	0052      	lsls	r2, r2, #1
 8011b3e:	e7b8      	b.n	8011ab2 <_dtoa_r+0x292>
 8011b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b42:	9a01      	ldr	r2, [sp, #4]
 8011b44:	601a      	str	r2, [r3, #0]
 8011b46:	9b03      	ldr	r3, [sp, #12]
 8011b48:	2b0e      	cmp	r3, #14
 8011b4a:	f200 809d 	bhi.w	8011c88 <_dtoa_r+0x468>
 8011b4e:	2d00      	cmp	r5, #0
 8011b50:	f000 809a 	beq.w	8011c88 <_dtoa_r+0x468>
 8011b54:	9b00      	ldr	r3, [sp, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dd32      	ble.n	8011bc0 <_dtoa_r+0x3a0>
 8011b5a:	4ab7      	ldr	r2, [pc, #732]	; (8011e38 <_dtoa_r+0x618>)
 8011b5c:	f003 030f 	and.w	r3, r3, #15
 8011b60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011b64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b68:	9b00      	ldr	r3, [sp, #0]
 8011b6a:	05d8      	lsls	r0, r3, #23
 8011b6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011b70:	d516      	bpl.n	8011ba0 <_dtoa_r+0x380>
 8011b72:	4bb2      	ldr	r3, [pc, #712]	; (8011e3c <_dtoa_r+0x61c>)
 8011b74:	ec51 0b19 	vmov	r0, r1, d9
 8011b78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b7c:	f7ee fe76 	bl	800086c <__aeabi_ddiv>
 8011b80:	f007 070f 	and.w	r7, r7, #15
 8011b84:	4682      	mov	sl, r0
 8011b86:	468b      	mov	fp, r1
 8011b88:	2503      	movs	r5, #3
 8011b8a:	4eac      	ldr	r6, [pc, #688]	; (8011e3c <_dtoa_r+0x61c>)
 8011b8c:	b957      	cbnz	r7, 8011ba4 <_dtoa_r+0x384>
 8011b8e:	4642      	mov	r2, r8
 8011b90:	464b      	mov	r3, r9
 8011b92:	4650      	mov	r0, sl
 8011b94:	4659      	mov	r1, fp
 8011b96:	f7ee fe69 	bl	800086c <__aeabi_ddiv>
 8011b9a:	4682      	mov	sl, r0
 8011b9c:	468b      	mov	fp, r1
 8011b9e:	e028      	b.n	8011bf2 <_dtoa_r+0x3d2>
 8011ba0:	2502      	movs	r5, #2
 8011ba2:	e7f2      	b.n	8011b8a <_dtoa_r+0x36a>
 8011ba4:	07f9      	lsls	r1, r7, #31
 8011ba6:	d508      	bpl.n	8011bba <_dtoa_r+0x39a>
 8011ba8:	4640      	mov	r0, r8
 8011baa:	4649      	mov	r1, r9
 8011bac:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011bb0:	f7ee fd32 	bl	8000618 <__aeabi_dmul>
 8011bb4:	3501      	adds	r5, #1
 8011bb6:	4680      	mov	r8, r0
 8011bb8:	4689      	mov	r9, r1
 8011bba:	107f      	asrs	r7, r7, #1
 8011bbc:	3608      	adds	r6, #8
 8011bbe:	e7e5      	b.n	8011b8c <_dtoa_r+0x36c>
 8011bc0:	f000 809b 	beq.w	8011cfa <_dtoa_r+0x4da>
 8011bc4:	9b00      	ldr	r3, [sp, #0]
 8011bc6:	4f9d      	ldr	r7, [pc, #628]	; (8011e3c <_dtoa_r+0x61c>)
 8011bc8:	425e      	negs	r6, r3
 8011bca:	4b9b      	ldr	r3, [pc, #620]	; (8011e38 <_dtoa_r+0x618>)
 8011bcc:	f006 020f 	and.w	r2, r6, #15
 8011bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	ec51 0b19 	vmov	r0, r1, d9
 8011bdc:	f7ee fd1c 	bl	8000618 <__aeabi_dmul>
 8011be0:	1136      	asrs	r6, r6, #4
 8011be2:	4682      	mov	sl, r0
 8011be4:	468b      	mov	fp, r1
 8011be6:	2300      	movs	r3, #0
 8011be8:	2502      	movs	r5, #2
 8011bea:	2e00      	cmp	r6, #0
 8011bec:	d17a      	bne.n	8011ce4 <_dtoa_r+0x4c4>
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d1d3      	bne.n	8011b9a <_dtoa_r+0x37a>
 8011bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	f000 8082 	beq.w	8011cfe <_dtoa_r+0x4de>
 8011bfa:	4b91      	ldr	r3, [pc, #580]	; (8011e40 <_dtoa_r+0x620>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	4650      	mov	r0, sl
 8011c00:	4659      	mov	r1, fp
 8011c02:	f7ee ff7b 	bl	8000afc <__aeabi_dcmplt>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d079      	beq.n	8011cfe <_dtoa_r+0x4de>
 8011c0a:	9b03      	ldr	r3, [sp, #12]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d076      	beq.n	8011cfe <_dtoa_r+0x4de>
 8011c10:	9b02      	ldr	r3, [sp, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	dd36      	ble.n	8011c84 <_dtoa_r+0x464>
 8011c16:	9b00      	ldr	r3, [sp, #0]
 8011c18:	4650      	mov	r0, sl
 8011c1a:	4659      	mov	r1, fp
 8011c1c:	1e5f      	subs	r7, r3, #1
 8011c1e:	2200      	movs	r2, #0
 8011c20:	4b88      	ldr	r3, [pc, #544]	; (8011e44 <_dtoa_r+0x624>)
 8011c22:	f7ee fcf9 	bl	8000618 <__aeabi_dmul>
 8011c26:	9e02      	ldr	r6, [sp, #8]
 8011c28:	4682      	mov	sl, r0
 8011c2a:	468b      	mov	fp, r1
 8011c2c:	3501      	adds	r5, #1
 8011c2e:	4628      	mov	r0, r5
 8011c30:	f7ee fc88 	bl	8000544 <__aeabi_i2d>
 8011c34:	4652      	mov	r2, sl
 8011c36:	465b      	mov	r3, fp
 8011c38:	f7ee fcee 	bl	8000618 <__aeabi_dmul>
 8011c3c:	4b82      	ldr	r3, [pc, #520]	; (8011e48 <_dtoa_r+0x628>)
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f7ee fb34 	bl	80002ac <__adddf3>
 8011c44:	46d0      	mov	r8, sl
 8011c46:	46d9      	mov	r9, fp
 8011c48:	4682      	mov	sl, r0
 8011c4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011c4e:	2e00      	cmp	r6, #0
 8011c50:	d158      	bne.n	8011d04 <_dtoa_r+0x4e4>
 8011c52:	4b7e      	ldr	r3, [pc, #504]	; (8011e4c <_dtoa_r+0x62c>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	4640      	mov	r0, r8
 8011c58:	4649      	mov	r1, r9
 8011c5a:	f7ee fb25 	bl	80002a8 <__aeabi_dsub>
 8011c5e:	4652      	mov	r2, sl
 8011c60:	465b      	mov	r3, fp
 8011c62:	4680      	mov	r8, r0
 8011c64:	4689      	mov	r9, r1
 8011c66:	f7ee ff67 	bl	8000b38 <__aeabi_dcmpgt>
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	f040 8295 	bne.w	801219a <_dtoa_r+0x97a>
 8011c70:	4652      	mov	r2, sl
 8011c72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011c76:	4640      	mov	r0, r8
 8011c78:	4649      	mov	r1, r9
 8011c7a:	f7ee ff3f 	bl	8000afc <__aeabi_dcmplt>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	f040 8289 	bne.w	8012196 <_dtoa_r+0x976>
 8011c84:	ec5b ab19 	vmov	sl, fp, d9
 8011c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f2c0 8148 	blt.w	8011f20 <_dtoa_r+0x700>
 8011c90:	9a00      	ldr	r2, [sp, #0]
 8011c92:	2a0e      	cmp	r2, #14
 8011c94:	f300 8144 	bgt.w	8011f20 <_dtoa_r+0x700>
 8011c98:	4b67      	ldr	r3, [pc, #412]	; (8011e38 <_dtoa_r+0x618>)
 8011c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	f280 80d5 	bge.w	8011e54 <_dtoa_r+0x634>
 8011caa:	9b03      	ldr	r3, [sp, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f300 80d1 	bgt.w	8011e54 <_dtoa_r+0x634>
 8011cb2:	f040 826f 	bne.w	8012194 <_dtoa_r+0x974>
 8011cb6:	4b65      	ldr	r3, [pc, #404]	; (8011e4c <_dtoa_r+0x62c>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	4640      	mov	r0, r8
 8011cbc:	4649      	mov	r1, r9
 8011cbe:	f7ee fcab 	bl	8000618 <__aeabi_dmul>
 8011cc2:	4652      	mov	r2, sl
 8011cc4:	465b      	mov	r3, fp
 8011cc6:	f7ee ff2d 	bl	8000b24 <__aeabi_dcmpge>
 8011cca:	9e03      	ldr	r6, [sp, #12]
 8011ccc:	4637      	mov	r7, r6
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	f040 8245 	bne.w	801215e <_dtoa_r+0x93e>
 8011cd4:	9d01      	ldr	r5, [sp, #4]
 8011cd6:	2331      	movs	r3, #49	; 0x31
 8011cd8:	f805 3b01 	strb.w	r3, [r5], #1
 8011cdc:	9b00      	ldr	r3, [sp, #0]
 8011cde:	3301      	adds	r3, #1
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	e240      	b.n	8012166 <_dtoa_r+0x946>
 8011ce4:	07f2      	lsls	r2, r6, #31
 8011ce6:	d505      	bpl.n	8011cf4 <_dtoa_r+0x4d4>
 8011ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011cec:	f7ee fc94 	bl	8000618 <__aeabi_dmul>
 8011cf0:	3501      	adds	r5, #1
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	1076      	asrs	r6, r6, #1
 8011cf6:	3708      	adds	r7, #8
 8011cf8:	e777      	b.n	8011bea <_dtoa_r+0x3ca>
 8011cfa:	2502      	movs	r5, #2
 8011cfc:	e779      	b.n	8011bf2 <_dtoa_r+0x3d2>
 8011cfe:	9f00      	ldr	r7, [sp, #0]
 8011d00:	9e03      	ldr	r6, [sp, #12]
 8011d02:	e794      	b.n	8011c2e <_dtoa_r+0x40e>
 8011d04:	9901      	ldr	r1, [sp, #4]
 8011d06:	4b4c      	ldr	r3, [pc, #304]	; (8011e38 <_dtoa_r+0x618>)
 8011d08:	4431      	add	r1, r6
 8011d0a:	910d      	str	r1, [sp, #52]	; 0x34
 8011d0c:	9908      	ldr	r1, [sp, #32]
 8011d0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011d12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011d16:	2900      	cmp	r1, #0
 8011d18:	d043      	beq.n	8011da2 <_dtoa_r+0x582>
 8011d1a:	494d      	ldr	r1, [pc, #308]	; (8011e50 <_dtoa_r+0x630>)
 8011d1c:	2000      	movs	r0, #0
 8011d1e:	f7ee fda5 	bl	800086c <__aeabi_ddiv>
 8011d22:	4652      	mov	r2, sl
 8011d24:	465b      	mov	r3, fp
 8011d26:	f7ee fabf 	bl	80002a8 <__aeabi_dsub>
 8011d2a:	9d01      	ldr	r5, [sp, #4]
 8011d2c:	4682      	mov	sl, r0
 8011d2e:	468b      	mov	fp, r1
 8011d30:	4649      	mov	r1, r9
 8011d32:	4640      	mov	r0, r8
 8011d34:	f7ee ff20 	bl	8000b78 <__aeabi_d2iz>
 8011d38:	4606      	mov	r6, r0
 8011d3a:	f7ee fc03 	bl	8000544 <__aeabi_i2d>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	4640      	mov	r0, r8
 8011d44:	4649      	mov	r1, r9
 8011d46:	f7ee faaf 	bl	80002a8 <__aeabi_dsub>
 8011d4a:	3630      	adds	r6, #48	; 0x30
 8011d4c:	f805 6b01 	strb.w	r6, [r5], #1
 8011d50:	4652      	mov	r2, sl
 8011d52:	465b      	mov	r3, fp
 8011d54:	4680      	mov	r8, r0
 8011d56:	4689      	mov	r9, r1
 8011d58:	f7ee fed0 	bl	8000afc <__aeabi_dcmplt>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d163      	bne.n	8011e28 <_dtoa_r+0x608>
 8011d60:	4642      	mov	r2, r8
 8011d62:	464b      	mov	r3, r9
 8011d64:	4936      	ldr	r1, [pc, #216]	; (8011e40 <_dtoa_r+0x620>)
 8011d66:	2000      	movs	r0, #0
 8011d68:	f7ee fa9e 	bl	80002a8 <__aeabi_dsub>
 8011d6c:	4652      	mov	r2, sl
 8011d6e:	465b      	mov	r3, fp
 8011d70:	f7ee fec4 	bl	8000afc <__aeabi_dcmplt>
 8011d74:	2800      	cmp	r0, #0
 8011d76:	f040 80b5 	bne.w	8011ee4 <_dtoa_r+0x6c4>
 8011d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d7c:	429d      	cmp	r5, r3
 8011d7e:	d081      	beq.n	8011c84 <_dtoa_r+0x464>
 8011d80:	4b30      	ldr	r3, [pc, #192]	; (8011e44 <_dtoa_r+0x624>)
 8011d82:	2200      	movs	r2, #0
 8011d84:	4650      	mov	r0, sl
 8011d86:	4659      	mov	r1, fp
 8011d88:	f7ee fc46 	bl	8000618 <__aeabi_dmul>
 8011d8c:	4b2d      	ldr	r3, [pc, #180]	; (8011e44 <_dtoa_r+0x624>)
 8011d8e:	4682      	mov	sl, r0
 8011d90:	468b      	mov	fp, r1
 8011d92:	4640      	mov	r0, r8
 8011d94:	4649      	mov	r1, r9
 8011d96:	2200      	movs	r2, #0
 8011d98:	f7ee fc3e 	bl	8000618 <__aeabi_dmul>
 8011d9c:	4680      	mov	r8, r0
 8011d9e:	4689      	mov	r9, r1
 8011da0:	e7c6      	b.n	8011d30 <_dtoa_r+0x510>
 8011da2:	4650      	mov	r0, sl
 8011da4:	4659      	mov	r1, fp
 8011da6:	f7ee fc37 	bl	8000618 <__aeabi_dmul>
 8011daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dac:	9d01      	ldr	r5, [sp, #4]
 8011dae:	930f      	str	r3, [sp, #60]	; 0x3c
 8011db0:	4682      	mov	sl, r0
 8011db2:	468b      	mov	fp, r1
 8011db4:	4649      	mov	r1, r9
 8011db6:	4640      	mov	r0, r8
 8011db8:	f7ee fede 	bl	8000b78 <__aeabi_d2iz>
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	f7ee fbc1 	bl	8000544 <__aeabi_i2d>
 8011dc2:	3630      	adds	r6, #48	; 0x30
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	4640      	mov	r0, r8
 8011dca:	4649      	mov	r1, r9
 8011dcc:	f7ee fa6c 	bl	80002a8 <__aeabi_dsub>
 8011dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8011dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dd6:	429d      	cmp	r5, r3
 8011dd8:	4680      	mov	r8, r0
 8011dda:	4689      	mov	r9, r1
 8011ddc:	f04f 0200 	mov.w	r2, #0
 8011de0:	d124      	bne.n	8011e2c <_dtoa_r+0x60c>
 8011de2:	4b1b      	ldr	r3, [pc, #108]	; (8011e50 <_dtoa_r+0x630>)
 8011de4:	4650      	mov	r0, sl
 8011de6:	4659      	mov	r1, fp
 8011de8:	f7ee fa60 	bl	80002ac <__adddf3>
 8011dec:	4602      	mov	r2, r0
 8011dee:	460b      	mov	r3, r1
 8011df0:	4640      	mov	r0, r8
 8011df2:	4649      	mov	r1, r9
 8011df4:	f7ee fea0 	bl	8000b38 <__aeabi_dcmpgt>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	d173      	bne.n	8011ee4 <_dtoa_r+0x6c4>
 8011dfc:	4652      	mov	r2, sl
 8011dfe:	465b      	mov	r3, fp
 8011e00:	4913      	ldr	r1, [pc, #76]	; (8011e50 <_dtoa_r+0x630>)
 8011e02:	2000      	movs	r0, #0
 8011e04:	f7ee fa50 	bl	80002a8 <__aeabi_dsub>
 8011e08:	4602      	mov	r2, r0
 8011e0a:	460b      	mov	r3, r1
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	4649      	mov	r1, r9
 8011e10:	f7ee fe74 	bl	8000afc <__aeabi_dcmplt>
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f43f af35 	beq.w	8011c84 <_dtoa_r+0x464>
 8011e1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011e1c:	1e6b      	subs	r3, r5, #1
 8011e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011e24:	2b30      	cmp	r3, #48	; 0x30
 8011e26:	d0f8      	beq.n	8011e1a <_dtoa_r+0x5fa>
 8011e28:	9700      	str	r7, [sp, #0]
 8011e2a:	e049      	b.n	8011ec0 <_dtoa_r+0x6a0>
 8011e2c:	4b05      	ldr	r3, [pc, #20]	; (8011e44 <_dtoa_r+0x624>)
 8011e2e:	f7ee fbf3 	bl	8000618 <__aeabi_dmul>
 8011e32:	4680      	mov	r8, r0
 8011e34:	4689      	mov	r9, r1
 8011e36:	e7bd      	b.n	8011db4 <_dtoa_r+0x594>
 8011e38:	080148f8 	.word	0x080148f8
 8011e3c:	080148d0 	.word	0x080148d0
 8011e40:	3ff00000 	.word	0x3ff00000
 8011e44:	40240000 	.word	0x40240000
 8011e48:	401c0000 	.word	0x401c0000
 8011e4c:	40140000 	.word	0x40140000
 8011e50:	3fe00000 	.word	0x3fe00000
 8011e54:	9d01      	ldr	r5, [sp, #4]
 8011e56:	4656      	mov	r6, sl
 8011e58:	465f      	mov	r7, fp
 8011e5a:	4642      	mov	r2, r8
 8011e5c:	464b      	mov	r3, r9
 8011e5e:	4630      	mov	r0, r6
 8011e60:	4639      	mov	r1, r7
 8011e62:	f7ee fd03 	bl	800086c <__aeabi_ddiv>
 8011e66:	f7ee fe87 	bl	8000b78 <__aeabi_d2iz>
 8011e6a:	4682      	mov	sl, r0
 8011e6c:	f7ee fb6a 	bl	8000544 <__aeabi_i2d>
 8011e70:	4642      	mov	r2, r8
 8011e72:	464b      	mov	r3, r9
 8011e74:	f7ee fbd0 	bl	8000618 <__aeabi_dmul>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4630      	mov	r0, r6
 8011e7e:	4639      	mov	r1, r7
 8011e80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011e84:	f7ee fa10 	bl	80002a8 <__aeabi_dsub>
 8011e88:	f805 6b01 	strb.w	r6, [r5], #1
 8011e8c:	9e01      	ldr	r6, [sp, #4]
 8011e8e:	9f03      	ldr	r7, [sp, #12]
 8011e90:	1bae      	subs	r6, r5, r6
 8011e92:	42b7      	cmp	r7, r6
 8011e94:	4602      	mov	r2, r0
 8011e96:	460b      	mov	r3, r1
 8011e98:	d135      	bne.n	8011f06 <_dtoa_r+0x6e6>
 8011e9a:	f7ee fa07 	bl	80002ac <__adddf3>
 8011e9e:	4642      	mov	r2, r8
 8011ea0:	464b      	mov	r3, r9
 8011ea2:	4606      	mov	r6, r0
 8011ea4:	460f      	mov	r7, r1
 8011ea6:	f7ee fe47 	bl	8000b38 <__aeabi_dcmpgt>
 8011eaa:	b9d0      	cbnz	r0, 8011ee2 <_dtoa_r+0x6c2>
 8011eac:	4642      	mov	r2, r8
 8011eae:	464b      	mov	r3, r9
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	4639      	mov	r1, r7
 8011eb4:	f7ee fe18 	bl	8000ae8 <__aeabi_dcmpeq>
 8011eb8:	b110      	cbz	r0, 8011ec0 <_dtoa_r+0x6a0>
 8011eba:	f01a 0f01 	tst.w	sl, #1
 8011ebe:	d110      	bne.n	8011ee2 <_dtoa_r+0x6c2>
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	ee18 1a10 	vmov	r1, s16
 8011ec6:	f000 fd2f 	bl	8012928 <_Bfree>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	9800      	ldr	r0, [sp, #0]
 8011ece:	702b      	strb	r3, [r5, #0]
 8011ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ed2:	3001      	adds	r0, #1
 8011ed4:	6018      	str	r0, [r3, #0]
 8011ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f43f acf1 	beq.w	80118c0 <_dtoa_r+0xa0>
 8011ede:	601d      	str	r5, [r3, #0]
 8011ee0:	e4ee      	b.n	80118c0 <_dtoa_r+0xa0>
 8011ee2:	9f00      	ldr	r7, [sp, #0]
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011eec:	2a39      	cmp	r2, #57	; 0x39
 8011eee:	d106      	bne.n	8011efe <_dtoa_r+0x6de>
 8011ef0:	9a01      	ldr	r2, [sp, #4]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d1f7      	bne.n	8011ee6 <_dtoa_r+0x6c6>
 8011ef6:	9901      	ldr	r1, [sp, #4]
 8011ef8:	2230      	movs	r2, #48	; 0x30
 8011efa:	3701      	adds	r7, #1
 8011efc:	700a      	strb	r2, [r1, #0]
 8011efe:	781a      	ldrb	r2, [r3, #0]
 8011f00:	3201      	adds	r2, #1
 8011f02:	701a      	strb	r2, [r3, #0]
 8011f04:	e790      	b.n	8011e28 <_dtoa_r+0x608>
 8011f06:	4ba6      	ldr	r3, [pc, #664]	; (80121a0 <_dtoa_r+0x980>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f7ee fb85 	bl	8000618 <__aeabi_dmul>
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2300      	movs	r3, #0
 8011f12:	4606      	mov	r6, r0
 8011f14:	460f      	mov	r7, r1
 8011f16:	f7ee fde7 	bl	8000ae8 <__aeabi_dcmpeq>
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	d09d      	beq.n	8011e5a <_dtoa_r+0x63a>
 8011f1e:	e7cf      	b.n	8011ec0 <_dtoa_r+0x6a0>
 8011f20:	9a08      	ldr	r2, [sp, #32]
 8011f22:	2a00      	cmp	r2, #0
 8011f24:	f000 80d7 	beq.w	80120d6 <_dtoa_r+0x8b6>
 8011f28:	9a06      	ldr	r2, [sp, #24]
 8011f2a:	2a01      	cmp	r2, #1
 8011f2c:	f300 80ba 	bgt.w	80120a4 <_dtoa_r+0x884>
 8011f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f32:	2a00      	cmp	r2, #0
 8011f34:	f000 80b2 	beq.w	801209c <_dtoa_r+0x87c>
 8011f38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011f3c:	9e07      	ldr	r6, [sp, #28]
 8011f3e:	9d04      	ldr	r5, [sp, #16]
 8011f40:	9a04      	ldr	r2, [sp, #16]
 8011f42:	441a      	add	r2, r3
 8011f44:	9204      	str	r2, [sp, #16]
 8011f46:	9a05      	ldr	r2, [sp, #20]
 8011f48:	2101      	movs	r1, #1
 8011f4a:	441a      	add	r2, r3
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	9205      	str	r2, [sp, #20]
 8011f50:	f000 fda2 	bl	8012a98 <__i2b>
 8011f54:	4607      	mov	r7, r0
 8011f56:	2d00      	cmp	r5, #0
 8011f58:	dd0c      	ble.n	8011f74 <_dtoa_r+0x754>
 8011f5a:	9b05      	ldr	r3, [sp, #20]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	dd09      	ble.n	8011f74 <_dtoa_r+0x754>
 8011f60:	42ab      	cmp	r3, r5
 8011f62:	9a04      	ldr	r2, [sp, #16]
 8011f64:	bfa8      	it	ge
 8011f66:	462b      	movge	r3, r5
 8011f68:	1ad2      	subs	r2, r2, r3
 8011f6a:	9204      	str	r2, [sp, #16]
 8011f6c:	9a05      	ldr	r2, [sp, #20]
 8011f6e:	1aed      	subs	r5, r5, r3
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	9305      	str	r3, [sp, #20]
 8011f74:	9b07      	ldr	r3, [sp, #28]
 8011f76:	b31b      	cbz	r3, 8011fc0 <_dtoa_r+0x7a0>
 8011f78:	9b08      	ldr	r3, [sp, #32]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 80af 	beq.w	80120de <_dtoa_r+0x8be>
 8011f80:	2e00      	cmp	r6, #0
 8011f82:	dd13      	ble.n	8011fac <_dtoa_r+0x78c>
 8011f84:	4639      	mov	r1, r7
 8011f86:	4632      	mov	r2, r6
 8011f88:	4620      	mov	r0, r4
 8011f8a:	f000 fe45 	bl	8012c18 <__pow5mult>
 8011f8e:	ee18 2a10 	vmov	r2, s16
 8011f92:	4601      	mov	r1, r0
 8011f94:	4607      	mov	r7, r0
 8011f96:	4620      	mov	r0, r4
 8011f98:	f000 fd94 	bl	8012ac4 <__multiply>
 8011f9c:	ee18 1a10 	vmov	r1, s16
 8011fa0:	4680      	mov	r8, r0
 8011fa2:	4620      	mov	r0, r4
 8011fa4:	f000 fcc0 	bl	8012928 <_Bfree>
 8011fa8:	ee08 8a10 	vmov	s16, r8
 8011fac:	9b07      	ldr	r3, [sp, #28]
 8011fae:	1b9a      	subs	r2, r3, r6
 8011fb0:	d006      	beq.n	8011fc0 <_dtoa_r+0x7a0>
 8011fb2:	ee18 1a10 	vmov	r1, s16
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 fe2e 	bl	8012c18 <__pow5mult>
 8011fbc:	ee08 0a10 	vmov	s16, r0
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f000 fd68 	bl	8012a98 <__i2b>
 8011fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	4606      	mov	r6, r0
 8011fce:	f340 8088 	ble.w	80120e2 <_dtoa_r+0x8c2>
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	4601      	mov	r1, r0
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f000 fe1e 	bl	8012c18 <__pow5mult>
 8011fdc:	9b06      	ldr	r3, [sp, #24]
 8011fde:	2b01      	cmp	r3, #1
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	f340 8081 	ble.w	80120e8 <_dtoa_r+0x8c8>
 8011fe6:	f04f 0800 	mov.w	r8, #0
 8011fea:	6933      	ldr	r3, [r6, #16]
 8011fec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011ff0:	6918      	ldr	r0, [r3, #16]
 8011ff2:	f000 fd01 	bl	80129f8 <__hi0bits>
 8011ff6:	f1c0 0020 	rsb	r0, r0, #32
 8011ffa:	9b05      	ldr	r3, [sp, #20]
 8011ffc:	4418      	add	r0, r3
 8011ffe:	f010 001f 	ands.w	r0, r0, #31
 8012002:	f000 8092 	beq.w	801212a <_dtoa_r+0x90a>
 8012006:	f1c0 0320 	rsb	r3, r0, #32
 801200a:	2b04      	cmp	r3, #4
 801200c:	f340 808a 	ble.w	8012124 <_dtoa_r+0x904>
 8012010:	f1c0 001c 	rsb	r0, r0, #28
 8012014:	9b04      	ldr	r3, [sp, #16]
 8012016:	4403      	add	r3, r0
 8012018:	9304      	str	r3, [sp, #16]
 801201a:	9b05      	ldr	r3, [sp, #20]
 801201c:	4403      	add	r3, r0
 801201e:	4405      	add	r5, r0
 8012020:	9305      	str	r3, [sp, #20]
 8012022:	9b04      	ldr	r3, [sp, #16]
 8012024:	2b00      	cmp	r3, #0
 8012026:	dd07      	ble.n	8012038 <_dtoa_r+0x818>
 8012028:	ee18 1a10 	vmov	r1, s16
 801202c:	461a      	mov	r2, r3
 801202e:	4620      	mov	r0, r4
 8012030:	f000 fe4c 	bl	8012ccc <__lshift>
 8012034:	ee08 0a10 	vmov	s16, r0
 8012038:	9b05      	ldr	r3, [sp, #20]
 801203a:	2b00      	cmp	r3, #0
 801203c:	dd05      	ble.n	801204a <_dtoa_r+0x82a>
 801203e:	4631      	mov	r1, r6
 8012040:	461a      	mov	r2, r3
 8012042:	4620      	mov	r0, r4
 8012044:	f000 fe42 	bl	8012ccc <__lshift>
 8012048:	4606      	mov	r6, r0
 801204a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801204c:	2b00      	cmp	r3, #0
 801204e:	d06e      	beq.n	801212e <_dtoa_r+0x90e>
 8012050:	ee18 0a10 	vmov	r0, s16
 8012054:	4631      	mov	r1, r6
 8012056:	f000 fea9 	bl	8012dac <__mcmp>
 801205a:	2800      	cmp	r0, #0
 801205c:	da67      	bge.n	801212e <_dtoa_r+0x90e>
 801205e:	9b00      	ldr	r3, [sp, #0]
 8012060:	3b01      	subs	r3, #1
 8012062:	ee18 1a10 	vmov	r1, s16
 8012066:	9300      	str	r3, [sp, #0]
 8012068:	220a      	movs	r2, #10
 801206a:	2300      	movs	r3, #0
 801206c:	4620      	mov	r0, r4
 801206e:	f000 fc7d 	bl	801296c <__multadd>
 8012072:	9b08      	ldr	r3, [sp, #32]
 8012074:	ee08 0a10 	vmov	s16, r0
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 81b1 	beq.w	80123e0 <_dtoa_r+0xbc0>
 801207e:	2300      	movs	r3, #0
 8012080:	4639      	mov	r1, r7
 8012082:	220a      	movs	r2, #10
 8012084:	4620      	mov	r0, r4
 8012086:	f000 fc71 	bl	801296c <__multadd>
 801208a:	9b02      	ldr	r3, [sp, #8]
 801208c:	2b00      	cmp	r3, #0
 801208e:	4607      	mov	r7, r0
 8012090:	f300 808e 	bgt.w	80121b0 <_dtoa_r+0x990>
 8012094:	9b06      	ldr	r3, [sp, #24]
 8012096:	2b02      	cmp	r3, #2
 8012098:	dc51      	bgt.n	801213e <_dtoa_r+0x91e>
 801209a:	e089      	b.n	80121b0 <_dtoa_r+0x990>
 801209c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801209e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80120a2:	e74b      	b.n	8011f3c <_dtoa_r+0x71c>
 80120a4:	9b03      	ldr	r3, [sp, #12]
 80120a6:	1e5e      	subs	r6, r3, #1
 80120a8:	9b07      	ldr	r3, [sp, #28]
 80120aa:	42b3      	cmp	r3, r6
 80120ac:	bfbf      	itttt	lt
 80120ae:	9b07      	ldrlt	r3, [sp, #28]
 80120b0:	9607      	strlt	r6, [sp, #28]
 80120b2:	1af2      	sublt	r2, r6, r3
 80120b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80120b6:	bfb6      	itet	lt
 80120b8:	189b      	addlt	r3, r3, r2
 80120ba:	1b9e      	subge	r6, r3, r6
 80120bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80120be:	9b03      	ldr	r3, [sp, #12]
 80120c0:	bfb8      	it	lt
 80120c2:	2600      	movlt	r6, #0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	bfb7      	itett	lt
 80120c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80120cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80120d0:	1a9d      	sublt	r5, r3, r2
 80120d2:	2300      	movlt	r3, #0
 80120d4:	e734      	b.n	8011f40 <_dtoa_r+0x720>
 80120d6:	9e07      	ldr	r6, [sp, #28]
 80120d8:	9d04      	ldr	r5, [sp, #16]
 80120da:	9f08      	ldr	r7, [sp, #32]
 80120dc:	e73b      	b.n	8011f56 <_dtoa_r+0x736>
 80120de:	9a07      	ldr	r2, [sp, #28]
 80120e0:	e767      	b.n	8011fb2 <_dtoa_r+0x792>
 80120e2:	9b06      	ldr	r3, [sp, #24]
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	dc18      	bgt.n	801211a <_dtoa_r+0x8fa>
 80120e8:	f1ba 0f00 	cmp.w	sl, #0
 80120ec:	d115      	bne.n	801211a <_dtoa_r+0x8fa>
 80120ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120f2:	b993      	cbnz	r3, 801211a <_dtoa_r+0x8fa>
 80120f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80120f8:	0d1b      	lsrs	r3, r3, #20
 80120fa:	051b      	lsls	r3, r3, #20
 80120fc:	b183      	cbz	r3, 8012120 <_dtoa_r+0x900>
 80120fe:	9b04      	ldr	r3, [sp, #16]
 8012100:	3301      	adds	r3, #1
 8012102:	9304      	str	r3, [sp, #16]
 8012104:	9b05      	ldr	r3, [sp, #20]
 8012106:	3301      	adds	r3, #1
 8012108:	9305      	str	r3, [sp, #20]
 801210a:	f04f 0801 	mov.w	r8, #1
 801210e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012110:	2b00      	cmp	r3, #0
 8012112:	f47f af6a 	bne.w	8011fea <_dtoa_r+0x7ca>
 8012116:	2001      	movs	r0, #1
 8012118:	e76f      	b.n	8011ffa <_dtoa_r+0x7da>
 801211a:	f04f 0800 	mov.w	r8, #0
 801211e:	e7f6      	b.n	801210e <_dtoa_r+0x8ee>
 8012120:	4698      	mov	r8, r3
 8012122:	e7f4      	b.n	801210e <_dtoa_r+0x8ee>
 8012124:	f43f af7d 	beq.w	8012022 <_dtoa_r+0x802>
 8012128:	4618      	mov	r0, r3
 801212a:	301c      	adds	r0, #28
 801212c:	e772      	b.n	8012014 <_dtoa_r+0x7f4>
 801212e:	9b03      	ldr	r3, [sp, #12]
 8012130:	2b00      	cmp	r3, #0
 8012132:	dc37      	bgt.n	80121a4 <_dtoa_r+0x984>
 8012134:	9b06      	ldr	r3, [sp, #24]
 8012136:	2b02      	cmp	r3, #2
 8012138:	dd34      	ble.n	80121a4 <_dtoa_r+0x984>
 801213a:	9b03      	ldr	r3, [sp, #12]
 801213c:	9302      	str	r3, [sp, #8]
 801213e:	9b02      	ldr	r3, [sp, #8]
 8012140:	b96b      	cbnz	r3, 801215e <_dtoa_r+0x93e>
 8012142:	4631      	mov	r1, r6
 8012144:	2205      	movs	r2, #5
 8012146:	4620      	mov	r0, r4
 8012148:	f000 fc10 	bl	801296c <__multadd>
 801214c:	4601      	mov	r1, r0
 801214e:	4606      	mov	r6, r0
 8012150:	ee18 0a10 	vmov	r0, s16
 8012154:	f000 fe2a 	bl	8012dac <__mcmp>
 8012158:	2800      	cmp	r0, #0
 801215a:	f73f adbb 	bgt.w	8011cd4 <_dtoa_r+0x4b4>
 801215e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012160:	9d01      	ldr	r5, [sp, #4]
 8012162:	43db      	mvns	r3, r3
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	f04f 0800 	mov.w	r8, #0
 801216a:	4631      	mov	r1, r6
 801216c:	4620      	mov	r0, r4
 801216e:	f000 fbdb 	bl	8012928 <_Bfree>
 8012172:	2f00      	cmp	r7, #0
 8012174:	f43f aea4 	beq.w	8011ec0 <_dtoa_r+0x6a0>
 8012178:	f1b8 0f00 	cmp.w	r8, #0
 801217c:	d005      	beq.n	801218a <_dtoa_r+0x96a>
 801217e:	45b8      	cmp	r8, r7
 8012180:	d003      	beq.n	801218a <_dtoa_r+0x96a>
 8012182:	4641      	mov	r1, r8
 8012184:	4620      	mov	r0, r4
 8012186:	f000 fbcf 	bl	8012928 <_Bfree>
 801218a:	4639      	mov	r1, r7
 801218c:	4620      	mov	r0, r4
 801218e:	f000 fbcb 	bl	8012928 <_Bfree>
 8012192:	e695      	b.n	8011ec0 <_dtoa_r+0x6a0>
 8012194:	2600      	movs	r6, #0
 8012196:	4637      	mov	r7, r6
 8012198:	e7e1      	b.n	801215e <_dtoa_r+0x93e>
 801219a:	9700      	str	r7, [sp, #0]
 801219c:	4637      	mov	r7, r6
 801219e:	e599      	b.n	8011cd4 <_dtoa_r+0x4b4>
 80121a0:	40240000 	.word	0x40240000
 80121a4:	9b08      	ldr	r3, [sp, #32]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f000 80ca 	beq.w	8012340 <_dtoa_r+0xb20>
 80121ac:	9b03      	ldr	r3, [sp, #12]
 80121ae:	9302      	str	r3, [sp, #8]
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	dd05      	ble.n	80121c0 <_dtoa_r+0x9a0>
 80121b4:	4639      	mov	r1, r7
 80121b6:	462a      	mov	r2, r5
 80121b8:	4620      	mov	r0, r4
 80121ba:	f000 fd87 	bl	8012ccc <__lshift>
 80121be:	4607      	mov	r7, r0
 80121c0:	f1b8 0f00 	cmp.w	r8, #0
 80121c4:	d05b      	beq.n	801227e <_dtoa_r+0xa5e>
 80121c6:	6879      	ldr	r1, [r7, #4]
 80121c8:	4620      	mov	r0, r4
 80121ca:	f000 fb6d 	bl	80128a8 <_Balloc>
 80121ce:	4605      	mov	r5, r0
 80121d0:	b928      	cbnz	r0, 80121de <_dtoa_r+0x9be>
 80121d2:	4b87      	ldr	r3, [pc, #540]	; (80123f0 <_dtoa_r+0xbd0>)
 80121d4:	4602      	mov	r2, r0
 80121d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80121da:	f7ff bb3b 	b.w	8011854 <_dtoa_r+0x34>
 80121de:	693a      	ldr	r2, [r7, #16]
 80121e0:	3202      	adds	r2, #2
 80121e2:	0092      	lsls	r2, r2, #2
 80121e4:	f107 010c 	add.w	r1, r7, #12
 80121e8:	300c      	adds	r0, #12
 80121ea:	f7fe f9c7 	bl	801057c <memcpy>
 80121ee:	2201      	movs	r2, #1
 80121f0:	4629      	mov	r1, r5
 80121f2:	4620      	mov	r0, r4
 80121f4:	f000 fd6a 	bl	8012ccc <__lshift>
 80121f8:	9b01      	ldr	r3, [sp, #4]
 80121fa:	f103 0901 	add.w	r9, r3, #1
 80121fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8012202:	4413      	add	r3, r2
 8012204:	9305      	str	r3, [sp, #20]
 8012206:	f00a 0301 	and.w	r3, sl, #1
 801220a:	46b8      	mov	r8, r7
 801220c:	9304      	str	r3, [sp, #16]
 801220e:	4607      	mov	r7, r0
 8012210:	4631      	mov	r1, r6
 8012212:	ee18 0a10 	vmov	r0, s16
 8012216:	f7ff fa77 	bl	8011708 <quorem>
 801221a:	4641      	mov	r1, r8
 801221c:	9002      	str	r0, [sp, #8]
 801221e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012222:	ee18 0a10 	vmov	r0, s16
 8012226:	f000 fdc1 	bl	8012dac <__mcmp>
 801222a:	463a      	mov	r2, r7
 801222c:	9003      	str	r0, [sp, #12]
 801222e:	4631      	mov	r1, r6
 8012230:	4620      	mov	r0, r4
 8012232:	f000 fdd7 	bl	8012de4 <__mdiff>
 8012236:	68c2      	ldr	r2, [r0, #12]
 8012238:	f109 3bff 	add.w	fp, r9, #4294967295
 801223c:	4605      	mov	r5, r0
 801223e:	bb02      	cbnz	r2, 8012282 <_dtoa_r+0xa62>
 8012240:	4601      	mov	r1, r0
 8012242:	ee18 0a10 	vmov	r0, s16
 8012246:	f000 fdb1 	bl	8012dac <__mcmp>
 801224a:	4602      	mov	r2, r0
 801224c:	4629      	mov	r1, r5
 801224e:	4620      	mov	r0, r4
 8012250:	9207      	str	r2, [sp, #28]
 8012252:	f000 fb69 	bl	8012928 <_Bfree>
 8012256:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801225a:	ea43 0102 	orr.w	r1, r3, r2
 801225e:	9b04      	ldr	r3, [sp, #16]
 8012260:	430b      	orrs	r3, r1
 8012262:	464d      	mov	r5, r9
 8012264:	d10f      	bne.n	8012286 <_dtoa_r+0xa66>
 8012266:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801226a:	d02a      	beq.n	80122c2 <_dtoa_r+0xaa2>
 801226c:	9b03      	ldr	r3, [sp, #12]
 801226e:	2b00      	cmp	r3, #0
 8012270:	dd02      	ble.n	8012278 <_dtoa_r+0xa58>
 8012272:	9b02      	ldr	r3, [sp, #8]
 8012274:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012278:	f88b a000 	strb.w	sl, [fp]
 801227c:	e775      	b.n	801216a <_dtoa_r+0x94a>
 801227e:	4638      	mov	r0, r7
 8012280:	e7ba      	b.n	80121f8 <_dtoa_r+0x9d8>
 8012282:	2201      	movs	r2, #1
 8012284:	e7e2      	b.n	801224c <_dtoa_r+0xa2c>
 8012286:	9b03      	ldr	r3, [sp, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	db04      	blt.n	8012296 <_dtoa_r+0xa76>
 801228c:	9906      	ldr	r1, [sp, #24]
 801228e:	430b      	orrs	r3, r1
 8012290:	9904      	ldr	r1, [sp, #16]
 8012292:	430b      	orrs	r3, r1
 8012294:	d122      	bne.n	80122dc <_dtoa_r+0xabc>
 8012296:	2a00      	cmp	r2, #0
 8012298:	ddee      	ble.n	8012278 <_dtoa_r+0xa58>
 801229a:	ee18 1a10 	vmov	r1, s16
 801229e:	2201      	movs	r2, #1
 80122a0:	4620      	mov	r0, r4
 80122a2:	f000 fd13 	bl	8012ccc <__lshift>
 80122a6:	4631      	mov	r1, r6
 80122a8:	ee08 0a10 	vmov	s16, r0
 80122ac:	f000 fd7e 	bl	8012dac <__mcmp>
 80122b0:	2800      	cmp	r0, #0
 80122b2:	dc03      	bgt.n	80122bc <_dtoa_r+0xa9c>
 80122b4:	d1e0      	bne.n	8012278 <_dtoa_r+0xa58>
 80122b6:	f01a 0f01 	tst.w	sl, #1
 80122ba:	d0dd      	beq.n	8012278 <_dtoa_r+0xa58>
 80122bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80122c0:	d1d7      	bne.n	8012272 <_dtoa_r+0xa52>
 80122c2:	2339      	movs	r3, #57	; 0x39
 80122c4:	f88b 3000 	strb.w	r3, [fp]
 80122c8:	462b      	mov	r3, r5
 80122ca:	461d      	mov	r5, r3
 80122cc:	3b01      	subs	r3, #1
 80122ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80122d2:	2a39      	cmp	r2, #57	; 0x39
 80122d4:	d071      	beq.n	80123ba <_dtoa_r+0xb9a>
 80122d6:	3201      	adds	r2, #1
 80122d8:	701a      	strb	r2, [r3, #0]
 80122da:	e746      	b.n	801216a <_dtoa_r+0x94a>
 80122dc:	2a00      	cmp	r2, #0
 80122de:	dd07      	ble.n	80122f0 <_dtoa_r+0xad0>
 80122e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80122e4:	d0ed      	beq.n	80122c2 <_dtoa_r+0xaa2>
 80122e6:	f10a 0301 	add.w	r3, sl, #1
 80122ea:	f88b 3000 	strb.w	r3, [fp]
 80122ee:	e73c      	b.n	801216a <_dtoa_r+0x94a>
 80122f0:	9b05      	ldr	r3, [sp, #20]
 80122f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80122f6:	4599      	cmp	r9, r3
 80122f8:	d047      	beq.n	801238a <_dtoa_r+0xb6a>
 80122fa:	ee18 1a10 	vmov	r1, s16
 80122fe:	2300      	movs	r3, #0
 8012300:	220a      	movs	r2, #10
 8012302:	4620      	mov	r0, r4
 8012304:	f000 fb32 	bl	801296c <__multadd>
 8012308:	45b8      	cmp	r8, r7
 801230a:	ee08 0a10 	vmov	s16, r0
 801230e:	f04f 0300 	mov.w	r3, #0
 8012312:	f04f 020a 	mov.w	r2, #10
 8012316:	4641      	mov	r1, r8
 8012318:	4620      	mov	r0, r4
 801231a:	d106      	bne.n	801232a <_dtoa_r+0xb0a>
 801231c:	f000 fb26 	bl	801296c <__multadd>
 8012320:	4680      	mov	r8, r0
 8012322:	4607      	mov	r7, r0
 8012324:	f109 0901 	add.w	r9, r9, #1
 8012328:	e772      	b.n	8012210 <_dtoa_r+0x9f0>
 801232a:	f000 fb1f 	bl	801296c <__multadd>
 801232e:	4639      	mov	r1, r7
 8012330:	4680      	mov	r8, r0
 8012332:	2300      	movs	r3, #0
 8012334:	220a      	movs	r2, #10
 8012336:	4620      	mov	r0, r4
 8012338:	f000 fb18 	bl	801296c <__multadd>
 801233c:	4607      	mov	r7, r0
 801233e:	e7f1      	b.n	8012324 <_dtoa_r+0xb04>
 8012340:	9b03      	ldr	r3, [sp, #12]
 8012342:	9302      	str	r3, [sp, #8]
 8012344:	9d01      	ldr	r5, [sp, #4]
 8012346:	ee18 0a10 	vmov	r0, s16
 801234a:	4631      	mov	r1, r6
 801234c:	f7ff f9dc 	bl	8011708 <quorem>
 8012350:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012354:	9b01      	ldr	r3, [sp, #4]
 8012356:	f805 ab01 	strb.w	sl, [r5], #1
 801235a:	1aea      	subs	r2, r5, r3
 801235c:	9b02      	ldr	r3, [sp, #8]
 801235e:	4293      	cmp	r3, r2
 8012360:	dd09      	ble.n	8012376 <_dtoa_r+0xb56>
 8012362:	ee18 1a10 	vmov	r1, s16
 8012366:	2300      	movs	r3, #0
 8012368:	220a      	movs	r2, #10
 801236a:	4620      	mov	r0, r4
 801236c:	f000 fafe 	bl	801296c <__multadd>
 8012370:	ee08 0a10 	vmov	s16, r0
 8012374:	e7e7      	b.n	8012346 <_dtoa_r+0xb26>
 8012376:	9b02      	ldr	r3, [sp, #8]
 8012378:	2b00      	cmp	r3, #0
 801237a:	bfc8      	it	gt
 801237c:	461d      	movgt	r5, r3
 801237e:	9b01      	ldr	r3, [sp, #4]
 8012380:	bfd8      	it	le
 8012382:	2501      	movle	r5, #1
 8012384:	441d      	add	r5, r3
 8012386:	f04f 0800 	mov.w	r8, #0
 801238a:	ee18 1a10 	vmov	r1, s16
 801238e:	2201      	movs	r2, #1
 8012390:	4620      	mov	r0, r4
 8012392:	f000 fc9b 	bl	8012ccc <__lshift>
 8012396:	4631      	mov	r1, r6
 8012398:	ee08 0a10 	vmov	s16, r0
 801239c:	f000 fd06 	bl	8012dac <__mcmp>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	dc91      	bgt.n	80122c8 <_dtoa_r+0xaa8>
 80123a4:	d102      	bne.n	80123ac <_dtoa_r+0xb8c>
 80123a6:	f01a 0f01 	tst.w	sl, #1
 80123aa:	d18d      	bne.n	80122c8 <_dtoa_r+0xaa8>
 80123ac:	462b      	mov	r3, r5
 80123ae:	461d      	mov	r5, r3
 80123b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80123b4:	2a30      	cmp	r2, #48	; 0x30
 80123b6:	d0fa      	beq.n	80123ae <_dtoa_r+0xb8e>
 80123b8:	e6d7      	b.n	801216a <_dtoa_r+0x94a>
 80123ba:	9a01      	ldr	r2, [sp, #4]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d184      	bne.n	80122ca <_dtoa_r+0xaaa>
 80123c0:	9b00      	ldr	r3, [sp, #0]
 80123c2:	3301      	adds	r3, #1
 80123c4:	9300      	str	r3, [sp, #0]
 80123c6:	2331      	movs	r3, #49	; 0x31
 80123c8:	7013      	strb	r3, [r2, #0]
 80123ca:	e6ce      	b.n	801216a <_dtoa_r+0x94a>
 80123cc:	4b09      	ldr	r3, [pc, #36]	; (80123f4 <_dtoa_r+0xbd4>)
 80123ce:	f7ff ba95 	b.w	80118fc <_dtoa_r+0xdc>
 80123d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	f47f aa6e 	bne.w	80118b6 <_dtoa_r+0x96>
 80123da:	4b07      	ldr	r3, [pc, #28]	; (80123f8 <_dtoa_r+0xbd8>)
 80123dc:	f7ff ba8e 	b.w	80118fc <_dtoa_r+0xdc>
 80123e0:	9b02      	ldr	r3, [sp, #8]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	dcae      	bgt.n	8012344 <_dtoa_r+0xb24>
 80123e6:	9b06      	ldr	r3, [sp, #24]
 80123e8:	2b02      	cmp	r3, #2
 80123ea:	f73f aea8 	bgt.w	801213e <_dtoa_r+0x91e>
 80123ee:	e7a9      	b.n	8012344 <_dtoa_r+0xb24>
 80123f0:	08014803 	.word	0x08014803
 80123f4:	080149e1 	.word	0x080149e1
 80123f8:	0801479b 	.word	0x0801479b

080123fc <__sflush_r>:
 80123fc:	898a      	ldrh	r2, [r1, #12]
 80123fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012402:	4605      	mov	r5, r0
 8012404:	0710      	lsls	r0, r2, #28
 8012406:	460c      	mov	r4, r1
 8012408:	d458      	bmi.n	80124bc <__sflush_r+0xc0>
 801240a:	684b      	ldr	r3, [r1, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	dc05      	bgt.n	801241c <__sflush_r+0x20>
 8012410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012412:	2b00      	cmp	r3, #0
 8012414:	dc02      	bgt.n	801241c <__sflush_r+0x20>
 8012416:	2000      	movs	r0, #0
 8012418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801241c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801241e:	2e00      	cmp	r6, #0
 8012420:	d0f9      	beq.n	8012416 <__sflush_r+0x1a>
 8012422:	2300      	movs	r3, #0
 8012424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012428:	682f      	ldr	r7, [r5, #0]
 801242a:	602b      	str	r3, [r5, #0]
 801242c:	d032      	beq.n	8012494 <__sflush_r+0x98>
 801242e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	075a      	lsls	r2, r3, #29
 8012434:	d505      	bpl.n	8012442 <__sflush_r+0x46>
 8012436:	6863      	ldr	r3, [r4, #4]
 8012438:	1ac0      	subs	r0, r0, r3
 801243a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801243c:	b10b      	cbz	r3, 8012442 <__sflush_r+0x46>
 801243e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012440:	1ac0      	subs	r0, r0, r3
 8012442:	2300      	movs	r3, #0
 8012444:	4602      	mov	r2, r0
 8012446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012448:	6a21      	ldr	r1, [r4, #32]
 801244a:	4628      	mov	r0, r5
 801244c:	47b0      	blx	r6
 801244e:	1c43      	adds	r3, r0, #1
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	d106      	bne.n	8012462 <__sflush_r+0x66>
 8012454:	6829      	ldr	r1, [r5, #0]
 8012456:	291d      	cmp	r1, #29
 8012458:	d82c      	bhi.n	80124b4 <__sflush_r+0xb8>
 801245a:	4a2a      	ldr	r2, [pc, #168]	; (8012504 <__sflush_r+0x108>)
 801245c:	40ca      	lsrs	r2, r1
 801245e:	07d6      	lsls	r6, r2, #31
 8012460:	d528      	bpl.n	80124b4 <__sflush_r+0xb8>
 8012462:	2200      	movs	r2, #0
 8012464:	6062      	str	r2, [r4, #4]
 8012466:	04d9      	lsls	r1, r3, #19
 8012468:	6922      	ldr	r2, [r4, #16]
 801246a:	6022      	str	r2, [r4, #0]
 801246c:	d504      	bpl.n	8012478 <__sflush_r+0x7c>
 801246e:	1c42      	adds	r2, r0, #1
 8012470:	d101      	bne.n	8012476 <__sflush_r+0x7a>
 8012472:	682b      	ldr	r3, [r5, #0]
 8012474:	b903      	cbnz	r3, 8012478 <__sflush_r+0x7c>
 8012476:	6560      	str	r0, [r4, #84]	; 0x54
 8012478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801247a:	602f      	str	r7, [r5, #0]
 801247c:	2900      	cmp	r1, #0
 801247e:	d0ca      	beq.n	8012416 <__sflush_r+0x1a>
 8012480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012484:	4299      	cmp	r1, r3
 8012486:	d002      	beq.n	801248e <__sflush_r+0x92>
 8012488:	4628      	mov	r0, r5
 801248a:	f7fe f88d 	bl	80105a8 <_free_r>
 801248e:	2000      	movs	r0, #0
 8012490:	6360      	str	r0, [r4, #52]	; 0x34
 8012492:	e7c1      	b.n	8012418 <__sflush_r+0x1c>
 8012494:	6a21      	ldr	r1, [r4, #32]
 8012496:	2301      	movs	r3, #1
 8012498:	4628      	mov	r0, r5
 801249a:	47b0      	blx	r6
 801249c:	1c41      	adds	r1, r0, #1
 801249e:	d1c7      	bne.n	8012430 <__sflush_r+0x34>
 80124a0:	682b      	ldr	r3, [r5, #0]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d0c4      	beq.n	8012430 <__sflush_r+0x34>
 80124a6:	2b1d      	cmp	r3, #29
 80124a8:	d001      	beq.n	80124ae <__sflush_r+0xb2>
 80124aa:	2b16      	cmp	r3, #22
 80124ac:	d101      	bne.n	80124b2 <__sflush_r+0xb6>
 80124ae:	602f      	str	r7, [r5, #0]
 80124b0:	e7b1      	b.n	8012416 <__sflush_r+0x1a>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124b8:	81a3      	strh	r3, [r4, #12]
 80124ba:	e7ad      	b.n	8012418 <__sflush_r+0x1c>
 80124bc:	690f      	ldr	r7, [r1, #16]
 80124be:	2f00      	cmp	r7, #0
 80124c0:	d0a9      	beq.n	8012416 <__sflush_r+0x1a>
 80124c2:	0793      	lsls	r3, r2, #30
 80124c4:	680e      	ldr	r6, [r1, #0]
 80124c6:	bf08      	it	eq
 80124c8:	694b      	ldreq	r3, [r1, #20]
 80124ca:	600f      	str	r7, [r1, #0]
 80124cc:	bf18      	it	ne
 80124ce:	2300      	movne	r3, #0
 80124d0:	eba6 0807 	sub.w	r8, r6, r7
 80124d4:	608b      	str	r3, [r1, #8]
 80124d6:	f1b8 0f00 	cmp.w	r8, #0
 80124da:	dd9c      	ble.n	8012416 <__sflush_r+0x1a>
 80124dc:	6a21      	ldr	r1, [r4, #32]
 80124de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124e0:	4643      	mov	r3, r8
 80124e2:	463a      	mov	r2, r7
 80124e4:	4628      	mov	r0, r5
 80124e6:	47b0      	blx	r6
 80124e8:	2800      	cmp	r0, #0
 80124ea:	dc06      	bgt.n	80124fa <__sflush_r+0xfe>
 80124ec:	89a3      	ldrh	r3, [r4, #12]
 80124ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124f2:	81a3      	strh	r3, [r4, #12]
 80124f4:	f04f 30ff 	mov.w	r0, #4294967295
 80124f8:	e78e      	b.n	8012418 <__sflush_r+0x1c>
 80124fa:	4407      	add	r7, r0
 80124fc:	eba8 0800 	sub.w	r8, r8, r0
 8012500:	e7e9      	b.n	80124d6 <__sflush_r+0xda>
 8012502:	bf00      	nop
 8012504:	20400001 	.word	0x20400001

08012508 <_fflush_r>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	690b      	ldr	r3, [r1, #16]
 801250c:	4605      	mov	r5, r0
 801250e:	460c      	mov	r4, r1
 8012510:	b913      	cbnz	r3, 8012518 <_fflush_r+0x10>
 8012512:	2500      	movs	r5, #0
 8012514:	4628      	mov	r0, r5
 8012516:	bd38      	pop	{r3, r4, r5, pc}
 8012518:	b118      	cbz	r0, 8012522 <_fflush_r+0x1a>
 801251a:	6983      	ldr	r3, [r0, #24]
 801251c:	b90b      	cbnz	r3, 8012522 <_fflush_r+0x1a>
 801251e:	f000 f887 	bl	8012630 <__sinit>
 8012522:	4b14      	ldr	r3, [pc, #80]	; (8012574 <_fflush_r+0x6c>)
 8012524:	429c      	cmp	r4, r3
 8012526:	d11b      	bne.n	8012560 <_fflush_r+0x58>
 8012528:	686c      	ldr	r4, [r5, #4]
 801252a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d0ef      	beq.n	8012512 <_fflush_r+0xa>
 8012532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012534:	07d0      	lsls	r0, r2, #31
 8012536:	d404      	bmi.n	8012542 <_fflush_r+0x3a>
 8012538:	0599      	lsls	r1, r3, #22
 801253a:	d402      	bmi.n	8012542 <_fflush_r+0x3a>
 801253c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801253e:	f000 f92c 	bl	801279a <__retarget_lock_acquire_recursive>
 8012542:	4628      	mov	r0, r5
 8012544:	4621      	mov	r1, r4
 8012546:	f7ff ff59 	bl	80123fc <__sflush_r>
 801254a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801254c:	07da      	lsls	r2, r3, #31
 801254e:	4605      	mov	r5, r0
 8012550:	d4e0      	bmi.n	8012514 <_fflush_r+0xc>
 8012552:	89a3      	ldrh	r3, [r4, #12]
 8012554:	059b      	lsls	r3, r3, #22
 8012556:	d4dd      	bmi.n	8012514 <_fflush_r+0xc>
 8012558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801255a:	f000 f91f 	bl	801279c <__retarget_lock_release_recursive>
 801255e:	e7d9      	b.n	8012514 <_fflush_r+0xc>
 8012560:	4b05      	ldr	r3, [pc, #20]	; (8012578 <_fflush_r+0x70>)
 8012562:	429c      	cmp	r4, r3
 8012564:	d101      	bne.n	801256a <_fflush_r+0x62>
 8012566:	68ac      	ldr	r4, [r5, #8]
 8012568:	e7df      	b.n	801252a <_fflush_r+0x22>
 801256a:	4b04      	ldr	r3, [pc, #16]	; (801257c <_fflush_r+0x74>)
 801256c:	429c      	cmp	r4, r3
 801256e:	bf08      	it	eq
 8012570:	68ec      	ldreq	r4, [r5, #12]
 8012572:	e7da      	b.n	801252a <_fflush_r+0x22>
 8012574:	08014834 	.word	0x08014834
 8012578:	08014854 	.word	0x08014854
 801257c:	08014814 	.word	0x08014814

08012580 <std>:
 8012580:	2300      	movs	r3, #0
 8012582:	b510      	push	{r4, lr}
 8012584:	4604      	mov	r4, r0
 8012586:	e9c0 3300 	strd	r3, r3, [r0]
 801258a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801258e:	6083      	str	r3, [r0, #8]
 8012590:	8181      	strh	r1, [r0, #12]
 8012592:	6643      	str	r3, [r0, #100]	; 0x64
 8012594:	81c2      	strh	r2, [r0, #14]
 8012596:	6183      	str	r3, [r0, #24]
 8012598:	4619      	mov	r1, r3
 801259a:	2208      	movs	r2, #8
 801259c:	305c      	adds	r0, #92	; 0x5c
 801259e:	f7fd fffb 	bl	8010598 <memset>
 80125a2:	4b05      	ldr	r3, [pc, #20]	; (80125b8 <std+0x38>)
 80125a4:	6263      	str	r3, [r4, #36]	; 0x24
 80125a6:	4b05      	ldr	r3, [pc, #20]	; (80125bc <std+0x3c>)
 80125a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80125aa:	4b05      	ldr	r3, [pc, #20]	; (80125c0 <std+0x40>)
 80125ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80125ae:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <std+0x44>)
 80125b0:	6224      	str	r4, [r4, #32]
 80125b2:	6323      	str	r3, [r4, #48]	; 0x30
 80125b4:	bd10      	pop	{r4, pc}
 80125b6:	bf00      	nop
 80125b8:	08011299 	.word	0x08011299
 80125bc:	080112bf 	.word	0x080112bf
 80125c0:	080112f7 	.word	0x080112f7
 80125c4:	0801131b 	.word	0x0801131b

080125c8 <_cleanup_r>:
 80125c8:	4901      	ldr	r1, [pc, #4]	; (80125d0 <_cleanup_r+0x8>)
 80125ca:	f000 b8c1 	b.w	8012750 <_fwalk_reent>
 80125ce:	bf00      	nop
 80125d0:	08012509 	.word	0x08012509

080125d4 <__sfmoreglue>:
 80125d4:	b570      	push	{r4, r5, r6, lr}
 80125d6:	2268      	movs	r2, #104	; 0x68
 80125d8:	1e4d      	subs	r5, r1, #1
 80125da:	4355      	muls	r5, r2
 80125dc:	460e      	mov	r6, r1
 80125de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125e2:	f7fe f84d 	bl	8010680 <_malloc_r>
 80125e6:	4604      	mov	r4, r0
 80125e8:	b140      	cbz	r0, 80125fc <__sfmoreglue+0x28>
 80125ea:	2100      	movs	r1, #0
 80125ec:	e9c0 1600 	strd	r1, r6, [r0]
 80125f0:	300c      	adds	r0, #12
 80125f2:	60a0      	str	r0, [r4, #8]
 80125f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80125f8:	f7fd ffce 	bl	8010598 <memset>
 80125fc:	4620      	mov	r0, r4
 80125fe:	bd70      	pop	{r4, r5, r6, pc}

08012600 <__sfp_lock_acquire>:
 8012600:	4801      	ldr	r0, [pc, #4]	; (8012608 <__sfp_lock_acquire+0x8>)
 8012602:	f000 b8ca 	b.w	801279a <__retarget_lock_acquire_recursive>
 8012606:	bf00      	nop
 8012608:	20003069 	.word	0x20003069

0801260c <__sfp_lock_release>:
 801260c:	4801      	ldr	r0, [pc, #4]	; (8012614 <__sfp_lock_release+0x8>)
 801260e:	f000 b8c5 	b.w	801279c <__retarget_lock_release_recursive>
 8012612:	bf00      	nop
 8012614:	20003069 	.word	0x20003069

08012618 <__sinit_lock_acquire>:
 8012618:	4801      	ldr	r0, [pc, #4]	; (8012620 <__sinit_lock_acquire+0x8>)
 801261a:	f000 b8be 	b.w	801279a <__retarget_lock_acquire_recursive>
 801261e:	bf00      	nop
 8012620:	2000306a 	.word	0x2000306a

08012624 <__sinit_lock_release>:
 8012624:	4801      	ldr	r0, [pc, #4]	; (801262c <__sinit_lock_release+0x8>)
 8012626:	f000 b8b9 	b.w	801279c <__retarget_lock_release_recursive>
 801262a:	bf00      	nop
 801262c:	2000306a 	.word	0x2000306a

08012630 <__sinit>:
 8012630:	b510      	push	{r4, lr}
 8012632:	4604      	mov	r4, r0
 8012634:	f7ff fff0 	bl	8012618 <__sinit_lock_acquire>
 8012638:	69a3      	ldr	r3, [r4, #24]
 801263a:	b11b      	cbz	r3, 8012644 <__sinit+0x14>
 801263c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012640:	f7ff bff0 	b.w	8012624 <__sinit_lock_release>
 8012644:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012648:	6523      	str	r3, [r4, #80]	; 0x50
 801264a:	4b13      	ldr	r3, [pc, #76]	; (8012698 <__sinit+0x68>)
 801264c:	4a13      	ldr	r2, [pc, #76]	; (801269c <__sinit+0x6c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	62a2      	str	r2, [r4, #40]	; 0x28
 8012652:	42a3      	cmp	r3, r4
 8012654:	bf04      	itt	eq
 8012656:	2301      	moveq	r3, #1
 8012658:	61a3      	streq	r3, [r4, #24]
 801265a:	4620      	mov	r0, r4
 801265c:	f000 f820 	bl	80126a0 <__sfp>
 8012660:	6060      	str	r0, [r4, #4]
 8012662:	4620      	mov	r0, r4
 8012664:	f000 f81c 	bl	80126a0 <__sfp>
 8012668:	60a0      	str	r0, [r4, #8]
 801266a:	4620      	mov	r0, r4
 801266c:	f000 f818 	bl	80126a0 <__sfp>
 8012670:	2200      	movs	r2, #0
 8012672:	60e0      	str	r0, [r4, #12]
 8012674:	2104      	movs	r1, #4
 8012676:	6860      	ldr	r0, [r4, #4]
 8012678:	f7ff ff82 	bl	8012580 <std>
 801267c:	68a0      	ldr	r0, [r4, #8]
 801267e:	2201      	movs	r2, #1
 8012680:	2109      	movs	r1, #9
 8012682:	f7ff ff7d 	bl	8012580 <std>
 8012686:	68e0      	ldr	r0, [r4, #12]
 8012688:	2202      	movs	r2, #2
 801268a:	2112      	movs	r1, #18
 801268c:	f7ff ff78 	bl	8012580 <std>
 8012690:	2301      	movs	r3, #1
 8012692:	61a3      	str	r3, [r4, #24]
 8012694:	e7d2      	b.n	801263c <__sinit+0xc>
 8012696:	bf00      	nop
 8012698:	080145b4 	.word	0x080145b4
 801269c:	080125c9 	.word	0x080125c9

080126a0 <__sfp>:
 80126a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a2:	4607      	mov	r7, r0
 80126a4:	f7ff ffac 	bl	8012600 <__sfp_lock_acquire>
 80126a8:	4b1e      	ldr	r3, [pc, #120]	; (8012724 <__sfp+0x84>)
 80126aa:	681e      	ldr	r6, [r3, #0]
 80126ac:	69b3      	ldr	r3, [r6, #24]
 80126ae:	b913      	cbnz	r3, 80126b6 <__sfp+0x16>
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff ffbd 	bl	8012630 <__sinit>
 80126b6:	3648      	adds	r6, #72	; 0x48
 80126b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80126bc:	3b01      	subs	r3, #1
 80126be:	d503      	bpl.n	80126c8 <__sfp+0x28>
 80126c0:	6833      	ldr	r3, [r6, #0]
 80126c2:	b30b      	cbz	r3, 8012708 <__sfp+0x68>
 80126c4:	6836      	ldr	r6, [r6, #0]
 80126c6:	e7f7      	b.n	80126b8 <__sfp+0x18>
 80126c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126cc:	b9d5      	cbnz	r5, 8012704 <__sfp+0x64>
 80126ce:	4b16      	ldr	r3, [pc, #88]	; (8012728 <__sfp+0x88>)
 80126d0:	60e3      	str	r3, [r4, #12]
 80126d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126d6:	6665      	str	r5, [r4, #100]	; 0x64
 80126d8:	f000 f85e 	bl	8012798 <__retarget_lock_init_recursive>
 80126dc:	f7ff ff96 	bl	801260c <__sfp_lock_release>
 80126e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126e8:	6025      	str	r5, [r4, #0]
 80126ea:	61a5      	str	r5, [r4, #24]
 80126ec:	2208      	movs	r2, #8
 80126ee:	4629      	mov	r1, r5
 80126f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126f4:	f7fd ff50 	bl	8010598 <memset>
 80126f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80126fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012700:	4620      	mov	r0, r4
 8012702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012704:	3468      	adds	r4, #104	; 0x68
 8012706:	e7d9      	b.n	80126bc <__sfp+0x1c>
 8012708:	2104      	movs	r1, #4
 801270a:	4638      	mov	r0, r7
 801270c:	f7ff ff62 	bl	80125d4 <__sfmoreglue>
 8012710:	4604      	mov	r4, r0
 8012712:	6030      	str	r0, [r6, #0]
 8012714:	2800      	cmp	r0, #0
 8012716:	d1d5      	bne.n	80126c4 <__sfp+0x24>
 8012718:	f7ff ff78 	bl	801260c <__sfp_lock_release>
 801271c:	230c      	movs	r3, #12
 801271e:	603b      	str	r3, [r7, #0]
 8012720:	e7ee      	b.n	8012700 <__sfp+0x60>
 8012722:	bf00      	nop
 8012724:	080145b4 	.word	0x080145b4
 8012728:	ffff0001 	.word	0xffff0001

0801272c <fiprintf>:
 801272c:	b40e      	push	{r1, r2, r3}
 801272e:	b503      	push	{r0, r1, lr}
 8012730:	4601      	mov	r1, r0
 8012732:	ab03      	add	r3, sp, #12
 8012734:	4805      	ldr	r0, [pc, #20]	; (801274c <fiprintf+0x20>)
 8012736:	f853 2b04 	ldr.w	r2, [r3], #4
 801273a:	6800      	ldr	r0, [r0, #0]
 801273c:	9301      	str	r3, [sp, #4]
 801273e:	f000 ffa5 	bl	801368c <_vfiprintf_r>
 8012742:	b002      	add	sp, #8
 8012744:	f85d eb04 	ldr.w	lr, [sp], #4
 8012748:	b003      	add	sp, #12
 801274a:	4770      	bx	lr
 801274c:	20000054 	.word	0x20000054

08012750 <_fwalk_reent>:
 8012750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012754:	4606      	mov	r6, r0
 8012756:	4688      	mov	r8, r1
 8012758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801275c:	2700      	movs	r7, #0
 801275e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012762:	f1b9 0901 	subs.w	r9, r9, #1
 8012766:	d505      	bpl.n	8012774 <_fwalk_reent+0x24>
 8012768:	6824      	ldr	r4, [r4, #0]
 801276a:	2c00      	cmp	r4, #0
 801276c:	d1f7      	bne.n	801275e <_fwalk_reent+0xe>
 801276e:	4638      	mov	r0, r7
 8012770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012774:	89ab      	ldrh	r3, [r5, #12]
 8012776:	2b01      	cmp	r3, #1
 8012778:	d907      	bls.n	801278a <_fwalk_reent+0x3a>
 801277a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801277e:	3301      	adds	r3, #1
 8012780:	d003      	beq.n	801278a <_fwalk_reent+0x3a>
 8012782:	4629      	mov	r1, r5
 8012784:	4630      	mov	r0, r6
 8012786:	47c0      	blx	r8
 8012788:	4307      	orrs	r7, r0
 801278a:	3568      	adds	r5, #104	; 0x68
 801278c:	e7e9      	b.n	8012762 <_fwalk_reent+0x12>
	...

08012790 <_localeconv_r>:
 8012790:	4800      	ldr	r0, [pc, #0]	; (8012794 <_localeconv_r+0x4>)
 8012792:	4770      	bx	lr
 8012794:	200001a8 	.word	0x200001a8

08012798 <__retarget_lock_init_recursive>:
 8012798:	4770      	bx	lr

0801279a <__retarget_lock_acquire_recursive>:
 801279a:	4770      	bx	lr

0801279c <__retarget_lock_release_recursive>:
 801279c:	4770      	bx	lr
	...

080127a0 <_lseek_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4d07      	ldr	r5, [pc, #28]	; (80127c0 <_lseek_r+0x20>)
 80127a4:	4604      	mov	r4, r0
 80127a6:	4608      	mov	r0, r1
 80127a8:	4611      	mov	r1, r2
 80127aa:	2200      	movs	r2, #0
 80127ac:	602a      	str	r2, [r5, #0]
 80127ae:	461a      	mov	r2, r3
 80127b0:	f7f0 ffc4 	bl	800373c <_lseek>
 80127b4:	1c43      	adds	r3, r0, #1
 80127b6:	d102      	bne.n	80127be <_lseek_r+0x1e>
 80127b8:	682b      	ldr	r3, [r5, #0]
 80127ba:	b103      	cbz	r3, 80127be <_lseek_r+0x1e>
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	bd38      	pop	{r3, r4, r5, pc}
 80127c0:	2000306c 	.word	0x2000306c

080127c4 <__swhatbuf_r>:
 80127c4:	b570      	push	{r4, r5, r6, lr}
 80127c6:	460e      	mov	r6, r1
 80127c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127cc:	2900      	cmp	r1, #0
 80127ce:	b096      	sub	sp, #88	; 0x58
 80127d0:	4614      	mov	r4, r2
 80127d2:	461d      	mov	r5, r3
 80127d4:	da08      	bge.n	80127e8 <__swhatbuf_r+0x24>
 80127d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80127da:	2200      	movs	r2, #0
 80127dc:	602a      	str	r2, [r5, #0]
 80127de:	061a      	lsls	r2, r3, #24
 80127e0:	d410      	bmi.n	8012804 <__swhatbuf_r+0x40>
 80127e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127e6:	e00e      	b.n	8012806 <__swhatbuf_r+0x42>
 80127e8:	466a      	mov	r2, sp
 80127ea:	f001 fac9 	bl	8013d80 <_fstat_r>
 80127ee:	2800      	cmp	r0, #0
 80127f0:	dbf1      	blt.n	80127d6 <__swhatbuf_r+0x12>
 80127f2:	9a01      	ldr	r2, [sp, #4]
 80127f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127fc:	425a      	negs	r2, r3
 80127fe:	415a      	adcs	r2, r3
 8012800:	602a      	str	r2, [r5, #0]
 8012802:	e7ee      	b.n	80127e2 <__swhatbuf_r+0x1e>
 8012804:	2340      	movs	r3, #64	; 0x40
 8012806:	2000      	movs	r0, #0
 8012808:	6023      	str	r3, [r4, #0]
 801280a:	b016      	add	sp, #88	; 0x58
 801280c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012810 <__smakebuf_r>:
 8012810:	898b      	ldrh	r3, [r1, #12]
 8012812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012814:	079d      	lsls	r5, r3, #30
 8012816:	4606      	mov	r6, r0
 8012818:	460c      	mov	r4, r1
 801281a:	d507      	bpl.n	801282c <__smakebuf_r+0x1c>
 801281c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	6123      	str	r3, [r4, #16]
 8012824:	2301      	movs	r3, #1
 8012826:	6163      	str	r3, [r4, #20]
 8012828:	b002      	add	sp, #8
 801282a:	bd70      	pop	{r4, r5, r6, pc}
 801282c:	ab01      	add	r3, sp, #4
 801282e:	466a      	mov	r2, sp
 8012830:	f7ff ffc8 	bl	80127c4 <__swhatbuf_r>
 8012834:	9900      	ldr	r1, [sp, #0]
 8012836:	4605      	mov	r5, r0
 8012838:	4630      	mov	r0, r6
 801283a:	f7fd ff21 	bl	8010680 <_malloc_r>
 801283e:	b948      	cbnz	r0, 8012854 <__smakebuf_r+0x44>
 8012840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012844:	059a      	lsls	r2, r3, #22
 8012846:	d4ef      	bmi.n	8012828 <__smakebuf_r+0x18>
 8012848:	f023 0303 	bic.w	r3, r3, #3
 801284c:	f043 0302 	orr.w	r3, r3, #2
 8012850:	81a3      	strh	r3, [r4, #12]
 8012852:	e7e3      	b.n	801281c <__smakebuf_r+0xc>
 8012854:	4b0d      	ldr	r3, [pc, #52]	; (801288c <__smakebuf_r+0x7c>)
 8012856:	62b3      	str	r3, [r6, #40]	; 0x28
 8012858:	89a3      	ldrh	r3, [r4, #12]
 801285a:	6020      	str	r0, [r4, #0]
 801285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012860:	81a3      	strh	r3, [r4, #12]
 8012862:	9b00      	ldr	r3, [sp, #0]
 8012864:	6163      	str	r3, [r4, #20]
 8012866:	9b01      	ldr	r3, [sp, #4]
 8012868:	6120      	str	r0, [r4, #16]
 801286a:	b15b      	cbz	r3, 8012884 <__smakebuf_r+0x74>
 801286c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012870:	4630      	mov	r0, r6
 8012872:	f001 fa97 	bl	8013da4 <_isatty_r>
 8012876:	b128      	cbz	r0, 8012884 <__smakebuf_r+0x74>
 8012878:	89a3      	ldrh	r3, [r4, #12]
 801287a:	f023 0303 	bic.w	r3, r3, #3
 801287e:	f043 0301 	orr.w	r3, r3, #1
 8012882:	81a3      	strh	r3, [r4, #12]
 8012884:	89a0      	ldrh	r0, [r4, #12]
 8012886:	4305      	orrs	r5, r0
 8012888:	81a5      	strh	r5, [r4, #12]
 801288a:	e7cd      	b.n	8012828 <__smakebuf_r+0x18>
 801288c:	080125c9 	.word	0x080125c9

08012890 <__malloc_lock>:
 8012890:	4801      	ldr	r0, [pc, #4]	; (8012898 <__malloc_lock+0x8>)
 8012892:	f7ff bf82 	b.w	801279a <__retarget_lock_acquire_recursive>
 8012896:	bf00      	nop
 8012898:	20003068 	.word	0x20003068

0801289c <__malloc_unlock>:
 801289c:	4801      	ldr	r0, [pc, #4]	; (80128a4 <__malloc_unlock+0x8>)
 801289e:	f7ff bf7d 	b.w	801279c <__retarget_lock_release_recursive>
 80128a2:	bf00      	nop
 80128a4:	20003068 	.word	0x20003068

080128a8 <_Balloc>:
 80128a8:	b570      	push	{r4, r5, r6, lr}
 80128aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80128ac:	4604      	mov	r4, r0
 80128ae:	460d      	mov	r5, r1
 80128b0:	b976      	cbnz	r6, 80128d0 <_Balloc+0x28>
 80128b2:	2010      	movs	r0, #16
 80128b4:	f7fd fe52 	bl	801055c <malloc>
 80128b8:	4602      	mov	r2, r0
 80128ba:	6260      	str	r0, [r4, #36]	; 0x24
 80128bc:	b920      	cbnz	r0, 80128c8 <_Balloc+0x20>
 80128be:	4b18      	ldr	r3, [pc, #96]	; (8012920 <_Balloc+0x78>)
 80128c0:	4818      	ldr	r0, [pc, #96]	; (8012924 <_Balloc+0x7c>)
 80128c2:	2166      	movs	r1, #102	; 0x66
 80128c4:	f7fe fef2 	bl	80116ac <__assert_func>
 80128c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128cc:	6006      	str	r6, [r0, #0]
 80128ce:	60c6      	str	r6, [r0, #12]
 80128d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80128d2:	68f3      	ldr	r3, [r6, #12]
 80128d4:	b183      	cbz	r3, 80128f8 <_Balloc+0x50>
 80128d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80128de:	b9b8      	cbnz	r0, 8012910 <_Balloc+0x68>
 80128e0:	2101      	movs	r1, #1
 80128e2:	fa01 f605 	lsl.w	r6, r1, r5
 80128e6:	1d72      	adds	r2, r6, #5
 80128e8:	0092      	lsls	r2, r2, #2
 80128ea:	4620      	mov	r0, r4
 80128ec:	f000 fb60 	bl	8012fb0 <_calloc_r>
 80128f0:	b160      	cbz	r0, 801290c <_Balloc+0x64>
 80128f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80128f6:	e00e      	b.n	8012916 <_Balloc+0x6e>
 80128f8:	2221      	movs	r2, #33	; 0x21
 80128fa:	2104      	movs	r1, #4
 80128fc:	4620      	mov	r0, r4
 80128fe:	f000 fb57 	bl	8012fb0 <_calloc_r>
 8012902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012904:	60f0      	str	r0, [r6, #12]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1e4      	bne.n	80128d6 <_Balloc+0x2e>
 801290c:	2000      	movs	r0, #0
 801290e:	bd70      	pop	{r4, r5, r6, pc}
 8012910:	6802      	ldr	r2, [r0, #0]
 8012912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012916:	2300      	movs	r3, #0
 8012918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801291c:	e7f7      	b.n	801290e <_Balloc+0x66>
 801291e:	bf00      	nop
 8012920:	080145ea 	.word	0x080145ea
 8012924:	08014874 	.word	0x08014874

08012928 <_Bfree>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801292c:	4605      	mov	r5, r0
 801292e:	460c      	mov	r4, r1
 8012930:	b976      	cbnz	r6, 8012950 <_Bfree+0x28>
 8012932:	2010      	movs	r0, #16
 8012934:	f7fd fe12 	bl	801055c <malloc>
 8012938:	4602      	mov	r2, r0
 801293a:	6268      	str	r0, [r5, #36]	; 0x24
 801293c:	b920      	cbnz	r0, 8012948 <_Bfree+0x20>
 801293e:	4b09      	ldr	r3, [pc, #36]	; (8012964 <_Bfree+0x3c>)
 8012940:	4809      	ldr	r0, [pc, #36]	; (8012968 <_Bfree+0x40>)
 8012942:	218a      	movs	r1, #138	; 0x8a
 8012944:	f7fe feb2 	bl	80116ac <__assert_func>
 8012948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801294c:	6006      	str	r6, [r0, #0]
 801294e:	60c6      	str	r6, [r0, #12]
 8012950:	b13c      	cbz	r4, 8012962 <_Bfree+0x3a>
 8012952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012954:	6862      	ldr	r2, [r4, #4]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801295c:	6021      	str	r1, [r4, #0]
 801295e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012962:	bd70      	pop	{r4, r5, r6, pc}
 8012964:	080145ea 	.word	0x080145ea
 8012968:	08014874 	.word	0x08014874

0801296c <__multadd>:
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	690d      	ldr	r5, [r1, #16]
 8012972:	4607      	mov	r7, r0
 8012974:	460c      	mov	r4, r1
 8012976:	461e      	mov	r6, r3
 8012978:	f101 0c14 	add.w	ip, r1, #20
 801297c:	2000      	movs	r0, #0
 801297e:	f8dc 3000 	ldr.w	r3, [ip]
 8012982:	b299      	uxth	r1, r3
 8012984:	fb02 6101 	mla	r1, r2, r1, r6
 8012988:	0c1e      	lsrs	r6, r3, #16
 801298a:	0c0b      	lsrs	r3, r1, #16
 801298c:	fb02 3306 	mla	r3, r2, r6, r3
 8012990:	b289      	uxth	r1, r1
 8012992:	3001      	adds	r0, #1
 8012994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012998:	4285      	cmp	r5, r0
 801299a:	f84c 1b04 	str.w	r1, [ip], #4
 801299e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129a2:	dcec      	bgt.n	801297e <__multadd+0x12>
 80129a4:	b30e      	cbz	r6, 80129ea <__multadd+0x7e>
 80129a6:	68a3      	ldr	r3, [r4, #8]
 80129a8:	42ab      	cmp	r3, r5
 80129aa:	dc19      	bgt.n	80129e0 <__multadd+0x74>
 80129ac:	6861      	ldr	r1, [r4, #4]
 80129ae:	4638      	mov	r0, r7
 80129b0:	3101      	adds	r1, #1
 80129b2:	f7ff ff79 	bl	80128a8 <_Balloc>
 80129b6:	4680      	mov	r8, r0
 80129b8:	b928      	cbnz	r0, 80129c6 <__multadd+0x5a>
 80129ba:	4602      	mov	r2, r0
 80129bc:	4b0c      	ldr	r3, [pc, #48]	; (80129f0 <__multadd+0x84>)
 80129be:	480d      	ldr	r0, [pc, #52]	; (80129f4 <__multadd+0x88>)
 80129c0:	21b5      	movs	r1, #181	; 0xb5
 80129c2:	f7fe fe73 	bl	80116ac <__assert_func>
 80129c6:	6922      	ldr	r2, [r4, #16]
 80129c8:	3202      	adds	r2, #2
 80129ca:	f104 010c 	add.w	r1, r4, #12
 80129ce:	0092      	lsls	r2, r2, #2
 80129d0:	300c      	adds	r0, #12
 80129d2:	f7fd fdd3 	bl	801057c <memcpy>
 80129d6:	4621      	mov	r1, r4
 80129d8:	4638      	mov	r0, r7
 80129da:	f7ff ffa5 	bl	8012928 <_Bfree>
 80129de:	4644      	mov	r4, r8
 80129e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80129e4:	3501      	adds	r5, #1
 80129e6:	615e      	str	r6, [r3, #20]
 80129e8:	6125      	str	r5, [r4, #16]
 80129ea:	4620      	mov	r0, r4
 80129ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129f0:	08014803 	.word	0x08014803
 80129f4:	08014874 	.word	0x08014874

080129f8 <__hi0bits>:
 80129f8:	0c03      	lsrs	r3, r0, #16
 80129fa:	041b      	lsls	r3, r3, #16
 80129fc:	b9d3      	cbnz	r3, 8012a34 <__hi0bits+0x3c>
 80129fe:	0400      	lsls	r0, r0, #16
 8012a00:	2310      	movs	r3, #16
 8012a02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a06:	bf04      	itt	eq
 8012a08:	0200      	lsleq	r0, r0, #8
 8012a0a:	3308      	addeq	r3, #8
 8012a0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012a10:	bf04      	itt	eq
 8012a12:	0100      	lsleq	r0, r0, #4
 8012a14:	3304      	addeq	r3, #4
 8012a16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012a1a:	bf04      	itt	eq
 8012a1c:	0080      	lsleq	r0, r0, #2
 8012a1e:	3302      	addeq	r3, #2
 8012a20:	2800      	cmp	r0, #0
 8012a22:	db05      	blt.n	8012a30 <__hi0bits+0x38>
 8012a24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012a28:	f103 0301 	add.w	r3, r3, #1
 8012a2c:	bf08      	it	eq
 8012a2e:	2320      	moveq	r3, #32
 8012a30:	4618      	mov	r0, r3
 8012a32:	4770      	bx	lr
 8012a34:	2300      	movs	r3, #0
 8012a36:	e7e4      	b.n	8012a02 <__hi0bits+0xa>

08012a38 <__lo0bits>:
 8012a38:	6803      	ldr	r3, [r0, #0]
 8012a3a:	f013 0207 	ands.w	r2, r3, #7
 8012a3e:	4601      	mov	r1, r0
 8012a40:	d00b      	beq.n	8012a5a <__lo0bits+0x22>
 8012a42:	07da      	lsls	r2, r3, #31
 8012a44:	d423      	bmi.n	8012a8e <__lo0bits+0x56>
 8012a46:	0798      	lsls	r0, r3, #30
 8012a48:	bf49      	itett	mi
 8012a4a:	085b      	lsrmi	r3, r3, #1
 8012a4c:	089b      	lsrpl	r3, r3, #2
 8012a4e:	2001      	movmi	r0, #1
 8012a50:	600b      	strmi	r3, [r1, #0]
 8012a52:	bf5c      	itt	pl
 8012a54:	600b      	strpl	r3, [r1, #0]
 8012a56:	2002      	movpl	r0, #2
 8012a58:	4770      	bx	lr
 8012a5a:	b298      	uxth	r0, r3
 8012a5c:	b9a8      	cbnz	r0, 8012a8a <__lo0bits+0x52>
 8012a5e:	0c1b      	lsrs	r3, r3, #16
 8012a60:	2010      	movs	r0, #16
 8012a62:	b2da      	uxtb	r2, r3
 8012a64:	b90a      	cbnz	r2, 8012a6a <__lo0bits+0x32>
 8012a66:	3008      	adds	r0, #8
 8012a68:	0a1b      	lsrs	r3, r3, #8
 8012a6a:	071a      	lsls	r2, r3, #28
 8012a6c:	bf04      	itt	eq
 8012a6e:	091b      	lsreq	r3, r3, #4
 8012a70:	3004      	addeq	r0, #4
 8012a72:	079a      	lsls	r2, r3, #30
 8012a74:	bf04      	itt	eq
 8012a76:	089b      	lsreq	r3, r3, #2
 8012a78:	3002      	addeq	r0, #2
 8012a7a:	07da      	lsls	r2, r3, #31
 8012a7c:	d403      	bmi.n	8012a86 <__lo0bits+0x4e>
 8012a7e:	085b      	lsrs	r3, r3, #1
 8012a80:	f100 0001 	add.w	r0, r0, #1
 8012a84:	d005      	beq.n	8012a92 <__lo0bits+0x5a>
 8012a86:	600b      	str	r3, [r1, #0]
 8012a88:	4770      	bx	lr
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	e7e9      	b.n	8012a62 <__lo0bits+0x2a>
 8012a8e:	2000      	movs	r0, #0
 8012a90:	4770      	bx	lr
 8012a92:	2020      	movs	r0, #32
 8012a94:	4770      	bx	lr
	...

08012a98 <__i2b>:
 8012a98:	b510      	push	{r4, lr}
 8012a9a:	460c      	mov	r4, r1
 8012a9c:	2101      	movs	r1, #1
 8012a9e:	f7ff ff03 	bl	80128a8 <_Balloc>
 8012aa2:	4602      	mov	r2, r0
 8012aa4:	b928      	cbnz	r0, 8012ab2 <__i2b+0x1a>
 8012aa6:	4b05      	ldr	r3, [pc, #20]	; (8012abc <__i2b+0x24>)
 8012aa8:	4805      	ldr	r0, [pc, #20]	; (8012ac0 <__i2b+0x28>)
 8012aaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012aae:	f7fe fdfd 	bl	80116ac <__assert_func>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	6144      	str	r4, [r0, #20]
 8012ab6:	6103      	str	r3, [r0, #16]
 8012ab8:	bd10      	pop	{r4, pc}
 8012aba:	bf00      	nop
 8012abc:	08014803 	.word	0x08014803
 8012ac0:	08014874 	.word	0x08014874

08012ac4 <__multiply>:
 8012ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac8:	4691      	mov	r9, r2
 8012aca:	690a      	ldr	r2, [r1, #16]
 8012acc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	bfb8      	it	lt
 8012ad4:	460b      	movlt	r3, r1
 8012ad6:	460c      	mov	r4, r1
 8012ad8:	bfbc      	itt	lt
 8012ada:	464c      	movlt	r4, r9
 8012adc:	4699      	movlt	r9, r3
 8012ade:	6927      	ldr	r7, [r4, #16]
 8012ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012ae4:	68a3      	ldr	r3, [r4, #8]
 8012ae6:	6861      	ldr	r1, [r4, #4]
 8012ae8:	eb07 060a 	add.w	r6, r7, sl
 8012aec:	42b3      	cmp	r3, r6
 8012aee:	b085      	sub	sp, #20
 8012af0:	bfb8      	it	lt
 8012af2:	3101      	addlt	r1, #1
 8012af4:	f7ff fed8 	bl	80128a8 <_Balloc>
 8012af8:	b930      	cbnz	r0, 8012b08 <__multiply+0x44>
 8012afa:	4602      	mov	r2, r0
 8012afc:	4b44      	ldr	r3, [pc, #272]	; (8012c10 <__multiply+0x14c>)
 8012afe:	4845      	ldr	r0, [pc, #276]	; (8012c14 <__multiply+0x150>)
 8012b00:	f240 115d 	movw	r1, #349	; 0x15d
 8012b04:	f7fe fdd2 	bl	80116ac <__assert_func>
 8012b08:	f100 0514 	add.w	r5, r0, #20
 8012b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012b10:	462b      	mov	r3, r5
 8012b12:	2200      	movs	r2, #0
 8012b14:	4543      	cmp	r3, r8
 8012b16:	d321      	bcc.n	8012b5c <__multiply+0x98>
 8012b18:	f104 0314 	add.w	r3, r4, #20
 8012b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012b20:	f109 0314 	add.w	r3, r9, #20
 8012b24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012b28:	9202      	str	r2, [sp, #8]
 8012b2a:	1b3a      	subs	r2, r7, r4
 8012b2c:	3a15      	subs	r2, #21
 8012b2e:	f022 0203 	bic.w	r2, r2, #3
 8012b32:	3204      	adds	r2, #4
 8012b34:	f104 0115 	add.w	r1, r4, #21
 8012b38:	428f      	cmp	r7, r1
 8012b3a:	bf38      	it	cc
 8012b3c:	2204      	movcc	r2, #4
 8012b3e:	9201      	str	r2, [sp, #4]
 8012b40:	9a02      	ldr	r2, [sp, #8]
 8012b42:	9303      	str	r3, [sp, #12]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d80c      	bhi.n	8012b62 <__multiply+0x9e>
 8012b48:	2e00      	cmp	r6, #0
 8012b4a:	dd03      	ble.n	8012b54 <__multiply+0x90>
 8012b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d05a      	beq.n	8012c0a <__multiply+0x146>
 8012b54:	6106      	str	r6, [r0, #16]
 8012b56:	b005      	add	sp, #20
 8012b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5c:	f843 2b04 	str.w	r2, [r3], #4
 8012b60:	e7d8      	b.n	8012b14 <__multiply+0x50>
 8012b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8012b66:	f1ba 0f00 	cmp.w	sl, #0
 8012b6a:	d024      	beq.n	8012bb6 <__multiply+0xf2>
 8012b6c:	f104 0e14 	add.w	lr, r4, #20
 8012b70:	46a9      	mov	r9, r5
 8012b72:	f04f 0c00 	mov.w	ip, #0
 8012b76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8012b7e:	fa1f fb82 	uxth.w	fp, r2
 8012b82:	b289      	uxth	r1, r1
 8012b84:	fb0a 110b 	mla	r1, sl, fp, r1
 8012b88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8012b90:	4461      	add	r1, ip
 8012b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012b96:	fb0a c20b 	mla	r2, sl, fp, ip
 8012b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012b9e:	b289      	uxth	r1, r1
 8012ba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ba4:	4577      	cmp	r7, lr
 8012ba6:	f849 1b04 	str.w	r1, [r9], #4
 8012baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012bae:	d8e2      	bhi.n	8012b76 <__multiply+0xb2>
 8012bb0:	9a01      	ldr	r2, [sp, #4]
 8012bb2:	f845 c002 	str.w	ip, [r5, r2]
 8012bb6:	9a03      	ldr	r2, [sp, #12]
 8012bb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012bbc:	3304      	adds	r3, #4
 8012bbe:	f1b9 0f00 	cmp.w	r9, #0
 8012bc2:	d020      	beq.n	8012c06 <__multiply+0x142>
 8012bc4:	6829      	ldr	r1, [r5, #0]
 8012bc6:	f104 0c14 	add.w	ip, r4, #20
 8012bca:	46ae      	mov	lr, r5
 8012bcc:	f04f 0a00 	mov.w	sl, #0
 8012bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8012bd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8012bdc:	4492      	add	sl, r2
 8012bde:	b289      	uxth	r1, r1
 8012be0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012be4:	f84e 1b04 	str.w	r1, [lr], #4
 8012be8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012bec:	f8be 1000 	ldrh.w	r1, [lr]
 8012bf0:	0c12      	lsrs	r2, r2, #16
 8012bf2:	fb09 1102 	mla	r1, r9, r2, r1
 8012bf6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012bfa:	4567      	cmp	r7, ip
 8012bfc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012c00:	d8e6      	bhi.n	8012bd0 <__multiply+0x10c>
 8012c02:	9a01      	ldr	r2, [sp, #4]
 8012c04:	50a9      	str	r1, [r5, r2]
 8012c06:	3504      	adds	r5, #4
 8012c08:	e79a      	b.n	8012b40 <__multiply+0x7c>
 8012c0a:	3e01      	subs	r6, #1
 8012c0c:	e79c      	b.n	8012b48 <__multiply+0x84>
 8012c0e:	bf00      	nop
 8012c10:	08014803 	.word	0x08014803
 8012c14:	08014874 	.word	0x08014874

08012c18 <__pow5mult>:
 8012c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1c:	4615      	mov	r5, r2
 8012c1e:	f012 0203 	ands.w	r2, r2, #3
 8012c22:	4606      	mov	r6, r0
 8012c24:	460f      	mov	r7, r1
 8012c26:	d007      	beq.n	8012c38 <__pow5mult+0x20>
 8012c28:	4c25      	ldr	r4, [pc, #148]	; (8012cc0 <__pow5mult+0xa8>)
 8012c2a:	3a01      	subs	r2, #1
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c32:	f7ff fe9b 	bl	801296c <__multadd>
 8012c36:	4607      	mov	r7, r0
 8012c38:	10ad      	asrs	r5, r5, #2
 8012c3a:	d03d      	beq.n	8012cb8 <__pow5mult+0xa0>
 8012c3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c3e:	b97c      	cbnz	r4, 8012c60 <__pow5mult+0x48>
 8012c40:	2010      	movs	r0, #16
 8012c42:	f7fd fc8b 	bl	801055c <malloc>
 8012c46:	4602      	mov	r2, r0
 8012c48:	6270      	str	r0, [r6, #36]	; 0x24
 8012c4a:	b928      	cbnz	r0, 8012c58 <__pow5mult+0x40>
 8012c4c:	4b1d      	ldr	r3, [pc, #116]	; (8012cc4 <__pow5mult+0xac>)
 8012c4e:	481e      	ldr	r0, [pc, #120]	; (8012cc8 <__pow5mult+0xb0>)
 8012c50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012c54:	f7fe fd2a 	bl	80116ac <__assert_func>
 8012c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c5c:	6004      	str	r4, [r0, #0]
 8012c5e:	60c4      	str	r4, [r0, #12]
 8012c60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c68:	b94c      	cbnz	r4, 8012c7e <__pow5mult+0x66>
 8012c6a:	f240 2171 	movw	r1, #625	; 0x271
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7ff ff12 	bl	8012a98 <__i2b>
 8012c74:	2300      	movs	r3, #0
 8012c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	6003      	str	r3, [r0, #0]
 8012c7e:	f04f 0900 	mov.w	r9, #0
 8012c82:	07eb      	lsls	r3, r5, #31
 8012c84:	d50a      	bpl.n	8012c9c <__pow5mult+0x84>
 8012c86:	4639      	mov	r1, r7
 8012c88:	4622      	mov	r2, r4
 8012c8a:	4630      	mov	r0, r6
 8012c8c:	f7ff ff1a 	bl	8012ac4 <__multiply>
 8012c90:	4639      	mov	r1, r7
 8012c92:	4680      	mov	r8, r0
 8012c94:	4630      	mov	r0, r6
 8012c96:	f7ff fe47 	bl	8012928 <_Bfree>
 8012c9a:	4647      	mov	r7, r8
 8012c9c:	106d      	asrs	r5, r5, #1
 8012c9e:	d00b      	beq.n	8012cb8 <__pow5mult+0xa0>
 8012ca0:	6820      	ldr	r0, [r4, #0]
 8012ca2:	b938      	cbnz	r0, 8012cb4 <__pow5mult+0x9c>
 8012ca4:	4622      	mov	r2, r4
 8012ca6:	4621      	mov	r1, r4
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff ff0b 	bl	8012ac4 <__multiply>
 8012cae:	6020      	str	r0, [r4, #0]
 8012cb0:	f8c0 9000 	str.w	r9, [r0]
 8012cb4:	4604      	mov	r4, r0
 8012cb6:	e7e4      	b.n	8012c82 <__pow5mult+0x6a>
 8012cb8:	4638      	mov	r0, r7
 8012cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cbe:	bf00      	nop
 8012cc0:	080149c0 	.word	0x080149c0
 8012cc4:	080145ea 	.word	0x080145ea
 8012cc8:	08014874 	.word	0x08014874

08012ccc <__lshift>:
 8012ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	6849      	ldr	r1, [r1, #4]
 8012cd4:	6923      	ldr	r3, [r4, #16]
 8012cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012cda:	68a3      	ldr	r3, [r4, #8]
 8012cdc:	4607      	mov	r7, r0
 8012cde:	4691      	mov	r9, r2
 8012ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012ce4:	f108 0601 	add.w	r6, r8, #1
 8012ce8:	42b3      	cmp	r3, r6
 8012cea:	db0b      	blt.n	8012d04 <__lshift+0x38>
 8012cec:	4638      	mov	r0, r7
 8012cee:	f7ff fddb 	bl	80128a8 <_Balloc>
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	b948      	cbnz	r0, 8012d0a <__lshift+0x3e>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	4b2a      	ldr	r3, [pc, #168]	; (8012da4 <__lshift+0xd8>)
 8012cfa:	482b      	ldr	r0, [pc, #172]	; (8012da8 <__lshift+0xdc>)
 8012cfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012d00:	f7fe fcd4 	bl	80116ac <__assert_func>
 8012d04:	3101      	adds	r1, #1
 8012d06:	005b      	lsls	r3, r3, #1
 8012d08:	e7ee      	b.n	8012ce8 <__lshift+0x1c>
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	f100 0114 	add.w	r1, r0, #20
 8012d10:	f100 0210 	add.w	r2, r0, #16
 8012d14:	4618      	mov	r0, r3
 8012d16:	4553      	cmp	r3, sl
 8012d18:	db37      	blt.n	8012d8a <__lshift+0xbe>
 8012d1a:	6920      	ldr	r0, [r4, #16]
 8012d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d20:	f104 0314 	add.w	r3, r4, #20
 8012d24:	f019 091f 	ands.w	r9, r9, #31
 8012d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012d30:	d02f      	beq.n	8012d92 <__lshift+0xc6>
 8012d32:	f1c9 0e20 	rsb	lr, r9, #32
 8012d36:	468a      	mov	sl, r1
 8012d38:	f04f 0c00 	mov.w	ip, #0
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	fa02 f209 	lsl.w	r2, r2, r9
 8012d42:	ea42 020c 	orr.w	r2, r2, ip
 8012d46:	f84a 2b04 	str.w	r2, [sl], #4
 8012d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d4e:	4298      	cmp	r0, r3
 8012d50:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012d54:	d8f2      	bhi.n	8012d3c <__lshift+0x70>
 8012d56:	1b03      	subs	r3, r0, r4
 8012d58:	3b15      	subs	r3, #21
 8012d5a:	f023 0303 	bic.w	r3, r3, #3
 8012d5e:	3304      	adds	r3, #4
 8012d60:	f104 0215 	add.w	r2, r4, #21
 8012d64:	4290      	cmp	r0, r2
 8012d66:	bf38      	it	cc
 8012d68:	2304      	movcc	r3, #4
 8012d6a:	f841 c003 	str.w	ip, [r1, r3]
 8012d6e:	f1bc 0f00 	cmp.w	ip, #0
 8012d72:	d001      	beq.n	8012d78 <__lshift+0xac>
 8012d74:	f108 0602 	add.w	r6, r8, #2
 8012d78:	3e01      	subs	r6, #1
 8012d7a:	4638      	mov	r0, r7
 8012d7c:	612e      	str	r6, [r5, #16]
 8012d7e:	4621      	mov	r1, r4
 8012d80:	f7ff fdd2 	bl	8012928 <_Bfree>
 8012d84:	4628      	mov	r0, r5
 8012d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d8e:	3301      	adds	r3, #1
 8012d90:	e7c1      	b.n	8012d16 <__lshift+0x4a>
 8012d92:	3904      	subs	r1, #4
 8012d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d9c:	4298      	cmp	r0, r3
 8012d9e:	d8f9      	bhi.n	8012d94 <__lshift+0xc8>
 8012da0:	e7ea      	b.n	8012d78 <__lshift+0xac>
 8012da2:	bf00      	nop
 8012da4:	08014803 	.word	0x08014803
 8012da8:	08014874 	.word	0x08014874

08012dac <__mcmp>:
 8012dac:	b530      	push	{r4, r5, lr}
 8012dae:	6902      	ldr	r2, [r0, #16]
 8012db0:	690c      	ldr	r4, [r1, #16]
 8012db2:	1b12      	subs	r2, r2, r4
 8012db4:	d10e      	bne.n	8012dd4 <__mcmp+0x28>
 8012db6:	f100 0314 	add.w	r3, r0, #20
 8012dba:	3114      	adds	r1, #20
 8012dbc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012dc0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012dc4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012dc8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012dcc:	42a5      	cmp	r5, r4
 8012dce:	d003      	beq.n	8012dd8 <__mcmp+0x2c>
 8012dd0:	d305      	bcc.n	8012dde <__mcmp+0x32>
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	4610      	mov	r0, r2
 8012dd6:	bd30      	pop	{r4, r5, pc}
 8012dd8:	4283      	cmp	r3, r0
 8012dda:	d3f3      	bcc.n	8012dc4 <__mcmp+0x18>
 8012ddc:	e7fa      	b.n	8012dd4 <__mcmp+0x28>
 8012dde:	f04f 32ff 	mov.w	r2, #4294967295
 8012de2:	e7f7      	b.n	8012dd4 <__mcmp+0x28>

08012de4 <__mdiff>:
 8012de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de8:	460c      	mov	r4, r1
 8012dea:	4606      	mov	r6, r0
 8012dec:	4611      	mov	r1, r2
 8012dee:	4620      	mov	r0, r4
 8012df0:	4690      	mov	r8, r2
 8012df2:	f7ff ffdb 	bl	8012dac <__mcmp>
 8012df6:	1e05      	subs	r5, r0, #0
 8012df8:	d110      	bne.n	8012e1c <__mdiff+0x38>
 8012dfa:	4629      	mov	r1, r5
 8012dfc:	4630      	mov	r0, r6
 8012dfe:	f7ff fd53 	bl	80128a8 <_Balloc>
 8012e02:	b930      	cbnz	r0, 8012e12 <__mdiff+0x2e>
 8012e04:	4b3a      	ldr	r3, [pc, #232]	; (8012ef0 <__mdiff+0x10c>)
 8012e06:	4602      	mov	r2, r0
 8012e08:	f240 2132 	movw	r1, #562	; 0x232
 8012e0c:	4839      	ldr	r0, [pc, #228]	; (8012ef4 <__mdiff+0x110>)
 8012e0e:	f7fe fc4d 	bl	80116ac <__assert_func>
 8012e12:	2301      	movs	r3, #1
 8012e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e1c:	bfa4      	itt	ge
 8012e1e:	4643      	movge	r3, r8
 8012e20:	46a0      	movge	r8, r4
 8012e22:	4630      	mov	r0, r6
 8012e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012e28:	bfa6      	itte	ge
 8012e2a:	461c      	movge	r4, r3
 8012e2c:	2500      	movge	r5, #0
 8012e2e:	2501      	movlt	r5, #1
 8012e30:	f7ff fd3a 	bl	80128a8 <_Balloc>
 8012e34:	b920      	cbnz	r0, 8012e40 <__mdiff+0x5c>
 8012e36:	4b2e      	ldr	r3, [pc, #184]	; (8012ef0 <__mdiff+0x10c>)
 8012e38:	4602      	mov	r2, r0
 8012e3a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012e3e:	e7e5      	b.n	8012e0c <__mdiff+0x28>
 8012e40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012e44:	6926      	ldr	r6, [r4, #16]
 8012e46:	60c5      	str	r5, [r0, #12]
 8012e48:	f104 0914 	add.w	r9, r4, #20
 8012e4c:	f108 0514 	add.w	r5, r8, #20
 8012e50:	f100 0e14 	add.w	lr, r0, #20
 8012e54:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012e58:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012e5c:	f108 0210 	add.w	r2, r8, #16
 8012e60:	46f2      	mov	sl, lr
 8012e62:	2100      	movs	r1, #0
 8012e64:	f859 3b04 	ldr.w	r3, [r9], #4
 8012e68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012e6c:	fa1f f883 	uxth.w	r8, r3
 8012e70:	fa11 f18b 	uxtah	r1, r1, fp
 8012e74:	0c1b      	lsrs	r3, r3, #16
 8012e76:	eba1 0808 	sub.w	r8, r1, r8
 8012e7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012e7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012e82:	fa1f f888 	uxth.w	r8, r8
 8012e86:	1419      	asrs	r1, r3, #16
 8012e88:	454e      	cmp	r6, r9
 8012e8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012e8e:	f84a 3b04 	str.w	r3, [sl], #4
 8012e92:	d8e7      	bhi.n	8012e64 <__mdiff+0x80>
 8012e94:	1b33      	subs	r3, r6, r4
 8012e96:	3b15      	subs	r3, #21
 8012e98:	f023 0303 	bic.w	r3, r3, #3
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	3415      	adds	r4, #21
 8012ea0:	42a6      	cmp	r6, r4
 8012ea2:	bf38      	it	cc
 8012ea4:	2304      	movcc	r3, #4
 8012ea6:	441d      	add	r5, r3
 8012ea8:	4473      	add	r3, lr
 8012eaa:	469e      	mov	lr, r3
 8012eac:	462e      	mov	r6, r5
 8012eae:	4566      	cmp	r6, ip
 8012eb0:	d30e      	bcc.n	8012ed0 <__mdiff+0xec>
 8012eb2:	f10c 0203 	add.w	r2, ip, #3
 8012eb6:	1b52      	subs	r2, r2, r5
 8012eb8:	f022 0203 	bic.w	r2, r2, #3
 8012ebc:	3d03      	subs	r5, #3
 8012ebe:	45ac      	cmp	ip, r5
 8012ec0:	bf38      	it	cc
 8012ec2:	2200      	movcc	r2, #0
 8012ec4:	441a      	add	r2, r3
 8012ec6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012eca:	b17b      	cbz	r3, 8012eec <__mdiff+0x108>
 8012ecc:	6107      	str	r7, [r0, #16]
 8012ece:	e7a3      	b.n	8012e18 <__mdiff+0x34>
 8012ed0:	f856 8b04 	ldr.w	r8, [r6], #4
 8012ed4:	fa11 f288 	uxtah	r2, r1, r8
 8012ed8:	1414      	asrs	r4, r2, #16
 8012eda:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012ede:	b292      	uxth	r2, r2
 8012ee0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012ee4:	f84e 2b04 	str.w	r2, [lr], #4
 8012ee8:	1421      	asrs	r1, r4, #16
 8012eea:	e7e0      	b.n	8012eae <__mdiff+0xca>
 8012eec:	3f01      	subs	r7, #1
 8012eee:	e7ea      	b.n	8012ec6 <__mdiff+0xe2>
 8012ef0:	08014803 	.word	0x08014803
 8012ef4:	08014874 	.word	0x08014874

08012ef8 <__d2b>:
 8012ef8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012efc:	4689      	mov	r9, r1
 8012efe:	2101      	movs	r1, #1
 8012f00:	ec57 6b10 	vmov	r6, r7, d0
 8012f04:	4690      	mov	r8, r2
 8012f06:	f7ff fccf 	bl	80128a8 <_Balloc>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	b930      	cbnz	r0, 8012f1c <__d2b+0x24>
 8012f0e:	4602      	mov	r2, r0
 8012f10:	4b25      	ldr	r3, [pc, #148]	; (8012fa8 <__d2b+0xb0>)
 8012f12:	4826      	ldr	r0, [pc, #152]	; (8012fac <__d2b+0xb4>)
 8012f14:	f240 310a 	movw	r1, #778	; 0x30a
 8012f18:	f7fe fbc8 	bl	80116ac <__assert_func>
 8012f1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f24:	bb35      	cbnz	r5, 8012f74 <__d2b+0x7c>
 8012f26:	2e00      	cmp	r6, #0
 8012f28:	9301      	str	r3, [sp, #4]
 8012f2a:	d028      	beq.n	8012f7e <__d2b+0x86>
 8012f2c:	4668      	mov	r0, sp
 8012f2e:	9600      	str	r6, [sp, #0]
 8012f30:	f7ff fd82 	bl	8012a38 <__lo0bits>
 8012f34:	9900      	ldr	r1, [sp, #0]
 8012f36:	b300      	cbz	r0, 8012f7a <__d2b+0x82>
 8012f38:	9a01      	ldr	r2, [sp, #4]
 8012f3a:	f1c0 0320 	rsb	r3, r0, #32
 8012f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f42:	430b      	orrs	r3, r1
 8012f44:	40c2      	lsrs	r2, r0
 8012f46:	6163      	str	r3, [r4, #20]
 8012f48:	9201      	str	r2, [sp, #4]
 8012f4a:	9b01      	ldr	r3, [sp, #4]
 8012f4c:	61a3      	str	r3, [r4, #24]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	bf14      	ite	ne
 8012f52:	2202      	movne	r2, #2
 8012f54:	2201      	moveq	r2, #1
 8012f56:	6122      	str	r2, [r4, #16]
 8012f58:	b1d5      	cbz	r5, 8012f90 <__d2b+0x98>
 8012f5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012f5e:	4405      	add	r5, r0
 8012f60:	f8c9 5000 	str.w	r5, [r9]
 8012f64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012f68:	f8c8 0000 	str.w	r0, [r8]
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	b003      	add	sp, #12
 8012f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012f78:	e7d5      	b.n	8012f26 <__d2b+0x2e>
 8012f7a:	6161      	str	r1, [r4, #20]
 8012f7c:	e7e5      	b.n	8012f4a <__d2b+0x52>
 8012f7e:	a801      	add	r0, sp, #4
 8012f80:	f7ff fd5a 	bl	8012a38 <__lo0bits>
 8012f84:	9b01      	ldr	r3, [sp, #4]
 8012f86:	6163      	str	r3, [r4, #20]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	6122      	str	r2, [r4, #16]
 8012f8c:	3020      	adds	r0, #32
 8012f8e:	e7e3      	b.n	8012f58 <__d2b+0x60>
 8012f90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012f94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f98:	f8c9 0000 	str.w	r0, [r9]
 8012f9c:	6918      	ldr	r0, [r3, #16]
 8012f9e:	f7ff fd2b 	bl	80129f8 <__hi0bits>
 8012fa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012fa6:	e7df      	b.n	8012f68 <__d2b+0x70>
 8012fa8:	08014803 	.word	0x08014803
 8012fac:	08014874 	.word	0x08014874

08012fb0 <_calloc_r>:
 8012fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012fb2:	fba1 2402 	umull	r2, r4, r1, r2
 8012fb6:	b94c      	cbnz	r4, 8012fcc <_calloc_r+0x1c>
 8012fb8:	4611      	mov	r1, r2
 8012fba:	9201      	str	r2, [sp, #4]
 8012fbc:	f7fd fb60 	bl	8010680 <_malloc_r>
 8012fc0:	9a01      	ldr	r2, [sp, #4]
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	b930      	cbnz	r0, 8012fd4 <_calloc_r+0x24>
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	b003      	add	sp, #12
 8012fca:	bd30      	pop	{r4, r5, pc}
 8012fcc:	220c      	movs	r2, #12
 8012fce:	6002      	str	r2, [r0, #0]
 8012fd0:	2500      	movs	r5, #0
 8012fd2:	e7f8      	b.n	8012fc6 <_calloc_r+0x16>
 8012fd4:	4621      	mov	r1, r4
 8012fd6:	f7fd fadf 	bl	8010598 <memset>
 8012fda:	e7f4      	b.n	8012fc6 <_calloc_r+0x16>

08012fdc <__ssputs_r>:
 8012fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe0:	688e      	ldr	r6, [r1, #8]
 8012fe2:	429e      	cmp	r6, r3
 8012fe4:	4682      	mov	sl, r0
 8012fe6:	460c      	mov	r4, r1
 8012fe8:	4690      	mov	r8, r2
 8012fea:	461f      	mov	r7, r3
 8012fec:	d838      	bhi.n	8013060 <__ssputs_r+0x84>
 8012fee:	898a      	ldrh	r2, [r1, #12]
 8012ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ff4:	d032      	beq.n	801305c <__ssputs_r+0x80>
 8012ff6:	6825      	ldr	r5, [r4, #0]
 8012ff8:	6909      	ldr	r1, [r1, #16]
 8012ffa:	eba5 0901 	sub.w	r9, r5, r1
 8012ffe:	6965      	ldr	r5, [r4, #20]
 8013000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013004:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013008:	3301      	adds	r3, #1
 801300a:	444b      	add	r3, r9
 801300c:	106d      	asrs	r5, r5, #1
 801300e:	429d      	cmp	r5, r3
 8013010:	bf38      	it	cc
 8013012:	461d      	movcc	r5, r3
 8013014:	0553      	lsls	r3, r2, #21
 8013016:	d531      	bpl.n	801307c <__ssputs_r+0xa0>
 8013018:	4629      	mov	r1, r5
 801301a:	f7fd fb31 	bl	8010680 <_malloc_r>
 801301e:	4606      	mov	r6, r0
 8013020:	b950      	cbnz	r0, 8013038 <__ssputs_r+0x5c>
 8013022:	230c      	movs	r3, #12
 8013024:	f8ca 3000 	str.w	r3, [sl]
 8013028:	89a3      	ldrh	r3, [r4, #12]
 801302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801302e:	81a3      	strh	r3, [r4, #12]
 8013030:	f04f 30ff 	mov.w	r0, #4294967295
 8013034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013038:	6921      	ldr	r1, [r4, #16]
 801303a:	464a      	mov	r2, r9
 801303c:	f7fd fa9e 	bl	801057c <memcpy>
 8013040:	89a3      	ldrh	r3, [r4, #12]
 8013042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801304a:	81a3      	strh	r3, [r4, #12]
 801304c:	6126      	str	r6, [r4, #16]
 801304e:	6165      	str	r5, [r4, #20]
 8013050:	444e      	add	r6, r9
 8013052:	eba5 0509 	sub.w	r5, r5, r9
 8013056:	6026      	str	r6, [r4, #0]
 8013058:	60a5      	str	r5, [r4, #8]
 801305a:	463e      	mov	r6, r7
 801305c:	42be      	cmp	r6, r7
 801305e:	d900      	bls.n	8013062 <__ssputs_r+0x86>
 8013060:	463e      	mov	r6, r7
 8013062:	6820      	ldr	r0, [r4, #0]
 8013064:	4632      	mov	r2, r6
 8013066:	4641      	mov	r1, r8
 8013068:	f000 febe 	bl	8013de8 <memmove>
 801306c:	68a3      	ldr	r3, [r4, #8]
 801306e:	1b9b      	subs	r3, r3, r6
 8013070:	60a3      	str	r3, [r4, #8]
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	4433      	add	r3, r6
 8013076:	6023      	str	r3, [r4, #0]
 8013078:	2000      	movs	r0, #0
 801307a:	e7db      	b.n	8013034 <__ssputs_r+0x58>
 801307c:	462a      	mov	r2, r5
 801307e:	f000 fecd 	bl	8013e1c <_realloc_r>
 8013082:	4606      	mov	r6, r0
 8013084:	2800      	cmp	r0, #0
 8013086:	d1e1      	bne.n	801304c <__ssputs_r+0x70>
 8013088:	6921      	ldr	r1, [r4, #16]
 801308a:	4650      	mov	r0, sl
 801308c:	f7fd fa8c 	bl	80105a8 <_free_r>
 8013090:	e7c7      	b.n	8013022 <__ssputs_r+0x46>
	...

08013094 <_svfiprintf_r>:
 8013094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013098:	4698      	mov	r8, r3
 801309a:	898b      	ldrh	r3, [r1, #12]
 801309c:	061b      	lsls	r3, r3, #24
 801309e:	b09d      	sub	sp, #116	; 0x74
 80130a0:	4607      	mov	r7, r0
 80130a2:	460d      	mov	r5, r1
 80130a4:	4614      	mov	r4, r2
 80130a6:	d50e      	bpl.n	80130c6 <_svfiprintf_r+0x32>
 80130a8:	690b      	ldr	r3, [r1, #16]
 80130aa:	b963      	cbnz	r3, 80130c6 <_svfiprintf_r+0x32>
 80130ac:	2140      	movs	r1, #64	; 0x40
 80130ae:	f7fd fae7 	bl	8010680 <_malloc_r>
 80130b2:	6028      	str	r0, [r5, #0]
 80130b4:	6128      	str	r0, [r5, #16]
 80130b6:	b920      	cbnz	r0, 80130c2 <_svfiprintf_r+0x2e>
 80130b8:	230c      	movs	r3, #12
 80130ba:	603b      	str	r3, [r7, #0]
 80130bc:	f04f 30ff 	mov.w	r0, #4294967295
 80130c0:	e0d1      	b.n	8013266 <_svfiprintf_r+0x1d2>
 80130c2:	2340      	movs	r3, #64	; 0x40
 80130c4:	616b      	str	r3, [r5, #20]
 80130c6:	2300      	movs	r3, #0
 80130c8:	9309      	str	r3, [sp, #36]	; 0x24
 80130ca:	2320      	movs	r3, #32
 80130cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80130d4:	2330      	movs	r3, #48	; 0x30
 80130d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013280 <_svfiprintf_r+0x1ec>
 80130da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130de:	f04f 0901 	mov.w	r9, #1
 80130e2:	4623      	mov	r3, r4
 80130e4:	469a      	mov	sl, r3
 80130e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130ea:	b10a      	cbz	r2, 80130f0 <_svfiprintf_r+0x5c>
 80130ec:	2a25      	cmp	r2, #37	; 0x25
 80130ee:	d1f9      	bne.n	80130e4 <_svfiprintf_r+0x50>
 80130f0:	ebba 0b04 	subs.w	fp, sl, r4
 80130f4:	d00b      	beq.n	801310e <_svfiprintf_r+0x7a>
 80130f6:	465b      	mov	r3, fp
 80130f8:	4622      	mov	r2, r4
 80130fa:	4629      	mov	r1, r5
 80130fc:	4638      	mov	r0, r7
 80130fe:	f7ff ff6d 	bl	8012fdc <__ssputs_r>
 8013102:	3001      	adds	r0, #1
 8013104:	f000 80aa 	beq.w	801325c <_svfiprintf_r+0x1c8>
 8013108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801310a:	445a      	add	r2, fp
 801310c:	9209      	str	r2, [sp, #36]	; 0x24
 801310e:	f89a 3000 	ldrb.w	r3, [sl]
 8013112:	2b00      	cmp	r3, #0
 8013114:	f000 80a2 	beq.w	801325c <_svfiprintf_r+0x1c8>
 8013118:	2300      	movs	r3, #0
 801311a:	f04f 32ff 	mov.w	r2, #4294967295
 801311e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013122:	f10a 0a01 	add.w	sl, sl, #1
 8013126:	9304      	str	r3, [sp, #16]
 8013128:	9307      	str	r3, [sp, #28]
 801312a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801312e:	931a      	str	r3, [sp, #104]	; 0x68
 8013130:	4654      	mov	r4, sl
 8013132:	2205      	movs	r2, #5
 8013134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013138:	4851      	ldr	r0, [pc, #324]	; (8013280 <_svfiprintf_r+0x1ec>)
 801313a:	f7ed f861 	bl	8000200 <memchr>
 801313e:	9a04      	ldr	r2, [sp, #16]
 8013140:	b9d8      	cbnz	r0, 801317a <_svfiprintf_r+0xe6>
 8013142:	06d0      	lsls	r0, r2, #27
 8013144:	bf44      	itt	mi
 8013146:	2320      	movmi	r3, #32
 8013148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801314c:	0711      	lsls	r1, r2, #28
 801314e:	bf44      	itt	mi
 8013150:	232b      	movmi	r3, #43	; 0x2b
 8013152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013156:	f89a 3000 	ldrb.w	r3, [sl]
 801315a:	2b2a      	cmp	r3, #42	; 0x2a
 801315c:	d015      	beq.n	801318a <_svfiprintf_r+0xf6>
 801315e:	9a07      	ldr	r2, [sp, #28]
 8013160:	4654      	mov	r4, sl
 8013162:	2000      	movs	r0, #0
 8013164:	f04f 0c0a 	mov.w	ip, #10
 8013168:	4621      	mov	r1, r4
 801316a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801316e:	3b30      	subs	r3, #48	; 0x30
 8013170:	2b09      	cmp	r3, #9
 8013172:	d94e      	bls.n	8013212 <_svfiprintf_r+0x17e>
 8013174:	b1b0      	cbz	r0, 80131a4 <_svfiprintf_r+0x110>
 8013176:	9207      	str	r2, [sp, #28]
 8013178:	e014      	b.n	80131a4 <_svfiprintf_r+0x110>
 801317a:	eba0 0308 	sub.w	r3, r0, r8
 801317e:	fa09 f303 	lsl.w	r3, r9, r3
 8013182:	4313      	orrs	r3, r2
 8013184:	9304      	str	r3, [sp, #16]
 8013186:	46a2      	mov	sl, r4
 8013188:	e7d2      	b.n	8013130 <_svfiprintf_r+0x9c>
 801318a:	9b03      	ldr	r3, [sp, #12]
 801318c:	1d19      	adds	r1, r3, #4
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	9103      	str	r1, [sp, #12]
 8013192:	2b00      	cmp	r3, #0
 8013194:	bfbb      	ittet	lt
 8013196:	425b      	neglt	r3, r3
 8013198:	f042 0202 	orrlt.w	r2, r2, #2
 801319c:	9307      	strge	r3, [sp, #28]
 801319e:	9307      	strlt	r3, [sp, #28]
 80131a0:	bfb8      	it	lt
 80131a2:	9204      	strlt	r2, [sp, #16]
 80131a4:	7823      	ldrb	r3, [r4, #0]
 80131a6:	2b2e      	cmp	r3, #46	; 0x2e
 80131a8:	d10c      	bne.n	80131c4 <_svfiprintf_r+0x130>
 80131aa:	7863      	ldrb	r3, [r4, #1]
 80131ac:	2b2a      	cmp	r3, #42	; 0x2a
 80131ae:	d135      	bne.n	801321c <_svfiprintf_r+0x188>
 80131b0:	9b03      	ldr	r3, [sp, #12]
 80131b2:	1d1a      	adds	r2, r3, #4
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	9203      	str	r2, [sp, #12]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	bfb8      	it	lt
 80131bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80131c0:	3402      	adds	r4, #2
 80131c2:	9305      	str	r3, [sp, #20]
 80131c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013290 <_svfiprintf_r+0x1fc>
 80131c8:	7821      	ldrb	r1, [r4, #0]
 80131ca:	2203      	movs	r2, #3
 80131cc:	4650      	mov	r0, sl
 80131ce:	f7ed f817 	bl	8000200 <memchr>
 80131d2:	b140      	cbz	r0, 80131e6 <_svfiprintf_r+0x152>
 80131d4:	2340      	movs	r3, #64	; 0x40
 80131d6:	eba0 000a 	sub.w	r0, r0, sl
 80131da:	fa03 f000 	lsl.w	r0, r3, r0
 80131de:	9b04      	ldr	r3, [sp, #16]
 80131e0:	4303      	orrs	r3, r0
 80131e2:	3401      	adds	r4, #1
 80131e4:	9304      	str	r3, [sp, #16]
 80131e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ea:	4826      	ldr	r0, [pc, #152]	; (8013284 <_svfiprintf_r+0x1f0>)
 80131ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131f0:	2206      	movs	r2, #6
 80131f2:	f7ed f805 	bl	8000200 <memchr>
 80131f6:	2800      	cmp	r0, #0
 80131f8:	d038      	beq.n	801326c <_svfiprintf_r+0x1d8>
 80131fa:	4b23      	ldr	r3, [pc, #140]	; (8013288 <_svfiprintf_r+0x1f4>)
 80131fc:	bb1b      	cbnz	r3, 8013246 <_svfiprintf_r+0x1b2>
 80131fe:	9b03      	ldr	r3, [sp, #12]
 8013200:	3307      	adds	r3, #7
 8013202:	f023 0307 	bic.w	r3, r3, #7
 8013206:	3308      	adds	r3, #8
 8013208:	9303      	str	r3, [sp, #12]
 801320a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801320c:	4433      	add	r3, r6
 801320e:	9309      	str	r3, [sp, #36]	; 0x24
 8013210:	e767      	b.n	80130e2 <_svfiprintf_r+0x4e>
 8013212:	fb0c 3202 	mla	r2, ip, r2, r3
 8013216:	460c      	mov	r4, r1
 8013218:	2001      	movs	r0, #1
 801321a:	e7a5      	b.n	8013168 <_svfiprintf_r+0xd4>
 801321c:	2300      	movs	r3, #0
 801321e:	3401      	adds	r4, #1
 8013220:	9305      	str	r3, [sp, #20]
 8013222:	4619      	mov	r1, r3
 8013224:	f04f 0c0a 	mov.w	ip, #10
 8013228:	4620      	mov	r0, r4
 801322a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801322e:	3a30      	subs	r2, #48	; 0x30
 8013230:	2a09      	cmp	r2, #9
 8013232:	d903      	bls.n	801323c <_svfiprintf_r+0x1a8>
 8013234:	2b00      	cmp	r3, #0
 8013236:	d0c5      	beq.n	80131c4 <_svfiprintf_r+0x130>
 8013238:	9105      	str	r1, [sp, #20]
 801323a:	e7c3      	b.n	80131c4 <_svfiprintf_r+0x130>
 801323c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013240:	4604      	mov	r4, r0
 8013242:	2301      	movs	r3, #1
 8013244:	e7f0      	b.n	8013228 <_svfiprintf_r+0x194>
 8013246:	ab03      	add	r3, sp, #12
 8013248:	9300      	str	r3, [sp, #0]
 801324a:	462a      	mov	r2, r5
 801324c:	4b0f      	ldr	r3, [pc, #60]	; (801328c <_svfiprintf_r+0x1f8>)
 801324e:	a904      	add	r1, sp, #16
 8013250:	4638      	mov	r0, r7
 8013252:	f7fd fb29 	bl	80108a8 <_printf_float>
 8013256:	1c42      	adds	r2, r0, #1
 8013258:	4606      	mov	r6, r0
 801325a:	d1d6      	bne.n	801320a <_svfiprintf_r+0x176>
 801325c:	89ab      	ldrh	r3, [r5, #12]
 801325e:	065b      	lsls	r3, r3, #25
 8013260:	f53f af2c 	bmi.w	80130bc <_svfiprintf_r+0x28>
 8013264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013266:	b01d      	add	sp, #116	; 0x74
 8013268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801326c:	ab03      	add	r3, sp, #12
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	462a      	mov	r2, r5
 8013272:	4b06      	ldr	r3, [pc, #24]	; (801328c <_svfiprintf_r+0x1f8>)
 8013274:	a904      	add	r1, sp, #16
 8013276:	4638      	mov	r0, r7
 8013278:	f7fd fdba 	bl	8010df0 <_printf_i>
 801327c:	e7eb      	b.n	8013256 <_svfiprintf_r+0x1c2>
 801327e:	bf00      	nop
 8013280:	080149cc 	.word	0x080149cc
 8013284:	080149d6 	.word	0x080149d6
 8013288:	080108a9 	.word	0x080108a9
 801328c:	08012fdd 	.word	0x08012fdd
 8013290:	080149d2 	.word	0x080149d2

08013294 <_sungetc_r>:
 8013294:	b538      	push	{r3, r4, r5, lr}
 8013296:	1c4b      	adds	r3, r1, #1
 8013298:	4614      	mov	r4, r2
 801329a:	d103      	bne.n	80132a4 <_sungetc_r+0x10>
 801329c:	f04f 35ff 	mov.w	r5, #4294967295
 80132a0:	4628      	mov	r0, r5
 80132a2:	bd38      	pop	{r3, r4, r5, pc}
 80132a4:	8993      	ldrh	r3, [r2, #12]
 80132a6:	f023 0320 	bic.w	r3, r3, #32
 80132aa:	8193      	strh	r3, [r2, #12]
 80132ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80132ae:	6852      	ldr	r2, [r2, #4]
 80132b0:	b2cd      	uxtb	r5, r1
 80132b2:	b18b      	cbz	r3, 80132d8 <_sungetc_r+0x44>
 80132b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80132b6:	4293      	cmp	r3, r2
 80132b8:	dd08      	ble.n	80132cc <_sungetc_r+0x38>
 80132ba:	6823      	ldr	r3, [r4, #0]
 80132bc:	1e5a      	subs	r2, r3, #1
 80132be:	6022      	str	r2, [r4, #0]
 80132c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80132c4:	6863      	ldr	r3, [r4, #4]
 80132c6:	3301      	adds	r3, #1
 80132c8:	6063      	str	r3, [r4, #4]
 80132ca:	e7e9      	b.n	80132a0 <_sungetc_r+0xc>
 80132cc:	4621      	mov	r1, r4
 80132ce:	f000 fd1d 	bl	8013d0c <__submore>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d0f1      	beq.n	80132ba <_sungetc_r+0x26>
 80132d6:	e7e1      	b.n	801329c <_sungetc_r+0x8>
 80132d8:	6921      	ldr	r1, [r4, #16]
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	b151      	cbz	r1, 80132f4 <_sungetc_r+0x60>
 80132de:	4299      	cmp	r1, r3
 80132e0:	d208      	bcs.n	80132f4 <_sungetc_r+0x60>
 80132e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80132e6:	42a9      	cmp	r1, r5
 80132e8:	d104      	bne.n	80132f4 <_sungetc_r+0x60>
 80132ea:	3b01      	subs	r3, #1
 80132ec:	3201      	adds	r2, #1
 80132ee:	6023      	str	r3, [r4, #0]
 80132f0:	6062      	str	r2, [r4, #4]
 80132f2:	e7d5      	b.n	80132a0 <_sungetc_r+0xc>
 80132f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80132f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132fc:	6363      	str	r3, [r4, #52]	; 0x34
 80132fe:	2303      	movs	r3, #3
 8013300:	63a3      	str	r3, [r4, #56]	; 0x38
 8013302:	4623      	mov	r3, r4
 8013304:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	2301      	movs	r3, #1
 801330c:	e7dc      	b.n	80132c8 <_sungetc_r+0x34>

0801330e <__ssrefill_r>:
 801330e:	b510      	push	{r4, lr}
 8013310:	460c      	mov	r4, r1
 8013312:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013314:	b169      	cbz	r1, 8013332 <__ssrefill_r+0x24>
 8013316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801331a:	4299      	cmp	r1, r3
 801331c:	d001      	beq.n	8013322 <__ssrefill_r+0x14>
 801331e:	f7fd f943 	bl	80105a8 <_free_r>
 8013322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013324:	6063      	str	r3, [r4, #4]
 8013326:	2000      	movs	r0, #0
 8013328:	6360      	str	r0, [r4, #52]	; 0x34
 801332a:	b113      	cbz	r3, 8013332 <__ssrefill_r+0x24>
 801332c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801332e:	6023      	str	r3, [r4, #0]
 8013330:	bd10      	pop	{r4, pc}
 8013332:	6923      	ldr	r3, [r4, #16]
 8013334:	6023      	str	r3, [r4, #0]
 8013336:	2300      	movs	r3, #0
 8013338:	6063      	str	r3, [r4, #4]
 801333a:	89a3      	ldrh	r3, [r4, #12]
 801333c:	f043 0320 	orr.w	r3, r3, #32
 8013340:	81a3      	strh	r3, [r4, #12]
 8013342:	f04f 30ff 	mov.w	r0, #4294967295
 8013346:	e7f3      	b.n	8013330 <__ssrefill_r+0x22>

08013348 <__ssvfiscanf_r>:
 8013348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801334c:	460c      	mov	r4, r1
 801334e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013352:	2100      	movs	r1, #0
 8013354:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013358:	49a6      	ldr	r1, [pc, #664]	; (80135f4 <__ssvfiscanf_r+0x2ac>)
 801335a:	91a0      	str	r1, [sp, #640]	; 0x280
 801335c:	f10d 0804 	add.w	r8, sp, #4
 8013360:	49a5      	ldr	r1, [pc, #660]	; (80135f8 <__ssvfiscanf_r+0x2b0>)
 8013362:	4fa6      	ldr	r7, [pc, #664]	; (80135fc <__ssvfiscanf_r+0x2b4>)
 8013364:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8013600 <__ssvfiscanf_r+0x2b8>
 8013368:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801336c:	4606      	mov	r6, r0
 801336e:	91a1      	str	r1, [sp, #644]	; 0x284
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	7813      	ldrb	r3, [r2, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	f000 815a 	beq.w	801362e <__ssvfiscanf_r+0x2e6>
 801337a:	5dd9      	ldrb	r1, [r3, r7]
 801337c:	f011 0108 	ands.w	r1, r1, #8
 8013380:	f102 0501 	add.w	r5, r2, #1
 8013384:	d019      	beq.n	80133ba <__ssvfiscanf_r+0x72>
 8013386:	6863      	ldr	r3, [r4, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	dd0f      	ble.n	80133ac <__ssvfiscanf_r+0x64>
 801338c:	6823      	ldr	r3, [r4, #0]
 801338e:	781a      	ldrb	r2, [r3, #0]
 8013390:	5cba      	ldrb	r2, [r7, r2]
 8013392:	0712      	lsls	r2, r2, #28
 8013394:	d401      	bmi.n	801339a <__ssvfiscanf_r+0x52>
 8013396:	462a      	mov	r2, r5
 8013398:	e7eb      	b.n	8013372 <__ssvfiscanf_r+0x2a>
 801339a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801339c:	3201      	adds	r2, #1
 801339e:	9245      	str	r2, [sp, #276]	; 0x114
 80133a0:	6862      	ldr	r2, [r4, #4]
 80133a2:	3301      	adds	r3, #1
 80133a4:	3a01      	subs	r2, #1
 80133a6:	6062      	str	r2, [r4, #4]
 80133a8:	6023      	str	r3, [r4, #0]
 80133aa:	e7ec      	b.n	8013386 <__ssvfiscanf_r+0x3e>
 80133ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80133ae:	4621      	mov	r1, r4
 80133b0:	4630      	mov	r0, r6
 80133b2:	4798      	blx	r3
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d0e9      	beq.n	801338c <__ssvfiscanf_r+0x44>
 80133b8:	e7ed      	b.n	8013396 <__ssvfiscanf_r+0x4e>
 80133ba:	2b25      	cmp	r3, #37	; 0x25
 80133bc:	d012      	beq.n	80133e4 <__ssvfiscanf_r+0x9c>
 80133be:	469a      	mov	sl, r3
 80133c0:	6863      	ldr	r3, [r4, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f340 8091 	ble.w	80134ea <__ssvfiscanf_r+0x1a2>
 80133c8:	6822      	ldr	r2, [r4, #0]
 80133ca:	7813      	ldrb	r3, [r2, #0]
 80133cc:	4553      	cmp	r3, sl
 80133ce:	f040 812e 	bne.w	801362e <__ssvfiscanf_r+0x2e6>
 80133d2:	6863      	ldr	r3, [r4, #4]
 80133d4:	3b01      	subs	r3, #1
 80133d6:	6063      	str	r3, [r4, #4]
 80133d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80133da:	3201      	adds	r2, #1
 80133dc:	3301      	adds	r3, #1
 80133de:	6022      	str	r2, [r4, #0]
 80133e0:	9345      	str	r3, [sp, #276]	; 0x114
 80133e2:	e7d8      	b.n	8013396 <__ssvfiscanf_r+0x4e>
 80133e4:	9141      	str	r1, [sp, #260]	; 0x104
 80133e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80133e8:	7853      	ldrb	r3, [r2, #1]
 80133ea:	2b2a      	cmp	r3, #42	; 0x2a
 80133ec:	bf02      	ittt	eq
 80133ee:	2310      	moveq	r3, #16
 80133f0:	1c95      	addeq	r5, r2, #2
 80133f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80133f4:	220a      	movs	r2, #10
 80133f6:	46aa      	mov	sl, r5
 80133f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80133fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013400:	2b09      	cmp	r3, #9
 8013402:	d91d      	bls.n	8013440 <__ssvfiscanf_r+0xf8>
 8013404:	487e      	ldr	r0, [pc, #504]	; (8013600 <__ssvfiscanf_r+0x2b8>)
 8013406:	2203      	movs	r2, #3
 8013408:	f7ec fefa 	bl	8000200 <memchr>
 801340c:	b140      	cbz	r0, 8013420 <__ssvfiscanf_r+0xd8>
 801340e:	2301      	movs	r3, #1
 8013410:	eba0 0009 	sub.w	r0, r0, r9
 8013414:	fa03 f000 	lsl.w	r0, r3, r0
 8013418:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801341a:	4318      	orrs	r0, r3
 801341c:	9041      	str	r0, [sp, #260]	; 0x104
 801341e:	4655      	mov	r5, sl
 8013420:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013424:	2b78      	cmp	r3, #120	; 0x78
 8013426:	d806      	bhi.n	8013436 <__ssvfiscanf_r+0xee>
 8013428:	2b57      	cmp	r3, #87	; 0x57
 801342a:	d810      	bhi.n	801344e <__ssvfiscanf_r+0x106>
 801342c:	2b25      	cmp	r3, #37	; 0x25
 801342e:	d0c6      	beq.n	80133be <__ssvfiscanf_r+0x76>
 8013430:	d856      	bhi.n	80134e0 <__ssvfiscanf_r+0x198>
 8013432:	2b00      	cmp	r3, #0
 8013434:	d064      	beq.n	8013500 <__ssvfiscanf_r+0x1b8>
 8013436:	2303      	movs	r3, #3
 8013438:	9347      	str	r3, [sp, #284]	; 0x11c
 801343a:	230a      	movs	r3, #10
 801343c:	9342      	str	r3, [sp, #264]	; 0x108
 801343e:	e071      	b.n	8013524 <__ssvfiscanf_r+0x1dc>
 8013440:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013442:	fb02 1103 	mla	r1, r2, r3, r1
 8013446:	3930      	subs	r1, #48	; 0x30
 8013448:	9143      	str	r1, [sp, #268]	; 0x10c
 801344a:	4655      	mov	r5, sl
 801344c:	e7d3      	b.n	80133f6 <__ssvfiscanf_r+0xae>
 801344e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013452:	2a20      	cmp	r2, #32
 8013454:	d8ef      	bhi.n	8013436 <__ssvfiscanf_r+0xee>
 8013456:	a101      	add	r1, pc, #4	; (adr r1, 801345c <__ssvfiscanf_r+0x114>)
 8013458:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801345c:	0801350f 	.word	0x0801350f
 8013460:	08013437 	.word	0x08013437
 8013464:	08013437 	.word	0x08013437
 8013468:	0801356d 	.word	0x0801356d
 801346c:	08013437 	.word	0x08013437
 8013470:	08013437 	.word	0x08013437
 8013474:	08013437 	.word	0x08013437
 8013478:	08013437 	.word	0x08013437
 801347c:	08013437 	.word	0x08013437
 8013480:	08013437 	.word	0x08013437
 8013484:	08013437 	.word	0x08013437
 8013488:	08013583 	.word	0x08013583
 801348c:	08013559 	.word	0x08013559
 8013490:	080134e7 	.word	0x080134e7
 8013494:	080134e7 	.word	0x080134e7
 8013498:	080134e7 	.word	0x080134e7
 801349c:	08013437 	.word	0x08013437
 80134a0:	0801355d 	.word	0x0801355d
 80134a4:	08013437 	.word	0x08013437
 80134a8:	08013437 	.word	0x08013437
 80134ac:	08013437 	.word	0x08013437
 80134b0:	08013437 	.word	0x08013437
 80134b4:	08013593 	.word	0x08013593
 80134b8:	08013565 	.word	0x08013565
 80134bc:	08013507 	.word	0x08013507
 80134c0:	08013437 	.word	0x08013437
 80134c4:	08013437 	.word	0x08013437
 80134c8:	0801358f 	.word	0x0801358f
 80134cc:	08013437 	.word	0x08013437
 80134d0:	08013559 	.word	0x08013559
 80134d4:	08013437 	.word	0x08013437
 80134d8:	08013437 	.word	0x08013437
 80134dc:	0801350f 	.word	0x0801350f
 80134e0:	3b45      	subs	r3, #69	; 0x45
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	d8a7      	bhi.n	8013436 <__ssvfiscanf_r+0xee>
 80134e6:	2305      	movs	r3, #5
 80134e8:	e01b      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 80134ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80134ec:	4621      	mov	r1, r4
 80134ee:	4630      	mov	r0, r6
 80134f0:	4798      	blx	r3
 80134f2:	2800      	cmp	r0, #0
 80134f4:	f43f af68 	beq.w	80133c8 <__ssvfiscanf_r+0x80>
 80134f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80134fa:	2800      	cmp	r0, #0
 80134fc:	f040 808d 	bne.w	801361a <__ssvfiscanf_r+0x2d2>
 8013500:	f04f 30ff 	mov.w	r0, #4294967295
 8013504:	e08f      	b.n	8013626 <__ssvfiscanf_r+0x2de>
 8013506:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013508:	f042 0220 	orr.w	r2, r2, #32
 801350c:	9241      	str	r2, [sp, #260]	; 0x104
 801350e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013514:	9241      	str	r2, [sp, #260]	; 0x104
 8013516:	2210      	movs	r2, #16
 8013518:	2b6f      	cmp	r3, #111	; 0x6f
 801351a:	9242      	str	r2, [sp, #264]	; 0x108
 801351c:	bf34      	ite	cc
 801351e:	2303      	movcc	r3, #3
 8013520:	2304      	movcs	r3, #4
 8013522:	9347      	str	r3, [sp, #284]	; 0x11c
 8013524:	6863      	ldr	r3, [r4, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	dd42      	ble.n	80135b0 <__ssvfiscanf_r+0x268>
 801352a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801352c:	0659      	lsls	r1, r3, #25
 801352e:	d404      	bmi.n	801353a <__ssvfiscanf_r+0x1f2>
 8013530:	6823      	ldr	r3, [r4, #0]
 8013532:	781a      	ldrb	r2, [r3, #0]
 8013534:	5cba      	ldrb	r2, [r7, r2]
 8013536:	0712      	lsls	r2, r2, #28
 8013538:	d441      	bmi.n	80135be <__ssvfiscanf_r+0x276>
 801353a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801353c:	2b02      	cmp	r3, #2
 801353e:	dc50      	bgt.n	80135e2 <__ssvfiscanf_r+0x29a>
 8013540:	466b      	mov	r3, sp
 8013542:	4622      	mov	r2, r4
 8013544:	a941      	add	r1, sp, #260	; 0x104
 8013546:	4630      	mov	r0, r6
 8013548:	f000 f9d0 	bl	80138ec <_scanf_chars>
 801354c:	2801      	cmp	r0, #1
 801354e:	d06e      	beq.n	801362e <__ssvfiscanf_r+0x2e6>
 8013550:	2802      	cmp	r0, #2
 8013552:	f47f af20 	bne.w	8013396 <__ssvfiscanf_r+0x4e>
 8013556:	e7cf      	b.n	80134f8 <__ssvfiscanf_r+0x1b0>
 8013558:	220a      	movs	r2, #10
 801355a:	e7dd      	b.n	8013518 <__ssvfiscanf_r+0x1d0>
 801355c:	2300      	movs	r3, #0
 801355e:	9342      	str	r3, [sp, #264]	; 0x108
 8013560:	2303      	movs	r3, #3
 8013562:	e7de      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 8013564:	2308      	movs	r3, #8
 8013566:	9342      	str	r3, [sp, #264]	; 0x108
 8013568:	2304      	movs	r3, #4
 801356a:	e7da      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 801356c:	4629      	mov	r1, r5
 801356e:	4640      	mov	r0, r8
 8013570:	f000 fb20 	bl	8013bb4 <__sccl>
 8013574:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801357a:	9341      	str	r3, [sp, #260]	; 0x104
 801357c:	4605      	mov	r5, r0
 801357e:	2301      	movs	r3, #1
 8013580:	e7cf      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 8013582:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013588:	9341      	str	r3, [sp, #260]	; 0x104
 801358a:	2300      	movs	r3, #0
 801358c:	e7c9      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 801358e:	2302      	movs	r3, #2
 8013590:	e7c7      	b.n	8013522 <__ssvfiscanf_r+0x1da>
 8013592:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013594:	06c3      	lsls	r3, r0, #27
 8013596:	f53f aefe 	bmi.w	8013396 <__ssvfiscanf_r+0x4e>
 801359a:	9b00      	ldr	r3, [sp, #0]
 801359c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801359e:	1d19      	adds	r1, r3, #4
 80135a0:	9100      	str	r1, [sp, #0]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	f010 0f01 	tst.w	r0, #1
 80135a8:	bf14      	ite	ne
 80135aa:	801a      	strhne	r2, [r3, #0]
 80135ac:	601a      	streq	r2, [r3, #0]
 80135ae:	e6f2      	b.n	8013396 <__ssvfiscanf_r+0x4e>
 80135b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80135b2:	4621      	mov	r1, r4
 80135b4:	4630      	mov	r0, r6
 80135b6:	4798      	blx	r3
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d0b6      	beq.n	801352a <__ssvfiscanf_r+0x1e2>
 80135bc:	e79c      	b.n	80134f8 <__ssvfiscanf_r+0x1b0>
 80135be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80135c0:	3201      	adds	r2, #1
 80135c2:	9245      	str	r2, [sp, #276]	; 0x114
 80135c4:	6862      	ldr	r2, [r4, #4]
 80135c6:	3a01      	subs	r2, #1
 80135c8:	2a00      	cmp	r2, #0
 80135ca:	6062      	str	r2, [r4, #4]
 80135cc:	dd02      	ble.n	80135d4 <__ssvfiscanf_r+0x28c>
 80135ce:	3301      	adds	r3, #1
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	e7ad      	b.n	8013530 <__ssvfiscanf_r+0x1e8>
 80135d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80135d6:	4621      	mov	r1, r4
 80135d8:	4630      	mov	r0, r6
 80135da:	4798      	blx	r3
 80135dc:	2800      	cmp	r0, #0
 80135de:	d0a7      	beq.n	8013530 <__ssvfiscanf_r+0x1e8>
 80135e0:	e78a      	b.n	80134f8 <__ssvfiscanf_r+0x1b0>
 80135e2:	2b04      	cmp	r3, #4
 80135e4:	dc0e      	bgt.n	8013604 <__ssvfiscanf_r+0x2bc>
 80135e6:	466b      	mov	r3, sp
 80135e8:	4622      	mov	r2, r4
 80135ea:	a941      	add	r1, sp, #260	; 0x104
 80135ec:	4630      	mov	r0, r6
 80135ee:	f000 f9d7 	bl	80139a0 <_scanf_i>
 80135f2:	e7ab      	b.n	801354c <__ssvfiscanf_r+0x204>
 80135f4:	08013295 	.word	0x08013295
 80135f8:	0801330f 	.word	0x0801330f
 80135fc:	0801469b 	.word	0x0801469b
 8013600:	080149d2 	.word	0x080149d2
 8013604:	4b0b      	ldr	r3, [pc, #44]	; (8013634 <__ssvfiscanf_r+0x2ec>)
 8013606:	2b00      	cmp	r3, #0
 8013608:	f43f aec5 	beq.w	8013396 <__ssvfiscanf_r+0x4e>
 801360c:	466b      	mov	r3, sp
 801360e:	4622      	mov	r2, r4
 8013610:	a941      	add	r1, sp, #260	; 0x104
 8013612:	4630      	mov	r0, r6
 8013614:	f3af 8000 	nop.w
 8013618:	e798      	b.n	801354c <__ssvfiscanf_r+0x204>
 801361a:	89a3      	ldrh	r3, [r4, #12]
 801361c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013620:	bf18      	it	ne
 8013622:	f04f 30ff 	movne.w	r0, #4294967295
 8013626:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801362e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013630:	e7f9      	b.n	8013626 <__ssvfiscanf_r+0x2de>
 8013632:	bf00      	nop
 8013634:	00000000 	.word	0x00000000

08013638 <__sfputc_r>:
 8013638:	6893      	ldr	r3, [r2, #8]
 801363a:	3b01      	subs	r3, #1
 801363c:	2b00      	cmp	r3, #0
 801363e:	b410      	push	{r4}
 8013640:	6093      	str	r3, [r2, #8]
 8013642:	da08      	bge.n	8013656 <__sfputc_r+0x1e>
 8013644:	6994      	ldr	r4, [r2, #24]
 8013646:	42a3      	cmp	r3, r4
 8013648:	db01      	blt.n	801364e <__sfputc_r+0x16>
 801364a:	290a      	cmp	r1, #10
 801364c:	d103      	bne.n	8013656 <__sfputc_r+0x1e>
 801364e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013652:	f7fd bf59 	b.w	8011508 <__swbuf_r>
 8013656:	6813      	ldr	r3, [r2, #0]
 8013658:	1c58      	adds	r0, r3, #1
 801365a:	6010      	str	r0, [r2, #0]
 801365c:	7019      	strb	r1, [r3, #0]
 801365e:	4608      	mov	r0, r1
 8013660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013664:	4770      	bx	lr

08013666 <__sfputs_r>:
 8013666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013668:	4606      	mov	r6, r0
 801366a:	460f      	mov	r7, r1
 801366c:	4614      	mov	r4, r2
 801366e:	18d5      	adds	r5, r2, r3
 8013670:	42ac      	cmp	r4, r5
 8013672:	d101      	bne.n	8013678 <__sfputs_r+0x12>
 8013674:	2000      	movs	r0, #0
 8013676:	e007      	b.n	8013688 <__sfputs_r+0x22>
 8013678:	f814 1b01 	ldrb.w	r1, [r4], #1
 801367c:	463a      	mov	r2, r7
 801367e:	4630      	mov	r0, r6
 8013680:	f7ff ffda 	bl	8013638 <__sfputc_r>
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	d1f3      	bne.n	8013670 <__sfputs_r+0xa>
 8013688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801368c <_vfiprintf_r>:
 801368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013690:	460d      	mov	r5, r1
 8013692:	b09d      	sub	sp, #116	; 0x74
 8013694:	4614      	mov	r4, r2
 8013696:	4698      	mov	r8, r3
 8013698:	4606      	mov	r6, r0
 801369a:	b118      	cbz	r0, 80136a4 <_vfiprintf_r+0x18>
 801369c:	6983      	ldr	r3, [r0, #24]
 801369e:	b90b      	cbnz	r3, 80136a4 <_vfiprintf_r+0x18>
 80136a0:	f7fe ffc6 	bl	8012630 <__sinit>
 80136a4:	4b89      	ldr	r3, [pc, #548]	; (80138cc <_vfiprintf_r+0x240>)
 80136a6:	429d      	cmp	r5, r3
 80136a8:	d11b      	bne.n	80136e2 <_vfiprintf_r+0x56>
 80136aa:	6875      	ldr	r5, [r6, #4]
 80136ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136ae:	07d9      	lsls	r1, r3, #31
 80136b0:	d405      	bmi.n	80136be <_vfiprintf_r+0x32>
 80136b2:	89ab      	ldrh	r3, [r5, #12]
 80136b4:	059a      	lsls	r2, r3, #22
 80136b6:	d402      	bmi.n	80136be <_vfiprintf_r+0x32>
 80136b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136ba:	f7ff f86e 	bl	801279a <__retarget_lock_acquire_recursive>
 80136be:	89ab      	ldrh	r3, [r5, #12]
 80136c0:	071b      	lsls	r3, r3, #28
 80136c2:	d501      	bpl.n	80136c8 <_vfiprintf_r+0x3c>
 80136c4:	692b      	ldr	r3, [r5, #16]
 80136c6:	b9eb      	cbnz	r3, 8013704 <_vfiprintf_r+0x78>
 80136c8:	4629      	mov	r1, r5
 80136ca:	4630      	mov	r0, r6
 80136cc:	f7fd ff80 	bl	80115d0 <__swsetup_r>
 80136d0:	b1c0      	cbz	r0, 8013704 <_vfiprintf_r+0x78>
 80136d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136d4:	07dc      	lsls	r4, r3, #31
 80136d6:	d50e      	bpl.n	80136f6 <_vfiprintf_r+0x6a>
 80136d8:	f04f 30ff 	mov.w	r0, #4294967295
 80136dc:	b01d      	add	sp, #116	; 0x74
 80136de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e2:	4b7b      	ldr	r3, [pc, #492]	; (80138d0 <_vfiprintf_r+0x244>)
 80136e4:	429d      	cmp	r5, r3
 80136e6:	d101      	bne.n	80136ec <_vfiprintf_r+0x60>
 80136e8:	68b5      	ldr	r5, [r6, #8]
 80136ea:	e7df      	b.n	80136ac <_vfiprintf_r+0x20>
 80136ec:	4b79      	ldr	r3, [pc, #484]	; (80138d4 <_vfiprintf_r+0x248>)
 80136ee:	429d      	cmp	r5, r3
 80136f0:	bf08      	it	eq
 80136f2:	68f5      	ldreq	r5, [r6, #12]
 80136f4:	e7da      	b.n	80136ac <_vfiprintf_r+0x20>
 80136f6:	89ab      	ldrh	r3, [r5, #12]
 80136f8:	0598      	lsls	r0, r3, #22
 80136fa:	d4ed      	bmi.n	80136d8 <_vfiprintf_r+0x4c>
 80136fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136fe:	f7ff f84d 	bl	801279c <__retarget_lock_release_recursive>
 8013702:	e7e9      	b.n	80136d8 <_vfiprintf_r+0x4c>
 8013704:	2300      	movs	r3, #0
 8013706:	9309      	str	r3, [sp, #36]	; 0x24
 8013708:	2320      	movs	r3, #32
 801370a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801370e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013712:	2330      	movs	r3, #48	; 0x30
 8013714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80138d8 <_vfiprintf_r+0x24c>
 8013718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801371c:	f04f 0901 	mov.w	r9, #1
 8013720:	4623      	mov	r3, r4
 8013722:	469a      	mov	sl, r3
 8013724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013728:	b10a      	cbz	r2, 801372e <_vfiprintf_r+0xa2>
 801372a:	2a25      	cmp	r2, #37	; 0x25
 801372c:	d1f9      	bne.n	8013722 <_vfiprintf_r+0x96>
 801372e:	ebba 0b04 	subs.w	fp, sl, r4
 8013732:	d00b      	beq.n	801374c <_vfiprintf_r+0xc0>
 8013734:	465b      	mov	r3, fp
 8013736:	4622      	mov	r2, r4
 8013738:	4629      	mov	r1, r5
 801373a:	4630      	mov	r0, r6
 801373c:	f7ff ff93 	bl	8013666 <__sfputs_r>
 8013740:	3001      	adds	r0, #1
 8013742:	f000 80aa 	beq.w	801389a <_vfiprintf_r+0x20e>
 8013746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013748:	445a      	add	r2, fp
 801374a:	9209      	str	r2, [sp, #36]	; 0x24
 801374c:	f89a 3000 	ldrb.w	r3, [sl]
 8013750:	2b00      	cmp	r3, #0
 8013752:	f000 80a2 	beq.w	801389a <_vfiprintf_r+0x20e>
 8013756:	2300      	movs	r3, #0
 8013758:	f04f 32ff 	mov.w	r2, #4294967295
 801375c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013760:	f10a 0a01 	add.w	sl, sl, #1
 8013764:	9304      	str	r3, [sp, #16]
 8013766:	9307      	str	r3, [sp, #28]
 8013768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801376c:	931a      	str	r3, [sp, #104]	; 0x68
 801376e:	4654      	mov	r4, sl
 8013770:	2205      	movs	r2, #5
 8013772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013776:	4858      	ldr	r0, [pc, #352]	; (80138d8 <_vfiprintf_r+0x24c>)
 8013778:	f7ec fd42 	bl	8000200 <memchr>
 801377c:	9a04      	ldr	r2, [sp, #16]
 801377e:	b9d8      	cbnz	r0, 80137b8 <_vfiprintf_r+0x12c>
 8013780:	06d1      	lsls	r1, r2, #27
 8013782:	bf44      	itt	mi
 8013784:	2320      	movmi	r3, #32
 8013786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801378a:	0713      	lsls	r3, r2, #28
 801378c:	bf44      	itt	mi
 801378e:	232b      	movmi	r3, #43	; 0x2b
 8013790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013794:	f89a 3000 	ldrb.w	r3, [sl]
 8013798:	2b2a      	cmp	r3, #42	; 0x2a
 801379a:	d015      	beq.n	80137c8 <_vfiprintf_r+0x13c>
 801379c:	9a07      	ldr	r2, [sp, #28]
 801379e:	4654      	mov	r4, sl
 80137a0:	2000      	movs	r0, #0
 80137a2:	f04f 0c0a 	mov.w	ip, #10
 80137a6:	4621      	mov	r1, r4
 80137a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137ac:	3b30      	subs	r3, #48	; 0x30
 80137ae:	2b09      	cmp	r3, #9
 80137b0:	d94e      	bls.n	8013850 <_vfiprintf_r+0x1c4>
 80137b2:	b1b0      	cbz	r0, 80137e2 <_vfiprintf_r+0x156>
 80137b4:	9207      	str	r2, [sp, #28]
 80137b6:	e014      	b.n	80137e2 <_vfiprintf_r+0x156>
 80137b8:	eba0 0308 	sub.w	r3, r0, r8
 80137bc:	fa09 f303 	lsl.w	r3, r9, r3
 80137c0:	4313      	orrs	r3, r2
 80137c2:	9304      	str	r3, [sp, #16]
 80137c4:	46a2      	mov	sl, r4
 80137c6:	e7d2      	b.n	801376e <_vfiprintf_r+0xe2>
 80137c8:	9b03      	ldr	r3, [sp, #12]
 80137ca:	1d19      	adds	r1, r3, #4
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	9103      	str	r1, [sp, #12]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	bfbb      	ittet	lt
 80137d4:	425b      	neglt	r3, r3
 80137d6:	f042 0202 	orrlt.w	r2, r2, #2
 80137da:	9307      	strge	r3, [sp, #28]
 80137dc:	9307      	strlt	r3, [sp, #28]
 80137de:	bfb8      	it	lt
 80137e0:	9204      	strlt	r2, [sp, #16]
 80137e2:	7823      	ldrb	r3, [r4, #0]
 80137e4:	2b2e      	cmp	r3, #46	; 0x2e
 80137e6:	d10c      	bne.n	8013802 <_vfiprintf_r+0x176>
 80137e8:	7863      	ldrb	r3, [r4, #1]
 80137ea:	2b2a      	cmp	r3, #42	; 0x2a
 80137ec:	d135      	bne.n	801385a <_vfiprintf_r+0x1ce>
 80137ee:	9b03      	ldr	r3, [sp, #12]
 80137f0:	1d1a      	adds	r2, r3, #4
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	9203      	str	r2, [sp, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	bfb8      	it	lt
 80137fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80137fe:	3402      	adds	r4, #2
 8013800:	9305      	str	r3, [sp, #20]
 8013802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138e8 <_vfiprintf_r+0x25c>
 8013806:	7821      	ldrb	r1, [r4, #0]
 8013808:	2203      	movs	r2, #3
 801380a:	4650      	mov	r0, sl
 801380c:	f7ec fcf8 	bl	8000200 <memchr>
 8013810:	b140      	cbz	r0, 8013824 <_vfiprintf_r+0x198>
 8013812:	2340      	movs	r3, #64	; 0x40
 8013814:	eba0 000a 	sub.w	r0, r0, sl
 8013818:	fa03 f000 	lsl.w	r0, r3, r0
 801381c:	9b04      	ldr	r3, [sp, #16]
 801381e:	4303      	orrs	r3, r0
 8013820:	3401      	adds	r4, #1
 8013822:	9304      	str	r3, [sp, #16]
 8013824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013828:	482c      	ldr	r0, [pc, #176]	; (80138dc <_vfiprintf_r+0x250>)
 801382a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801382e:	2206      	movs	r2, #6
 8013830:	f7ec fce6 	bl	8000200 <memchr>
 8013834:	2800      	cmp	r0, #0
 8013836:	d03f      	beq.n	80138b8 <_vfiprintf_r+0x22c>
 8013838:	4b29      	ldr	r3, [pc, #164]	; (80138e0 <_vfiprintf_r+0x254>)
 801383a:	bb1b      	cbnz	r3, 8013884 <_vfiprintf_r+0x1f8>
 801383c:	9b03      	ldr	r3, [sp, #12]
 801383e:	3307      	adds	r3, #7
 8013840:	f023 0307 	bic.w	r3, r3, #7
 8013844:	3308      	adds	r3, #8
 8013846:	9303      	str	r3, [sp, #12]
 8013848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801384a:	443b      	add	r3, r7
 801384c:	9309      	str	r3, [sp, #36]	; 0x24
 801384e:	e767      	b.n	8013720 <_vfiprintf_r+0x94>
 8013850:	fb0c 3202 	mla	r2, ip, r2, r3
 8013854:	460c      	mov	r4, r1
 8013856:	2001      	movs	r0, #1
 8013858:	e7a5      	b.n	80137a6 <_vfiprintf_r+0x11a>
 801385a:	2300      	movs	r3, #0
 801385c:	3401      	adds	r4, #1
 801385e:	9305      	str	r3, [sp, #20]
 8013860:	4619      	mov	r1, r3
 8013862:	f04f 0c0a 	mov.w	ip, #10
 8013866:	4620      	mov	r0, r4
 8013868:	f810 2b01 	ldrb.w	r2, [r0], #1
 801386c:	3a30      	subs	r2, #48	; 0x30
 801386e:	2a09      	cmp	r2, #9
 8013870:	d903      	bls.n	801387a <_vfiprintf_r+0x1ee>
 8013872:	2b00      	cmp	r3, #0
 8013874:	d0c5      	beq.n	8013802 <_vfiprintf_r+0x176>
 8013876:	9105      	str	r1, [sp, #20]
 8013878:	e7c3      	b.n	8013802 <_vfiprintf_r+0x176>
 801387a:	fb0c 2101 	mla	r1, ip, r1, r2
 801387e:	4604      	mov	r4, r0
 8013880:	2301      	movs	r3, #1
 8013882:	e7f0      	b.n	8013866 <_vfiprintf_r+0x1da>
 8013884:	ab03      	add	r3, sp, #12
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	462a      	mov	r2, r5
 801388a:	4b16      	ldr	r3, [pc, #88]	; (80138e4 <_vfiprintf_r+0x258>)
 801388c:	a904      	add	r1, sp, #16
 801388e:	4630      	mov	r0, r6
 8013890:	f7fd f80a 	bl	80108a8 <_printf_float>
 8013894:	4607      	mov	r7, r0
 8013896:	1c78      	adds	r0, r7, #1
 8013898:	d1d6      	bne.n	8013848 <_vfiprintf_r+0x1bc>
 801389a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801389c:	07d9      	lsls	r1, r3, #31
 801389e:	d405      	bmi.n	80138ac <_vfiprintf_r+0x220>
 80138a0:	89ab      	ldrh	r3, [r5, #12]
 80138a2:	059a      	lsls	r2, r3, #22
 80138a4:	d402      	bmi.n	80138ac <_vfiprintf_r+0x220>
 80138a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138a8:	f7fe ff78 	bl	801279c <__retarget_lock_release_recursive>
 80138ac:	89ab      	ldrh	r3, [r5, #12]
 80138ae:	065b      	lsls	r3, r3, #25
 80138b0:	f53f af12 	bmi.w	80136d8 <_vfiprintf_r+0x4c>
 80138b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138b6:	e711      	b.n	80136dc <_vfiprintf_r+0x50>
 80138b8:	ab03      	add	r3, sp, #12
 80138ba:	9300      	str	r3, [sp, #0]
 80138bc:	462a      	mov	r2, r5
 80138be:	4b09      	ldr	r3, [pc, #36]	; (80138e4 <_vfiprintf_r+0x258>)
 80138c0:	a904      	add	r1, sp, #16
 80138c2:	4630      	mov	r0, r6
 80138c4:	f7fd fa94 	bl	8010df0 <_printf_i>
 80138c8:	e7e4      	b.n	8013894 <_vfiprintf_r+0x208>
 80138ca:	bf00      	nop
 80138cc:	08014834 	.word	0x08014834
 80138d0:	08014854 	.word	0x08014854
 80138d4:	08014814 	.word	0x08014814
 80138d8:	080149cc 	.word	0x080149cc
 80138dc:	080149d6 	.word	0x080149d6
 80138e0:	080108a9 	.word	0x080108a9
 80138e4:	08013667 	.word	0x08013667
 80138e8:	080149d2 	.word	0x080149d2

080138ec <_scanf_chars>:
 80138ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138f0:	4615      	mov	r5, r2
 80138f2:	688a      	ldr	r2, [r1, #8]
 80138f4:	4680      	mov	r8, r0
 80138f6:	460c      	mov	r4, r1
 80138f8:	b932      	cbnz	r2, 8013908 <_scanf_chars+0x1c>
 80138fa:	698a      	ldr	r2, [r1, #24]
 80138fc:	2a00      	cmp	r2, #0
 80138fe:	bf0c      	ite	eq
 8013900:	2201      	moveq	r2, #1
 8013902:	f04f 32ff 	movne.w	r2, #4294967295
 8013906:	608a      	str	r2, [r1, #8]
 8013908:	6822      	ldr	r2, [r4, #0]
 801390a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801399c <_scanf_chars+0xb0>
 801390e:	06d1      	lsls	r1, r2, #27
 8013910:	bf5f      	itttt	pl
 8013912:	681a      	ldrpl	r2, [r3, #0]
 8013914:	1d11      	addpl	r1, r2, #4
 8013916:	6019      	strpl	r1, [r3, #0]
 8013918:	6816      	ldrpl	r6, [r2, #0]
 801391a:	2700      	movs	r7, #0
 801391c:	69a0      	ldr	r0, [r4, #24]
 801391e:	b188      	cbz	r0, 8013944 <_scanf_chars+0x58>
 8013920:	2801      	cmp	r0, #1
 8013922:	d107      	bne.n	8013934 <_scanf_chars+0x48>
 8013924:	682a      	ldr	r2, [r5, #0]
 8013926:	7811      	ldrb	r1, [r2, #0]
 8013928:	6962      	ldr	r2, [r4, #20]
 801392a:	5c52      	ldrb	r2, [r2, r1]
 801392c:	b952      	cbnz	r2, 8013944 <_scanf_chars+0x58>
 801392e:	2f00      	cmp	r7, #0
 8013930:	d031      	beq.n	8013996 <_scanf_chars+0xaa>
 8013932:	e022      	b.n	801397a <_scanf_chars+0x8e>
 8013934:	2802      	cmp	r0, #2
 8013936:	d120      	bne.n	801397a <_scanf_chars+0x8e>
 8013938:	682b      	ldr	r3, [r5, #0]
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013940:	071b      	lsls	r3, r3, #28
 8013942:	d41a      	bmi.n	801397a <_scanf_chars+0x8e>
 8013944:	6823      	ldr	r3, [r4, #0]
 8013946:	06da      	lsls	r2, r3, #27
 8013948:	bf5e      	ittt	pl
 801394a:	682b      	ldrpl	r3, [r5, #0]
 801394c:	781b      	ldrbpl	r3, [r3, #0]
 801394e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013952:	682a      	ldr	r2, [r5, #0]
 8013954:	686b      	ldr	r3, [r5, #4]
 8013956:	3201      	adds	r2, #1
 8013958:	602a      	str	r2, [r5, #0]
 801395a:	68a2      	ldr	r2, [r4, #8]
 801395c:	3b01      	subs	r3, #1
 801395e:	3a01      	subs	r2, #1
 8013960:	606b      	str	r3, [r5, #4]
 8013962:	3701      	adds	r7, #1
 8013964:	60a2      	str	r2, [r4, #8]
 8013966:	b142      	cbz	r2, 801397a <_scanf_chars+0x8e>
 8013968:	2b00      	cmp	r3, #0
 801396a:	dcd7      	bgt.n	801391c <_scanf_chars+0x30>
 801396c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013970:	4629      	mov	r1, r5
 8013972:	4640      	mov	r0, r8
 8013974:	4798      	blx	r3
 8013976:	2800      	cmp	r0, #0
 8013978:	d0d0      	beq.n	801391c <_scanf_chars+0x30>
 801397a:	6823      	ldr	r3, [r4, #0]
 801397c:	f013 0310 	ands.w	r3, r3, #16
 8013980:	d105      	bne.n	801398e <_scanf_chars+0xa2>
 8013982:	68e2      	ldr	r2, [r4, #12]
 8013984:	3201      	adds	r2, #1
 8013986:	60e2      	str	r2, [r4, #12]
 8013988:	69a2      	ldr	r2, [r4, #24]
 801398a:	b102      	cbz	r2, 801398e <_scanf_chars+0xa2>
 801398c:	7033      	strb	r3, [r6, #0]
 801398e:	6923      	ldr	r3, [r4, #16]
 8013990:	443b      	add	r3, r7
 8013992:	6123      	str	r3, [r4, #16]
 8013994:	2000      	movs	r0, #0
 8013996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399a:	bf00      	nop
 801399c:	0801469b 	.word	0x0801469b

080139a0 <_scanf_i>:
 80139a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a4:	4698      	mov	r8, r3
 80139a6:	4b76      	ldr	r3, [pc, #472]	; (8013b80 <_scanf_i+0x1e0>)
 80139a8:	460c      	mov	r4, r1
 80139aa:	4682      	mov	sl, r0
 80139ac:	4616      	mov	r6, r2
 80139ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139b2:	b087      	sub	sp, #28
 80139b4:	ab03      	add	r3, sp, #12
 80139b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80139ba:	4b72      	ldr	r3, [pc, #456]	; (8013b84 <_scanf_i+0x1e4>)
 80139bc:	69a1      	ldr	r1, [r4, #24]
 80139be:	4a72      	ldr	r2, [pc, #456]	; (8013b88 <_scanf_i+0x1e8>)
 80139c0:	2903      	cmp	r1, #3
 80139c2:	bf18      	it	ne
 80139c4:	461a      	movne	r2, r3
 80139c6:	68a3      	ldr	r3, [r4, #8]
 80139c8:	9201      	str	r2, [sp, #4]
 80139ca:	1e5a      	subs	r2, r3, #1
 80139cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80139d0:	bf88      	it	hi
 80139d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80139d6:	4627      	mov	r7, r4
 80139d8:	bf82      	ittt	hi
 80139da:	eb03 0905 	addhi.w	r9, r3, r5
 80139de:	f240 135d 	movwhi	r3, #349	; 0x15d
 80139e2:	60a3      	strhi	r3, [r4, #8]
 80139e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80139e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80139ec:	bf98      	it	ls
 80139ee:	f04f 0900 	movls.w	r9, #0
 80139f2:	6023      	str	r3, [r4, #0]
 80139f4:	463d      	mov	r5, r7
 80139f6:	f04f 0b00 	mov.w	fp, #0
 80139fa:	6831      	ldr	r1, [r6, #0]
 80139fc:	ab03      	add	r3, sp, #12
 80139fe:	7809      	ldrb	r1, [r1, #0]
 8013a00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8013a04:	2202      	movs	r2, #2
 8013a06:	f7ec fbfb 	bl	8000200 <memchr>
 8013a0a:	b328      	cbz	r0, 8013a58 <_scanf_i+0xb8>
 8013a0c:	f1bb 0f01 	cmp.w	fp, #1
 8013a10:	d159      	bne.n	8013ac6 <_scanf_i+0x126>
 8013a12:	6862      	ldr	r2, [r4, #4]
 8013a14:	b92a      	cbnz	r2, 8013a22 <_scanf_i+0x82>
 8013a16:	6822      	ldr	r2, [r4, #0]
 8013a18:	2308      	movs	r3, #8
 8013a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013a1e:	6063      	str	r3, [r4, #4]
 8013a20:	6022      	str	r2, [r4, #0]
 8013a22:	6822      	ldr	r2, [r4, #0]
 8013a24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013a28:	6022      	str	r2, [r4, #0]
 8013a2a:	68a2      	ldr	r2, [r4, #8]
 8013a2c:	1e51      	subs	r1, r2, #1
 8013a2e:	60a1      	str	r1, [r4, #8]
 8013a30:	b192      	cbz	r2, 8013a58 <_scanf_i+0xb8>
 8013a32:	6832      	ldr	r2, [r6, #0]
 8013a34:	1c51      	adds	r1, r2, #1
 8013a36:	6031      	str	r1, [r6, #0]
 8013a38:	7812      	ldrb	r2, [r2, #0]
 8013a3a:	f805 2b01 	strb.w	r2, [r5], #1
 8013a3e:	6872      	ldr	r2, [r6, #4]
 8013a40:	3a01      	subs	r2, #1
 8013a42:	2a00      	cmp	r2, #0
 8013a44:	6072      	str	r2, [r6, #4]
 8013a46:	dc07      	bgt.n	8013a58 <_scanf_i+0xb8>
 8013a48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	4650      	mov	r0, sl
 8013a50:	4790      	blx	r2
 8013a52:	2800      	cmp	r0, #0
 8013a54:	f040 8085 	bne.w	8013b62 <_scanf_i+0x1c2>
 8013a58:	f10b 0b01 	add.w	fp, fp, #1
 8013a5c:	f1bb 0f03 	cmp.w	fp, #3
 8013a60:	d1cb      	bne.n	80139fa <_scanf_i+0x5a>
 8013a62:	6863      	ldr	r3, [r4, #4]
 8013a64:	b90b      	cbnz	r3, 8013a6a <_scanf_i+0xca>
 8013a66:	230a      	movs	r3, #10
 8013a68:	6063      	str	r3, [r4, #4]
 8013a6a:	6863      	ldr	r3, [r4, #4]
 8013a6c:	4947      	ldr	r1, [pc, #284]	; (8013b8c <_scanf_i+0x1ec>)
 8013a6e:	6960      	ldr	r0, [r4, #20]
 8013a70:	1ac9      	subs	r1, r1, r3
 8013a72:	f000 f89f 	bl	8013bb4 <__sccl>
 8013a76:	f04f 0b00 	mov.w	fp, #0
 8013a7a:	68a3      	ldr	r3, [r4, #8]
 8013a7c:	6822      	ldr	r2, [r4, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d03d      	beq.n	8013afe <_scanf_i+0x15e>
 8013a82:	6831      	ldr	r1, [r6, #0]
 8013a84:	6960      	ldr	r0, [r4, #20]
 8013a86:	f891 c000 	ldrb.w	ip, [r1]
 8013a8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	d035      	beq.n	8013afe <_scanf_i+0x15e>
 8013a92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013a96:	d124      	bne.n	8013ae2 <_scanf_i+0x142>
 8013a98:	0510      	lsls	r0, r2, #20
 8013a9a:	d522      	bpl.n	8013ae2 <_scanf_i+0x142>
 8013a9c:	f10b 0b01 	add.w	fp, fp, #1
 8013aa0:	f1b9 0f00 	cmp.w	r9, #0
 8013aa4:	d003      	beq.n	8013aae <_scanf_i+0x10e>
 8013aa6:	3301      	adds	r3, #1
 8013aa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8013aac:	60a3      	str	r3, [r4, #8]
 8013aae:	6873      	ldr	r3, [r6, #4]
 8013ab0:	3b01      	subs	r3, #1
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	6073      	str	r3, [r6, #4]
 8013ab6:	dd1b      	ble.n	8013af0 <_scanf_i+0x150>
 8013ab8:	6833      	ldr	r3, [r6, #0]
 8013aba:	3301      	adds	r3, #1
 8013abc:	6033      	str	r3, [r6, #0]
 8013abe:	68a3      	ldr	r3, [r4, #8]
 8013ac0:	3b01      	subs	r3, #1
 8013ac2:	60a3      	str	r3, [r4, #8]
 8013ac4:	e7d9      	b.n	8013a7a <_scanf_i+0xda>
 8013ac6:	f1bb 0f02 	cmp.w	fp, #2
 8013aca:	d1ae      	bne.n	8013a2a <_scanf_i+0x8a>
 8013acc:	6822      	ldr	r2, [r4, #0]
 8013ace:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8013ad2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8013ad6:	d1bf      	bne.n	8013a58 <_scanf_i+0xb8>
 8013ad8:	2310      	movs	r3, #16
 8013ada:	6063      	str	r3, [r4, #4]
 8013adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013ae0:	e7a2      	b.n	8013a28 <_scanf_i+0x88>
 8013ae2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8013ae6:	6022      	str	r2, [r4, #0]
 8013ae8:	780b      	ldrb	r3, [r1, #0]
 8013aea:	f805 3b01 	strb.w	r3, [r5], #1
 8013aee:	e7de      	b.n	8013aae <_scanf_i+0x10e>
 8013af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013af4:	4631      	mov	r1, r6
 8013af6:	4650      	mov	r0, sl
 8013af8:	4798      	blx	r3
 8013afa:	2800      	cmp	r0, #0
 8013afc:	d0df      	beq.n	8013abe <_scanf_i+0x11e>
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	05db      	lsls	r3, r3, #23
 8013b02:	d50d      	bpl.n	8013b20 <_scanf_i+0x180>
 8013b04:	42bd      	cmp	r5, r7
 8013b06:	d909      	bls.n	8013b1c <_scanf_i+0x17c>
 8013b08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b10:	4632      	mov	r2, r6
 8013b12:	4650      	mov	r0, sl
 8013b14:	4798      	blx	r3
 8013b16:	f105 39ff 	add.w	r9, r5, #4294967295
 8013b1a:	464d      	mov	r5, r9
 8013b1c:	42bd      	cmp	r5, r7
 8013b1e:	d02d      	beq.n	8013b7c <_scanf_i+0x1dc>
 8013b20:	6822      	ldr	r2, [r4, #0]
 8013b22:	f012 0210 	ands.w	r2, r2, #16
 8013b26:	d113      	bne.n	8013b50 <_scanf_i+0x1b0>
 8013b28:	702a      	strb	r2, [r5, #0]
 8013b2a:	6863      	ldr	r3, [r4, #4]
 8013b2c:	9e01      	ldr	r6, [sp, #4]
 8013b2e:	4639      	mov	r1, r7
 8013b30:	4650      	mov	r0, sl
 8013b32:	47b0      	blx	r6
 8013b34:	6821      	ldr	r1, [r4, #0]
 8013b36:	f8d8 3000 	ldr.w	r3, [r8]
 8013b3a:	f011 0f20 	tst.w	r1, #32
 8013b3e:	d013      	beq.n	8013b68 <_scanf_i+0x1c8>
 8013b40:	1d1a      	adds	r2, r3, #4
 8013b42:	f8c8 2000 	str.w	r2, [r8]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	6018      	str	r0, [r3, #0]
 8013b4a:	68e3      	ldr	r3, [r4, #12]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	60e3      	str	r3, [r4, #12]
 8013b50:	1bed      	subs	r5, r5, r7
 8013b52:	44ab      	add	fp, r5
 8013b54:	6925      	ldr	r5, [r4, #16]
 8013b56:	445d      	add	r5, fp
 8013b58:	6125      	str	r5, [r4, #16]
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	b007      	add	sp, #28
 8013b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b62:	f04f 0b00 	mov.w	fp, #0
 8013b66:	e7ca      	b.n	8013afe <_scanf_i+0x15e>
 8013b68:	1d1a      	adds	r2, r3, #4
 8013b6a:	f8c8 2000 	str.w	r2, [r8]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	f011 0f01 	tst.w	r1, #1
 8013b74:	bf14      	ite	ne
 8013b76:	8018      	strhne	r0, [r3, #0]
 8013b78:	6018      	streq	r0, [r3, #0]
 8013b7a:	e7e6      	b.n	8013b4a <_scanf_i+0x1aa>
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	e7ed      	b.n	8013b5c <_scanf_i+0x1bc>
 8013b80:	080142e0 	.word	0x080142e0
 8013b84:	08013d09 	.word	0x08013d09
 8013b88:	080114f1 	.word	0x080114f1
 8013b8c:	080149f6 	.word	0x080149f6

08013b90 <_read_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4d07      	ldr	r5, [pc, #28]	; (8013bb0 <_read_r+0x20>)
 8013b94:	4604      	mov	r4, r0
 8013b96:	4608      	mov	r0, r1
 8013b98:	4611      	mov	r1, r2
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	602a      	str	r2, [r5, #0]
 8013b9e:	461a      	mov	r2, r3
 8013ba0:	f7ef fd88 	bl	80036b4 <_read>
 8013ba4:	1c43      	adds	r3, r0, #1
 8013ba6:	d102      	bne.n	8013bae <_read_r+0x1e>
 8013ba8:	682b      	ldr	r3, [r5, #0]
 8013baa:	b103      	cbz	r3, 8013bae <_read_r+0x1e>
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	bd38      	pop	{r3, r4, r5, pc}
 8013bb0:	2000306c 	.word	0x2000306c

08013bb4 <__sccl>:
 8013bb4:	b570      	push	{r4, r5, r6, lr}
 8013bb6:	780b      	ldrb	r3, [r1, #0]
 8013bb8:	4604      	mov	r4, r0
 8013bba:	2b5e      	cmp	r3, #94	; 0x5e
 8013bbc:	bf0b      	itete	eq
 8013bbe:	784b      	ldrbeq	r3, [r1, #1]
 8013bc0:	1c48      	addne	r0, r1, #1
 8013bc2:	1c88      	addeq	r0, r1, #2
 8013bc4:	2200      	movne	r2, #0
 8013bc6:	bf08      	it	eq
 8013bc8:	2201      	moveq	r2, #1
 8013bca:	1e61      	subs	r1, r4, #1
 8013bcc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013bd0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013bd4:	42a9      	cmp	r1, r5
 8013bd6:	d1fb      	bne.n	8013bd0 <__sccl+0x1c>
 8013bd8:	b90b      	cbnz	r3, 8013bde <__sccl+0x2a>
 8013bda:	3801      	subs	r0, #1
 8013bdc:	bd70      	pop	{r4, r5, r6, pc}
 8013bde:	f082 0201 	eor.w	r2, r2, #1
 8013be2:	54e2      	strb	r2, [r4, r3]
 8013be4:	4605      	mov	r5, r0
 8013be6:	4628      	mov	r0, r5
 8013be8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8013bec:	292d      	cmp	r1, #45	; 0x2d
 8013bee:	d006      	beq.n	8013bfe <__sccl+0x4a>
 8013bf0:	295d      	cmp	r1, #93	; 0x5d
 8013bf2:	d0f3      	beq.n	8013bdc <__sccl+0x28>
 8013bf4:	b909      	cbnz	r1, 8013bfa <__sccl+0x46>
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	e7f0      	b.n	8013bdc <__sccl+0x28>
 8013bfa:	460b      	mov	r3, r1
 8013bfc:	e7f1      	b.n	8013be2 <__sccl+0x2e>
 8013bfe:	786e      	ldrb	r6, [r5, #1]
 8013c00:	2e5d      	cmp	r6, #93	; 0x5d
 8013c02:	d0fa      	beq.n	8013bfa <__sccl+0x46>
 8013c04:	42b3      	cmp	r3, r6
 8013c06:	dcf8      	bgt.n	8013bfa <__sccl+0x46>
 8013c08:	3502      	adds	r5, #2
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	3101      	adds	r1, #1
 8013c0e:	428e      	cmp	r6, r1
 8013c10:	5462      	strb	r2, [r4, r1]
 8013c12:	dcfb      	bgt.n	8013c0c <__sccl+0x58>
 8013c14:	1af1      	subs	r1, r6, r3
 8013c16:	3901      	subs	r1, #1
 8013c18:	1c58      	adds	r0, r3, #1
 8013c1a:	42b3      	cmp	r3, r6
 8013c1c:	bfa8      	it	ge
 8013c1e:	2100      	movge	r1, #0
 8013c20:	1843      	adds	r3, r0, r1
 8013c22:	e7e0      	b.n	8013be6 <__sccl+0x32>

08013c24 <_strtoul_l.constprop.0>:
 8013c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c28:	4f36      	ldr	r7, [pc, #216]	; (8013d04 <_strtoul_l.constprop.0+0xe0>)
 8013c2a:	4686      	mov	lr, r0
 8013c2c:	460d      	mov	r5, r1
 8013c2e:	4628      	mov	r0, r5
 8013c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c34:	5de6      	ldrb	r6, [r4, r7]
 8013c36:	f016 0608 	ands.w	r6, r6, #8
 8013c3a:	d1f8      	bne.n	8013c2e <_strtoul_l.constprop.0+0xa>
 8013c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8013c3e:	d12f      	bne.n	8013ca0 <_strtoul_l.constprop.0+0x7c>
 8013c40:	782c      	ldrb	r4, [r5, #0]
 8013c42:	2601      	movs	r6, #1
 8013c44:	1c85      	adds	r5, r0, #2
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d057      	beq.n	8013cfa <_strtoul_l.constprop.0+0xd6>
 8013c4a:	2b10      	cmp	r3, #16
 8013c4c:	d109      	bne.n	8013c62 <_strtoul_l.constprop.0+0x3e>
 8013c4e:	2c30      	cmp	r4, #48	; 0x30
 8013c50:	d107      	bne.n	8013c62 <_strtoul_l.constprop.0+0x3e>
 8013c52:	7828      	ldrb	r0, [r5, #0]
 8013c54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013c58:	2858      	cmp	r0, #88	; 0x58
 8013c5a:	d149      	bne.n	8013cf0 <_strtoul_l.constprop.0+0xcc>
 8013c5c:	786c      	ldrb	r4, [r5, #1]
 8013c5e:	2310      	movs	r3, #16
 8013c60:	3502      	adds	r5, #2
 8013c62:	f04f 38ff 	mov.w	r8, #4294967295
 8013c66:	2700      	movs	r7, #0
 8013c68:	fbb8 f8f3 	udiv	r8, r8, r3
 8013c6c:	fb03 f908 	mul.w	r9, r3, r8
 8013c70:	ea6f 0909 	mvn.w	r9, r9
 8013c74:	4638      	mov	r0, r7
 8013c76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013c7a:	f1bc 0f09 	cmp.w	ip, #9
 8013c7e:	d814      	bhi.n	8013caa <_strtoul_l.constprop.0+0x86>
 8013c80:	4664      	mov	r4, ip
 8013c82:	42a3      	cmp	r3, r4
 8013c84:	dd22      	ble.n	8013ccc <_strtoul_l.constprop.0+0xa8>
 8013c86:	2f00      	cmp	r7, #0
 8013c88:	db1d      	blt.n	8013cc6 <_strtoul_l.constprop.0+0xa2>
 8013c8a:	4580      	cmp	r8, r0
 8013c8c:	d31b      	bcc.n	8013cc6 <_strtoul_l.constprop.0+0xa2>
 8013c8e:	d101      	bne.n	8013c94 <_strtoul_l.constprop.0+0x70>
 8013c90:	45a1      	cmp	r9, r4
 8013c92:	db18      	blt.n	8013cc6 <_strtoul_l.constprop.0+0xa2>
 8013c94:	fb00 4003 	mla	r0, r0, r3, r4
 8013c98:	2701      	movs	r7, #1
 8013c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c9e:	e7ea      	b.n	8013c76 <_strtoul_l.constprop.0+0x52>
 8013ca0:	2c2b      	cmp	r4, #43	; 0x2b
 8013ca2:	bf04      	itt	eq
 8013ca4:	782c      	ldrbeq	r4, [r5, #0]
 8013ca6:	1c85      	addeq	r5, r0, #2
 8013ca8:	e7cd      	b.n	8013c46 <_strtoul_l.constprop.0+0x22>
 8013caa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013cae:	f1bc 0f19 	cmp.w	ip, #25
 8013cb2:	d801      	bhi.n	8013cb8 <_strtoul_l.constprop.0+0x94>
 8013cb4:	3c37      	subs	r4, #55	; 0x37
 8013cb6:	e7e4      	b.n	8013c82 <_strtoul_l.constprop.0+0x5e>
 8013cb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013cbc:	f1bc 0f19 	cmp.w	ip, #25
 8013cc0:	d804      	bhi.n	8013ccc <_strtoul_l.constprop.0+0xa8>
 8013cc2:	3c57      	subs	r4, #87	; 0x57
 8013cc4:	e7dd      	b.n	8013c82 <_strtoul_l.constprop.0+0x5e>
 8013cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8013cca:	e7e6      	b.n	8013c9a <_strtoul_l.constprop.0+0x76>
 8013ccc:	2f00      	cmp	r7, #0
 8013cce:	da07      	bge.n	8013ce0 <_strtoul_l.constprop.0+0xbc>
 8013cd0:	2322      	movs	r3, #34	; 0x22
 8013cd2:	f8ce 3000 	str.w	r3, [lr]
 8013cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013cda:	b932      	cbnz	r2, 8013cea <_strtoul_l.constprop.0+0xc6>
 8013cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013ce0:	b106      	cbz	r6, 8013ce4 <_strtoul_l.constprop.0+0xc0>
 8013ce2:	4240      	negs	r0, r0
 8013ce4:	2a00      	cmp	r2, #0
 8013ce6:	d0f9      	beq.n	8013cdc <_strtoul_l.constprop.0+0xb8>
 8013ce8:	b107      	cbz	r7, 8013cec <_strtoul_l.constprop.0+0xc8>
 8013cea:	1e69      	subs	r1, r5, #1
 8013cec:	6011      	str	r1, [r2, #0]
 8013cee:	e7f5      	b.n	8013cdc <_strtoul_l.constprop.0+0xb8>
 8013cf0:	2430      	movs	r4, #48	; 0x30
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d1b5      	bne.n	8013c62 <_strtoul_l.constprop.0+0x3e>
 8013cf6:	2308      	movs	r3, #8
 8013cf8:	e7b3      	b.n	8013c62 <_strtoul_l.constprop.0+0x3e>
 8013cfa:	2c30      	cmp	r4, #48	; 0x30
 8013cfc:	d0a9      	beq.n	8013c52 <_strtoul_l.constprop.0+0x2e>
 8013cfe:	230a      	movs	r3, #10
 8013d00:	e7af      	b.n	8013c62 <_strtoul_l.constprop.0+0x3e>
 8013d02:	bf00      	nop
 8013d04:	0801469b 	.word	0x0801469b

08013d08 <_strtoul_r>:
 8013d08:	f7ff bf8c 	b.w	8013c24 <_strtoul_l.constprop.0>

08013d0c <__submore>:
 8013d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d10:	460c      	mov	r4, r1
 8013d12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d18:	4299      	cmp	r1, r3
 8013d1a:	d11d      	bne.n	8013d58 <__submore+0x4c>
 8013d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013d20:	f7fc fcae 	bl	8010680 <_malloc_r>
 8013d24:	b918      	cbnz	r0, 8013d2e <__submore+0x22>
 8013d26:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d32:	63a3      	str	r3, [r4, #56]	; 0x38
 8013d34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013d38:	6360      	str	r0, [r4, #52]	; 0x34
 8013d3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8013d3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013d42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013d46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013d4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8013d4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8013d52:	6020      	str	r0, [r4, #0]
 8013d54:	2000      	movs	r0, #0
 8013d56:	e7e8      	b.n	8013d2a <__submore+0x1e>
 8013d58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013d5a:	0077      	lsls	r7, r6, #1
 8013d5c:	463a      	mov	r2, r7
 8013d5e:	f000 f85d 	bl	8013e1c <_realloc_r>
 8013d62:	4605      	mov	r5, r0
 8013d64:	2800      	cmp	r0, #0
 8013d66:	d0de      	beq.n	8013d26 <__submore+0x1a>
 8013d68:	eb00 0806 	add.w	r8, r0, r6
 8013d6c:	4601      	mov	r1, r0
 8013d6e:	4632      	mov	r2, r6
 8013d70:	4640      	mov	r0, r8
 8013d72:	f7fc fc03 	bl	801057c <memcpy>
 8013d76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8013d7a:	f8c4 8000 	str.w	r8, [r4]
 8013d7e:	e7e9      	b.n	8013d54 <__submore+0x48>

08013d80 <_fstat_r>:
 8013d80:	b538      	push	{r3, r4, r5, lr}
 8013d82:	4d07      	ldr	r5, [pc, #28]	; (8013da0 <_fstat_r+0x20>)
 8013d84:	2300      	movs	r3, #0
 8013d86:	4604      	mov	r4, r0
 8013d88:	4608      	mov	r0, r1
 8013d8a:	4611      	mov	r1, r2
 8013d8c:	602b      	str	r3, [r5, #0]
 8013d8e:	f7ef fcba 	bl	8003706 <_fstat>
 8013d92:	1c43      	adds	r3, r0, #1
 8013d94:	d102      	bne.n	8013d9c <_fstat_r+0x1c>
 8013d96:	682b      	ldr	r3, [r5, #0]
 8013d98:	b103      	cbz	r3, 8013d9c <_fstat_r+0x1c>
 8013d9a:	6023      	str	r3, [r4, #0]
 8013d9c:	bd38      	pop	{r3, r4, r5, pc}
 8013d9e:	bf00      	nop
 8013da0:	2000306c 	.word	0x2000306c

08013da4 <_isatty_r>:
 8013da4:	b538      	push	{r3, r4, r5, lr}
 8013da6:	4d06      	ldr	r5, [pc, #24]	; (8013dc0 <_isatty_r+0x1c>)
 8013da8:	2300      	movs	r3, #0
 8013daa:	4604      	mov	r4, r0
 8013dac:	4608      	mov	r0, r1
 8013dae:	602b      	str	r3, [r5, #0]
 8013db0:	f7ef fcb9 	bl	8003726 <_isatty>
 8013db4:	1c43      	adds	r3, r0, #1
 8013db6:	d102      	bne.n	8013dbe <_isatty_r+0x1a>
 8013db8:	682b      	ldr	r3, [r5, #0]
 8013dba:	b103      	cbz	r3, 8013dbe <_isatty_r+0x1a>
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	bd38      	pop	{r3, r4, r5, pc}
 8013dc0:	2000306c 	.word	0x2000306c

08013dc4 <__ascii_mbtowc>:
 8013dc4:	b082      	sub	sp, #8
 8013dc6:	b901      	cbnz	r1, 8013dca <__ascii_mbtowc+0x6>
 8013dc8:	a901      	add	r1, sp, #4
 8013dca:	b142      	cbz	r2, 8013dde <__ascii_mbtowc+0x1a>
 8013dcc:	b14b      	cbz	r3, 8013de2 <__ascii_mbtowc+0x1e>
 8013dce:	7813      	ldrb	r3, [r2, #0]
 8013dd0:	600b      	str	r3, [r1, #0]
 8013dd2:	7812      	ldrb	r2, [r2, #0]
 8013dd4:	1e10      	subs	r0, r2, #0
 8013dd6:	bf18      	it	ne
 8013dd8:	2001      	movne	r0, #1
 8013dda:	b002      	add	sp, #8
 8013ddc:	4770      	bx	lr
 8013dde:	4610      	mov	r0, r2
 8013de0:	e7fb      	b.n	8013dda <__ascii_mbtowc+0x16>
 8013de2:	f06f 0001 	mvn.w	r0, #1
 8013de6:	e7f8      	b.n	8013dda <__ascii_mbtowc+0x16>

08013de8 <memmove>:
 8013de8:	4288      	cmp	r0, r1
 8013dea:	b510      	push	{r4, lr}
 8013dec:	eb01 0402 	add.w	r4, r1, r2
 8013df0:	d902      	bls.n	8013df8 <memmove+0x10>
 8013df2:	4284      	cmp	r4, r0
 8013df4:	4623      	mov	r3, r4
 8013df6:	d807      	bhi.n	8013e08 <memmove+0x20>
 8013df8:	1e43      	subs	r3, r0, #1
 8013dfa:	42a1      	cmp	r1, r4
 8013dfc:	d008      	beq.n	8013e10 <memmove+0x28>
 8013dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e06:	e7f8      	b.n	8013dfa <memmove+0x12>
 8013e08:	4402      	add	r2, r0
 8013e0a:	4601      	mov	r1, r0
 8013e0c:	428a      	cmp	r2, r1
 8013e0e:	d100      	bne.n	8013e12 <memmove+0x2a>
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e1a:	e7f7      	b.n	8013e0c <memmove+0x24>

08013e1c <_realloc_r>:
 8013e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e20:	4680      	mov	r8, r0
 8013e22:	4614      	mov	r4, r2
 8013e24:	460e      	mov	r6, r1
 8013e26:	b921      	cbnz	r1, 8013e32 <_realloc_r+0x16>
 8013e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e2c:	4611      	mov	r1, r2
 8013e2e:	f7fc bc27 	b.w	8010680 <_malloc_r>
 8013e32:	b92a      	cbnz	r2, 8013e40 <_realloc_r+0x24>
 8013e34:	f7fc fbb8 	bl	80105a8 <_free_r>
 8013e38:	4625      	mov	r5, r4
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e40:	f000 f828 	bl	8013e94 <_malloc_usable_size_r>
 8013e44:	4284      	cmp	r4, r0
 8013e46:	4607      	mov	r7, r0
 8013e48:	d802      	bhi.n	8013e50 <_realloc_r+0x34>
 8013e4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e4e:	d812      	bhi.n	8013e76 <_realloc_r+0x5a>
 8013e50:	4621      	mov	r1, r4
 8013e52:	4640      	mov	r0, r8
 8013e54:	f7fc fc14 	bl	8010680 <_malloc_r>
 8013e58:	4605      	mov	r5, r0
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d0ed      	beq.n	8013e3a <_realloc_r+0x1e>
 8013e5e:	42bc      	cmp	r4, r7
 8013e60:	4622      	mov	r2, r4
 8013e62:	4631      	mov	r1, r6
 8013e64:	bf28      	it	cs
 8013e66:	463a      	movcs	r2, r7
 8013e68:	f7fc fb88 	bl	801057c <memcpy>
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	4640      	mov	r0, r8
 8013e70:	f7fc fb9a 	bl	80105a8 <_free_r>
 8013e74:	e7e1      	b.n	8013e3a <_realloc_r+0x1e>
 8013e76:	4635      	mov	r5, r6
 8013e78:	e7df      	b.n	8013e3a <_realloc_r+0x1e>

08013e7a <__ascii_wctomb>:
 8013e7a:	b149      	cbz	r1, 8013e90 <__ascii_wctomb+0x16>
 8013e7c:	2aff      	cmp	r2, #255	; 0xff
 8013e7e:	bf85      	ittet	hi
 8013e80:	238a      	movhi	r3, #138	; 0x8a
 8013e82:	6003      	strhi	r3, [r0, #0]
 8013e84:	700a      	strbls	r2, [r1, #0]
 8013e86:	f04f 30ff 	movhi.w	r0, #4294967295
 8013e8a:	bf98      	it	ls
 8013e8c:	2001      	movls	r0, #1
 8013e8e:	4770      	bx	lr
 8013e90:	4608      	mov	r0, r1
 8013e92:	4770      	bx	lr

08013e94 <_malloc_usable_size_r>:
 8013e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e98:	1f18      	subs	r0, r3, #4
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	bfbc      	itt	lt
 8013e9e:	580b      	ldrlt	r3, [r1, r0]
 8013ea0:	18c0      	addlt	r0, r0, r3
 8013ea2:	4770      	bx	lr

08013ea4 <_init>:
 8013ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ea6:	bf00      	nop
 8013ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eaa:	bc08      	pop	{r3}
 8013eac:	469e      	mov	lr, r3
 8013eae:	4770      	bx	lr

08013eb0 <_fini>:
 8013eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eb2:	bf00      	nop
 8013eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013eb6:	bc08      	pop	{r3}
 8013eb8:	469e      	mov	lr, r3
 8013eba:	4770      	bx	lr
